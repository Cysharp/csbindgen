// auto-generated via csbindgen

#[allow(unused)]
use ::std::os::raw::*;




#[no_mangle]
pub extern "C" fn csbindgen_quiche___va_start(
    arg1: *mut *mut c_char    
)
{
    unsafe {
        return __va_start(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___security_init_cookie(
    
)
{
    unsafe {
        return __security_init_cookie(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___security_check_cookie(
    _StackCookie:  usize    
)
{
    unsafe {
        return __security_check_cookie(
            _StackCookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___C_specific_handler(
    ExceptionRecord: *mut _EXCEPTION_RECORD,
    EstablisherFrame: *mut c_void,
    ContextRecord: *mut _CONTEXT,
    DispatcherContext: *mut _DISPATCHER_CONTEXT    
) ->  EXCEPTION_DISPOSITION
{
    unsafe {
        return __C_specific_handler(
            ExceptionRecord,
            EstablisherFrame,
            ContextRecord,
            DispatcherContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__exception_code(
    
) ->  c_ulong
{
    unsafe {
        return _exception_code(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__exception_info(
    
) -> *mut c_void
{
    unsafe {
        return _exception_info(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__abnormal_termination(
    
) ->  c_int
{
    unsafe {
        return _abnormal_termination(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__invalid_parameter_noinfo(
    
)
{
    unsafe {
        return _invalid_parameter_noinfo(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___pctype_func(
    
) -> *const c_ushort
{
    unsafe {
        return __pctype_func(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___pwctype_func(
    
) -> *const wctype_t
{
    unsafe {
        return __pwctype_func(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswalnum(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswalnum(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswalpha(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswalpha(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswascii(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswascii(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswblank(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswblank(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswcntrl(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswcntrl(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswdigit(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswdigit(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswgraph(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswgraph(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswlower(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswlower(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswprint(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswprint(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswpunct(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswpunct(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswspace(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswspace(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswupper(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswupper(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswxdigit(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return iswxdigit(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___iswcsymf(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return __iswcsymf(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___iswcsym(
    _C:  wint_t    
) ->  c_int
{
    unsafe {
        return __iswcsym(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswalnum_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswalnum_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswalpha_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswalpha_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswblank_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswblank_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswcntrl_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswcntrl_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswdigit_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswdigit_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswgraph_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswgraph_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswlower_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswlower_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswprint_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswprint_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswpunct_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswpunct_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswspace_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswspace_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswupper_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswupper_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswxdigit_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswxdigit_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswcsymf_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswcsymf_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswcsym_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswcsym_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_towupper(
    _C:  wint_t    
) ->  wint_t
{
    unsafe {
        return towupper(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_towlower(
    _C:  wint_t    
) ->  wint_t
{
    unsafe {
        return towlower(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iswctype(
    _C:  wint_t,
    _Type:  wctype_t    
) ->  c_int
{
    unsafe {
        return iswctype(
            _C,
            _Type
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__towupper_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  wint_t
{
    unsafe {
        return _towupper_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__towlower_l(
    _C:  wint_t,
    _Locale:  _locale_t    
) ->  wint_t
{
    unsafe {
        return _towlower_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iswctype_l(
    _C:  wint_t,
    _Type:  wctype_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iswctype_l(
            _C,
            _Type,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isleadbyte(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isleadbyte(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isleadbyte_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isleadbyte_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_is_wctype(
    _C:  wint_t,
    _Type:  wctype_t    
) ->  c_int
{
    unsafe {
        return is_wctype(
            _C,
            _Type
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isctype(
    _C:  c_int,
    _Type:  c_int    
) ->  c_int
{
    unsafe {
        return _isctype(
            _C,
            _Type
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isctype_l(
    _C:  c_int,
    _Type:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isctype_l(
            _C,
            _Type,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isalpha(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isalpha(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isalpha_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isalpha_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isupper(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isupper(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isupper_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isupper_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_islower(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return islower(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__islower_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _islower_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isdigit(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isdigit(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isdigit_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isdigit_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isxdigit(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isxdigit(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isxdigit_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isxdigit_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isspace(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isspace(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isspace_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isspace_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ispunct(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return ispunct(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ispunct_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _ispunct_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isblank(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isblank(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isblank_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isblank_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isalnum(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isalnum(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isalnum_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isalnum_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isprint(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isprint(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isprint_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isprint_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_isgraph(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return isgraph(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__isgraph_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _isgraph_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_iscntrl(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return iscntrl(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__iscntrl_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _iscntrl_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_toupper(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return toupper(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_tolower(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return tolower(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__tolower(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return _tolower(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__tolower_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _tolower_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__toupper(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return _toupper(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__toupper_l(
    _C:  c_int,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _toupper_l(
            _C,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___isascii(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return __isascii(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___toascii(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return __toascii(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___iscsymf(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return __iscsymf(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___iscsym(
    _C:  c_int    
) ->  c_int
{
    unsafe {
        return __iscsym(
            _C
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche____mb_cur_max_func(
    
) ->  c_int
{
    unsafe {
        return ___mb_cur_max_func(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche____mb_cur_max_l_func(
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return ___mb_cur_max_l_func(
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__rotl8(
    Value:  c_uchar,
    Shift:  c_uchar    
) ->  c_uchar
{
    unsafe {
        return _rotl8(
            Value,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__rotl16(
    Value:  c_ushort,
    Shift:  c_uchar    
) ->  c_ushort
{
    unsafe {
        return _rotl16(
            Value,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__rotr8(
    Value:  c_uchar,
    Shift:  c_uchar    
) ->  c_uchar
{
    unsafe {
        return _rotr8(
            Value,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__rotr16(
    Value:  c_ushort,
    Shift:  c_uchar    
) ->  c_ushort
{
    unsafe {
        return _rotr16(
            Value,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__rotl(
    Value:  c_uint,
    Shift:  c_int    
) ->  c_uint
{
    unsafe {
        return _rotl(
            Value,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__rotl64(
    Value:  c_ulonglong,
    Shift:  c_int    
) ->  c_ulonglong
{
    unsafe {
        return _rotl64(
            Value,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__rotr(
    Value:  c_uint,
    Shift:  c_int    
) ->  c_uint
{
    unsafe {
        return _rotr(
            Value,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__rotr64(
    Value:  c_ulonglong,
    Shift:  c_int    
) ->  c_ulonglong
{
    unsafe {
        return _rotr64(
            Value,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__errno(
    
) -> *mut c_int
{
    unsafe {
        return _errno(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__set_errno(
    _Value:  c_int    
) ->  errno_t
{
    unsafe {
        return _set_errno(
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_errno(
    _Value: *mut c_int    
) ->  errno_t
{
    unsafe {
        return _get_errno(
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___doserrno(
    
) -> *mut c_ulong
{
    unsafe {
        return __doserrno(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__set_doserrno(
    _Value:  c_ulong    
) ->  errno_t
{
    unsafe {
        return _set_doserrno(
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_doserrno(
    _Value: *mut c_ulong    
) ->  errno_t
{
    unsafe {
        return _get_doserrno(
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_memchr(
    _Buf: *const c_void,
    _Val:  c_int,
    _MaxCount:  c_ulonglong    
) -> *mut c_void
{
    unsafe {
        return memchr(
            _Buf,
            _Val,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_memcmp(
    _Buf1: *const c_void,
    _Buf2: *const c_void,
    _Size:  c_ulonglong    
) ->  c_int
{
    unsafe {
        return memcmp(
            _Buf1,
            _Buf2,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_memcpy(
    _Dst: *mut c_void,
    _Src: *const c_void,
    _Size:  c_ulonglong    
) -> *mut c_void
{
    unsafe {
        return memcpy(
            _Dst,
            _Src,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_memmove(
    _Dst: *mut c_void,
    _Src: *const c_void,
    _Size:  c_ulonglong    
) -> *mut c_void
{
    unsafe {
        return memmove(
            _Dst,
            _Src,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_memset(
    _Dst: *mut c_void,
    _Val:  c_int,
    _Size:  c_ulonglong    
) -> *mut c_void
{
    unsafe {
        return memset(
            _Dst,
            _Val,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strchr(
    _Str: *const c_char,
    _Val:  c_int    
) -> *mut c_char
{
    unsafe {
        return strchr(
            _Str,
            _Val
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strrchr(
    _Str: *const c_char,
    _Ch:  c_int    
) -> *mut c_char
{
    unsafe {
        return strrchr(
            _Str,
            _Ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strstr(
    _Str: *const c_char,
    _SubStr: *const c_char    
) -> *mut c_char
{
    unsafe {
        return strstr(
            _Str,
            _SubStr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcschr(
    _Str: *const c_ushort,
    _Ch:  c_ushort    
) -> *mut c_ushort
{
    unsafe {
        return wcschr(
            _Str,
            _Ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsrchr(
    _Str: *const wchar_t,
    _Ch:  wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcsrchr(
            _Str,
            _Ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsstr(
    _Str: *const wchar_t,
    _SubStr: *const wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcsstr(
            _Str,
            _SubStr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__memicmp(
    _Buf1: *const c_void,
    _Buf2: *const c_void,
    _Size:  usize    
) ->  c_int
{
    unsafe {
        return _memicmp(
            _Buf1,
            _Buf2,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__memicmp_l(
    _Buf1: *const c_void,
    _Buf2: *const c_void,
    _Size:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _memicmp_l(
            _Buf1,
            _Buf2,
            _Size,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_memccpy(
    _Dst: *mut c_void,
    _Src: *const c_void,
    _Val:  c_int,
    _Size:  c_ulonglong    
) -> *mut c_void
{
    unsafe {
        return memccpy(
            _Dst,
            _Src,
            _Val,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_memicmp(
    _Buf1: *const c_void,
    _Buf2: *const c_void,
    _Size:  usize    
) ->  c_int
{
    unsafe {
        return memicmp(
            _Buf1,
            _Buf2,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcscat_s(
    _Destination: *mut wchar_t,
    _SizeInWords:  rsize_t,
    _Source: *const wchar_t    
) ->  errno_t
{
    unsafe {
        return wcscat_s(
            _Destination,
            _SizeInWords,
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcscpy_s(
    _Destination: *mut wchar_t,
    _SizeInWords:  rsize_t,
    _Source: *const wchar_t    
) ->  errno_t
{
    unsafe {
        return wcscpy_s(
            _Destination,
            _SizeInWords,
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsncat_s(
    _Destination: *mut wchar_t,
    _SizeInWords:  rsize_t,
    _Source: *const wchar_t,
    _MaxCount:  rsize_t    
) ->  errno_t
{
    unsafe {
        return wcsncat_s(
            _Destination,
            _SizeInWords,
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsncpy_s(
    _Destination: *mut wchar_t,
    _SizeInWords:  rsize_t,
    _Source: *const wchar_t,
    _MaxCount:  rsize_t    
) ->  errno_t
{
    unsafe {
        return wcsncpy_s(
            _Destination,
            _SizeInWords,
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstok_s(
    _String: *mut wchar_t,
    _Delimiter: *const wchar_t,
    _Context: *mut *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcstok_s(
            _String,
            _Delimiter,
            _Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsdup(
    _String: *const wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return _wcsdup(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcscat(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcscat(
            _Destination,
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcscmp(
    _String1: *const c_ushort,
    _String2: *const c_ushort    
) ->  c_int
{
    unsafe {
        return wcscmp(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcscpy(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcscpy(
            _Destination,
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcscspn(
    _String: *const wchar_t,
    _Control: *const wchar_t    
) ->  usize
{
    unsafe {
        return wcscspn(
            _String,
            _Control
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcslen(
    _String: *const c_ushort    
) ->  c_ulonglong
{
    unsafe {
        return wcslen(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsnlen(
    _Source: *const wchar_t,
    _MaxCount:  usize    
) ->  usize
{
    unsafe {
        return wcsnlen(
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsncat(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t,
    _Count:  usize    
) -> *mut wchar_t
{
    unsafe {
        return wcsncat(
            _Destination,
            _Source,
            _Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsncmp(
    _String1: *const c_ushort,
    _String2: *const c_ushort,
    _MaxCount:  c_ulonglong    
) ->  c_int
{
    unsafe {
        return wcsncmp(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsncpy(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t,
    _Count:  usize    
) -> *mut wchar_t
{
    unsafe {
        return wcsncpy(
            _Destination,
            _Source,
            _Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcspbrk(
    _String: *const wchar_t,
    _Control: *const wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcspbrk(
            _String,
            _Control
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsspn(
    _String: *const wchar_t,
    _Control: *const wchar_t    
) ->  usize
{
    unsafe {
        return wcsspn(
            _String,
            _Control
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstok(
    _String: *mut wchar_t,
    _Delimiter: *const wchar_t,
    _Context: *mut *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcstok(
            _String,
            _Delimiter,
            _Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcserror(
    _ErrorNumber:  c_int    
) -> *mut wchar_t
{
    unsafe {
        return _wcserror(
            _ErrorNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcserror_s(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize,
    _ErrorNumber:  c_int    
) ->  errno_t
{
    unsafe {
        return _wcserror_s(
            _Buffer,
            _SizeInWords,
            _ErrorNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___wcserror(
    _String: *const wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return __wcserror(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___wcserror_s(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize,
    _ErrorMessage: *const wchar_t    
) ->  errno_t
{
    unsafe {
        return __wcserror_s(
            _Buffer,
            _SizeInWords,
            _ErrorMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsicmp(
    _String1: *const wchar_t,
    _String2: *const wchar_t    
) ->  c_int
{
    unsafe {
        return _wcsicmp(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsicmp_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _wcsicmp_l(
            _String1,
            _String2,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsnicmp(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return _wcsnicmp(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsnicmp_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _wcsnicmp_l(
            _String1,
            _String2,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsnset_s(
    _Destination: *mut wchar_t,
    _SizeInWords:  usize,
    _Value:  wchar_t,
    _MaxCount:  usize    
) ->  errno_t
{
    unsafe {
        return _wcsnset_s(
            _Destination,
            _SizeInWords,
            _Value,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsnset(
    _String: *mut wchar_t,
    _Value:  wchar_t,
    _MaxCount:  usize    
) -> *mut wchar_t
{
    unsafe {
        return _wcsnset(
            _String,
            _Value,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsrev(
    _String: *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return _wcsrev(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsset_s(
    _Destination: *mut wchar_t,
    _SizeInWords:  usize,
    _Value:  wchar_t    
) ->  errno_t
{
    unsafe {
        return _wcsset_s(
            _Destination,
            _SizeInWords,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsset(
    _String: *mut wchar_t,
    _Value:  wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return _wcsset(
            _String,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcslwr_s(
    _String: *mut wchar_t,
    _SizeInWords:  usize    
) ->  errno_t
{
    unsafe {
        return _wcslwr_s(
            _String,
            _SizeInWords
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcslwr(
    _String: *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return _wcslwr(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcslwr_s_l(
    _String: *mut wchar_t,
    _SizeInWords:  usize,
    _Locale:  _locale_t    
) ->  errno_t
{
    unsafe {
        return _wcslwr_s_l(
            _String,
            _SizeInWords,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcslwr_l(
    _String: *mut wchar_t,
    _Locale:  _locale_t    
) -> *mut wchar_t
{
    unsafe {
        return _wcslwr_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsupr_s(
    _String: *mut wchar_t,
    _Size:  usize    
) ->  errno_t
{
    unsafe {
        return _wcsupr_s(
            _String,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsupr(
    _String: *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return _wcsupr(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsupr_s_l(
    _String: *mut wchar_t,
    _Size:  usize,
    _Locale:  _locale_t    
) ->  errno_t
{
    unsafe {
        return _wcsupr_s_l(
            _String,
            _Size,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsupr_l(
    _String: *mut wchar_t,
    _Locale:  _locale_t    
) -> *mut wchar_t
{
    unsafe {
        return _wcsupr_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsxfrm(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t,
    _MaxCount:  usize    
) ->  usize
{
    unsafe {
        return wcsxfrm(
            _Destination,
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsxfrm_l(
    _Destination: *mut wchar_t,
    _Source: *const wchar_t,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  usize
{
    unsafe {
        return _wcsxfrm_l(
            _Destination,
            _Source,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcscoll(
    _String1: *const wchar_t,
    _String2: *const wchar_t    
) ->  c_int
{
    unsafe {
        return wcscoll(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcscoll_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _wcscoll_l(
            _String1,
            _String2,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsicoll(
    _String1: *const wchar_t,
    _String2: *const wchar_t    
) ->  c_int
{
    unsafe {
        return _wcsicoll(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsicoll_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _wcsicoll_l(
            _String1,
            _String2,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsncoll(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return _wcsncoll(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsncoll_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _wcsncoll_l(
            _String1,
            _String2,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsnicoll(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return _wcsnicoll(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsnicoll_l(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _wcsnicoll_l(
            _String1,
            _String2,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsdup(
    _String: *const wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcsdup(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsicmp(
    _String1: *const wchar_t,
    _String2: *const wchar_t    
) ->  c_int
{
    unsafe {
        return wcsicmp(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsnicmp(
    _String1: *const wchar_t,
    _String2: *const wchar_t,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return wcsnicmp(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsnset(
    _String: *mut wchar_t,
    _Value:  wchar_t,
    _MaxCount:  usize    
) -> *mut wchar_t
{
    unsafe {
        return wcsnset(
            _String,
            _Value,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsrev(
    _String: *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcsrev(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsset(
    _String: *mut wchar_t,
    _Value:  wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcsset(
            _String,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcslwr(
    _String: *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcslwr(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsupr(
    _String: *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return wcsupr(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsicoll(
    _String1: *const wchar_t,
    _String2: *const wchar_t    
) ->  c_int
{
    unsafe {
        return wcsicoll(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strcpy_s(
    _Destination: *mut c_char,
    _SizeInBytes:  rsize_t,
    _Source: *const c_char    
) ->  errno_t
{
    unsafe {
        return strcpy_s(
            _Destination,
            _SizeInBytes,
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strcat_s(
    _Destination: *mut c_char,
    _SizeInBytes:  rsize_t,
    _Source: *const c_char    
) ->  errno_t
{
    unsafe {
        return strcat_s(
            _Destination,
            _SizeInBytes,
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strerror_s(
    _Buffer: *mut c_char,
    _SizeInBytes:  usize,
    _ErrorNumber:  c_int    
) ->  errno_t
{
    unsafe {
        return strerror_s(
            _Buffer,
            _SizeInBytes,
            _ErrorNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strncat_s(
    _Destination: *mut c_char,
    _SizeInBytes:  rsize_t,
    _Source: *const c_char,
    _MaxCount:  rsize_t    
) ->  errno_t
{
    unsafe {
        return strncat_s(
            _Destination,
            _SizeInBytes,
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strncpy_s(
    _Destination: *mut c_char,
    _SizeInBytes:  rsize_t,
    _Source: *const c_char,
    _MaxCount:  rsize_t    
) ->  errno_t
{
    unsafe {
        return strncpy_s(
            _Destination,
            _SizeInBytes,
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtok_s(
    _String: *mut c_char,
    _Delimiter: *const c_char,
    _Context: *mut *mut c_char    
) -> *mut c_char
{
    unsafe {
        return strtok_s(
            _String,
            _Delimiter,
            _Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__memccpy(
    _Dst: *mut c_void,
    _Src: *const c_void,
    _Val:  c_int,
    _MaxCount:  usize    
) -> *mut c_void
{
    unsafe {
        return _memccpy(
            _Dst,
            _Src,
            _Val,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strcat(
    _Destination: *mut c_char,
    _Source: *const c_char    
) -> *mut c_char
{
    unsafe {
        return strcat(
            _Destination,
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strcmp(
    _Str1: *const c_char,
    _Str2: *const c_char    
) ->  c_int
{
    unsafe {
        return strcmp(
            _Str1,
            _Str2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strcmpi(
    _String1: *const c_char,
    _String2: *const c_char    
) ->  c_int
{
    unsafe {
        return _strcmpi(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strcoll(
    _String1: *const c_char,
    _String2: *const c_char    
) ->  c_int
{
    unsafe {
        return strcoll(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strcoll_l(
    _String1: *const c_char,
    _String2: *const c_char,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _strcoll_l(
            _String1,
            _String2,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strcpy(
    _Destination: *mut c_char,
    _Source: *const c_char    
) -> *mut c_char
{
    unsafe {
        return strcpy(
            _Destination,
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strcspn(
    _Str: *const c_char,
    _Control: *const c_char    
) ->  c_ulonglong
{
    unsafe {
        return strcspn(
            _Str,
            _Control
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strdup(
    _Source: *const c_char    
) -> *mut c_char
{
    unsafe {
        return _strdup(
            _Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strerror(
    _ErrorMessage: *const c_char    
) -> *mut c_char
{
    unsafe {
        return _strerror(
            _ErrorMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strerror_s(
    _Buffer: *mut c_char,
    _SizeInBytes:  usize,
    _ErrorMessage: *const c_char    
) ->  errno_t
{
    unsafe {
        return _strerror_s(
            _Buffer,
            _SizeInBytes,
            _ErrorMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strerror(
    _ErrorMessage:  c_int    
) -> *mut c_char
{
    unsafe {
        return strerror(
            _ErrorMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__stricmp(
    _String1: *const c_char,
    _String2: *const c_char    
) ->  c_int
{
    unsafe {
        return _stricmp(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__stricoll(
    _String1: *const c_char,
    _String2: *const c_char    
) ->  c_int
{
    unsafe {
        return _stricoll(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__stricoll_l(
    _String1: *const c_char,
    _String2: *const c_char,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _stricoll_l(
            _String1,
            _String2,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__stricmp_l(
    _String1: *const c_char,
    _String2: *const c_char,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _stricmp_l(
            _String1,
            _String2,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strlen(
    _Str: *const c_char    
) ->  c_ulonglong
{
    unsafe {
        return strlen(
            _Str
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strlwr_s(
    _String: *mut c_char,
    _Size:  usize    
) ->  errno_t
{
    unsafe {
        return _strlwr_s(
            _String,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strlwr(
    _String: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return _strlwr(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strlwr_s_l(
    _String: *mut c_char,
    _Size:  usize,
    _Locale:  _locale_t    
) ->  errno_t
{
    unsafe {
        return _strlwr_s_l(
            _String,
            _Size,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strlwr_l(
    _String: *mut c_char,
    _Locale:  _locale_t    
) -> *mut c_char
{
    unsafe {
        return _strlwr_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strncat(
    _Destination: *mut c_char,
    _Source: *const c_char,
    _Count:  c_ulonglong    
) -> *mut c_char
{
    unsafe {
        return strncat(
            _Destination,
            _Source,
            _Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strncmp(
    _Str1: *const c_char,
    _Str2: *const c_char,
    _MaxCount:  c_ulonglong    
) ->  c_int
{
    unsafe {
        return strncmp(
            _Str1,
            _Str2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strnicmp(
    _String1: *const c_char,
    _String2: *const c_char,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return _strnicmp(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strnicmp_l(
    _String1: *const c_char,
    _String2: *const c_char,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _strnicmp_l(
            _String1,
            _String2,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strnicoll(
    _String1: *const c_char,
    _String2: *const c_char,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return _strnicoll(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strnicoll_l(
    _String1: *const c_char,
    _String2: *const c_char,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _strnicoll_l(
            _String1,
            _String2,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strncoll(
    _String1: *const c_char,
    _String2: *const c_char,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return _strncoll(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strncoll_l(
    _String1: *const c_char,
    _String2: *const c_char,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _strncoll_l(
            _String1,
            _String2,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___strncnt(
    _String: *const c_char,
    _Count:  usize    
) ->  usize
{
    unsafe {
        return __strncnt(
            _String,
            _Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strncpy(
    _Destination: *mut c_char,
    _Source: *const c_char,
    _Count:  c_ulonglong    
) -> *mut c_char
{
    unsafe {
        return strncpy(
            _Destination,
            _Source,
            _Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strnlen(
    _String: *const c_char,
    _MaxCount:  usize    
) ->  usize
{
    unsafe {
        return strnlen(
            _String,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strnset_s(
    _String: *mut c_char,
    _SizeInBytes:  usize,
    _Value:  c_int,
    _MaxCount:  usize    
) ->  errno_t
{
    unsafe {
        return _strnset_s(
            _String,
            _SizeInBytes,
            _Value,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strnset(
    _Destination: *mut c_char,
    _Value:  c_int,
    _Count:  usize    
) -> *mut c_char
{
    unsafe {
        return _strnset(
            _Destination,
            _Value,
            _Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strpbrk(
    _Str: *const c_char,
    _Control: *const c_char    
) -> *mut c_char
{
    unsafe {
        return strpbrk(
            _Str,
            _Control
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strrev(
    _Str: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return _strrev(
            _Str
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strset_s(
    _Destination: *mut c_char,
    _DestinationSize:  usize,
    _Value:  c_int    
) ->  errno_t
{
    unsafe {
        return _strset_s(
            _Destination,
            _DestinationSize,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strset(
    _Destination: *mut c_char,
    _Value:  c_int    
) -> *mut c_char
{
    unsafe {
        return _strset(
            _Destination,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strspn(
    _Str: *const c_char,
    _Control: *const c_char    
) ->  c_ulonglong
{
    unsafe {
        return strspn(
            _Str,
            _Control
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtok(
    _String: *mut c_char,
    _Delimiter: *const c_char    
) -> *mut c_char
{
    unsafe {
        return strtok(
            _String,
            _Delimiter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strupr_s(
    _String: *mut c_char,
    _Size:  usize    
) ->  errno_t
{
    unsafe {
        return _strupr_s(
            _String,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strupr(
    _String: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return _strupr(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strupr_s_l(
    _String: *mut c_char,
    _Size:  usize,
    _Locale:  _locale_t    
) ->  errno_t
{
    unsafe {
        return _strupr_s_l(
            _String,
            _Size,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strupr_l(
    _String: *mut c_char,
    _Locale:  _locale_t    
) -> *mut c_char
{
    unsafe {
        return _strupr_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strxfrm(
    _Destination: *mut c_char,
    _Source: *const c_char,
    _MaxCount:  c_ulonglong    
) ->  c_ulonglong
{
    unsafe {
        return strxfrm(
            _Destination,
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strxfrm_l(
    _Destination: *mut c_char,
    _Source: *const c_char,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  usize
{
    unsafe {
        return _strxfrm_l(
            _Destination,
            _Source,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strdup(
    _String: *const c_char    
) -> *mut c_char
{
    unsafe {
        return strdup(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strcmpi(
    _String1: *const c_char,
    _String2: *const c_char    
) ->  c_int
{
    unsafe {
        return strcmpi(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_stricmp(
    _String1: *const c_char,
    _String2: *const c_char    
) ->  c_int
{
    unsafe {
        return stricmp(
            _String1,
            _String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strlwr(
    _String: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return strlwr(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strnicmp(
    _String1: *const c_char,
    _String2: *const c_char,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return strnicmp(
            _String1,
            _String2,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strnset(
    _String: *mut c_char,
    _Value:  c_int,
    _MaxCount:  usize    
) -> *mut c_char
{
    unsafe {
        return strnset(
            _String,
            _Value,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strrev(
    _String: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return strrev(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strset(
    _String: *mut c_char,
    _Value:  c_int    
) -> *mut c_char
{
    unsafe {
        return strset(
            _String,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strupr(
    _String: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return strupr(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__bittest(
    Base: *const c_long,
    Offset:  c_long    
) ->  c_uchar
{
    unsafe {
        return _bittest(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__bittestandcomplement(
    Base: *mut c_long,
    Offset:  c_long    
) ->  c_uchar
{
    unsafe {
        return _bittestandcomplement(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__bittestandset(
    Base: *mut c_long,
    Offset:  c_long    
) ->  c_uchar
{
    unsafe {
        return _bittestandset(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__bittestandreset(
    Base: *mut c_long,
    Offset:  c_long    
) ->  c_uchar
{
    unsafe {
        return _bittestandreset(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__interlockedbittestandset(
    Base: *mut c_long,
    Offset:  c_long    
) ->  c_uchar
{
    unsafe {
        return _interlockedbittestandset(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__interlockedbittestandreset(
    Base: *mut c_long,
    Offset:  c_long    
) ->  c_uchar
{
    unsafe {
        return _interlockedbittestandreset(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__bittest64(
    Base: *const c_longlong,
    Offset:  c_longlong    
) ->  c_uchar
{
    unsafe {
        return _bittest64(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__bittestandcomplement64(
    Base: *mut c_longlong,
    Offset:  c_longlong    
) ->  c_uchar
{
    unsafe {
        return _bittestandcomplement64(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__bittestandset64(
    Base: *mut c_longlong,
    Offset:  c_longlong    
) ->  c_uchar
{
    unsafe {
        return _bittestandset64(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__bittestandreset64(
    Base: *mut c_longlong,
    Offset:  c_longlong    
) ->  c_uchar
{
    unsafe {
        return _bittestandreset64(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__interlockedbittestandset64(
    Base: *mut c_longlong,
    Offset:  c_longlong    
) ->  c_uchar
{
    unsafe {
        return _interlockedbittestandset64(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__interlockedbittestandreset64(
    Base: *mut c_longlong,
    Offset:  c_longlong    
) ->  c_uchar
{
    unsafe {
        return _interlockedbittestandreset64(
            Base,
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__BitScanForward(
    Index: *mut c_ulong,
    Mask:  c_ulong    
) ->  c_uchar
{
    unsafe {
        return _BitScanForward(
            Index,
            Mask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__BitScanReverse(
    Index: *mut c_ulong,
    Mask:  c_ulong    
) ->  c_uchar
{
    unsafe {
        return _BitScanReverse(
            Index,
            Mask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__BitScanForward64(
    Index: *mut c_ulong,
    Mask:  c_ulonglong    
) ->  c_uchar
{
    unsafe {
        return _BitScanForward64(
            Index,
            Mask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__BitScanReverse64(
    Index: *mut c_ulong,
    Mask:  c_ulonglong    
) ->  c_uchar
{
    unsafe {
        return _BitScanReverse64(
            Index,
            Mask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedIncrement16(
    Addend: *mut c_short    
) ->  c_short
{
    unsafe {
        return _InterlockedIncrement16(
            Addend
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedDecrement16(
    Addend: *mut c_short    
) ->  c_short
{
    unsafe {
        return _InterlockedDecrement16(
            Addend
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedCompareExchange16(
    Destination: *mut c_short,
    ExChange:  c_short,
    Comperand:  c_short    
) ->  c_short
{
    unsafe {
        return _InterlockedCompareExchange16(
            Destination,
            ExChange,
            Comperand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedAnd(
    Destination: *mut c_long,
    Value:  c_long    
) ->  c_long
{
    unsafe {
        return _InterlockedAnd(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedOr(
    Destination: *mut c_long,
    Value:  c_long    
) ->  c_long
{
    unsafe {
        return _InterlockedOr(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedXor(
    Destination: *mut c_long,
    Value:  c_long    
) ->  c_long
{
    unsafe {
        return _InterlockedXor(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedAnd64(
    Destination: *mut c_longlong,
    Value:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return _InterlockedAnd64(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedOr64(
    Destination: *mut c_longlong,
    Value:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return _InterlockedOr64(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedXor64(
    Destination: *mut c_longlong,
    Value:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return _InterlockedXor64(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedIncrement(
    Addend: *mut c_long    
) ->  c_long
{
    unsafe {
        return _InterlockedIncrement(
            Addend
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedDecrement(
    Addend: *mut c_long    
) ->  c_long
{
    unsafe {
        return _InterlockedDecrement(
            Addend
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedExchange(
    Target: *mut c_long,
    Value:  c_long    
) ->  c_long
{
    unsafe {
        return _InterlockedExchange(
            Target,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedExchangeAdd(
    Addend: *mut c_long,
    Value:  c_long    
) ->  c_long
{
    unsafe {
        return _InterlockedExchangeAdd(
            Addend,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedCompareExchange(
    Destination: *mut c_long,
    ExChange:  c_long,
    Comperand:  c_long    
) ->  c_long
{
    unsafe {
        return _InterlockedCompareExchange(
            Destination,
            ExChange,
            Comperand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedIncrement64(
    Addend: *mut c_longlong    
) ->  c_longlong
{
    unsafe {
        return _InterlockedIncrement64(
            Addend
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedDecrement64(
    Addend: *mut c_longlong    
) ->  c_longlong
{
    unsafe {
        return _InterlockedDecrement64(
            Addend
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedExchange64(
    Target: *mut c_longlong,
    Value:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return _InterlockedExchange64(
            Target,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedExchangeAdd64(
    Addend: *mut c_longlong,
    Value:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return _InterlockedExchangeAdd64(
            Addend,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedCompareExchange64(
    Destination: *mut c_longlong,
    ExChange:  c_longlong,
    Comperand:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return _InterlockedCompareExchange64(
            Destination,
            ExChange,
            Comperand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedCompareExchange128(
    Destination: *mut c_longlong,
    ExchangeHigh:  c_longlong,
    ExchangeLow:  c_longlong,
    ComparandResult: *mut c_longlong    
) ->  c_uchar
{
    unsafe {
        return _InterlockedCompareExchange128(
            Destination,
            ExchangeHigh,
            ExchangeLow,
            ComparandResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedCompareExchangePointer(
    Destination: *mut *mut c_void,
    Exchange: *mut c_void,
    Comperand: *mut c_void    
) -> *mut c_void
{
    unsafe {
        return _InterlockedCompareExchangePointer(
            Destination,
            Exchange,
            Comperand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedExchangePointer(
    Target: *mut *mut c_void,
    Value: *mut c_void    
) -> *mut c_void
{
    unsafe {
        return _InterlockedExchangePointer(
            Target,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedExchange8(
    Target: *mut c_char,
    Value:  c_char    
) ->  c_char
{
    unsafe {
        return _InterlockedExchange8(
            Target,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedExchange16(
    Destination: *mut c_short,
    ExChange:  c_short    
) ->  c_short
{
    unsafe {
        return _InterlockedExchange16(
            Destination,
            ExChange
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedExchangeAdd8(
    _Addend: *mut c_char,
    _Value:  c_char    
) ->  c_char
{
    unsafe {
        return _InterlockedExchangeAdd8(
            _Addend,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedAnd8(
    Destination: *mut c_char,
    Value:  c_char    
) ->  c_char
{
    unsafe {
        return _InterlockedAnd8(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedOr8(
    Destination: *mut c_char,
    Value:  c_char    
) ->  c_char
{
    unsafe {
        return _InterlockedOr8(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedXor8(
    Destination: *mut c_char,
    Value:  c_char    
) ->  c_char
{
    unsafe {
        return _InterlockedXor8(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedAnd16(
    Destination: *mut c_short,
    Value:  c_short    
) ->  c_short
{
    unsafe {
        return _InterlockedAnd16(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedOr16(
    Destination: *mut c_short,
    Value:  c_short    
) ->  c_short
{
    unsafe {
        return _InterlockedOr16(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__InterlockedXor16(
    Destination: *mut c_short,
    Value:  c_short    
) ->  c_short
{
    unsafe {
        return _InterlockedXor16(
            Destination,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___cpuidex(
    CPUInfo: *mut c_int,
    Function:  c_int,
    SubLeaf:  c_int    
)
{
    unsafe {
        return __cpuidex(
            CPUInfo,
            Function,
            SubLeaf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mm_clflush(
    Address: *const c_void    
)
{
    unsafe {
        return _mm_clflush(
            Address
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ReadWriteBarrier(
    
)
{
    unsafe {
        return _ReadWriteBarrier(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___faststorefence(
    
)
{
    unsafe {
        return __faststorefence(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mm_lfence(
    
)
{
    unsafe {
        return _mm_lfence(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mm_mfence(
    
)
{
    unsafe {
        return _mm_mfence(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mm_sfence(
    
)
{
    unsafe {
        return _mm_sfence(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mm_pause(
    
)
{
    unsafe {
        return _mm_pause(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mm_prefetch(
    a: *const c_char,
    sel:  c_int    
)
{
    unsafe {
        return _mm_prefetch(
            a,
            sel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__m_prefetchw(
    Source: *const c_void    
)
{
    unsafe {
        return _m_prefetchw(
            Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mm_getcsr(
    
) ->  c_uint
{
    unsafe {
        return _mm_getcsr(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mm_setcsr(
    MxCsr:  c_uint    
)
{
    unsafe {
        return _mm_setcsr(
            MxCsr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___getcallerseflags(
    
) ->  c_uint
{
    unsafe {
        return __getcallerseflags(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___segmentlimit(
    Selector:  DWORD    
) ->  DWORD
{
    unsafe {
        return __segmentlimit(
            Selector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___readpmc(
    Counter:  DWORD    
) ->  DWORD64
{
    unsafe {
        return __readpmc(
            Counter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___rdtsc(
    
) ->  c_ulonglong
{
    unsafe {
        return __rdtsc(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___movsb(
    Destination:  PBYTE,
    Source: *const BYTE,
    Count:  SIZE_T    
)
{
    unsafe {
        return __movsb(
            Destination,
            Source,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___movsw(
    Destination:  PWORD,
    Source: *const WORD,
    Count:  SIZE_T    
)
{
    unsafe {
        return __movsw(
            Destination,
            Source,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___movsd(
    Destination:  PDWORD,
    Source: *const DWORD,
    Count:  SIZE_T    
)
{
    unsafe {
        return __movsd(
            Destination,
            Source,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___movsq(
    Destination:  PDWORD64,
    Source: *const DWORD64,
    Count:  SIZE_T    
)
{
    unsafe {
        return __movsq(
            Destination,
            Source,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___stosb(
    Destination: *mut c_uchar,
    Value:  c_uchar,
    Count:  c_ulonglong    
)
{
    unsafe {
        return __stosb(
            Destination,
            Value,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___stosw(
    Destination:  PWORD,
    Value:  WORD,
    Count:  SIZE_T    
)
{
    unsafe {
        return __stosw(
            Destination,
            Value,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___stosd(
    Destination:  PDWORD,
    Value:  DWORD,
    Count:  SIZE_T    
)
{
    unsafe {
        return __stosd(
            Destination,
            Value,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___stosq(
    Destination:  PDWORD64,
    Value:  DWORD64,
    Count:  SIZE_T    
)
{
    unsafe {
        return __stosq(
            Destination,
            Value,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___mulh(
    Multiplier:  c_longlong,
    Multiplicand:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return __mulh(
            Multiplier,
            Multiplicand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___umulh(
    Multiplier:  c_ulonglong,
    Multiplicand:  c_ulonglong    
) ->  c_ulonglong
{
    unsafe {
        return __umulh(
            Multiplier,
            Multiplicand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___popcnt64(
    operand:  c_ulonglong    
) ->  c_ulonglong
{
    unsafe {
        return __popcnt64(
            operand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___shiftleft128(
    LowPart:  c_ulonglong,
    HighPart:  c_ulonglong,
    Shift:  c_uchar    
) ->  c_ulonglong
{
    unsafe {
        return __shiftleft128(
            LowPart,
            HighPart,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___shiftright128(
    LowPart:  c_ulonglong,
    HighPart:  c_ulonglong,
    Shift:  c_uchar    
) ->  c_ulonglong
{
    unsafe {
        return __shiftright128(
            LowPart,
            HighPart,
            Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mul128(
    Multiplier:  c_longlong,
    Multiplicand:  c_longlong,
    HighProduct: *mut c_longlong    
) ->  c_longlong
{
    unsafe {
        return _mul128(
            Multiplier,
            Multiplicand,
            HighProduct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__umul128(
    Multiplier:  c_ulonglong,
    Multiplicand:  c_ulonglong,
    HighProduct: *mut c_ulonglong    
) ->  c_ulonglong
{
    unsafe {
        return _umul128(
            Multiplier,
            Multiplicand,
            HighProduct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___readgsbyte(
    Offset:  c_ulong    
) ->  c_uchar
{
    unsafe {
        return __readgsbyte(
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___readgsword(
    Offset:  c_ulong    
) ->  c_ushort
{
    unsafe {
        return __readgsword(
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___readgsdword(
    Offset:  c_ulong    
) ->  c_ulong
{
    unsafe {
        return __readgsdword(
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___readgsqword(
    Offset:  c_ulong    
) ->  c_ulonglong
{
    unsafe {
        return __readgsqword(
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___writegsbyte(
    Offset:  DWORD,
    Data:  BYTE    
)
{
    unsafe {
        return __writegsbyte(
            Offset,
            Data
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___writegsword(
    Offset:  DWORD,
    Data:  WORD    
)
{
    unsafe {
        return __writegsword(
            Offset,
            Data
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___writegsdword(
    Offset:  DWORD,
    Data:  DWORD    
)
{
    unsafe {
        return __writegsdword(
            Offset,
            Data
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___writegsqword(
    Offset:  DWORD,
    Data:  DWORD64    
)
{
    unsafe {
        return __writegsqword(
            Offset,
            Data
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___incgsbyte(
    Offset:  DWORD    
)
{
    unsafe {
        return __incgsbyte(
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___addgsbyte(
    Offset:  DWORD,
    Value:  BYTE    
)
{
    unsafe {
        return __addgsbyte(
            Offset,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___incgsword(
    Offset:  DWORD    
)
{
    unsafe {
        return __incgsword(
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___addgsword(
    Offset:  DWORD,
    Value:  WORD    
)
{
    unsafe {
        return __addgsword(
            Offset,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___incgsdword(
    Offset:  DWORD    
)
{
    unsafe {
        return __incgsdword(
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___addgsdword(
    Offset:  DWORD,
    Value:  DWORD    
)
{
    unsafe {
        return __addgsdword(
            Offset,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___incgsqword(
    Offset:  DWORD    
)
{
    unsafe {
        return __incgsqword(
            Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___addgsqword(
    Offset:  DWORD,
    Value:  DWORD64    
)
{
    unsafe {
        return __addgsqword(
            Offset,
            Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlCaptureStackBackTrace(
    FramesToSkip:  DWORD,
    FramesToCapture:  DWORD,
    BackTrace: *mut PVOID,
    BackTraceHash:  PDWORD    
) ->  WORD
{
    unsafe {
        return RtlCaptureStackBackTrace(
            FramesToSkip,
            FramesToCapture,
            BackTrace,
            BackTraceHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlCaptureContext(
    ContextRecord:  PCONTEXT    
)
{
    unsafe {
        return RtlCaptureContext(
            ContextRecord
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlCaptureContext2(
    ContextRecord:  PCONTEXT    
)
{
    unsafe {
        return RtlCaptureContext2(
            ContextRecord
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlUnwind(
    TargetFrame:  PVOID,
    TargetIp:  PVOID,
    ExceptionRecord:  PEXCEPTION_RECORD,
    ReturnValue:  PVOID    
)
{
    unsafe {
        return RtlUnwind(
            TargetFrame,
            TargetIp,
            ExceptionRecord,
            ReturnValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlAddFunctionTable(
    FunctionTable:  PRUNTIME_FUNCTION,
    EntryCount:  DWORD,
    BaseAddress:  DWORD64    
) ->  BOOLEAN
{
    unsafe {
        return RtlAddFunctionTable(
            FunctionTable,
            EntryCount,
            BaseAddress
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlDeleteFunctionTable(
    FunctionTable:  PRUNTIME_FUNCTION    
) ->  BOOLEAN
{
    unsafe {
        return RtlDeleteFunctionTable(
            FunctionTable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlInstallFunctionTableCallback(
    TableIdentifier:  DWORD64,
    BaseAddress:  DWORD64,
    Length:  DWORD,
    Callback:  PGET_RUNTIME_FUNCTION_CALLBACK,
    Context:  PVOID,
    OutOfProcessCallbackDll:  PCWSTR    
) ->  BOOLEAN
{
    unsafe {
        return RtlInstallFunctionTableCallback(
            TableIdentifier,
            BaseAddress,
            Length,
            Callback,
            Context,
            OutOfProcessCallbackDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlAddGrowableFunctionTable(
    DynamicTable: *mut PVOID,
    FunctionTable:  PRUNTIME_FUNCTION,
    EntryCount:  DWORD,
    MaximumEntryCount:  DWORD,
    RangeBase:  ULONG_PTR,
    RangeEnd:  ULONG_PTR    
) ->  DWORD
{
    unsafe {
        return RtlAddGrowableFunctionTable(
            DynamicTable,
            FunctionTable,
            EntryCount,
            MaximumEntryCount,
            RangeBase,
            RangeEnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlGrowFunctionTable(
    DynamicTable:  PVOID,
    NewEntryCount:  DWORD    
)
{
    unsafe {
        return RtlGrowFunctionTable(
            DynamicTable,
            NewEntryCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlDeleteGrowableFunctionTable(
    DynamicTable:  PVOID    
)
{
    unsafe {
        return RtlDeleteGrowableFunctionTable(
            DynamicTable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlLookupFunctionEntry(
    ControlPc:  DWORD64,
    ImageBase:  PDWORD64,
    HistoryTable:  PUNWIND_HISTORY_TABLE    
) ->  PRUNTIME_FUNCTION
{
    unsafe {
        return RtlLookupFunctionEntry(
            ControlPc,
            ImageBase,
            HistoryTable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlRestoreContext(
    ContextRecord:  PCONTEXT,
    ExceptionRecord: *mut _EXCEPTION_RECORD    
)
{
    unsafe {
        return RtlRestoreContext(
            ContextRecord,
            ExceptionRecord
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlUnwindEx(
    TargetFrame:  PVOID,
    TargetIp:  PVOID,
    ExceptionRecord:  PEXCEPTION_RECORD,
    ReturnValue:  PVOID,
    ContextRecord:  PCONTEXT,
    HistoryTable:  PUNWIND_HISTORY_TABLE    
)
{
    unsafe {
        return RtlUnwindEx(
            TargetFrame,
            TargetIp,
            ExceptionRecord,
            ReturnValue,
            ContextRecord,
            HistoryTable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlVirtualUnwind(
    HandlerType:  DWORD,
    ImageBase:  DWORD64,
    ControlPc:  DWORD64,
    FunctionEntry:  PRUNTIME_FUNCTION,
    ContextRecord:  PCONTEXT,
    HandlerData: *mut PVOID,
    EstablisherFrame:  PDWORD64,
    ContextPointers:  PKNONVOLATILE_CONTEXT_POINTERS    
) ->  PEXCEPTION_ROUTINE
{
    unsafe {
        return RtlVirtualUnwind(
            HandlerType,
            ImageBase,
            ControlPc,
            FunctionEntry,
            ContextRecord,
            HandlerData,
            EstablisherFrame,
            ContextPointers
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlRaiseException(
    ExceptionRecord:  PEXCEPTION_RECORD    
)
{
    unsafe {
        return RtlRaiseException(
            ExceptionRecord
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlPcToFileHeader(
    PcValue:  PVOID,
    BaseOfImage: *mut PVOID    
) ->  PVOID
{
    unsafe {
        return RtlPcToFileHeader(
            PcValue,
            BaseOfImage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlCompareMemory(
    Source1: *const c_void,
    Source2: *const c_void,
    Length:  SIZE_T    
) ->  SIZE_T
{
    unsafe {
        return RtlCompareMemory(
            Source1,
            Source2,
            Length
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlInitializeSListHead(
    ListHead:  PSLIST_HEADER    
)
{
    unsafe {
        return RtlInitializeSListHead(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlFirstEntrySList(
    ListHead: *const SLIST_HEADER    
) ->  PSLIST_ENTRY
{
    unsafe {
        return RtlFirstEntrySList(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlInterlockedPopEntrySList(
    ListHead:  PSLIST_HEADER    
) ->  PSLIST_ENTRY
{
    unsafe {
        return RtlInterlockedPopEntrySList(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlInterlockedPushEntrySList(
    ListHead:  PSLIST_HEADER,
    ListEntry:  PSLIST_ENTRY    
) ->  PSLIST_ENTRY
{
    unsafe {
        return RtlInterlockedPushEntrySList(
            ListHead,
            ListEntry
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlInterlockedPushListSListEx(
    ListHead:  PSLIST_HEADER,
    List:  PSLIST_ENTRY,
    ListEnd:  PSLIST_ENTRY,
    Count:  DWORD    
) ->  PSLIST_ENTRY
{
    unsafe {
        return RtlInterlockedPushListSListEx(
            ListHead,
            List,
            ListEnd,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlInterlockedFlushSList(
    ListHead:  PSLIST_HEADER    
) ->  PSLIST_ENTRY
{
    unsafe {
        return RtlInterlockedFlushSList(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlQueryDepthSList(
    ListHead:  PSLIST_HEADER    
) ->  WORD
{
    unsafe {
        return RtlQueryDepthSList(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlGetReturnAddressHijackTarget(
    
) ->  ULONG_PTR
{
    unsafe {
        return RtlGetReturnAddressHijackTarget(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerSetConditionMask(
    ConditionMask:  ULONGLONG,
    TypeMask:  DWORD,
    Condition:  BYTE    
) ->  ULONGLONG
{
    unsafe {
        return VerSetConditionMask(
            ConditionMask,
            TypeMask,
            Condition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlGetProductInfo(
    OSMajorVersion:  DWORD,
    OSMinorVersion:  DWORD,
    SpMajorVersion:  DWORD,
    SpMinorVersion:  DWORD,
    ReturnedProductType:  PDWORD    
) ->  BOOLEAN
{
    unsafe {
        return RtlGetProductInfo(
            OSMajorVersion,
            OSMinorVersion,
            SpMajorVersion,
            SpMinorVersion,
            ReturnedProductType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlCrc32(
    Buffer: *const c_void,
    Size:  usize,
    InitialCrc:  DWORD    
) ->  DWORD
{
    unsafe {
        return RtlCrc32(
            Buffer,
            Size,
            InitialCrc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlCrc64(
    Buffer: *const c_void,
    Size:  usize,
    InitialCrc:  ULONGLONG    
) ->  ULONGLONG
{
    unsafe {
        return RtlCrc64(
            Buffer,
            Size,
            InitialCrc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlOsDeploymentState(
    Flags:  DWORD    
) ->  OS_DEPLOYEMENT_STATE_VALUES
{
    unsafe {
        return RtlOsDeploymentState(
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlGetNonVolatileToken(
    NvBuffer:  PVOID,
    Size:  SIZE_T,
    NvToken: *mut PVOID    
) ->  DWORD
{
    unsafe {
        return RtlGetNonVolatileToken(
            NvBuffer,
            Size,
            NvToken
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlFreeNonVolatileToken(
    NvToken:  PVOID    
) ->  DWORD
{
    unsafe {
        return RtlFreeNonVolatileToken(
            NvToken
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlFlushNonVolatileMemory(
    NvToken:  PVOID,
    NvBuffer:  PVOID,
    Size:  SIZE_T,
    Flags:  DWORD    
) ->  DWORD
{
    unsafe {
        return RtlFlushNonVolatileMemory(
            NvToken,
            NvBuffer,
            Size,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlDrainNonVolatileFlush(
    NvToken:  PVOID    
) ->  DWORD
{
    unsafe {
        return RtlDrainNonVolatileFlush(
            NvToken
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlWriteNonVolatileMemory(
    NvToken:  PVOID,
    NvDestination: *mut c_void,
    Source: *const c_void,
    Size:  SIZE_T,
    Flags:  DWORD    
) ->  DWORD
{
    unsafe {
        return RtlWriteNonVolatileMemory(
            NvToken,
            NvDestination,
            Source,
            Size,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlFillNonVolatileMemory(
    NvToken:  PVOID,
    NvDestination: *mut c_void,
    Size:  SIZE_T,
    Value:  BYTE,
    Flags:  DWORD    
) ->  DWORD
{
    unsafe {
        return RtlFillNonVolatileMemory(
            NvToken,
            NvDestination,
            Size,
            Value,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlFlushNonVolatileMemoryRanges(
    NvToken:  PVOID,
    NvRanges:  PNV_MEMORY_RANGE,
    NumRanges:  SIZE_T,
    Flags:  DWORD    
) ->  DWORD
{
    unsafe {
        return RtlFlushNonVolatileMemoryRanges(
            NvToken,
            NvRanges,
            NumRanges,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlInitializeCorrelationVector(
    CorrelationVector:  PCORRELATION_VECTOR,
    Version:  c_int,
    Guid: *const GUID    
) ->  DWORD
{
    unsafe {
        return RtlInitializeCorrelationVector(
            CorrelationVector,
            Version,
            Guid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlIncrementCorrelationVector(
    CorrelationVector:  PCORRELATION_VECTOR    
) ->  DWORD
{
    unsafe {
        return RtlIncrementCorrelationVector(
            CorrelationVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlExtendCorrelationVector(
    CorrelationVector:  PCORRELATION_VECTOR    
) ->  DWORD
{
    unsafe {
        return RtlExtendCorrelationVector(
            CorrelationVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlValidateCorrelationVector(
    Vector:  PCORRELATION_VECTOR    
) ->  DWORD
{
    unsafe {
        return RtlValidateCorrelationVector(
            Vector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlRaiseCustomSystemEventTrigger(
    TriggerConfig:  PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG    
) ->  DWORD
{
    unsafe {
        return RtlRaiseCustomSystemEventTrigger(
            TriggerConfig
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlIsZeroMemory(
    Buffer:  PVOID,
    Length:  SIZE_T    
) ->  BOOLEAN
{
    unsafe {
        return RtlIsZeroMemory(
            Buffer,
            Length
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlNormalizeSecurityDescriptor(
    SecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
    SecurityDescriptorLength:  DWORD,
    NewSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
    NewSecurityDescriptorLength:  PDWORD,
    CheckOnly:  BOOLEAN    
) ->  BOOLEAN
{
    unsafe {
        return RtlNormalizeSecurityDescriptor(
            SecurityDescriptor,
            SecurityDescriptorLength,
            NewSecurityDescriptor,
            NewSecurityDescriptorLength,
            CheckOnly
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlGetDeviceFamilyInfoEnum(
    pullUAPInfo: *mut ULONGLONG,
    pulDeviceFamily: *mut DWORD,
    pulDeviceForm: *mut DWORD    
)
{
    unsafe {
        return RtlGetDeviceFamilyInfoEnum(
            pullUAPInfo,
            pulDeviceFamily,
            pulDeviceForm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlConvertDeviceFamilyInfoToString(
    pulDeviceFamilyBufferSize:  PDWORD,
    pulDeviceFormBufferSize:  PDWORD,
    DeviceFamily:  PWSTR,
    DeviceForm:  PWSTR    
) ->  DWORD
{
    unsafe {
        return RtlConvertDeviceFamilyInfoToString(
            pulDeviceFamilyBufferSize,
            pulDeviceFormBufferSize,
            DeviceFamily,
            DeviceForm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RtlSwitchedVVI(
    VersionInfo:  PRTL_OSVERSIONINFOEXW,
    TypeMask:  DWORD,
    ConditionMask:  ULONGLONG    
) ->  DWORD
{
    unsafe {
        return RtlSwitchedVVI(
            VersionInfo,
            TypeMask,
            ConditionMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsApiSetImplemented(
    Contract:  PCSTR    
) ->  BOOL
{
    unsafe {
        return IsApiSetImplemented(
            Contract
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEnvironmentStringsW(
    NewEnvironment:  LPWCH    
) ->  BOOL
{
    unsafe {
        return SetEnvironmentStringsW(
            NewEnvironment
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStdHandle(
    nStdHandle:  DWORD    
) ->  HANDLE
{
    unsafe {
        return GetStdHandle(
            nStdHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetStdHandle(
    nStdHandle:  DWORD,
    hHandle:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetStdHandle(
            nStdHandle,
            hHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetStdHandleEx(
    nStdHandle:  DWORD,
    hHandle:  HANDLE,
    phPrevValue:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return SetStdHandleEx(
            nStdHandle,
            hHandle,
            phPrevValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommandLineA(
    
) ->  LPSTR
{
    unsafe {
        return GetCommandLineA(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommandLineW(
    
) ->  LPWSTR
{
    unsafe {
        return GetCommandLineW(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnvironmentStrings(
    
) ->  LPCH
{
    unsafe {
        return GetEnvironmentStrings(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnvironmentStringsW(
    
) ->  LPWCH
{
    unsafe {
        return GetEnvironmentStringsW(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeEnvironmentStringsA(
    penv:  LPCH    
) ->  BOOL
{
    unsafe {
        return FreeEnvironmentStringsA(
            penv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeEnvironmentStringsW(
    penv:  LPWCH    
) ->  BOOL
{
    unsafe {
        return FreeEnvironmentStringsW(
            penv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnvironmentVariableA(
    lpName:  LPCSTR,
    lpBuffer:  LPSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetEnvironmentVariableA(
            lpName,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnvironmentVariableW(
    lpName:  LPCWSTR,
    lpBuffer:  LPWSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetEnvironmentVariableW(
            lpName,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEnvironmentVariableA(
    lpName:  LPCSTR,
    lpValue:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetEnvironmentVariableA(
            lpName,
            lpValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEnvironmentVariableW(
    lpName:  LPCWSTR,
    lpValue:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetEnvironmentVariableW(
            lpName,
            lpValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExpandEnvironmentStringsA(
    lpSrc:  LPCSTR,
    lpDst:  LPSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return ExpandEnvironmentStringsA(
            lpSrc,
            lpDst,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExpandEnvironmentStringsW(
    lpSrc:  LPCWSTR,
    lpDst:  LPWSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return ExpandEnvironmentStringsW(
            lpSrc,
            lpDst,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCurrentDirectoryA(
    lpPathName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetCurrentDirectoryA(
            lpPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCurrentDirectoryW(
    lpPathName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetCurrentDirectoryW(
            lpPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentDirectoryA(
    nBufferLength:  DWORD,
    lpBuffer:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetCurrentDirectoryA(
            nBufferLength,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentDirectoryW(
    nBufferLength:  DWORD,
    lpBuffer:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetCurrentDirectoryW(
            nBufferLength,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SearchPathW(
    lpPath:  LPCWSTR,
    lpFileName:  LPCWSTR,
    lpExtension:  LPCWSTR,
    nBufferLength:  DWORD,
    lpBuffer:  LPWSTR,
    lpFilePart: *mut LPWSTR    
) ->  DWORD
{
    unsafe {
        return SearchPathW(
            lpPath,
            lpFileName,
            lpExtension,
            nBufferLength,
            lpBuffer,
            lpFilePart
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SearchPathA(
    lpPath:  LPCSTR,
    lpFileName:  LPCSTR,
    lpExtension:  LPCSTR,
    nBufferLength:  DWORD,
    lpBuffer:  LPSTR,
    lpFilePart: *mut LPSTR    
) ->  DWORD
{
    unsafe {
        return SearchPathA(
            lpPath,
            lpFileName,
            lpExtension,
            nBufferLength,
            lpBuffer,
            lpFilePart
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NeedCurrentDirectoryForExePathA(
    ExeName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return NeedCurrentDirectoryForExePathA(
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NeedCurrentDirectoryForExePathW(
    ExeName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return NeedCurrentDirectoryForExePathW(
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CompareFileTime(
    lpFileTime1: *const FILETIME,
    lpFileTime2: *const FILETIME    
) ->  LONG
{
    unsafe {
        return CompareFileTime(
            lpFileTime1,
            lpFileTime2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDirectoryA(
    lpPathName:  LPCSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  BOOL
{
    unsafe {
        return CreateDirectoryA(
            lpPathName,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDirectoryW(
    lpPathName:  LPCWSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  BOOL
{
    unsafe {
        return CreateDirectoryW(
            lpPathName,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileA(
    lpFileName:  LPCSTR,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    dwCreationDisposition:  DWORD,
    dwFlagsAndAttributes:  DWORD,
    hTemplateFile:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return CreateFileA(
            lpFileName,
            dwDesiredAccess,
            dwShareMode,
            lpSecurityAttributes,
            dwCreationDisposition,
            dwFlagsAndAttributes,
            hTemplateFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileW(
    lpFileName:  LPCWSTR,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    dwCreationDisposition:  DWORD,
    dwFlagsAndAttributes:  DWORD,
    hTemplateFile:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return CreateFileW(
            lpFileName,
            dwDesiredAccess,
            dwShareMode,
            lpSecurityAttributes,
            dwCreationDisposition,
            dwFlagsAndAttributes,
            hTemplateFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefineDosDeviceW(
    dwFlags:  DWORD,
    lpDeviceName:  LPCWSTR,
    lpTargetPath:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return DefineDosDeviceW(
            dwFlags,
            lpDeviceName,
            lpTargetPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteFileA(
    lpFileName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return DeleteFileA(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteFileW(
    lpFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return DeleteFileW(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteVolumeMountPointW(
    lpszVolumeMountPoint:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return DeleteVolumeMountPointW(
            lpszVolumeMountPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FileTimeToLocalFileTime(
    lpFileTime: *const FILETIME,
    lpLocalFileTime:  LPFILETIME    
) ->  BOOL
{
    unsafe {
        return FileTimeToLocalFileTime(
            lpFileTime,
            lpLocalFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindClose(
    hFindFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return FindClose(
            hFindFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindCloseChangeNotification(
    hChangeHandle:  HANDLE    
) ->  BOOL
{
    unsafe {
        return FindCloseChangeNotification(
            hChangeHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstChangeNotificationA(
    lpPathName:  LPCSTR,
    bWatchSubtree:  BOOL,
    dwNotifyFilter:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstChangeNotificationA(
            lpPathName,
            bWatchSubtree,
            dwNotifyFilter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstChangeNotificationW(
    lpPathName:  LPCWSTR,
    bWatchSubtree:  BOOL,
    dwNotifyFilter:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstChangeNotificationW(
            lpPathName,
            bWatchSubtree,
            dwNotifyFilter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileA(
    lpFileName:  LPCSTR,
    lpFindFileData:  LPWIN32_FIND_DATAA    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileA(
            lpFileName,
            lpFindFileData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileW(
    lpFileName:  LPCWSTR,
    lpFindFileData:  LPWIN32_FIND_DATAW    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileW(
            lpFileName,
            lpFindFileData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileExA(
    lpFileName:  LPCSTR,
    fInfoLevelId:  FINDEX_INFO_LEVELS,
    lpFindFileData:  LPVOID,
    fSearchOp:  FINDEX_SEARCH_OPS,
    lpSearchFilter:  LPVOID,
    dwAdditionalFlags:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileExA(
            lpFileName,
            fInfoLevelId,
            lpFindFileData,
            fSearchOp,
            lpSearchFilter,
            dwAdditionalFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileExW(
    lpFileName:  LPCWSTR,
    fInfoLevelId:  FINDEX_INFO_LEVELS,
    lpFindFileData:  LPVOID,
    fSearchOp:  FINDEX_SEARCH_OPS,
    lpSearchFilter:  LPVOID,
    dwAdditionalFlags:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileExW(
            lpFileName,
            fInfoLevelId,
            lpFindFileData,
            fSearchOp,
            lpSearchFilter,
            dwAdditionalFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstVolumeW(
    lpszVolumeName:  LPWSTR,
    cchBufferLength:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstVolumeW(
            lpszVolumeName,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextChangeNotification(
    hChangeHandle:  HANDLE    
) ->  BOOL
{
    unsafe {
        return FindNextChangeNotification(
            hChangeHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextFileA(
    hFindFile:  HANDLE,
    lpFindFileData:  LPWIN32_FIND_DATAA    
) ->  BOOL
{
    unsafe {
        return FindNextFileA(
            hFindFile,
            lpFindFileData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextFileW(
    hFindFile:  HANDLE,
    lpFindFileData:  LPWIN32_FIND_DATAW    
) ->  BOOL
{
    unsafe {
        return FindNextFileW(
            hFindFile,
            lpFindFileData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextVolumeW(
    hFindVolume:  HANDLE,
    lpszVolumeName:  LPWSTR,
    cchBufferLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return FindNextVolumeW(
            hFindVolume,
            lpszVolumeName,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindVolumeClose(
    hFindVolume:  HANDLE    
) ->  BOOL
{
    unsafe {
        return FindVolumeClose(
            hFindVolume
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlushFileBuffers(
    hFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return FlushFileBuffers(
            hFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDiskFreeSpaceA(
    lpRootPathName:  LPCSTR,
    lpSectorsPerCluster:  LPDWORD,
    lpBytesPerSector:  LPDWORD,
    lpNumberOfFreeClusters:  LPDWORD,
    lpTotalNumberOfClusters:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetDiskFreeSpaceA(
            lpRootPathName,
            lpSectorsPerCluster,
            lpBytesPerSector,
            lpNumberOfFreeClusters,
            lpTotalNumberOfClusters
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDiskFreeSpaceW(
    lpRootPathName:  LPCWSTR,
    lpSectorsPerCluster:  LPDWORD,
    lpBytesPerSector:  LPDWORD,
    lpNumberOfFreeClusters:  LPDWORD,
    lpTotalNumberOfClusters:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetDiskFreeSpaceW(
            lpRootPathName,
            lpSectorsPerCluster,
            lpBytesPerSector,
            lpNumberOfFreeClusters,
            lpTotalNumberOfClusters
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDiskFreeSpaceExA(
    lpDirectoryName:  LPCSTR,
    lpFreeBytesAvailableToCaller:  PULARGE_INTEGER,
    lpTotalNumberOfBytes:  PULARGE_INTEGER,
    lpTotalNumberOfFreeBytes:  PULARGE_INTEGER    
) ->  BOOL
{
    unsafe {
        return GetDiskFreeSpaceExA(
            lpDirectoryName,
            lpFreeBytesAvailableToCaller,
            lpTotalNumberOfBytes,
            lpTotalNumberOfFreeBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDiskFreeSpaceExW(
    lpDirectoryName:  LPCWSTR,
    lpFreeBytesAvailableToCaller:  PULARGE_INTEGER,
    lpTotalNumberOfBytes:  PULARGE_INTEGER,
    lpTotalNumberOfFreeBytes:  PULARGE_INTEGER    
) ->  BOOL
{
    unsafe {
        return GetDiskFreeSpaceExW(
            lpDirectoryName,
            lpFreeBytesAvailableToCaller,
            lpTotalNumberOfBytes,
            lpTotalNumberOfFreeBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDiskSpaceInformationA(
    rootPath:  LPCSTR,
    diskSpaceInfo: *mut DISK_SPACE_INFORMATION    
) ->  HRESULT
{
    unsafe {
        return GetDiskSpaceInformationA(
            rootPath,
            diskSpaceInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDiskSpaceInformationW(
    rootPath:  LPCWSTR,
    diskSpaceInfo: *mut DISK_SPACE_INFORMATION    
) ->  HRESULT
{
    unsafe {
        return GetDiskSpaceInformationW(
            rootPath,
            diskSpaceInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDriveTypeA(
    lpRootPathName:  LPCSTR    
) ->  UINT
{
    unsafe {
        return GetDriveTypeA(
            lpRootPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDriveTypeW(
    lpRootPathName:  LPCWSTR    
) ->  UINT
{
    unsafe {
        return GetDriveTypeW(
            lpRootPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileAttributesA(
    lpFileName:  LPCSTR    
) ->  DWORD
{
    unsafe {
        return GetFileAttributesA(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileAttributesW(
    lpFileName:  LPCWSTR    
) ->  DWORD
{
    unsafe {
        return GetFileAttributesW(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileAttributesExA(
    lpFileName:  LPCSTR,
    fInfoLevelId:  GET_FILEEX_INFO_LEVELS,
    lpFileInformation:  LPVOID    
) ->  BOOL
{
    unsafe {
        return GetFileAttributesExA(
            lpFileName,
            fInfoLevelId,
            lpFileInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileAttributesExW(
    lpFileName:  LPCWSTR,
    fInfoLevelId:  GET_FILEEX_INFO_LEVELS,
    lpFileInformation:  LPVOID    
) ->  BOOL
{
    unsafe {
        return GetFileAttributesExW(
            lpFileName,
            fInfoLevelId,
            lpFileInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileInformationByHandle(
    hFile:  HANDLE,
    lpFileInformation:  LPBY_HANDLE_FILE_INFORMATION    
) ->  BOOL
{
    unsafe {
        return GetFileInformationByHandle(
            hFile,
            lpFileInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileSize(
    hFile:  HANDLE,
    lpFileSizeHigh:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetFileSize(
            hFile,
            lpFileSizeHigh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileSizeEx(
    hFile:  HANDLE,
    lpFileSize:  PLARGE_INTEGER    
) ->  BOOL
{
    unsafe {
        return GetFileSizeEx(
            hFile,
            lpFileSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileType(
    hFile:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetFileType(
            hFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFinalPathNameByHandleA(
    hFile:  HANDLE,
    lpszFilePath:  LPSTR,
    cchFilePath:  DWORD,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetFinalPathNameByHandleA(
            hFile,
            lpszFilePath,
            cchFilePath,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFinalPathNameByHandleW(
    hFile:  HANDLE,
    lpszFilePath:  LPWSTR,
    cchFilePath:  DWORD,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetFinalPathNameByHandleW(
            hFile,
            lpszFilePath,
            cchFilePath,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileTime(
    hFile:  HANDLE,
    lpCreationTime:  LPFILETIME,
    lpLastAccessTime:  LPFILETIME,
    lpLastWriteTime:  LPFILETIME    
) ->  BOOL
{
    unsafe {
        return GetFileTime(
            hFile,
            lpCreationTime,
            lpLastAccessTime,
            lpLastWriteTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFullPathNameW(
    lpFileName:  LPCWSTR,
    nBufferLength:  DWORD,
    lpBuffer:  LPWSTR,
    lpFilePart: *mut LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetFullPathNameW(
            lpFileName,
            nBufferLength,
            lpBuffer,
            lpFilePart
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFullPathNameA(
    lpFileName:  LPCSTR,
    nBufferLength:  DWORD,
    lpBuffer:  LPSTR,
    lpFilePart: *mut LPSTR    
) ->  DWORD
{
    unsafe {
        return GetFullPathNameA(
            lpFileName,
            nBufferLength,
            lpBuffer,
            lpFilePart
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLogicalDrives(
    
) ->  DWORD
{
    unsafe {
        return GetLogicalDrives(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLogicalDriveStringsW(
    nBufferLength:  DWORD,
    lpBuffer:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetLogicalDriveStringsW(
            nBufferLength,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLongPathNameA(
    lpszShortPath:  LPCSTR,
    lpszLongPath:  LPSTR,
    cchBuffer:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetLongPathNameA(
            lpszShortPath,
            lpszLongPath,
            cchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLongPathNameW(
    lpszShortPath:  LPCWSTR,
    lpszLongPath:  LPWSTR,
    cchBuffer:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetLongPathNameW(
            lpszShortPath,
            lpszLongPath,
            cchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetShortPathNameW(
    lpszLongPath:  LPCWSTR,
    lpszShortPath:  LPWSTR,
    cchBuffer:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetShortPathNameW(
            lpszLongPath,
            lpszShortPath,
            cchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTempFileNameW(
    lpPathName:  LPCWSTR,
    lpPrefixString:  LPCWSTR,
    uUnique:  UINT,
    lpTempFileName:  LPWSTR    
) ->  UINT
{
    unsafe {
        return GetTempFileNameW(
            lpPathName,
            lpPrefixString,
            uUnique,
            lpTempFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumeInformationByHandleW(
    hFile:  HANDLE,
    lpVolumeNameBuffer:  LPWSTR,
    nVolumeNameSize:  DWORD,
    lpVolumeSerialNumber:  LPDWORD,
    lpMaximumComponentLength:  LPDWORD,
    lpFileSystemFlags:  LPDWORD,
    lpFileSystemNameBuffer:  LPWSTR,
    nFileSystemNameSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumeInformationByHandleW(
            hFile,
            lpVolumeNameBuffer,
            nVolumeNameSize,
            lpVolumeSerialNumber,
            lpMaximumComponentLength,
            lpFileSystemFlags,
            lpFileSystemNameBuffer,
            nFileSystemNameSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumeInformationW(
    lpRootPathName:  LPCWSTR,
    lpVolumeNameBuffer:  LPWSTR,
    nVolumeNameSize:  DWORD,
    lpVolumeSerialNumber:  LPDWORD,
    lpMaximumComponentLength:  LPDWORD,
    lpFileSystemFlags:  LPDWORD,
    lpFileSystemNameBuffer:  LPWSTR,
    nFileSystemNameSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumeInformationW(
            lpRootPathName,
            lpVolumeNameBuffer,
            nVolumeNameSize,
            lpVolumeSerialNumber,
            lpMaximumComponentLength,
            lpFileSystemFlags,
            lpFileSystemNameBuffer,
            nFileSystemNameSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumePathNameW(
    lpszFileName:  LPCWSTR,
    lpszVolumePathName:  LPWSTR,
    cchBufferLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumePathNameW(
            lpszFileName,
            lpszVolumePathName,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalFileTimeToFileTime(
    lpLocalFileTime: *const FILETIME,
    lpFileTime:  LPFILETIME    
) ->  BOOL
{
    unsafe {
        return LocalFileTimeToFileTime(
            lpLocalFileTime,
            lpFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LockFile(
    hFile:  HANDLE,
    dwFileOffsetLow:  DWORD,
    dwFileOffsetHigh:  DWORD,
    nNumberOfBytesToLockLow:  DWORD,
    nNumberOfBytesToLockHigh:  DWORD    
) ->  BOOL
{
    unsafe {
        return LockFile(
            hFile,
            dwFileOffsetLow,
            dwFileOffsetHigh,
            nNumberOfBytesToLockLow,
            nNumberOfBytesToLockHigh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LockFileEx(
    hFile:  HANDLE,
    dwFlags:  DWORD,
    dwReserved:  DWORD,
    nNumberOfBytesToLockLow:  DWORD,
    nNumberOfBytesToLockHigh:  DWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return LockFileEx(
            hFile,
            dwFlags,
            dwReserved,
            nNumberOfBytesToLockLow,
            nNumberOfBytesToLockHigh,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryDosDeviceW(
    lpDeviceName:  LPCWSTR,
    lpTargetPath:  LPWSTR,
    ucchMax:  DWORD    
) ->  DWORD
{
    unsafe {
        return QueryDosDeviceW(
            lpDeviceName,
            lpTargetPath,
            ucchMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadFile(
    hFile:  HANDLE,
    lpBuffer:  LPVOID,
    nNumberOfBytesToRead:  DWORD,
    lpNumberOfBytesRead:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return ReadFile(
            hFile,
            lpBuffer,
            nNumberOfBytesToRead,
            lpNumberOfBytesRead,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadFileEx(
    hFile:  HANDLE,
    lpBuffer:  LPVOID,
    nNumberOfBytesToRead:  DWORD,
    lpOverlapped:  LPOVERLAPPED,
    lpCompletionRoutine:  LPOVERLAPPED_COMPLETION_ROUTINE    
) ->  BOOL
{
    unsafe {
        return ReadFileEx(
            hFile,
            lpBuffer,
            nNumberOfBytesToRead,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadFileScatter(
    hFile:  HANDLE,
    aSegmentArray: *mut FILE_SEGMENT_ELEMENT,
    nNumberOfBytesToRead:  DWORD,
    lpReserved:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return ReadFileScatter(
            hFile,
            aSegmentArray,
            nNumberOfBytesToRead,
            lpReserved,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveDirectoryA(
    lpPathName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return RemoveDirectoryA(
            lpPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveDirectoryW(
    lpPathName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return RemoveDirectoryW(
            lpPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEndOfFile(
    hFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetEndOfFile(
            hFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileAttributesA(
    lpFileName:  LPCSTR,
    dwFileAttributes:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFileAttributesA(
            lpFileName,
            dwFileAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileAttributesW(
    lpFileName:  LPCWSTR,
    dwFileAttributes:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFileAttributesW(
            lpFileName,
            dwFileAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileInformationByHandle(
    hFile:  HANDLE,
    FileInformationClass:  FILE_INFO_BY_HANDLE_CLASS,
    lpFileInformation:  LPVOID,
    dwBufferSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFileInformationByHandle(
            hFile,
            FileInformationClass,
            lpFileInformation,
            dwBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFilePointer(
    hFile:  HANDLE,
    lDistanceToMove:  LONG,
    lpDistanceToMoveHigh:  PLONG,
    dwMoveMethod:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetFilePointer(
            hFile,
            lDistanceToMove,
            lpDistanceToMoveHigh,
            dwMoveMethod
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFilePointerEx(
    hFile:  HANDLE,
    liDistanceToMove:  LARGE_INTEGER,
    lpNewFilePointer:  PLARGE_INTEGER,
    dwMoveMethod:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFilePointerEx(
            hFile,
            liDistanceToMove,
            lpNewFilePointer,
            dwMoveMethod
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileTime(
    hFile:  HANDLE,
    lpCreationTime: *const FILETIME,
    lpLastAccessTime: *const FILETIME,
    lpLastWriteTime: *const FILETIME    
) ->  BOOL
{
    unsafe {
        return SetFileTime(
            hFile,
            lpCreationTime,
            lpLastAccessTime,
            lpLastWriteTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileValidData(
    hFile:  HANDLE,
    ValidDataLength:  LONGLONG    
) ->  BOOL
{
    unsafe {
        return SetFileValidData(
            hFile,
            ValidDataLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnlockFile(
    hFile:  HANDLE,
    dwFileOffsetLow:  DWORD,
    dwFileOffsetHigh:  DWORD,
    nNumberOfBytesToUnlockLow:  DWORD,
    nNumberOfBytesToUnlockHigh:  DWORD    
) ->  BOOL
{
    unsafe {
        return UnlockFile(
            hFile,
            dwFileOffsetLow,
            dwFileOffsetHigh,
            nNumberOfBytesToUnlockLow,
            nNumberOfBytesToUnlockHigh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnlockFileEx(
    hFile:  HANDLE,
    dwReserved:  DWORD,
    nNumberOfBytesToUnlockLow:  DWORD,
    nNumberOfBytesToUnlockHigh:  DWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return UnlockFileEx(
            hFile,
            dwReserved,
            nNumberOfBytesToUnlockLow,
            nNumberOfBytesToUnlockHigh,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteFile(
    hFile:  HANDLE,
    lpBuffer:  LPCVOID,
    nNumberOfBytesToWrite:  DWORD,
    lpNumberOfBytesWritten:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return WriteFile(
            hFile,
            lpBuffer,
            nNumberOfBytesToWrite,
            lpNumberOfBytesWritten,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteFileEx(
    hFile:  HANDLE,
    lpBuffer:  LPCVOID,
    nNumberOfBytesToWrite:  DWORD,
    lpOverlapped:  LPOVERLAPPED,
    lpCompletionRoutine:  LPOVERLAPPED_COMPLETION_ROUTINE    
) ->  BOOL
{
    unsafe {
        return WriteFileEx(
            hFile,
            lpBuffer,
            nNumberOfBytesToWrite,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteFileGather(
    hFile:  HANDLE,
    aSegmentArray: *mut FILE_SEGMENT_ELEMENT,
    nNumberOfBytesToWrite:  DWORD,
    lpReserved:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return WriteFileGather(
            hFile,
            aSegmentArray,
            nNumberOfBytesToWrite,
            lpReserved,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTempPathW(
    nBufferLength:  DWORD,
    lpBuffer:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetTempPathW(
            nBufferLength,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumeNameForVolumeMountPointW(
    lpszVolumeMountPoint:  LPCWSTR,
    lpszVolumeName:  LPWSTR,
    cchBufferLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumeNameForVolumeMountPointW(
            lpszVolumeMountPoint,
            lpszVolumeName,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumePathNamesForVolumeNameW(
    lpszVolumeName:  LPCWSTR,
    lpszVolumePathNames:  LPWCH,
    cchBufferLength:  DWORD,
    lpcchReturnLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumePathNamesForVolumeNameW(
            lpszVolumeName,
            lpszVolumePathNames,
            cchBufferLength,
            lpcchReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFile2(
    lpFileName:  LPCWSTR,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    dwCreationDisposition:  DWORD,
    pCreateExParams:  LPCREATEFILE2_EXTENDED_PARAMETERS    
) ->  HANDLE
{
    unsafe {
        return CreateFile2(
            lpFileName,
            dwDesiredAccess,
            dwShareMode,
            dwCreationDisposition,
            pCreateExParams
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileIoOverlappedRange(
    FileHandle:  HANDLE,
    OverlappedRangeStart:  PUCHAR,
    Length:  ULONG    
) ->  BOOL
{
    unsafe {
        return SetFileIoOverlappedRange(
            FileHandle,
            OverlappedRangeStart,
            Length
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCompressedFileSizeA(
    lpFileName:  LPCSTR,
    lpFileSizeHigh:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetCompressedFileSizeA(
            lpFileName,
            lpFileSizeHigh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCompressedFileSizeW(
    lpFileName:  LPCWSTR,
    lpFileSizeHigh:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetCompressedFileSizeW(
            lpFileName,
            lpFileSizeHigh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstStreamW(
    lpFileName:  LPCWSTR,
    InfoLevel:  STREAM_INFO_LEVELS,
    lpFindStreamData:  LPVOID,
    dwFlags:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstStreamW(
            lpFileName,
            InfoLevel,
            lpFindStreamData,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextStreamW(
    hFindStream:  HANDLE,
    lpFindStreamData:  LPVOID    
) ->  BOOL
{
    unsafe {
        return FindNextStreamW(
            hFindStream,
            lpFindStreamData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AreFileApisANSI(
    
) ->  BOOL
{
    unsafe {
        return AreFileApisANSI(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTempPathA(
    nBufferLength:  DWORD,
    lpBuffer:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetTempPathA(
            nBufferLength,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileNameW(
    lpFileName:  LPCWSTR,
    dwFlags:  DWORD,
    StringLength:  LPDWORD,
    LinkName:  PWSTR    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileNameW(
            lpFileName,
            dwFlags,
            StringLength,
            LinkName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextFileNameW(
    hFindStream:  HANDLE,
    StringLength:  LPDWORD,
    LinkName:  PWSTR    
) ->  BOOL
{
    unsafe {
        return FindNextFileNameW(
            hFindStream,
            StringLength,
            LinkName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumeInformationA(
    lpRootPathName:  LPCSTR,
    lpVolumeNameBuffer:  LPSTR,
    nVolumeNameSize:  DWORD,
    lpVolumeSerialNumber:  LPDWORD,
    lpMaximumComponentLength:  LPDWORD,
    lpFileSystemFlags:  LPDWORD,
    lpFileSystemNameBuffer:  LPSTR,
    nFileSystemNameSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumeInformationA(
            lpRootPathName,
            lpVolumeNameBuffer,
            nVolumeNameSize,
            lpVolumeSerialNumber,
            lpMaximumComponentLength,
            lpFileSystemFlags,
            lpFileSystemNameBuffer,
            nFileSystemNameSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTempFileNameA(
    lpPathName:  LPCSTR,
    lpPrefixString:  LPCSTR,
    uUnique:  UINT,
    lpTempFileName:  LPSTR    
) ->  UINT
{
    unsafe {
        return GetTempFileNameA(
            lpPathName,
            lpPrefixString,
            uUnique,
            lpTempFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileApisToOEM(
    
)
{
    unsafe {
        return SetFileApisToOEM(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileApisToANSI(
    
)
{
    unsafe {
        return SetFileApisToANSI(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyFileFromAppW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR,
    bFailIfExists:  BOOL    
) ->  BOOL
{
    unsafe {
        return CopyFileFromAppW(
            lpExistingFileName,
            lpNewFileName,
            bFailIfExists
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDirectoryFromAppW(
    lpPathName:  LPCWSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  BOOL
{
    unsafe {
        return CreateDirectoryFromAppW(
            lpPathName,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileFromAppW(
    lpFileName:  LPCWSTR,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    dwCreationDisposition:  DWORD,
    dwFlagsAndAttributes:  DWORD,
    hTemplateFile:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return CreateFileFromAppW(
            lpFileName,
            dwDesiredAccess,
            dwShareMode,
            lpSecurityAttributes,
            dwCreationDisposition,
            dwFlagsAndAttributes,
            hTemplateFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFile2FromAppW(
    lpFileName:  LPCWSTR,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    dwCreationDisposition:  DWORD,
    pCreateExParams:  LPCREATEFILE2_EXTENDED_PARAMETERS    
) ->  HANDLE
{
    unsafe {
        return CreateFile2FromAppW(
            lpFileName,
            dwDesiredAccess,
            dwShareMode,
            dwCreationDisposition,
            pCreateExParams
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteFileFromAppW(
    lpFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return DeleteFileFromAppW(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileExFromAppW(
    lpFileName:  LPCWSTR,
    fInfoLevelId:  FINDEX_INFO_LEVELS,
    lpFindFileData:  LPVOID,
    fSearchOp:  FINDEX_SEARCH_OPS,
    lpSearchFilter:  LPVOID,
    dwAdditionalFlags:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileExFromAppW(
            lpFileName,
            fInfoLevelId,
            lpFindFileData,
            fSearchOp,
            lpSearchFilter,
            dwAdditionalFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileAttributesExFromAppW(
    lpFileName:  LPCWSTR,
    fInfoLevelId:  GET_FILEEX_INFO_LEVELS,
    lpFileInformation:  LPVOID    
) ->  BOOL
{
    unsafe {
        return GetFileAttributesExFromAppW(
            lpFileName,
            fInfoLevelId,
            lpFileInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileFromAppW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return MoveFileFromAppW(
            lpExistingFileName,
            lpNewFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveDirectoryFromAppW(
    lpPathName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return RemoveDirectoryFromAppW(
            lpPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReplaceFileFromAppW(
    lpReplacedFileName:  LPCWSTR,
    lpReplacementFileName:  LPCWSTR,
    lpBackupFileName:  LPCWSTR,
    dwReplaceFlags:  DWORD,
    lpExclude:  LPVOID,
    lpReserved:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ReplaceFileFromAppW(
            lpReplacedFileName,
            lpReplacementFileName,
            lpBackupFileName,
            dwReplaceFlags,
            lpExclude,
            lpReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileAttributesFromAppW(
    lpFileName:  LPCWSTR,
    dwFileAttributes:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFileAttributesFromAppW(
            lpFileName,
            dwFileAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsDebuggerPresent(
    
) ->  BOOL
{
    unsafe {
        return IsDebuggerPresent(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DebugBreak(
    
)
{
    unsafe {
        return DebugBreak(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OutputDebugStringA(
    lpOutputString:  LPCSTR    
)
{
    unsafe {
        return OutputDebugStringA(
            lpOutputString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OutputDebugStringW(
    lpOutputString:  LPCWSTR    
)
{
    unsafe {
        return OutputDebugStringW(
            lpOutputString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ContinueDebugEvent(
    dwProcessId:  DWORD,
    dwThreadId:  DWORD,
    dwContinueStatus:  DWORD    
) ->  BOOL
{
    unsafe {
        return ContinueDebugEvent(
            dwProcessId,
            dwThreadId,
            dwContinueStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForDebugEvent(
    lpDebugEvent:  LPDEBUG_EVENT,
    dwMilliseconds:  DWORD    
) ->  BOOL
{
    unsafe {
        return WaitForDebugEvent(
            lpDebugEvent,
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DebugActiveProcess(
    dwProcessId:  DWORD    
) ->  BOOL
{
    unsafe {
        return DebugActiveProcess(
            dwProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DebugActiveProcessStop(
    dwProcessId:  DWORD    
) ->  BOOL
{
    unsafe {
        return DebugActiveProcessStop(
            dwProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckRemoteDebuggerPresent(
    hProcess:  HANDLE,
    pbDebuggerPresent:  PBOOL    
) ->  BOOL
{
    unsafe {
        return CheckRemoteDebuggerPresent(
            hProcess,
            pbDebuggerPresent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForDebugEventEx(
    lpDebugEvent:  LPDEBUG_EVENT,
    dwMilliseconds:  DWORD    
) ->  BOOL
{
    unsafe {
        return WaitForDebugEventEx(
            lpDebugEvent,
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EncodePointer(
    Ptr:  PVOID    
) ->  PVOID
{
    unsafe {
        return EncodePointer(
            Ptr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DecodePointer(
    Ptr:  PVOID    
) ->  PVOID
{
    unsafe {
        return DecodePointer(
            Ptr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EncodeSystemPointer(
    Ptr:  PVOID    
) ->  PVOID
{
    unsafe {
        return EncodeSystemPointer(
            Ptr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DecodeSystemPointer(
    Ptr:  PVOID    
) ->  PVOID
{
    unsafe {
        return DecodeSystemPointer(
            Ptr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EncodeRemotePointer(
    ProcessHandle:  HANDLE,
    Ptr:  PVOID,
    EncodedPtr: *mut PVOID    
) ->  HRESULT
{
    unsafe {
        return EncodeRemotePointer(
            ProcessHandle,
            Ptr,
            EncodedPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DecodeRemotePointer(
    ProcessHandle:  HANDLE,
    Ptr:  PVOID,
    DecodedPtr: *mut PVOID    
) ->  HRESULT
{
    unsafe {
        return DecodeRemotePointer(
            ProcessHandle,
            Ptr,
            DecodedPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Beep(
    dwFreq:  DWORD,
    dwDuration:  DWORD    
) ->  BOOL
{
    unsafe {
        return Beep(
            dwFreq,
            dwDuration
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseHandle(
    hObject:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CloseHandle(
            hObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DuplicateHandle(
    hSourceProcessHandle:  HANDLE,
    hSourceHandle:  HANDLE,
    hTargetProcessHandle:  HANDLE,
    lpTargetHandle:  LPHANDLE,
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    dwOptions:  DWORD    
) ->  BOOL
{
    unsafe {
        return DuplicateHandle(
            hSourceProcessHandle,
            hSourceHandle,
            hTargetProcessHandle,
            lpTargetHandle,
            dwDesiredAccess,
            bInheritHandle,
            dwOptions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CompareObjectHandles(
    hFirstObjectHandle:  HANDLE,
    hSecondObjectHandle:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CompareObjectHandles(
            hFirstObjectHandle,
            hSecondObjectHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetHandleInformation(
    hObject:  HANDLE,
    lpdwFlags:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetHandleInformation(
            hObject,
            lpdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetHandleInformation(
    hObject:  HANDLE,
    dwMask:  DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetHandleInformation(
            hObject,
            dwMask,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RaiseException(
    dwExceptionCode:  DWORD,
    dwExceptionFlags:  DWORD,
    nNumberOfArguments:  DWORD,
    lpArguments: *const ULONG_PTR    
)
{
    unsafe {
        return RaiseException(
            dwExceptionCode,
            dwExceptionFlags,
            nNumberOfArguments,
            lpArguments
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnhandledExceptionFilter(
    ExceptionInfo: *mut _EXCEPTION_POINTERS    
) ->  LONG
{
    unsafe {
        return UnhandledExceptionFilter(
            ExceptionInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUnhandledExceptionFilter(
    lpTopLevelExceptionFilter:  LPTOP_LEVEL_EXCEPTION_FILTER    
) ->  LPTOP_LEVEL_EXCEPTION_FILTER
{
    unsafe {
        return SetUnhandledExceptionFilter(
            lpTopLevelExceptionFilter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLastError(
    
) ->  DWORD
{
    unsafe {
        return GetLastError(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetLastError(
    dwErrCode:  DWORD    
)
{
    unsafe {
        return SetLastError(
            dwErrCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetErrorMode(
    
) ->  UINT
{
    unsafe {
        return GetErrorMode(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetErrorMode(
    uMode:  UINT    
) ->  UINT
{
    unsafe {
        return SetErrorMode(
            uMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddVectoredExceptionHandler(
    First:  ULONG,
    Handler:  PVECTORED_EXCEPTION_HANDLER    
) ->  PVOID
{
    unsafe {
        return AddVectoredExceptionHandler(
            First,
            Handler
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveVectoredExceptionHandler(
    Handle:  PVOID    
) ->  ULONG
{
    unsafe {
        return RemoveVectoredExceptionHandler(
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddVectoredContinueHandler(
    First:  ULONG,
    Handler:  PVECTORED_EXCEPTION_HANDLER    
) ->  PVOID
{
    unsafe {
        return AddVectoredContinueHandler(
            First,
            Handler
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveVectoredContinueHandler(
    Handle:  PVOID    
) ->  ULONG
{
    unsafe {
        return RemoveVectoredContinueHandler(
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RaiseFailFastException(
    pExceptionRecord:  PEXCEPTION_RECORD,
    pContextRecord:  PCONTEXT,
    dwFlags:  DWORD    
)
{
    unsafe {
        return RaiseFailFastException(
            pExceptionRecord,
            pContextRecord,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FatalAppExitA(
    uAction:  UINT,
    lpMessageText:  LPCSTR    
)
{
    unsafe {
        return FatalAppExitA(
            uAction,
            lpMessageText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FatalAppExitW(
    uAction:  UINT,
    lpMessageText:  LPCWSTR    
)
{
    unsafe {
        return FatalAppExitW(
            uAction,
            lpMessageText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadErrorMode(
    
) ->  DWORD
{
    unsafe {
        return GetThreadErrorMode(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadErrorMode(
    dwNewMode:  DWORD,
    lpOldMode:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return SetThreadErrorMode(
            dwNewMode,
            lpOldMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TerminateProcessOnMemoryExhaustion(
    FailedAllocationSize:  SIZE_T    
)
{
    unsafe {
        return TerminateProcessOnMemoryExhaustion(
            FailedAllocationSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlsAlloc(
    lpCallback:  PFLS_CALLBACK_FUNCTION    
) ->  DWORD
{
    unsafe {
        return FlsAlloc(
            lpCallback
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlsGetValue(
    dwFlsIndex:  DWORD    
) ->  PVOID
{
    unsafe {
        return FlsGetValue(
            dwFlsIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlsSetValue(
    dwFlsIndex:  DWORD,
    lpFlsData:  PVOID    
) ->  BOOL
{
    unsafe {
        return FlsSetValue(
            dwFlsIndex,
            lpFlsData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlsFree(
    dwFlsIndex:  DWORD    
) ->  BOOL
{
    unsafe {
        return FlsFree(
            dwFlsIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsThreadAFiber(
    
) ->  BOOL
{
    unsafe {
        return IsThreadAFiber(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePipe(
    hReadPipe:  PHANDLE,
    hWritePipe:  PHANDLE,
    lpPipeAttributes:  LPSECURITY_ATTRIBUTES,
    nSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return CreatePipe(
            hReadPipe,
            hWritePipe,
            lpPipeAttributes,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConnectNamedPipe(
    hNamedPipe:  HANDLE,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return ConnectNamedPipe(
            hNamedPipe,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DisconnectNamedPipe(
    hNamedPipe:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DisconnectNamedPipe(
            hNamedPipe
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetNamedPipeHandleState(
    hNamedPipe:  HANDLE,
    lpMode:  LPDWORD,
    lpMaxCollectionCount:  LPDWORD,
    lpCollectDataTimeout:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return SetNamedPipeHandleState(
            hNamedPipe,
            lpMode,
            lpMaxCollectionCount,
            lpCollectDataTimeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PeekNamedPipe(
    hNamedPipe:  HANDLE,
    lpBuffer:  LPVOID,
    nBufferSize:  DWORD,
    lpBytesRead:  LPDWORD,
    lpTotalBytesAvail:  LPDWORD,
    lpBytesLeftThisMessage:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return PeekNamedPipe(
            hNamedPipe,
            lpBuffer,
            nBufferSize,
            lpBytesRead,
            lpTotalBytesAvail,
            lpBytesLeftThisMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TransactNamedPipe(
    hNamedPipe:  HANDLE,
    lpInBuffer:  LPVOID,
    nInBufferSize:  DWORD,
    lpOutBuffer:  LPVOID,
    nOutBufferSize:  DWORD,
    lpBytesRead:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return TransactNamedPipe(
            hNamedPipe,
            lpInBuffer,
            nInBufferSize,
            lpOutBuffer,
            nOutBufferSize,
            lpBytesRead,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateNamedPipeW(
    lpName:  LPCWSTR,
    dwOpenMode:  DWORD,
    dwPipeMode:  DWORD,
    nMaxInstances:  DWORD,
    nOutBufferSize:  DWORD,
    nInBufferSize:  DWORD,
    nDefaultTimeOut:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  HANDLE
{
    unsafe {
        return CreateNamedPipeW(
            lpName,
            dwOpenMode,
            dwPipeMode,
            nMaxInstances,
            nOutBufferSize,
            nInBufferSize,
            nDefaultTimeOut,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitNamedPipeW(
    lpNamedPipeName:  LPCWSTR,
    nTimeOut:  DWORD    
) ->  BOOL
{
    unsafe {
        return WaitNamedPipeW(
            lpNamedPipeName,
            nTimeOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeClientComputerNameW(
    Pipe:  HANDLE,
    ClientComputerName:  LPWSTR,
    ClientComputerNameLength:  ULONG    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeClientComputerNameW(
            Pipe,
            ClientComputerName,
            ClientComputerNameLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImpersonateNamedPipeClient(
    hNamedPipe:  HANDLE    
) ->  BOOL
{
    unsafe {
        return ImpersonateNamedPipeClient(
            hNamedPipe
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeInfo(
    hNamedPipe:  HANDLE,
    lpFlags:  LPDWORD,
    lpOutBufferSize:  LPDWORD,
    lpInBufferSize:  LPDWORD,
    lpMaxInstances:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeInfo(
            hNamedPipe,
            lpFlags,
            lpOutBufferSize,
            lpInBufferSize,
            lpMaxInstances
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeHandleStateW(
    hNamedPipe:  HANDLE,
    lpState:  LPDWORD,
    lpCurInstances:  LPDWORD,
    lpMaxCollectionCount:  LPDWORD,
    lpCollectDataTimeout:  LPDWORD,
    lpUserName:  LPWSTR,
    nMaxUserNameSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeHandleStateW(
            hNamedPipe,
            lpState,
            lpCurInstances,
            lpMaxCollectionCount,
            lpCollectDataTimeout,
            lpUserName,
            nMaxUserNameSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallNamedPipeW(
    lpNamedPipeName:  LPCWSTR,
    lpInBuffer:  LPVOID,
    nInBufferSize:  DWORD,
    lpOutBuffer:  LPVOID,
    nOutBufferSize:  DWORD,
    lpBytesRead:  LPDWORD,
    nTimeOut:  DWORD    
) ->  BOOL
{
    unsafe {
        return CallNamedPipeW(
            lpNamedPipeName,
            lpInBuffer,
            nInBufferSize,
            lpOutBuffer,
            nOutBufferSize,
            lpBytesRead,
            nTimeOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryPerformanceCounter(
    lpPerformanceCount: *mut LARGE_INTEGER    
) ->  BOOL
{
    unsafe {
        return QueryPerformanceCounter(
            lpPerformanceCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryPerformanceFrequency(
    lpFrequency: *mut LARGE_INTEGER    
) ->  BOOL
{
    unsafe {
        return QueryPerformanceFrequency(
            lpFrequency
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapCreate(
    flOptions:  DWORD,
    dwInitialSize:  SIZE_T,
    dwMaximumSize:  SIZE_T    
) ->  HANDLE
{
    unsafe {
        return HeapCreate(
            flOptions,
            dwInitialSize,
            dwMaximumSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapDestroy(
    hHeap:  HANDLE    
) ->  BOOL
{
    unsafe {
        return HeapDestroy(
            hHeap
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapAlloc(
    hHeap:  HANDLE,
    dwFlags:  DWORD,
    dwBytes:  SIZE_T    
) ->  LPVOID
{
    unsafe {
        return HeapAlloc(
            hHeap,
            dwFlags,
            dwBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapReAlloc(
    hHeap:  HANDLE,
    dwFlags:  DWORD,
    lpMem:  LPVOID,
    dwBytes:  SIZE_T    
) ->  LPVOID
{
    unsafe {
        return HeapReAlloc(
            hHeap,
            dwFlags,
            lpMem,
            dwBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapFree(
    hHeap:  HANDLE,
    dwFlags:  DWORD,
    lpMem:  LPVOID    
) ->  BOOL
{
    unsafe {
        return HeapFree(
            hHeap,
            dwFlags,
            lpMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapSize(
    hHeap:  HANDLE,
    dwFlags:  DWORD,
    lpMem:  LPCVOID    
) ->  SIZE_T
{
    unsafe {
        return HeapSize(
            hHeap,
            dwFlags,
            lpMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessHeap(
    
) ->  HANDLE
{
    unsafe {
        return GetProcessHeap(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapCompact(
    hHeap:  HANDLE,
    dwFlags:  DWORD    
) ->  SIZE_T
{
    unsafe {
        return HeapCompact(
            hHeap,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapSetInformation(
    HeapHandle:  HANDLE,
    HeapInformationClass:  HEAP_INFORMATION_CLASS,
    HeapInformation:  PVOID,
    HeapInformationLength:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return HeapSetInformation(
            HeapHandle,
            HeapInformationClass,
            HeapInformation,
            HeapInformationLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapValidate(
    hHeap:  HANDLE,
    dwFlags:  DWORD,
    lpMem:  LPCVOID    
) ->  BOOL
{
    unsafe {
        return HeapValidate(
            hHeap,
            dwFlags,
            lpMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapSummary(
    hHeap:  HANDLE,
    dwFlags:  DWORD,
    lpSummary:  LPHEAP_SUMMARY    
) ->  BOOL
{
    unsafe {
        return HeapSummary(
            hHeap,
            dwFlags,
            lpSummary
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessHeaps(
    NumberOfHeaps:  DWORD,
    ProcessHeaps:  PHANDLE    
) ->  DWORD
{
    unsafe {
        return GetProcessHeaps(
            NumberOfHeaps,
            ProcessHeaps
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapLock(
    hHeap:  HANDLE    
) ->  BOOL
{
    unsafe {
        return HeapLock(
            hHeap
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapUnlock(
    hHeap:  HANDLE    
) ->  BOOL
{
    unsafe {
        return HeapUnlock(
            hHeap
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapWalk(
    hHeap:  HANDLE,
    lpEntry:  LPPROCESS_HEAP_ENTRY    
) ->  BOOL
{
    unsafe {
        return HeapWalk(
            hHeap,
            lpEntry
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HeapQueryInformation(
    HeapHandle:  HANDLE,
    HeapInformationClass:  HEAP_INFORMATION_CLASS,
    HeapInformation:  PVOID,
    HeapInformationLength:  SIZE_T,
    ReturnLength:  PSIZE_T    
) ->  BOOL
{
    unsafe {
        return HeapQueryInformation(
            HeapHandle,
            HeapInformationClass,
            HeapInformation,
            HeapInformationLength,
            ReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateIoCompletionPort(
    FileHandle:  HANDLE,
    ExistingCompletionPort:  HANDLE,
    CompletionKey:  ULONG_PTR,
    NumberOfConcurrentThreads:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateIoCompletionPort(
            FileHandle,
            ExistingCompletionPort,
            CompletionKey,
            NumberOfConcurrentThreads
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetQueuedCompletionStatus(
    CompletionPort:  HANDLE,
    lpNumberOfBytesTransferred:  LPDWORD,
    lpCompletionKey:  PULONG_PTR,
    lpOverlapped: *mut LPOVERLAPPED,
    dwMilliseconds:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetQueuedCompletionStatus(
            CompletionPort,
            lpNumberOfBytesTransferred,
            lpCompletionKey,
            lpOverlapped,
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetQueuedCompletionStatusEx(
    CompletionPort:  HANDLE,
    lpCompletionPortEntries:  LPOVERLAPPED_ENTRY,
    ulCount:  ULONG,
    ulNumEntriesRemoved:  PULONG,
    dwMilliseconds:  DWORD,
    fAlertable:  BOOL    
) ->  BOOL
{
    unsafe {
        return GetQueuedCompletionStatusEx(
            CompletionPort,
            lpCompletionPortEntries,
            ulCount,
            ulNumEntriesRemoved,
            dwMilliseconds,
            fAlertable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PostQueuedCompletionStatus(
    CompletionPort:  HANDLE,
    dwNumberOfBytesTransferred:  DWORD,
    dwCompletionKey:  ULONG_PTR,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return PostQueuedCompletionStatus(
            CompletionPort,
            dwNumberOfBytesTransferred,
            dwCompletionKey,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeviceIoControl(
    hDevice:  HANDLE,
    dwIoControlCode:  DWORD,
    lpInBuffer:  LPVOID,
    nInBufferSize:  DWORD,
    lpOutBuffer:  LPVOID,
    nOutBufferSize:  DWORD,
    lpBytesReturned:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return DeviceIoControl(
            hDevice,
            dwIoControlCode,
            lpInBuffer,
            nInBufferSize,
            lpOutBuffer,
            nOutBufferSize,
            lpBytesReturned,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOverlappedResult(
    hFile:  HANDLE,
    lpOverlapped:  LPOVERLAPPED,
    lpNumberOfBytesTransferred:  LPDWORD,
    bWait:  BOOL    
) ->  BOOL
{
    unsafe {
        return GetOverlappedResult(
            hFile,
            lpOverlapped,
            lpNumberOfBytesTransferred,
            bWait
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelIoEx(
    hFile:  HANDLE,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return CancelIoEx(
            hFile,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelIo(
    hFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CancelIo(
            hFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOverlappedResultEx(
    hFile:  HANDLE,
    lpOverlapped:  LPOVERLAPPED,
    lpNumberOfBytesTransferred:  LPDWORD,
    dwMilliseconds:  DWORD,
    bAlertable:  BOOL    
) ->  BOOL
{
    unsafe {
        return GetOverlappedResultEx(
            hFile,
            lpOverlapped,
            lpNumberOfBytesTransferred,
            dwMilliseconds,
            bAlertable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelSynchronousIo(
    hThread:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CancelSynchronousIo(
            hThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeSRWLock(
    SRWLock:  PSRWLOCK    
)
{
    unsafe {
        return InitializeSRWLock(
            SRWLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseSRWLockExclusive(
    SRWLock:  PSRWLOCK    
)
{
    unsafe {
        return ReleaseSRWLockExclusive(
            SRWLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseSRWLockShared(
    SRWLock:  PSRWLOCK    
)
{
    unsafe {
        return ReleaseSRWLockShared(
            SRWLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AcquireSRWLockExclusive(
    SRWLock:  PSRWLOCK    
)
{
    unsafe {
        return AcquireSRWLockExclusive(
            SRWLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AcquireSRWLockShared(
    SRWLock:  PSRWLOCK    
)
{
    unsafe {
        return AcquireSRWLockShared(
            SRWLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TryAcquireSRWLockExclusive(
    SRWLock:  PSRWLOCK    
) ->  BOOLEAN
{
    unsafe {
        return TryAcquireSRWLockExclusive(
            SRWLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TryAcquireSRWLockShared(
    SRWLock:  PSRWLOCK    
) ->  BOOLEAN
{
    unsafe {
        return TryAcquireSRWLockShared(
            SRWLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeCriticalSection(
    lpCriticalSection:  LPCRITICAL_SECTION    
)
{
    unsafe {
        return InitializeCriticalSection(
            lpCriticalSection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnterCriticalSection(
    lpCriticalSection:  LPCRITICAL_SECTION    
)
{
    unsafe {
        return EnterCriticalSection(
            lpCriticalSection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LeaveCriticalSection(
    lpCriticalSection:  LPCRITICAL_SECTION    
)
{
    unsafe {
        return LeaveCriticalSection(
            lpCriticalSection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeCriticalSectionAndSpinCount(
    lpCriticalSection:  LPCRITICAL_SECTION,
    dwSpinCount:  DWORD    
) ->  BOOL
{
    unsafe {
        return InitializeCriticalSectionAndSpinCount(
            lpCriticalSection,
            dwSpinCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeCriticalSectionEx(
    lpCriticalSection:  LPCRITICAL_SECTION,
    dwSpinCount:  DWORD,
    Flags:  DWORD    
) ->  BOOL
{
    unsafe {
        return InitializeCriticalSectionEx(
            lpCriticalSection,
            dwSpinCount,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCriticalSectionSpinCount(
    lpCriticalSection:  LPCRITICAL_SECTION,
    dwSpinCount:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetCriticalSectionSpinCount(
            lpCriticalSection,
            dwSpinCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TryEnterCriticalSection(
    lpCriticalSection:  LPCRITICAL_SECTION    
) ->  BOOL
{
    unsafe {
        return TryEnterCriticalSection(
            lpCriticalSection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteCriticalSection(
    lpCriticalSection:  LPCRITICAL_SECTION    
)
{
    unsafe {
        return DeleteCriticalSection(
            lpCriticalSection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitOnceInitialize(
    InitOnce:  PINIT_ONCE    
)
{
    unsafe {
        return InitOnceInitialize(
            InitOnce
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitOnceExecuteOnce(
    InitOnce:  PINIT_ONCE,
    InitFn:  PINIT_ONCE_FN,
    Parameter:  PVOID,
    Context: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return InitOnceExecuteOnce(
            InitOnce,
            InitFn,
            Parameter,
            Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitOnceBeginInitialize(
    lpInitOnce:  LPINIT_ONCE,
    dwFlags:  DWORD,
    fPending:  PBOOL,
    lpContext: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return InitOnceBeginInitialize(
            lpInitOnce,
            dwFlags,
            fPending,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitOnceComplete(
    lpInitOnce:  LPINIT_ONCE,
    dwFlags:  DWORD,
    lpContext:  LPVOID    
) ->  BOOL
{
    unsafe {
        return InitOnceComplete(
            lpInitOnce,
            dwFlags,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeConditionVariable(
    ConditionVariable:  PCONDITION_VARIABLE    
)
{
    unsafe {
        return InitializeConditionVariable(
            ConditionVariable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WakeConditionVariable(
    ConditionVariable:  PCONDITION_VARIABLE    
)
{
    unsafe {
        return WakeConditionVariable(
            ConditionVariable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WakeAllConditionVariable(
    ConditionVariable:  PCONDITION_VARIABLE    
)
{
    unsafe {
        return WakeAllConditionVariable(
            ConditionVariable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SleepConditionVariableCS(
    ConditionVariable:  PCONDITION_VARIABLE,
    CriticalSection:  PCRITICAL_SECTION,
    dwMilliseconds:  DWORD    
) ->  BOOL
{
    unsafe {
        return SleepConditionVariableCS(
            ConditionVariable,
            CriticalSection,
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SleepConditionVariableSRW(
    ConditionVariable:  PCONDITION_VARIABLE,
    SRWLock:  PSRWLOCK,
    dwMilliseconds:  DWORD,
    Flags:  ULONG    
) ->  BOOL
{
    unsafe {
        return SleepConditionVariableSRW(
            ConditionVariable,
            SRWLock,
            dwMilliseconds,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEvent(
    hEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetEvent(
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResetEvent(
    hEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return ResetEvent(
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseSemaphore(
    hSemaphore:  HANDLE,
    lReleaseCount:  LONG,
    lpPreviousCount:  LPLONG    
) ->  BOOL
{
    unsafe {
        return ReleaseSemaphore(
            hSemaphore,
            lReleaseCount,
            lpPreviousCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseMutex(
    hMutex:  HANDLE    
) ->  BOOL
{
    unsafe {
        return ReleaseMutex(
            hMutex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForSingleObject(
    hHandle:  HANDLE,
    dwMilliseconds:  DWORD    
) ->  DWORD
{
    unsafe {
        return WaitForSingleObject(
            hHandle,
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SleepEx(
    dwMilliseconds:  DWORD,
    bAlertable:  BOOL    
) ->  DWORD
{
    unsafe {
        return SleepEx(
            dwMilliseconds,
            bAlertable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForSingleObjectEx(
    hHandle:  HANDLE,
    dwMilliseconds:  DWORD,
    bAlertable:  BOOL    
) ->  DWORD
{
    unsafe {
        return WaitForSingleObjectEx(
            hHandle,
            dwMilliseconds,
            bAlertable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForMultipleObjectsEx(
    nCount:  DWORD,
    lpHandles: *const HANDLE,
    bWaitAll:  BOOL,
    dwMilliseconds:  DWORD,
    bAlertable:  BOOL    
) ->  DWORD
{
    unsafe {
        return WaitForMultipleObjectsEx(
            nCount,
            lpHandles,
            bWaitAll,
            dwMilliseconds,
            bAlertable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMutexA(
    lpMutexAttributes:  LPSECURITY_ATTRIBUTES,
    bInitialOwner:  BOOL,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return CreateMutexA(
            lpMutexAttributes,
            bInitialOwner,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMutexW(
    lpMutexAttributes:  LPSECURITY_ATTRIBUTES,
    bInitialOwner:  BOOL,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return CreateMutexW(
            lpMutexAttributes,
            bInitialOwner,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenMutexW(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenMutexW(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEventA(
    lpEventAttributes:  LPSECURITY_ATTRIBUTES,
    bManualReset:  BOOL,
    bInitialState:  BOOL,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return CreateEventA(
            lpEventAttributes,
            bManualReset,
            bInitialState,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEventW(
    lpEventAttributes:  LPSECURITY_ATTRIBUTES,
    bManualReset:  BOOL,
    bInitialState:  BOOL,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return CreateEventW(
            lpEventAttributes,
            bManualReset,
            bInitialState,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenEventA(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenEventA(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenEventW(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenEventW(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenSemaphoreW(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenSemaphoreW(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenWaitableTimerW(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpTimerName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenWaitableTimerW(
            dwDesiredAccess,
            bInheritHandle,
            lpTimerName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWaitableTimerEx(
    hTimer:  HANDLE,
    lpDueTime: *const LARGE_INTEGER,
    lPeriod:  LONG,
    pfnCompletionRoutine:  PTIMERAPCROUTINE,
    lpArgToCompletionRoutine:  LPVOID,
    WakeContext:  PREASON_CONTEXT,
    TolerableDelay:  ULONG    
) ->  BOOL
{
    unsafe {
        return SetWaitableTimerEx(
            hTimer,
            lpDueTime,
            lPeriod,
            pfnCompletionRoutine,
            lpArgToCompletionRoutine,
            WakeContext,
            TolerableDelay
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWaitableTimer(
    hTimer:  HANDLE,
    lpDueTime: *const LARGE_INTEGER,
    lPeriod:  LONG,
    pfnCompletionRoutine:  PTIMERAPCROUTINE,
    lpArgToCompletionRoutine:  LPVOID,
    fResume:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetWaitableTimer(
            hTimer,
            lpDueTime,
            lPeriod,
            pfnCompletionRoutine,
            lpArgToCompletionRoutine,
            fResume
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelWaitableTimer(
    hTimer:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CancelWaitableTimer(
            hTimer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMutexExA(
    lpMutexAttributes:  LPSECURITY_ATTRIBUTES,
    lpName:  LPCSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateMutexExA(
            lpMutexAttributes,
            lpName,
            dwFlags,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMutexExW(
    lpMutexAttributes:  LPSECURITY_ATTRIBUTES,
    lpName:  LPCWSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateMutexExW(
            lpMutexAttributes,
            lpName,
            dwFlags,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEventExA(
    lpEventAttributes:  LPSECURITY_ATTRIBUTES,
    lpName:  LPCSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateEventExA(
            lpEventAttributes,
            lpName,
            dwFlags,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEventExW(
    lpEventAttributes:  LPSECURITY_ATTRIBUTES,
    lpName:  LPCWSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateEventExW(
            lpEventAttributes,
            lpName,
            dwFlags,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSemaphoreExW(
    lpSemaphoreAttributes:  LPSECURITY_ATTRIBUTES,
    lInitialCount:  LONG,
    lMaximumCount:  LONG,
    lpName:  LPCWSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateSemaphoreExW(
            lpSemaphoreAttributes,
            lInitialCount,
            lMaximumCount,
            lpName,
            dwFlags,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWaitableTimerExW(
    lpTimerAttributes:  LPSECURITY_ATTRIBUTES,
    lpTimerName:  LPCWSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateWaitableTimerExW(
            lpTimerAttributes,
            lpTimerName,
            dwFlags,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnterSynchronizationBarrier(
    lpBarrier:  LPSYNCHRONIZATION_BARRIER,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnterSynchronizationBarrier(
            lpBarrier,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeSynchronizationBarrier(
    lpBarrier:  LPSYNCHRONIZATION_BARRIER,
    lTotalThreads:  LONG,
    lSpinCount:  LONG    
) ->  BOOL
{
    unsafe {
        return InitializeSynchronizationBarrier(
            lpBarrier,
            lTotalThreads,
            lSpinCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteSynchronizationBarrier(
    lpBarrier:  LPSYNCHRONIZATION_BARRIER    
) ->  BOOL
{
    unsafe {
        return DeleteSynchronizationBarrier(
            lpBarrier
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Sleep(
    dwMilliseconds:  DWORD    
)
{
    unsafe {
        return Sleep(
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitOnAddress(
    Address: *mut c_void,
    CompareAddress:  PVOID,
    AddressSize:  SIZE_T,
    dwMilliseconds:  DWORD    
) ->  BOOL
{
    unsafe {
        return WaitOnAddress(
            Address,
            CompareAddress,
            AddressSize,
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WakeByAddressSingle(
    Address:  PVOID    
)
{
    unsafe {
        return WakeByAddressSingle(
            Address
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WakeByAddressAll(
    Address:  PVOID    
)
{
    unsafe {
        return WakeByAddressAll(
            Address
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SignalObjectAndWait(
    hObjectToSignal:  HANDLE,
    hObjectToWaitOn:  HANDLE,
    dwMilliseconds:  DWORD,
    bAlertable:  BOOL    
) ->  DWORD
{
    unsafe {
        return SignalObjectAndWait(
            hObjectToSignal,
            hObjectToWaitOn,
            dwMilliseconds,
            bAlertable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForMultipleObjects(
    nCount:  DWORD,
    lpHandles: *const HANDLE,
    bWaitAll:  BOOL,
    dwMilliseconds:  DWORD    
) ->  DWORD
{
    unsafe {
        return WaitForMultipleObjects(
            nCount,
            lpHandles,
            bWaitAll,
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSemaphoreW(
    lpSemaphoreAttributes:  LPSECURITY_ATTRIBUTES,
    lInitialCount:  LONG,
    lMaximumCount:  LONG,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return CreateSemaphoreW(
            lpSemaphoreAttributes,
            lInitialCount,
            lMaximumCount,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWaitableTimerW(
    lpTimerAttributes:  LPSECURITY_ATTRIBUTES,
    bManualReset:  BOOL,
    lpTimerName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return CreateWaitableTimerW(
            lpTimerAttributes,
            bManualReset,
            lpTimerName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeSListHead(
    ListHead:  PSLIST_HEADER    
)
{
    unsafe {
        return InitializeSListHead(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InterlockedPopEntrySList(
    ListHead:  PSLIST_HEADER    
) ->  PSLIST_ENTRY
{
    unsafe {
        return InterlockedPopEntrySList(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InterlockedPushEntrySList(
    ListHead:  PSLIST_HEADER,
    ListEntry:  PSLIST_ENTRY    
) ->  PSLIST_ENTRY
{
    unsafe {
        return InterlockedPushEntrySList(
            ListHead,
            ListEntry
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InterlockedPushListSListEx(
    ListHead:  PSLIST_HEADER,
    List:  PSLIST_ENTRY,
    ListEnd:  PSLIST_ENTRY,
    Count:  ULONG    
) ->  PSLIST_ENTRY
{
    unsafe {
        return InterlockedPushListSListEx(
            ListHead,
            List,
            ListEnd,
            Count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InterlockedFlushSList(
    ListHead:  PSLIST_HEADER    
) ->  PSLIST_ENTRY
{
    unsafe {
        return InterlockedFlushSList(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryDepthSList(
    ListHead:  PSLIST_HEADER    
) ->  USHORT
{
    unsafe {
        return QueryDepthSList(
            ListHead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueueUserAPC(
    pfnAPC:  PAPCFUNC,
    hThread:  HANDLE,
    dwData:  ULONG_PTR    
) ->  DWORD
{
    unsafe {
        return QueueUserAPC(
            pfnAPC,
            hThread,
            dwData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessTimes(
    hProcess:  HANDLE,
    lpCreationTime:  LPFILETIME,
    lpExitTime:  LPFILETIME,
    lpKernelTime:  LPFILETIME,
    lpUserTime:  LPFILETIME    
) ->  BOOL
{
    unsafe {
        return GetProcessTimes(
            hProcess,
            lpCreationTime,
            lpExitTime,
            lpKernelTime,
            lpUserTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentProcess(
    
) ->  HANDLE
{
    unsafe {
        return GetCurrentProcess(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentProcessId(
    
) ->  DWORD
{
    unsafe {
        return GetCurrentProcessId(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TerminateProcess(
    hProcess:  HANDLE,
    uExitCode:  UINT    
) ->  BOOL
{
    unsafe {
        return TerminateProcess(
            hProcess,
            uExitCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetExitCodeProcess(
    hProcess:  HANDLE,
    lpExitCode:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetExitCodeProcess(
            hProcess,
            lpExitCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SwitchToThread(
    
) ->  BOOL
{
    unsafe {
        return SwitchToThread(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateThread(
    lpThreadAttributes:  LPSECURITY_ATTRIBUTES,
    dwStackSize:  SIZE_T,
    lpStartAddress:  LPTHREAD_START_ROUTINE,
    lpParameter:  LPVOID,
    dwCreationFlags:  DWORD,
    lpThreadId:  LPDWORD    
) ->  HANDLE
{
    unsafe {
        return CreateThread(
            lpThreadAttributes,
            dwStackSize,
            lpStartAddress,
            lpParameter,
            dwCreationFlags,
            lpThreadId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateRemoteThread(
    hProcess:  HANDLE,
    lpThreadAttributes:  LPSECURITY_ATTRIBUTES,
    dwStackSize:  SIZE_T,
    lpStartAddress:  LPTHREAD_START_ROUTINE,
    lpParameter:  LPVOID,
    dwCreationFlags:  DWORD,
    lpThreadId:  LPDWORD    
) ->  HANDLE
{
    unsafe {
        return CreateRemoteThread(
            hProcess,
            lpThreadAttributes,
            dwStackSize,
            lpStartAddress,
            lpParameter,
            dwCreationFlags,
            lpThreadId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentThread(
    
) ->  HANDLE
{
    unsafe {
        return GetCurrentThread(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentThreadId(
    
) ->  DWORD
{
    unsafe {
        return GetCurrentThreadId(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenThread(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    dwThreadId:  DWORD    
) ->  HANDLE
{
    unsafe {
        return OpenThread(
            dwDesiredAccess,
            bInheritHandle,
            dwThreadId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadPriority(
    hThread:  HANDLE,
    nPriority:  c_int    
) ->  BOOL
{
    unsafe {
        return SetThreadPriority(
            hThread,
            nPriority
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadPriorityBoost(
    hThread:  HANDLE,
    bDisablePriorityBoost:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetThreadPriorityBoost(
            hThread,
            bDisablePriorityBoost
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadPriorityBoost(
    hThread:  HANDLE,
    pDisablePriorityBoost:  PBOOL    
) ->  BOOL
{
    unsafe {
        return GetThreadPriorityBoost(
            hThread,
            pDisablePriorityBoost
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadPriority(
    hThread:  HANDLE    
) ->  c_int
{
    unsafe {
        return GetThreadPriority(
            hThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TerminateThread(
    hThread:  HANDLE,
    dwExitCode:  DWORD    
) ->  BOOL
{
    unsafe {
        return TerminateThread(
            hThread,
            dwExitCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetExitCodeThread(
    hThread:  HANDLE,
    lpExitCode:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetExitCodeThread(
            hThread,
            lpExitCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SuspendThread(
    hThread:  HANDLE    
) ->  DWORD
{
    unsafe {
        return SuspendThread(
            hThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResumeThread(
    hThread:  HANDLE    
) ->  DWORD
{
    unsafe {
        return ResumeThread(
            hThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TlsAlloc(
    
) ->  DWORD
{
    unsafe {
        return TlsAlloc(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TlsGetValue(
    dwTlsIndex:  DWORD    
) ->  LPVOID
{
    unsafe {
        return TlsGetValue(
            dwTlsIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TlsSetValue(
    dwTlsIndex:  DWORD,
    lpTlsValue:  LPVOID    
) ->  BOOL
{
    unsafe {
        return TlsSetValue(
            dwTlsIndex,
            lpTlsValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TlsFree(
    dwTlsIndex:  DWORD    
) ->  BOOL
{
    unsafe {
        return TlsFree(
            dwTlsIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateProcessA(
    lpApplicationName:  LPCSTR,
    lpCommandLine:  LPSTR,
    lpProcessAttributes:  LPSECURITY_ATTRIBUTES,
    lpThreadAttributes:  LPSECURITY_ATTRIBUTES,
    bInheritHandles:  BOOL,
    dwCreationFlags:  DWORD,
    lpEnvironment:  LPVOID,
    lpCurrentDirectory:  LPCSTR,
    lpStartupInfo:  LPSTARTUPINFOA,
    lpProcessInformation:  LPPROCESS_INFORMATION    
) ->  BOOL
{
    unsafe {
        return CreateProcessA(
            lpApplicationName,
            lpCommandLine,
            lpProcessAttributes,
            lpThreadAttributes,
            bInheritHandles,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateProcessW(
    lpApplicationName:  LPCWSTR,
    lpCommandLine:  LPWSTR,
    lpProcessAttributes:  LPSECURITY_ATTRIBUTES,
    lpThreadAttributes:  LPSECURITY_ATTRIBUTES,
    bInheritHandles:  BOOL,
    dwCreationFlags:  DWORD,
    lpEnvironment:  LPVOID,
    lpCurrentDirectory:  LPCWSTR,
    lpStartupInfo:  LPSTARTUPINFOW,
    lpProcessInformation:  LPPROCESS_INFORMATION    
) ->  BOOL
{
    unsafe {
        return CreateProcessW(
            lpApplicationName,
            lpCommandLine,
            lpProcessAttributes,
            lpThreadAttributes,
            bInheritHandles,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessShutdownParameters(
    dwLevel:  DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetProcessShutdownParameters(
            dwLevel,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessVersion(
    ProcessId:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetProcessVersion(
            ProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStartupInfoW(
    lpStartupInfo:  LPSTARTUPINFOW    
)
{
    unsafe {
        return GetStartupInfoW(
            lpStartupInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateProcessAsUserW(
    hToken:  HANDLE,
    lpApplicationName:  LPCWSTR,
    lpCommandLine:  LPWSTR,
    lpProcessAttributes:  LPSECURITY_ATTRIBUTES,
    lpThreadAttributes:  LPSECURITY_ATTRIBUTES,
    bInheritHandles:  BOOL,
    dwCreationFlags:  DWORD,
    lpEnvironment:  LPVOID,
    lpCurrentDirectory:  LPCWSTR,
    lpStartupInfo:  LPSTARTUPINFOW,
    lpProcessInformation:  LPPROCESS_INFORMATION    
) ->  BOOL
{
    unsafe {
        return CreateProcessAsUserW(
            hToken,
            lpApplicationName,
            lpCommandLine,
            lpProcessAttributes,
            lpThreadAttributes,
            bInheritHandles,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadToken(
    Thread:  PHANDLE,
    Token:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetThreadToken(
            Thread,
            Token
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenProcessToken(
    ProcessHandle:  HANDLE,
    DesiredAccess:  DWORD,
    TokenHandle:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return OpenProcessToken(
            ProcessHandle,
            DesiredAccess,
            TokenHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenThreadToken(
    ThreadHandle:  HANDLE,
    DesiredAccess:  DWORD,
    OpenAsSelf:  BOOL,
    TokenHandle:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return OpenThreadToken(
            ThreadHandle,
            DesiredAccess,
            OpenAsSelf,
            TokenHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPriorityClass(
    hProcess:  HANDLE,
    dwPriorityClass:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetPriorityClass(
            hProcess,
            dwPriorityClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPriorityClass(
    hProcess:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetPriorityClass(
            hProcess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadStackGuarantee(
    StackSizeInBytes:  PULONG    
) ->  BOOL
{
    unsafe {
        return SetThreadStackGuarantee(
            StackSizeInBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ProcessIdToSessionId(
    dwProcessId:  DWORD,
    pSessionId: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return ProcessIdToSessionId(
            dwProcessId,
            pSessionId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessId(
    Process:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetProcessId(
            Process
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadId(
    Thread:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetThreadId(
            Thread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlushProcessWriteBuffers(
    
)
{
    unsafe {
        return FlushProcessWriteBuffers(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessIdOfThread(
    Thread:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetProcessIdOfThread(
            Thread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeProcThreadAttributeList(
    lpAttributeList:  LPPROC_THREAD_ATTRIBUTE_LIST,
    dwAttributeCount:  DWORD,
    dwFlags:  DWORD,
    lpSize:  PSIZE_T    
) ->  BOOL
{
    unsafe {
        return InitializeProcThreadAttributeList(
            lpAttributeList,
            dwAttributeCount,
            dwFlags,
            lpSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteProcThreadAttributeList(
    lpAttributeList:  LPPROC_THREAD_ATTRIBUTE_LIST    
)
{
    unsafe {
        return DeleteProcThreadAttributeList(
            lpAttributeList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateProcThreadAttribute(
    lpAttributeList:  LPPROC_THREAD_ATTRIBUTE_LIST,
    dwFlags:  DWORD,
    Attribute:  DWORD_PTR,
    lpValue:  PVOID,
    cbSize:  SIZE_T,
    lpPreviousValue:  PVOID,
    lpReturnSize:  PSIZE_T    
) ->  BOOL
{
    unsafe {
        return UpdateProcThreadAttribute(
            lpAttributeList,
            dwFlags,
            Attribute,
            lpValue,
            cbSize,
            lpPreviousValue,
            lpReturnSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessDynamicEHContinuationTargets(
    Process:  HANDLE,
    NumberOfTargets:  USHORT,
    Targets:  PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET    
) ->  BOOL
{
    unsafe {
        return SetProcessDynamicEHContinuationTargets(
            Process,
            NumberOfTargets,
            Targets
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessDynamicEnforcedCetCompatibleRanges(
    Process:  HANDLE,
    NumberOfRanges:  USHORT,
    Ranges:  PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE    
) ->  BOOL
{
    unsafe {
        return SetProcessDynamicEnforcedCetCompatibleRanges(
            Process,
            NumberOfRanges,
            Ranges
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessAffinityUpdateMode(
    hProcess:  HANDLE,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetProcessAffinityUpdateMode(
            hProcess,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryProcessAffinityUpdateMode(
    hProcess:  HANDLE,
    lpdwFlags:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryProcessAffinityUpdateMode(
            hProcess,
            lpdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateRemoteThreadEx(
    hProcess:  HANDLE,
    lpThreadAttributes:  LPSECURITY_ATTRIBUTES,
    dwStackSize:  SIZE_T,
    lpStartAddress:  LPTHREAD_START_ROUTINE,
    lpParameter:  LPVOID,
    dwCreationFlags:  DWORD,
    lpAttributeList:  LPPROC_THREAD_ATTRIBUTE_LIST,
    lpThreadId:  LPDWORD    
) ->  HANDLE
{
    unsafe {
        return CreateRemoteThreadEx(
            hProcess,
            lpThreadAttributes,
            dwStackSize,
            lpStartAddress,
            lpParameter,
            dwCreationFlags,
            lpAttributeList,
            lpThreadId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentThreadStackLimits(
    LowLimit:  PULONG_PTR,
    HighLimit:  PULONG_PTR    
)
{
    unsafe {
        return GetCurrentThreadStackLimits(
            LowLimit,
            HighLimit
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadContext(
    hThread:  HANDLE,
    lpContext:  LPCONTEXT    
) ->  BOOL
{
    unsafe {
        return GetThreadContext(
            hThread,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessMitigationPolicy(
    hProcess:  HANDLE,
    MitigationPolicy:  PROCESS_MITIGATION_POLICY,
    lpBuffer:  PVOID,
    dwLength:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return GetProcessMitigationPolicy(
            hProcess,
            MitigationPolicy,
            lpBuffer,
            dwLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadContext(
    hThread:  HANDLE,
    lpContext: *const CONTEXT    
) ->  BOOL
{
    unsafe {
        return SetThreadContext(
            hThread,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessMitigationPolicy(
    MitigationPolicy:  PROCESS_MITIGATION_POLICY,
    lpBuffer:  PVOID,
    dwLength:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return SetProcessMitigationPolicy(
            MitigationPolicy,
            lpBuffer,
            dwLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlushInstructionCache(
    hProcess:  HANDLE,
    lpBaseAddress:  LPCVOID,
    dwSize:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return FlushInstructionCache(
            hProcess,
            lpBaseAddress,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadTimes(
    hThread:  HANDLE,
    lpCreationTime:  LPFILETIME,
    lpExitTime:  LPFILETIME,
    lpKernelTime:  LPFILETIME,
    lpUserTime:  LPFILETIME    
) ->  BOOL
{
    unsafe {
        return GetThreadTimes(
            hThread,
            lpCreationTime,
            lpExitTime,
            lpKernelTime,
            lpUserTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenProcess(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    dwProcessId:  DWORD    
) ->  HANDLE
{
    unsafe {
        return OpenProcess(
            dwDesiredAccess,
            bInheritHandle,
            dwProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsProcessorFeaturePresent(
    ProcessorFeature:  DWORD    
) ->  BOOL
{
    unsafe {
        return IsProcessorFeaturePresent(
            ProcessorFeature
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessHandleCount(
    hProcess:  HANDLE,
    pdwHandleCount:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetProcessHandleCount(
            hProcess,
            pdwHandleCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentProcessorNumber(
    
) ->  DWORD
{
    unsafe {
        return GetCurrentProcessorNumber(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadIdealProcessorEx(
    hThread:  HANDLE,
    lpIdealProcessor:  PPROCESSOR_NUMBER,
    lpPreviousIdealProcessor:  PPROCESSOR_NUMBER    
) ->  BOOL
{
    unsafe {
        return SetThreadIdealProcessorEx(
            hThread,
            lpIdealProcessor,
            lpPreviousIdealProcessor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadIdealProcessorEx(
    hThread:  HANDLE,
    lpIdealProcessor:  PPROCESSOR_NUMBER    
) ->  BOOL
{
    unsafe {
        return GetThreadIdealProcessorEx(
            hThread,
            lpIdealProcessor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentProcessorNumberEx(
    ProcNumber:  PPROCESSOR_NUMBER    
)
{
    unsafe {
        return GetCurrentProcessorNumberEx(
            ProcNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessPriorityBoost(
    hProcess:  HANDLE,
    pDisablePriorityBoost:  PBOOL    
) ->  BOOL
{
    unsafe {
        return GetProcessPriorityBoost(
            hProcess,
            pDisablePriorityBoost
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessPriorityBoost(
    hProcess:  HANDLE,
    bDisablePriorityBoost:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetProcessPriorityBoost(
            hProcess,
            bDisablePriorityBoost
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadIOPendingFlag(
    hThread:  HANDLE,
    lpIOIsPending:  PBOOL    
) ->  BOOL
{
    unsafe {
        return GetThreadIOPendingFlag(
            hThread,
            lpIOIsPending
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemTimes(
    lpIdleTime:  PFILETIME,
    lpKernelTime:  PFILETIME,
    lpUserTime:  PFILETIME    
) ->  BOOL
{
    unsafe {
        return GetSystemTimes(
            lpIdleTime,
            lpKernelTime,
            lpUserTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadInformation(
    hThread:  HANDLE,
    ThreadInformationClass:  THREAD_INFORMATION_CLASS,
    ThreadInformation:  LPVOID,
    ThreadInformationSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetThreadInformation(
            hThread,
            ThreadInformationClass,
            ThreadInformation,
            ThreadInformationSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadInformation(
    hThread:  HANDLE,
    ThreadInformationClass:  THREAD_INFORMATION_CLASS,
    ThreadInformation:  LPVOID,
    ThreadInformationSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetThreadInformation(
            hThread,
            ThreadInformationClass,
            ThreadInformation,
            ThreadInformationSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsProcessCritical(
    hProcess:  HANDLE,
    Critical:  PBOOL    
) ->  BOOL
{
    unsafe {
        return IsProcessCritical(
            hProcess,
            Critical
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProtectedPolicy(
    PolicyGuid:  LPCGUID,
    PolicyValue:  ULONG_PTR,
    OldPolicyValue:  PULONG_PTR    
) ->  BOOL
{
    unsafe {
        return SetProtectedPolicy(
            PolicyGuid,
            PolicyValue,
            OldPolicyValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryProtectedPolicy(
    PolicyGuid:  LPCGUID,
    PolicyValue:  PULONG_PTR    
) ->  BOOL
{
    unsafe {
        return QueryProtectedPolicy(
            PolicyGuid,
            PolicyValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadIdealProcessor(
    hThread:  HANDLE,
    dwIdealProcessor:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetThreadIdealProcessor(
            hThread,
            dwIdealProcessor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessInformation(
    hProcess:  HANDLE,
    ProcessInformationClass:  PROCESS_INFORMATION_CLASS,
    ProcessInformation:  LPVOID,
    ProcessInformationSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetProcessInformation(
            hProcess,
            ProcessInformationClass,
            ProcessInformation,
            ProcessInformationSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessInformation(
    hProcess:  HANDLE,
    ProcessInformationClass:  PROCESS_INFORMATION_CLASS,
    ProcessInformation:  LPVOID,
    ProcessInformationSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetProcessInformation(
            hProcess,
            ProcessInformationClass,
            ProcessInformation,
            ProcessInformationSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemCpuSetInformation(
    Information:  PSYSTEM_CPU_SET_INFORMATION,
    BufferLength:  ULONG,
    ReturnedLength:  PULONG,
    Process:  HANDLE,
    Flags:  ULONG    
) ->  BOOL
{
    unsafe {
        return GetSystemCpuSetInformation(
            Information,
            BufferLength,
            ReturnedLength,
            Process,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessDefaultCpuSets(
    Process:  HANDLE,
    CpuSetIds:  PULONG,
    CpuSetIdCount:  ULONG,
    RequiredIdCount:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetProcessDefaultCpuSets(
            Process,
            CpuSetIds,
            CpuSetIdCount,
            RequiredIdCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessDefaultCpuSets(
    Process:  HANDLE,
    CpuSetIds: *const ULONG,
    CpuSetIdCount:  ULONG    
) ->  BOOL
{
    unsafe {
        return SetProcessDefaultCpuSets(
            Process,
            CpuSetIds,
            CpuSetIdCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadSelectedCpuSets(
    Thread:  HANDLE,
    CpuSetIds:  PULONG,
    CpuSetIdCount:  ULONG,
    RequiredIdCount:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetThreadSelectedCpuSets(
            Thread,
            CpuSetIds,
            CpuSetIdCount,
            RequiredIdCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadSelectedCpuSets(
    Thread:  HANDLE,
    CpuSetIds: *const ULONG,
    CpuSetIdCount:  ULONG    
) ->  BOOL
{
    unsafe {
        return SetThreadSelectedCpuSets(
            Thread,
            CpuSetIds,
            CpuSetIdCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateProcessAsUserA(
    hToken:  HANDLE,
    lpApplicationName:  LPCSTR,
    lpCommandLine:  LPSTR,
    lpProcessAttributes:  LPSECURITY_ATTRIBUTES,
    lpThreadAttributes:  LPSECURITY_ATTRIBUTES,
    bInheritHandles:  BOOL,
    dwCreationFlags:  DWORD,
    lpEnvironment:  LPVOID,
    lpCurrentDirectory:  LPCSTR,
    lpStartupInfo:  LPSTARTUPINFOA,
    lpProcessInformation:  LPPROCESS_INFORMATION    
) ->  BOOL
{
    unsafe {
        return CreateProcessAsUserA(
            hToken,
            lpApplicationName,
            lpCommandLine,
            lpProcessAttributes,
            lpThreadAttributes,
            bInheritHandles,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessShutdownParameters(
    lpdwLevel:  LPDWORD,
    lpdwFlags:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetProcessShutdownParameters(
            lpdwLevel,
            lpdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadDescription(
    hThread:  HANDLE,
    lpThreadDescription:  PCWSTR    
) ->  HRESULT
{
    unsafe {
        return SetThreadDescription(
            hThread,
            lpThreadDescription
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadDescription(
    hThread:  HANDLE,
    ppszThreadDescription: *mut PWSTR    
) ->  HRESULT
{
    unsafe {
        return GetThreadDescription(
            hThread,
            ppszThreadDescription
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalMemoryStatusEx(
    lpBuffer:  LPMEMORYSTATUSEX    
) ->  BOOL
{
    unsafe {
        return GlobalMemoryStatusEx(
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemInfo(
    lpSystemInfo:  LPSYSTEM_INFO    
)
{
    unsafe {
        return GetSystemInfo(
            lpSystemInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemTime(
    lpSystemTime:  LPSYSTEMTIME    
)
{
    unsafe {
        return GetSystemTime(
            lpSystemTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemTimeAsFileTime(
    lpSystemTimeAsFileTime:  LPFILETIME    
)
{
    unsafe {
        return GetSystemTimeAsFileTime(
            lpSystemTimeAsFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLocalTime(
    lpSystemTime:  LPSYSTEMTIME    
)
{
    unsafe {
        return GetLocalTime(
            lpSystemTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsUserCetAvailableInEnvironment(
    UserCetEnvironment:  DWORD    
) ->  BOOL
{
    unsafe {
        return IsUserCetAvailableInEnvironment(
            UserCetEnvironment
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemLeapSecondInformation(
    Enabled:  PBOOL,
    Flags:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetSystemLeapSecondInformation(
            Enabled,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVersion(
    
) ->  DWORD
{
    unsafe {
        return GetVersion(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetLocalTime(
    lpSystemTime: *const SYSTEMTIME    
) ->  BOOL
{
    unsafe {
        return SetLocalTime(
            lpSystemTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTickCount(
    
) ->  DWORD
{
    unsafe {
        return GetTickCount(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTickCount64(
    
) ->  ULONGLONG
{
    unsafe {
        return GetTickCount64(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemTimeAdjustment(
    lpTimeAdjustment:  PDWORD,
    lpTimeIncrement:  PDWORD,
    lpTimeAdjustmentDisabled:  PBOOL    
) ->  BOOL
{
    unsafe {
        return GetSystemTimeAdjustment(
            lpTimeAdjustment,
            lpTimeIncrement,
            lpTimeAdjustmentDisabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemTimeAdjustmentPrecise(
    lpTimeAdjustment:  PDWORD64,
    lpTimeIncrement:  PDWORD64,
    lpTimeAdjustmentDisabled:  PBOOL    
) ->  BOOL
{
    unsafe {
        return GetSystemTimeAdjustmentPrecise(
            lpTimeAdjustment,
            lpTimeIncrement,
            lpTimeAdjustmentDisabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemDirectoryA(
    lpBuffer:  LPSTR,
    uSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetSystemDirectoryA(
            lpBuffer,
            uSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemDirectoryW(
    lpBuffer:  LPWSTR,
    uSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetSystemDirectoryW(
            lpBuffer,
            uSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowsDirectoryA(
    lpBuffer:  LPSTR,
    uSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetWindowsDirectoryA(
            lpBuffer,
            uSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowsDirectoryW(
    lpBuffer:  LPWSTR,
    uSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetWindowsDirectoryW(
            lpBuffer,
            uSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemWindowsDirectoryA(
    lpBuffer:  LPSTR,
    uSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetSystemWindowsDirectoryA(
            lpBuffer,
            uSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemWindowsDirectoryW(
    lpBuffer:  LPWSTR,
    uSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetSystemWindowsDirectoryW(
            lpBuffer,
            uSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetComputerNameExA(
    NameType:  COMPUTER_NAME_FORMAT,
    lpBuffer:  LPSTR,
    nSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetComputerNameExA(
            NameType,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetComputerNameExW(
    NameType:  COMPUTER_NAME_FORMAT,
    lpBuffer:  LPWSTR,
    nSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetComputerNameExW(
            NameType,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetComputerNameExW(
    NameType:  COMPUTER_NAME_FORMAT,
    lpBuffer:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetComputerNameExW(
            NameType,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSystemTime(
    lpSystemTime: *const SYSTEMTIME    
) ->  BOOL
{
    unsafe {
        return SetSystemTime(
            lpSystemTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVersionExA(
    lpVersionInformation:  LPOSVERSIONINFOA    
) ->  BOOL
{
    unsafe {
        return GetVersionExA(
            lpVersionInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVersionExW(
    lpVersionInformation:  LPOSVERSIONINFOW    
) ->  BOOL
{
    unsafe {
        return GetVersionExW(
            lpVersionInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLogicalProcessorInformation(
    Buffer:  PSYSTEM_LOGICAL_PROCESSOR_INFORMATION,
    ReturnedLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetLogicalProcessorInformation(
            Buffer,
            ReturnedLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLogicalProcessorInformationEx(
    RelationshipType:  LOGICAL_PROCESSOR_RELATIONSHIP,
    Buffer:  PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,
    ReturnedLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetLogicalProcessorInformationEx(
            RelationshipType,
            Buffer,
            ReturnedLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNativeSystemInfo(
    lpSystemInfo:  LPSYSTEM_INFO    
)
{
    unsafe {
        return GetNativeSystemInfo(
            lpSystemInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemTimePreciseAsFileTime(
    lpSystemTimeAsFileTime:  LPFILETIME    
)
{
    unsafe {
        return GetSystemTimePreciseAsFileTime(
            lpSystemTimeAsFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProductInfo(
    dwOSMajorVersion:  DWORD,
    dwOSMinorVersion:  DWORD,
    dwSpMajorVersion:  DWORD,
    dwSpMinorVersion:  DWORD,
    pdwReturnedProductType:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetProductInfo(
            dwOSMajorVersion,
            dwOSMinorVersion,
            dwSpMajorVersion,
            dwSpMinorVersion,
            pdwReturnedProductType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOsSafeBootMode(
    Flags:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetOsSafeBootMode(
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemFirmwareTables(
    FirmwareTableProviderSignature:  DWORD,
    pFirmwareTableEnumBuffer:  PVOID,
    BufferSize:  DWORD    
) ->  UINT
{
    unsafe {
        return EnumSystemFirmwareTables(
            FirmwareTableProviderSignature,
            pFirmwareTableEnumBuffer,
            BufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemFirmwareTable(
    FirmwareTableProviderSignature:  DWORD,
    FirmwareTableID:  DWORD,
    pFirmwareTableBuffer:  PVOID,
    BufferSize:  DWORD    
) ->  UINT
{
    unsafe {
        return GetSystemFirmwareTable(
            FirmwareTableProviderSignature,
            FirmwareTableID,
            pFirmwareTableBuffer,
            BufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DnsHostnameToComputerNameExW(
    Hostname:  LPCWSTR,
    ComputerName:  LPWSTR,
    nSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return DnsHostnameToComputerNameExW(
            Hostname,
            ComputerName,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPhysicallyInstalledSystemMemory(
    TotalMemoryInKilobytes:  PULONGLONG    
) ->  BOOL
{
    unsafe {
        return GetPhysicallyInstalledSystemMemory(
            TotalMemoryInKilobytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetComputerNameEx2W(
    NameType:  COMPUTER_NAME_FORMAT,
    Flags:  DWORD,
    lpBuffer:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetComputerNameEx2W(
            NameType,
            Flags,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSystemTimeAdjustment(
    dwTimeAdjustment:  DWORD,
    bTimeAdjustmentDisabled:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetSystemTimeAdjustment(
            dwTimeAdjustment,
            bTimeAdjustmentDisabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSystemTimeAdjustmentPrecise(
    dwTimeAdjustment:  DWORD64,
    bTimeAdjustmentDisabled:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetSystemTimeAdjustmentPrecise(
            dwTimeAdjustment,
            bTimeAdjustmentDisabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InstallELAMCertificateInfo(
    ELAMFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return InstallELAMCertificateInfo(
            ELAMFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessorSystemCycleTime(
    Group:  USHORT,
    Buffer:  PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION,
    ReturnedLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetProcessorSystemCycleTime(
            Group,
            Buffer,
            ReturnedLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOsManufacturingMode(
    pbEnabled:  PBOOL    
) ->  BOOL
{
    unsafe {
        return GetOsManufacturingMode(
            pbEnabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetIntegratedDisplaySize(
    sizeInInches: *mut f64    
) ->  HRESULT
{
    unsafe {
        return GetIntegratedDisplaySize(
            sizeInInches
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetComputerNameA(
    lpComputerName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetComputerNameA(
            lpComputerName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetComputerNameW(
    lpComputerName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetComputerNameW(
            lpComputerName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetComputerNameExA(
    NameType:  COMPUTER_NAME_FORMAT,
    lpBuffer:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetComputerNameExA(
            NameType,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualAlloc(
    lpAddress:  LPVOID,
    dwSize:  SIZE_T,
    flAllocationType:  DWORD,
    flProtect:  DWORD    
) ->  LPVOID
{
    unsafe {
        return VirtualAlloc(
            lpAddress,
            dwSize,
            flAllocationType,
            flProtect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualProtect(
    lpAddress:  LPVOID,
    dwSize:  SIZE_T,
    flNewProtect:  DWORD,
    lpflOldProtect:  PDWORD    
) ->  BOOL
{
    unsafe {
        return VirtualProtect(
            lpAddress,
            dwSize,
            flNewProtect,
            lpflOldProtect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualFree(
    lpAddress:  LPVOID,
    dwSize:  SIZE_T,
    dwFreeType:  DWORD    
) ->  BOOL
{
    unsafe {
        return VirtualFree(
            lpAddress,
            dwSize,
            dwFreeType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualQuery(
    lpAddress:  LPCVOID,
    lpBuffer:  PMEMORY_BASIC_INFORMATION,
    dwLength:  SIZE_T    
) ->  SIZE_T
{
    unsafe {
        return VirtualQuery(
            lpAddress,
            lpBuffer,
            dwLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualAllocEx(
    hProcess:  HANDLE,
    lpAddress:  LPVOID,
    dwSize:  SIZE_T,
    flAllocationType:  DWORD,
    flProtect:  DWORD    
) ->  LPVOID
{
    unsafe {
        return VirtualAllocEx(
            hProcess,
            lpAddress,
            dwSize,
            flAllocationType,
            flProtect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualProtectEx(
    hProcess:  HANDLE,
    lpAddress:  LPVOID,
    dwSize:  SIZE_T,
    flNewProtect:  DWORD,
    lpflOldProtect:  PDWORD    
) ->  BOOL
{
    unsafe {
        return VirtualProtectEx(
            hProcess,
            lpAddress,
            dwSize,
            flNewProtect,
            lpflOldProtect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualQueryEx(
    hProcess:  HANDLE,
    lpAddress:  LPCVOID,
    lpBuffer:  PMEMORY_BASIC_INFORMATION,
    dwLength:  SIZE_T    
) ->  SIZE_T
{
    unsafe {
        return VirtualQueryEx(
            hProcess,
            lpAddress,
            lpBuffer,
            dwLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadProcessMemory(
    hProcess:  HANDLE,
    lpBaseAddress:  LPCVOID,
    lpBuffer:  LPVOID,
    nSize:  SIZE_T,
    lpNumberOfBytesRead: *mut SIZE_T    
) ->  BOOL
{
    unsafe {
        return ReadProcessMemory(
            hProcess,
            lpBaseAddress,
            lpBuffer,
            nSize,
            lpNumberOfBytesRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteProcessMemory(
    hProcess:  HANDLE,
    lpBaseAddress:  LPVOID,
    lpBuffer:  LPCVOID,
    nSize:  SIZE_T,
    lpNumberOfBytesWritten: *mut SIZE_T    
) ->  BOOL
{
    unsafe {
        return WriteProcessMemory(
            hProcess,
            lpBaseAddress,
            lpBuffer,
            nSize,
            lpNumberOfBytesWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileMappingW(
    hFile:  HANDLE,
    lpFileMappingAttributes:  LPSECURITY_ATTRIBUTES,
    flProtect:  DWORD,
    dwMaximumSizeHigh:  DWORD,
    dwMaximumSizeLow:  DWORD,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return CreateFileMappingW(
            hFile,
            lpFileMappingAttributes,
            flProtect,
            dwMaximumSizeHigh,
            dwMaximumSizeLow,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenFileMappingW(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenFileMappingW(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapViewOfFile(
    hFileMappingObject:  HANDLE,
    dwDesiredAccess:  DWORD,
    dwFileOffsetHigh:  DWORD,
    dwFileOffsetLow:  DWORD,
    dwNumberOfBytesToMap:  SIZE_T    
) ->  LPVOID
{
    unsafe {
        return MapViewOfFile(
            hFileMappingObject,
            dwDesiredAccess,
            dwFileOffsetHigh,
            dwFileOffsetLow,
            dwNumberOfBytesToMap
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapViewOfFileEx(
    hFileMappingObject:  HANDLE,
    dwDesiredAccess:  DWORD,
    dwFileOffsetHigh:  DWORD,
    dwFileOffsetLow:  DWORD,
    dwNumberOfBytesToMap:  SIZE_T,
    lpBaseAddress:  LPVOID    
) ->  LPVOID
{
    unsafe {
        return MapViewOfFileEx(
            hFileMappingObject,
            dwDesiredAccess,
            dwFileOffsetHigh,
            dwFileOffsetLow,
            dwNumberOfBytesToMap,
            lpBaseAddress
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualFreeEx(
    hProcess:  HANDLE,
    lpAddress:  LPVOID,
    dwSize:  SIZE_T,
    dwFreeType:  DWORD    
) ->  BOOL
{
    unsafe {
        return VirtualFreeEx(
            hProcess,
            lpAddress,
            dwSize,
            dwFreeType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlushViewOfFile(
    lpBaseAddress:  LPCVOID,
    dwNumberOfBytesToFlush:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return FlushViewOfFile(
            lpBaseAddress,
            dwNumberOfBytesToFlush
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnmapViewOfFile(
    lpBaseAddress:  LPCVOID    
) ->  BOOL
{
    unsafe {
        return UnmapViewOfFile(
            lpBaseAddress
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLargePageMinimum(
    
) ->  SIZE_T
{
    unsafe {
        return GetLargePageMinimum(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessWorkingSetSizeEx(
    hProcess:  HANDLE,
    lpMinimumWorkingSetSize:  PSIZE_T,
    lpMaximumWorkingSetSize:  PSIZE_T,
    Flags:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetProcessWorkingSetSizeEx(
            hProcess,
            lpMinimumWorkingSetSize,
            lpMaximumWorkingSetSize,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessWorkingSetSizeEx(
    hProcess:  HANDLE,
    dwMinimumWorkingSetSize:  SIZE_T,
    dwMaximumWorkingSetSize:  SIZE_T,
    Flags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetProcessWorkingSetSizeEx(
            hProcess,
            dwMinimumWorkingSetSize,
            dwMaximumWorkingSetSize,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualLock(
    lpAddress:  LPVOID,
    dwSize:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return VirtualLock(
            lpAddress,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualUnlock(
    lpAddress:  LPVOID,
    dwSize:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return VirtualUnlock(
            lpAddress,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWriteWatch(
    dwFlags:  DWORD,
    lpBaseAddress:  PVOID,
    dwRegionSize:  SIZE_T,
    lpAddresses: *mut PVOID,
    lpdwCount: *mut ULONG_PTR,
    lpdwGranularity:  LPDWORD    
) ->  UINT
{
    unsafe {
        return GetWriteWatch(
            dwFlags,
            lpBaseAddress,
            dwRegionSize,
            lpAddresses,
            lpdwCount,
            lpdwGranularity
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResetWriteWatch(
    lpBaseAddress:  LPVOID,
    dwRegionSize:  SIZE_T    
) ->  UINT
{
    unsafe {
        return ResetWriteWatch(
            lpBaseAddress,
            dwRegionSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMemoryResourceNotification(
    NotificationType:  MEMORY_RESOURCE_NOTIFICATION_TYPE    
) ->  HANDLE
{
    unsafe {
        return CreateMemoryResourceNotification(
            NotificationType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryMemoryResourceNotification(
    ResourceNotificationHandle:  HANDLE,
    ResourceState:  PBOOL    
) ->  BOOL
{
    unsafe {
        return QueryMemoryResourceNotification(
            ResourceNotificationHandle,
            ResourceState
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemFileCacheSize(
    lpMinimumFileCacheSize:  PSIZE_T,
    lpMaximumFileCacheSize:  PSIZE_T,
    lpFlags:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetSystemFileCacheSize(
            lpMinimumFileCacheSize,
            lpMaximumFileCacheSize,
            lpFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSystemFileCacheSize(
    MinimumFileCacheSize:  SIZE_T,
    MaximumFileCacheSize:  SIZE_T,
    Flags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetSystemFileCacheSize(
            MinimumFileCacheSize,
            MaximumFileCacheSize,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileMappingNumaW(
    hFile:  HANDLE,
    lpFileMappingAttributes:  LPSECURITY_ATTRIBUTES,
    flProtect:  DWORD,
    dwMaximumSizeHigh:  DWORD,
    dwMaximumSizeLow:  DWORD,
    lpName:  LPCWSTR,
    nndPreferred:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateFileMappingNumaW(
            hFile,
            lpFileMappingAttributes,
            flProtect,
            dwMaximumSizeHigh,
            dwMaximumSizeLow,
            lpName,
            nndPreferred
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrefetchVirtualMemory(
    hProcess:  HANDLE,
    NumberOfEntries:  ULONG_PTR,
    VirtualAddresses:  PWIN32_MEMORY_RANGE_ENTRY,
    Flags:  ULONG    
) ->  BOOL
{
    unsafe {
        return PrefetchVirtualMemory(
            hProcess,
            NumberOfEntries,
            VirtualAddresses,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileMappingFromApp(
    hFile:  HANDLE,
    SecurityAttributes:  PSECURITY_ATTRIBUTES,
    PageProtection:  ULONG,
    MaximumSize:  ULONG64,
    Name:  PCWSTR    
) ->  HANDLE
{
    unsafe {
        return CreateFileMappingFromApp(
            hFile,
            SecurityAttributes,
            PageProtection,
            MaximumSize,
            Name
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapViewOfFileFromApp(
    hFileMappingObject:  HANDLE,
    DesiredAccess:  ULONG,
    FileOffset:  ULONG64,
    NumberOfBytesToMap:  SIZE_T    
) ->  PVOID
{
    unsafe {
        return MapViewOfFileFromApp(
            hFileMappingObject,
            DesiredAccess,
            FileOffset,
            NumberOfBytesToMap
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnmapViewOfFileEx(
    BaseAddress:  PVOID,
    UnmapFlags:  ULONG    
) ->  BOOL
{
    unsafe {
        return UnmapViewOfFileEx(
            BaseAddress,
            UnmapFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AllocateUserPhysicalPages(
    hProcess:  HANDLE,
    NumberOfPages:  PULONG_PTR,
    PageArray:  PULONG_PTR    
) ->  BOOL
{
    unsafe {
        return AllocateUserPhysicalPages(
            hProcess,
            NumberOfPages,
            PageArray
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeUserPhysicalPages(
    hProcess:  HANDLE,
    NumberOfPages:  PULONG_PTR,
    PageArray:  PULONG_PTR    
) ->  BOOL
{
    unsafe {
        return FreeUserPhysicalPages(
            hProcess,
            NumberOfPages,
            PageArray
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapUserPhysicalPages(
    VirtualAddress:  PVOID,
    NumberOfPages:  ULONG_PTR,
    PageArray:  PULONG_PTR    
) ->  BOOL
{
    unsafe {
        return MapUserPhysicalPages(
            VirtualAddress,
            NumberOfPages,
            PageArray
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AllocateUserPhysicalPagesNuma(
    hProcess:  HANDLE,
    NumberOfPages:  PULONG_PTR,
    PageArray:  PULONG_PTR,
    nndPreferred:  DWORD    
) ->  BOOL
{
    unsafe {
        return AllocateUserPhysicalPagesNuma(
            hProcess,
            NumberOfPages,
            PageArray,
            nndPreferred
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualAllocExNuma(
    hProcess:  HANDLE,
    lpAddress:  LPVOID,
    dwSize:  SIZE_T,
    flAllocationType:  DWORD,
    flProtect:  DWORD,
    nndPreferred:  DWORD    
) ->  LPVOID
{
    unsafe {
        return VirtualAllocExNuma(
            hProcess,
            lpAddress,
            dwSize,
            flAllocationType,
            flProtect,
            nndPreferred
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMemoryErrorHandlingCapabilities(
    Capabilities:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetMemoryErrorHandlingCapabilities(
            Capabilities
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterBadMemoryNotification(
    Callback:  PBAD_MEMORY_CALLBACK_ROUTINE    
) ->  PVOID
{
    unsafe {
        return RegisterBadMemoryNotification(
            Callback
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterBadMemoryNotification(
    RegistrationHandle:  PVOID    
) ->  BOOL
{
    unsafe {
        return UnregisterBadMemoryNotification(
            RegistrationHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OfferVirtualMemory(
    VirtualAddress:  PVOID,
    Size:  SIZE_T,
    Priority:  OFFER_PRIORITY    
) ->  DWORD
{
    unsafe {
        return OfferVirtualMemory(
            VirtualAddress,
            Size,
            Priority
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReclaimVirtualMemory(
    VirtualAddress: *const c_void,
    Size:  SIZE_T    
) ->  DWORD
{
    unsafe {
        return ReclaimVirtualMemory(
            VirtualAddress,
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DiscardVirtualMemory(
    VirtualAddress:  PVOID,
    Size:  SIZE_T    
) ->  DWORD
{
    unsafe {
        return DiscardVirtualMemory(
            VirtualAddress,
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessValidCallTargets(
    hProcess:  HANDLE,
    VirtualAddress:  PVOID,
    RegionSize:  SIZE_T,
    NumberOfOffsets:  ULONG,
    OffsetInformation:  PCFG_CALL_TARGET_INFO    
) ->  BOOL
{
    unsafe {
        return SetProcessValidCallTargets(
            hProcess,
            VirtualAddress,
            RegionSize,
            NumberOfOffsets,
            OffsetInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessValidCallTargetsForMappedView(
    Process:  HANDLE,
    VirtualAddress:  PVOID,
    RegionSize:  SIZE_T,
    NumberOfOffsets:  ULONG,
    OffsetInformation:  PCFG_CALL_TARGET_INFO,
    Section:  HANDLE,
    ExpectedFileOffset:  ULONG64    
) ->  BOOL
{
    unsafe {
        return SetProcessValidCallTargetsForMappedView(
            Process,
            VirtualAddress,
            RegionSize,
            NumberOfOffsets,
            OffsetInformation,
            Section,
            ExpectedFileOffset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualAllocFromApp(
    BaseAddress:  PVOID,
    Size:  SIZE_T,
    AllocationType:  ULONG,
    Protection:  ULONG    
) ->  PVOID
{
    unsafe {
        return VirtualAllocFromApp(
            BaseAddress,
            Size,
            AllocationType,
            Protection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualProtectFromApp(
    Address:  PVOID,
    Size:  SIZE_T,
    NewProtection:  ULONG,
    OldProtection:  PULONG    
) ->  BOOL
{
    unsafe {
        return VirtualProtectFromApp(
            Address,
            Size,
            NewProtection,
            OldProtection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenFileMappingFromApp(
    DesiredAccess:  ULONG,
    InheritHandle:  BOOL,
    Name:  PCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenFileMappingFromApp(
            DesiredAccess,
            InheritHandle,
            Name
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryVirtualMemoryInformation(
    Process:  HANDLE,
    VirtualAddress: *const c_void,
    MemoryInformationClass:  WIN32_MEMORY_INFORMATION_CLASS,
    MemoryInformation:  PVOID,
    MemoryInformationSize:  SIZE_T,
    ReturnSize:  PSIZE_T    
) ->  BOOL
{
    unsafe {
        return QueryVirtualMemoryInformation(
            Process,
            VirtualAddress,
            MemoryInformationClass,
            MemoryInformation,
            MemoryInformationSize,
            ReturnSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapViewOfFileNuma2(
    FileMappingHandle:  HANDLE,
    ProcessHandle:  HANDLE,
    Offset:  ULONG64,
    BaseAddress:  PVOID,
    ViewSize:  SIZE_T,
    AllocationType:  ULONG,
    PageProtection:  ULONG,
    PreferredNode:  ULONG    
) ->  PVOID
{
    unsafe {
        return MapViewOfFileNuma2(
            FileMappingHandle,
            ProcessHandle,
            Offset,
            BaseAddress,
            ViewSize,
            AllocationType,
            PageProtection,
            PreferredNode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnmapViewOfFile2(
    Process:  HANDLE,
    BaseAddress:  PVOID,
    UnmapFlags:  ULONG    
) ->  BOOL
{
    unsafe {
        return UnmapViewOfFile2(
            Process,
            BaseAddress,
            UnmapFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualUnlockEx(
    Process:  HANDLE,
    Address:  LPVOID,
    Size:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return VirtualUnlockEx(
            Process,
            Address,
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualAlloc2(
    Process:  HANDLE,
    BaseAddress:  PVOID,
    Size:  SIZE_T,
    AllocationType:  ULONG,
    PageProtection:  ULONG,
    ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
    ParameterCount:  ULONG    
) ->  PVOID
{
    unsafe {
        return VirtualAlloc2(
            Process,
            BaseAddress,
            Size,
            AllocationType,
            PageProtection,
            ExtendedParameters,
            ParameterCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapViewOfFile3(
    FileMapping:  HANDLE,
    Process:  HANDLE,
    BaseAddress:  PVOID,
    Offset:  ULONG64,
    ViewSize:  SIZE_T,
    AllocationType:  ULONG,
    PageProtection:  ULONG,
    ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
    ParameterCount:  ULONG    
) ->  PVOID
{
    unsafe {
        return MapViewOfFile3(
            FileMapping,
            Process,
            BaseAddress,
            Offset,
            ViewSize,
            AllocationType,
            PageProtection,
            ExtendedParameters,
            ParameterCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VirtualAlloc2FromApp(
    Process:  HANDLE,
    BaseAddress:  PVOID,
    Size:  SIZE_T,
    AllocationType:  ULONG,
    PageProtection:  ULONG,
    ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
    ParameterCount:  ULONG    
) ->  PVOID
{
    unsafe {
        return VirtualAlloc2FromApp(
            Process,
            BaseAddress,
            Size,
            AllocationType,
            PageProtection,
            ExtendedParameters,
            ParameterCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapViewOfFile3FromApp(
    FileMapping:  HANDLE,
    Process:  HANDLE,
    BaseAddress:  PVOID,
    Offset:  ULONG64,
    ViewSize:  SIZE_T,
    AllocationType:  ULONG,
    PageProtection:  ULONG,
    ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
    ParameterCount:  ULONG    
) ->  PVOID
{
    unsafe {
        return MapViewOfFile3FromApp(
            FileMapping,
            Process,
            BaseAddress,
            Offset,
            ViewSize,
            AllocationType,
            PageProtection,
            ExtendedParameters,
            ParameterCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileMapping2(
    File:  HANDLE,
    SecurityAttributes: *mut SECURITY_ATTRIBUTES,
    DesiredAccess:  ULONG,
    PageProtection:  ULONG,
    AllocationAttributes:  ULONG,
    MaximumSize:  ULONG64,
    Name:  PCWSTR,
    ExtendedParameters: *mut MEM_EXTENDED_PARAMETER,
    ParameterCount:  ULONG    
) ->  HANDLE
{
    unsafe {
        return CreateFileMapping2(
            File,
            SecurityAttributes,
            DesiredAccess,
            PageProtection,
            AllocationAttributes,
            MaximumSize,
            Name,
            ExtendedParameters,
            ParameterCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsEnclaveTypeSupported(
    flEnclaveType:  DWORD    
) ->  BOOL
{
    unsafe {
        return IsEnclaveTypeSupported(
            flEnclaveType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEnclave(
    hProcess:  HANDLE,
    lpAddress:  LPVOID,
    dwSize:  SIZE_T,
    dwInitialCommitment:  SIZE_T,
    flEnclaveType:  DWORD,
    lpEnclaveInformation:  LPCVOID,
    dwInfoLength:  DWORD,
    lpEnclaveError:  LPDWORD    
) ->  LPVOID
{
    unsafe {
        return CreateEnclave(
            hProcess,
            lpAddress,
            dwSize,
            dwInitialCommitment,
            flEnclaveType,
            lpEnclaveInformation,
            dwInfoLength,
            lpEnclaveError
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadEnclaveData(
    hProcess:  HANDLE,
    lpAddress:  LPVOID,
    lpBuffer:  LPCVOID,
    nSize:  SIZE_T,
    flProtect:  DWORD,
    lpPageInformation:  LPCVOID,
    dwInfoLength:  DWORD,
    lpNumberOfBytesWritten:  PSIZE_T,
    lpEnclaveError:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return LoadEnclaveData(
            hProcess,
            lpAddress,
            lpBuffer,
            nSize,
            flProtect,
            lpPageInformation,
            dwInfoLength,
            lpNumberOfBytesWritten,
            lpEnclaveError
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeEnclave(
    hProcess:  HANDLE,
    lpAddress:  LPVOID,
    lpEnclaveInformation:  LPCVOID,
    dwInfoLength:  DWORD,
    lpEnclaveError:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return InitializeEnclave(
            hProcess,
            lpAddress,
            lpEnclaveInformation,
            dwInfoLength,
            lpEnclaveError
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadEnclaveImageA(
    lpEnclaveAddress:  LPVOID,
    lpImageName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return LoadEnclaveImageA(
            lpEnclaveAddress,
            lpImageName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadEnclaveImageW(
    lpEnclaveAddress:  LPVOID,
    lpImageName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return LoadEnclaveImageW(
            lpEnclaveAddress,
            lpImageName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallEnclave(
    lpRoutine:  LPENCLAVE_ROUTINE,
    lpParameter:  LPVOID,
    fWaitForThread:  BOOL,
    lpReturnValue: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return CallEnclave(
            lpRoutine,
            lpParameter,
            fWaitForThread,
            lpReturnValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TerminateEnclave(
    lpAddress:  LPVOID,
    fWait:  BOOL    
) ->  BOOL
{
    unsafe {
        return TerminateEnclave(
            lpAddress,
            fWait
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteEnclave(
    lpAddress:  LPVOID    
) ->  BOOL
{
    unsafe {
        return DeleteEnclave(
            lpAddress
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueueUserWorkItem(
    Function:  LPTHREAD_START_ROUTINE,
    Context:  PVOID,
    Flags:  ULONG    
) ->  BOOL
{
    unsafe {
        return QueueUserWorkItem(
            Function,
            Context,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterWaitEx(
    WaitHandle:  HANDLE,
    CompletionEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return UnregisterWaitEx(
            WaitHandle,
            CompletionEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateTimerQueue(
    
) ->  HANDLE
{
    unsafe {
        return CreateTimerQueue(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateTimerQueueTimer(
    phNewTimer:  PHANDLE,
    TimerQueue:  HANDLE,
    Callback:  WAITORTIMERCALLBACK,
    Parameter:  PVOID,
    DueTime:  DWORD,
    Period:  DWORD,
    Flags:  ULONG    
) ->  BOOL
{
    unsafe {
        return CreateTimerQueueTimer(
            phNewTimer,
            TimerQueue,
            Callback,
            Parameter,
            DueTime,
            Period,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeTimerQueueTimer(
    TimerQueue:  HANDLE,
    Timer:  HANDLE,
    DueTime:  ULONG,
    Period:  ULONG    
) ->  BOOL
{
    unsafe {
        return ChangeTimerQueueTimer(
            TimerQueue,
            Timer,
            DueTime,
            Period
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteTimerQueueTimer(
    TimerQueue:  HANDLE,
    Timer:  HANDLE,
    CompletionEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DeleteTimerQueueTimer(
            TimerQueue,
            Timer,
            CompletionEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteTimerQueueEx(
    TimerQueue:  HANDLE,
    CompletionEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DeleteTimerQueueEx(
            TimerQueue,
            CompletionEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateThreadpool(
    reserved:  PVOID    
) ->  PTP_POOL
{
    unsafe {
        return CreateThreadpool(
            reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadpoolThreadMaximum(
    ptpp:  PTP_POOL,
    cthrdMost:  DWORD    
)
{
    unsafe {
        return SetThreadpoolThreadMaximum(
            ptpp,
            cthrdMost
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadpoolThreadMinimum(
    ptpp:  PTP_POOL,
    cthrdMic:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetThreadpoolThreadMinimum(
            ptpp,
            cthrdMic
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadpoolStackInformation(
    ptpp:  PTP_POOL,
    ptpsi:  PTP_POOL_STACK_INFORMATION    
) ->  BOOL
{
    unsafe {
        return SetThreadpoolStackInformation(
            ptpp,
            ptpsi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryThreadpoolStackInformation(
    ptpp:  PTP_POOL,
    ptpsi:  PTP_POOL_STACK_INFORMATION    
) ->  BOOL
{
    unsafe {
        return QueryThreadpoolStackInformation(
            ptpp,
            ptpsi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseThreadpool(
    ptpp:  PTP_POOL    
)
{
    unsafe {
        return CloseThreadpool(
            ptpp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateThreadpoolCleanupGroup(
    
) ->  PTP_CLEANUP_GROUP
{
    unsafe {
        return CreateThreadpoolCleanupGroup(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseThreadpoolCleanupGroupMembers(
    ptpcg:  PTP_CLEANUP_GROUP,
    fCancelPendingCallbacks:  BOOL,
    pvCleanupContext:  PVOID    
)
{
    unsafe {
        return CloseThreadpoolCleanupGroupMembers(
            ptpcg,
            fCancelPendingCallbacks,
            pvCleanupContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseThreadpoolCleanupGroup(
    ptpcg:  PTP_CLEANUP_GROUP    
)
{
    unsafe {
        return CloseThreadpoolCleanupGroup(
            ptpcg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEventWhenCallbackReturns(
    pci:  PTP_CALLBACK_INSTANCE,
    evt:  HANDLE    
)
{
    unsafe {
        return SetEventWhenCallbackReturns(
            pci,
            evt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseSemaphoreWhenCallbackReturns(
    pci:  PTP_CALLBACK_INSTANCE,
    sem:  HANDLE,
    crel:  DWORD    
)
{
    unsafe {
        return ReleaseSemaphoreWhenCallbackReturns(
            pci,
            sem,
            crel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseMutexWhenCallbackReturns(
    pci:  PTP_CALLBACK_INSTANCE,
    mut_:  HANDLE    
)
{
    unsafe {
        return ReleaseMutexWhenCallbackReturns(
            pci,
            mut_
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LeaveCriticalSectionWhenCallbackReturns(
    pci:  PTP_CALLBACK_INSTANCE,
    pcs:  PCRITICAL_SECTION    
)
{
    unsafe {
        return LeaveCriticalSectionWhenCallbackReturns(
            pci,
            pcs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeLibraryWhenCallbackReturns(
    pci:  PTP_CALLBACK_INSTANCE,
    mod_:  HMODULE    
)
{
    unsafe {
        return FreeLibraryWhenCallbackReturns(
            pci,
            mod_
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallbackMayRunLong(
    pci:  PTP_CALLBACK_INSTANCE    
) ->  BOOL
{
    unsafe {
        return CallbackMayRunLong(
            pci
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DisassociateCurrentThreadFromCallback(
    pci:  PTP_CALLBACK_INSTANCE    
)
{
    unsafe {
        return DisassociateCurrentThreadFromCallback(
            pci
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TrySubmitThreadpoolCallback(
    pfns:  PTP_SIMPLE_CALLBACK,
    pv:  PVOID,
    pcbe:  PTP_CALLBACK_ENVIRON    
) ->  BOOL
{
    unsafe {
        return TrySubmitThreadpoolCallback(
            pfns,
            pv,
            pcbe
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateThreadpoolWork(
    pfnwk:  PTP_WORK_CALLBACK,
    pv:  PVOID,
    pcbe:  PTP_CALLBACK_ENVIRON    
) ->  PTP_WORK
{
    unsafe {
        return CreateThreadpoolWork(
            pfnwk,
            pv,
            pcbe
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SubmitThreadpoolWork(
    pwk:  PTP_WORK    
)
{
    unsafe {
        return SubmitThreadpoolWork(
            pwk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForThreadpoolWorkCallbacks(
    pwk:  PTP_WORK,
    fCancelPendingCallbacks:  BOOL    
)
{
    unsafe {
        return WaitForThreadpoolWorkCallbacks(
            pwk,
            fCancelPendingCallbacks
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseThreadpoolWork(
    pwk:  PTP_WORK    
)
{
    unsafe {
        return CloseThreadpoolWork(
            pwk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateThreadpoolTimer(
    pfnti:  PTP_TIMER_CALLBACK,
    pv:  PVOID,
    pcbe:  PTP_CALLBACK_ENVIRON    
) ->  PTP_TIMER
{
    unsafe {
        return CreateThreadpoolTimer(
            pfnti,
            pv,
            pcbe
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadpoolTimer(
    pti:  PTP_TIMER,
    pftDueTime:  PFILETIME,
    msPeriod:  DWORD,
    msWindowLength:  DWORD    
)
{
    unsafe {
        return SetThreadpoolTimer(
            pti,
            pftDueTime,
            msPeriod,
            msWindowLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsThreadpoolTimerSet(
    pti:  PTP_TIMER    
) ->  BOOL
{
    unsafe {
        return IsThreadpoolTimerSet(
            pti
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForThreadpoolTimerCallbacks(
    pti:  PTP_TIMER,
    fCancelPendingCallbacks:  BOOL    
)
{
    unsafe {
        return WaitForThreadpoolTimerCallbacks(
            pti,
            fCancelPendingCallbacks
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseThreadpoolTimer(
    pti:  PTP_TIMER    
)
{
    unsafe {
        return CloseThreadpoolTimer(
            pti
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateThreadpoolWait(
    pfnwa:  PTP_WAIT_CALLBACK,
    pv:  PVOID,
    pcbe:  PTP_CALLBACK_ENVIRON    
) ->  PTP_WAIT
{
    unsafe {
        return CreateThreadpoolWait(
            pfnwa,
            pv,
            pcbe
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadpoolWait(
    pwa:  PTP_WAIT,
    h:  HANDLE,
    pftTimeout:  PFILETIME    
)
{
    unsafe {
        return SetThreadpoolWait(
            pwa,
            h,
            pftTimeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForThreadpoolWaitCallbacks(
    pwa:  PTP_WAIT,
    fCancelPendingCallbacks:  BOOL    
)
{
    unsafe {
        return WaitForThreadpoolWaitCallbacks(
            pwa,
            fCancelPendingCallbacks
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseThreadpoolWait(
    pwa:  PTP_WAIT    
)
{
    unsafe {
        return CloseThreadpoolWait(
            pwa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateThreadpoolIo(
    fl:  HANDLE,
    pfnio:  PTP_WIN32_IO_CALLBACK,
    pv:  PVOID,
    pcbe:  PTP_CALLBACK_ENVIRON    
) ->  PTP_IO
{
    unsafe {
        return CreateThreadpoolIo(
            fl,
            pfnio,
            pv,
            pcbe
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartThreadpoolIo(
    pio:  PTP_IO    
)
{
    unsafe {
        return StartThreadpoolIo(
            pio
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelThreadpoolIo(
    pio:  PTP_IO    
)
{
    unsafe {
        return CancelThreadpoolIo(
            pio
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForThreadpoolIoCallbacks(
    pio:  PTP_IO,
    fCancelPendingCallbacks:  BOOL    
)
{
    unsafe {
        return WaitForThreadpoolIoCallbacks(
            pio,
            fCancelPendingCallbacks
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseThreadpoolIo(
    pio:  PTP_IO    
)
{
    unsafe {
        return CloseThreadpoolIo(
            pio
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadpoolTimerEx(
    pti:  PTP_TIMER,
    pftDueTime:  PFILETIME,
    msPeriod:  DWORD,
    msWindowLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetThreadpoolTimerEx(
            pti,
            pftDueTime,
            msPeriod,
            msWindowLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadpoolWaitEx(
    pwa:  PTP_WAIT,
    h:  HANDLE,
    pftTimeout:  PFILETIME,
    Reserved:  PVOID    
) ->  BOOL
{
    unsafe {
        return SetThreadpoolWaitEx(
            pwa,
            h,
            pftTimeout,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsProcessInJob(
    ProcessHandle:  HANDLE,
    JobHandle:  HANDLE,
    Result:  PBOOL    
) ->  BOOL
{
    unsafe {
        return IsProcessInJob(
            ProcessHandle,
            JobHandle,
            Result
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateJobObjectW(
    lpJobAttributes:  LPSECURITY_ATTRIBUTES,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return CreateJobObjectW(
            lpJobAttributes,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeMemoryJobObject(
    Buffer: *mut c_void    
)
{
    unsafe {
        return FreeMemoryJobObject(
            Buffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenJobObjectW(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenJobObjectW(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AssignProcessToJobObject(
    hJob:  HANDLE,
    hProcess:  HANDLE    
) ->  BOOL
{
    unsafe {
        return AssignProcessToJobObject(
            hJob,
            hProcess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TerminateJobObject(
    hJob:  HANDLE,
    uExitCode:  UINT    
) ->  BOOL
{
    unsafe {
        return TerminateJobObject(
            hJob,
            uExitCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetInformationJobObject(
    hJob:  HANDLE,
    JobObjectInformationClass:  JOBOBJECTINFOCLASS,
    lpJobObjectInformation:  LPVOID,
    cbJobObjectInformationLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetInformationJobObject(
            hJob,
            JobObjectInformationClass,
            lpJobObjectInformation,
            cbJobObjectInformationLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetIoRateControlInformationJobObject(
    hJob:  HANDLE,
    IoRateControlInfo: *mut JOBOBJECT_IO_RATE_CONTROL_INFORMATION    
) ->  DWORD
{
    unsafe {
        return SetIoRateControlInformationJobObject(
            hJob,
            IoRateControlInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryInformationJobObject(
    hJob:  HANDLE,
    JobObjectInformationClass:  JOBOBJECTINFOCLASS,
    lpJobObjectInformation:  LPVOID,
    cbJobObjectInformationLength:  DWORD,
    lpReturnLength:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryInformationJobObject(
            hJob,
            JobObjectInformationClass,
            lpJobObjectInformation,
            cbJobObjectInformationLength,
            lpReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryIoRateControlInformationJobObject(
    hJob:  HANDLE,
    VolumeName:  PCWSTR,
    InfoBlocks: *mut *mut JOBOBJECT_IO_RATE_CONTROL_INFORMATION,
    InfoBlockCount: *mut ULONG    
) ->  DWORD
{
    unsafe {
        return QueryIoRateControlInformationJobObject(
            hJob,
            VolumeName,
            InfoBlocks,
            InfoBlockCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Wow64DisableWow64FsRedirection(
    OldValue: *mut PVOID    
) ->  BOOL
{
    unsafe {
        return Wow64DisableWow64FsRedirection(
            OldValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Wow64RevertWow64FsRedirection(
    OlValue:  PVOID    
) ->  BOOL
{
    unsafe {
        return Wow64RevertWow64FsRedirection(
            OlValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWow64Process(
    hProcess:  HANDLE,
    Wow64Process:  PBOOL    
) ->  BOOL
{
    unsafe {
        return IsWow64Process(
            hProcess,
            Wow64Process
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemWow64DirectoryA(
    lpBuffer:  LPSTR,
    uSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetSystemWow64DirectoryA(
            lpBuffer,
            uSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemWow64DirectoryW(
    lpBuffer:  LPWSTR,
    uSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetSystemWow64DirectoryW(
            lpBuffer,
            uSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Wow64SetThreadDefaultGuestMachine(
    Machine:  USHORT    
) ->  USHORT
{
    unsafe {
        return Wow64SetThreadDefaultGuestMachine(
            Machine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWow64Process2(
    hProcess:  HANDLE,
    pProcessMachine: *mut USHORT,
    pNativeMachine: *mut USHORT    
) ->  BOOL
{
    unsafe {
        return IsWow64Process2(
            hProcess,
            pProcessMachine,
            pNativeMachine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemWow64Directory2A(
    lpBuffer:  LPSTR,
    uSize:  UINT,
    ImageFileMachineType:  WORD    
) ->  UINT
{
    unsafe {
        return GetSystemWow64Directory2A(
            lpBuffer,
            uSize,
            ImageFileMachineType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemWow64Directory2W(
    lpBuffer:  LPWSTR,
    uSize:  UINT,
    ImageFileMachineType:  WORD    
) ->  UINT
{
    unsafe {
        return GetSystemWow64Directory2W(
            lpBuffer,
            uSize,
            ImageFileMachineType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWow64GuestMachineSupported(
    WowGuestMachine:  USHORT,
    MachineIsSupported: *mut BOOL    
) ->  HRESULT
{
    unsafe {
        return IsWow64GuestMachineSupported(
            WowGuestMachine,
            MachineIsSupported
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Wow64GetThreadContext(
    hThread:  HANDLE,
    lpContext:  PWOW64_CONTEXT    
) ->  BOOL
{
    unsafe {
        return Wow64GetThreadContext(
            hThread,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Wow64SetThreadContext(
    hThread:  HANDLE,
    lpContext: *const WOW64_CONTEXT    
) ->  BOOL
{
    unsafe {
        return Wow64SetThreadContext(
            hThread,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Wow64SuspendThread(
    hThread:  HANDLE    
) ->  DWORD
{
    unsafe {
        return Wow64SuspendThread(
            hThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DisableThreadLibraryCalls(
    hLibModule:  HMODULE    
) ->  BOOL
{
    unsafe {
        return DisableThreadLibraryCalls(
            hLibModule
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindResourceExW(
    hModule:  HMODULE,
    lpType:  LPCWSTR,
    lpName:  LPCWSTR,
    wLanguage:  WORD    
) ->  HRSRC
{
    unsafe {
        return FindResourceExW(
            hModule,
            lpType,
            lpName,
            wLanguage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindStringOrdinal(
    dwFindStringOrdinalFlags:  DWORD,
    lpStringSource:  LPCWSTR,
    cchSource:  c_int,
    lpStringValue:  LPCWSTR,
    cchValue:  c_int,
    bIgnoreCase:  BOOL    
) ->  c_int
{
    unsafe {
        return FindStringOrdinal(
            dwFindStringOrdinalFlags,
            lpStringSource,
            cchSource,
            lpStringValue,
            cchValue,
            bIgnoreCase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeLibrary(
    hLibModule:  HMODULE    
) ->  BOOL
{
    unsafe {
        return FreeLibrary(
            hLibModule
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeResource(
    hResData:  HGLOBAL    
) ->  BOOL
{
    unsafe {
        return FreeResource(
            hResData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetModuleFileNameA(
    hModule:  HMODULE,
    lpFilename:  LPSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetModuleFileNameA(
            hModule,
            lpFilename,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetModuleFileNameW(
    hModule:  HMODULE,
    lpFilename:  LPWSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetModuleFileNameW(
            hModule,
            lpFilename,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetModuleHandleA(
    lpModuleName:  LPCSTR    
) ->  HMODULE
{
    unsafe {
        return GetModuleHandleA(
            lpModuleName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetModuleHandleW(
    lpModuleName:  LPCWSTR    
) ->  HMODULE
{
    unsafe {
        return GetModuleHandleW(
            lpModuleName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetModuleHandleExA(
    dwFlags:  DWORD,
    lpModuleName:  LPCSTR,
    phModule: *mut HMODULE    
) ->  BOOL
{
    unsafe {
        return GetModuleHandleExA(
            dwFlags,
            lpModuleName,
            phModule
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetModuleHandleExW(
    dwFlags:  DWORD,
    lpModuleName:  LPCWSTR,
    phModule: *mut HMODULE    
) ->  BOOL
{
    unsafe {
        return GetModuleHandleExW(
            dwFlags,
            lpModuleName,
            phModule
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcAddress(
    hModule:  HMODULE,
    lpProcName:  LPCSTR    
) ->  FARPROC
{
    unsafe {
        return GetProcAddress(
            hModule,
            lpProcName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadLibraryExA(
    lpLibFileName:  LPCSTR,
    hFile:  HANDLE,
    dwFlags:  DWORD    
) ->  HMODULE
{
    unsafe {
        return LoadLibraryExA(
            lpLibFileName,
            hFile,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadLibraryExW(
    lpLibFileName:  LPCWSTR,
    hFile:  HANDLE,
    dwFlags:  DWORD    
) ->  HMODULE
{
    unsafe {
        return LoadLibraryExW(
            lpLibFileName,
            hFile,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadResource(
    hModule:  HMODULE,
    hResInfo:  HRSRC    
) ->  HGLOBAL
{
    unsafe {
        return LoadResource(
            hModule,
            hResInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadStringA(
    hInstance:  HINSTANCE,
    uID:  UINT,
    lpBuffer:  LPSTR,
    cchBufferMax:  c_int    
) ->  c_int
{
    unsafe {
        return LoadStringA(
            hInstance,
            uID,
            lpBuffer,
            cchBufferMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadStringW(
    hInstance:  HINSTANCE,
    uID:  UINT,
    lpBuffer:  LPWSTR,
    cchBufferMax:  c_int    
) ->  c_int
{
    unsafe {
        return LoadStringW(
            hInstance,
            uID,
            lpBuffer,
            cchBufferMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LockResource(
    hResData:  HGLOBAL    
) ->  LPVOID
{
    unsafe {
        return LockResource(
            hResData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SizeofResource(
    hModule:  HMODULE,
    hResInfo:  HRSRC    
) ->  DWORD
{
    unsafe {
        return SizeofResource(
            hModule,
            hResInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddDllDirectory(
    NewDirectory:  PCWSTR    
) ->  DLL_DIRECTORY_COOKIE
{
    unsafe {
        return AddDllDirectory(
            NewDirectory
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveDllDirectory(
    Cookie:  DLL_DIRECTORY_COOKIE    
) ->  BOOL
{
    unsafe {
        return RemoveDllDirectory(
            Cookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDefaultDllDirectories(
    DirectoryFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetDefaultDllDirectories(
            DirectoryFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceLanguagesExA(
    hModule:  HMODULE,
    lpType:  LPCSTR,
    lpName:  LPCSTR,
    lpEnumFunc:  ENUMRESLANGPROCA,
    lParam:  LONG_PTR,
    dwFlags:  DWORD,
    LangId:  LANGID    
) ->  BOOL
{
    unsafe {
        return EnumResourceLanguagesExA(
            hModule,
            lpType,
            lpName,
            lpEnumFunc,
            lParam,
            dwFlags,
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceLanguagesExW(
    hModule:  HMODULE,
    lpType:  LPCWSTR,
    lpName:  LPCWSTR,
    lpEnumFunc:  ENUMRESLANGPROCW,
    lParam:  LONG_PTR,
    dwFlags:  DWORD,
    LangId:  LANGID    
) ->  BOOL
{
    unsafe {
        return EnumResourceLanguagesExW(
            hModule,
            lpType,
            lpName,
            lpEnumFunc,
            lParam,
            dwFlags,
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceNamesExA(
    hModule:  HMODULE,
    lpType:  LPCSTR,
    lpEnumFunc:  ENUMRESNAMEPROCA,
    lParam:  LONG_PTR,
    dwFlags:  DWORD,
    LangId:  LANGID    
) ->  BOOL
{
    unsafe {
        return EnumResourceNamesExA(
            hModule,
            lpType,
            lpEnumFunc,
            lParam,
            dwFlags,
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceNamesExW(
    hModule:  HMODULE,
    lpType:  LPCWSTR,
    lpEnumFunc:  ENUMRESNAMEPROCW,
    lParam:  LONG_PTR,
    dwFlags:  DWORD,
    LangId:  LANGID    
) ->  BOOL
{
    unsafe {
        return EnumResourceNamesExW(
            hModule,
            lpType,
            lpEnumFunc,
            lParam,
            dwFlags,
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceTypesExA(
    hModule:  HMODULE,
    lpEnumFunc:  ENUMRESTYPEPROCA,
    lParam:  LONG_PTR,
    dwFlags:  DWORD,
    LangId:  LANGID    
) ->  BOOL
{
    unsafe {
        return EnumResourceTypesExA(
            hModule,
            lpEnumFunc,
            lParam,
            dwFlags,
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceTypesExW(
    hModule:  HMODULE,
    lpEnumFunc:  ENUMRESTYPEPROCW,
    lParam:  LONG_PTR,
    dwFlags:  DWORD,
    LangId:  LANGID    
) ->  BOOL
{
    unsafe {
        return EnumResourceTypesExW(
            hModule,
            lpEnumFunc,
            lParam,
            dwFlags,
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindResourceW(
    hModule:  HMODULE,
    lpName:  LPCWSTR,
    lpType:  LPCWSTR    
) ->  HRSRC
{
    unsafe {
        return FindResourceW(
            hModule,
            lpName,
            lpType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadLibraryA(
    lpLibFileName:  LPCSTR    
) ->  HMODULE
{
    unsafe {
        return LoadLibraryA(
            lpLibFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadLibraryW(
    lpLibFileName:  LPCWSTR    
) ->  HMODULE
{
    unsafe {
        return LoadLibraryW(
            lpLibFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceNamesW(
    hModule:  HMODULE,
    lpType:  LPCWSTR,
    lpEnumFunc:  ENUMRESNAMEPROCW,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumResourceNamesW(
            hModule,
            lpType,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheck(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    ClientToken:  HANDLE,
    DesiredAccess:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    PrivilegeSet:  PPRIVILEGE_SET,
    PrivilegeSetLength:  LPDWORD,
    GrantedAccess:  LPDWORD,
    AccessStatus:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheck(
            pSecurityDescriptor,
            ClientToken,
            DesiredAccess,
            GenericMapping,
            PrivilegeSet,
            PrivilegeSetLength,
            GrantedAccess,
            AccessStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckAndAuditAlarmW(
    SubsystemName:  LPCWSTR,
    HandleId:  LPVOID,
    ObjectTypeName:  LPWSTR,
    ObjectName:  LPWSTR,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    DesiredAccess:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    ObjectCreation:  BOOL,
    GrantedAccess:  LPDWORD,
    AccessStatus:  LPBOOL,
    pfGenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckAndAuditAlarmW(
            SubsystemName,
            HandleId,
            ObjectTypeName,
            ObjectName,
            SecurityDescriptor,
            DesiredAccess,
            GenericMapping,
            ObjectCreation,
            GrantedAccess,
            AccessStatus,
            pfGenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckByType(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    PrincipalSelfSid:  PSID,
    ClientToken:  HANDLE,
    DesiredAccess:  DWORD,
    ObjectTypeList:  POBJECT_TYPE_LIST,
    ObjectTypeListLength:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    PrivilegeSet:  PPRIVILEGE_SET,
    PrivilegeSetLength:  LPDWORD,
    GrantedAccess:  LPDWORD,
    AccessStatus:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckByType(
            pSecurityDescriptor,
            PrincipalSelfSid,
            ClientToken,
            DesiredAccess,
            ObjectTypeList,
            ObjectTypeListLength,
            GenericMapping,
            PrivilegeSet,
            PrivilegeSetLength,
            GrantedAccess,
            AccessStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckByTypeResultList(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    PrincipalSelfSid:  PSID,
    ClientToken:  HANDLE,
    DesiredAccess:  DWORD,
    ObjectTypeList:  POBJECT_TYPE_LIST,
    ObjectTypeListLength:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    PrivilegeSet:  PPRIVILEGE_SET,
    PrivilegeSetLength:  LPDWORD,
    GrantedAccessList:  LPDWORD,
    AccessStatusList:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return AccessCheckByTypeResultList(
            pSecurityDescriptor,
            PrincipalSelfSid,
            ClientToken,
            DesiredAccess,
            ObjectTypeList,
            ObjectTypeListLength,
            GenericMapping,
            PrivilegeSet,
            PrivilegeSetLength,
            GrantedAccessList,
            AccessStatusList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckByTypeAndAuditAlarmW(
    SubsystemName:  LPCWSTR,
    HandleId:  LPVOID,
    ObjectTypeName:  LPCWSTR,
    ObjectName:  LPCWSTR,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    PrincipalSelfSid:  PSID,
    DesiredAccess:  DWORD,
    AuditType:  AUDIT_EVENT_TYPE,
    Flags:  DWORD,
    ObjectTypeList:  POBJECT_TYPE_LIST,
    ObjectTypeListLength:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    ObjectCreation:  BOOL,
    GrantedAccess:  LPDWORD,
    AccessStatus:  LPBOOL,
    pfGenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckByTypeAndAuditAlarmW(
            SubsystemName,
            HandleId,
            ObjectTypeName,
            ObjectName,
            SecurityDescriptor,
            PrincipalSelfSid,
            DesiredAccess,
            AuditType,
            Flags,
            ObjectTypeList,
            ObjectTypeListLength,
            GenericMapping,
            ObjectCreation,
            GrantedAccess,
            AccessStatus,
            pfGenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckByTypeResultListAndAuditAlarmW(
    SubsystemName:  LPCWSTR,
    HandleId:  LPVOID,
    ObjectTypeName:  LPCWSTR,
    ObjectName:  LPCWSTR,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    PrincipalSelfSid:  PSID,
    DesiredAccess:  DWORD,
    AuditType:  AUDIT_EVENT_TYPE,
    Flags:  DWORD,
    ObjectTypeList:  POBJECT_TYPE_LIST,
    ObjectTypeListLength:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    ObjectCreation:  BOOL,
    GrantedAccessList:  LPDWORD,
    AccessStatusList:  LPDWORD,
    pfGenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckByTypeResultListAndAuditAlarmW(
            SubsystemName,
            HandleId,
            ObjectTypeName,
            ObjectName,
            SecurityDescriptor,
            PrincipalSelfSid,
            DesiredAccess,
            AuditType,
            Flags,
            ObjectTypeList,
            ObjectTypeListLength,
            GenericMapping,
            ObjectCreation,
            GrantedAccessList,
            AccessStatusList,
            pfGenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckByTypeResultListAndAuditAlarmByHandleW(
    SubsystemName:  LPCWSTR,
    HandleId:  LPVOID,
    ClientToken:  HANDLE,
    ObjectTypeName:  LPCWSTR,
    ObjectName:  LPCWSTR,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    PrincipalSelfSid:  PSID,
    DesiredAccess:  DWORD,
    AuditType:  AUDIT_EVENT_TYPE,
    Flags:  DWORD,
    ObjectTypeList:  POBJECT_TYPE_LIST,
    ObjectTypeListLength:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    ObjectCreation:  BOOL,
    GrantedAccessList:  LPDWORD,
    AccessStatusList:  LPDWORD,
    pfGenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckByTypeResultListAndAuditAlarmByHandleW(
            SubsystemName,
            HandleId,
            ClientToken,
            ObjectTypeName,
            ObjectName,
            SecurityDescriptor,
            PrincipalSelfSid,
            DesiredAccess,
            AuditType,
            Flags,
            ObjectTypeList,
            ObjectTypeListLength,
            GenericMapping,
            ObjectCreation,
            GrantedAccessList,
            AccessStatusList,
            pfGenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAccessAllowedAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AccessMask:  DWORD,
    pSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddAccessAllowedAce(
            pAcl,
            dwAceRevision,
            AccessMask,
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAccessAllowedAceEx(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    AccessMask:  DWORD,
    pSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddAccessAllowedAceEx(
            pAcl,
            dwAceRevision,
            AceFlags,
            AccessMask,
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAccessAllowedObjectAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    AccessMask:  DWORD,
    ObjectTypeGuid: *mut GUID,
    InheritedObjectTypeGuid: *mut GUID,
    pSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddAccessAllowedObjectAce(
            pAcl,
            dwAceRevision,
            AceFlags,
            AccessMask,
            ObjectTypeGuid,
            InheritedObjectTypeGuid,
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAccessDeniedAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AccessMask:  DWORD,
    pSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddAccessDeniedAce(
            pAcl,
            dwAceRevision,
            AccessMask,
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAccessDeniedAceEx(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    AccessMask:  DWORD,
    pSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddAccessDeniedAceEx(
            pAcl,
            dwAceRevision,
            AceFlags,
            AccessMask,
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAccessDeniedObjectAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    AccessMask:  DWORD,
    ObjectTypeGuid: *mut GUID,
    InheritedObjectTypeGuid: *mut GUID,
    pSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddAccessDeniedObjectAce(
            pAcl,
            dwAceRevision,
            AceFlags,
            AccessMask,
            ObjectTypeGuid,
            InheritedObjectTypeGuid,
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    dwStartingAceIndex:  DWORD,
    pAceList:  LPVOID,
    nAceListLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return AddAce(
            pAcl,
            dwAceRevision,
            dwStartingAceIndex,
            pAceList,
            nAceListLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAuditAccessAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    dwAccessMask:  DWORD,
    pSid:  PSID,
    bAuditSuccess:  BOOL,
    bAuditFailure:  BOOL    
) ->  BOOL
{
    unsafe {
        return AddAuditAccessAce(
            pAcl,
            dwAceRevision,
            dwAccessMask,
            pSid,
            bAuditSuccess,
            bAuditFailure
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAuditAccessAceEx(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    dwAccessMask:  DWORD,
    pSid:  PSID,
    bAuditSuccess:  BOOL,
    bAuditFailure:  BOOL    
) ->  BOOL
{
    unsafe {
        return AddAuditAccessAceEx(
            pAcl,
            dwAceRevision,
            AceFlags,
            dwAccessMask,
            pSid,
            bAuditSuccess,
            bAuditFailure
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAuditAccessObjectAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    AccessMask:  DWORD,
    ObjectTypeGuid: *mut GUID,
    InheritedObjectTypeGuid: *mut GUID,
    pSid:  PSID,
    bAuditSuccess:  BOOL,
    bAuditFailure:  BOOL    
) ->  BOOL
{
    unsafe {
        return AddAuditAccessObjectAce(
            pAcl,
            dwAceRevision,
            AceFlags,
            AccessMask,
            ObjectTypeGuid,
            InheritedObjectTypeGuid,
            pSid,
            bAuditSuccess,
            bAuditFailure
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddMandatoryAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    MandatoryPolicy:  DWORD,
    pLabelSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddMandatoryAce(
            pAcl,
            dwAceRevision,
            AceFlags,
            MandatoryPolicy,
            pLabelSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddResourceAttributeAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    AccessMask:  DWORD,
    pSid:  PSID,
    pAttributeInfo:  PCLAIM_SECURITY_ATTRIBUTES_INFORMATION,
    pReturnLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return AddResourceAttributeAce(
            pAcl,
            dwAceRevision,
            AceFlags,
            AccessMask,
            pSid,
            pAttributeInfo,
            pReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddScopedPolicyIDAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    AccessMask:  DWORD,
    pSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddScopedPolicyIDAce(
            pAcl,
            dwAceRevision,
            AceFlags,
            AccessMask,
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AdjustTokenGroups(
    TokenHandle:  HANDLE,
    ResetToDefault:  BOOL,
    NewState:  PTOKEN_GROUPS,
    BufferLength:  DWORD,
    PreviousState:  PTOKEN_GROUPS,
    ReturnLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return AdjustTokenGroups(
            TokenHandle,
            ResetToDefault,
            NewState,
            BufferLength,
            PreviousState,
            ReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AdjustTokenPrivileges(
    TokenHandle:  HANDLE,
    DisableAllPrivileges:  BOOL,
    NewState:  PTOKEN_PRIVILEGES,
    BufferLength:  DWORD,
    PreviousState:  PTOKEN_PRIVILEGES,
    ReturnLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return AdjustTokenPrivileges(
            TokenHandle,
            DisableAllPrivileges,
            NewState,
            BufferLength,
            PreviousState,
            ReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AllocateAndInitializeSid(
    pIdentifierAuthority:  PSID_IDENTIFIER_AUTHORITY,
    nSubAuthorityCount:  BYTE,
    nSubAuthority0:  DWORD,
    nSubAuthority1:  DWORD,
    nSubAuthority2:  DWORD,
    nSubAuthority3:  DWORD,
    nSubAuthority4:  DWORD,
    nSubAuthority5:  DWORD,
    nSubAuthority6:  DWORD,
    nSubAuthority7:  DWORD,
    pSid: *mut PSID    
) ->  BOOL
{
    unsafe {
        return AllocateAndInitializeSid(
            pIdentifierAuthority,
            nSubAuthorityCount,
            nSubAuthority0,
            nSubAuthority1,
            nSubAuthority2,
            nSubAuthority3,
            nSubAuthority4,
            nSubAuthority5,
            nSubAuthority6,
            nSubAuthority7,
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AllocateLocallyUniqueId(
    Luid:  PLUID    
) ->  BOOL
{
    unsafe {
        return AllocateLocallyUniqueId(
            Luid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AreAllAccessesGranted(
    GrantedAccess:  DWORD,
    DesiredAccess:  DWORD    
) ->  BOOL
{
    unsafe {
        return AreAllAccessesGranted(
            GrantedAccess,
            DesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AreAnyAccessesGranted(
    GrantedAccess:  DWORD,
    DesiredAccess:  DWORD    
) ->  BOOL
{
    unsafe {
        return AreAnyAccessesGranted(
            GrantedAccess,
            DesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckTokenMembership(
    TokenHandle:  HANDLE,
    SidToCheck:  PSID,
    IsMember:  PBOOL    
) ->  BOOL
{
    unsafe {
        return CheckTokenMembership(
            TokenHandle,
            SidToCheck,
            IsMember
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckTokenCapability(
    TokenHandle:  HANDLE,
    CapabilitySidToCheck:  PSID,
    HasCapability:  PBOOL    
) ->  BOOL
{
    unsafe {
        return CheckTokenCapability(
            TokenHandle,
            CapabilitySidToCheck,
            HasCapability
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAppContainerAce(
    Acl:  PACL,
    StartingAceIndex:  DWORD,
    AppContainerAce: *mut PVOID,
    AppContainerAceIndex: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return GetAppContainerAce(
            Acl,
            StartingAceIndex,
            AppContainerAce,
            AppContainerAceIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckTokenMembershipEx(
    TokenHandle:  HANDLE,
    SidToCheck:  PSID,
    Flags:  DWORD,
    IsMember:  PBOOL    
) ->  BOOL
{
    unsafe {
        return CheckTokenMembershipEx(
            TokenHandle,
            SidToCheck,
            Flags,
            IsMember
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConvertToAutoInheritPrivateObjectSecurity(
    ParentDescriptor:  PSECURITY_DESCRIPTOR,
    CurrentSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    NewSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
    ObjectType: *mut GUID,
    IsDirectoryObject:  BOOLEAN,
    GenericMapping:  PGENERIC_MAPPING    
) ->  BOOL
{
    unsafe {
        return ConvertToAutoInheritPrivateObjectSecurity(
            ParentDescriptor,
            CurrentSecurityDescriptor,
            NewSecurityDescriptor,
            ObjectType,
            IsDirectoryObject,
            GenericMapping
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopySid(
    nDestinationSidLength:  DWORD,
    pDestinationSid:  PSID,
    pSourceSid:  PSID    
) ->  BOOL
{
    unsafe {
        return CopySid(
            nDestinationSidLength,
            pDestinationSid,
            pSourceSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePrivateObjectSecurity(
    ParentDescriptor:  PSECURITY_DESCRIPTOR,
    CreatorDescriptor:  PSECURITY_DESCRIPTOR,
    NewDescriptor: *mut PSECURITY_DESCRIPTOR,
    IsDirectoryObject:  BOOL,
    Token:  HANDLE,
    GenericMapping:  PGENERIC_MAPPING    
) ->  BOOL
{
    unsafe {
        return CreatePrivateObjectSecurity(
            ParentDescriptor,
            CreatorDescriptor,
            NewDescriptor,
            IsDirectoryObject,
            Token,
            GenericMapping
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePrivateObjectSecurityEx(
    ParentDescriptor:  PSECURITY_DESCRIPTOR,
    CreatorDescriptor:  PSECURITY_DESCRIPTOR,
    NewDescriptor: *mut PSECURITY_DESCRIPTOR,
    ObjectType: *mut GUID,
    IsContainerObject:  BOOL,
    AutoInheritFlags:  ULONG,
    Token:  HANDLE,
    GenericMapping:  PGENERIC_MAPPING    
) ->  BOOL
{
    unsafe {
        return CreatePrivateObjectSecurityEx(
            ParentDescriptor,
            CreatorDescriptor,
            NewDescriptor,
            ObjectType,
            IsContainerObject,
            AutoInheritFlags,
            Token,
            GenericMapping
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePrivateObjectSecurityWithMultipleInheritance(
    ParentDescriptor:  PSECURITY_DESCRIPTOR,
    CreatorDescriptor:  PSECURITY_DESCRIPTOR,
    NewDescriptor: *mut PSECURITY_DESCRIPTOR,
    ObjectTypes: *mut *mut GUID,
    GuidCount:  ULONG,
    IsContainerObject:  BOOL,
    AutoInheritFlags:  ULONG,
    Token:  HANDLE,
    GenericMapping:  PGENERIC_MAPPING    
) ->  BOOL
{
    unsafe {
        return CreatePrivateObjectSecurityWithMultipleInheritance(
            ParentDescriptor,
            CreatorDescriptor,
            NewDescriptor,
            ObjectTypes,
            GuidCount,
            IsContainerObject,
            AutoInheritFlags,
            Token,
            GenericMapping
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateRestrictedToken(
    ExistingTokenHandle:  HANDLE,
    Flags:  DWORD,
    DisableSidCount:  DWORD,
    SidsToDisable:  PSID_AND_ATTRIBUTES,
    DeletePrivilegeCount:  DWORD,
    PrivilegesToDelete:  PLUID_AND_ATTRIBUTES,
    RestrictedSidCount:  DWORD,
    SidsToRestrict:  PSID_AND_ATTRIBUTES,
    NewTokenHandle:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return CreateRestrictedToken(
            ExistingTokenHandle,
            Flags,
            DisableSidCount,
            SidsToDisable,
            DeletePrivilegeCount,
            PrivilegesToDelete,
            RestrictedSidCount,
            SidsToRestrict,
            NewTokenHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWellKnownSid(
    WellKnownSidType:  WELL_KNOWN_SID_TYPE,
    DomainSid:  PSID,
    pSid:  PSID,
    cbSid: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CreateWellKnownSid(
            WellKnownSidType,
            DomainSid,
            pSid,
            cbSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EqualDomainSid(
    pSid1:  PSID,
    pSid2:  PSID,
    pfEqual: *mut BOOL    
) ->  BOOL
{
    unsafe {
        return EqualDomainSid(
            pSid1,
            pSid2,
            pfEqual
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteAce(
    pAcl:  PACL,
    dwAceIndex:  DWORD    
) ->  BOOL
{
    unsafe {
        return DeleteAce(
            pAcl,
            dwAceIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroyPrivateObjectSecurity(
    ObjectDescriptor: *mut PSECURITY_DESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return DestroyPrivateObjectSecurity(
            ObjectDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DuplicateToken(
    ExistingTokenHandle:  HANDLE,
    ImpersonationLevel:  SECURITY_IMPERSONATION_LEVEL,
    DuplicateTokenHandle:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return DuplicateToken(
            ExistingTokenHandle,
            ImpersonationLevel,
            DuplicateTokenHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DuplicateTokenEx(
    hExistingToken:  HANDLE,
    dwDesiredAccess:  DWORD,
    lpTokenAttributes:  LPSECURITY_ATTRIBUTES,
    ImpersonationLevel:  SECURITY_IMPERSONATION_LEVEL,
    TokenType:  TOKEN_TYPE,
    phNewToken:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return DuplicateTokenEx(
            hExistingToken,
            dwDesiredAccess,
            lpTokenAttributes,
            ImpersonationLevel,
            TokenType,
            phNewToken
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EqualPrefixSid(
    pSid1:  PSID,
    pSid2:  PSID    
) ->  BOOL
{
    unsafe {
        return EqualPrefixSid(
            pSid1,
            pSid2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EqualSid(
    pSid1:  PSID,
    pSid2:  PSID    
) ->  BOOL
{
    unsafe {
        return EqualSid(
            pSid1,
            pSid2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFreeAce(
    pAcl:  PACL,
    pAce: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return FindFirstFreeAce(
            pAcl,
            pAce
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeSid(
    pSid:  PSID    
) ->  PVOID
{
    unsafe {
        return FreeSid(
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAce(
    pAcl:  PACL,
    dwAceIndex:  DWORD,
    pAce: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return GetAce(
            pAcl,
            dwAceIndex,
            pAce
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAclInformation(
    pAcl:  PACL,
    pAclInformation:  LPVOID,
    nAclInformationLength:  DWORD,
    dwAclInformationClass:  ACL_INFORMATION_CLASS    
) ->  BOOL
{
    unsafe {
        return GetAclInformation(
            pAcl,
            pAclInformation,
            nAclInformationLength,
            dwAclInformationClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileSecurityW(
    lpFileName:  LPCWSTR,
    RequestedInformation:  SECURITY_INFORMATION,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    nLength:  DWORD,
    lpnLengthNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetFileSecurityW(
            lpFileName,
            RequestedInformation,
            pSecurityDescriptor,
            nLength,
            lpnLengthNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKernelObjectSecurity(
    Handle:  HANDLE,
    RequestedInformation:  SECURITY_INFORMATION,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    nLength:  DWORD,
    lpnLengthNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetKernelObjectSecurity(
            Handle,
            RequestedInformation,
            pSecurityDescriptor,
            nLength,
            lpnLengthNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLengthSid(
    pSid:  PSID    
) ->  DWORD
{
    unsafe {
        return GetLengthSid(
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateObjectSecurity(
    ObjectDescriptor:  PSECURITY_DESCRIPTOR,
    SecurityInformation:  SECURITY_INFORMATION,
    ResultantDescriptor:  PSECURITY_DESCRIPTOR,
    DescriptorLength:  DWORD,
    ReturnLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrivateObjectSecurity(
            ObjectDescriptor,
            SecurityInformation,
            ResultantDescriptor,
            DescriptorLength,
            ReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSecurityDescriptorControl(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    pControl:  PSECURITY_DESCRIPTOR_CONTROL,
    lpdwRevision:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetSecurityDescriptorControl(
            pSecurityDescriptor,
            pControl,
            lpdwRevision
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSecurityDescriptorDacl(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    lpbDaclPresent:  LPBOOL,
    pDacl: *mut PACL,
    lpbDaclDefaulted:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return GetSecurityDescriptorDacl(
            pSecurityDescriptor,
            lpbDaclPresent,
            pDacl,
            lpbDaclDefaulted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSecurityDescriptorGroup(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    pGroup: *mut PSID,
    lpbGroupDefaulted:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return GetSecurityDescriptorGroup(
            pSecurityDescriptor,
            pGroup,
            lpbGroupDefaulted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSecurityDescriptorLength(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR    
) ->  DWORD
{
    unsafe {
        return GetSecurityDescriptorLength(
            pSecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSecurityDescriptorOwner(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    pOwner: *mut PSID,
    lpbOwnerDefaulted:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return GetSecurityDescriptorOwner(
            pSecurityDescriptor,
            pOwner,
            lpbOwnerDefaulted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSecurityDescriptorRMControl(
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    RMControl:  PUCHAR    
) ->  DWORD
{
    unsafe {
        return GetSecurityDescriptorRMControl(
            SecurityDescriptor,
            RMControl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSecurityDescriptorSacl(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    lpbSaclPresent:  LPBOOL,
    pSacl: *mut PACL,
    lpbSaclDefaulted:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return GetSecurityDescriptorSacl(
            pSecurityDescriptor,
            lpbSaclPresent,
            pSacl,
            lpbSaclDefaulted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSidIdentifierAuthority(
    pSid:  PSID    
) ->  PSID_IDENTIFIER_AUTHORITY
{
    unsafe {
        return GetSidIdentifierAuthority(
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSidLengthRequired(
    nSubAuthorityCount:  UCHAR    
) ->  DWORD
{
    unsafe {
        return GetSidLengthRequired(
            nSubAuthorityCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSidSubAuthority(
    pSid:  PSID,
    nSubAuthority:  DWORD    
) ->  PDWORD
{
    unsafe {
        return GetSidSubAuthority(
            pSid,
            nSubAuthority
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSidSubAuthorityCount(
    pSid:  PSID    
) ->  PUCHAR
{
    unsafe {
        return GetSidSubAuthorityCount(
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTokenInformation(
    TokenHandle:  HANDLE,
    TokenInformationClass:  TOKEN_INFORMATION_CLASS,
    TokenInformation:  LPVOID,
    TokenInformationLength:  DWORD,
    ReturnLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetTokenInformation(
            TokenHandle,
            TokenInformationClass,
            TokenInformation,
            TokenInformationLength,
            ReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowsAccountDomainSid(
    pSid:  PSID,
    pDomainSid:  PSID,
    cbDomainSid: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return GetWindowsAccountDomainSid(
            pSid,
            pDomainSid,
            cbDomainSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImpersonateAnonymousToken(
    ThreadHandle:  HANDLE    
) ->  BOOL
{
    unsafe {
        return ImpersonateAnonymousToken(
            ThreadHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImpersonateLoggedOnUser(
    hToken:  HANDLE    
) ->  BOOL
{
    unsafe {
        return ImpersonateLoggedOnUser(
            hToken
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImpersonateSelf(
    ImpersonationLevel:  SECURITY_IMPERSONATION_LEVEL    
) ->  BOOL
{
    unsafe {
        return ImpersonateSelf(
            ImpersonationLevel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeAcl(
    pAcl:  PACL,
    nAclLength:  DWORD,
    dwAclRevision:  DWORD    
) ->  BOOL
{
    unsafe {
        return InitializeAcl(
            pAcl,
            nAclLength,
            dwAclRevision
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeSecurityDescriptor(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    dwRevision:  DWORD    
) ->  BOOL
{
    unsafe {
        return InitializeSecurityDescriptor(
            pSecurityDescriptor,
            dwRevision
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeSid(
    Sid:  PSID,
    pIdentifierAuthority:  PSID_IDENTIFIER_AUTHORITY,
    nSubAuthorityCount:  BYTE    
) ->  BOOL
{
    unsafe {
        return InitializeSid(
            Sid,
            pIdentifierAuthority,
            nSubAuthorityCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsTokenRestricted(
    TokenHandle:  HANDLE    
) ->  BOOL
{
    unsafe {
        return IsTokenRestricted(
            TokenHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidAcl(
    pAcl:  PACL    
) ->  BOOL
{
    unsafe {
        return IsValidAcl(
            pAcl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidSecurityDescriptor(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return IsValidSecurityDescriptor(
            pSecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidSid(
    pSid:  PSID    
) ->  BOOL
{
    unsafe {
        return IsValidSid(
            pSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWellKnownSid(
    pSid:  PSID,
    WellKnownSidType:  WELL_KNOWN_SID_TYPE    
) ->  BOOL
{
    unsafe {
        return IsWellKnownSid(
            pSid,
            WellKnownSidType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MakeAbsoluteSD(
    pSelfRelativeSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    pAbsoluteSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    lpdwAbsoluteSecurityDescriptorSize:  LPDWORD,
    pDacl:  PACL,
    lpdwDaclSize:  LPDWORD,
    pSacl:  PACL,
    lpdwSaclSize:  LPDWORD,
    pOwner:  PSID,
    lpdwOwnerSize:  LPDWORD,
    pPrimaryGroup:  PSID,
    lpdwPrimaryGroupSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return MakeAbsoluteSD(
            pSelfRelativeSecurityDescriptor,
            pAbsoluteSecurityDescriptor,
            lpdwAbsoluteSecurityDescriptorSize,
            pDacl,
            lpdwDaclSize,
            pSacl,
            lpdwSaclSize,
            pOwner,
            lpdwOwnerSize,
            pPrimaryGroup,
            lpdwPrimaryGroupSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MakeSelfRelativeSD(
    pAbsoluteSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    pSelfRelativeSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    lpdwBufferLength:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return MakeSelfRelativeSD(
            pAbsoluteSecurityDescriptor,
            pSelfRelativeSecurityDescriptor,
            lpdwBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapGenericMask(
    AccessMask:  PDWORD,
    GenericMapping:  PGENERIC_MAPPING    
)
{
    unsafe {
        return MapGenericMask(
            AccessMask,
            GenericMapping
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObjectCloseAuditAlarmW(
    SubsystemName:  LPCWSTR,
    HandleId:  LPVOID,
    GenerateOnClose:  BOOL    
) ->  BOOL
{
    unsafe {
        return ObjectCloseAuditAlarmW(
            SubsystemName,
            HandleId,
            GenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObjectDeleteAuditAlarmW(
    SubsystemName:  LPCWSTR,
    HandleId:  LPVOID,
    GenerateOnClose:  BOOL    
) ->  BOOL
{
    unsafe {
        return ObjectDeleteAuditAlarmW(
            SubsystemName,
            HandleId,
            GenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObjectOpenAuditAlarmW(
    SubsystemName:  LPCWSTR,
    HandleId:  LPVOID,
    ObjectTypeName:  LPWSTR,
    ObjectName:  LPWSTR,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    ClientToken:  HANDLE,
    DesiredAccess:  DWORD,
    GrantedAccess:  DWORD,
    Privileges:  PPRIVILEGE_SET,
    ObjectCreation:  BOOL,
    AccessGranted:  BOOL,
    GenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return ObjectOpenAuditAlarmW(
            SubsystemName,
            HandleId,
            ObjectTypeName,
            ObjectName,
            pSecurityDescriptor,
            ClientToken,
            DesiredAccess,
            GrantedAccess,
            Privileges,
            ObjectCreation,
            AccessGranted,
            GenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObjectPrivilegeAuditAlarmW(
    SubsystemName:  LPCWSTR,
    HandleId:  LPVOID,
    ClientToken:  HANDLE,
    DesiredAccess:  DWORD,
    Privileges:  PPRIVILEGE_SET,
    AccessGranted:  BOOL    
) ->  BOOL
{
    unsafe {
        return ObjectPrivilegeAuditAlarmW(
            SubsystemName,
            HandleId,
            ClientToken,
            DesiredAccess,
            Privileges,
            AccessGranted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrivilegeCheck(
    ClientToken:  HANDLE,
    RequiredPrivileges:  PPRIVILEGE_SET,
    pfResult:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return PrivilegeCheck(
            ClientToken,
            RequiredPrivileges,
            pfResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrivilegedServiceAuditAlarmW(
    SubsystemName:  LPCWSTR,
    ServiceName:  LPCWSTR,
    ClientToken:  HANDLE,
    Privileges:  PPRIVILEGE_SET,
    AccessGranted:  BOOL    
) ->  BOOL
{
    unsafe {
        return PrivilegedServiceAuditAlarmW(
            SubsystemName,
            ServiceName,
            ClientToken,
            Privileges,
            AccessGranted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QuerySecurityAccessMask(
    SecurityInformation:  SECURITY_INFORMATION,
    DesiredAccess:  LPDWORD    
)
{
    unsafe {
        return QuerySecurityAccessMask(
            SecurityInformation,
            DesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RevertToSelf(
    
) ->  BOOL
{
    unsafe {
        return RevertToSelf(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetAclInformation(
    pAcl:  PACL,
    pAclInformation:  LPVOID,
    nAclInformationLength:  DWORD,
    dwAclInformationClass:  ACL_INFORMATION_CLASS    
) ->  BOOL
{
    unsafe {
        return SetAclInformation(
            pAcl,
            pAclInformation,
            nAclInformationLength,
            dwAclInformationClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileSecurityW(
    lpFileName:  LPCWSTR,
    SecurityInformation:  SECURITY_INFORMATION,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return SetFileSecurityW(
            lpFileName,
            SecurityInformation,
            pSecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetKernelObjectSecurity(
    Handle:  HANDLE,
    SecurityInformation:  SECURITY_INFORMATION,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return SetKernelObjectSecurity(
            Handle,
            SecurityInformation,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPrivateObjectSecurity(
    SecurityInformation:  SECURITY_INFORMATION,
    ModificationDescriptor:  PSECURITY_DESCRIPTOR,
    ObjectsSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
    GenericMapping:  PGENERIC_MAPPING,
    Token:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetPrivateObjectSecurity(
            SecurityInformation,
            ModificationDescriptor,
            ObjectsSecurityDescriptor,
            GenericMapping,
            Token
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPrivateObjectSecurityEx(
    SecurityInformation:  SECURITY_INFORMATION,
    ModificationDescriptor:  PSECURITY_DESCRIPTOR,
    ObjectsSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
    AutoInheritFlags:  ULONG,
    GenericMapping:  PGENERIC_MAPPING,
    Token:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetPrivateObjectSecurityEx(
            SecurityInformation,
            ModificationDescriptor,
            ObjectsSecurityDescriptor,
            AutoInheritFlags,
            GenericMapping,
            Token
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSecurityAccessMask(
    SecurityInformation:  SECURITY_INFORMATION,
    DesiredAccess:  LPDWORD    
)
{
    unsafe {
        return SetSecurityAccessMask(
            SecurityInformation,
            DesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSecurityDescriptorControl(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    ControlBitsOfInterest:  SECURITY_DESCRIPTOR_CONTROL,
    ControlBitsToSet:  SECURITY_DESCRIPTOR_CONTROL    
) ->  BOOL
{
    unsafe {
        return SetSecurityDescriptorControl(
            pSecurityDescriptor,
            ControlBitsOfInterest,
            ControlBitsToSet
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSecurityDescriptorDacl(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    bDaclPresent:  BOOL,
    pDacl:  PACL,
    bDaclDefaulted:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetSecurityDescriptorDacl(
            pSecurityDescriptor,
            bDaclPresent,
            pDacl,
            bDaclDefaulted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSecurityDescriptorGroup(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    pGroup:  PSID,
    bGroupDefaulted:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetSecurityDescriptorGroup(
            pSecurityDescriptor,
            pGroup,
            bGroupDefaulted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSecurityDescriptorOwner(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    pOwner:  PSID,
    bOwnerDefaulted:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetSecurityDescriptorOwner(
            pSecurityDescriptor,
            pOwner,
            bOwnerDefaulted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSecurityDescriptorRMControl(
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    RMControl:  PUCHAR    
) ->  DWORD
{
    unsafe {
        return SetSecurityDescriptorRMControl(
            SecurityDescriptor,
            RMControl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSecurityDescriptorSacl(
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    bSaclPresent:  BOOL,
    pSacl:  PACL,
    bSaclDefaulted:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetSecurityDescriptorSacl(
            pSecurityDescriptor,
            bSaclPresent,
            pSacl,
            bSaclDefaulted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTokenInformation(
    TokenHandle:  HANDLE,
    TokenInformationClass:  TOKEN_INFORMATION_CLASS,
    TokenInformation:  LPVOID,
    TokenInformationLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetTokenInformation(
            TokenHandle,
            TokenInformationClass,
            TokenInformation,
            TokenInformationLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCachedSigningLevel(
    SourceFiles:  PHANDLE,
    SourceFileCount:  ULONG,
    Flags:  ULONG,
    TargetFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetCachedSigningLevel(
            SourceFiles,
            SourceFileCount,
            Flags,
            TargetFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCachedSigningLevel(
    File:  HANDLE,
    Flags:  PULONG,
    SigningLevel:  PULONG,
    Thumbprint:  PUCHAR,
    ThumbprintSize:  PULONG,
    ThumbprintAlgorithm:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetCachedSigningLevel(
            File,
            Flags,
            SigningLevel,
            Thumbprint,
            ThumbprintSize,
            ThumbprintAlgorithm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CveEventWrite(
    CveId:  PCWSTR,
    AdditionalDetails:  PCWSTR    
) ->  LONG
{
    unsafe {
        return CveEventWrite(
            CveId,
            AdditionalDetails
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeriveCapabilitySidsFromName(
    CapName:  LPCWSTR,
    CapabilityGroupSids: *mut *mut PSID,
    CapabilityGroupSidCount: *mut DWORD,
    CapabilitySids: *mut *mut PSID,
    CapabilitySidCount: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return DeriveCapabilitySidsFromName(
            CapName,
            CapabilityGroupSids,
            CapabilityGroupSidCount,
            CapabilitySids,
            CapabilitySidCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePrivateNamespaceW(
    lpPrivateNamespaceAttributes:  LPSECURITY_ATTRIBUTES,
    lpBoundaryDescriptor:  LPVOID,
    lpAliasPrefix:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return CreatePrivateNamespaceW(
            lpPrivateNamespaceAttributes,
            lpBoundaryDescriptor,
            lpAliasPrefix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenPrivateNamespaceW(
    lpBoundaryDescriptor:  LPVOID,
    lpAliasPrefix:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenPrivateNamespaceW(
            lpBoundaryDescriptor,
            lpAliasPrefix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClosePrivateNamespace(
    Handle:  HANDLE,
    Flags:  ULONG    
) ->  BOOLEAN
{
    unsafe {
        return ClosePrivateNamespace(
            Handle,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateBoundaryDescriptorW(
    Name:  LPCWSTR,
    Flags:  ULONG    
) ->  HANDLE
{
    unsafe {
        return CreateBoundaryDescriptorW(
            Name,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddSIDToBoundaryDescriptor(
    BoundaryDescriptor: *mut HANDLE,
    RequiredSid:  PSID    
) ->  BOOL
{
    unsafe {
        return AddSIDToBoundaryDescriptor(
            BoundaryDescriptor,
            RequiredSid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteBoundaryDescriptor(
    BoundaryDescriptor:  HANDLE    
)
{
    unsafe {
        return DeleteBoundaryDescriptor(
            BoundaryDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaHighestNodeNumber(
    HighestNodeNumber:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetNumaHighestNodeNumber(
            HighestNodeNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaNodeProcessorMaskEx(
    Node:  USHORT,
    ProcessorMask:  PGROUP_AFFINITY    
) ->  BOOL
{
    unsafe {
        return GetNumaNodeProcessorMaskEx(
            Node,
            ProcessorMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaProximityNodeEx(
    ProximityId:  ULONG,
    NodeNumber:  PUSHORT    
) ->  BOOL
{
    unsafe {
        return GetNumaProximityNodeEx(
            ProximityId,
            NodeNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessGroupAffinity(
    hProcess:  HANDLE,
    GroupCount:  PUSHORT,
    GroupArray:  PUSHORT    
) ->  BOOL
{
    unsafe {
        return GetProcessGroupAffinity(
            hProcess,
            GroupCount,
            GroupArray
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadGroupAffinity(
    hThread:  HANDLE,
    GroupAffinity:  PGROUP_AFFINITY    
) ->  BOOL
{
    unsafe {
        return GetThreadGroupAffinity(
            hThread,
            GroupAffinity
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadGroupAffinity(
    hThread:  HANDLE,
    GroupAffinity: *const GROUP_AFFINITY,
    PreviousGroupAffinity:  PGROUP_AFFINITY    
) ->  BOOL
{
    unsafe {
        return SetThreadGroupAffinity(
            hThread,
            GroupAffinity,
            PreviousGroupAffinity
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAppContainerNamedObjectPath(
    Token:  HANDLE,
    AppContainerSid:  PSID,
    ObjectPathLength:  ULONG,
    ObjectPath:  LPWSTR,
    ReturnLength:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetAppContainerNamedObjectPath(
            Token,
            AppContainerSid,
            ObjectPathLength,
            ObjectPath,
            ReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryThreadCycleTime(
    ThreadHandle:  HANDLE,
    CycleTime:  PULONG64    
) ->  BOOL
{
    unsafe {
        return QueryThreadCycleTime(
            ThreadHandle,
            CycleTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryProcessCycleTime(
    ProcessHandle:  HANDLE,
    CycleTime:  PULONG64    
) ->  BOOL
{
    unsafe {
        return QueryProcessCycleTime(
            ProcessHandle,
            CycleTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryIdleProcessorCycleTime(
    BufferLength:  PULONG,
    ProcessorIdleCycleTime:  PULONG64    
) ->  BOOL
{
    unsafe {
        return QueryIdleProcessorCycleTime(
            BufferLength,
            ProcessorIdleCycleTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryIdleProcessorCycleTimeEx(
    Group:  USHORT,
    BufferLength:  PULONG,
    ProcessorIdleCycleTime:  PULONG64    
) ->  BOOL
{
    unsafe {
        return QueryIdleProcessorCycleTimeEx(
            Group,
            BufferLength,
            ProcessorIdleCycleTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryInterruptTimePrecise(
    lpInterruptTimePrecise:  PULONGLONG    
)
{
    unsafe {
        return QueryInterruptTimePrecise(
            lpInterruptTimePrecise
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryUnbiasedInterruptTimePrecise(
    lpUnbiasedInterruptTimePrecise:  PULONGLONG    
)
{
    unsafe {
        return QueryUnbiasedInterruptTimePrecise(
            lpUnbiasedInterruptTimePrecise
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryInterruptTime(
    lpInterruptTime:  PULONGLONG    
)
{
    unsafe {
        return QueryInterruptTime(
            lpInterruptTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryUnbiasedInterruptTime(
    UnbiasedTime:  PULONGLONG    
) ->  BOOL
{
    unsafe {
        return QueryUnbiasedInterruptTime(
            UnbiasedTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryAuxiliaryCounterFrequency(
    lpAuxiliaryCounterFrequency:  PULONGLONG    
) ->  HRESULT
{
    unsafe {
        return QueryAuxiliaryCounterFrequency(
            lpAuxiliaryCounterFrequency
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConvertAuxiliaryCounterToPerformanceCounter(
    ullAuxiliaryCounterValue:  ULONGLONG,
    lpPerformanceCounterValue:  PULONGLONG,
    lpConversionError:  PULONGLONG    
) ->  HRESULT
{
    unsafe {
        return ConvertAuxiliaryCounterToPerformanceCounter(
            ullAuxiliaryCounterValue,
            lpPerformanceCounterValue,
            lpConversionError
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConvertPerformanceCounterToAuxiliaryCounter(
    ullPerformanceCounterValue:  ULONGLONG,
    lpAuxiliaryCounterValue:  PULONGLONG,
    lpConversionError:  PULONGLONG    
) ->  HRESULT
{
    unsafe {
        return ConvertPerformanceCounterToAuxiliaryCounter(
            ullPerformanceCounterValue,
            lpAuxiliaryCounterValue,
            lpConversionError
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WinMain(
    hInstance:  HINSTANCE,
    hPrevInstance:  HINSTANCE,
    lpCmdLine:  LPSTR,
    nShowCmd:  c_int    
) ->  c_int
{
    unsafe {
        return WinMain(
            hInstance,
            hPrevInstance,
            lpCmdLine,
            nShowCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wWinMain(
    hInstance:  HINSTANCE,
    hPrevInstance:  HINSTANCE,
    lpCmdLine:  LPWSTR,
    nShowCmd:  c_int    
) ->  c_int
{
    unsafe {
        return wWinMain(
            hInstance,
            hPrevInstance,
            lpCmdLine,
            nShowCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalAlloc(
    uFlags:  UINT,
    dwBytes:  SIZE_T    
) ->  HGLOBAL
{
    unsafe {
        return GlobalAlloc(
            uFlags,
            dwBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalReAlloc(
    hMem:  HGLOBAL,
    dwBytes:  SIZE_T,
    uFlags:  UINT    
) ->  HGLOBAL
{
    unsafe {
        return GlobalReAlloc(
            hMem,
            dwBytes,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalSize(
    hMem:  HGLOBAL    
) ->  SIZE_T
{
    unsafe {
        return GlobalSize(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalUnlock(
    hMem:  HGLOBAL    
) ->  BOOL
{
    unsafe {
        return GlobalUnlock(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalLock(
    hMem:  HGLOBAL    
) ->  LPVOID
{
    unsafe {
        return GlobalLock(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalFlags(
    hMem:  HGLOBAL    
) ->  UINT
{
    unsafe {
        return GlobalFlags(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalHandle(
    pMem:  LPCVOID    
) ->  HGLOBAL
{
    unsafe {
        return GlobalHandle(
            pMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalFree(
    hMem:  HGLOBAL    
) ->  HGLOBAL
{
    unsafe {
        return GlobalFree(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalCompact(
    dwMinFree:  DWORD    
) ->  SIZE_T
{
    unsafe {
        return GlobalCompact(
            dwMinFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalFix(
    hMem:  HGLOBAL    
)
{
    unsafe {
        return GlobalFix(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalUnfix(
    hMem:  HGLOBAL    
)
{
    unsafe {
        return GlobalUnfix(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalWire(
    hMem:  HGLOBAL    
) ->  LPVOID
{
    unsafe {
        return GlobalWire(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalUnWire(
    hMem:  HGLOBAL    
) ->  BOOL
{
    unsafe {
        return GlobalUnWire(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalMemoryStatus(
    lpBuffer:  LPMEMORYSTATUS    
)
{
    unsafe {
        return GlobalMemoryStatus(
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalAlloc(
    uFlags:  UINT,
    uBytes:  SIZE_T    
) ->  HLOCAL
{
    unsafe {
        return LocalAlloc(
            uFlags,
            uBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalReAlloc(
    hMem:  HLOCAL,
    uBytes:  SIZE_T,
    uFlags:  UINT    
) ->  HLOCAL
{
    unsafe {
        return LocalReAlloc(
            hMem,
            uBytes,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalLock(
    hMem:  HLOCAL    
) ->  LPVOID
{
    unsafe {
        return LocalLock(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalHandle(
    pMem:  LPCVOID    
) ->  HLOCAL
{
    unsafe {
        return LocalHandle(
            pMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalUnlock(
    hMem:  HLOCAL    
) ->  BOOL
{
    unsafe {
        return LocalUnlock(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalSize(
    hMem:  HLOCAL    
) ->  SIZE_T
{
    unsafe {
        return LocalSize(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalFlags(
    hMem:  HLOCAL    
) ->  UINT
{
    unsafe {
        return LocalFlags(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalFree(
    hMem:  HLOCAL    
) ->  HLOCAL
{
    unsafe {
        return LocalFree(
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalShrink(
    hMem:  HLOCAL,
    cbNewSize:  UINT    
) ->  SIZE_T
{
    unsafe {
        return LocalShrink(
            hMem,
            cbNewSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalCompact(
    uMinFree:  UINT    
) ->  SIZE_T
{
    unsafe {
        return LocalCompact(
            uMinFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetBinaryTypeA(
    lpApplicationName:  LPCSTR,
    lpBinaryType:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetBinaryTypeA(
            lpApplicationName,
            lpBinaryType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetBinaryTypeW(
    lpApplicationName:  LPCWSTR,
    lpBinaryType:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetBinaryTypeW(
            lpApplicationName,
            lpBinaryType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetShortPathNameA(
    lpszLongPath:  LPCSTR,
    lpszShortPath:  LPSTR,
    cchBuffer:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetShortPathNameA(
            lpszLongPath,
            lpszShortPath,
            cchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLongPathNameTransactedA(
    lpszShortPath:  LPCSTR,
    lpszLongPath:  LPSTR,
    cchBuffer:  DWORD,
    hTransaction:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetLongPathNameTransactedA(
            lpszShortPath,
            lpszLongPath,
            cchBuffer,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLongPathNameTransactedW(
    lpszShortPath:  LPCWSTR,
    lpszLongPath:  LPWSTR,
    cchBuffer:  DWORD,
    hTransaction:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetLongPathNameTransactedW(
            lpszShortPath,
            lpszLongPath,
            cchBuffer,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessAffinityMask(
    hProcess:  HANDLE,
    lpProcessAffinityMask:  PDWORD_PTR,
    lpSystemAffinityMask:  PDWORD_PTR    
) ->  BOOL
{
    unsafe {
        return GetProcessAffinityMask(
            hProcess,
            lpProcessAffinityMask,
            lpSystemAffinityMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessAffinityMask(
    hProcess:  HANDLE,
    dwProcessAffinityMask:  DWORD_PTR    
) ->  BOOL
{
    unsafe {
        return SetProcessAffinityMask(
            hProcess,
            dwProcessAffinityMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessIoCounters(
    hProcess:  HANDLE,
    lpIoCounters:  PIO_COUNTERS    
) ->  BOOL
{
    unsafe {
        return GetProcessIoCounters(
            hProcess,
            lpIoCounters
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessWorkingSetSize(
    hProcess:  HANDLE,
    lpMinimumWorkingSetSize:  PSIZE_T,
    lpMaximumWorkingSetSize:  PSIZE_T    
) ->  BOOL
{
    unsafe {
        return GetProcessWorkingSetSize(
            hProcess,
            lpMinimumWorkingSetSize,
            lpMaximumWorkingSetSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessWorkingSetSize(
    hProcess:  HANDLE,
    dwMinimumWorkingSetSize:  SIZE_T,
    dwMaximumWorkingSetSize:  SIZE_T    
) ->  BOOL
{
    unsafe {
        return SetProcessWorkingSetSize(
            hProcess,
            dwMinimumWorkingSetSize,
            dwMaximumWorkingSetSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FatalExit(
    ExitCode:  c_int    
)
{
    unsafe {
        return FatalExit(
            ExitCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEnvironmentStringsA(
    NewEnvironment:  LPCH    
) ->  BOOL
{
    unsafe {
        return SetEnvironmentStringsA(
            NewEnvironment
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SwitchToFiber(
    lpFiber:  LPVOID    
)
{
    unsafe {
        return SwitchToFiber(
            lpFiber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteFiber(
    lpFiber:  LPVOID    
)
{
    unsafe {
        return DeleteFiber(
            lpFiber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConvertFiberToThread(
    
) ->  BOOL
{
    unsafe {
        return ConvertFiberToThread(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFiberEx(
    dwStackCommitSize:  SIZE_T,
    dwStackReserveSize:  SIZE_T,
    dwFlags:  DWORD,
    lpStartAddress:  LPFIBER_START_ROUTINE,
    lpParameter:  LPVOID    
) ->  LPVOID
{
    unsafe {
        return CreateFiberEx(
            dwStackCommitSize,
            dwStackReserveSize,
            dwFlags,
            lpStartAddress,
            lpParameter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConvertThreadToFiberEx(
    lpParameter:  LPVOID,
    dwFlags:  DWORD    
) ->  LPVOID
{
    unsafe {
        return ConvertThreadToFiberEx(
            lpParameter,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFiber(
    dwStackSize:  SIZE_T,
    lpStartAddress:  LPFIBER_START_ROUTINE,
    lpParameter:  LPVOID    
) ->  LPVOID
{
    unsafe {
        return CreateFiber(
            dwStackSize,
            lpStartAddress,
            lpParameter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConvertThreadToFiber(
    lpParameter:  LPVOID    
) ->  LPVOID
{
    unsafe {
        return ConvertThreadToFiber(
            lpParameter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateUmsCompletionList(
    UmsCompletionList: *mut PUMS_COMPLETION_LIST    
) ->  BOOL
{
    unsafe {
        return CreateUmsCompletionList(
            UmsCompletionList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DequeueUmsCompletionListItems(
    UmsCompletionList:  PUMS_COMPLETION_LIST,
    WaitTimeOut:  DWORD,
    UmsThreadList: *mut PUMS_CONTEXT    
) ->  BOOL
{
    unsafe {
        return DequeueUmsCompletionListItems(
            UmsCompletionList,
            WaitTimeOut,
            UmsThreadList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUmsCompletionListEvent(
    UmsCompletionList:  PUMS_COMPLETION_LIST,
    UmsCompletionEvent:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return GetUmsCompletionListEvent(
            UmsCompletionList,
            UmsCompletionEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExecuteUmsThread(
    UmsThread:  PUMS_CONTEXT    
) ->  BOOL
{
    unsafe {
        return ExecuteUmsThread(
            UmsThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UmsThreadYield(
    SchedulerParam:  PVOID    
) ->  BOOL
{
    unsafe {
        return UmsThreadYield(
            SchedulerParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteUmsCompletionList(
    UmsCompletionList:  PUMS_COMPLETION_LIST    
) ->  BOOL
{
    unsafe {
        return DeleteUmsCompletionList(
            UmsCompletionList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentUmsThread(
    
) ->  PUMS_CONTEXT
{
    unsafe {
        return GetCurrentUmsThread(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNextUmsListItem(
    UmsContext:  PUMS_CONTEXT    
) ->  PUMS_CONTEXT
{
    unsafe {
        return GetNextUmsListItem(
            UmsContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryUmsThreadInformation(
    UmsThread:  PUMS_CONTEXT,
    UmsThreadInfoClass:  UMS_THREAD_INFO_CLASS,
    UmsThreadInformation:  PVOID,
    UmsThreadInformationLength:  ULONG,
    ReturnLength:  PULONG    
) ->  BOOL
{
    unsafe {
        return QueryUmsThreadInformation(
            UmsThread,
            UmsThreadInfoClass,
            UmsThreadInformation,
            UmsThreadInformationLength,
            ReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUmsThreadInformation(
    UmsThread:  PUMS_CONTEXT,
    UmsThreadInfoClass:  UMS_THREAD_INFO_CLASS,
    UmsThreadInformation:  PVOID,
    UmsThreadInformationLength:  ULONG    
) ->  BOOL
{
    unsafe {
        return SetUmsThreadInformation(
            UmsThread,
            UmsThreadInfoClass,
            UmsThreadInformation,
            UmsThreadInformationLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteUmsThreadContext(
    UmsThread:  PUMS_CONTEXT    
) ->  BOOL
{
    unsafe {
        return DeleteUmsThreadContext(
            UmsThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateUmsThreadContext(
    lpUmsThread: *mut PUMS_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CreateUmsThreadContext(
            lpUmsThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnterUmsSchedulingMode(
    SchedulerStartupInfo:  PUMS_SCHEDULER_STARTUP_INFO    
) ->  BOOL
{
    unsafe {
        return EnterUmsSchedulingMode(
            SchedulerStartupInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUmsSystemThreadInformation(
    ThreadHandle:  HANDLE,
    SystemThreadInfo:  PUMS_SYSTEM_THREAD_INFORMATION    
) ->  BOOL
{
    unsafe {
        return GetUmsSystemThreadInformation(
            ThreadHandle,
            SystemThreadInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadAffinityMask(
    hThread:  HANDLE,
    dwThreadAffinityMask:  DWORD_PTR    
) ->  DWORD_PTR
{
    unsafe {
        return SetThreadAffinityMask(
            hThread,
            dwThreadAffinityMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessDEPPolicy(
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetProcessDEPPolicy(
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessDEPPolicy(
    hProcess:  HANDLE,
    lpFlags:  LPDWORD,
    lpPermanent:  PBOOL    
) ->  BOOL
{
    unsafe {
        return GetProcessDEPPolicy(
            hProcess,
            lpFlags,
            lpPermanent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RequestWakeupLatency(
    latency:  LATENCY_TIME    
) ->  BOOL
{
    unsafe {
        return RequestWakeupLatency(
            latency
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsSystemResumeAutomatic(
    
) ->  BOOL
{
    unsafe {
        return IsSystemResumeAutomatic(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadSelectorEntry(
    hThread:  HANDLE,
    dwSelector:  DWORD,
    lpSelectorEntry:  LPLDT_ENTRY    
) ->  BOOL
{
    unsafe {
        return GetThreadSelectorEntry(
            hThread,
            dwSelector,
            lpSelectorEntry
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadExecutionState(
    esFlags:  EXECUTION_STATE    
) ->  EXECUTION_STATE
{
    unsafe {
        return SetThreadExecutionState(
            esFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PowerCreateRequest(
    Context:  PREASON_CONTEXT    
) ->  HANDLE
{
    unsafe {
        return PowerCreateRequest(
            Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PowerSetRequest(
    PowerRequest:  HANDLE,
    RequestType:  POWER_REQUEST_TYPE    
) ->  BOOL
{
    unsafe {
        return PowerSetRequest(
            PowerRequest,
            RequestType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PowerClearRequest(
    PowerRequest:  HANDLE,
    RequestType:  POWER_REQUEST_TYPE    
) ->  BOOL
{
    unsafe {
        return PowerClearRequest(
            PowerRequest,
            RequestType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileCompletionNotificationModes(
    FileHandle:  HANDLE,
    Flags:  UCHAR    
) ->  BOOL
{
    unsafe {
        return SetFileCompletionNotificationModes(
            FileHandle,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Wow64GetThreadSelectorEntry(
    hThread:  HANDLE,
    dwSelector:  DWORD,
    lpSelectorEntry:  PWOW64_LDT_ENTRY    
) ->  BOOL
{
    unsafe {
        return Wow64GetThreadSelectorEntry(
            hThread,
            dwSelector,
            lpSelectorEntry
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DebugSetProcessKillOnExit(
    KillOnExit:  BOOL    
) ->  BOOL
{
    unsafe {
        return DebugSetProcessKillOnExit(
            KillOnExit
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DebugBreakProcess(
    Process:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DebugBreakProcess(
            Process
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PulseEvent(
    hEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return PulseEvent(
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalDeleteAtom(
    nAtom:  ATOM    
) ->  ATOM
{
    unsafe {
        return GlobalDeleteAtom(
            nAtom
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitAtomTable(
    nSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return InitAtomTable(
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteAtom(
    nAtom:  ATOM    
) ->  ATOM
{
    unsafe {
        return DeleteAtom(
            nAtom
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetHandleCount(
    uNumber:  UINT    
) ->  UINT
{
    unsafe {
        return SetHandleCount(
            uNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RequestDeviceWakeup(
    hDevice:  HANDLE    
) ->  BOOL
{
    unsafe {
        return RequestDeviceWakeup(
            hDevice
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelDeviceWakeupRequest(
    hDevice:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CancelDeviceWakeupRequest(
            hDevice
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDevicePowerState(
    hDevice:  HANDLE,
    pfOn: *mut BOOL    
) ->  BOOL
{
    unsafe {
        return GetDevicePowerState(
            hDevice,
            pfOn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMessageWaitingIndicator(
    hMsgIndicator:  HANDLE,
    ulMsgCount:  ULONG    
) ->  BOOL
{
    unsafe {
        return SetMessageWaitingIndicator(
            hMsgIndicator,
            ulMsgCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileShortNameA(
    hFile:  HANDLE,
    lpShortName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetFileShortNameA(
            hFile,
            lpShortName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileShortNameW(
    hFile:  HANDLE,
    lpShortName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetFileShortNameW(
            hFile,
            lpShortName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadModule(
    lpModuleName:  LPCSTR,
    lpParameterBlock:  LPVOID    
) ->  DWORD
{
    unsafe {
        return LoadModule(
            lpModuleName,
            lpParameterBlock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WinExec(
    lpCmdLine:  LPCSTR,
    uCmdShow:  UINT    
) ->  UINT
{
    unsafe {
        return WinExec(
            lpCmdLine,
            uCmdShow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClearCommBreak(
    hFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return ClearCommBreak(
            hFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClearCommError(
    hFile:  HANDLE,
    lpErrors:  LPDWORD,
    lpStat:  LPCOMSTAT    
) ->  BOOL
{
    unsafe {
        return ClearCommError(
            hFile,
            lpErrors,
            lpStat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetupComm(
    hFile:  HANDLE,
    dwInQueue:  DWORD,
    dwOutQueue:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetupComm(
            hFile,
            dwInQueue,
            dwOutQueue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EscapeCommFunction(
    hFile:  HANDLE,
    dwFunc:  DWORD    
) ->  BOOL
{
    unsafe {
        return EscapeCommFunction(
            hFile,
            dwFunc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommConfig(
    hCommDev:  HANDLE,
    lpCC:  LPCOMMCONFIG,
    lpdwSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetCommConfig(
            hCommDev,
            lpCC,
            lpdwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommMask(
    hFile:  HANDLE,
    lpEvtMask:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetCommMask(
            hFile,
            lpEvtMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommProperties(
    hFile:  HANDLE,
    lpCommProp:  LPCOMMPROP    
) ->  BOOL
{
    unsafe {
        return GetCommProperties(
            hFile,
            lpCommProp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommModemStatus(
    hFile:  HANDLE,
    lpModemStat:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetCommModemStatus(
            hFile,
            lpModemStat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommState(
    hFile:  HANDLE,
    lpDCB:  LPDCB    
) ->  BOOL
{
    unsafe {
        return GetCommState(
            hFile,
            lpDCB
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommTimeouts(
    hFile:  HANDLE,
    lpCommTimeouts:  LPCOMMTIMEOUTS    
) ->  BOOL
{
    unsafe {
        return GetCommTimeouts(
            hFile,
            lpCommTimeouts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PurgeComm(
    hFile:  HANDLE,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return PurgeComm(
            hFile,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCommBreak(
    hFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetCommBreak(
            hFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCommConfig(
    hCommDev:  HANDLE,
    lpCC:  LPCOMMCONFIG,
    dwSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetCommConfig(
            hCommDev,
            lpCC,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCommMask(
    hFile:  HANDLE,
    dwEvtMask:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetCommMask(
            hFile,
            dwEvtMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCommState(
    hFile:  HANDLE,
    lpDCB:  LPDCB    
) ->  BOOL
{
    unsafe {
        return SetCommState(
            hFile,
            lpDCB
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCommTimeouts(
    hFile:  HANDLE,
    lpCommTimeouts:  LPCOMMTIMEOUTS    
) ->  BOOL
{
    unsafe {
        return SetCommTimeouts(
            hFile,
            lpCommTimeouts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TransmitCommChar(
    hFile:  HANDLE,
    cChar:  c_char    
) ->  BOOL
{
    unsafe {
        return TransmitCommChar(
            hFile,
            cChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitCommEvent(
    hFile:  HANDLE,
    lpEvtMask:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return WaitCommEvent(
            hFile,
            lpEvtMask,
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenCommPort(
    uPortNumber:  ULONG,
    dwDesiredAccess:  DWORD,
    dwFlagsAndAttributes:  DWORD    
) ->  HANDLE
{
    unsafe {
        return OpenCommPort(
            uPortNumber,
            dwDesiredAccess,
            dwFlagsAndAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCommPorts(
    lpPortNumbers:  PULONG,
    uPortNumbersCount:  ULONG,
    puPortNumbersFound:  PULONG    
) ->  ULONG
{
    unsafe {
        return GetCommPorts(
            lpPortNumbers,
            uPortNumbersCount,
            puPortNumbersFound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTapePosition(
    hDevice:  HANDLE,
    dwPositionMethod:  DWORD,
    dwPartition:  DWORD,
    dwOffsetLow:  DWORD,
    dwOffsetHigh:  DWORD,
    bImmediate:  BOOL    
) ->  DWORD
{
    unsafe {
        return SetTapePosition(
            hDevice,
            dwPositionMethod,
            dwPartition,
            dwOffsetLow,
            dwOffsetHigh,
            bImmediate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTapePosition(
    hDevice:  HANDLE,
    dwPositionType:  DWORD,
    lpdwPartition:  LPDWORD,
    lpdwOffsetLow:  LPDWORD,
    lpdwOffsetHigh:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetTapePosition(
            hDevice,
            dwPositionType,
            lpdwPartition,
            lpdwOffsetLow,
            lpdwOffsetHigh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrepareTape(
    hDevice:  HANDLE,
    dwOperation:  DWORD,
    bImmediate:  BOOL    
) ->  DWORD
{
    unsafe {
        return PrepareTape(
            hDevice,
            dwOperation,
            bImmediate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EraseTape(
    hDevice:  HANDLE,
    dwEraseType:  DWORD,
    bImmediate:  BOOL    
) ->  DWORD
{
    unsafe {
        return EraseTape(
            hDevice,
            dwEraseType,
            bImmediate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateTapePartition(
    hDevice:  HANDLE,
    dwPartitionMethod:  DWORD,
    dwCount:  DWORD,
    dwSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return CreateTapePartition(
            hDevice,
            dwPartitionMethod,
            dwCount,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteTapemark(
    hDevice:  HANDLE,
    dwTapemarkType:  DWORD,
    dwTapemarkCount:  DWORD,
    bImmediate:  BOOL    
) ->  DWORD
{
    unsafe {
        return WriteTapemark(
            hDevice,
            dwTapemarkType,
            dwTapemarkCount,
            bImmediate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTapeStatus(
    hDevice:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetTapeStatus(
            hDevice
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTapeParameters(
    hDevice:  HANDLE,
    dwOperation:  DWORD,
    lpdwSize:  LPDWORD,
    lpTapeInformation:  LPVOID    
) ->  DWORD
{
    unsafe {
        return GetTapeParameters(
            hDevice,
            dwOperation,
            lpdwSize,
            lpTapeInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTapeParameters(
    hDevice:  HANDLE,
    dwOperation:  DWORD,
    lpTapeInformation:  LPVOID    
) ->  DWORD
{
    unsafe {
        return SetTapeParameters(
            hDevice,
            dwOperation,
            lpTapeInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MulDiv(
    nNumber:  c_int,
    nNumerator:  c_int,
    nDenominator:  c_int    
) ->  c_int
{
    unsafe {
        return MulDiv(
            nNumber,
            nNumerator,
            nDenominator
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemDEPPolicy(
    
) ->  DEP_SYSTEM_POLICY_TYPE
{
    unsafe {
        return GetSystemDEPPolicy(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemRegistryQuota(
    pdwQuotaAllowed:  PDWORD,
    pdwQuotaUsed:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetSystemRegistryQuota(
            pdwQuotaAllowed,
            pdwQuotaUsed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FileTimeToDosDateTime(
    lpFileTime: *const FILETIME,
    lpFatDate:  LPWORD,
    lpFatTime:  LPWORD    
) ->  BOOL
{
    unsafe {
        return FileTimeToDosDateTime(
            lpFileTime,
            lpFatDate,
            lpFatTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DosDateTimeToFileTime(
    wFatDate:  WORD,
    wFatTime:  WORD,
    lpFileTime:  LPFILETIME    
) ->  BOOL
{
    unsafe {
        return DosDateTimeToFileTime(
            wFatDate,
            wFatTime,
            lpFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FormatMessageA(
    dwFlags:  DWORD,
    lpSource:  LPCVOID,
    dwMessageId:  DWORD,
    dwLanguageId:  DWORD,
    lpBuffer:  LPSTR,
    nSize:  DWORD,
    Arguments: *mut va_list    
) ->  DWORD
{
    unsafe {
        return FormatMessageA(
            dwFlags,
            lpSource,
            dwMessageId,
            dwLanguageId,
            lpBuffer,
            nSize,
            Arguments
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FormatMessageW(
    dwFlags:  DWORD,
    lpSource:  LPCVOID,
    dwMessageId:  DWORD,
    dwLanguageId:  DWORD,
    lpBuffer:  LPWSTR,
    nSize:  DWORD,
    Arguments: *mut va_list    
) ->  DWORD
{
    unsafe {
        return FormatMessageW(
            dwFlags,
            lpSource,
            dwMessageId,
            dwLanguageId,
            lpBuffer,
            nSize,
            Arguments
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMailslotA(
    lpName:  LPCSTR,
    nMaxMessageSize:  DWORD,
    lReadTimeout:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  HANDLE
{
    unsafe {
        return CreateMailslotA(
            lpName,
            nMaxMessageSize,
            lReadTimeout,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMailslotW(
    lpName:  LPCWSTR,
    nMaxMessageSize:  DWORD,
    lReadTimeout:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  HANDLE
{
    unsafe {
        return CreateMailslotW(
            lpName,
            nMaxMessageSize,
            lReadTimeout,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMailslotInfo(
    hMailslot:  HANDLE,
    lpMaxMessageSize:  LPDWORD,
    lpNextSize:  LPDWORD,
    lpMessageCount:  LPDWORD,
    lpReadTimeout:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetMailslotInfo(
            hMailslot,
            lpMaxMessageSize,
            lpNextSize,
            lpMessageCount,
            lpReadTimeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMailslotInfo(
    hMailslot:  HANDLE,
    lReadTimeout:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetMailslotInfo(
            hMailslot,
            lReadTimeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EncryptFileA(
    lpFileName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return EncryptFileA(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EncryptFileW(
    lpFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return EncryptFileW(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DecryptFileA(
    lpFileName:  LPCSTR,
    dwReserved:  DWORD    
) ->  BOOL
{
    unsafe {
        return DecryptFileA(
            lpFileName,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DecryptFileW(
    lpFileName:  LPCWSTR,
    dwReserved:  DWORD    
) ->  BOOL
{
    unsafe {
        return DecryptFileW(
            lpFileName,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FileEncryptionStatusA(
    lpFileName:  LPCSTR,
    lpStatus:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return FileEncryptionStatusA(
            lpFileName,
            lpStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FileEncryptionStatusW(
    lpFileName:  LPCWSTR,
    lpStatus:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return FileEncryptionStatusW(
            lpFileName,
            lpStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenEncryptedFileRawA(
    lpFileName:  LPCSTR,
    ulFlags:  ULONG,
    pvContext: *mut PVOID    
) ->  DWORD
{
    unsafe {
        return OpenEncryptedFileRawA(
            lpFileName,
            ulFlags,
            pvContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenEncryptedFileRawW(
    lpFileName:  LPCWSTR,
    ulFlags:  ULONG,
    pvContext: *mut PVOID    
) ->  DWORD
{
    unsafe {
        return OpenEncryptedFileRawW(
            lpFileName,
            ulFlags,
            pvContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadEncryptedFileRaw(
    pfExportCallback:  PFE_EXPORT_FUNC,
    pvCallbackContext:  PVOID,
    pvContext:  PVOID    
) ->  DWORD
{
    unsafe {
        return ReadEncryptedFileRaw(
            pfExportCallback,
            pvCallbackContext,
            pvContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteEncryptedFileRaw(
    pfImportCallback:  PFE_IMPORT_FUNC,
    pvCallbackContext:  PVOID,
    pvContext:  PVOID    
) ->  DWORD
{
    unsafe {
        return WriteEncryptedFileRaw(
            pfImportCallback,
            pvCallbackContext,
            pvContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseEncryptedFileRaw(
    pvContext:  PVOID    
)
{
    unsafe {
        return CloseEncryptedFileRaw(
            pvContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcmpA(
    lpString1:  LPCSTR,
    lpString2:  LPCSTR    
) ->  c_int
{
    unsafe {
        return lstrcmpA(
            lpString1,
            lpString2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcmpW(
    lpString1:  LPCWSTR,
    lpString2:  LPCWSTR    
) ->  c_int
{
    unsafe {
        return lstrcmpW(
            lpString1,
            lpString2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcmpiA(
    lpString1:  LPCSTR,
    lpString2:  LPCSTR    
) ->  c_int
{
    unsafe {
        return lstrcmpiA(
            lpString1,
            lpString2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcmpiW(
    lpString1:  LPCWSTR,
    lpString2:  LPCWSTR    
) ->  c_int
{
    unsafe {
        return lstrcmpiW(
            lpString1,
            lpString2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcpynA(
    lpString1:  LPSTR,
    lpString2:  LPCSTR,
    iMaxLength:  c_int    
) ->  LPSTR
{
    unsafe {
        return lstrcpynA(
            lpString1,
            lpString2,
            iMaxLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcpynW(
    lpString1:  LPWSTR,
    lpString2:  LPCWSTR,
    iMaxLength:  c_int    
) ->  LPWSTR
{
    unsafe {
        return lstrcpynW(
            lpString1,
            lpString2,
            iMaxLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcpyA(
    lpString1:  LPSTR,
    lpString2:  LPCSTR    
) ->  LPSTR
{
    unsafe {
        return lstrcpyA(
            lpString1,
            lpString2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcpyW(
    lpString1:  LPWSTR,
    lpString2:  LPCWSTR    
) ->  LPWSTR
{
    unsafe {
        return lstrcpyW(
            lpString1,
            lpString2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcatA(
    lpString1:  LPSTR,
    lpString2:  LPCSTR    
) ->  LPSTR
{
    unsafe {
        return lstrcatA(
            lpString1,
            lpString2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrcatW(
    lpString1:  LPWSTR,
    lpString2:  LPCWSTR    
) ->  LPWSTR
{
    unsafe {
        return lstrcatW(
            lpString1,
            lpString2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrlenA(
    lpString:  LPCSTR    
) ->  c_int
{
    unsafe {
        return lstrlenA(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lstrlenW(
    lpString:  LPCWSTR    
) ->  c_int
{
    unsafe {
        return lstrlenW(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenFile(
    lpFileName:  LPCSTR,
    lpReOpenBuff:  LPOFSTRUCT,
    uStyle:  UINT    
) ->  HFILE
{
    unsafe {
        return OpenFile(
            lpFileName,
            lpReOpenBuff,
            uStyle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lopen(
    lpPathName:  LPCSTR,
    iReadWrite:  c_int    
) ->  HFILE
{
    unsafe {
        return _lopen(
            lpPathName,
            iReadWrite
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lcreat(
    lpPathName:  LPCSTR,
    iAttribute:  c_int    
) ->  HFILE
{
    unsafe {
        return _lcreat(
            lpPathName,
            iAttribute
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lread(
    hFile:  HFILE,
    lpBuffer:  LPVOID,
    uBytes:  UINT    
) ->  UINT
{
    unsafe {
        return _lread(
            hFile,
            lpBuffer,
            uBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lwrite(
    hFile:  HFILE,
    lpBuffer:  LPCCH,
    uBytes:  UINT    
) ->  UINT
{
    unsafe {
        return _lwrite(
            hFile,
            lpBuffer,
            uBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__hread(
    hFile:  HFILE,
    lpBuffer:  LPVOID,
    lBytes:  c_long    
) ->  c_long
{
    unsafe {
        return _hread(
            hFile,
            lpBuffer,
            lBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__hwrite(
    hFile:  HFILE,
    lpBuffer:  LPCCH,
    lBytes:  c_long    
) ->  c_long
{
    unsafe {
        return _hwrite(
            hFile,
            lpBuffer,
            lBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lclose(
    hFile:  HFILE    
) ->  HFILE
{
    unsafe {
        return _lclose(
            hFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__llseek(
    hFile:  HFILE,
    lOffset:  LONG,
    iOrigin:  c_int    
) ->  LONG
{
    unsafe {
        return _llseek(
            hFile,
            lOffset,
            iOrigin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsTextUnicode(
    lpv: *const c_void,
    iSize:  c_int,
    lpiResult:  LPINT    
) ->  BOOL
{
    unsafe {
        return IsTextUnicode(
            lpv,
            iSize,
            lpiResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BackupRead(
    hFile:  HANDLE,
    lpBuffer:  LPBYTE,
    nNumberOfBytesToRead:  DWORD,
    lpNumberOfBytesRead:  LPDWORD,
    bAbort:  BOOL,
    bProcessSecurity:  BOOL,
    lpContext: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return BackupRead(
            hFile,
            lpBuffer,
            nNumberOfBytesToRead,
            lpNumberOfBytesRead,
            bAbort,
            bProcessSecurity,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BackupSeek(
    hFile:  HANDLE,
    dwLowBytesToSeek:  DWORD,
    dwHighBytesToSeek:  DWORD,
    lpdwLowByteSeeked:  LPDWORD,
    lpdwHighByteSeeked:  LPDWORD,
    lpContext: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return BackupSeek(
            hFile,
            dwLowBytesToSeek,
            dwHighBytesToSeek,
            lpdwLowByteSeeked,
            lpdwHighByteSeeked,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BackupWrite(
    hFile:  HANDLE,
    lpBuffer:  LPBYTE,
    nNumberOfBytesToWrite:  DWORD,
    lpNumberOfBytesWritten:  LPDWORD,
    bAbort:  BOOL,
    bProcessSecurity:  BOOL,
    lpContext: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return BackupWrite(
            hFile,
            lpBuffer,
            nNumberOfBytesToWrite,
            lpNumberOfBytesWritten,
            bAbort,
            bProcessSecurity,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenMutexA(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenMutexA(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSemaphoreA(
    lpSemaphoreAttributes:  LPSECURITY_ATTRIBUTES,
    lInitialCount:  LONG,
    lMaximumCount:  LONG,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return CreateSemaphoreA(
            lpSemaphoreAttributes,
            lInitialCount,
            lMaximumCount,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenSemaphoreA(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenSemaphoreA(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWaitableTimerA(
    lpTimerAttributes:  LPSECURITY_ATTRIBUTES,
    bManualReset:  BOOL,
    lpTimerName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return CreateWaitableTimerA(
            lpTimerAttributes,
            bManualReset,
            lpTimerName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenWaitableTimerA(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpTimerName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenWaitableTimerA(
            dwDesiredAccess,
            bInheritHandle,
            lpTimerName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSemaphoreExA(
    lpSemaphoreAttributes:  LPSECURITY_ATTRIBUTES,
    lInitialCount:  LONG,
    lMaximumCount:  LONG,
    lpName:  LPCSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateSemaphoreExA(
            lpSemaphoreAttributes,
            lInitialCount,
            lMaximumCount,
            lpName,
            dwFlags,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWaitableTimerExA(
    lpTimerAttributes:  LPSECURITY_ATTRIBUTES,
    lpTimerName:  LPCSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateWaitableTimerExA(
            lpTimerAttributes,
            lpTimerName,
            dwFlags,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileMappingA(
    hFile:  HANDLE,
    lpFileMappingAttributes:  LPSECURITY_ATTRIBUTES,
    flProtect:  DWORD,
    dwMaximumSizeHigh:  DWORD,
    dwMaximumSizeLow:  DWORD,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return CreateFileMappingA(
            hFile,
            lpFileMappingAttributes,
            flProtect,
            dwMaximumSizeHigh,
            dwMaximumSizeLow,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileMappingNumaA(
    hFile:  HANDLE,
    lpFileMappingAttributes:  LPSECURITY_ATTRIBUTES,
    flProtect:  DWORD,
    dwMaximumSizeHigh:  DWORD,
    dwMaximumSizeLow:  DWORD,
    lpName:  LPCSTR,
    nndPreferred:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CreateFileMappingNumaA(
            hFile,
            lpFileMappingAttributes,
            flProtect,
            dwMaximumSizeHigh,
            dwMaximumSizeLow,
            lpName,
            nndPreferred
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenFileMappingA(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenFileMappingA(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLogicalDriveStringsA(
    nBufferLength:  DWORD,
    lpBuffer:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetLogicalDriveStringsA(
            nBufferLength,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadPackagedLibrary(
    lpwLibFileName:  LPCWSTR,
    Reserved:  DWORD    
) ->  HMODULE
{
    unsafe {
        return LoadPackagedLibrary(
            lpwLibFileName,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryFullProcessImageNameA(
    hProcess:  HANDLE,
    dwFlags:  DWORD,
    lpExeName:  LPSTR,
    lpdwSize:  PDWORD    
) ->  BOOL
{
    unsafe {
        return QueryFullProcessImageNameA(
            hProcess,
            dwFlags,
            lpExeName,
            lpdwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryFullProcessImageNameW(
    hProcess:  HANDLE,
    dwFlags:  DWORD,
    lpExeName:  LPWSTR,
    lpdwSize:  PDWORD    
) ->  BOOL
{
    unsafe {
        return QueryFullProcessImageNameW(
            hProcess,
            dwFlags,
            lpExeName,
            lpdwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStartupInfoA(
    lpStartupInfo:  LPSTARTUPINFOA    
)
{
    unsafe {
        return GetStartupInfoA(
            lpStartupInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFirmwareEnvironmentVariableA(
    lpName:  LPCSTR,
    lpGuid:  LPCSTR,
    pBuffer:  PVOID,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetFirmwareEnvironmentVariableA(
            lpName,
            lpGuid,
            pBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFirmwareEnvironmentVariableW(
    lpName:  LPCWSTR,
    lpGuid:  LPCWSTR,
    pBuffer:  PVOID,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetFirmwareEnvironmentVariableW(
            lpName,
            lpGuid,
            pBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFirmwareEnvironmentVariableExA(
    lpName:  LPCSTR,
    lpGuid:  LPCSTR,
    pBuffer:  PVOID,
    nSize:  DWORD,
    pdwAttribubutes:  PDWORD    
) ->  DWORD
{
    unsafe {
        return GetFirmwareEnvironmentVariableExA(
            lpName,
            lpGuid,
            pBuffer,
            nSize,
            pdwAttribubutes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFirmwareEnvironmentVariableExW(
    lpName:  LPCWSTR,
    lpGuid:  LPCWSTR,
    pBuffer:  PVOID,
    nSize:  DWORD,
    pdwAttribubutes:  PDWORD    
) ->  DWORD
{
    unsafe {
        return GetFirmwareEnvironmentVariableExW(
            lpName,
            lpGuid,
            pBuffer,
            nSize,
            pdwAttribubutes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFirmwareEnvironmentVariableA(
    lpName:  LPCSTR,
    lpGuid:  LPCSTR,
    pValue:  PVOID,
    nSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFirmwareEnvironmentVariableA(
            lpName,
            lpGuid,
            pValue,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFirmwareEnvironmentVariableW(
    lpName:  LPCWSTR,
    lpGuid:  LPCWSTR,
    pValue:  PVOID,
    nSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFirmwareEnvironmentVariableW(
            lpName,
            lpGuid,
            pValue,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFirmwareEnvironmentVariableExA(
    lpName:  LPCSTR,
    lpGuid:  LPCSTR,
    pValue:  PVOID,
    nSize:  DWORD,
    dwAttributes:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFirmwareEnvironmentVariableExA(
            lpName,
            lpGuid,
            pValue,
            nSize,
            dwAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFirmwareEnvironmentVariableExW(
    lpName:  LPCWSTR,
    lpGuid:  LPCWSTR,
    pValue:  PVOID,
    nSize:  DWORD,
    dwAttributes:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetFirmwareEnvironmentVariableExW(
            lpName,
            lpGuid,
            pValue,
            nSize,
            dwAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFirmwareType(
    FirmwareType:  PFIRMWARE_TYPE    
) ->  BOOL
{
    unsafe {
        return GetFirmwareType(
            FirmwareType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsNativeVhdBoot(
    NativeVhdBoot:  PBOOL    
) ->  BOOL
{
    unsafe {
        return IsNativeVhdBoot(
            NativeVhdBoot
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindResourceA(
    hModule:  HMODULE,
    lpName:  LPCSTR,
    lpType:  LPCSTR    
) ->  HRSRC
{
    unsafe {
        return FindResourceA(
            hModule,
            lpName,
            lpType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindResourceExA(
    hModule:  HMODULE,
    lpType:  LPCSTR,
    lpName:  LPCSTR,
    wLanguage:  WORD    
) ->  HRSRC
{
    unsafe {
        return FindResourceExA(
            hModule,
            lpType,
            lpName,
            wLanguage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceTypesA(
    hModule:  HMODULE,
    lpEnumFunc:  ENUMRESTYPEPROCA,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumResourceTypesA(
            hModule,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceTypesW(
    hModule:  HMODULE,
    lpEnumFunc:  ENUMRESTYPEPROCW,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumResourceTypesW(
            hModule,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceNamesA(
    hModule:  HMODULE,
    lpType:  LPCSTR,
    lpEnumFunc:  ENUMRESNAMEPROCA,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumResourceNamesA(
            hModule,
            lpType,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceLanguagesA(
    hModule:  HMODULE,
    lpType:  LPCSTR,
    lpName:  LPCSTR,
    lpEnumFunc:  ENUMRESLANGPROCA,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumResourceLanguagesA(
            hModule,
            lpType,
            lpName,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumResourceLanguagesW(
    hModule:  HMODULE,
    lpType:  LPCWSTR,
    lpName:  LPCWSTR,
    lpEnumFunc:  ENUMRESLANGPROCW,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumResourceLanguagesW(
            hModule,
            lpType,
            lpName,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BeginUpdateResourceA(
    pFileName:  LPCSTR,
    bDeleteExistingResources:  BOOL    
) ->  HANDLE
{
    unsafe {
        return BeginUpdateResourceA(
            pFileName,
            bDeleteExistingResources
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BeginUpdateResourceW(
    pFileName:  LPCWSTR,
    bDeleteExistingResources:  BOOL    
) ->  HANDLE
{
    unsafe {
        return BeginUpdateResourceW(
            pFileName,
            bDeleteExistingResources
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateResourceA(
    hUpdate:  HANDLE,
    lpType:  LPCSTR,
    lpName:  LPCSTR,
    wLanguage:  WORD,
    lpData:  LPVOID,
    cb:  DWORD    
) ->  BOOL
{
    unsafe {
        return UpdateResourceA(
            hUpdate,
            lpType,
            lpName,
            wLanguage,
            lpData,
            cb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateResourceW(
    hUpdate:  HANDLE,
    lpType:  LPCWSTR,
    lpName:  LPCWSTR,
    wLanguage:  WORD,
    lpData:  LPVOID,
    cb:  DWORD    
) ->  BOOL
{
    unsafe {
        return UpdateResourceW(
            hUpdate,
            lpType,
            lpName,
            wLanguage,
            lpData,
            cb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndUpdateResourceA(
    hUpdate:  HANDLE,
    fDiscard:  BOOL    
) ->  BOOL
{
    unsafe {
        return EndUpdateResourceA(
            hUpdate,
            fDiscard
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndUpdateResourceW(
    hUpdate:  HANDLE,
    fDiscard:  BOOL    
) ->  BOOL
{
    unsafe {
        return EndUpdateResourceW(
            hUpdate,
            fDiscard
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalAddAtomA(
    lpString:  LPCSTR    
) ->  ATOM
{
    unsafe {
        return GlobalAddAtomA(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalAddAtomW(
    lpString:  LPCWSTR    
) ->  ATOM
{
    unsafe {
        return GlobalAddAtomW(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalAddAtomExA(
    lpString:  LPCSTR,
    Flags:  DWORD    
) ->  ATOM
{
    unsafe {
        return GlobalAddAtomExA(
            lpString,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalAddAtomExW(
    lpString:  LPCWSTR,
    Flags:  DWORD    
) ->  ATOM
{
    unsafe {
        return GlobalAddAtomExW(
            lpString,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalFindAtomA(
    lpString:  LPCSTR    
) ->  ATOM
{
    unsafe {
        return GlobalFindAtomA(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalFindAtomW(
    lpString:  LPCWSTR    
) ->  ATOM
{
    unsafe {
        return GlobalFindAtomW(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalGetAtomNameA(
    nAtom:  ATOM,
    lpBuffer:  LPSTR,
    nSize:  c_int    
) ->  UINT
{
    unsafe {
        return GlobalGetAtomNameA(
            nAtom,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GlobalGetAtomNameW(
    nAtom:  ATOM,
    lpBuffer:  LPWSTR,
    nSize:  c_int    
) ->  UINT
{
    unsafe {
        return GlobalGetAtomNameW(
            nAtom,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAtomA(
    lpString:  LPCSTR    
) ->  ATOM
{
    unsafe {
        return AddAtomA(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddAtomW(
    lpString:  LPCWSTR    
) ->  ATOM
{
    unsafe {
        return AddAtomW(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindAtomA(
    lpString:  LPCSTR    
) ->  ATOM
{
    unsafe {
        return FindAtomA(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindAtomW(
    lpString:  LPCWSTR    
) ->  ATOM
{
    unsafe {
        return FindAtomW(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAtomNameA(
    nAtom:  ATOM,
    lpBuffer:  LPSTR,
    nSize:  c_int    
) ->  UINT
{
    unsafe {
        return GetAtomNameA(
            nAtom,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAtomNameW(
    nAtom:  ATOM,
    lpBuffer:  LPWSTR,
    nSize:  c_int    
) ->  UINT
{
    unsafe {
        return GetAtomNameW(
            nAtom,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProfileIntA(
    lpAppName:  LPCSTR,
    lpKeyName:  LPCSTR,
    nDefault:  INT    
) ->  UINT
{
    unsafe {
        return GetProfileIntA(
            lpAppName,
            lpKeyName,
            nDefault
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProfileIntW(
    lpAppName:  LPCWSTR,
    lpKeyName:  LPCWSTR,
    nDefault:  INT    
) ->  UINT
{
    unsafe {
        return GetProfileIntW(
            lpAppName,
            lpKeyName,
            nDefault
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProfileStringA(
    lpAppName:  LPCSTR,
    lpKeyName:  LPCSTR,
    lpDefault:  LPCSTR,
    lpReturnedString:  LPSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetProfileStringA(
            lpAppName,
            lpKeyName,
            lpDefault,
            lpReturnedString,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProfileStringW(
    lpAppName:  LPCWSTR,
    lpKeyName:  LPCWSTR,
    lpDefault:  LPCWSTR,
    lpReturnedString:  LPWSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetProfileStringW(
            lpAppName,
            lpKeyName,
            lpDefault,
            lpReturnedString,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteProfileStringA(
    lpAppName:  LPCSTR,
    lpKeyName:  LPCSTR,
    lpString:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return WriteProfileStringA(
            lpAppName,
            lpKeyName,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteProfileStringW(
    lpAppName:  LPCWSTR,
    lpKeyName:  LPCWSTR,
    lpString:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return WriteProfileStringW(
            lpAppName,
            lpKeyName,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProfileSectionA(
    lpAppName:  LPCSTR,
    lpReturnedString:  LPSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetProfileSectionA(
            lpAppName,
            lpReturnedString,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProfileSectionW(
    lpAppName:  LPCWSTR,
    lpReturnedString:  LPWSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetProfileSectionW(
            lpAppName,
            lpReturnedString,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteProfileSectionA(
    lpAppName:  LPCSTR,
    lpString:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return WriteProfileSectionA(
            lpAppName,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteProfileSectionW(
    lpAppName:  LPCWSTR,
    lpString:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return WriteProfileSectionW(
            lpAppName,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileIntA(
    lpAppName:  LPCSTR,
    lpKeyName:  LPCSTR,
    nDefault:  INT,
    lpFileName:  LPCSTR    
) ->  UINT
{
    unsafe {
        return GetPrivateProfileIntA(
            lpAppName,
            lpKeyName,
            nDefault,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileIntW(
    lpAppName:  LPCWSTR,
    lpKeyName:  LPCWSTR,
    nDefault:  INT,
    lpFileName:  LPCWSTR    
) ->  UINT
{
    unsafe {
        return GetPrivateProfileIntW(
            lpAppName,
            lpKeyName,
            nDefault,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileStringA(
    lpAppName:  LPCSTR,
    lpKeyName:  LPCSTR,
    lpDefault:  LPCSTR,
    lpReturnedString:  LPSTR,
    nSize:  DWORD,
    lpFileName:  LPCSTR    
) ->  DWORD
{
    unsafe {
        return GetPrivateProfileStringA(
            lpAppName,
            lpKeyName,
            lpDefault,
            lpReturnedString,
            nSize,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileStringW(
    lpAppName:  LPCWSTR,
    lpKeyName:  LPCWSTR,
    lpDefault:  LPCWSTR,
    lpReturnedString:  LPWSTR,
    nSize:  DWORD,
    lpFileName:  LPCWSTR    
) ->  DWORD
{
    unsafe {
        return GetPrivateProfileStringW(
            lpAppName,
            lpKeyName,
            lpDefault,
            lpReturnedString,
            nSize,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WritePrivateProfileStringA(
    lpAppName:  LPCSTR,
    lpKeyName:  LPCSTR,
    lpString:  LPCSTR,
    lpFileName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return WritePrivateProfileStringA(
            lpAppName,
            lpKeyName,
            lpString,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WritePrivateProfileStringW(
    lpAppName:  LPCWSTR,
    lpKeyName:  LPCWSTR,
    lpString:  LPCWSTR,
    lpFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return WritePrivateProfileStringW(
            lpAppName,
            lpKeyName,
            lpString,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileSectionA(
    lpAppName:  LPCSTR,
    lpReturnedString:  LPSTR,
    nSize:  DWORD,
    lpFileName:  LPCSTR    
) ->  DWORD
{
    unsafe {
        return GetPrivateProfileSectionA(
            lpAppName,
            lpReturnedString,
            nSize,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileSectionW(
    lpAppName:  LPCWSTR,
    lpReturnedString:  LPWSTR,
    nSize:  DWORD,
    lpFileName:  LPCWSTR    
) ->  DWORD
{
    unsafe {
        return GetPrivateProfileSectionW(
            lpAppName,
            lpReturnedString,
            nSize,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WritePrivateProfileSectionA(
    lpAppName:  LPCSTR,
    lpString:  LPCSTR,
    lpFileName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return WritePrivateProfileSectionA(
            lpAppName,
            lpString,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WritePrivateProfileSectionW(
    lpAppName:  LPCWSTR,
    lpString:  LPCWSTR,
    lpFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return WritePrivateProfileSectionW(
            lpAppName,
            lpString,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileSectionNamesA(
    lpszReturnBuffer:  LPSTR,
    nSize:  DWORD,
    lpFileName:  LPCSTR    
) ->  DWORD
{
    unsafe {
        return GetPrivateProfileSectionNamesA(
            lpszReturnBuffer,
            nSize,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileSectionNamesW(
    lpszReturnBuffer:  LPWSTR,
    nSize:  DWORD,
    lpFileName:  LPCWSTR    
) ->  DWORD
{
    unsafe {
        return GetPrivateProfileSectionNamesW(
            lpszReturnBuffer,
            nSize,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileStructA(
    lpszSection:  LPCSTR,
    lpszKey:  LPCSTR,
    lpStruct:  LPVOID,
    uSizeStruct:  UINT,
    szFile:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return GetPrivateProfileStructA(
            lpszSection,
            lpszKey,
            lpStruct,
            uSizeStruct,
            szFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrivateProfileStructW(
    lpszSection:  LPCWSTR,
    lpszKey:  LPCWSTR,
    lpStruct:  LPVOID,
    uSizeStruct:  UINT,
    szFile:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return GetPrivateProfileStructW(
            lpszSection,
            lpszKey,
            lpStruct,
            uSizeStruct,
            szFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WritePrivateProfileStructA(
    lpszSection:  LPCSTR,
    lpszKey:  LPCSTR,
    lpStruct:  LPVOID,
    uSizeStruct:  UINT,
    szFile:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return WritePrivateProfileStructA(
            lpszSection,
            lpszKey,
            lpStruct,
            uSizeStruct,
            szFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WritePrivateProfileStructW(
    lpszSection:  LPCWSTR,
    lpszKey:  LPCWSTR,
    lpStruct:  LPVOID,
    uSizeStruct:  UINT,
    szFile:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return WritePrivateProfileStructW(
            lpszSection,
            lpszKey,
            lpStruct,
            uSizeStruct,
            szFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Wow64EnableWow64FsRedirection(
    Wow64FsEnableRedirection:  BOOLEAN    
) ->  BOOLEAN
{
    unsafe {
        return Wow64EnableWow64FsRedirection(
            Wow64FsEnableRedirection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDllDirectoryA(
    lpPathName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetDllDirectoryA(
            lpPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDllDirectoryW(
    lpPathName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetDllDirectoryW(
            lpPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDllDirectoryA(
    nBufferLength:  DWORD,
    lpBuffer:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetDllDirectoryA(
            nBufferLength,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDllDirectoryW(
    nBufferLength:  DWORD,
    lpBuffer:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetDllDirectoryW(
            nBufferLength,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSearchPathMode(
    Flags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetSearchPathMode(
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDirectoryExA(
    lpTemplateDirectory:  LPCSTR,
    lpNewDirectory:  LPCSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  BOOL
{
    unsafe {
        return CreateDirectoryExA(
            lpTemplateDirectory,
            lpNewDirectory,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDirectoryExW(
    lpTemplateDirectory:  LPCWSTR,
    lpNewDirectory:  LPCWSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  BOOL
{
    unsafe {
        return CreateDirectoryExW(
            lpTemplateDirectory,
            lpNewDirectory,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDirectoryTransactedA(
    lpTemplateDirectory:  LPCSTR,
    lpNewDirectory:  LPCSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CreateDirectoryTransactedA(
            lpTemplateDirectory,
            lpNewDirectory,
            lpSecurityAttributes,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDirectoryTransactedW(
    lpTemplateDirectory:  LPCWSTR,
    lpNewDirectory:  LPCWSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CreateDirectoryTransactedW(
            lpTemplateDirectory,
            lpNewDirectory,
            lpSecurityAttributes,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveDirectoryTransactedA(
    lpPathName:  LPCSTR,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return RemoveDirectoryTransactedA(
            lpPathName,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveDirectoryTransactedW(
    lpPathName:  LPCWSTR,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return RemoveDirectoryTransactedW(
            lpPathName,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFullPathNameTransactedA(
    lpFileName:  LPCSTR,
    nBufferLength:  DWORD,
    lpBuffer:  LPSTR,
    lpFilePart: *mut LPSTR,
    hTransaction:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetFullPathNameTransactedA(
            lpFileName,
            nBufferLength,
            lpBuffer,
            lpFilePart,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFullPathNameTransactedW(
    lpFileName:  LPCWSTR,
    nBufferLength:  DWORD,
    lpBuffer:  LPWSTR,
    lpFilePart: *mut LPWSTR,
    hTransaction:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetFullPathNameTransactedW(
            lpFileName,
            nBufferLength,
            lpBuffer,
            lpFilePart,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefineDosDeviceA(
    dwFlags:  DWORD,
    lpDeviceName:  LPCSTR,
    lpTargetPath:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return DefineDosDeviceA(
            dwFlags,
            lpDeviceName,
            lpTargetPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryDosDeviceA(
    lpDeviceName:  LPCSTR,
    lpTargetPath:  LPSTR,
    ucchMax:  DWORD    
) ->  DWORD
{
    unsafe {
        return QueryDosDeviceA(
            lpDeviceName,
            lpTargetPath,
            ucchMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileTransactedA(
    lpFileName:  LPCSTR,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    dwCreationDisposition:  DWORD,
    dwFlagsAndAttributes:  DWORD,
    hTemplateFile:  HANDLE,
    hTransaction:  HANDLE,
    pusMiniVersion:  PUSHORT,
    lpExtendedParameter:  PVOID    
) ->  HANDLE
{
    unsafe {
        return CreateFileTransactedA(
            lpFileName,
            dwDesiredAccess,
            dwShareMode,
            lpSecurityAttributes,
            dwCreationDisposition,
            dwFlagsAndAttributes,
            hTemplateFile,
            hTransaction,
            pusMiniVersion,
            lpExtendedParameter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileTransactedW(
    lpFileName:  LPCWSTR,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    dwCreationDisposition:  DWORD,
    dwFlagsAndAttributes:  DWORD,
    hTemplateFile:  HANDLE,
    hTransaction:  HANDLE,
    pusMiniVersion:  PUSHORT,
    lpExtendedParameter:  PVOID    
) ->  HANDLE
{
    unsafe {
        return CreateFileTransactedW(
            lpFileName,
            dwDesiredAccess,
            dwShareMode,
            lpSecurityAttributes,
            dwCreationDisposition,
            dwFlagsAndAttributes,
            hTemplateFile,
            hTransaction,
            pusMiniVersion,
            lpExtendedParameter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReOpenFile(
    hOriginalFile:  HANDLE,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    dwFlagsAndAttributes:  DWORD    
) ->  HANDLE
{
    unsafe {
        return ReOpenFile(
            hOriginalFile,
            dwDesiredAccess,
            dwShareMode,
            dwFlagsAndAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileAttributesTransactedA(
    lpFileName:  LPCSTR,
    dwFileAttributes:  DWORD,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetFileAttributesTransactedA(
            lpFileName,
            dwFileAttributes,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileAttributesTransactedW(
    lpFileName:  LPCWSTR,
    dwFileAttributes:  DWORD,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetFileAttributesTransactedW(
            lpFileName,
            dwFileAttributes,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileAttributesTransactedA(
    lpFileName:  LPCSTR,
    fInfoLevelId:  GET_FILEEX_INFO_LEVELS,
    lpFileInformation:  LPVOID,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return GetFileAttributesTransactedA(
            lpFileName,
            fInfoLevelId,
            lpFileInformation,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileAttributesTransactedW(
    lpFileName:  LPCWSTR,
    fInfoLevelId:  GET_FILEEX_INFO_LEVELS,
    lpFileInformation:  LPVOID,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return GetFileAttributesTransactedW(
            lpFileName,
            fInfoLevelId,
            lpFileInformation,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCompressedFileSizeTransactedA(
    lpFileName:  LPCSTR,
    lpFileSizeHigh:  LPDWORD,
    hTransaction:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetCompressedFileSizeTransactedA(
            lpFileName,
            lpFileSizeHigh,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCompressedFileSizeTransactedW(
    lpFileName:  LPCWSTR,
    lpFileSizeHigh:  LPDWORD,
    hTransaction:  HANDLE    
) ->  DWORD
{
    unsafe {
        return GetCompressedFileSizeTransactedW(
            lpFileName,
            lpFileSizeHigh,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteFileTransactedA(
    lpFileName:  LPCSTR,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DeleteFileTransactedA(
            lpFileName,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteFileTransactedW(
    lpFileName:  LPCWSTR,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DeleteFileTransactedW(
            lpFileName,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckNameLegalDOS8Dot3A(
    lpName:  LPCSTR,
    lpOemName:  LPSTR,
    OemNameSize:  DWORD,
    pbNameContainsSpaces:  PBOOL,
    pbNameLegal:  PBOOL    
) ->  BOOL
{
    unsafe {
        return CheckNameLegalDOS8Dot3A(
            lpName,
            lpOemName,
            OemNameSize,
            pbNameContainsSpaces,
            pbNameLegal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckNameLegalDOS8Dot3W(
    lpName:  LPCWSTR,
    lpOemName:  LPSTR,
    OemNameSize:  DWORD,
    pbNameContainsSpaces:  PBOOL,
    pbNameLegal:  PBOOL    
) ->  BOOL
{
    unsafe {
        return CheckNameLegalDOS8Dot3W(
            lpName,
            lpOemName,
            OemNameSize,
            pbNameContainsSpaces,
            pbNameLegal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileTransactedA(
    lpFileName:  LPCSTR,
    fInfoLevelId:  FINDEX_INFO_LEVELS,
    lpFindFileData:  LPVOID,
    fSearchOp:  FINDEX_SEARCH_OPS,
    lpSearchFilter:  LPVOID,
    dwAdditionalFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileTransactedA(
            lpFileName,
            fInfoLevelId,
            lpFindFileData,
            fSearchOp,
            lpSearchFilter,
            dwAdditionalFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileTransactedW(
    lpFileName:  LPCWSTR,
    fInfoLevelId:  FINDEX_INFO_LEVELS,
    lpFindFileData:  LPVOID,
    fSearchOp:  FINDEX_SEARCH_OPS,
    lpSearchFilter:  LPVOID,
    dwAdditionalFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileTransactedW(
            lpFileName,
            fInfoLevelId,
            lpFindFileData,
            fSearchOp,
            lpSearchFilter,
            dwAdditionalFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyFileA(
    lpExistingFileName:  LPCSTR,
    lpNewFileName:  LPCSTR,
    bFailIfExists:  BOOL    
) ->  BOOL
{
    unsafe {
        return CopyFileA(
            lpExistingFileName,
            lpNewFileName,
            bFailIfExists
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyFileW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR,
    bFailIfExists:  BOOL    
) ->  BOOL
{
    unsafe {
        return CopyFileW(
            lpExistingFileName,
            lpNewFileName,
            bFailIfExists
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyFileExA(
    lpExistingFileName:  LPCSTR,
    lpNewFileName:  LPCSTR,
    lpProgressRoutine:  LPPROGRESS_ROUTINE,
    lpData:  LPVOID,
    pbCancel:  LPBOOL,
    dwCopyFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CopyFileExA(
            lpExistingFileName,
            lpNewFileName,
            lpProgressRoutine,
            lpData,
            pbCancel,
            dwCopyFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyFileExW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR,
    lpProgressRoutine:  LPPROGRESS_ROUTINE,
    lpData:  LPVOID,
    pbCancel:  LPBOOL,
    dwCopyFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CopyFileExW(
            lpExistingFileName,
            lpNewFileName,
            lpProgressRoutine,
            lpData,
            pbCancel,
            dwCopyFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyFileTransactedA(
    lpExistingFileName:  LPCSTR,
    lpNewFileName:  LPCSTR,
    lpProgressRoutine:  LPPROGRESS_ROUTINE,
    lpData:  LPVOID,
    pbCancel:  LPBOOL,
    dwCopyFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CopyFileTransactedA(
            lpExistingFileName,
            lpNewFileName,
            lpProgressRoutine,
            lpData,
            pbCancel,
            dwCopyFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyFileTransactedW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR,
    lpProgressRoutine:  LPPROGRESS_ROUTINE,
    lpData:  LPVOID,
    pbCancel:  LPBOOL,
    dwCopyFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CopyFileTransactedW(
            lpExistingFileName,
            lpNewFileName,
            lpProgressRoutine,
            lpData,
            pbCancel,
            dwCopyFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyFile2(
    pwszExistingFileName:  PCWSTR,
    pwszNewFileName:  PCWSTR,
    pExtendedParameters: *mut COPYFILE2_EXTENDED_PARAMETERS    
) ->  HRESULT
{
    unsafe {
        return CopyFile2(
            pwszExistingFileName,
            pwszNewFileName,
            pExtendedParameters
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileA(
    lpExistingFileName:  LPCSTR,
    lpNewFileName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return MoveFileA(
            lpExistingFileName,
            lpNewFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return MoveFileW(
            lpExistingFileName,
            lpNewFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileExA(
    lpExistingFileName:  LPCSTR,
    lpNewFileName:  LPCSTR,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return MoveFileExA(
            lpExistingFileName,
            lpNewFileName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileExW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return MoveFileExW(
            lpExistingFileName,
            lpNewFileName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileWithProgressA(
    lpExistingFileName:  LPCSTR,
    lpNewFileName:  LPCSTR,
    lpProgressRoutine:  LPPROGRESS_ROUTINE,
    lpData:  LPVOID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return MoveFileWithProgressA(
            lpExistingFileName,
            lpNewFileName,
            lpProgressRoutine,
            lpData,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileWithProgressW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR,
    lpProgressRoutine:  LPPROGRESS_ROUTINE,
    lpData:  LPVOID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return MoveFileWithProgressW(
            lpExistingFileName,
            lpNewFileName,
            lpProgressRoutine,
            lpData,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileTransactedA(
    lpExistingFileName:  LPCSTR,
    lpNewFileName:  LPCSTR,
    lpProgressRoutine:  LPPROGRESS_ROUTINE,
    lpData:  LPVOID,
    dwFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return MoveFileTransactedA(
            lpExistingFileName,
            lpNewFileName,
            lpProgressRoutine,
            lpData,
            dwFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveFileTransactedW(
    lpExistingFileName:  LPCWSTR,
    lpNewFileName:  LPCWSTR,
    lpProgressRoutine:  LPPROGRESS_ROUTINE,
    lpData:  LPVOID,
    dwFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return MoveFileTransactedW(
            lpExistingFileName,
            lpNewFileName,
            lpProgressRoutine,
            lpData,
            dwFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReplaceFileA(
    lpReplacedFileName:  LPCSTR,
    lpReplacementFileName:  LPCSTR,
    lpBackupFileName:  LPCSTR,
    dwReplaceFlags:  DWORD,
    lpExclude:  LPVOID,
    lpReserved:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ReplaceFileA(
            lpReplacedFileName,
            lpReplacementFileName,
            lpBackupFileName,
            dwReplaceFlags,
            lpExclude,
            lpReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReplaceFileW(
    lpReplacedFileName:  LPCWSTR,
    lpReplacementFileName:  LPCWSTR,
    lpBackupFileName:  LPCWSTR,
    dwReplaceFlags:  DWORD,
    lpExclude:  LPVOID,
    lpReserved:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ReplaceFileW(
            lpReplacedFileName,
            lpReplacementFileName,
            lpBackupFileName,
            dwReplaceFlags,
            lpExclude,
            lpReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateHardLinkA(
    lpFileName:  LPCSTR,
    lpExistingFileName:  LPCSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  BOOL
{
    unsafe {
        return CreateHardLinkA(
            lpFileName,
            lpExistingFileName,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateHardLinkW(
    lpFileName:  LPCWSTR,
    lpExistingFileName:  LPCWSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  BOOL
{
    unsafe {
        return CreateHardLinkW(
            lpFileName,
            lpExistingFileName,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateHardLinkTransactedA(
    lpFileName:  LPCSTR,
    lpExistingFileName:  LPCSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CreateHardLinkTransactedA(
            lpFileName,
            lpExistingFileName,
            lpSecurityAttributes,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateHardLinkTransactedW(
    lpFileName:  LPCWSTR,
    lpExistingFileName:  LPCWSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    hTransaction:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CreateHardLinkTransactedW(
            lpFileName,
            lpExistingFileName,
            lpSecurityAttributes,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstStreamTransactedW(
    lpFileName:  LPCWSTR,
    InfoLevel:  STREAM_INFO_LEVELS,
    lpFindStreamData:  LPVOID,
    dwFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return FindFirstStreamTransactedW(
            lpFileName,
            InfoLevel,
            lpFindStreamData,
            dwFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstFileNameTransactedW(
    lpFileName:  LPCWSTR,
    dwFlags:  DWORD,
    StringLength:  LPDWORD,
    LinkName:  PWSTR,
    hTransaction:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return FindFirstFileNameTransactedW(
            lpFileName,
            dwFlags,
            StringLength,
            LinkName,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateNamedPipeA(
    lpName:  LPCSTR,
    dwOpenMode:  DWORD,
    dwPipeMode:  DWORD,
    nMaxInstances:  DWORD,
    nOutBufferSize:  DWORD,
    nInBufferSize:  DWORD,
    nDefaultTimeOut:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  HANDLE
{
    unsafe {
        return CreateNamedPipeA(
            lpName,
            dwOpenMode,
            dwPipeMode,
            nMaxInstances,
            nOutBufferSize,
            nInBufferSize,
            nDefaultTimeOut,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeHandleStateA(
    hNamedPipe:  HANDLE,
    lpState:  LPDWORD,
    lpCurInstances:  LPDWORD,
    lpMaxCollectionCount:  LPDWORD,
    lpCollectDataTimeout:  LPDWORD,
    lpUserName:  LPSTR,
    nMaxUserNameSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeHandleStateA(
            hNamedPipe,
            lpState,
            lpCurInstances,
            lpMaxCollectionCount,
            lpCollectDataTimeout,
            lpUserName,
            nMaxUserNameSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallNamedPipeA(
    lpNamedPipeName:  LPCSTR,
    lpInBuffer:  LPVOID,
    nInBufferSize:  DWORD,
    lpOutBuffer:  LPVOID,
    nOutBufferSize:  DWORD,
    lpBytesRead:  LPDWORD,
    nTimeOut:  DWORD    
) ->  BOOL
{
    unsafe {
        return CallNamedPipeA(
            lpNamedPipeName,
            lpInBuffer,
            nInBufferSize,
            lpOutBuffer,
            nOutBufferSize,
            lpBytesRead,
            nTimeOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitNamedPipeA(
    lpNamedPipeName:  LPCSTR,
    nTimeOut:  DWORD    
) ->  BOOL
{
    unsafe {
        return WaitNamedPipeA(
            lpNamedPipeName,
            nTimeOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeClientComputerNameA(
    Pipe:  HANDLE,
    ClientComputerName:  LPSTR,
    ClientComputerNameLength:  ULONG    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeClientComputerNameA(
            Pipe,
            ClientComputerName,
            ClientComputerNameLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeClientProcessId(
    Pipe:  HANDLE,
    ClientProcessId:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeClientProcessId(
            Pipe,
            ClientProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeClientSessionId(
    Pipe:  HANDLE,
    ClientSessionId:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeClientSessionId(
            Pipe,
            ClientSessionId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeServerProcessId(
    Pipe:  HANDLE,
    ServerProcessId:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeServerProcessId(
            Pipe,
            ServerProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNamedPipeServerSessionId(
    Pipe:  HANDLE,
    ServerSessionId:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetNamedPipeServerSessionId(
            Pipe,
            ServerSessionId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetVolumeLabelA(
    lpRootPathName:  LPCSTR,
    lpVolumeName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetVolumeLabelA(
            lpRootPathName,
            lpVolumeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetVolumeLabelW(
    lpRootPathName:  LPCWSTR,
    lpVolumeName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetVolumeLabelW(
            lpRootPathName,
            lpVolumeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileBandwidthReservation(
    hFile:  HANDLE,
    nPeriodMilliseconds:  DWORD,
    nBytesPerPeriod:  DWORD,
    bDiscardable:  BOOL,
    lpTransferSize:  LPDWORD,
    lpNumOutstandingRequests:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return SetFileBandwidthReservation(
            hFile,
            nPeriodMilliseconds,
            nBytesPerPeriod,
            bDiscardable,
            lpTransferSize,
            lpNumOutstandingRequests
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileBandwidthReservation(
    hFile:  HANDLE,
    lpPeriodMilliseconds:  LPDWORD,
    lpBytesPerPeriod:  LPDWORD,
    pDiscardable:  LPBOOL,
    lpTransferSize:  LPDWORD,
    lpNumOutstandingRequests:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetFileBandwidthReservation(
            hFile,
            lpPeriodMilliseconds,
            lpBytesPerPeriod,
            pDiscardable,
            lpTransferSize,
            lpNumOutstandingRequests
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClearEventLogA(
    hEventLog:  HANDLE,
    lpBackupFileName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return ClearEventLogA(
            hEventLog,
            lpBackupFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClearEventLogW(
    hEventLog:  HANDLE,
    lpBackupFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return ClearEventLogW(
            hEventLog,
            lpBackupFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BackupEventLogA(
    hEventLog:  HANDLE,
    lpBackupFileName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return BackupEventLogA(
            hEventLog,
            lpBackupFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BackupEventLogW(
    hEventLog:  HANDLE,
    lpBackupFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return BackupEventLogW(
            hEventLog,
            lpBackupFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseEventLog(
    hEventLog:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CloseEventLog(
            hEventLog
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeregisterEventSource(
    hEventLog:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DeregisterEventSource(
            hEventLog
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NotifyChangeEventLog(
    hEventLog:  HANDLE,
    hEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return NotifyChangeEventLog(
            hEventLog,
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumberOfEventLogRecords(
    hEventLog:  HANDLE,
    NumberOfRecords:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetNumberOfEventLogRecords(
            hEventLog,
            NumberOfRecords
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOldestEventLogRecord(
    hEventLog:  HANDLE,
    OldestRecord:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetOldestEventLogRecord(
            hEventLog,
            OldestRecord
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenEventLogA(
    lpUNCServerName:  LPCSTR,
    lpSourceName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenEventLogA(
            lpUNCServerName,
            lpSourceName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenEventLogW(
    lpUNCServerName:  LPCWSTR,
    lpSourceName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenEventLogW(
            lpUNCServerName,
            lpSourceName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterEventSourceA(
    lpUNCServerName:  LPCSTR,
    lpSourceName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return RegisterEventSourceA(
            lpUNCServerName,
            lpSourceName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterEventSourceW(
    lpUNCServerName:  LPCWSTR,
    lpSourceName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return RegisterEventSourceW(
            lpUNCServerName,
            lpSourceName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenBackupEventLogA(
    lpUNCServerName:  LPCSTR,
    lpFileName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenBackupEventLogA(
            lpUNCServerName,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenBackupEventLogW(
    lpUNCServerName:  LPCWSTR,
    lpFileName:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return OpenBackupEventLogW(
            lpUNCServerName,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadEventLogA(
    hEventLog:  HANDLE,
    dwReadFlags:  DWORD,
    dwRecordOffset:  DWORD,
    lpBuffer:  LPVOID,
    nNumberOfBytesToRead:  DWORD,
    pnBytesRead: *mut DWORD,
    pnMinNumberOfBytesNeeded: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return ReadEventLogA(
            hEventLog,
            dwReadFlags,
            dwRecordOffset,
            lpBuffer,
            nNumberOfBytesToRead,
            pnBytesRead,
            pnMinNumberOfBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadEventLogW(
    hEventLog:  HANDLE,
    dwReadFlags:  DWORD,
    dwRecordOffset:  DWORD,
    lpBuffer:  LPVOID,
    nNumberOfBytesToRead:  DWORD,
    pnBytesRead: *mut DWORD,
    pnMinNumberOfBytesNeeded: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return ReadEventLogW(
            hEventLog,
            dwReadFlags,
            dwRecordOffset,
            lpBuffer,
            nNumberOfBytesToRead,
            pnBytesRead,
            pnMinNumberOfBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReportEventA(
    hEventLog:  HANDLE,
    wType:  WORD,
    wCategory:  WORD,
    dwEventID:  DWORD,
    lpUserSid:  PSID,
    wNumStrings:  WORD,
    dwDataSize:  DWORD,
    lpStrings: *mut LPCSTR,
    lpRawData:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ReportEventA(
            hEventLog,
            wType,
            wCategory,
            dwEventID,
            lpUserSid,
            wNumStrings,
            dwDataSize,
            lpStrings,
            lpRawData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReportEventW(
    hEventLog:  HANDLE,
    wType:  WORD,
    wCategory:  WORD,
    dwEventID:  DWORD,
    lpUserSid:  PSID,
    wNumStrings:  WORD,
    dwDataSize:  DWORD,
    lpStrings: *mut LPCWSTR,
    lpRawData:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ReportEventW(
            hEventLog,
            wType,
            wCategory,
            dwEventID,
            lpUserSid,
            wNumStrings,
            dwDataSize,
            lpStrings,
            lpRawData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEventLogInformation(
    hEventLog:  HANDLE,
    dwInfoLevel:  DWORD,
    lpBuffer:  LPVOID,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetEventLogInformation(
            hEventLog,
            dwInfoLevel,
            lpBuffer,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OperationStart(
    OperationStartParams: *mut OPERATION_START_PARAMETERS    
) ->  BOOL
{
    unsafe {
        return OperationStart(
            OperationStartParams
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OperationEnd(
    OperationEndParams: *mut OPERATION_END_PARAMETERS    
) ->  BOOL
{
    unsafe {
        return OperationEnd(
            OperationEndParams
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckAndAuditAlarmA(
    SubsystemName:  LPCSTR,
    HandleId:  LPVOID,
    ObjectTypeName:  LPSTR,
    ObjectName:  LPSTR,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    DesiredAccess:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    ObjectCreation:  BOOL,
    GrantedAccess:  LPDWORD,
    AccessStatus:  LPBOOL,
    pfGenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckAndAuditAlarmA(
            SubsystemName,
            HandleId,
            ObjectTypeName,
            ObjectName,
            SecurityDescriptor,
            DesiredAccess,
            GenericMapping,
            ObjectCreation,
            GrantedAccess,
            AccessStatus,
            pfGenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckByTypeAndAuditAlarmA(
    SubsystemName:  LPCSTR,
    HandleId:  LPVOID,
    ObjectTypeName:  LPCSTR,
    ObjectName:  LPCSTR,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    PrincipalSelfSid:  PSID,
    DesiredAccess:  DWORD,
    AuditType:  AUDIT_EVENT_TYPE,
    Flags:  DWORD,
    ObjectTypeList:  POBJECT_TYPE_LIST,
    ObjectTypeListLength:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    ObjectCreation:  BOOL,
    GrantedAccess:  LPDWORD,
    AccessStatus:  LPBOOL,
    pfGenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckByTypeAndAuditAlarmA(
            SubsystemName,
            HandleId,
            ObjectTypeName,
            ObjectName,
            SecurityDescriptor,
            PrincipalSelfSid,
            DesiredAccess,
            AuditType,
            Flags,
            ObjectTypeList,
            ObjectTypeListLength,
            GenericMapping,
            ObjectCreation,
            GrantedAccess,
            AccessStatus,
            pfGenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckByTypeResultListAndAuditAlarmA(
    SubsystemName:  LPCSTR,
    HandleId:  LPVOID,
    ObjectTypeName:  LPCSTR,
    ObjectName:  LPCSTR,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    PrincipalSelfSid:  PSID,
    DesiredAccess:  DWORD,
    AuditType:  AUDIT_EVENT_TYPE,
    Flags:  DWORD,
    ObjectTypeList:  POBJECT_TYPE_LIST,
    ObjectTypeListLength:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    ObjectCreation:  BOOL,
    GrantedAccess:  LPDWORD,
    AccessStatusList:  LPDWORD,
    pfGenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckByTypeResultListAndAuditAlarmA(
            SubsystemName,
            HandleId,
            ObjectTypeName,
            ObjectName,
            SecurityDescriptor,
            PrincipalSelfSid,
            DesiredAccess,
            AuditType,
            Flags,
            ObjectTypeList,
            ObjectTypeListLength,
            GenericMapping,
            ObjectCreation,
            GrantedAccess,
            AccessStatusList,
            pfGenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AccessCheckByTypeResultListAndAuditAlarmByHandleA(
    SubsystemName:  LPCSTR,
    HandleId:  LPVOID,
    ClientToken:  HANDLE,
    ObjectTypeName:  LPCSTR,
    ObjectName:  LPCSTR,
    SecurityDescriptor:  PSECURITY_DESCRIPTOR,
    PrincipalSelfSid:  PSID,
    DesiredAccess:  DWORD,
    AuditType:  AUDIT_EVENT_TYPE,
    Flags:  DWORD,
    ObjectTypeList:  POBJECT_TYPE_LIST,
    ObjectTypeListLength:  DWORD,
    GenericMapping:  PGENERIC_MAPPING,
    ObjectCreation:  BOOL,
    GrantedAccess:  LPDWORD,
    AccessStatusList:  LPDWORD,
    pfGenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return AccessCheckByTypeResultListAndAuditAlarmByHandleA(
            SubsystemName,
            HandleId,
            ClientToken,
            ObjectTypeName,
            ObjectName,
            SecurityDescriptor,
            PrincipalSelfSid,
            DesiredAccess,
            AuditType,
            Flags,
            ObjectTypeList,
            ObjectTypeListLength,
            GenericMapping,
            ObjectCreation,
            GrantedAccess,
            AccessStatusList,
            pfGenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObjectOpenAuditAlarmA(
    SubsystemName:  LPCSTR,
    HandleId:  LPVOID,
    ObjectTypeName:  LPSTR,
    ObjectName:  LPSTR,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    ClientToken:  HANDLE,
    DesiredAccess:  DWORD,
    GrantedAccess:  DWORD,
    Privileges:  PPRIVILEGE_SET,
    ObjectCreation:  BOOL,
    AccessGranted:  BOOL,
    GenerateOnClose:  LPBOOL    
) ->  BOOL
{
    unsafe {
        return ObjectOpenAuditAlarmA(
            SubsystemName,
            HandleId,
            ObjectTypeName,
            ObjectName,
            pSecurityDescriptor,
            ClientToken,
            DesiredAccess,
            GrantedAccess,
            Privileges,
            ObjectCreation,
            AccessGranted,
            GenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObjectPrivilegeAuditAlarmA(
    SubsystemName:  LPCSTR,
    HandleId:  LPVOID,
    ClientToken:  HANDLE,
    DesiredAccess:  DWORD,
    Privileges:  PPRIVILEGE_SET,
    AccessGranted:  BOOL    
) ->  BOOL
{
    unsafe {
        return ObjectPrivilegeAuditAlarmA(
            SubsystemName,
            HandleId,
            ClientToken,
            DesiredAccess,
            Privileges,
            AccessGranted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObjectCloseAuditAlarmA(
    SubsystemName:  LPCSTR,
    HandleId:  LPVOID,
    GenerateOnClose:  BOOL    
) ->  BOOL
{
    unsafe {
        return ObjectCloseAuditAlarmA(
            SubsystemName,
            HandleId,
            GenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObjectDeleteAuditAlarmA(
    SubsystemName:  LPCSTR,
    HandleId:  LPVOID,
    GenerateOnClose:  BOOL    
) ->  BOOL
{
    unsafe {
        return ObjectDeleteAuditAlarmA(
            SubsystemName,
            HandleId,
            GenerateOnClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrivilegedServiceAuditAlarmA(
    SubsystemName:  LPCSTR,
    ServiceName:  LPCSTR,
    ClientToken:  HANDLE,
    Privileges:  PPRIVILEGE_SET,
    AccessGranted:  BOOL    
) ->  BOOL
{
    unsafe {
        return PrivilegedServiceAuditAlarmA(
            SubsystemName,
            ServiceName,
            ClientToken,
            Privileges,
            AccessGranted
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddConditionalAce(
    pAcl:  PACL,
    dwAceRevision:  DWORD,
    AceFlags:  DWORD,
    AceType:  UCHAR,
    AccessMask:  DWORD,
    pSid:  PSID,
    ConditionStr:  PWCHAR,
    ReturnLength: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return AddConditionalAce(
            pAcl,
            dwAceRevision,
            AceFlags,
            AceType,
            AccessMask,
            pSid,
            ConditionStr,
            ReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFileSecurityA(
    lpFileName:  LPCSTR,
    SecurityInformation:  SECURITY_INFORMATION,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return SetFileSecurityA(
            lpFileName,
            SecurityInformation,
            pSecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileSecurityA(
    lpFileName:  LPCSTR,
    RequestedInformation:  SECURITY_INFORMATION,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    nLength:  DWORD,
    lpnLengthNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetFileSecurityA(
            lpFileName,
            RequestedInformation,
            pSecurityDescriptor,
            nLength,
            lpnLengthNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadDirectoryChangesW(
    hDirectory:  HANDLE,
    lpBuffer:  LPVOID,
    nBufferLength:  DWORD,
    bWatchSubtree:  BOOL,
    dwNotifyFilter:  DWORD,
    lpBytesReturned:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED,
    lpCompletionRoutine:  LPOVERLAPPED_COMPLETION_ROUTINE    
) ->  BOOL
{
    unsafe {
        return ReadDirectoryChangesW(
            hDirectory,
            lpBuffer,
            nBufferLength,
            bWatchSubtree,
            dwNotifyFilter,
            lpBytesReturned,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadDirectoryChangesExW(
    hDirectory:  HANDLE,
    lpBuffer:  LPVOID,
    nBufferLength:  DWORD,
    bWatchSubtree:  BOOL,
    dwNotifyFilter:  DWORD,
    lpBytesReturned:  LPDWORD,
    lpOverlapped:  LPOVERLAPPED,
    lpCompletionRoutine:  LPOVERLAPPED_COMPLETION_ROUTINE,
    ReadDirectoryNotifyInformationClass:  READ_DIRECTORY_NOTIFY_INFORMATION_CLASS    
) ->  BOOL
{
    unsafe {
        return ReadDirectoryChangesExW(
            hDirectory,
            lpBuffer,
            nBufferLength,
            bWatchSubtree,
            dwNotifyFilter,
            lpBytesReturned,
            lpOverlapped,
            lpCompletionRoutine,
            ReadDirectoryNotifyInformationClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapViewOfFileExNuma(
    hFileMappingObject:  HANDLE,
    dwDesiredAccess:  DWORD,
    dwFileOffsetHigh:  DWORD,
    dwFileOffsetLow:  DWORD,
    dwNumberOfBytesToMap:  SIZE_T,
    lpBaseAddress:  LPVOID,
    nndPreferred:  DWORD    
) ->  LPVOID
{
    unsafe {
        return MapViewOfFileExNuma(
            hFileMappingObject,
            dwDesiredAccess,
            dwFileOffsetHigh,
            dwFileOffsetLow,
            dwNumberOfBytesToMap,
            lpBaseAddress,
            nndPreferred
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsBadReadPtr(
    lp: *const c_void,
    ucb:  UINT_PTR    
) ->  BOOL
{
    unsafe {
        return IsBadReadPtr(
            lp,
            ucb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsBadWritePtr(
    lp:  LPVOID,
    ucb:  UINT_PTR    
) ->  BOOL
{
    unsafe {
        return IsBadWritePtr(
            lp,
            ucb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsBadHugeReadPtr(
    lp: *const c_void,
    ucb:  UINT_PTR    
) ->  BOOL
{
    unsafe {
        return IsBadHugeReadPtr(
            lp,
            ucb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsBadHugeWritePtr(
    lp:  LPVOID,
    ucb:  UINT_PTR    
) ->  BOOL
{
    unsafe {
        return IsBadHugeWritePtr(
            lp,
            ucb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsBadCodePtr(
    lpfn:  FARPROC    
) ->  BOOL
{
    unsafe {
        return IsBadCodePtr(
            lpfn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsBadStringPtrA(
    lpsz:  LPCSTR,
    ucchMax:  UINT_PTR    
) ->  BOOL
{
    unsafe {
        return IsBadStringPtrA(
            lpsz,
            ucchMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsBadStringPtrW(
    lpsz:  LPCWSTR,
    ucchMax:  UINT_PTR    
) ->  BOOL
{
    unsafe {
        return IsBadStringPtrW(
            lpsz,
            ucchMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupAccountSidA(
    lpSystemName:  LPCSTR,
    Sid:  PSID,
    Name:  LPSTR,
    cchName:  LPDWORD,
    ReferencedDomainName:  LPSTR,
    cchReferencedDomainName:  LPDWORD,
    peUse:  PSID_NAME_USE    
) ->  BOOL
{
    unsafe {
        return LookupAccountSidA(
            lpSystemName,
            Sid,
            Name,
            cchName,
            ReferencedDomainName,
            cchReferencedDomainName,
            peUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupAccountSidW(
    lpSystemName:  LPCWSTR,
    Sid:  PSID,
    Name:  LPWSTR,
    cchName:  LPDWORD,
    ReferencedDomainName:  LPWSTR,
    cchReferencedDomainName:  LPDWORD,
    peUse:  PSID_NAME_USE    
) ->  BOOL
{
    unsafe {
        return LookupAccountSidW(
            lpSystemName,
            Sid,
            Name,
            cchName,
            ReferencedDomainName,
            cchReferencedDomainName,
            peUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupAccountNameA(
    lpSystemName:  LPCSTR,
    lpAccountName:  LPCSTR,
    Sid:  PSID,
    cbSid:  LPDWORD,
    ReferencedDomainName:  LPSTR,
    cchReferencedDomainName:  LPDWORD,
    peUse:  PSID_NAME_USE    
) ->  BOOL
{
    unsafe {
        return LookupAccountNameA(
            lpSystemName,
            lpAccountName,
            Sid,
            cbSid,
            ReferencedDomainName,
            cchReferencedDomainName,
            peUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupAccountNameW(
    lpSystemName:  LPCWSTR,
    lpAccountName:  LPCWSTR,
    Sid:  PSID,
    cbSid:  LPDWORD,
    ReferencedDomainName:  LPWSTR,
    cchReferencedDomainName:  LPDWORD,
    peUse:  PSID_NAME_USE    
) ->  BOOL
{
    unsafe {
        return LookupAccountNameW(
            lpSystemName,
            lpAccountName,
            Sid,
            cbSid,
            ReferencedDomainName,
            cchReferencedDomainName,
            peUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupAccountNameLocalA(
    lpAccountName:  LPCSTR,
    Sid:  PSID,
    cbSid:  LPDWORD,
    ReferencedDomainName:  LPSTR,
    cchReferencedDomainName:  LPDWORD,
    peUse:  PSID_NAME_USE    
) ->  BOOL
{
    unsafe {
        return LookupAccountNameLocalA(
            lpAccountName,
            Sid,
            cbSid,
            ReferencedDomainName,
            cchReferencedDomainName,
            peUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupAccountNameLocalW(
    lpAccountName:  LPCWSTR,
    Sid:  PSID,
    cbSid:  LPDWORD,
    ReferencedDomainName:  LPWSTR,
    cchReferencedDomainName:  LPDWORD,
    peUse:  PSID_NAME_USE    
) ->  BOOL
{
    unsafe {
        return LookupAccountNameLocalW(
            lpAccountName,
            Sid,
            cbSid,
            ReferencedDomainName,
            cchReferencedDomainName,
            peUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupAccountSidLocalA(
    Sid:  PSID,
    Name:  LPSTR,
    cchName:  LPDWORD,
    ReferencedDomainName:  LPSTR,
    cchReferencedDomainName:  LPDWORD,
    peUse:  PSID_NAME_USE    
) ->  BOOL
{
    unsafe {
        return LookupAccountSidLocalA(
            Sid,
            Name,
            cchName,
            ReferencedDomainName,
            cchReferencedDomainName,
            peUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupAccountSidLocalW(
    Sid:  PSID,
    Name:  LPWSTR,
    cchName:  LPDWORD,
    ReferencedDomainName:  LPWSTR,
    cchReferencedDomainName:  LPDWORD,
    peUse:  PSID_NAME_USE    
) ->  BOOL
{
    unsafe {
        return LookupAccountSidLocalW(
            Sid,
            Name,
            cchName,
            ReferencedDomainName,
            cchReferencedDomainName,
            peUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupPrivilegeValueA(
    lpSystemName:  LPCSTR,
    lpName:  LPCSTR,
    lpLuid:  PLUID    
) ->  BOOL
{
    unsafe {
        return LookupPrivilegeValueA(
            lpSystemName,
            lpName,
            lpLuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupPrivilegeValueW(
    lpSystemName:  LPCWSTR,
    lpName:  LPCWSTR,
    lpLuid:  PLUID    
) ->  BOOL
{
    unsafe {
        return LookupPrivilegeValueW(
            lpSystemName,
            lpName,
            lpLuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupPrivilegeNameA(
    lpSystemName:  LPCSTR,
    lpLuid:  PLUID,
    lpName:  LPSTR,
    cchName:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return LookupPrivilegeNameA(
            lpSystemName,
            lpLuid,
            lpName,
            cchName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupPrivilegeNameW(
    lpSystemName:  LPCWSTR,
    lpLuid:  PLUID,
    lpName:  LPWSTR,
    cchName:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return LookupPrivilegeNameW(
            lpSystemName,
            lpLuid,
            lpName,
            cchName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupPrivilegeDisplayNameA(
    lpSystemName:  LPCSTR,
    lpName:  LPCSTR,
    lpDisplayName:  LPSTR,
    cchDisplayName:  LPDWORD,
    lpLanguageId:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return LookupPrivilegeDisplayNameA(
            lpSystemName,
            lpName,
            lpDisplayName,
            cchDisplayName,
            lpLanguageId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupPrivilegeDisplayNameW(
    lpSystemName:  LPCWSTR,
    lpName:  LPCWSTR,
    lpDisplayName:  LPWSTR,
    cchDisplayName:  LPDWORD,
    lpLanguageId:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return LookupPrivilegeDisplayNameW(
            lpSystemName,
            lpName,
            lpDisplayName,
            cchDisplayName,
            lpLanguageId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BuildCommDCBA(
    lpDef:  LPCSTR,
    lpDCB:  LPDCB    
) ->  BOOL
{
    unsafe {
        return BuildCommDCBA(
            lpDef,
            lpDCB
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BuildCommDCBW(
    lpDef:  LPCWSTR,
    lpDCB:  LPDCB    
) ->  BOOL
{
    unsafe {
        return BuildCommDCBW(
            lpDef,
            lpDCB
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BuildCommDCBAndTimeoutsA(
    lpDef:  LPCSTR,
    lpDCB:  LPDCB,
    lpCommTimeouts:  LPCOMMTIMEOUTS    
) ->  BOOL
{
    unsafe {
        return BuildCommDCBAndTimeoutsA(
            lpDef,
            lpDCB,
            lpCommTimeouts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BuildCommDCBAndTimeoutsW(
    lpDef:  LPCWSTR,
    lpDCB:  LPDCB,
    lpCommTimeouts:  LPCOMMTIMEOUTS    
) ->  BOOL
{
    unsafe {
        return BuildCommDCBAndTimeoutsW(
            lpDef,
            lpDCB,
            lpCommTimeouts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CommConfigDialogA(
    lpszName:  LPCSTR,
    hWnd:  HWND,
    lpCC:  LPCOMMCONFIG    
) ->  BOOL
{
    unsafe {
        return CommConfigDialogA(
            lpszName,
            hWnd,
            lpCC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CommConfigDialogW(
    lpszName:  LPCWSTR,
    hWnd:  HWND,
    lpCC:  LPCOMMCONFIG    
) ->  BOOL
{
    unsafe {
        return CommConfigDialogW(
            lpszName,
            hWnd,
            lpCC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDefaultCommConfigA(
    lpszName:  LPCSTR,
    lpCC:  LPCOMMCONFIG,
    lpdwSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetDefaultCommConfigA(
            lpszName,
            lpCC,
            lpdwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDefaultCommConfigW(
    lpszName:  LPCWSTR,
    lpCC:  LPCOMMCONFIG,
    lpdwSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetDefaultCommConfigW(
            lpszName,
            lpCC,
            lpdwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDefaultCommConfigA(
    lpszName:  LPCSTR,
    lpCC:  LPCOMMCONFIG,
    dwSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetDefaultCommConfigA(
            lpszName,
            lpCC,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDefaultCommConfigW(
    lpszName:  LPCWSTR,
    lpCC:  LPCOMMCONFIG,
    dwSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetDefaultCommConfigW(
            lpszName,
            lpCC,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetComputerNameA(
    lpBuffer:  LPSTR,
    nSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetComputerNameA(
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetComputerNameW(
    lpBuffer:  LPWSTR,
    nSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetComputerNameW(
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DnsHostnameToComputerNameA(
    Hostname:  LPCSTR,
    ComputerName:  LPSTR,
    nSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return DnsHostnameToComputerNameA(
            Hostname,
            ComputerName,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DnsHostnameToComputerNameW(
    Hostname:  LPCWSTR,
    ComputerName:  LPWSTR,
    nSize:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return DnsHostnameToComputerNameW(
            Hostname,
            ComputerName,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserNameA(
    lpBuffer:  LPSTR,
    pcbBuffer:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetUserNameA(
            lpBuffer,
            pcbBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserNameW(
    lpBuffer:  LPWSTR,
    pcbBuffer:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetUserNameW(
            lpBuffer,
            pcbBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LogonUserA(
    lpszUsername:  LPCSTR,
    lpszDomain:  LPCSTR,
    lpszPassword:  LPCSTR,
    dwLogonType:  DWORD,
    dwLogonProvider:  DWORD,
    phToken:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return LogonUserA(
            lpszUsername,
            lpszDomain,
            lpszPassword,
            dwLogonType,
            dwLogonProvider,
            phToken
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LogonUserW(
    lpszUsername:  LPCWSTR,
    lpszDomain:  LPCWSTR,
    lpszPassword:  LPCWSTR,
    dwLogonType:  DWORD,
    dwLogonProvider:  DWORD,
    phToken:  PHANDLE    
) ->  BOOL
{
    unsafe {
        return LogonUserW(
            lpszUsername,
            lpszDomain,
            lpszPassword,
            dwLogonType,
            dwLogonProvider,
            phToken
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LogonUserExA(
    lpszUsername:  LPCSTR,
    lpszDomain:  LPCSTR,
    lpszPassword:  LPCSTR,
    dwLogonType:  DWORD,
    dwLogonProvider:  DWORD,
    phToken:  PHANDLE,
    ppLogonSid: *mut PSID,
    ppProfileBuffer: *mut PVOID,
    pdwProfileLength:  LPDWORD,
    pQuotaLimits:  PQUOTA_LIMITS    
) ->  BOOL
{
    unsafe {
        return LogonUserExA(
            lpszUsername,
            lpszDomain,
            lpszPassword,
            dwLogonType,
            dwLogonProvider,
            phToken,
            ppLogonSid,
            ppProfileBuffer,
            pdwProfileLength,
            pQuotaLimits
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LogonUserExW(
    lpszUsername:  LPCWSTR,
    lpszDomain:  LPCWSTR,
    lpszPassword:  LPCWSTR,
    dwLogonType:  DWORD,
    dwLogonProvider:  DWORD,
    phToken:  PHANDLE,
    ppLogonSid: *mut PSID,
    ppProfileBuffer: *mut PVOID,
    pdwProfileLength:  LPDWORD,
    pQuotaLimits:  PQUOTA_LIMITS    
) ->  BOOL
{
    unsafe {
        return LogonUserExW(
            lpszUsername,
            lpszDomain,
            lpszPassword,
            dwLogonType,
            dwLogonProvider,
            phToken,
            ppLogonSid,
            ppProfileBuffer,
            pdwProfileLength,
            pQuotaLimits
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateProcessWithLogonW(
    lpUsername:  LPCWSTR,
    lpDomain:  LPCWSTR,
    lpPassword:  LPCWSTR,
    dwLogonFlags:  DWORD,
    lpApplicationName:  LPCWSTR,
    lpCommandLine:  LPWSTR,
    dwCreationFlags:  DWORD,
    lpEnvironment:  LPVOID,
    lpCurrentDirectory:  LPCWSTR,
    lpStartupInfo:  LPSTARTUPINFOW,
    lpProcessInformation:  LPPROCESS_INFORMATION    
) ->  BOOL
{
    unsafe {
        return CreateProcessWithLogonW(
            lpUsername,
            lpDomain,
            lpPassword,
            dwLogonFlags,
            lpApplicationName,
            lpCommandLine,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateProcessWithTokenW(
    hToken:  HANDLE,
    dwLogonFlags:  DWORD,
    lpApplicationName:  LPCWSTR,
    lpCommandLine:  LPWSTR,
    dwCreationFlags:  DWORD,
    lpEnvironment:  LPVOID,
    lpCurrentDirectory:  LPCWSTR,
    lpStartupInfo:  LPSTARTUPINFOW,
    lpProcessInformation:  LPPROCESS_INFORMATION    
) ->  BOOL
{
    unsafe {
        return CreateProcessWithTokenW(
            hToken,
            dwLogonFlags,
            lpApplicationName,
            lpCommandLine,
            dwCreationFlags,
            lpEnvironment,
            lpCurrentDirectory,
            lpStartupInfo,
            lpProcessInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsTokenUntrusted(
    TokenHandle:  HANDLE    
) ->  BOOL
{
    unsafe {
        return IsTokenUntrusted(
            TokenHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterWaitForSingleObject(
    phNewWaitObject:  PHANDLE,
    hObject:  HANDLE,
    Callback:  WAITORTIMERCALLBACK,
    Context:  PVOID,
    dwMilliseconds:  ULONG,
    dwFlags:  ULONG    
) ->  BOOL
{
    unsafe {
        return RegisterWaitForSingleObject(
            phNewWaitObject,
            hObject,
            Callback,
            Context,
            dwMilliseconds,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterWait(
    WaitHandle:  HANDLE    
) ->  BOOL
{
    unsafe {
        return UnregisterWait(
            WaitHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BindIoCompletionCallback(
    FileHandle:  HANDLE,
    Function:  LPOVERLAPPED_COMPLETION_ROUTINE,
    Flags:  ULONG    
) ->  BOOL
{
    unsafe {
        return BindIoCompletionCallback(
            FileHandle,
            Function,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTimerQueueTimer(
    TimerQueue:  HANDLE,
    Callback:  WAITORTIMERCALLBACK,
    Parameter:  PVOID,
    DueTime:  DWORD,
    Period:  DWORD,
    PreferIo:  BOOL    
) ->  HANDLE
{
    unsafe {
        return SetTimerQueueTimer(
            TimerQueue,
            Callback,
            Parameter,
            DueTime,
            Period,
            PreferIo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelTimerQueueTimer(
    TimerQueue:  HANDLE,
    Timer:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CancelTimerQueueTimer(
            TimerQueue,
            Timer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteTimerQueue(
    TimerQueue:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DeleteTimerQueue(
            TimerQueue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePrivateNamespaceA(
    lpPrivateNamespaceAttributes:  LPSECURITY_ATTRIBUTES,
    lpBoundaryDescriptor:  LPVOID,
    lpAliasPrefix:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return CreatePrivateNamespaceA(
            lpPrivateNamespaceAttributes,
            lpBoundaryDescriptor,
            lpAliasPrefix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenPrivateNamespaceA(
    lpBoundaryDescriptor:  LPVOID,
    lpAliasPrefix:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenPrivateNamespaceA(
            lpBoundaryDescriptor,
            lpAliasPrefix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateBoundaryDescriptorA(
    Name:  LPCSTR,
    Flags:  ULONG    
) ->  HANDLE
{
    unsafe {
        return CreateBoundaryDescriptorA(
            Name,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddIntegrityLabelToBoundaryDescriptor(
    BoundaryDescriptor: *mut HANDLE,
    IntegrityLabel:  PSID    
) ->  BOOL
{
    unsafe {
        return AddIntegrityLabelToBoundaryDescriptor(
            BoundaryDescriptor,
            IntegrityLabel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentHwProfileA(
    lpHwProfileInfo:  LPHW_PROFILE_INFOA    
) ->  BOOL
{
    unsafe {
        return GetCurrentHwProfileA(
            lpHwProfileInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentHwProfileW(
    lpHwProfileInfo:  LPHW_PROFILE_INFOW    
) ->  BOOL
{
    unsafe {
        return GetCurrentHwProfileW(
            lpHwProfileInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerifyVersionInfoA(
    lpVersionInformation:  LPOSVERSIONINFOEXA,
    dwTypeMask:  DWORD,
    dwlConditionMask:  DWORDLONG    
) ->  BOOL
{
    unsafe {
        return VerifyVersionInfoA(
            lpVersionInformation,
            dwTypeMask,
            dwlConditionMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerifyVersionInfoW(
    lpVersionInformation:  LPOSVERSIONINFOEXW,
    dwTypeMask:  DWORD,
    dwlConditionMask:  DWORDLONG    
) ->  BOOL
{
    unsafe {
        return VerifyVersionInfoW(
            lpVersionInformation,
            dwTypeMask,
            dwlConditionMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SystemTimeToTzSpecificLocalTime(
    lpTimeZoneInformation: *const TIME_ZONE_INFORMATION,
    lpUniversalTime: *const SYSTEMTIME,
    lpLocalTime:  LPSYSTEMTIME    
) ->  BOOL
{
    unsafe {
        return SystemTimeToTzSpecificLocalTime(
            lpTimeZoneInformation,
            lpUniversalTime,
            lpLocalTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TzSpecificLocalTimeToSystemTime(
    lpTimeZoneInformation: *const TIME_ZONE_INFORMATION,
    lpLocalTime: *const SYSTEMTIME,
    lpUniversalTime:  LPSYSTEMTIME    
) ->  BOOL
{
    unsafe {
        return TzSpecificLocalTimeToSystemTime(
            lpTimeZoneInformation,
            lpLocalTime,
            lpUniversalTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FileTimeToSystemTime(
    lpFileTime: *const FILETIME,
    lpSystemTime:  LPSYSTEMTIME    
) ->  BOOL
{
    unsafe {
        return FileTimeToSystemTime(
            lpFileTime,
            lpSystemTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SystemTimeToFileTime(
    lpSystemTime: *const SYSTEMTIME,
    lpFileTime:  LPFILETIME    
) ->  BOOL
{
    unsafe {
        return SystemTimeToFileTime(
            lpSystemTime,
            lpFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTimeZoneInformation(
    lpTimeZoneInformation:  LPTIME_ZONE_INFORMATION    
) ->  DWORD
{
    unsafe {
        return GetTimeZoneInformation(
            lpTimeZoneInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTimeZoneInformation(
    lpTimeZoneInformation: *const TIME_ZONE_INFORMATION    
) ->  BOOL
{
    unsafe {
        return SetTimeZoneInformation(
            lpTimeZoneInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDynamicTimeZoneInformation(
    lpTimeZoneInformation: *const DYNAMIC_TIME_ZONE_INFORMATION    
) ->  BOOL
{
    unsafe {
        return SetDynamicTimeZoneInformation(
            lpTimeZoneInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDynamicTimeZoneInformation(
    pTimeZoneInformation:  PDYNAMIC_TIME_ZONE_INFORMATION    
) ->  DWORD
{
    unsafe {
        return GetDynamicTimeZoneInformation(
            pTimeZoneInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTimeZoneInformationForYear(
    wYear:  USHORT,
    pdtzi:  PDYNAMIC_TIME_ZONE_INFORMATION,
    ptzi:  LPTIME_ZONE_INFORMATION    
) ->  BOOL
{
    unsafe {
        return GetTimeZoneInformationForYear(
            wYear,
            pdtzi,
            ptzi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDynamicTimeZoneInformation(
    dwIndex:  DWORD,
    lpTimeZoneInformation:  PDYNAMIC_TIME_ZONE_INFORMATION    
) ->  DWORD
{
    unsafe {
        return EnumDynamicTimeZoneInformation(
            dwIndex,
            lpTimeZoneInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDynamicTimeZoneInformationEffectiveYears(
    lpTimeZoneInformation:  PDYNAMIC_TIME_ZONE_INFORMATION,
    FirstYear:  LPDWORD,
    LastYear:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetDynamicTimeZoneInformationEffectiveYears(
            lpTimeZoneInformation,
            FirstYear,
            LastYear
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SystemTimeToTzSpecificLocalTimeEx(
    lpTimeZoneInformation: *const DYNAMIC_TIME_ZONE_INFORMATION,
    lpUniversalTime: *const SYSTEMTIME,
    lpLocalTime:  LPSYSTEMTIME    
) ->  BOOL
{
    unsafe {
        return SystemTimeToTzSpecificLocalTimeEx(
            lpTimeZoneInformation,
            lpUniversalTime,
            lpLocalTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TzSpecificLocalTimeToSystemTimeEx(
    lpTimeZoneInformation: *const DYNAMIC_TIME_ZONE_INFORMATION,
    lpLocalTime: *const SYSTEMTIME,
    lpUniversalTime:  LPSYSTEMTIME    
) ->  BOOL
{
    unsafe {
        return TzSpecificLocalTimeToSystemTimeEx(
            lpTimeZoneInformation,
            lpLocalTime,
            lpUniversalTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalFileTimeToLocalSystemTime(
    timeZoneInformation: *const TIME_ZONE_INFORMATION,
    localFileTime: *const FILETIME,
    localSystemTime: *mut SYSTEMTIME    
) ->  BOOL
{
    unsafe {
        return LocalFileTimeToLocalSystemTime(
            timeZoneInformation,
            localFileTime,
            localSystemTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocalSystemTimeToLocalFileTime(
    timeZoneInformation: *const TIME_ZONE_INFORMATION,
    localSystemTime: *const SYSTEMTIME,
    localFileTime: *mut FILETIME    
) ->  BOOL
{
    unsafe {
        return LocalSystemTimeToLocalFileTime(
            timeZoneInformation,
            localSystemTime,
            localFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSystemPowerState(
    fSuspend:  BOOL,
    fForce:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetSystemPowerState(
            fSuspend,
            fForce
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemPowerStatus(
    lpSystemPowerStatus:  LPSYSTEM_POWER_STATUS    
) ->  BOOL
{
    unsafe {
        return GetSystemPowerStatus(
            lpSystemPowerStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapUserPhysicalPagesScatter(
    VirtualAddresses: *mut PVOID,
    NumberOfPages:  ULONG_PTR,
    PageArray:  PULONG_PTR    
) ->  BOOL
{
    unsafe {
        return MapUserPhysicalPagesScatter(
            VirtualAddresses,
            NumberOfPages,
            PageArray
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateJobObjectA(
    lpJobAttributes:  LPSECURITY_ATTRIBUTES,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return CreateJobObjectA(
            lpJobAttributes,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenJobObjectA(
    dwDesiredAccess:  DWORD,
    bInheritHandle:  BOOL,
    lpName:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return OpenJobObjectA(
            dwDesiredAccess,
            bInheritHandle,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateJobSet(
    NumJob:  ULONG,
    UserJobSet:  PJOB_SET_ARRAY,
    Flags:  ULONG    
) ->  BOOL
{
    unsafe {
        return CreateJobSet(
            NumJob,
            UserJobSet,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstVolumeA(
    lpszVolumeName:  LPSTR,
    cchBufferLength:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstVolumeA(
            lpszVolumeName,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextVolumeA(
    hFindVolume:  HANDLE,
    lpszVolumeName:  LPSTR,
    cchBufferLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return FindNextVolumeA(
            hFindVolume,
            lpszVolumeName,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstVolumeMountPointA(
    lpszRootPathName:  LPCSTR,
    lpszVolumeMountPoint:  LPSTR,
    cchBufferLength:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstVolumeMountPointA(
            lpszRootPathName,
            lpszVolumeMountPoint,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstVolumeMountPointW(
    lpszRootPathName:  LPCWSTR,
    lpszVolumeMountPoint:  LPWSTR,
    cchBufferLength:  DWORD    
) ->  HANDLE
{
    unsafe {
        return FindFirstVolumeMountPointW(
            lpszRootPathName,
            lpszVolumeMountPoint,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextVolumeMountPointA(
    hFindVolumeMountPoint:  HANDLE,
    lpszVolumeMountPoint:  LPSTR,
    cchBufferLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return FindNextVolumeMountPointA(
            hFindVolumeMountPoint,
            lpszVolumeMountPoint,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextVolumeMountPointW(
    hFindVolumeMountPoint:  HANDLE,
    lpszVolumeMountPoint:  LPWSTR,
    cchBufferLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return FindNextVolumeMountPointW(
            hFindVolumeMountPoint,
            lpszVolumeMountPoint,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindVolumeMountPointClose(
    hFindVolumeMountPoint:  HANDLE    
) ->  BOOL
{
    unsafe {
        return FindVolumeMountPointClose(
            hFindVolumeMountPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetVolumeMountPointA(
    lpszVolumeMountPoint:  LPCSTR,
    lpszVolumeName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetVolumeMountPointA(
            lpszVolumeMountPoint,
            lpszVolumeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetVolumeMountPointW(
    lpszVolumeMountPoint:  LPCWSTR,
    lpszVolumeName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetVolumeMountPointW(
            lpszVolumeMountPoint,
            lpszVolumeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteVolumeMountPointA(
    lpszVolumeMountPoint:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return DeleteVolumeMountPointA(
            lpszVolumeMountPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumeNameForVolumeMountPointA(
    lpszVolumeMountPoint:  LPCSTR,
    lpszVolumeName:  LPSTR,
    cchBufferLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumeNameForVolumeMountPointA(
            lpszVolumeMountPoint,
            lpszVolumeName,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumePathNameA(
    lpszFileName:  LPCSTR,
    lpszVolumePathName:  LPSTR,
    cchBufferLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumePathNameA(
            lpszFileName,
            lpszVolumePathName,
            cchBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetVolumePathNamesForVolumeNameA(
    lpszVolumeName:  LPCSTR,
    lpszVolumePathNames:  LPCH,
    cchBufferLength:  DWORD,
    lpcchReturnLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetVolumePathNamesForVolumeNameA(
            lpszVolumeName,
            lpszVolumePathNames,
            cchBufferLength,
            lpcchReturnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateActCtxA(
    pActCtx:  PCACTCTXA    
) ->  HANDLE
{
    unsafe {
        return CreateActCtxA(
            pActCtx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateActCtxW(
    pActCtx:  PCACTCTXW    
) ->  HANDLE
{
    unsafe {
        return CreateActCtxW(
            pActCtx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddRefActCtx(
    hActCtx:  HANDLE    
)
{
    unsafe {
        return AddRefActCtx(
            hActCtx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseActCtx(
    hActCtx:  HANDLE    
)
{
    unsafe {
        return ReleaseActCtx(
            hActCtx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ZombifyActCtx(
    hActCtx:  HANDLE    
) ->  BOOL
{
    unsafe {
        return ZombifyActCtx(
            hActCtx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ActivateActCtx(
    hActCtx:  HANDLE,
    lpCookie: *mut ULONG_PTR    
) ->  BOOL
{
    unsafe {
        return ActivateActCtx(
            hActCtx,
            lpCookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeactivateActCtx(
    dwFlags:  DWORD,
    ulCookie:  ULONG_PTR    
) ->  BOOL
{
    unsafe {
        return DeactivateActCtx(
            dwFlags,
            ulCookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentActCtx(
    lphActCtx: *mut HANDLE    
) ->  BOOL
{
    unsafe {
        return GetCurrentActCtx(
            lphActCtx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindActCtxSectionStringA(
    dwFlags:  DWORD,
    lpExtensionGuid: *const GUID,
    ulSectionId:  ULONG,
    lpStringToFind:  LPCSTR,
    ReturnedData:  PACTCTX_SECTION_KEYED_DATA    
) ->  BOOL
{
    unsafe {
        return FindActCtxSectionStringA(
            dwFlags,
            lpExtensionGuid,
            ulSectionId,
            lpStringToFind,
            ReturnedData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindActCtxSectionStringW(
    dwFlags:  DWORD,
    lpExtensionGuid: *const GUID,
    ulSectionId:  ULONG,
    lpStringToFind:  LPCWSTR,
    ReturnedData:  PACTCTX_SECTION_KEYED_DATA    
) ->  BOOL
{
    unsafe {
        return FindActCtxSectionStringW(
            dwFlags,
            lpExtensionGuid,
            ulSectionId,
            lpStringToFind,
            ReturnedData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindActCtxSectionGuid(
    dwFlags:  DWORD,
    lpExtensionGuid: *const GUID,
    ulSectionId:  ULONG,
    lpGuidToFind: *const GUID,
    ReturnedData:  PACTCTX_SECTION_KEYED_DATA    
) ->  BOOL
{
    unsafe {
        return FindActCtxSectionGuid(
            dwFlags,
            lpExtensionGuid,
            ulSectionId,
            lpGuidToFind,
            ReturnedData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryActCtxW(
    dwFlags:  DWORD,
    hActCtx:  HANDLE,
    pvSubInstance:  PVOID,
    ulInfoClass:  ULONG,
    pvBuffer:  PVOID,
    cbBuffer:  SIZE_T,
    pcbWrittenOrRequired: *mut SIZE_T    
) ->  BOOL
{
    unsafe {
        return QueryActCtxW(
            dwFlags,
            hActCtx,
            pvSubInstance,
            ulInfoClass,
            pvBuffer,
            cbBuffer,
            pcbWrittenOrRequired
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WTSGetActiveConsoleSessionId(
    
) ->  DWORD
{
    unsafe {
        return WTSGetActiveConsoleSessionId(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WTSGetServiceSessionId(
    
) ->  DWORD
{
    unsafe {
        return WTSGetServiceSessionId(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WTSIsServerContainer(
    
) ->  BOOLEAN
{
    unsafe {
        return WTSIsServerContainer(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetActiveProcessorGroupCount(
    
) ->  WORD
{
    unsafe {
        return GetActiveProcessorGroupCount(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMaximumProcessorGroupCount(
    
) ->  WORD
{
    unsafe {
        return GetMaximumProcessorGroupCount(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetActiveProcessorCount(
    GroupNumber:  WORD    
) ->  DWORD
{
    unsafe {
        return GetActiveProcessorCount(
            GroupNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMaximumProcessorCount(
    GroupNumber:  WORD    
) ->  DWORD
{
    unsafe {
        return GetMaximumProcessorCount(
            GroupNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaProcessorNode(
    Processor:  UCHAR,
    NodeNumber:  PUCHAR    
) ->  BOOL
{
    unsafe {
        return GetNumaProcessorNode(
            Processor,
            NodeNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaNodeNumberFromHandle(
    hFile:  HANDLE,
    NodeNumber:  PUSHORT    
) ->  BOOL
{
    unsafe {
        return GetNumaNodeNumberFromHandle(
            hFile,
            NodeNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaProcessorNodeEx(
    Processor:  PPROCESSOR_NUMBER,
    NodeNumber:  PUSHORT    
) ->  BOOL
{
    unsafe {
        return GetNumaProcessorNodeEx(
            Processor,
            NodeNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaNodeProcessorMask(
    Node:  UCHAR,
    ProcessorMask:  PULONGLONG    
) ->  BOOL
{
    unsafe {
        return GetNumaNodeProcessorMask(
            Node,
            ProcessorMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaAvailableMemoryNode(
    Node:  UCHAR,
    AvailableBytes:  PULONGLONG    
) ->  BOOL
{
    unsafe {
        return GetNumaAvailableMemoryNode(
            Node,
            AvailableBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaAvailableMemoryNodeEx(
    Node:  USHORT,
    AvailableBytes:  PULONGLONG    
) ->  BOOL
{
    unsafe {
        return GetNumaAvailableMemoryNodeEx(
            Node,
            AvailableBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumaProximityNode(
    ProximityId:  ULONG,
    NodeNumber:  PUCHAR    
) ->  BOOL
{
    unsafe {
        return GetNumaProximityNode(
            ProximityId,
            NodeNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterApplicationRecoveryCallback(
    pRecoveyCallback:  APPLICATION_RECOVERY_CALLBACK,
    pvParameter:  PVOID,
    dwPingInterval:  DWORD,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return RegisterApplicationRecoveryCallback(
            pRecoveyCallback,
            pvParameter,
            dwPingInterval,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterApplicationRecoveryCallback(
    
) ->  HRESULT
{
    unsafe {
        return UnregisterApplicationRecoveryCallback(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterApplicationRestart(
    pwzCommandline:  PCWSTR,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return RegisterApplicationRestart(
            pwzCommandline,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterApplicationRestart(
    
) ->  HRESULT
{
    unsafe {
        return UnregisterApplicationRestart(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetApplicationRecoveryCallback(
    hProcess:  HANDLE,
    pRecoveryCallback: *mut APPLICATION_RECOVERY_CALLBACK,
    ppvParameter: *mut PVOID,
    pdwPingInterval:  PDWORD,
    pdwFlags:  PDWORD    
) ->  HRESULT
{
    unsafe {
        return GetApplicationRecoveryCallback(
            hProcess,
            pRecoveryCallback,
            ppvParameter,
            pdwPingInterval,
            pdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetApplicationRestartSettings(
    hProcess:  HANDLE,
    pwzCommandline:  PWSTR,
    pcchSize:  PDWORD,
    pdwFlags:  PDWORD    
) ->  HRESULT
{
    unsafe {
        return GetApplicationRestartSettings(
            hProcess,
            pwzCommandline,
            pcchSize,
            pdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ApplicationRecoveryInProgress(
    pbCancelled:  PBOOL    
) ->  HRESULT
{
    unsafe {
        return ApplicationRecoveryInProgress(
            pbCancelled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ApplicationRecoveryFinished(
    bSuccess:  BOOL    
)
{
    unsafe {
        return ApplicationRecoveryFinished(
            bSuccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileInformationByHandleEx(
    hFile:  HANDLE,
    FileInformationClass:  FILE_INFO_BY_HANDLE_CLASS,
    lpFileInformation:  LPVOID,
    dwBufferSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetFileInformationByHandleEx(
            hFile,
            FileInformationClass,
            lpFileInformation,
            dwBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenFileById(
    hVolumeHint:  HANDLE,
    lpFileId:  LPFILE_ID_DESCRIPTOR,
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    dwFlagsAndAttributes:  DWORD    
) ->  HANDLE
{
    unsafe {
        return OpenFileById(
            hVolumeHint,
            lpFileId,
            dwDesiredAccess,
            dwShareMode,
            lpSecurityAttributes,
            dwFlagsAndAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSymbolicLinkA(
    lpSymlinkFileName:  LPCSTR,
    lpTargetFileName:  LPCSTR,
    dwFlags:  DWORD    
) ->  BOOLEAN
{
    unsafe {
        return CreateSymbolicLinkA(
            lpSymlinkFileName,
            lpTargetFileName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSymbolicLinkW(
    lpSymlinkFileName:  LPCWSTR,
    lpTargetFileName:  LPCWSTR,
    dwFlags:  DWORD    
) ->  BOOLEAN
{
    unsafe {
        return CreateSymbolicLinkW(
            lpSymlinkFileName,
            lpTargetFileName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryActCtxSettingsW(
    dwFlags:  DWORD,
    hActCtx:  HANDLE,
    settingsNameSpace:  PCWSTR,
    settingName:  PCWSTR,
    pvBuffer:  PWSTR,
    dwBuffer:  SIZE_T,
    pdwWrittenOrRequired: *mut SIZE_T    
) ->  BOOL
{
    unsafe {
        return QueryActCtxSettingsW(
            dwFlags,
            hActCtx,
            settingsNameSpace,
            settingName,
            pvBuffer,
            dwBuffer,
            pdwWrittenOrRequired
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSymbolicLinkTransactedA(
    lpSymlinkFileName:  LPCSTR,
    lpTargetFileName:  LPCSTR,
    dwFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  BOOLEAN
{
    unsafe {
        return CreateSymbolicLinkTransactedA(
            lpSymlinkFileName,
            lpTargetFileName,
            dwFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSymbolicLinkTransactedW(
    lpSymlinkFileName:  LPCWSTR,
    lpTargetFileName:  LPCWSTR,
    dwFlags:  DWORD,
    hTransaction:  HANDLE    
) ->  BOOLEAN
{
    unsafe {
        return CreateSymbolicLinkTransactedW(
            lpSymlinkFileName,
            lpTargetFileName,
            dwFlags,
            hTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReplacePartitionUnit(
    TargetPartition:  PWSTR,
    SparePartition:  PWSTR,
    Flags:  ULONG    
) ->  BOOL
{
    unsafe {
        return ReplacePartitionUnit(
            TargetPartition,
            SparePartition,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddSecureMemoryCacheCallback(
    pfnCallBack:  PSECURE_MEMORY_CACHE_CALLBACK    
) ->  BOOL
{
    unsafe {
        return AddSecureMemoryCacheCallback(
            pfnCallBack
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveSecureMemoryCacheCallback(
    pfnCallBack:  PSECURE_MEMORY_CACHE_CALLBACK    
) ->  BOOL
{
    unsafe {
        return RemoveSecureMemoryCacheCallback(
            pfnCallBack
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyContext(
    Destination:  PCONTEXT,
    ContextFlags:  DWORD,
    Source:  PCONTEXT    
) ->  BOOL
{
    unsafe {
        return CopyContext(
            Destination,
            ContextFlags,
            Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeContext(
    Buffer:  PVOID,
    ContextFlags:  DWORD,
    Context: *mut PCONTEXT,
    ContextLength:  PDWORD    
) ->  BOOL
{
    unsafe {
        return InitializeContext(
            Buffer,
            ContextFlags,
            Context,
            ContextLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeContext2(
    Buffer:  PVOID,
    ContextFlags:  DWORD,
    Context: *mut PCONTEXT,
    ContextLength:  PDWORD,
    XStateCompactionMask:  ULONG64    
) ->  BOOL
{
    unsafe {
        return InitializeContext2(
            Buffer,
            ContextFlags,
            Context,
            ContextLength,
            XStateCompactionMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnabledXStateFeatures(
    
) ->  DWORD64
{
    unsafe {
        return GetEnabledXStateFeatures(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetXStateFeaturesMask(
    Context:  PCONTEXT,
    FeatureMask:  PDWORD64    
) ->  BOOL
{
    unsafe {
        return GetXStateFeaturesMask(
            Context,
            FeatureMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocateXStateFeature(
    Context:  PCONTEXT,
    FeatureId:  DWORD,
    Length:  PDWORD    
) ->  PVOID
{
    unsafe {
        return LocateXStateFeature(
            Context,
            FeatureId,
            Length
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetXStateFeaturesMask(
    Context:  PCONTEXT,
    FeatureMask:  DWORD64    
) ->  BOOL
{
    unsafe {
        return SetXStateFeaturesMask(
            Context,
            FeatureMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnableThreadProfiling(
    ThreadHandle:  HANDLE,
    Flags:  DWORD,
    HardwareCounters:  DWORD64,
    PerformanceDataHandle: *mut HANDLE    
) ->  DWORD
{
    unsafe {
        return EnableThreadProfiling(
            ThreadHandle,
            Flags,
            HardwareCounters,
            PerformanceDataHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DisableThreadProfiling(
    PerformanceDataHandle:  HANDLE    
) ->  DWORD
{
    unsafe {
        return DisableThreadProfiling(
            PerformanceDataHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryThreadProfiling(
    ThreadHandle:  HANDLE,
    Enabled:  PBOOLEAN    
) ->  DWORD
{
    unsafe {
        return QueryThreadProfiling(
            ThreadHandle,
            Enabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadThreadProfilingData(
    PerformanceDataHandle:  HANDLE,
    Flags:  DWORD,
    PerformanceData:  PPERFORMANCE_DATA    
) ->  DWORD
{
    unsafe {
        return ReadThreadProfilingData(
            PerformanceDataHandle,
            Flags,
            PerformanceData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RaiseCustomSystemEventTrigger(
    CustomSystemEventTriggerConfig:  PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG    
) ->  DWORD
{
    unsafe {
        return RaiseCustomSystemEventTrigger(
            CustomSystemEventTriggerConfig
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddFontResourceA(
    arg1:  LPCSTR    
) ->  c_int
{
    unsafe {
        return AddFontResourceA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddFontResourceW(
    arg1:  LPCWSTR    
) ->  c_int
{
    unsafe {
        return AddFontResourceW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AnimatePalette(
    hPal:  HPALETTE,
    iStartIndex:  UINT,
    cEntries:  UINT,
    ppe: *const PALETTEENTRY    
) ->  BOOL
{
    unsafe {
        return AnimatePalette(
            hPal,
            iStartIndex,
            cEntries,
            ppe
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Arc(
    hdc:  HDC,
    x1:  c_int,
    y1:  c_int,
    x2:  c_int,
    y2:  c_int,
    x3:  c_int,
    y3:  c_int,
    x4:  c_int,
    y4:  c_int    
) ->  BOOL
{
    unsafe {
        return Arc(
            hdc,
            x1,
            y1,
            x2,
            y2,
            x3,
            y3,
            x4,
            y4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BitBlt(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    cx:  c_int,
    cy:  c_int,
    hdcSrc:  HDC,
    x1:  c_int,
    y1:  c_int,
    rop:  DWORD    
) ->  BOOL
{
    unsafe {
        return BitBlt(
            hdc,
            x,
            y,
            cx,
            cy,
            hdcSrc,
            x1,
            y1,
            rop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelDC(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return CancelDC(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Chord(
    hdc:  HDC,
    x1:  c_int,
    y1:  c_int,
    x2:  c_int,
    y2:  c_int,
    x3:  c_int,
    y3:  c_int,
    x4:  c_int,
    y4:  c_int    
) ->  BOOL
{
    unsafe {
        return Chord(
            hdc,
            x1,
            y1,
            x2,
            y2,
            x3,
            y3,
            x4,
            y4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChoosePixelFormat(
    hdc:  HDC,
    ppfd: *const PIXELFORMATDESCRIPTOR    
) ->  c_int
{
    unsafe {
        return ChoosePixelFormat(
            hdc,
            ppfd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseMetaFile(
    hdc:  HDC    
) ->  HMETAFILE
{
    unsafe {
        return CloseMetaFile(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CombineRgn(
    hrgnDst:  HRGN,
    hrgnSrc1:  HRGN,
    hrgnSrc2:  HRGN,
    iMode:  c_int    
) ->  c_int
{
    unsafe {
        return CombineRgn(
            hrgnDst,
            hrgnSrc1,
            hrgnSrc2,
            iMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyMetaFileA(
    arg1:  HMETAFILE,
    arg2:  LPCSTR    
) ->  HMETAFILE
{
    unsafe {
        return CopyMetaFileA(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyMetaFileW(
    arg1:  HMETAFILE,
    arg2:  LPCWSTR    
) ->  HMETAFILE
{
    unsafe {
        return CopyMetaFileW(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateBitmap(
    nWidth:  c_int,
    nHeight:  c_int,
    nPlanes:  UINT,
    nBitCount:  UINT,
    lpBits: *const c_void    
) ->  HBITMAP
{
    unsafe {
        return CreateBitmap(
            nWidth,
            nHeight,
            nPlanes,
            nBitCount,
            lpBits
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateBitmapIndirect(
    pbm: *const BITMAP    
) ->  HBITMAP
{
    unsafe {
        return CreateBitmapIndirect(
            pbm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateBrushIndirect(
    plbrush: *const LOGBRUSH    
) ->  HBRUSH
{
    unsafe {
        return CreateBrushIndirect(
            plbrush
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateCompatibleBitmap(
    hdc:  HDC,
    cx:  c_int,
    cy:  c_int    
) ->  HBITMAP
{
    unsafe {
        return CreateCompatibleBitmap(
            hdc,
            cx,
            cy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDiscardableBitmap(
    hdc:  HDC,
    cx:  c_int,
    cy:  c_int    
) ->  HBITMAP
{
    unsafe {
        return CreateDiscardableBitmap(
            hdc,
            cx,
            cy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateCompatibleDC(
    hdc:  HDC    
) ->  HDC
{
    unsafe {
        return CreateCompatibleDC(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDCA(
    pwszDriver:  LPCSTR,
    pwszDevice:  LPCSTR,
    pszPort:  LPCSTR,
    pdm: *const DEVMODEA    
) ->  HDC
{
    unsafe {
        return CreateDCA(
            pwszDriver,
            pwszDevice,
            pszPort,
            pdm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDCW(
    pwszDriver:  LPCWSTR,
    pwszDevice:  LPCWSTR,
    pszPort:  LPCWSTR,
    pdm: *const DEVMODEW    
) ->  HDC
{
    unsafe {
        return CreateDCW(
            pwszDriver,
            pwszDevice,
            pszPort,
            pdm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDIBitmap(
    hdc:  HDC,
    pbmih: *const BITMAPINFOHEADER,
    flInit:  DWORD,
    pjBits: *const c_void,
    pbmi: *const BITMAPINFO,
    iUsage:  UINT    
) ->  HBITMAP
{
    unsafe {
        return CreateDIBitmap(
            hdc,
            pbmih,
            flInit,
            pjBits,
            pbmi,
            iUsage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDIBPatternBrush(
    h:  HGLOBAL,
    iUsage:  UINT    
) ->  HBRUSH
{
    unsafe {
        return CreateDIBPatternBrush(
            h,
            iUsage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDIBPatternBrushPt(
    lpPackedDIB: *const c_void,
    iUsage:  UINT    
) ->  HBRUSH
{
    unsafe {
        return CreateDIBPatternBrushPt(
            lpPackedDIB,
            iUsage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEllipticRgn(
    x1:  c_int,
    y1:  c_int,
    x2:  c_int,
    y2:  c_int    
) ->  HRGN
{
    unsafe {
        return CreateEllipticRgn(
            x1,
            y1,
            x2,
            y2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEllipticRgnIndirect(
    lprect: *const RECT    
) ->  HRGN
{
    unsafe {
        return CreateEllipticRgnIndirect(
            lprect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFontIndirectA(
    lplf: *const LOGFONTA    
) ->  HFONT
{
    unsafe {
        return CreateFontIndirectA(
            lplf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFontIndirectW(
    lplf: *const LOGFONTW    
) ->  HFONT
{
    unsafe {
        return CreateFontIndirectW(
            lplf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFontA(
    cHeight:  c_int,
    cWidth:  c_int,
    cEscapement:  c_int,
    cOrientation:  c_int,
    cWeight:  c_int,
    bItalic:  DWORD,
    bUnderline:  DWORD,
    bStrikeOut:  DWORD,
    iCharSet:  DWORD,
    iOutPrecision:  DWORD,
    iClipPrecision:  DWORD,
    iQuality:  DWORD,
    iPitchAndFamily:  DWORD,
    pszFaceName:  LPCSTR    
) ->  HFONT
{
    unsafe {
        return CreateFontA(
            cHeight,
            cWidth,
            cEscapement,
            cOrientation,
            cWeight,
            bItalic,
            bUnderline,
            bStrikeOut,
            iCharSet,
            iOutPrecision,
            iClipPrecision,
            iQuality,
            iPitchAndFamily,
            pszFaceName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFontW(
    cHeight:  c_int,
    cWidth:  c_int,
    cEscapement:  c_int,
    cOrientation:  c_int,
    cWeight:  c_int,
    bItalic:  DWORD,
    bUnderline:  DWORD,
    bStrikeOut:  DWORD,
    iCharSet:  DWORD,
    iOutPrecision:  DWORD,
    iClipPrecision:  DWORD,
    iQuality:  DWORD,
    iPitchAndFamily:  DWORD,
    pszFaceName:  LPCWSTR    
) ->  HFONT
{
    unsafe {
        return CreateFontW(
            cHeight,
            cWidth,
            cEscapement,
            cOrientation,
            cWeight,
            bItalic,
            bUnderline,
            bStrikeOut,
            iCharSet,
            iOutPrecision,
            iClipPrecision,
            iQuality,
            iPitchAndFamily,
            pszFaceName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateHatchBrush(
    iHatch:  c_int,
    color:  COLORREF    
) ->  HBRUSH
{
    unsafe {
        return CreateHatchBrush(
            iHatch,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateICA(
    pszDriver:  LPCSTR,
    pszDevice:  LPCSTR,
    pszPort:  LPCSTR,
    pdm: *const DEVMODEA    
) ->  HDC
{
    unsafe {
        return CreateICA(
            pszDriver,
            pszDevice,
            pszPort,
            pdm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateICW(
    pszDriver:  LPCWSTR,
    pszDevice:  LPCWSTR,
    pszPort:  LPCWSTR,
    pdm: *const DEVMODEW    
) ->  HDC
{
    unsafe {
        return CreateICW(
            pszDriver,
            pszDevice,
            pszPort,
            pdm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMetaFileA(
    pszFile:  LPCSTR    
) ->  HDC
{
    unsafe {
        return CreateMetaFileA(
            pszFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMetaFileW(
    pszFile:  LPCWSTR    
) ->  HDC
{
    unsafe {
        return CreateMetaFileW(
            pszFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePalette(
    plpal: *const LOGPALETTE    
) ->  HPALETTE
{
    unsafe {
        return CreatePalette(
            plpal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePen(
    iStyle:  c_int,
    cWidth:  c_int,
    color:  COLORREF    
) ->  HPEN
{
    unsafe {
        return CreatePen(
            iStyle,
            cWidth,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePenIndirect(
    plpen: *const LOGPEN    
) ->  HPEN
{
    unsafe {
        return CreatePenIndirect(
            plpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePolyPolygonRgn(
    pptl: *const POINT,
    pc: *const INT,
    cPoly:  c_int,
    iMode:  c_int    
) ->  HRGN
{
    unsafe {
        return CreatePolyPolygonRgn(
            pptl,
            pc,
            cPoly,
            iMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePatternBrush(
    hbm:  HBITMAP    
) ->  HBRUSH
{
    unsafe {
        return CreatePatternBrush(
            hbm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateRectRgn(
    x1:  c_int,
    y1:  c_int,
    x2:  c_int,
    y2:  c_int    
) ->  HRGN
{
    unsafe {
        return CreateRectRgn(
            x1,
            y1,
            x2,
            y2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateRectRgnIndirect(
    lprect: *const RECT    
) ->  HRGN
{
    unsafe {
        return CreateRectRgnIndirect(
            lprect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateRoundRectRgn(
    x1:  c_int,
    y1:  c_int,
    x2:  c_int,
    y2:  c_int,
    w:  c_int,
    h:  c_int    
) ->  HRGN
{
    unsafe {
        return CreateRoundRectRgn(
            x1,
            y1,
            x2,
            y2,
            w,
            h
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateScalableFontResourceA(
    fdwHidden:  DWORD,
    lpszFont:  LPCSTR,
    lpszFile:  LPCSTR,
    lpszPath:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return CreateScalableFontResourceA(
            fdwHidden,
            lpszFont,
            lpszFile,
            lpszPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateScalableFontResourceW(
    fdwHidden:  DWORD,
    lpszFont:  LPCWSTR,
    lpszFile:  LPCWSTR,
    lpszPath:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return CreateScalableFontResourceW(
            fdwHidden,
            lpszFont,
            lpszFile,
            lpszPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSolidBrush(
    color:  COLORREF    
) ->  HBRUSH
{
    unsafe {
        return CreateSolidBrush(
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteDC(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return DeleteDC(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteMetaFile(
    hmf:  HMETAFILE    
) ->  BOOL
{
    unsafe {
        return DeleteMetaFile(
            hmf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteObject(
    ho:  HGDIOBJ    
) ->  BOOL
{
    unsafe {
        return DeleteObject(
            ho
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DescribePixelFormat(
    hdc:  HDC,
    iPixelFormat:  c_int,
    nBytes:  UINT,
    ppfd:  LPPIXELFORMATDESCRIPTOR    
) ->  c_int
{
    unsafe {
        return DescribePixelFormat(
            hdc,
            iPixelFormat,
            nBytes,
            ppfd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeviceCapabilitiesA(
    pDevice:  LPCSTR,
    pPort:  LPCSTR,
    fwCapability:  WORD,
    pOutput:  LPSTR,
    pDevMode: *const DEVMODEA    
) ->  c_int
{
    unsafe {
        return DeviceCapabilitiesA(
            pDevice,
            pPort,
            fwCapability,
            pOutput,
            pDevMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeviceCapabilitiesW(
    pDevice:  LPCWSTR,
    pPort:  LPCWSTR,
    fwCapability:  WORD,
    pOutput:  LPWSTR,
    pDevMode: *const DEVMODEW    
) ->  c_int
{
    unsafe {
        return DeviceCapabilitiesW(
            pDevice,
            pPort,
            fwCapability,
            pOutput,
            pDevMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawEscape(
    hdc:  HDC,
    iEscape:  c_int,
    cjIn:  c_int,
    lpIn:  LPCSTR    
) ->  c_int
{
    unsafe {
        return DrawEscape(
            hdc,
            iEscape,
            cjIn,
            lpIn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Ellipse(
    hdc:  HDC,
    left:  c_int,
    top:  c_int,
    right:  c_int,
    bottom:  c_int    
) ->  BOOL
{
    unsafe {
        return Ellipse(
            hdc,
            left,
            top,
            right,
            bottom
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumFontFamiliesExA(
    hdc:  HDC,
    lpLogfont:  LPLOGFONTA,
    lpProc:  FONTENUMPROCA,
    lParam:  LPARAM,
    dwFlags:  DWORD    
) ->  c_int
{
    unsafe {
        return EnumFontFamiliesExA(
            hdc,
            lpLogfont,
            lpProc,
            lParam,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumFontFamiliesExW(
    hdc:  HDC,
    lpLogfont:  LPLOGFONTW,
    lpProc:  FONTENUMPROCW,
    lParam:  LPARAM,
    dwFlags:  DWORD    
) ->  c_int
{
    unsafe {
        return EnumFontFamiliesExW(
            hdc,
            lpLogfont,
            lpProc,
            lParam,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumFontFamiliesA(
    hdc:  HDC,
    lpLogfont:  LPCSTR,
    lpProc:  FONTENUMPROCA,
    lParam:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumFontFamiliesA(
            hdc,
            lpLogfont,
            lpProc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumFontFamiliesW(
    hdc:  HDC,
    lpLogfont:  LPCWSTR,
    lpProc:  FONTENUMPROCW,
    lParam:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumFontFamiliesW(
            hdc,
            lpLogfont,
            lpProc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumFontsA(
    hdc:  HDC,
    lpLogfont:  LPCSTR,
    lpProc:  FONTENUMPROCA,
    lParam:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumFontsA(
            hdc,
            lpLogfont,
            lpProc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumFontsW(
    hdc:  HDC,
    lpLogfont:  LPCWSTR,
    lpProc:  FONTENUMPROCW,
    lParam:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumFontsW(
            hdc,
            lpLogfont,
            lpProc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumObjects(
    hdc:  HDC,
    nType:  c_int,
    lpFunc:  GOBJENUMPROC,
    lParam:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumObjects(
            hdc,
            nType,
            lpFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EqualRgn(
    hrgn1:  HRGN,
    hrgn2:  HRGN    
) ->  BOOL
{
    unsafe {
        return EqualRgn(
            hrgn1,
            hrgn2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Escape(
    hdc:  HDC,
    iEscape:  c_int,
    cjIn:  c_int,
    pvIn:  LPCSTR,
    pvOut:  LPVOID    
) ->  c_int
{
    unsafe {
        return Escape(
            hdc,
            iEscape,
            cjIn,
            pvIn,
            pvOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtEscape(
    hdc:  HDC,
    iEscape:  c_int,
    cjInput:  c_int,
    lpInData:  LPCSTR,
    cjOutput:  c_int,
    lpOutData:  LPSTR    
) ->  c_int
{
    unsafe {
        return ExtEscape(
            hdc,
            iEscape,
            cjInput,
            lpInData,
            cjOutput,
            lpOutData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExcludeClipRect(
    hdc:  HDC,
    left:  c_int,
    top:  c_int,
    right:  c_int,
    bottom:  c_int    
) ->  c_int
{
    unsafe {
        return ExcludeClipRect(
            hdc,
            left,
            top,
            right,
            bottom
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtCreateRegion(
    lpx: *const XFORM,
    nCount:  DWORD,
    lpData: *const RGNDATA    
) ->  HRGN
{
    unsafe {
        return ExtCreateRegion(
            lpx,
            nCount,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtFloodFill(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    color:  COLORREF,
    type_:  UINT    
) ->  BOOL
{
    unsafe {
        return ExtFloodFill(
            hdc,
            x,
            y,
            color,
            type_
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FillRgn(
    hdc:  HDC,
    hrgn:  HRGN,
    hbr:  HBRUSH    
) ->  BOOL
{
    unsafe {
        return FillRgn(
            hdc,
            hrgn,
            hbr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FloodFill(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    color:  COLORREF    
) ->  BOOL
{
    unsafe {
        return FloodFill(
            hdc,
            x,
            y,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FrameRgn(
    hdc:  HDC,
    hrgn:  HRGN,
    hbr:  HBRUSH,
    w:  c_int,
    h:  c_int    
) ->  BOOL
{
    unsafe {
        return FrameRgn(
            hdc,
            hrgn,
            hbr,
            w,
            h
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetROP2(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetROP2(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAspectRatioFilterEx(
    hdc:  HDC,
    lpsize:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetAspectRatioFilterEx(
            hdc,
            lpsize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetBkColor(
    hdc:  HDC    
) ->  COLORREF
{
    unsafe {
        return GetBkColor(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDCBrushColor(
    hdc:  HDC    
) ->  COLORREF
{
    unsafe {
        return GetDCBrushColor(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDCPenColor(
    hdc:  HDC    
) ->  COLORREF
{
    unsafe {
        return GetDCPenColor(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetBkMode(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetBkMode(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetBitmapBits(
    hbit:  HBITMAP,
    cb:  LONG,
    lpvBits:  LPVOID    
) ->  LONG
{
    unsafe {
        return GetBitmapBits(
            hbit,
            cb,
            lpvBits
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetBitmapDimensionEx(
    hbit:  HBITMAP,
    lpsize:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetBitmapDimensionEx(
            hbit,
            lpsize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetBoundsRect(
    hdc:  HDC,
    lprect:  LPRECT,
    flags:  UINT    
) ->  UINT
{
    unsafe {
        return GetBoundsRect(
            hdc,
            lprect,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetBrushOrgEx(
    hdc:  HDC,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return GetBrushOrgEx(
            hdc,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharWidthA(
    hdc:  HDC,
    iFirst:  UINT,
    iLast:  UINT,
    lpBuffer:  LPINT    
) ->  BOOL
{
    unsafe {
        return GetCharWidthA(
            hdc,
            iFirst,
            iLast,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharWidthW(
    hdc:  HDC,
    iFirst:  UINT,
    iLast:  UINT,
    lpBuffer:  LPINT    
) ->  BOOL
{
    unsafe {
        return GetCharWidthW(
            hdc,
            iFirst,
            iLast,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharWidth32A(
    hdc:  HDC,
    iFirst:  UINT,
    iLast:  UINT,
    lpBuffer:  LPINT    
) ->  BOOL
{
    unsafe {
        return GetCharWidth32A(
            hdc,
            iFirst,
            iLast,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharWidth32W(
    hdc:  HDC,
    iFirst:  UINT,
    iLast:  UINT,
    lpBuffer:  LPINT    
) ->  BOOL
{
    unsafe {
        return GetCharWidth32W(
            hdc,
            iFirst,
            iLast,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharWidthFloatA(
    hdc:  HDC,
    iFirst:  UINT,
    iLast:  UINT,
    lpBuffer:  PFLOAT    
) ->  BOOL
{
    unsafe {
        return GetCharWidthFloatA(
            hdc,
            iFirst,
            iLast,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharWidthFloatW(
    hdc:  HDC,
    iFirst:  UINT,
    iLast:  UINT,
    lpBuffer:  PFLOAT    
) ->  BOOL
{
    unsafe {
        return GetCharWidthFloatW(
            hdc,
            iFirst,
            iLast,
            lpBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharABCWidthsA(
    hdc:  HDC,
    wFirst:  UINT,
    wLast:  UINT,
    lpABC:  LPABC    
) ->  BOOL
{
    unsafe {
        return GetCharABCWidthsA(
            hdc,
            wFirst,
            wLast,
            lpABC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharABCWidthsW(
    hdc:  HDC,
    wFirst:  UINT,
    wLast:  UINT,
    lpABC:  LPABC    
) ->  BOOL
{
    unsafe {
        return GetCharABCWidthsW(
            hdc,
            wFirst,
            wLast,
            lpABC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharABCWidthsFloatA(
    hdc:  HDC,
    iFirst:  UINT,
    iLast:  UINT,
    lpABC:  LPABCFLOAT    
) ->  BOOL
{
    unsafe {
        return GetCharABCWidthsFloatA(
            hdc,
            iFirst,
            iLast,
            lpABC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharABCWidthsFloatW(
    hdc:  HDC,
    iFirst:  UINT,
    iLast:  UINT,
    lpABC:  LPABCFLOAT    
) ->  BOOL
{
    unsafe {
        return GetCharABCWidthsFloatW(
            hdc,
            iFirst,
            iLast,
            lpABC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipBox(
    hdc:  HDC,
    lprect:  LPRECT    
) ->  c_int
{
    unsafe {
        return GetClipBox(
            hdc,
            lprect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipRgn(
    hdc:  HDC,
    hrgn:  HRGN    
) ->  c_int
{
    unsafe {
        return GetClipRgn(
            hdc,
            hrgn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMetaRgn(
    hdc:  HDC,
    hrgn:  HRGN    
) ->  c_int
{
    unsafe {
        return GetMetaRgn(
            hdc,
            hrgn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentObject(
    hdc:  HDC,
    type_:  UINT    
) ->  HGDIOBJ
{
    unsafe {
        return GetCurrentObject(
            hdc,
            type_
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentPositionEx(
    hdc:  HDC,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return GetCurrentPositionEx(
            hdc,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDeviceCaps(
    hdc:  HDC,
    index:  c_int    
) ->  c_int
{
    unsafe {
        return GetDeviceCaps(
            hdc,
            index
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDIBits(
    hdc:  HDC,
    hbm:  HBITMAP,
    start:  UINT,
    cLines:  UINT,
    lpvBits:  LPVOID,
    lpbmi:  LPBITMAPINFO,
    usage:  UINT    
) ->  c_int
{
    unsafe {
        return GetDIBits(
            hdc,
            hbm,
            start,
            cLines,
            lpvBits,
            lpbmi,
            usage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFontData(
    hdc:  HDC,
    dwTable:  DWORD,
    dwOffset:  DWORD,
    pvBuffer:  PVOID,
    cjBuffer:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetFontData(
            hdc,
            dwTable,
            dwOffset,
            pvBuffer,
            cjBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGlyphOutlineA(
    hdc:  HDC,
    uChar:  UINT,
    fuFormat:  UINT,
    lpgm:  LPGLYPHMETRICS,
    cjBuffer:  DWORD,
    pvBuffer:  LPVOID,
    lpmat2: *const MAT2    
) ->  DWORD
{
    unsafe {
        return GetGlyphOutlineA(
            hdc,
            uChar,
            fuFormat,
            lpgm,
            cjBuffer,
            pvBuffer,
            lpmat2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGlyphOutlineW(
    hdc:  HDC,
    uChar:  UINT,
    fuFormat:  UINT,
    lpgm:  LPGLYPHMETRICS,
    cjBuffer:  DWORD,
    pvBuffer:  LPVOID,
    lpmat2: *const MAT2    
) ->  DWORD
{
    unsafe {
        return GetGlyphOutlineW(
            hdc,
            uChar,
            fuFormat,
            lpgm,
            cjBuffer,
            pvBuffer,
            lpmat2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGraphicsMode(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetGraphicsMode(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMapMode(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetMapMode(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMetaFileBitsEx(
    hMF:  HMETAFILE,
    cbBuffer:  UINT,
    lpData:  LPVOID    
) ->  UINT
{
    unsafe {
        return GetMetaFileBitsEx(
            hMF,
            cbBuffer,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMetaFileA(
    lpName:  LPCSTR    
) ->  HMETAFILE
{
    unsafe {
        return GetMetaFileA(
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMetaFileW(
    lpName:  LPCWSTR    
) ->  HMETAFILE
{
    unsafe {
        return GetMetaFileW(
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNearestColor(
    hdc:  HDC,
    color:  COLORREF    
) ->  COLORREF
{
    unsafe {
        return GetNearestColor(
            hdc,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNearestPaletteIndex(
    h:  HPALETTE,
    color:  COLORREF    
) ->  UINT
{
    unsafe {
        return GetNearestPaletteIndex(
            h,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetObjectType(
    h:  HGDIOBJ    
) ->  DWORD
{
    unsafe {
        return GetObjectType(
            h
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOutlineTextMetricsA(
    hdc:  HDC,
    cjCopy:  UINT,
    potm:  LPOUTLINETEXTMETRICA    
) ->  UINT
{
    unsafe {
        return GetOutlineTextMetricsA(
            hdc,
            cjCopy,
            potm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOutlineTextMetricsW(
    hdc:  HDC,
    cjCopy:  UINT,
    potm:  LPOUTLINETEXTMETRICW    
) ->  UINT
{
    unsafe {
        return GetOutlineTextMetricsW(
            hdc,
            cjCopy,
            potm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPaletteEntries(
    hpal:  HPALETTE,
    iStart:  UINT,
    cEntries:  UINT,
    pPalEntries:  LPPALETTEENTRY    
) ->  UINT
{
    unsafe {
        return GetPaletteEntries(
            hpal,
            iStart,
            cEntries,
            pPalEntries
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPixel(
    hdc:  HDC,
    x:  c_int,
    y:  c_int    
) ->  COLORREF
{
    unsafe {
        return GetPixel(
            hdc,
            x,
            y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPixelFormat(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetPixelFormat(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPolyFillMode(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetPolyFillMode(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRasterizerCaps(
    lpraststat:  LPRASTERIZER_STATUS,
    cjBytes:  UINT    
) ->  BOOL
{
    unsafe {
        return GetRasterizerCaps(
            lpraststat,
            cjBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRandomRgn(
    hdc:  HDC,
    hrgn:  HRGN,
    i:  INT    
) ->  c_int
{
    unsafe {
        return GetRandomRgn(
            hdc,
            hrgn,
            i
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRegionData(
    hrgn:  HRGN,
    nCount:  DWORD,
    lpRgnData:  LPRGNDATA    
) ->  DWORD
{
    unsafe {
        return GetRegionData(
            hrgn,
            nCount,
            lpRgnData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRgnBox(
    hrgn:  HRGN,
    lprc:  LPRECT    
) ->  c_int
{
    unsafe {
        return GetRgnBox(
            hrgn,
            lprc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStockObject(
    i:  c_int    
) ->  HGDIOBJ
{
    unsafe {
        return GetStockObject(
            i
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStretchBltMode(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetStretchBltMode(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemPaletteEntries(
    hdc:  HDC,
    iStart:  UINT,
    cEntries:  UINT,
    pPalEntries:  LPPALETTEENTRY    
) ->  UINT
{
    unsafe {
        return GetSystemPaletteEntries(
            hdc,
            iStart,
            cEntries,
            pPalEntries
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemPaletteUse(
    hdc:  HDC    
) ->  UINT
{
    unsafe {
        return GetSystemPaletteUse(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextCharacterExtra(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetTextCharacterExtra(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextAlign(
    hdc:  HDC    
) ->  UINT
{
    unsafe {
        return GetTextAlign(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextColor(
    hdc:  HDC    
) ->  COLORREF
{
    unsafe {
        return GetTextColor(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextExtentPointA(
    hdc:  HDC,
    lpString:  LPCSTR,
    c:  c_int,
    lpsz:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetTextExtentPointA(
            hdc,
            lpString,
            c,
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextExtentPointW(
    hdc:  HDC,
    lpString:  LPCWSTR,
    c:  c_int,
    lpsz:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetTextExtentPointW(
            hdc,
            lpString,
            c,
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextExtentPoint32A(
    hdc:  HDC,
    lpString:  LPCSTR,
    c:  c_int,
    psizl:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetTextExtentPoint32A(
            hdc,
            lpString,
            c,
            psizl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextExtentPoint32W(
    hdc:  HDC,
    lpString:  LPCWSTR,
    c:  c_int,
    psizl:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetTextExtentPoint32W(
            hdc,
            lpString,
            c,
            psizl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextExtentExPointA(
    hdc:  HDC,
    lpszString:  LPCSTR,
    cchString:  c_int,
    nMaxExtent:  c_int,
    lpnFit:  LPINT,
    lpnDx:  LPINT,
    lpSize:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetTextExtentExPointA(
            hdc,
            lpszString,
            cchString,
            nMaxExtent,
            lpnFit,
            lpnDx,
            lpSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextExtentExPointW(
    hdc:  HDC,
    lpszString:  LPCWSTR,
    cchString:  c_int,
    nMaxExtent:  c_int,
    lpnFit:  LPINT,
    lpnDx:  LPINT,
    lpSize:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetTextExtentExPointW(
            hdc,
            lpszString,
            cchString,
            nMaxExtent,
            lpnFit,
            lpnDx,
            lpSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextCharset(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetTextCharset(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextCharsetInfo(
    hdc:  HDC,
    lpSig:  LPFONTSIGNATURE,
    dwFlags:  DWORD    
) ->  c_int
{
    unsafe {
        return GetTextCharsetInfo(
            hdc,
            lpSig,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TranslateCharsetInfo(
    lpSrc: *mut DWORD,
    lpCs:  LPCHARSETINFO,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return TranslateCharsetInfo(
            lpSrc,
            lpCs,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFontLanguageInfo(
    hdc:  HDC    
) ->  DWORD
{
    unsafe {
        return GetFontLanguageInfo(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharacterPlacementA(
    hdc:  HDC,
    lpString:  LPCSTR,
    nCount:  c_int,
    nMexExtent:  c_int,
    lpResults:  LPGCP_RESULTSA,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetCharacterPlacementA(
            hdc,
            lpString,
            nCount,
            nMexExtent,
            lpResults,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharacterPlacementW(
    hdc:  HDC,
    lpString:  LPCWSTR,
    nCount:  c_int,
    nMexExtent:  c_int,
    lpResults:  LPGCP_RESULTSW,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetCharacterPlacementW(
            hdc,
            lpString,
            nCount,
            nMexExtent,
            lpResults,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFontUnicodeRanges(
    hdc:  HDC,
    lpgs:  LPGLYPHSET    
) ->  DWORD
{
    unsafe {
        return GetFontUnicodeRanges(
            hdc,
            lpgs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGlyphIndicesA(
    hdc:  HDC,
    lpstr:  LPCSTR,
    c:  c_int,
    pgi:  LPWORD,
    fl:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetGlyphIndicesA(
            hdc,
            lpstr,
            c,
            pgi,
            fl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGlyphIndicesW(
    hdc:  HDC,
    lpstr:  LPCWSTR,
    c:  c_int,
    pgi:  LPWORD,
    fl:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetGlyphIndicesW(
            hdc,
            lpstr,
            c,
            pgi,
            fl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextExtentPointI(
    hdc:  HDC,
    pgiIn:  LPWORD,
    cgi:  c_int,
    psize:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetTextExtentPointI(
            hdc,
            pgiIn,
            cgi,
            psize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextExtentExPointI(
    hdc:  HDC,
    lpwszString:  LPWORD,
    cwchString:  c_int,
    nMaxExtent:  c_int,
    lpnFit:  LPINT,
    lpnDx:  LPINT,
    lpSize:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetTextExtentExPointI(
            hdc,
            lpwszString,
            cwchString,
            nMaxExtent,
            lpnFit,
            lpnDx,
            lpSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharWidthI(
    hdc:  HDC,
    giFirst:  UINT,
    cgi:  UINT,
    pgi:  LPWORD,
    piWidths:  LPINT    
) ->  BOOL
{
    unsafe {
        return GetCharWidthI(
            hdc,
            giFirst,
            cgi,
            pgi,
            piWidths
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCharABCWidthsI(
    hdc:  HDC,
    giFirst:  UINT,
    cgi:  UINT,
    pgi:  LPWORD,
    pabc:  LPABC    
) ->  BOOL
{
    unsafe {
        return GetCharABCWidthsI(
            hdc,
            giFirst,
            cgi,
            pgi,
            pabc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddFontResourceExA(
    name:  LPCSTR,
    fl:  DWORD,
    res:  PVOID    
) ->  c_int
{
    unsafe {
        return AddFontResourceExA(
            name,
            fl,
            res
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddFontResourceExW(
    name:  LPCWSTR,
    fl:  DWORD,
    res:  PVOID    
) ->  c_int
{
    unsafe {
        return AddFontResourceExW(
            name,
            fl,
            res
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveFontResourceExA(
    name:  LPCSTR,
    fl:  DWORD,
    pdv:  PVOID    
) ->  BOOL
{
    unsafe {
        return RemoveFontResourceExA(
            name,
            fl,
            pdv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveFontResourceExW(
    name:  LPCWSTR,
    fl:  DWORD,
    pdv:  PVOID    
) ->  BOOL
{
    unsafe {
        return RemoveFontResourceExW(
            name,
            fl,
            pdv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddFontMemResourceEx(
    pFileView:  PVOID,
    cjSize:  DWORD,
    pvResrved:  PVOID,
    pNumFonts: *mut DWORD    
) ->  HANDLE
{
    unsafe {
        return AddFontMemResourceEx(
            pFileView,
            cjSize,
            pvResrved,
            pNumFonts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveFontMemResourceEx(
    h:  HANDLE    
) ->  BOOL
{
    unsafe {
        return RemoveFontMemResourceEx(
            h
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFontIndirectExA(
    arg1: *const ENUMLOGFONTEXDVA    
) ->  HFONT
{
    unsafe {
        return CreateFontIndirectExA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFontIndirectExW(
    arg1: *const ENUMLOGFONTEXDVW    
) ->  HFONT
{
    unsafe {
        return CreateFontIndirectExW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetViewportExtEx(
    hdc:  HDC,
    lpsize:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetViewportExtEx(
            hdc,
            lpsize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetViewportOrgEx(
    hdc:  HDC,
    lppoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return GetViewportOrgEx(
            hdc,
            lppoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowExtEx(
    hdc:  HDC,
    lpsize:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return GetWindowExtEx(
            hdc,
            lpsize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowOrgEx(
    hdc:  HDC,
    lppoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return GetWindowOrgEx(
            hdc,
            lppoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IntersectClipRect(
    hdc:  HDC,
    left:  c_int,
    top:  c_int,
    right:  c_int,
    bottom:  c_int    
) ->  c_int
{
    unsafe {
        return IntersectClipRect(
            hdc,
            left,
            top,
            right,
            bottom
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InvertRgn(
    hdc:  HDC,
    hrgn:  HRGN    
) ->  BOOL
{
    unsafe {
        return InvertRgn(
            hdc,
            hrgn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LineDDA(
    xStart:  c_int,
    yStart:  c_int,
    xEnd:  c_int,
    yEnd:  c_int,
    lpProc:  LINEDDAPROC,
    data:  LPARAM    
) ->  BOOL
{
    unsafe {
        return LineDDA(
            xStart,
            yStart,
            xEnd,
            yEnd,
            lpProc,
            data
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LineTo(
    hdc:  HDC,
    x:  c_int,
    y:  c_int    
) ->  BOOL
{
    unsafe {
        return LineTo(
            hdc,
            x,
            y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MaskBlt(
    hdcDest:  HDC,
    xDest:  c_int,
    yDest:  c_int,
    width:  c_int,
    height:  c_int,
    hdcSrc:  HDC,
    xSrc:  c_int,
    ySrc:  c_int,
    hbmMask:  HBITMAP,
    xMask:  c_int,
    yMask:  c_int,
    rop:  DWORD    
) ->  BOOL
{
    unsafe {
        return MaskBlt(
            hdcDest,
            xDest,
            yDest,
            width,
            height,
            hdcSrc,
            xSrc,
            ySrc,
            hbmMask,
            xMask,
            yMask,
            rop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PlgBlt(
    hdcDest:  HDC,
    lpPoint: *const POINT,
    hdcSrc:  HDC,
    xSrc:  c_int,
    ySrc:  c_int,
    width:  c_int,
    height:  c_int,
    hbmMask:  HBITMAP,
    xMask:  c_int,
    yMask:  c_int    
) ->  BOOL
{
    unsafe {
        return PlgBlt(
            hdcDest,
            lpPoint,
            hdcSrc,
            xSrc,
            ySrc,
            width,
            height,
            hbmMask,
            xMask,
            yMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OffsetClipRgn(
    hdc:  HDC,
    x:  c_int,
    y:  c_int    
) ->  c_int
{
    unsafe {
        return OffsetClipRgn(
            hdc,
            x,
            y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OffsetRgn(
    hrgn:  HRGN,
    x:  c_int,
    y:  c_int    
) ->  c_int
{
    unsafe {
        return OffsetRgn(
            hrgn,
            x,
            y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PatBlt(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    w:  c_int,
    h:  c_int,
    rop:  DWORD    
) ->  BOOL
{
    unsafe {
        return PatBlt(
            hdc,
            x,
            y,
            w,
            h,
            rop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Pie(
    hdc:  HDC,
    left:  c_int,
    top:  c_int,
    right:  c_int,
    bottom:  c_int,
    xr1:  c_int,
    yr1:  c_int,
    xr2:  c_int,
    yr2:  c_int    
) ->  BOOL
{
    unsafe {
        return Pie(
            hdc,
            left,
            top,
            right,
            bottom,
            xr1,
            yr1,
            xr2,
            yr2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PlayMetaFile(
    hdc:  HDC,
    hmf:  HMETAFILE    
) ->  BOOL
{
    unsafe {
        return PlayMetaFile(
            hdc,
            hmf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PaintRgn(
    hdc:  HDC,
    hrgn:  HRGN    
) ->  BOOL
{
    unsafe {
        return PaintRgn(
            hdc,
            hrgn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PolyPolygon(
    hdc:  HDC,
    apt: *const POINT,
    asz: *const INT,
    csz:  c_int    
) ->  BOOL
{
    unsafe {
        return PolyPolygon(
            hdc,
            apt,
            asz,
            csz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PtInRegion(
    hrgn:  HRGN,
    x:  c_int,
    y:  c_int    
) ->  BOOL
{
    unsafe {
        return PtInRegion(
            hrgn,
            x,
            y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PtVisible(
    hdc:  HDC,
    x:  c_int,
    y:  c_int    
) ->  BOOL
{
    unsafe {
        return PtVisible(
            hdc,
            x,
            y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RectInRegion(
    hrgn:  HRGN,
    lprect: *const RECT    
) ->  BOOL
{
    unsafe {
        return RectInRegion(
            hrgn,
            lprect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RectVisible(
    hdc:  HDC,
    lprect: *const RECT    
) ->  BOOL
{
    unsafe {
        return RectVisible(
            hdc,
            lprect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Rectangle(
    hdc:  HDC,
    left:  c_int,
    top:  c_int,
    right:  c_int,
    bottom:  c_int    
) ->  BOOL
{
    unsafe {
        return Rectangle(
            hdc,
            left,
            top,
            right,
            bottom
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RestoreDC(
    hdc:  HDC,
    nSavedDC:  c_int    
) ->  BOOL
{
    unsafe {
        return RestoreDC(
            hdc,
            nSavedDC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResetDCA(
    hdc:  HDC,
    lpdm: *const DEVMODEA    
) ->  HDC
{
    unsafe {
        return ResetDCA(
            hdc,
            lpdm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResetDCW(
    hdc:  HDC,
    lpdm: *const DEVMODEW    
) ->  HDC
{
    unsafe {
        return ResetDCW(
            hdc,
            lpdm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RealizePalette(
    hdc:  HDC    
) ->  UINT
{
    unsafe {
        return RealizePalette(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveFontResourceA(
    lpFileName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return RemoveFontResourceA(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveFontResourceW(
    lpFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return RemoveFontResourceW(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RoundRect(
    hdc:  HDC,
    left:  c_int,
    top:  c_int,
    right:  c_int,
    bottom:  c_int,
    width:  c_int,
    height:  c_int    
) ->  BOOL
{
    unsafe {
        return RoundRect(
            hdc,
            left,
            top,
            right,
            bottom,
            width,
            height
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResizePalette(
    hpal:  HPALETTE,
    n:  UINT    
) ->  BOOL
{
    unsafe {
        return ResizePalette(
            hpal,
            n
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SaveDC(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return SaveDC(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SelectClipRgn(
    hdc:  HDC,
    hrgn:  HRGN    
) ->  c_int
{
    unsafe {
        return SelectClipRgn(
            hdc,
            hrgn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtSelectClipRgn(
    hdc:  HDC,
    hrgn:  HRGN,
    mode:  c_int    
) ->  c_int
{
    unsafe {
        return ExtSelectClipRgn(
            hdc,
            hrgn,
            mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMetaRgn(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return SetMetaRgn(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SelectObject(
    hdc:  HDC,
    h:  HGDIOBJ    
) ->  HGDIOBJ
{
    unsafe {
        return SelectObject(
            hdc,
            h
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SelectPalette(
    hdc:  HDC,
    hPal:  HPALETTE,
    bForceBkgd:  BOOL    
) ->  HPALETTE
{
    unsafe {
        return SelectPalette(
            hdc,
            hPal,
            bForceBkgd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetBkColor(
    hdc:  HDC,
    color:  COLORREF    
) ->  COLORREF
{
    unsafe {
        return SetBkColor(
            hdc,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDCBrushColor(
    hdc:  HDC,
    color:  COLORREF    
) ->  COLORREF
{
    unsafe {
        return SetDCBrushColor(
            hdc,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDCPenColor(
    hdc:  HDC,
    color:  COLORREF    
) ->  COLORREF
{
    unsafe {
        return SetDCPenColor(
            hdc,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetBkMode(
    hdc:  HDC,
    mode:  c_int    
) ->  c_int
{
    unsafe {
        return SetBkMode(
            hdc,
            mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetBitmapBits(
    hbm:  HBITMAP,
    cb:  DWORD,
    pvBits: *const c_void    
) ->  LONG
{
    unsafe {
        return SetBitmapBits(
            hbm,
            cb,
            pvBits
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetBoundsRect(
    hdc:  HDC,
    lprect: *const RECT,
    flags:  UINT    
) ->  UINT
{
    unsafe {
        return SetBoundsRect(
            hdc,
            lprect,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDIBits(
    hdc:  HDC,
    hbm:  HBITMAP,
    start:  UINT,
    cLines:  UINT,
    lpBits: *const c_void,
    lpbmi: *const BITMAPINFO,
    ColorUse:  UINT    
) ->  c_int
{
    unsafe {
        return SetDIBits(
            hdc,
            hbm,
            start,
            cLines,
            lpBits,
            lpbmi,
            ColorUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDIBitsToDevice(
    hdc:  HDC,
    xDest:  c_int,
    yDest:  c_int,
    w:  DWORD,
    h:  DWORD,
    xSrc:  c_int,
    ySrc:  c_int,
    StartScan:  UINT,
    cLines:  UINT,
    lpvBits: *const c_void,
    lpbmi: *const BITMAPINFO,
    ColorUse:  UINT    
) ->  c_int
{
    unsafe {
        return SetDIBitsToDevice(
            hdc,
            xDest,
            yDest,
            w,
            h,
            xSrc,
            ySrc,
            StartScan,
            cLines,
            lpvBits,
            lpbmi,
            ColorUse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMapperFlags(
    hdc:  HDC,
    flags:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetMapperFlags(
            hdc,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetGraphicsMode(
    hdc:  HDC,
    iMode:  c_int    
) ->  c_int
{
    unsafe {
        return SetGraphicsMode(
            hdc,
            iMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMapMode(
    hdc:  HDC,
    iMode:  c_int    
) ->  c_int
{
    unsafe {
        return SetMapMode(
            hdc,
            iMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetLayout(
    hdc:  HDC,
    l:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetLayout(
            hdc,
            l
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLayout(
    hdc:  HDC    
) ->  DWORD
{
    unsafe {
        return GetLayout(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMetaFileBitsEx(
    cbBuffer:  UINT,
    lpData: *const BYTE    
) ->  HMETAFILE
{
    unsafe {
        return SetMetaFileBitsEx(
            cbBuffer,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPaletteEntries(
    hpal:  HPALETTE,
    iStart:  UINT,
    cEntries:  UINT,
    pPalEntries: *const PALETTEENTRY    
) ->  UINT
{
    unsafe {
        return SetPaletteEntries(
            hpal,
            iStart,
            cEntries,
            pPalEntries
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPixel(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    color:  COLORREF    
) ->  COLORREF
{
    unsafe {
        return SetPixel(
            hdc,
            x,
            y,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPixelV(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    color:  COLORREF    
) ->  BOOL
{
    unsafe {
        return SetPixelV(
            hdc,
            x,
            y,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPixelFormat(
    hdc:  HDC,
    format:  c_int,
    ppfd: *const PIXELFORMATDESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return SetPixelFormat(
            hdc,
            format,
            ppfd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPolyFillMode(
    hdc:  HDC,
    mode:  c_int    
) ->  c_int
{
    unsafe {
        return SetPolyFillMode(
            hdc,
            mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StretchBlt(
    hdcDest:  HDC,
    xDest:  c_int,
    yDest:  c_int,
    wDest:  c_int,
    hDest:  c_int,
    hdcSrc:  HDC,
    xSrc:  c_int,
    ySrc:  c_int,
    wSrc:  c_int,
    hSrc:  c_int,
    rop:  DWORD    
) ->  BOOL
{
    unsafe {
        return StretchBlt(
            hdcDest,
            xDest,
            yDest,
            wDest,
            hDest,
            hdcSrc,
            xSrc,
            ySrc,
            wSrc,
            hSrc,
            rop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetRectRgn(
    hrgn:  HRGN,
    left:  c_int,
    top:  c_int,
    right:  c_int,
    bottom:  c_int    
) ->  BOOL
{
    unsafe {
        return SetRectRgn(
            hrgn,
            left,
            top,
            right,
            bottom
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StretchDIBits(
    hdc:  HDC,
    xDest:  c_int,
    yDest:  c_int,
    DestWidth:  c_int,
    DestHeight:  c_int,
    xSrc:  c_int,
    ySrc:  c_int,
    SrcWidth:  c_int,
    SrcHeight:  c_int,
    lpBits: *const c_void,
    lpbmi: *const BITMAPINFO,
    iUsage:  UINT,
    rop:  DWORD    
) ->  c_int
{
    unsafe {
        return StretchDIBits(
            hdc,
            xDest,
            yDest,
            DestWidth,
            DestHeight,
            xSrc,
            ySrc,
            SrcWidth,
            SrcHeight,
            lpBits,
            lpbmi,
            iUsage,
            rop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetROP2(
    hdc:  HDC,
    rop2:  c_int    
) ->  c_int
{
    unsafe {
        return SetROP2(
            hdc,
            rop2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetStretchBltMode(
    hdc:  HDC,
    mode:  c_int    
) ->  c_int
{
    unsafe {
        return SetStretchBltMode(
            hdc,
            mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSystemPaletteUse(
    hdc:  HDC,
    use_:  UINT    
) ->  UINT
{
    unsafe {
        return SetSystemPaletteUse(
            hdc,
            use_
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTextCharacterExtra(
    hdc:  HDC,
    extra:  c_int    
) ->  c_int
{
    unsafe {
        return SetTextCharacterExtra(
            hdc,
            extra
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTextColor(
    hdc:  HDC,
    color:  COLORREF    
) ->  COLORREF
{
    unsafe {
        return SetTextColor(
            hdc,
            color
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTextAlign(
    hdc:  HDC,
    align:  UINT    
) ->  UINT
{
    unsafe {
        return SetTextAlign(
            hdc,
            align
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTextJustification(
    hdc:  HDC,
    extra:  c_int,
    count:  c_int    
) ->  BOOL
{
    unsafe {
        return SetTextJustification(
            hdc,
            extra,
            count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateColors(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return UpdateColors(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AlphaBlend(
    hdcDest:  HDC,
    xoriginDest:  c_int,
    yoriginDest:  c_int,
    wDest:  c_int,
    hDest:  c_int,
    hdcSrc:  HDC,
    xoriginSrc:  c_int,
    yoriginSrc:  c_int,
    wSrc:  c_int,
    hSrc:  c_int,
    ftn:  BLENDFUNCTION    
) ->  BOOL
{
    unsafe {
        return AlphaBlend(
            hdcDest,
            xoriginDest,
            yoriginDest,
            wDest,
            hDest,
            hdcSrc,
            xoriginSrc,
            yoriginSrc,
            wSrc,
            hSrc,
            ftn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TransparentBlt(
    hdcDest:  HDC,
    xoriginDest:  c_int,
    yoriginDest:  c_int,
    wDest:  c_int,
    hDest:  c_int,
    hdcSrc:  HDC,
    xoriginSrc:  c_int,
    yoriginSrc:  c_int,
    wSrc:  c_int,
    hSrc:  c_int,
    crTransparent:  UINT    
) ->  BOOL
{
    unsafe {
        return TransparentBlt(
            hdcDest,
            xoriginDest,
            yoriginDest,
            wDest,
            hDest,
            hdcSrc,
            xoriginSrc,
            yoriginSrc,
            wSrc,
            hSrc,
            crTransparent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GradientFill(
    hdc:  HDC,
    pVertex:  PTRIVERTEX,
    nVertex:  ULONG,
    pMesh:  PVOID,
    nMesh:  ULONG,
    ulMode:  ULONG    
) ->  BOOL
{
    unsafe {
        return GradientFill(
            hdc,
            pVertex,
            nVertex,
            pMesh,
            nMesh,
            ulMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GdiAlphaBlend(
    hdcDest:  HDC,
    xoriginDest:  c_int,
    yoriginDest:  c_int,
    wDest:  c_int,
    hDest:  c_int,
    hdcSrc:  HDC,
    xoriginSrc:  c_int,
    yoriginSrc:  c_int,
    wSrc:  c_int,
    hSrc:  c_int,
    ftn:  BLENDFUNCTION    
) ->  BOOL
{
    unsafe {
        return GdiAlphaBlend(
            hdcDest,
            xoriginDest,
            yoriginDest,
            wDest,
            hDest,
            hdcSrc,
            xoriginSrc,
            yoriginSrc,
            wSrc,
            hSrc,
            ftn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GdiTransparentBlt(
    hdcDest:  HDC,
    xoriginDest:  c_int,
    yoriginDest:  c_int,
    wDest:  c_int,
    hDest:  c_int,
    hdcSrc:  HDC,
    xoriginSrc:  c_int,
    yoriginSrc:  c_int,
    wSrc:  c_int,
    hSrc:  c_int,
    crTransparent:  UINT    
) ->  BOOL
{
    unsafe {
        return GdiTransparentBlt(
            hdcDest,
            xoriginDest,
            yoriginDest,
            wDest,
            hDest,
            hdcSrc,
            xoriginSrc,
            yoriginSrc,
            wSrc,
            hSrc,
            crTransparent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GdiGradientFill(
    hdc:  HDC,
    pVertex:  PTRIVERTEX,
    nVertex:  ULONG,
    pMesh:  PVOID,
    nCount:  ULONG,
    ulMode:  ULONG    
) ->  BOOL
{
    unsafe {
        return GdiGradientFill(
            hdc,
            pVertex,
            nVertex,
            pMesh,
            nCount,
            ulMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PlayMetaFileRecord(
    hdc:  HDC,
    lpHandleTable:  LPHANDLETABLE,
    lpMR:  LPMETARECORD,
    noObjs:  UINT    
) ->  BOOL
{
    unsafe {
        return PlayMetaFileRecord(
            hdc,
            lpHandleTable,
            lpMR,
            noObjs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumMetaFile(
    hdc:  HDC,
    hmf:  HMETAFILE,
    proc_:  MFENUMPROC,
    param:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumMetaFile(
            hdc,
            hmf,
            proc_,
            param
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseEnhMetaFile(
    hdc:  HDC    
) ->  HENHMETAFILE
{
    unsafe {
        return CloseEnhMetaFile(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyEnhMetaFileA(
    hEnh:  HENHMETAFILE,
    lpFileName:  LPCSTR    
) ->  HENHMETAFILE
{
    unsafe {
        return CopyEnhMetaFileA(
            hEnh,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyEnhMetaFileW(
    hEnh:  HENHMETAFILE,
    lpFileName:  LPCWSTR    
) ->  HENHMETAFILE
{
    unsafe {
        return CopyEnhMetaFileW(
            hEnh,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEnhMetaFileA(
    hdc:  HDC,
    lpFilename:  LPCSTR,
    lprc: *const RECT,
    lpDesc:  LPCSTR    
) ->  HDC
{
    unsafe {
        return CreateEnhMetaFileA(
            hdc,
            lpFilename,
            lprc,
            lpDesc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateEnhMetaFileW(
    hdc:  HDC,
    lpFilename:  LPCWSTR,
    lprc: *const RECT,
    lpDesc:  LPCWSTR    
) ->  HDC
{
    unsafe {
        return CreateEnhMetaFileW(
            hdc,
            lpFilename,
            lprc,
            lpDesc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteEnhMetaFile(
    hmf:  HENHMETAFILE    
) ->  BOOL
{
    unsafe {
        return DeleteEnhMetaFile(
            hmf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumEnhMetaFile(
    hdc:  HDC,
    hmf:  HENHMETAFILE,
    proc_:  ENHMFENUMPROC,
    param:  LPVOID,
    lpRect: *const RECT    
) ->  BOOL
{
    unsafe {
        return EnumEnhMetaFile(
            hdc,
            hmf,
            proc_,
            param,
            lpRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnhMetaFileA(
    lpName:  LPCSTR    
) ->  HENHMETAFILE
{
    unsafe {
        return GetEnhMetaFileA(
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnhMetaFileW(
    lpName:  LPCWSTR    
) ->  HENHMETAFILE
{
    unsafe {
        return GetEnhMetaFileW(
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnhMetaFileBits(
    hEMF:  HENHMETAFILE,
    nSize:  UINT,
    lpData:  LPBYTE    
) ->  UINT
{
    unsafe {
        return GetEnhMetaFileBits(
            hEMF,
            nSize,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnhMetaFileDescriptionA(
    hemf:  HENHMETAFILE,
    cchBuffer:  UINT,
    lpDescription:  LPSTR    
) ->  UINT
{
    unsafe {
        return GetEnhMetaFileDescriptionA(
            hemf,
            cchBuffer,
            lpDescription
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnhMetaFileDescriptionW(
    hemf:  HENHMETAFILE,
    cchBuffer:  UINT,
    lpDescription:  LPWSTR    
) ->  UINT
{
    unsafe {
        return GetEnhMetaFileDescriptionW(
            hemf,
            cchBuffer,
            lpDescription
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnhMetaFileHeader(
    hemf:  HENHMETAFILE,
    nSize:  UINT,
    lpEnhMetaHeader:  LPENHMETAHEADER    
) ->  UINT
{
    unsafe {
        return GetEnhMetaFileHeader(
            hemf,
            nSize,
            lpEnhMetaHeader
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnhMetaFilePaletteEntries(
    hemf:  HENHMETAFILE,
    nNumEntries:  UINT,
    lpPaletteEntries:  LPPALETTEENTRY    
) ->  UINT
{
    unsafe {
        return GetEnhMetaFilePaletteEntries(
            hemf,
            nNumEntries,
            lpPaletteEntries
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEnhMetaFilePixelFormat(
    hemf:  HENHMETAFILE,
    cbBuffer:  UINT,
    ppfd: *mut PIXELFORMATDESCRIPTOR    
) ->  UINT
{
    unsafe {
        return GetEnhMetaFilePixelFormat(
            hemf,
            cbBuffer,
            ppfd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWinMetaFileBits(
    hemf:  HENHMETAFILE,
    cbData16:  UINT,
    pData16:  LPBYTE,
    iMapMode:  INT,
    hdcRef:  HDC    
) ->  UINT
{
    unsafe {
        return GetWinMetaFileBits(
            hemf,
            cbData16,
            pData16,
            iMapMode,
            hdcRef
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PlayEnhMetaFile(
    hdc:  HDC,
    hmf:  HENHMETAFILE,
    lprect: *const RECT    
) ->  BOOL
{
    unsafe {
        return PlayEnhMetaFile(
            hdc,
            hmf,
            lprect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PlayEnhMetaFileRecord(
    hdc:  HDC,
    pht:  LPHANDLETABLE,
    pmr: *const ENHMETARECORD,
    cht:  UINT    
) ->  BOOL
{
    unsafe {
        return PlayEnhMetaFileRecord(
            hdc,
            pht,
            pmr,
            cht
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEnhMetaFileBits(
    nSize:  UINT,
    pb: *const BYTE    
) ->  HENHMETAFILE
{
    unsafe {
        return SetEnhMetaFileBits(
            nSize,
            pb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWinMetaFileBits(
    nSize:  UINT,
    lpMeta16Data: *const BYTE,
    hdcRef:  HDC,
    lpMFP: *const METAFILEPICT    
) ->  HENHMETAFILE
{
    unsafe {
        return SetWinMetaFileBits(
            nSize,
            lpMeta16Data,
            hdcRef,
            lpMFP
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GdiComment(
    hdc:  HDC,
    nSize:  UINT,
    lpData: *const BYTE    
) ->  BOOL
{
    unsafe {
        return GdiComment(
            hdc,
            nSize,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextMetricsA(
    hdc:  HDC,
    lptm:  LPTEXTMETRICA    
) ->  BOOL
{
    unsafe {
        return GetTextMetricsA(
            hdc,
            lptm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextMetricsW(
    hdc:  HDC,
    lptm:  LPTEXTMETRICW    
) ->  BOOL
{
    unsafe {
        return GetTextMetricsW(
            hdc,
            lptm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AngleArc(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    r:  DWORD,
    StartAngle:  FLOAT,
    SweepAngle:  FLOAT    
) ->  BOOL
{
    unsafe {
        return AngleArc(
            hdc,
            x,
            y,
            r,
            StartAngle,
            SweepAngle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PolyPolyline(
    hdc:  HDC,
    apt: *const POINT,
    asz: *const DWORD,
    csz:  DWORD    
) ->  BOOL
{
    unsafe {
        return PolyPolyline(
            hdc,
            apt,
            asz,
            csz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWorldTransform(
    hdc:  HDC,
    lpxf:  LPXFORM    
) ->  BOOL
{
    unsafe {
        return GetWorldTransform(
            hdc,
            lpxf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWorldTransform(
    hdc:  HDC,
    lpxf: *const XFORM    
) ->  BOOL
{
    unsafe {
        return SetWorldTransform(
            hdc,
            lpxf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ModifyWorldTransform(
    hdc:  HDC,
    lpxf: *const XFORM,
    mode:  DWORD    
) ->  BOOL
{
    unsafe {
        return ModifyWorldTransform(
            hdc,
            lpxf,
            mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CombineTransform(
    lpxfOut:  LPXFORM,
    lpxf1: *const XFORM,
    lpxf2: *const XFORM    
) ->  BOOL
{
    unsafe {
        return CombineTransform(
            lpxfOut,
            lpxf1,
            lpxf2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDIBSection(
    hdc:  HDC,
    pbmi: *const BITMAPINFO,
    usage:  UINT,
    ppvBits: *mut *mut c_void,
    hSection:  HANDLE,
    offset:  DWORD    
) ->  HBITMAP
{
    unsafe {
        return CreateDIBSection(
            hdc,
            pbmi,
            usage,
            ppvBits,
            hSection,
            offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDIBColorTable(
    hdc:  HDC,
    iStart:  UINT,
    cEntries:  UINT,
    prgbq: *mut RGBQUAD    
) ->  UINT
{
    unsafe {
        return GetDIBColorTable(
            hdc,
            iStart,
            cEntries,
            prgbq
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDIBColorTable(
    hdc:  HDC,
    iStart:  UINT,
    cEntries:  UINT,
    prgbq: *const RGBQUAD    
) ->  UINT
{
    unsafe {
        return SetDIBColorTable(
            hdc,
            iStart,
            cEntries,
            prgbq
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetColorAdjustment(
    hdc:  HDC,
    lpca: *const COLORADJUSTMENT    
) ->  BOOL
{
    unsafe {
        return SetColorAdjustment(
            hdc,
            lpca
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetColorAdjustment(
    hdc:  HDC,
    lpca:  LPCOLORADJUSTMENT    
) ->  BOOL
{
    unsafe {
        return GetColorAdjustment(
            hdc,
            lpca
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateHalftonePalette(
    hdc:  HDC    
) ->  HPALETTE
{
    unsafe {
        return CreateHalftonePalette(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartDocA(
    hdc:  HDC,
    lpdi: *const DOCINFOA    
) ->  c_int
{
    unsafe {
        return StartDocA(
            hdc,
            lpdi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartDocW(
    hdc:  HDC,
    lpdi: *const DOCINFOW    
) ->  c_int
{
    unsafe {
        return StartDocW(
            hdc,
            lpdi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndDoc(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return EndDoc(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartPage(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return StartPage(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndPage(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return EndPage(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AbortDoc(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return AbortDoc(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetAbortProc(
    hdc:  HDC,
    proc_:  ABORTPROC    
) ->  c_int
{
    unsafe {
        return SetAbortProc(
            hdc,
            proc_
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AbortPath(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return AbortPath(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ArcTo(
    hdc:  HDC,
    left:  c_int,
    top:  c_int,
    right:  c_int,
    bottom:  c_int,
    xr1:  c_int,
    yr1:  c_int,
    xr2:  c_int,
    yr2:  c_int    
) ->  BOOL
{
    unsafe {
        return ArcTo(
            hdc,
            left,
            top,
            right,
            bottom,
            xr1,
            yr1,
            xr2,
            yr2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BeginPath(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return BeginPath(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseFigure(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return CloseFigure(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndPath(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return EndPath(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FillPath(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return FillPath(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlattenPath(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return FlattenPath(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPath(
    hdc:  HDC,
    apt:  LPPOINT,
    aj:  LPBYTE,
    cpt:  c_int    
) ->  c_int
{
    unsafe {
        return GetPath(
            hdc,
            apt,
            aj,
            cpt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PathToRegion(
    hdc:  HDC    
) ->  HRGN
{
    unsafe {
        return PathToRegion(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PolyDraw(
    hdc:  HDC,
    apt: *const POINT,
    aj: *const BYTE,
    cpt:  c_int    
) ->  BOOL
{
    unsafe {
        return PolyDraw(
            hdc,
            apt,
            aj,
            cpt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SelectClipPath(
    hdc:  HDC,
    mode:  c_int    
) ->  BOOL
{
    unsafe {
        return SelectClipPath(
            hdc,
            mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetArcDirection(
    hdc:  HDC,
    dir:  c_int    
) ->  c_int
{
    unsafe {
        return SetArcDirection(
            hdc,
            dir
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMiterLimit(
    hdc:  HDC,
    limit:  FLOAT,
    old:  PFLOAT    
) ->  BOOL
{
    unsafe {
        return SetMiterLimit(
            hdc,
            limit,
            old
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StrokeAndFillPath(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return StrokeAndFillPath(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StrokePath(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return StrokePath(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WidenPath(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return WidenPath(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtCreatePen(
    iPenStyle:  DWORD,
    cWidth:  DWORD,
    plbrush: *const LOGBRUSH,
    cStyle:  DWORD,
    pstyle: *const DWORD    
) ->  HPEN
{
    unsafe {
        return ExtCreatePen(
            iPenStyle,
            cWidth,
            plbrush,
            cStyle,
            pstyle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMiterLimit(
    hdc:  HDC,
    plimit:  PFLOAT    
) ->  BOOL
{
    unsafe {
        return GetMiterLimit(
            hdc,
            plimit
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetArcDirection(
    hdc:  HDC    
) ->  c_int
{
    unsafe {
        return GetArcDirection(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetObjectA(
    h:  HANDLE,
    c:  c_int,
    pv:  LPVOID    
) ->  c_int
{
    unsafe {
        return GetObjectA(
            h,
            c,
            pv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetObjectW(
    h:  HANDLE,
    c:  c_int,
    pv:  LPVOID    
) ->  c_int
{
    unsafe {
        return GetObjectW(
            h,
            c,
            pv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveToEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return MoveToEx(
            hdc,
            x,
            y,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TextOutA(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lpString:  LPCSTR,
    c:  c_int    
) ->  BOOL
{
    unsafe {
        return TextOutA(
            hdc,
            x,
            y,
            lpString,
            c
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TextOutW(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lpString:  LPCWSTR,
    c:  c_int    
) ->  BOOL
{
    unsafe {
        return TextOutW(
            hdc,
            x,
            y,
            lpString,
            c
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtTextOutA(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    options:  UINT,
    lprect: *const RECT,
    lpString:  LPCSTR,
    c:  UINT,
    lpDx: *const INT    
) ->  BOOL
{
    unsafe {
        return ExtTextOutA(
            hdc,
            x,
            y,
            options,
            lprect,
            lpString,
            c,
            lpDx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtTextOutW(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    options:  UINT,
    lprect: *const RECT,
    lpString:  LPCWSTR,
    c:  UINT,
    lpDx: *const INT    
) ->  BOOL
{
    unsafe {
        return ExtTextOutW(
            hdc,
            x,
            y,
            options,
            lprect,
            lpString,
            c,
            lpDx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PolyTextOutA(
    hdc:  HDC,
    ppt: *const POLYTEXTA,
    nstrings:  c_int    
) ->  BOOL
{
    unsafe {
        return PolyTextOutA(
            hdc,
            ppt,
            nstrings
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PolyTextOutW(
    hdc:  HDC,
    ppt: *const POLYTEXTW,
    nstrings:  c_int    
) ->  BOOL
{
    unsafe {
        return PolyTextOutW(
            hdc,
            ppt,
            nstrings
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePolygonRgn(
    pptl: *const POINT,
    cPoint:  c_int,
    iMode:  c_int    
) ->  HRGN
{
    unsafe {
        return CreatePolygonRgn(
            pptl,
            cPoint,
            iMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DPtoLP(
    hdc:  HDC,
    lppt:  LPPOINT,
    c:  c_int    
) ->  BOOL
{
    unsafe {
        return DPtoLP(
            hdc,
            lppt,
            c
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPtoDP(
    hdc:  HDC,
    lppt:  LPPOINT,
    c:  c_int    
) ->  BOOL
{
    unsafe {
        return LPtoDP(
            hdc,
            lppt,
            c
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Polygon(
    hdc:  HDC,
    apt: *const POINT,
    cpt:  c_int    
) ->  BOOL
{
    unsafe {
        return Polygon(
            hdc,
            apt,
            cpt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Polyline(
    hdc:  HDC,
    apt: *const POINT,
    cpt:  c_int    
) ->  BOOL
{
    unsafe {
        return Polyline(
            hdc,
            apt,
            cpt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PolyBezier(
    hdc:  HDC,
    apt: *const POINT,
    cpt:  DWORD    
) ->  BOOL
{
    unsafe {
        return PolyBezier(
            hdc,
            apt,
            cpt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PolyBezierTo(
    hdc:  HDC,
    apt: *const POINT,
    cpt:  DWORD    
) ->  BOOL
{
    unsafe {
        return PolyBezierTo(
            hdc,
            apt,
            cpt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PolylineTo(
    hdc:  HDC,
    apt: *const POINT,
    cpt:  DWORD    
) ->  BOOL
{
    unsafe {
        return PolylineTo(
            hdc,
            apt,
            cpt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetViewportExtEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lpsz:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return SetViewportExtEx(
            hdc,
            x,
            y,
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetViewportOrgEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return SetViewportOrgEx(
            hdc,
            x,
            y,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowExtEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lpsz:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return SetWindowExtEx(
            hdc,
            x,
            y,
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowOrgEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return SetWindowOrgEx(
            hdc,
            x,
            y,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OffsetViewportOrgEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return OffsetViewportOrgEx(
            hdc,
            x,
            y,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OffsetWindowOrgEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return OffsetWindowOrgEx(
            hdc,
            x,
            y,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScaleViewportExtEx(
    hdc:  HDC,
    xn:  c_int,
    dx:  c_int,
    yn:  c_int,
    yd:  c_int,
    lpsz:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return ScaleViewportExtEx(
            hdc,
            xn,
            dx,
            yn,
            yd,
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScaleWindowExtEx(
    hdc:  HDC,
    xn:  c_int,
    xd:  c_int,
    yn:  c_int,
    yd:  c_int,
    lpsz:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return ScaleWindowExtEx(
            hdc,
            xn,
            xd,
            yn,
            yd,
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetBitmapDimensionEx(
    hbm:  HBITMAP,
    w:  c_int,
    h:  c_int,
    lpsz:  LPSIZE    
) ->  BOOL
{
    unsafe {
        return SetBitmapDimensionEx(
            hbm,
            w,
            h,
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetBrushOrgEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return SetBrushOrgEx(
            hdc,
            x,
            y,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextFaceA(
    hdc:  HDC,
    c:  c_int,
    lpName:  LPSTR    
) ->  c_int
{
    unsafe {
        return GetTextFaceA(
            hdc,
            c,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTextFaceW(
    hdc:  HDC,
    c:  c_int,
    lpName:  LPWSTR    
) ->  c_int
{
    unsafe {
        return GetTextFaceW(
            hdc,
            c,
            lpName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKerningPairsA(
    hdc:  HDC,
    nPairs:  DWORD,
    lpKernPair:  LPKERNINGPAIR    
) ->  DWORD
{
    unsafe {
        return GetKerningPairsA(
            hdc,
            nPairs,
            lpKernPair
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKerningPairsW(
    hdc:  HDC,
    nPairs:  DWORD,
    lpKernPair:  LPKERNINGPAIR    
) ->  DWORD
{
    unsafe {
        return GetKerningPairsW(
            hdc,
            nPairs,
            lpKernPair
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDCOrgEx(
    hdc:  HDC,
    lppt:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return GetDCOrgEx(
            hdc,
            lppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FixBrushOrgEx(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    ptl:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return FixBrushOrgEx(
            hdc,
            x,
            y,
            ptl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnrealizeObject(
    h:  HGDIOBJ    
) ->  BOOL
{
    unsafe {
        return UnrealizeObject(
            h
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GdiFlush(
    
) ->  BOOL
{
    unsafe {
        return GdiFlush(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GdiSetBatchLimit(
    dw:  DWORD    
) ->  DWORD
{
    unsafe {
        return GdiSetBatchLimit(
            dw
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GdiGetBatchLimit(
    
) ->  DWORD
{
    unsafe {
        return GdiGetBatchLimit(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetICMMode(
    hdc:  HDC,
    mode:  c_int    
) ->  c_int
{
    unsafe {
        return SetICMMode(
            hdc,
            mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckColorsInGamut(
    hdc:  HDC,
    lpRGBTriple:  LPRGBTRIPLE,
    dlpBuffer:  LPVOID,
    nCount:  DWORD    
) ->  BOOL
{
    unsafe {
        return CheckColorsInGamut(
            hdc,
            lpRGBTriple,
            dlpBuffer,
            nCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetColorSpace(
    hdc:  HDC    
) ->  HCOLORSPACE
{
    unsafe {
        return GetColorSpace(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLogColorSpaceA(
    hColorSpace:  HCOLORSPACE,
    lpBuffer:  LPLOGCOLORSPACEA,
    nSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetLogColorSpaceA(
            hColorSpace,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLogColorSpaceW(
    hColorSpace:  HCOLORSPACE,
    lpBuffer:  LPLOGCOLORSPACEW,
    nSize:  DWORD    
) ->  BOOL
{
    unsafe {
        return GetLogColorSpaceW(
            hColorSpace,
            lpBuffer,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateColorSpaceA(
    lplcs:  LPLOGCOLORSPACEA    
) ->  HCOLORSPACE
{
    unsafe {
        return CreateColorSpaceA(
            lplcs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateColorSpaceW(
    lplcs:  LPLOGCOLORSPACEW    
) ->  HCOLORSPACE
{
    unsafe {
        return CreateColorSpaceW(
            lplcs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetColorSpace(
    hdc:  HDC,
    hcs:  HCOLORSPACE    
) ->  HCOLORSPACE
{
    unsafe {
        return SetColorSpace(
            hdc,
            hcs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteColorSpace(
    hcs:  HCOLORSPACE    
) ->  BOOL
{
    unsafe {
        return DeleteColorSpace(
            hcs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetICMProfileA(
    hdc:  HDC,
    pBufSize:  LPDWORD,
    pszFilename:  LPSTR    
) ->  BOOL
{
    unsafe {
        return GetICMProfileA(
            hdc,
            pBufSize,
            pszFilename
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetICMProfileW(
    hdc:  HDC,
    pBufSize:  LPDWORD,
    pszFilename:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return GetICMProfileW(
            hdc,
            pBufSize,
            pszFilename
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetICMProfileA(
    hdc:  HDC,
    lpFileName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return SetICMProfileA(
            hdc,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetICMProfileW(
    hdc:  HDC,
    lpFileName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return SetICMProfileW(
            hdc,
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDeviceGammaRamp(
    hdc:  HDC,
    lpRamp:  LPVOID    
) ->  BOOL
{
    unsafe {
        return GetDeviceGammaRamp(
            hdc,
            lpRamp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDeviceGammaRamp(
    hdc:  HDC,
    lpRamp:  LPVOID    
) ->  BOOL
{
    unsafe {
        return SetDeviceGammaRamp(
            hdc,
            lpRamp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ColorMatchToTarget(
    hdc:  HDC,
    hdcTarget:  HDC,
    action:  DWORD    
) ->  BOOL
{
    unsafe {
        return ColorMatchToTarget(
            hdc,
            hdcTarget,
            action
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumICMProfilesA(
    hdc:  HDC,
    proc_:  ICMENUMPROCA,
    param:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumICMProfilesA(
            hdc,
            proc_,
            param
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumICMProfilesW(
    hdc:  HDC,
    proc_:  ICMENUMPROCW,
    param:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumICMProfilesW(
            hdc,
            proc_,
            param
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateICMRegKeyA(
    reserved:  DWORD,
    lpszCMID:  LPSTR,
    lpszFileName:  LPSTR,
    command:  UINT    
) ->  BOOL
{
    unsafe {
        return UpdateICMRegKeyA(
            reserved,
            lpszCMID,
            lpszFileName,
            command
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateICMRegKeyW(
    reserved:  DWORD,
    lpszCMID:  LPWSTR,
    lpszFileName:  LPWSTR,
    command:  UINT    
) ->  BOOL
{
    unsafe {
        return UpdateICMRegKeyW(
            reserved,
            lpszCMID,
            lpszFileName,
            command
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ColorCorrectPalette(
    hdc:  HDC,
    hPal:  HPALETTE,
    deFirst:  DWORD,
    num:  DWORD    
) ->  BOOL
{
    unsafe {
        return ColorCorrectPalette(
            hdc,
            hPal,
            deFirst,
            num
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglCopyContext(
    arg1:  HGLRC,
    arg2:  HGLRC,
    arg3:  UINT    
) ->  BOOL
{
    unsafe {
        return wglCopyContext(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglCreateContext(
    arg1:  HDC    
) ->  HGLRC
{
    unsafe {
        return wglCreateContext(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglCreateLayerContext(
    arg1:  HDC,
    arg2:  c_int    
) ->  HGLRC
{
    unsafe {
        return wglCreateLayerContext(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglDeleteContext(
    arg1:  HGLRC    
) ->  BOOL
{
    unsafe {
        return wglDeleteContext(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglGetCurrentContext(
    
) ->  HGLRC
{
    unsafe {
        return wglGetCurrentContext(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglGetCurrentDC(
    
) ->  HDC
{
    unsafe {
        return wglGetCurrentDC(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglGetProcAddress(
    arg1:  LPCSTR    
) ->  PROC
{
    unsafe {
        return wglGetProcAddress(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglMakeCurrent(
    arg1:  HDC,
    arg2:  HGLRC    
) ->  BOOL
{
    unsafe {
        return wglMakeCurrent(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglShareLists(
    arg1:  HGLRC,
    arg2:  HGLRC    
) ->  BOOL
{
    unsafe {
        return wglShareLists(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglUseFontBitmapsA(
    arg1:  HDC,
    arg2:  DWORD,
    arg3:  DWORD,
    arg4:  DWORD    
) ->  BOOL
{
    unsafe {
        return wglUseFontBitmapsA(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglUseFontBitmapsW(
    arg1:  HDC,
    arg2:  DWORD,
    arg3:  DWORD,
    arg4:  DWORD    
) ->  BOOL
{
    unsafe {
        return wglUseFontBitmapsW(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SwapBuffers(
    arg1:  HDC    
) ->  BOOL
{
    unsafe {
        return SwapBuffers(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglUseFontOutlinesA(
    arg1:  HDC,
    arg2:  DWORD,
    arg3:  DWORD,
    arg4:  DWORD,
    arg5:  FLOAT,
    arg6:  FLOAT,
    arg7:  c_int,
    arg8:  LPGLYPHMETRICSFLOAT    
) ->  BOOL
{
    unsafe {
        return wglUseFontOutlinesA(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
            arg6,
            arg7,
            arg8
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglUseFontOutlinesW(
    arg1:  HDC,
    arg2:  DWORD,
    arg3:  DWORD,
    arg4:  DWORD,
    arg5:  FLOAT,
    arg6:  FLOAT,
    arg7:  c_int,
    arg8:  LPGLYPHMETRICSFLOAT    
) ->  BOOL
{
    unsafe {
        return wglUseFontOutlinesW(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
            arg6,
            arg7,
            arg8
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglDescribeLayerPlane(
    arg1:  HDC,
    arg2:  c_int,
    arg3:  c_int,
    arg4:  UINT,
    arg5:  LPLAYERPLANEDESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return wglDescribeLayerPlane(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglSetLayerPaletteEntries(
    arg1:  HDC,
    arg2:  c_int,
    arg3:  c_int,
    arg4:  c_int,
    arg5: *const COLORREF    
) ->  c_int
{
    unsafe {
        return wglSetLayerPaletteEntries(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglGetLayerPaletteEntries(
    arg1:  HDC,
    arg2:  c_int,
    arg3:  c_int,
    arg4:  c_int,
    arg5: *mut COLORREF    
) ->  c_int
{
    unsafe {
        return wglGetLayerPaletteEntries(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglRealizeLayerPalette(
    arg1:  HDC,
    arg2:  c_int,
    arg3:  BOOL    
) ->  BOOL
{
    unsafe {
        return wglRealizeLayerPalette(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglSwapLayerBuffers(
    arg1:  HDC,
    arg2:  UINT    
) ->  BOOL
{
    unsafe {
        return wglSwapLayerBuffers(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wglSwapMultipleBuffers(
    arg1:  UINT,
    arg2: *const WGLSWAP    
) ->  DWORD
{
    unsafe {
        return wglSwapMultipleBuffers(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wvsprintfA(
    arg1:  LPSTR,
    arg2:  LPCSTR,
    arglist:  va_list    
) ->  c_int
{
    unsafe {
        return wvsprintfA(
            arg1,
            arg2,
            arglist
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wvsprintfW(
    arg1:  LPWSTR,
    arg2:  LPCWSTR,
    arglist:  va_list    
) ->  c_int
{
    unsafe {
        return wvsprintfW(
            arg1,
            arg2,
            arglist
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wsprintfA(
    arg1:  LPSTR,
    arg2:  LPCSTR    
) ->  c_int
{
    unsafe {
        return wsprintfA(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wsprintfW(
    arg1:  LPWSTR,
    arg2:  LPCWSTR    
) ->  c_int
{
    unsafe {
        return wsprintfW(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadKeyboardLayoutA(
    pwszKLID:  LPCSTR,
    Flags:  UINT    
) ->  HKL
{
    unsafe {
        return LoadKeyboardLayoutA(
            pwszKLID,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadKeyboardLayoutW(
    pwszKLID:  LPCWSTR,
    Flags:  UINT    
) ->  HKL
{
    unsafe {
        return LoadKeyboardLayoutW(
            pwszKLID,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ActivateKeyboardLayout(
    hkl:  HKL,
    Flags:  UINT    
) ->  HKL
{
    unsafe {
        return ActivateKeyboardLayout(
            hkl,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ToUnicodeEx(
    wVirtKey:  UINT,
    wScanCode:  UINT,
    lpKeyState: *const BYTE,
    pwszBuff:  LPWSTR,
    cchBuff:  c_int,
    wFlags:  UINT,
    dwhkl:  HKL    
) ->  c_int
{
    unsafe {
        return ToUnicodeEx(
            wVirtKey,
            wScanCode,
            lpKeyState,
            pwszBuff,
            cchBuff,
            wFlags,
            dwhkl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnloadKeyboardLayout(
    hkl:  HKL    
) ->  BOOL
{
    unsafe {
        return UnloadKeyboardLayout(
            hkl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyboardLayoutNameA(
    pwszKLID:  LPSTR    
) ->  BOOL
{
    unsafe {
        return GetKeyboardLayoutNameA(
            pwszKLID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyboardLayoutNameW(
    pwszKLID:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return GetKeyboardLayoutNameW(
            pwszKLID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyboardLayoutList(
    nBuff:  c_int,
    lpList: *mut HKL    
) ->  c_int
{
    unsafe {
        return GetKeyboardLayoutList(
            nBuff,
            lpList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyboardLayout(
    idThread:  DWORD    
) ->  HKL
{
    unsafe {
        return GetKeyboardLayout(
            idThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMouseMovePointsEx(
    cbSize:  UINT,
    lppt:  LPMOUSEMOVEPOINT,
    lpptBuf:  LPMOUSEMOVEPOINT,
    nBufPoints:  c_int,
    resolution:  DWORD    
) ->  c_int
{
    unsafe {
        return GetMouseMovePointsEx(
            cbSize,
            lppt,
            lpptBuf,
            nBufPoints,
            resolution
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDesktopA(
    lpszDesktop:  LPCSTR,
    lpszDevice:  LPCSTR,
    pDevmode: *mut DEVMODEA,
    dwFlags:  DWORD,
    dwDesiredAccess:  ACCESS_MASK,
    lpsa:  LPSECURITY_ATTRIBUTES    
) ->  HDESK
{
    unsafe {
        return CreateDesktopA(
            lpszDesktop,
            lpszDevice,
            pDevmode,
            dwFlags,
            dwDesiredAccess,
            lpsa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDesktopW(
    lpszDesktop:  LPCWSTR,
    lpszDevice:  LPCWSTR,
    pDevmode: *mut DEVMODEW,
    dwFlags:  DWORD,
    dwDesiredAccess:  ACCESS_MASK,
    lpsa:  LPSECURITY_ATTRIBUTES    
) ->  HDESK
{
    unsafe {
        return CreateDesktopW(
            lpszDesktop,
            lpszDevice,
            pDevmode,
            dwFlags,
            dwDesiredAccess,
            lpsa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDesktopExA(
    lpszDesktop:  LPCSTR,
    lpszDevice:  LPCSTR,
    pDevmode: *mut DEVMODEA,
    dwFlags:  DWORD,
    dwDesiredAccess:  ACCESS_MASK,
    lpsa:  LPSECURITY_ATTRIBUTES,
    ulHeapSize:  ULONG,
    pvoid:  PVOID    
) ->  HDESK
{
    unsafe {
        return CreateDesktopExA(
            lpszDesktop,
            lpszDevice,
            pDevmode,
            dwFlags,
            dwDesiredAccess,
            lpsa,
            ulHeapSize,
            pvoid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDesktopExW(
    lpszDesktop:  LPCWSTR,
    lpszDevice:  LPCWSTR,
    pDevmode: *mut DEVMODEW,
    dwFlags:  DWORD,
    dwDesiredAccess:  ACCESS_MASK,
    lpsa:  LPSECURITY_ATTRIBUTES,
    ulHeapSize:  ULONG,
    pvoid:  PVOID    
) ->  HDESK
{
    unsafe {
        return CreateDesktopExW(
            lpszDesktop,
            lpszDevice,
            pDevmode,
            dwFlags,
            dwDesiredAccess,
            lpsa,
            ulHeapSize,
            pvoid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenDesktopA(
    lpszDesktop:  LPCSTR,
    dwFlags:  DWORD,
    fInherit:  BOOL,
    dwDesiredAccess:  ACCESS_MASK    
) ->  HDESK
{
    unsafe {
        return OpenDesktopA(
            lpszDesktop,
            dwFlags,
            fInherit,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenDesktopW(
    lpszDesktop:  LPCWSTR,
    dwFlags:  DWORD,
    fInherit:  BOOL,
    dwDesiredAccess:  ACCESS_MASK    
) ->  HDESK
{
    unsafe {
        return OpenDesktopW(
            lpszDesktop,
            dwFlags,
            fInherit,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenInputDesktop(
    dwFlags:  DWORD,
    fInherit:  BOOL,
    dwDesiredAccess:  ACCESS_MASK    
) ->  HDESK
{
    unsafe {
        return OpenInputDesktop(
            dwFlags,
            fInherit,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDesktopsA(
    hwinsta:  HWINSTA,
    lpEnumFunc:  DESKTOPENUMPROCA,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumDesktopsA(
            hwinsta,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDesktopsW(
    hwinsta:  HWINSTA,
    lpEnumFunc:  DESKTOPENUMPROCW,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumDesktopsW(
            hwinsta,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDesktopWindows(
    hDesktop:  HDESK,
    lpfn:  WNDENUMPROC,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumDesktopWindows(
            hDesktop,
            lpfn,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SwitchDesktop(
    hDesktop:  HDESK    
) ->  BOOL
{
    unsafe {
        return SwitchDesktop(
            hDesktop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadDesktop(
    hDesktop:  HDESK    
) ->  BOOL
{
    unsafe {
        return SetThreadDesktop(
            hDesktop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseDesktop(
    hDesktop:  HDESK    
) ->  BOOL
{
    unsafe {
        return CloseDesktop(
            hDesktop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadDesktop(
    dwThreadId:  DWORD    
) ->  HDESK
{
    unsafe {
        return GetThreadDesktop(
            dwThreadId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWindowStationA(
    lpwinsta:  LPCSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  ACCESS_MASK,
    lpsa:  LPSECURITY_ATTRIBUTES    
) ->  HWINSTA
{
    unsafe {
        return CreateWindowStationA(
            lpwinsta,
            dwFlags,
            dwDesiredAccess,
            lpsa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWindowStationW(
    lpwinsta:  LPCWSTR,
    dwFlags:  DWORD,
    dwDesiredAccess:  ACCESS_MASK,
    lpsa:  LPSECURITY_ATTRIBUTES    
) ->  HWINSTA
{
    unsafe {
        return CreateWindowStationW(
            lpwinsta,
            dwFlags,
            dwDesiredAccess,
            lpsa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenWindowStationA(
    lpszWinSta:  LPCSTR,
    fInherit:  BOOL,
    dwDesiredAccess:  ACCESS_MASK    
) ->  HWINSTA
{
    unsafe {
        return OpenWindowStationA(
            lpszWinSta,
            fInherit,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenWindowStationW(
    lpszWinSta:  LPCWSTR,
    fInherit:  BOOL,
    dwDesiredAccess:  ACCESS_MASK    
) ->  HWINSTA
{
    unsafe {
        return OpenWindowStationW(
            lpszWinSta,
            fInherit,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumWindowStationsA(
    lpEnumFunc:  WINSTAENUMPROCA,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumWindowStationsA(
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumWindowStationsW(
    lpEnumFunc:  WINSTAENUMPROCW,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumWindowStationsW(
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseWindowStation(
    hWinSta:  HWINSTA    
) ->  BOOL
{
    unsafe {
        return CloseWindowStation(
            hWinSta
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessWindowStation(
    hWinSta:  HWINSTA    
) ->  BOOL
{
    unsafe {
        return SetProcessWindowStation(
            hWinSta
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessWindowStation(
    
) ->  HWINSTA
{
    unsafe {
        return GetProcessWindowStation(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUserObjectSecurity(
    hObj:  HANDLE,
    pSIRequested:  PSECURITY_INFORMATION,
    pSID:  PSECURITY_DESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return SetUserObjectSecurity(
            hObj,
            pSIRequested,
            pSID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserObjectSecurity(
    hObj:  HANDLE,
    pSIRequested:  PSECURITY_INFORMATION,
    pSID:  PSECURITY_DESCRIPTOR,
    nLength:  DWORD,
    lpnLengthNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetUserObjectSecurity(
            hObj,
            pSIRequested,
            pSID,
            nLength,
            lpnLengthNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserObjectInformationA(
    hObj:  HANDLE,
    nIndex:  c_int,
    pvInfo:  PVOID,
    nLength:  DWORD,
    lpnLengthNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetUserObjectInformationA(
            hObj,
            nIndex,
            pvInfo,
            nLength,
            lpnLengthNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserObjectInformationW(
    hObj:  HANDLE,
    nIndex:  c_int,
    pvInfo:  PVOID,
    nLength:  DWORD,
    lpnLengthNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetUserObjectInformationW(
            hObj,
            nIndex,
            pvInfo,
            nLength,
            lpnLengthNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUserObjectInformationA(
    hObj:  HANDLE,
    nIndex:  c_int,
    pvInfo:  PVOID,
    nLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetUserObjectInformationA(
            hObj,
            nIndex,
            pvInfo,
            nLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUserObjectInformationW(
    hObj:  HANDLE,
    nIndex:  c_int,
    pvInfo:  PVOID,
    nLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetUserObjectInformationW(
            hObj,
            nIndex,
            pvInfo,
            nLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsHungAppWindow(
    hwnd:  HWND    
) ->  BOOL
{
    unsafe {
        return IsHungAppWindow(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DisableProcessWindowsGhosting(
    
)
{
    unsafe {
        return DisableProcessWindowsGhosting(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterWindowMessageA(
    lpString:  LPCSTR    
) ->  UINT
{
    unsafe {
        return RegisterWindowMessageA(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterWindowMessageW(
    lpString:  LPCWSTR    
) ->  UINT
{
    unsafe {
        return RegisterWindowMessageW(
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TrackMouseEvent(
    lpEventTrack:  LPTRACKMOUSEEVENT    
) ->  BOOL
{
    unsafe {
        return TrackMouseEvent(
            lpEventTrack
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawEdge(
    hdc:  HDC,
    qrc:  LPRECT,
    edge:  UINT,
    grfFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return DrawEdge(
            hdc,
            qrc,
            edge,
            grfFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawFrameControl(
    arg1:  HDC,
    arg2:  LPRECT,
    arg3:  UINT,
    arg4:  UINT    
) ->  BOOL
{
    unsafe {
        return DrawFrameControl(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawCaption(
    hwnd:  HWND,
    hdc:  HDC,
    lprect: *const RECT,
    flags:  UINT    
) ->  BOOL
{
    unsafe {
        return DrawCaption(
            hwnd,
            hdc,
            lprect,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawAnimatedRects(
    hwnd:  HWND,
    idAni:  c_int,
    lprcFrom: *const RECT,
    lprcTo: *const RECT    
) ->  BOOL
{
    unsafe {
        return DrawAnimatedRects(
            hwnd,
            idAni,
            lprcFrom,
            lprcTo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMessageA(
    lpMsg:  LPMSG,
    hWnd:  HWND,
    wMsgFilterMin:  UINT,
    wMsgFilterMax:  UINT    
) ->  BOOL
{
    unsafe {
        return GetMessageA(
            lpMsg,
            hWnd,
            wMsgFilterMin,
            wMsgFilterMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMessageW(
    lpMsg:  LPMSG,
    hWnd:  HWND,
    wMsgFilterMin:  UINT,
    wMsgFilterMax:  UINT    
) ->  BOOL
{
    unsafe {
        return GetMessageW(
            lpMsg,
            hWnd,
            wMsgFilterMin,
            wMsgFilterMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TranslateMessage(
    lpMsg: *const MSG    
) ->  BOOL
{
    unsafe {
        return TranslateMessage(
            lpMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DispatchMessageA(
    lpMsg: *const MSG    
) ->  LRESULT
{
    unsafe {
        return DispatchMessageA(
            lpMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DispatchMessageW(
    lpMsg: *const MSG    
) ->  LRESULT
{
    unsafe {
        return DispatchMessageW(
            lpMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMessageQueue(
    cMessagesMax:  c_int    
) ->  BOOL
{
    unsafe {
        return SetMessageQueue(
            cMessagesMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PeekMessageA(
    lpMsg:  LPMSG,
    hWnd:  HWND,
    wMsgFilterMin:  UINT,
    wMsgFilterMax:  UINT,
    wRemoveMsg:  UINT    
) ->  BOOL
{
    unsafe {
        return PeekMessageA(
            lpMsg,
            hWnd,
            wMsgFilterMin,
            wMsgFilterMax,
            wRemoveMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PeekMessageW(
    lpMsg:  LPMSG,
    hWnd:  HWND,
    wMsgFilterMin:  UINT,
    wMsgFilterMax:  UINT,
    wRemoveMsg:  UINT    
) ->  BOOL
{
    unsafe {
        return PeekMessageW(
            lpMsg,
            hWnd,
            wMsgFilterMin,
            wMsgFilterMax,
            wRemoveMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterHotKey(
    hWnd:  HWND,
    id:  c_int,
    fsModifiers:  UINT,
    vk:  UINT    
) ->  BOOL
{
    unsafe {
        return RegisterHotKey(
            hWnd,
            id,
            fsModifiers,
            vk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterHotKey(
    hWnd:  HWND,
    id:  c_int    
) ->  BOOL
{
    unsafe {
        return UnregisterHotKey(
            hWnd,
            id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExitWindowsEx(
    uFlags:  UINT,
    dwReason:  DWORD    
) ->  BOOL
{
    unsafe {
        return ExitWindowsEx(
            uFlags,
            dwReason
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SwapMouseButton(
    fSwap:  BOOL    
) ->  BOOL
{
    unsafe {
        return SwapMouseButton(
            fSwap
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMessagePos(
    
) ->  DWORD
{
    unsafe {
        return GetMessagePos(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMessageTime(
    
) ->  LONG
{
    unsafe {
        return GetMessageTime(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMessageExtraInfo(
    
) ->  LPARAM
{
    unsafe {
        return GetMessageExtraInfo(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUnpredictedMessagePos(
    
) ->  DWORD
{
    unsafe {
        return GetUnpredictedMessagePos(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWow64Message(
    
) ->  BOOL
{
    unsafe {
        return IsWow64Message(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMessageExtraInfo(
    lParam:  LPARAM    
) ->  LPARAM
{
    unsafe {
        return SetMessageExtraInfo(
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendMessageA(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return SendMessageA(
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendMessageW(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return SendMessageW(
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendMessageTimeoutA(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM,
    fuFlags:  UINT,
    uTimeout:  UINT,
    lpdwResult:  PDWORD_PTR    
) ->  LRESULT
{
    unsafe {
        return SendMessageTimeoutA(
            hWnd,
            Msg,
            wParam,
            lParam,
            fuFlags,
            uTimeout,
            lpdwResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendMessageTimeoutW(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM,
    fuFlags:  UINT,
    uTimeout:  UINT,
    lpdwResult:  PDWORD_PTR    
) ->  LRESULT
{
    unsafe {
        return SendMessageTimeoutW(
            hWnd,
            Msg,
            wParam,
            lParam,
            fuFlags,
            uTimeout,
            lpdwResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendNotifyMessageA(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return SendNotifyMessageA(
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendNotifyMessageW(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return SendNotifyMessageW(
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendMessageCallbackA(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM,
    lpResultCallBack:  SENDASYNCPROC,
    dwData:  ULONG_PTR    
) ->  BOOL
{
    unsafe {
        return SendMessageCallbackA(
            hWnd,
            Msg,
            wParam,
            lParam,
            lpResultCallBack,
            dwData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendMessageCallbackW(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM,
    lpResultCallBack:  SENDASYNCPROC,
    dwData:  ULONG_PTR    
) ->  BOOL
{
    unsafe {
        return SendMessageCallbackW(
            hWnd,
            Msg,
            wParam,
            lParam,
            lpResultCallBack,
            dwData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BroadcastSystemMessageExA(
    flags:  DWORD,
    lpInfo:  LPDWORD,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM,
    pbsmInfo:  PBSMINFO    
) ->  c_long
{
    unsafe {
        return BroadcastSystemMessageExA(
            flags,
            lpInfo,
            Msg,
            wParam,
            lParam,
            pbsmInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BroadcastSystemMessageExW(
    flags:  DWORD,
    lpInfo:  LPDWORD,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM,
    pbsmInfo:  PBSMINFO    
) ->  c_long
{
    unsafe {
        return BroadcastSystemMessageExW(
            flags,
            lpInfo,
            Msg,
            wParam,
            lParam,
            pbsmInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BroadcastSystemMessageA(
    flags:  DWORD,
    lpInfo:  LPDWORD,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  c_long
{
    unsafe {
        return BroadcastSystemMessageA(
            flags,
            lpInfo,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BroadcastSystemMessageW(
    flags:  DWORD,
    lpInfo:  LPDWORD,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  c_long
{
    unsafe {
        return BroadcastSystemMessageW(
            flags,
            lpInfo,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterDeviceNotificationA(
    hRecipient:  HANDLE,
    NotificationFilter:  LPVOID,
    Flags:  DWORD    
) ->  HDEVNOTIFY
{
    unsafe {
        return RegisterDeviceNotificationA(
            hRecipient,
            NotificationFilter,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterDeviceNotificationW(
    hRecipient:  HANDLE,
    NotificationFilter:  LPVOID,
    Flags:  DWORD    
) ->  HDEVNOTIFY
{
    unsafe {
        return RegisterDeviceNotificationW(
            hRecipient,
            NotificationFilter,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterDeviceNotification(
    Handle:  HDEVNOTIFY    
) ->  BOOL
{
    unsafe {
        return UnregisterDeviceNotification(
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterPowerSettingNotification(
    hRecipient:  HANDLE,
    PowerSettingGuid:  LPCGUID,
    Flags:  DWORD    
) ->  HPOWERNOTIFY
{
    unsafe {
        return RegisterPowerSettingNotification(
            hRecipient,
            PowerSettingGuid,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterPowerSettingNotification(
    Handle:  HPOWERNOTIFY    
) ->  BOOL
{
    unsafe {
        return UnregisterPowerSettingNotification(
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterSuspendResumeNotification(
    hRecipient:  HANDLE,
    Flags:  DWORD    
) ->  HPOWERNOTIFY
{
    unsafe {
        return RegisterSuspendResumeNotification(
            hRecipient,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterSuspendResumeNotification(
    Handle:  HPOWERNOTIFY    
) ->  BOOL
{
    unsafe {
        return UnregisterSuspendResumeNotification(
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PostMessageA(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return PostMessageA(
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PostMessageW(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return PostMessageW(
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PostThreadMessageA(
    idThread:  DWORD,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return PostThreadMessageA(
            idThread,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PostThreadMessageW(
    idThread:  DWORD,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return PostThreadMessageW(
            idThread,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AttachThreadInput(
    idAttach:  DWORD,
    idAttachTo:  DWORD,
    fAttach:  BOOL    
) ->  BOOL
{
    unsafe {
        return AttachThreadInput(
            idAttach,
            idAttachTo,
            fAttach
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReplyMessage(
    lResult:  LRESULT    
) ->  BOOL
{
    unsafe {
        return ReplyMessage(
            lResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitMessage(
    
) ->  BOOL
{
    unsafe {
        return WaitMessage(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForInputIdle(
    hProcess:  HANDLE,
    dwMilliseconds:  DWORD    
) ->  DWORD
{
    unsafe {
        return WaitForInputIdle(
            hProcess,
            dwMilliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefWindowProcA(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefWindowProcA(
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefWindowProcW(
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefWindowProcW(
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PostQuitMessage(
    nExitCode:  c_int    
)
{
    unsafe {
        return PostQuitMessage(
            nExitCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallWindowProcA(
    lpPrevWndFunc:  WNDPROC,
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return CallWindowProcA(
            lpPrevWndFunc,
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallWindowProcW(
    lpPrevWndFunc:  WNDPROC,
    hWnd:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return CallWindowProcW(
            lpPrevWndFunc,
            hWnd,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InSendMessage(
    
) ->  BOOL
{
    unsafe {
        return InSendMessage(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InSendMessageEx(
    lpReserved:  LPVOID    
) ->  DWORD
{
    unsafe {
        return InSendMessageEx(
            lpReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDoubleClickTime(
    
) ->  UINT
{
    unsafe {
        return GetDoubleClickTime(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDoubleClickTime(
    arg1:  UINT    
) ->  BOOL
{
    unsafe {
        return SetDoubleClickTime(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterClassA(
    lpWndClass: *const WNDCLASSA    
) ->  ATOM
{
    unsafe {
        return RegisterClassA(
            lpWndClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterClassW(
    lpWndClass: *const WNDCLASSW    
) ->  ATOM
{
    unsafe {
        return RegisterClassW(
            lpWndClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterClassA(
    lpClassName:  LPCSTR,
    hInstance:  HINSTANCE    
) ->  BOOL
{
    unsafe {
        return UnregisterClassA(
            lpClassName,
            hInstance
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterClassW(
    lpClassName:  LPCWSTR,
    hInstance:  HINSTANCE    
) ->  BOOL
{
    unsafe {
        return UnregisterClassW(
            lpClassName,
            hInstance
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassInfoA(
    hInstance:  HINSTANCE,
    lpClassName:  LPCSTR,
    lpWndClass:  LPWNDCLASSA    
) ->  BOOL
{
    unsafe {
        return GetClassInfoA(
            hInstance,
            lpClassName,
            lpWndClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassInfoW(
    hInstance:  HINSTANCE,
    lpClassName:  LPCWSTR,
    lpWndClass:  LPWNDCLASSW    
) ->  BOOL
{
    unsafe {
        return GetClassInfoW(
            hInstance,
            lpClassName,
            lpWndClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterClassExA(
    arg1: *const WNDCLASSEXA    
) ->  ATOM
{
    unsafe {
        return RegisterClassExA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterClassExW(
    arg1: *const WNDCLASSEXW    
) ->  ATOM
{
    unsafe {
        return RegisterClassExW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassInfoExA(
    hInstance:  HINSTANCE,
    lpszClass:  LPCSTR,
    lpwcx:  LPWNDCLASSEXA    
) ->  BOOL
{
    unsafe {
        return GetClassInfoExA(
            hInstance,
            lpszClass,
            lpwcx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassInfoExW(
    hInstance:  HINSTANCE,
    lpszClass:  LPCWSTR,
    lpwcx:  LPWNDCLASSEXW    
) ->  BOOL
{
    unsafe {
        return GetClassInfoExW(
            hInstance,
            lpszClass,
            lpwcx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWindowExA(
    dwExStyle:  DWORD,
    lpClassName:  LPCSTR,
    lpWindowName:  LPCSTR,
    dwStyle:  DWORD,
    X:  c_int,
    Y:  c_int,
    nWidth:  c_int,
    nHeight:  c_int,
    hWndParent:  HWND,
    hMenu:  HMENU,
    hInstance:  HINSTANCE,
    lpParam:  LPVOID    
) ->  HWND
{
    unsafe {
        return CreateWindowExA(
            dwExStyle,
            lpClassName,
            lpWindowName,
            dwStyle,
            X,
            Y,
            nWidth,
            nHeight,
            hWndParent,
            hMenu,
            hInstance,
            lpParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateWindowExW(
    dwExStyle:  DWORD,
    lpClassName:  LPCWSTR,
    lpWindowName:  LPCWSTR,
    dwStyle:  DWORD,
    X:  c_int,
    Y:  c_int,
    nWidth:  c_int,
    nHeight:  c_int,
    hWndParent:  HWND,
    hMenu:  HMENU,
    hInstance:  HINSTANCE,
    lpParam:  LPVOID    
) ->  HWND
{
    unsafe {
        return CreateWindowExW(
            dwExStyle,
            lpClassName,
            lpWindowName,
            dwStyle,
            X,
            Y,
            nWidth,
            nHeight,
            hWndParent,
            hMenu,
            hInstance,
            lpParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWindow(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return IsWindow(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsMenu(
    hMenu:  HMENU    
) ->  BOOL
{
    unsafe {
        return IsMenu(
            hMenu
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsChild(
    hWndParent:  HWND,
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return IsChild(
            hWndParent,
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroyWindow(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return DestroyWindow(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShowWindow(
    hWnd:  HWND,
    nCmdShow:  c_int    
) ->  BOOL
{
    unsafe {
        return ShowWindow(
            hWnd,
            nCmdShow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AnimateWindow(
    hWnd:  HWND,
    dwTime:  DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return AnimateWindow(
            hWnd,
            dwTime,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateLayeredWindow(
    hWnd:  HWND,
    hdcDst:  HDC,
    pptDst: *mut POINT,
    psize: *mut SIZE,
    hdcSrc:  HDC,
    pptSrc: *mut POINT,
    crKey:  COLORREF,
    pblend: *mut BLENDFUNCTION,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return UpdateLayeredWindow(
            hWnd,
            hdcDst,
            pptDst,
            psize,
            hdcSrc,
            pptSrc,
            crKey,
            pblend,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateLayeredWindowIndirect(
    hWnd:  HWND,
    pULWInfo: *const UPDATELAYEREDWINDOWINFO    
) ->  BOOL
{
    unsafe {
        return UpdateLayeredWindowIndirect(
            hWnd,
            pULWInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLayeredWindowAttributes(
    hwnd:  HWND,
    pcrKey: *mut COLORREF,
    pbAlpha: *mut BYTE,
    pdwFlags: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return GetLayeredWindowAttributes(
            hwnd,
            pcrKey,
            pbAlpha,
            pdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrintWindow(
    hwnd:  HWND,
    hdcBlt:  HDC,
    nFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return PrintWindow(
            hwnd,
            hdcBlt,
            nFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetLayeredWindowAttributes(
    hwnd:  HWND,
    crKey:  COLORREF,
    bAlpha:  BYTE,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetLayeredWindowAttributes(
            hwnd,
            crKey,
            bAlpha,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShowWindowAsync(
    hWnd:  HWND,
    nCmdShow:  c_int    
) ->  BOOL
{
    unsafe {
        return ShowWindowAsync(
            hWnd,
            nCmdShow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlashWindow(
    hWnd:  HWND,
    bInvert:  BOOL    
) ->  BOOL
{
    unsafe {
        return FlashWindow(
            hWnd,
            bInvert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlashWindowEx(
    pfwi:  PFLASHWINFO    
) ->  BOOL
{
    unsafe {
        return FlashWindowEx(
            pfwi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShowOwnedPopups(
    hWnd:  HWND,
    fShow:  BOOL    
) ->  BOOL
{
    unsafe {
        return ShowOwnedPopups(
            hWnd,
            fShow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenIcon(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return OpenIcon(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseWindow(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return CloseWindow(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MoveWindow(
    hWnd:  HWND,
    X:  c_int,
    Y:  c_int,
    nWidth:  c_int,
    nHeight:  c_int,
    bRepaint:  BOOL    
) ->  BOOL
{
    unsafe {
        return MoveWindow(
            hWnd,
            X,
            Y,
            nWidth,
            nHeight,
            bRepaint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowPos(
    hWnd:  HWND,
    hWndInsertAfter:  HWND,
    X:  c_int,
    Y:  c_int,
    cx:  c_int,
    cy:  c_int,
    uFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return SetWindowPos(
            hWnd,
            hWndInsertAfter,
            X,
            Y,
            cx,
            cy,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowPlacement(
    hWnd:  HWND,
    lpwndpl: *mut WINDOWPLACEMENT    
) ->  BOOL
{
    unsafe {
        return GetWindowPlacement(
            hWnd,
            lpwndpl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowPlacement(
    hWnd:  HWND,
    lpwndpl: *const WINDOWPLACEMENT    
) ->  BOOL
{
    unsafe {
        return SetWindowPlacement(
            hWnd,
            lpwndpl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowDisplayAffinity(
    hWnd:  HWND,
    pdwAffinity: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return GetWindowDisplayAffinity(
            hWnd,
            pdwAffinity
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowDisplayAffinity(
    hWnd:  HWND,
    dwAffinity:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetWindowDisplayAffinity(
            hWnd,
            dwAffinity
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BeginDeferWindowPos(
    nNumWindows:  c_int    
) ->  HDWP
{
    unsafe {
        return BeginDeferWindowPos(
            nNumWindows
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeferWindowPos(
    hWinPosInfo:  HDWP,
    hWnd:  HWND,
    hWndInsertAfter:  HWND,
    x:  c_int,
    y:  c_int,
    cx:  c_int,
    cy:  c_int,
    uFlags:  UINT    
) ->  HDWP
{
    unsafe {
        return DeferWindowPos(
            hWinPosInfo,
            hWnd,
            hWndInsertAfter,
            x,
            y,
            cx,
            cy,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndDeferWindowPos(
    hWinPosInfo:  HDWP    
) ->  BOOL
{
    unsafe {
        return EndDeferWindowPos(
            hWinPosInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWindowVisible(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return IsWindowVisible(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsIconic(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return IsIconic(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AnyPopup(
    
) ->  BOOL
{
    unsafe {
        return AnyPopup(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BringWindowToTop(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return BringWindowToTop(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsZoomed(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return IsZoomed(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDialogParamA(
    hInstance:  HINSTANCE,
    lpTemplateName:  LPCSTR,
    hWndParent:  HWND,
    lpDialogFunc:  DLGPROC,
    dwInitParam:  LPARAM    
) ->  HWND
{
    unsafe {
        return CreateDialogParamA(
            hInstance,
            lpTemplateName,
            hWndParent,
            lpDialogFunc,
            dwInitParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDialogParamW(
    hInstance:  HINSTANCE,
    lpTemplateName:  LPCWSTR,
    hWndParent:  HWND,
    lpDialogFunc:  DLGPROC,
    dwInitParam:  LPARAM    
) ->  HWND
{
    unsafe {
        return CreateDialogParamW(
            hInstance,
            lpTemplateName,
            hWndParent,
            lpDialogFunc,
            dwInitParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDialogIndirectParamA(
    hInstance:  HINSTANCE,
    lpTemplate:  LPCDLGTEMPLATEA,
    hWndParent:  HWND,
    lpDialogFunc:  DLGPROC,
    dwInitParam:  LPARAM    
) ->  HWND
{
    unsafe {
        return CreateDialogIndirectParamA(
            hInstance,
            lpTemplate,
            hWndParent,
            lpDialogFunc,
            dwInitParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDialogIndirectParamW(
    hInstance:  HINSTANCE,
    lpTemplate:  LPCDLGTEMPLATEW,
    hWndParent:  HWND,
    lpDialogFunc:  DLGPROC,
    dwInitParam:  LPARAM    
) ->  HWND
{
    unsafe {
        return CreateDialogIndirectParamW(
            hInstance,
            lpTemplate,
            hWndParent,
            lpDialogFunc,
            dwInitParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DialogBoxParamA(
    hInstance:  HINSTANCE,
    lpTemplateName:  LPCSTR,
    hWndParent:  HWND,
    lpDialogFunc:  DLGPROC,
    dwInitParam:  LPARAM    
) ->  INT_PTR
{
    unsafe {
        return DialogBoxParamA(
            hInstance,
            lpTemplateName,
            hWndParent,
            lpDialogFunc,
            dwInitParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DialogBoxParamW(
    hInstance:  HINSTANCE,
    lpTemplateName:  LPCWSTR,
    hWndParent:  HWND,
    lpDialogFunc:  DLGPROC,
    dwInitParam:  LPARAM    
) ->  INT_PTR
{
    unsafe {
        return DialogBoxParamW(
            hInstance,
            lpTemplateName,
            hWndParent,
            lpDialogFunc,
            dwInitParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DialogBoxIndirectParamA(
    hInstance:  HINSTANCE,
    hDialogTemplate:  LPCDLGTEMPLATEA,
    hWndParent:  HWND,
    lpDialogFunc:  DLGPROC,
    dwInitParam:  LPARAM    
) ->  INT_PTR
{
    unsafe {
        return DialogBoxIndirectParamA(
            hInstance,
            hDialogTemplate,
            hWndParent,
            lpDialogFunc,
            dwInitParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DialogBoxIndirectParamW(
    hInstance:  HINSTANCE,
    hDialogTemplate:  LPCDLGTEMPLATEW,
    hWndParent:  HWND,
    lpDialogFunc:  DLGPROC,
    dwInitParam:  LPARAM    
) ->  INT_PTR
{
    unsafe {
        return DialogBoxIndirectParamW(
            hInstance,
            hDialogTemplate,
            hWndParent,
            lpDialogFunc,
            dwInitParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndDialog(
    hDlg:  HWND,
    nResult:  INT_PTR    
) ->  BOOL
{
    unsafe {
        return EndDialog(
            hDlg,
            nResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDlgItem(
    hDlg:  HWND,
    nIDDlgItem:  c_int    
) ->  HWND
{
    unsafe {
        return GetDlgItem(
            hDlg,
            nIDDlgItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDlgItemInt(
    hDlg:  HWND,
    nIDDlgItem:  c_int,
    uValue:  UINT,
    bSigned:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetDlgItemInt(
            hDlg,
            nIDDlgItem,
            uValue,
            bSigned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDlgItemInt(
    hDlg:  HWND,
    nIDDlgItem:  c_int,
    lpTranslated: *mut BOOL,
    bSigned:  BOOL    
) ->  UINT
{
    unsafe {
        return GetDlgItemInt(
            hDlg,
            nIDDlgItem,
            lpTranslated,
            bSigned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDlgItemTextA(
    hDlg:  HWND,
    nIDDlgItem:  c_int,
    lpString:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetDlgItemTextA(
            hDlg,
            nIDDlgItem,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDlgItemTextW(
    hDlg:  HWND,
    nIDDlgItem:  c_int,
    lpString:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetDlgItemTextW(
            hDlg,
            nIDDlgItem,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDlgItemTextA(
    hDlg:  HWND,
    nIDDlgItem:  c_int,
    lpString:  LPSTR,
    cchMax:  c_int    
) ->  UINT
{
    unsafe {
        return GetDlgItemTextA(
            hDlg,
            nIDDlgItem,
            lpString,
            cchMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDlgItemTextW(
    hDlg:  HWND,
    nIDDlgItem:  c_int,
    lpString:  LPWSTR,
    cchMax:  c_int    
) ->  UINT
{
    unsafe {
        return GetDlgItemTextW(
            hDlg,
            nIDDlgItem,
            lpString,
            cchMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckDlgButton(
    hDlg:  HWND,
    nIDButton:  c_int,
    uCheck:  UINT    
) ->  BOOL
{
    unsafe {
        return CheckDlgButton(
            hDlg,
            nIDButton,
            uCheck
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckRadioButton(
    hDlg:  HWND,
    nIDFirstButton:  c_int,
    nIDLastButton:  c_int,
    nIDCheckButton:  c_int    
) ->  BOOL
{
    unsafe {
        return CheckRadioButton(
            hDlg,
            nIDFirstButton,
            nIDLastButton,
            nIDCheckButton
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsDlgButtonChecked(
    hDlg:  HWND,
    nIDButton:  c_int    
) ->  UINT
{
    unsafe {
        return IsDlgButtonChecked(
            hDlg,
            nIDButton
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendDlgItemMessageA(
    hDlg:  HWND,
    nIDDlgItem:  c_int,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return SendDlgItemMessageA(
            hDlg,
            nIDDlgItem,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendDlgItemMessageW(
    hDlg:  HWND,
    nIDDlgItem:  c_int,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return SendDlgItemMessageW(
            hDlg,
            nIDDlgItem,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNextDlgGroupItem(
    hDlg:  HWND,
    hCtl:  HWND,
    bPrevious:  BOOL    
) ->  HWND
{
    unsafe {
        return GetNextDlgGroupItem(
            hDlg,
            hCtl,
            bPrevious
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNextDlgTabItem(
    hDlg:  HWND,
    hCtl:  HWND,
    bPrevious:  BOOL    
) ->  HWND
{
    unsafe {
        return GetNextDlgTabItem(
            hDlg,
            hCtl,
            bPrevious
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDlgCtrlID(
    hWnd:  HWND    
) ->  c_int
{
    unsafe {
        return GetDlgCtrlID(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDialogBaseUnits(
    
) ->  c_long
{
    unsafe {
        return GetDialogBaseUnits(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefDlgProcA(
    hDlg:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefDlgProcA(
            hDlg,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefDlgProcW(
    hDlg:  HWND,
    Msg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefDlgProcW(
            hDlg,
            Msg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDialogControlDpiChangeBehavior(
    hWnd:  HWND,
    mask:  DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS,
    values:  DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS    
) ->  BOOL
{
    unsafe {
        return SetDialogControlDpiChangeBehavior(
            hWnd,
            mask,
            values
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDialogControlDpiChangeBehavior(
    hWnd:  HWND    
) ->  DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
{
    unsafe {
        return GetDialogControlDpiChangeBehavior(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDialogDpiChangeBehavior(
    hDlg:  HWND,
    mask:  DIALOG_DPI_CHANGE_BEHAVIORS,
    values:  DIALOG_DPI_CHANGE_BEHAVIORS    
) ->  BOOL
{
    unsafe {
        return SetDialogDpiChangeBehavior(
            hDlg,
            mask,
            values
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDialogDpiChangeBehavior(
    hDlg:  HWND    
) ->  DIALOG_DPI_CHANGE_BEHAVIORS
{
    unsafe {
        return GetDialogDpiChangeBehavior(
            hDlg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallMsgFilterA(
    lpMsg:  LPMSG,
    nCode:  c_int    
) ->  BOOL
{
    unsafe {
        return CallMsgFilterA(
            lpMsg,
            nCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallMsgFilterW(
    lpMsg:  LPMSG,
    nCode:  c_int    
) ->  BOOL
{
    unsafe {
        return CallMsgFilterW(
            lpMsg,
            nCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenClipboard(
    hWndNewOwner:  HWND    
) ->  BOOL
{
    unsafe {
        return OpenClipboard(
            hWndNewOwner
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseClipboard(
    
) ->  BOOL
{
    unsafe {
        return CloseClipboard(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipboardSequenceNumber(
    
) ->  DWORD
{
    unsafe {
        return GetClipboardSequenceNumber(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipboardOwner(
    
) ->  HWND
{
    unsafe {
        return GetClipboardOwner(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetClipboardViewer(
    hWndNewViewer:  HWND    
) ->  HWND
{
    unsafe {
        return SetClipboardViewer(
            hWndNewViewer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipboardViewer(
    
) ->  HWND
{
    unsafe {
        return GetClipboardViewer(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeClipboardChain(
    hWndRemove:  HWND,
    hWndNewNext:  HWND    
) ->  BOOL
{
    unsafe {
        return ChangeClipboardChain(
            hWndRemove,
            hWndNewNext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetClipboardData(
    uFormat:  UINT,
    hMem:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return SetClipboardData(
            uFormat,
            hMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipboardData(
    uFormat:  UINT    
) ->  HANDLE
{
    unsafe {
        return GetClipboardData(
            uFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterClipboardFormatA(
    lpszFormat:  LPCSTR    
) ->  UINT
{
    unsafe {
        return RegisterClipboardFormatA(
            lpszFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterClipboardFormatW(
    lpszFormat:  LPCWSTR    
) ->  UINT
{
    unsafe {
        return RegisterClipboardFormatW(
            lpszFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CountClipboardFormats(
    
) ->  c_int
{
    unsafe {
        return CountClipboardFormats(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumClipboardFormats(
    format:  UINT    
) ->  UINT
{
    unsafe {
        return EnumClipboardFormats(
            format
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipboardFormatNameA(
    format:  UINT,
    lpszFormatName:  LPSTR,
    cchMaxCount:  c_int    
) ->  c_int
{
    unsafe {
        return GetClipboardFormatNameA(
            format,
            lpszFormatName,
            cchMaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipboardFormatNameW(
    format:  UINT,
    lpszFormatName:  LPWSTR,
    cchMaxCount:  c_int    
) ->  c_int
{
    unsafe {
        return GetClipboardFormatNameW(
            format,
            lpszFormatName,
            cchMaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EmptyClipboard(
    
) ->  BOOL
{
    unsafe {
        return EmptyClipboard(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsClipboardFormatAvailable(
    format:  UINT    
) ->  BOOL
{
    unsafe {
        return IsClipboardFormatAvailable(
            format
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPriorityClipboardFormat(
    paFormatPriorityList: *mut UINT,
    cFormats:  c_int    
) ->  c_int
{
    unsafe {
        return GetPriorityClipboardFormat(
            paFormatPriorityList,
            cFormats
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOpenClipboardWindow(
    
) ->  HWND
{
    unsafe {
        return GetOpenClipboardWindow(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddClipboardFormatListener(
    hwnd:  HWND    
) ->  BOOL
{
    unsafe {
        return AddClipboardFormatListener(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveClipboardFormatListener(
    hwnd:  HWND    
) ->  BOOL
{
    unsafe {
        return RemoveClipboardFormatListener(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUpdatedClipboardFormats(
    lpuiFormats:  PUINT,
    cFormats:  UINT,
    pcFormatsOut:  PUINT    
) ->  BOOL
{
    unsafe {
        return GetUpdatedClipboardFormats(
            lpuiFormats,
            cFormats,
            pcFormatsOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharToOemA(
    pSrc:  LPCSTR,
    pDst:  LPSTR    
) ->  BOOL
{
    unsafe {
        return CharToOemA(
            pSrc,
            pDst
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharToOemW(
    pSrc:  LPCWSTR,
    pDst:  LPSTR    
) ->  BOOL
{
    unsafe {
        return CharToOemW(
            pSrc,
            pDst
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OemToCharA(
    pSrc:  LPCSTR,
    pDst:  LPSTR    
) ->  BOOL
{
    unsafe {
        return OemToCharA(
            pSrc,
            pDst
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OemToCharW(
    pSrc:  LPCSTR,
    pDst:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return OemToCharW(
            pSrc,
            pDst
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharToOemBuffA(
    lpszSrc:  LPCSTR,
    lpszDst:  LPSTR,
    cchDstLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return CharToOemBuffA(
            lpszSrc,
            lpszDst,
            cchDstLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharToOemBuffW(
    lpszSrc:  LPCWSTR,
    lpszDst:  LPSTR,
    cchDstLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return CharToOemBuffW(
            lpszSrc,
            lpszDst,
            cchDstLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OemToCharBuffA(
    lpszSrc:  LPCSTR,
    lpszDst:  LPSTR,
    cchDstLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return OemToCharBuffA(
            lpszSrc,
            lpszDst,
            cchDstLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OemToCharBuffW(
    lpszSrc:  LPCSTR,
    lpszDst:  LPWSTR,
    cchDstLength:  DWORD    
) ->  BOOL
{
    unsafe {
        return OemToCharBuffW(
            lpszSrc,
            lpszDst,
            cchDstLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharUpperA(
    lpsz:  LPSTR    
) ->  LPSTR
{
    unsafe {
        return CharUpperA(
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharUpperW(
    lpsz:  LPWSTR    
) ->  LPWSTR
{
    unsafe {
        return CharUpperW(
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharUpperBuffA(
    lpsz:  LPSTR,
    cchLength:  DWORD    
) ->  DWORD
{
    unsafe {
        return CharUpperBuffA(
            lpsz,
            cchLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharUpperBuffW(
    lpsz:  LPWSTR,
    cchLength:  DWORD    
) ->  DWORD
{
    unsafe {
        return CharUpperBuffW(
            lpsz,
            cchLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharLowerA(
    lpsz:  LPSTR    
) ->  LPSTR
{
    unsafe {
        return CharLowerA(
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharLowerW(
    lpsz:  LPWSTR    
) ->  LPWSTR
{
    unsafe {
        return CharLowerW(
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharLowerBuffA(
    lpsz:  LPSTR,
    cchLength:  DWORD    
) ->  DWORD
{
    unsafe {
        return CharLowerBuffA(
            lpsz,
            cchLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharLowerBuffW(
    lpsz:  LPWSTR,
    cchLength:  DWORD    
) ->  DWORD
{
    unsafe {
        return CharLowerBuffW(
            lpsz,
            cchLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharNextA(
    lpsz:  LPCSTR    
) ->  LPSTR
{
    unsafe {
        return CharNextA(
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharNextW(
    lpsz:  LPCWSTR    
) ->  LPWSTR
{
    unsafe {
        return CharNextW(
            lpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharPrevA(
    lpszStart:  LPCSTR,
    lpszCurrent:  LPCSTR    
) ->  LPSTR
{
    unsafe {
        return CharPrevA(
            lpszStart,
            lpszCurrent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharPrevW(
    lpszStart:  LPCWSTR,
    lpszCurrent:  LPCWSTR    
) ->  LPWSTR
{
    unsafe {
        return CharPrevW(
            lpszStart,
            lpszCurrent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharNextExA(
    CodePage:  WORD,
    lpCurrentChar:  LPCSTR,
    dwFlags:  DWORD    
) ->  LPSTR
{
    unsafe {
        return CharNextExA(
            CodePage,
            lpCurrentChar,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CharPrevExA(
    CodePage:  WORD,
    lpStart:  LPCSTR,
    lpCurrentChar:  LPCSTR,
    dwFlags:  DWORD    
) ->  LPSTR
{
    unsafe {
        return CharPrevExA(
            CodePage,
            lpStart,
            lpCurrentChar,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsCharAlphaA(
    ch:  CHAR    
) ->  BOOL
{
    unsafe {
        return IsCharAlphaA(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsCharAlphaW(
    ch:  WCHAR    
) ->  BOOL
{
    unsafe {
        return IsCharAlphaW(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsCharAlphaNumericA(
    ch:  CHAR    
) ->  BOOL
{
    unsafe {
        return IsCharAlphaNumericA(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsCharAlphaNumericW(
    ch:  WCHAR    
) ->  BOOL
{
    unsafe {
        return IsCharAlphaNumericW(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsCharUpperA(
    ch:  CHAR    
) ->  BOOL
{
    unsafe {
        return IsCharUpperA(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsCharUpperW(
    ch:  WCHAR    
) ->  BOOL
{
    unsafe {
        return IsCharUpperW(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsCharLowerA(
    ch:  CHAR    
) ->  BOOL
{
    unsafe {
        return IsCharLowerA(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsCharLowerW(
    ch:  WCHAR    
) ->  BOOL
{
    unsafe {
        return IsCharLowerW(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFocus(
    hWnd:  HWND    
) ->  HWND
{
    unsafe {
        return SetFocus(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetActiveWindow(
    
) ->  HWND
{
    unsafe {
        return GetActiveWindow(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFocus(
    
) ->  HWND
{
    unsafe {
        return GetFocus(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKBCodePage(
    
) ->  UINT
{
    unsafe {
        return GetKBCodePage(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyState(
    nVirtKey:  c_int    
) ->  SHORT
{
    unsafe {
        return GetKeyState(
            nVirtKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAsyncKeyState(
    vKey:  c_int    
) ->  SHORT
{
    unsafe {
        return GetAsyncKeyState(
            vKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyboardState(
    lpKeyState:  PBYTE    
) ->  BOOL
{
    unsafe {
        return GetKeyboardState(
            lpKeyState
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetKeyboardState(
    lpKeyState:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return SetKeyboardState(
            lpKeyState
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyNameTextA(
    lParam:  LONG,
    lpString:  LPSTR,
    cchSize:  c_int    
) ->  c_int
{
    unsafe {
        return GetKeyNameTextA(
            lParam,
            lpString,
            cchSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyNameTextW(
    lParam:  LONG,
    lpString:  LPWSTR,
    cchSize:  c_int    
) ->  c_int
{
    unsafe {
        return GetKeyNameTextW(
            lParam,
            lpString,
            cchSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetKeyboardType(
    nTypeFlag:  c_int    
) ->  c_int
{
    unsafe {
        return GetKeyboardType(
            nTypeFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ToAscii(
    uVirtKey:  UINT,
    uScanCode:  UINT,
    lpKeyState: *const BYTE,
    lpChar:  LPWORD,
    uFlags:  UINT    
) ->  c_int
{
    unsafe {
        return ToAscii(
            uVirtKey,
            uScanCode,
            lpKeyState,
            lpChar,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ToAsciiEx(
    uVirtKey:  UINT,
    uScanCode:  UINT,
    lpKeyState: *const BYTE,
    lpChar:  LPWORD,
    uFlags:  UINT,
    dwhkl:  HKL    
) ->  c_int
{
    unsafe {
        return ToAsciiEx(
            uVirtKey,
            uScanCode,
            lpKeyState,
            lpChar,
            uFlags,
            dwhkl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ToUnicode(
    wVirtKey:  UINT,
    wScanCode:  UINT,
    lpKeyState: *const BYTE,
    pwszBuff:  LPWSTR,
    cchBuff:  c_int,
    wFlags:  UINT    
) ->  c_int
{
    unsafe {
        return ToUnicode(
            wVirtKey,
            wScanCode,
            lpKeyState,
            pwszBuff,
            cchBuff,
            wFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OemKeyScan(
    wOemChar:  WORD    
) ->  DWORD
{
    unsafe {
        return OemKeyScan(
            wOemChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VkKeyScanA(
    ch:  CHAR    
) ->  SHORT
{
    unsafe {
        return VkKeyScanA(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VkKeyScanW(
    ch:  WCHAR    
) ->  SHORT
{
    unsafe {
        return VkKeyScanW(
            ch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VkKeyScanExA(
    ch:  CHAR,
    dwhkl:  HKL    
) ->  SHORT
{
    unsafe {
        return VkKeyScanExA(
            ch,
            dwhkl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VkKeyScanExW(
    ch:  WCHAR,
    dwhkl:  HKL    
) ->  SHORT
{
    unsafe {
        return VkKeyScanExW(
            ch,
            dwhkl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_keybd_event(
    bVk:  BYTE,
    bScan:  BYTE,
    dwFlags:  DWORD,
    dwExtraInfo:  ULONG_PTR    
)
{
    unsafe {
        return keybd_event(
            bVk,
            bScan,
            dwFlags,
            dwExtraInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mouse_event(
    dwFlags:  DWORD,
    dx:  DWORD,
    dy:  DWORD,
    dwData:  DWORD,
    dwExtraInfo:  ULONG_PTR    
)
{
    unsafe {
        return mouse_event(
            dwFlags,
            dx,
            dy,
            dwData,
            dwExtraInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendInput(
    cInputs:  UINT,
    pInputs:  LPINPUT,
    cbSize:  c_int    
) ->  UINT
{
    unsafe {
        return SendInput(
            cInputs,
            pInputs,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTouchInputInfo(
    hTouchInput:  HTOUCHINPUT,
    cInputs:  UINT,
    pInputs:  PTOUCHINPUT,
    cbSize:  c_int    
) ->  BOOL
{
    unsafe {
        return GetTouchInputInfo(
            hTouchInput,
            cInputs,
            pInputs,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseTouchInputHandle(
    hTouchInput:  HTOUCHINPUT    
) ->  BOOL
{
    unsafe {
        return CloseTouchInputHandle(
            hTouchInput
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterTouchWindow(
    hwnd:  HWND,
    ulFlags:  ULONG    
) ->  BOOL
{
    unsafe {
        return RegisterTouchWindow(
            hwnd,
            ulFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterTouchWindow(
    hwnd:  HWND    
) ->  BOOL
{
    unsafe {
        return UnregisterTouchWindow(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsTouchWindow(
    hwnd:  HWND,
    pulFlags:  PULONG    
) ->  BOOL
{
    unsafe {
        return IsTouchWindow(
            hwnd,
            pulFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitializeTouchInjection(
    maxCount:  UINT32,
    dwMode:  DWORD    
) ->  BOOL
{
    unsafe {
        return InitializeTouchInjection(
            maxCount,
            dwMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InjectTouchInput(
    count:  UINT32,
    contacts: *const POINTER_TOUCH_INFO    
) ->  BOOL
{
    unsafe {
        return InjectTouchInput(
            count,
            contacts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerType(
    pointerId:  UINT32,
    pointerType: *mut POINTER_INPUT_TYPE    
) ->  BOOL
{
    unsafe {
        return GetPointerType(
            pointerId,
            pointerType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerCursorId(
    pointerId:  UINT32,
    cursorId: *mut UINT32    
) ->  BOOL
{
    unsafe {
        return GetPointerCursorId(
            pointerId,
            cursorId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerInfo(
    pointerId:  UINT32,
    pointerInfo: *mut POINTER_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerInfo(
            pointerId,
            pointerInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerInfoHistory(
    pointerId:  UINT32,
    entriesCount: *mut UINT32,
    pointerInfo: *mut POINTER_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerInfoHistory(
            pointerId,
            entriesCount,
            pointerInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerFrameInfo(
    pointerId:  UINT32,
    pointerCount: *mut UINT32,
    pointerInfo: *mut POINTER_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerFrameInfo(
            pointerId,
            pointerCount,
            pointerInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerFrameInfoHistory(
    pointerId:  UINT32,
    entriesCount: *mut UINT32,
    pointerCount: *mut UINT32,
    pointerInfo: *mut POINTER_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerFrameInfoHistory(
            pointerId,
            entriesCount,
            pointerCount,
            pointerInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerTouchInfo(
    pointerId:  UINT32,
    touchInfo: *mut POINTER_TOUCH_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerTouchInfo(
            pointerId,
            touchInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerTouchInfoHistory(
    pointerId:  UINT32,
    entriesCount: *mut UINT32,
    touchInfo: *mut POINTER_TOUCH_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerTouchInfoHistory(
            pointerId,
            entriesCount,
            touchInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerFrameTouchInfo(
    pointerId:  UINT32,
    pointerCount: *mut UINT32,
    touchInfo: *mut POINTER_TOUCH_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerFrameTouchInfo(
            pointerId,
            pointerCount,
            touchInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerFrameTouchInfoHistory(
    pointerId:  UINT32,
    entriesCount: *mut UINT32,
    pointerCount: *mut UINT32,
    touchInfo: *mut POINTER_TOUCH_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerFrameTouchInfoHistory(
            pointerId,
            entriesCount,
            pointerCount,
            touchInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerPenInfo(
    pointerId:  UINT32,
    penInfo: *mut POINTER_PEN_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerPenInfo(
            pointerId,
            penInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerPenInfoHistory(
    pointerId:  UINT32,
    entriesCount: *mut UINT32,
    penInfo: *mut POINTER_PEN_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerPenInfoHistory(
            pointerId,
            entriesCount,
            penInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerFramePenInfo(
    pointerId:  UINT32,
    pointerCount: *mut UINT32,
    penInfo: *mut POINTER_PEN_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerFramePenInfo(
            pointerId,
            pointerCount,
            penInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerFramePenInfoHistory(
    pointerId:  UINT32,
    entriesCount: *mut UINT32,
    pointerCount: *mut UINT32,
    penInfo: *mut POINTER_PEN_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerFramePenInfoHistory(
            pointerId,
            entriesCount,
            pointerCount,
            penInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SkipPointerFrameMessages(
    pointerId:  UINT32    
) ->  BOOL
{
    unsafe {
        return SkipPointerFrameMessages(
            pointerId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterPointerInputTarget(
    hwnd:  HWND,
    pointerType:  POINTER_INPUT_TYPE    
) ->  BOOL
{
    unsafe {
        return RegisterPointerInputTarget(
            hwnd,
            pointerType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterPointerInputTarget(
    hwnd:  HWND,
    pointerType:  POINTER_INPUT_TYPE    
) ->  BOOL
{
    unsafe {
        return UnregisterPointerInputTarget(
            hwnd,
            pointerType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterPointerInputTargetEx(
    hwnd:  HWND,
    pointerType:  POINTER_INPUT_TYPE,
    fObserve:  BOOL    
) ->  BOOL
{
    unsafe {
        return RegisterPointerInputTargetEx(
            hwnd,
            pointerType,
            fObserve
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnregisterPointerInputTargetEx(
    hwnd:  HWND,
    pointerType:  POINTER_INPUT_TYPE    
) ->  BOOL
{
    unsafe {
        return UnregisterPointerInputTargetEx(
            hwnd,
            pointerType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateSyntheticPointerDevice(
    pointerType:  POINTER_INPUT_TYPE,
    maxCount:  ULONG,
    mode:  POINTER_FEEDBACK_MODE    
) ->  HSYNTHETICPOINTERDEVICE
{
    unsafe {
        return CreateSyntheticPointerDevice(
            pointerType,
            maxCount,
            mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InjectSyntheticPointerInput(
    device:  HSYNTHETICPOINTERDEVICE,
    pointerInfo: *const POINTER_TYPE_INFO,
    count:  UINT32    
) ->  BOOL
{
    unsafe {
        return InjectSyntheticPointerInput(
            device,
            pointerInfo,
            count
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroySyntheticPointerDevice(
    device:  HSYNTHETICPOINTERDEVICE    
)
{
    unsafe {
        return DestroySyntheticPointerDevice(
            device
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnableMouseInPointer(
    fEnable:  BOOL    
) ->  BOOL
{
    unsafe {
        return EnableMouseInPointer(
            fEnable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsMouseInPointerEnabled(
    
) ->  BOOL
{
    unsafe {
        return IsMouseInPointerEnabled(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnableMouseInPointerForThread(
    
) ->  BOOL
{
    unsafe {
        return EnableMouseInPointerForThread(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterTouchHitTestingWindow(
    hwnd:  HWND,
    value:  ULONG    
) ->  BOOL
{
    unsafe {
        return RegisterTouchHitTestingWindow(
            hwnd,
            value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EvaluateProximityToRect(
    controlBoundingBox: *const RECT,
    pHitTestingInput: *const TOUCH_HIT_TESTING_INPUT,
    pProximityEval: *mut TOUCH_HIT_TESTING_PROXIMITY_EVALUATION    
) ->  BOOL
{
    unsafe {
        return EvaluateProximityToRect(
            controlBoundingBox,
            pHitTestingInput,
            pProximityEval
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EvaluateProximityToPolygon(
    numVertices:  UINT32,
    controlPolygon: *const POINT,
    pHitTestingInput: *const TOUCH_HIT_TESTING_INPUT,
    pProximityEval: *mut TOUCH_HIT_TESTING_PROXIMITY_EVALUATION    
) ->  BOOL
{
    unsafe {
        return EvaluateProximityToPolygon(
            numVertices,
            controlPolygon,
            pHitTestingInput,
            pProximityEval
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PackTouchHitTestingProximityEvaluation(
    pHitTestingInput: *const TOUCH_HIT_TESTING_INPUT,
    pProximityEval: *const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION    
) ->  LRESULT
{
    unsafe {
        return PackTouchHitTestingProximityEvaluation(
            pHitTestingInput,
            pProximityEval
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowFeedbackSetting(
    hwnd:  HWND,
    feedback:  FEEDBACK_TYPE,
    dwFlags:  DWORD,
    pSize: *mut UINT32,
    config: *mut c_void    
) ->  BOOL
{
    unsafe {
        return GetWindowFeedbackSetting(
            hwnd,
            feedback,
            dwFlags,
            pSize,
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowFeedbackSetting(
    hwnd:  HWND,
    feedback:  FEEDBACK_TYPE,
    dwFlags:  DWORD,
    size:  UINT32,
    configuration: *const c_void    
) ->  BOOL
{
    unsafe {
        return SetWindowFeedbackSetting(
            hwnd,
            feedback,
            dwFlags,
            size,
            configuration
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerInputTransform(
    pointerId:  UINT32,
    historyCount:  UINT32,
    inputTransform: *mut INPUT_TRANSFORM    
) ->  BOOL
{
    unsafe {
        return GetPointerInputTransform(
            pointerId,
            historyCount,
            inputTransform
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLastInputInfo(
    plii:  PLASTINPUTINFO    
) ->  BOOL
{
    unsafe {
        return GetLastInputInfo(
            plii
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapVirtualKeyA(
    uCode:  UINT,
    uMapType:  UINT    
) ->  UINT
{
    unsafe {
        return MapVirtualKeyA(
            uCode,
            uMapType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapVirtualKeyW(
    uCode:  UINT,
    uMapType:  UINT    
) ->  UINT
{
    unsafe {
        return MapVirtualKeyW(
            uCode,
            uMapType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapVirtualKeyExA(
    uCode:  UINT,
    uMapType:  UINT,
    dwhkl:  HKL    
) ->  UINT
{
    unsafe {
        return MapVirtualKeyExA(
            uCode,
            uMapType,
            dwhkl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapVirtualKeyExW(
    uCode:  UINT,
    uMapType:  UINT,
    dwhkl:  HKL    
) ->  UINT
{
    unsafe {
        return MapVirtualKeyExW(
            uCode,
            uMapType,
            dwhkl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetInputState(
    
) ->  BOOL
{
    unsafe {
        return GetInputState(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetQueueStatus(
    flags:  UINT    
) ->  DWORD
{
    unsafe {
        return GetQueueStatus(
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCapture(
    
) ->  HWND
{
    unsafe {
        return GetCapture(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCapture(
    hWnd:  HWND    
) ->  HWND
{
    unsafe {
        return SetCapture(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseCapture(
    
) ->  BOOL
{
    unsafe {
        return ReleaseCapture(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MsgWaitForMultipleObjects(
    nCount:  DWORD,
    pHandles: *const HANDLE,
    fWaitAll:  BOOL,
    dwMilliseconds:  DWORD,
    dwWakeMask:  DWORD    
) ->  DWORD
{
    unsafe {
        return MsgWaitForMultipleObjects(
            nCount,
            pHandles,
            fWaitAll,
            dwMilliseconds,
            dwWakeMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MsgWaitForMultipleObjectsEx(
    nCount:  DWORD,
    pHandles: *const HANDLE,
    dwMilliseconds:  DWORD,
    dwWakeMask:  DWORD,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return MsgWaitForMultipleObjectsEx(
            nCount,
            pHandles,
            dwMilliseconds,
            dwWakeMask,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetTimer(
    hWnd:  HWND,
    nIDEvent:  UINT_PTR,
    uElapse:  UINT,
    lpTimerFunc:  TIMERPROC    
) ->  UINT_PTR
{
    unsafe {
        return SetTimer(
            hWnd,
            nIDEvent,
            uElapse,
            lpTimerFunc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCoalescableTimer(
    hWnd:  HWND,
    nIDEvent:  UINT_PTR,
    uElapse:  UINT,
    lpTimerFunc:  TIMERPROC,
    uToleranceDelay:  ULONG    
) ->  UINT_PTR
{
    unsafe {
        return SetCoalescableTimer(
            hWnd,
            nIDEvent,
            uElapse,
            lpTimerFunc,
            uToleranceDelay
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_KillTimer(
    hWnd:  HWND,
    uIDEvent:  UINT_PTR    
) ->  BOOL
{
    unsafe {
        return KillTimer(
            hWnd,
            uIDEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWindowUnicode(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return IsWindowUnicode(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnableWindow(
    hWnd:  HWND,
    bEnable:  BOOL    
) ->  BOOL
{
    unsafe {
        return EnableWindow(
            hWnd,
            bEnable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWindowEnabled(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return IsWindowEnabled(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadAcceleratorsA(
    hInstance:  HINSTANCE,
    lpTableName:  LPCSTR    
) ->  HACCEL
{
    unsafe {
        return LoadAcceleratorsA(
            hInstance,
            lpTableName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadAcceleratorsW(
    hInstance:  HINSTANCE,
    lpTableName:  LPCWSTR    
) ->  HACCEL
{
    unsafe {
        return LoadAcceleratorsW(
            hInstance,
            lpTableName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateAcceleratorTableA(
    paccel:  LPACCEL,
    cAccel:  c_int    
) ->  HACCEL
{
    unsafe {
        return CreateAcceleratorTableA(
            paccel,
            cAccel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateAcceleratorTableW(
    paccel:  LPACCEL,
    cAccel:  c_int    
) ->  HACCEL
{
    unsafe {
        return CreateAcceleratorTableW(
            paccel,
            cAccel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroyAcceleratorTable(
    hAccel:  HACCEL    
) ->  BOOL
{
    unsafe {
        return DestroyAcceleratorTable(
            hAccel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyAcceleratorTableA(
    hAccelSrc:  HACCEL,
    lpAccelDst:  LPACCEL,
    cAccelEntries:  c_int    
) ->  c_int
{
    unsafe {
        return CopyAcceleratorTableA(
            hAccelSrc,
            lpAccelDst,
            cAccelEntries
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyAcceleratorTableW(
    hAccelSrc:  HACCEL,
    lpAccelDst:  LPACCEL,
    cAccelEntries:  c_int    
) ->  c_int
{
    unsafe {
        return CopyAcceleratorTableW(
            hAccelSrc,
            lpAccelDst,
            cAccelEntries
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TranslateAcceleratorA(
    hWnd:  HWND,
    hAccTable:  HACCEL,
    lpMsg:  LPMSG    
) ->  c_int
{
    unsafe {
        return TranslateAcceleratorA(
            hWnd,
            hAccTable,
            lpMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TranslateAcceleratorW(
    hWnd:  HWND,
    hAccTable:  HACCEL,
    lpMsg:  LPMSG    
) ->  c_int
{
    unsafe {
        return TranslateAcceleratorW(
            hWnd,
            hAccTable,
            lpMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemMetrics(
    nIndex:  c_int    
) ->  c_int
{
    unsafe {
        return GetSystemMetrics(
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemMetricsForDpi(
    nIndex:  c_int,
    dpi:  UINT    
) ->  c_int
{
    unsafe {
        return GetSystemMetricsForDpi(
            nIndex,
            dpi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadMenuA(
    hInstance:  HINSTANCE,
    lpMenuName:  LPCSTR    
) ->  HMENU
{
    unsafe {
        return LoadMenuA(
            hInstance,
            lpMenuName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadMenuW(
    hInstance:  HINSTANCE,
    lpMenuName:  LPCWSTR    
) ->  HMENU
{
    unsafe {
        return LoadMenuW(
            hInstance,
            lpMenuName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadMenuIndirectA(
    lpMenuTemplate: *const MENUTEMPLATEA    
) ->  HMENU
{
    unsafe {
        return LoadMenuIndirectA(
            lpMenuTemplate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadMenuIndirectW(
    lpMenuTemplate: *const MENUTEMPLATEW    
) ->  HMENU
{
    unsafe {
        return LoadMenuIndirectW(
            lpMenuTemplate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenu(
    hWnd:  HWND    
) ->  HMENU
{
    unsafe {
        return GetMenu(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMenu(
    hWnd:  HWND,
    hMenu:  HMENU    
) ->  BOOL
{
    unsafe {
        return SetMenu(
            hWnd,
            hMenu
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeMenuA(
    hMenu:  HMENU,
    cmd:  UINT,
    lpszNewItem:  LPCSTR,
    cmdInsert:  UINT,
    flags:  UINT    
) ->  BOOL
{
    unsafe {
        return ChangeMenuA(
            hMenu,
            cmd,
            lpszNewItem,
            cmdInsert,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeMenuW(
    hMenu:  HMENU,
    cmd:  UINT,
    lpszNewItem:  LPCWSTR,
    cmdInsert:  UINT,
    flags:  UINT    
) ->  BOOL
{
    unsafe {
        return ChangeMenuW(
            hMenu,
            cmd,
            lpszNewItem,
            cmdInsert,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HiliteMenuItem(
    hWnd:  HWND,
    hMenu:  HMENU,
    uIDHiliteItem:  UINT,
    uHilite:  UINT    
) ->  BOOL
{
    unsafe {
        return HiliteMenuItem(
            hWnd,
            hMenu,
            uIDHiliteItem,
            uHilite
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuStringA(
    hMenu:  HMENU,
    uIDItem:  UINT,
    lpString:  LPSTR,
    cchMax:  c_int,
    flags:  UINT    
) ->  c_int
{
    unsafe {
        return GetMenuStringA(
            hMenu,
            uIDItem,
            lpString,
            cchMax,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuStringW(
    hMenu:  HMENU,
    uIDItem:  UINT,
    lpString:  LPWSTR,
    cchMax:  c_int,
    flags:  UINT    
) ->  c_int
{
    unsafe {
        return GetMenuStringW(
            hMenu,
            uIDItem,
            lpString,
            cchMax,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuState(
    hMenu:  HMENU,
    uId:  UINT,
    uFlags:  UINT    
) ->  UINT
{
    unsafe {
        return GetMenuState(
            hMenu,
            uId,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawMenuBar(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return DrawMenuBar(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemMenu(
    hWnd:  HWND,
    bRevert:  BOOL    
) ->  HMENU
{
    unsafe {
        return GetSystemMenu(
            hWnd,
            bRevert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMenu(
    
) ->  HMENU
{
    unsafe {
        return CreateMenu(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePopupMenu(
    
) ->  HMENU
{
    unsafe {
        return CreatePopupMenu(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroyMenu(
    hMenu:  HMENU    
) ->  BOOL
{
    unsafe {
        return DestroyMenu(
            hMenu
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckMenuItem(
    hMenu:  HMENU,
    uIDCheckItem:  UINT,
    uCheck:  UINT    
) ->  DWORD
{
    unsafe {
        return CheckMenuItem(
            hMenu,
            uIDCheckItem,
            uCheck
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnableMenuItem(
    hMenu:  HMENU,
    uIDEnableItem:  UINT,
    uEnable:  UINT    
) ->  BOOL
{
    unsafe {
        return EnableMenuItem(
            hMenu,
            uIDEnableItem,
            uEnable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSubMenu(
    hMenu:  HMENU,
    nPos:  c_int    
) ->  HMENU
{
    unsafe {
        return GetSubMenu(
            hMenu,
            nPos
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuItemID(
    hMenu:  HMENU,
    nPos:  c_int    
) ->  UINT
{
    unsafe {
        return GetMenuItemID(
            hMenu,
            nPos
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuItemCount(
    hMenu:  HMENU    
) ->  c_int
{
    unsafe {
        return GetMenuItemCount(
            hMenu
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InsertMenuA(
    hMenu:  HMENU,
    uPosition:  UINT,
    uFlags:  UINT,
    uIDNewItem:  UINT_PTR,
    lpNewItem:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return InsertMenuA(
            hMenu,
            uPosition,
            uFlags,
            uIDNewItem,
            lpNewItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InsertMenuW(
    hMenu:  HMENU,
    uPosition:  UINT,
    uFlags:  UINT,
    uIDNewItem:  UINT_PTR,
    lpNewItem:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return InsertMenuW(
            hMenu,
            uPosition,
            uFlags,
            uIDNewItem,
            lpNewItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AppendMenuA(
    hMenu:  HMENU,
    uFlags:  UINT,
    uIDNewItem:  UINT_PTR,
    lpNewItem:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return AppendMenuA(
            hMenu,
            uFlags,
            uIDNewItem,
            lpNewItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AppendMenuW(
    hMenu:  HMENU,
    uFlags:  UINT,
    uIDNewItem:  UINT_PTR,
    lpNewItem:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return AppendMenuW(
            hMenu,
            uFlags,
            uIDNewItem,
            lpNewItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ModifyMenuA(
    hMnu:  HMENU,
    uPosition:  UINT,
    uFlags:  UINT,
    uIDNewItem:  UINT_PTR,
    lpNewItem:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return ModifyMenuA(
            hMnu,
            uPosition,
            uFlags,
            uIDNewItem,
            lpNewItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ModifyMenuW(
    hMnu:  HMENU,
    uPosition:  UINT,
    uFlags:  UINT,
    uIDNewItem:  UINT_PTR,
    lpNewItem:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return ModifyMenuW(
            hMnu,
            uPosition,
            uFlags,
            uIDNewItem,
            lpNewItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveMenu(
    hMenu:  HMENU,
    uPosition:  UINT,
    uFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return RemoveMenu(
            hMenu,
            uPosition,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteMenu(
    hMenu:  HMENU,
    uPosition:  UINT,
    uFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return DeleteMenu(
            hMenu,
            uPosition,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMenuItemBitmaps(
    hMenu:  HMENU,
    uPosition:  UINT,
    uFlags:  UINT,
    hBitmapUnchecked:  HBITMAP,
    hBitmapChecked:  HBITMAP    
) ->  BOOL
{
    unsafe {
        return SetMenuItemBitmaps(
            hMenu,
            uPosition,
            uFlags,
            hBitmapUnchecked,
            hBitmapChecked
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuCheckMarkDimensions(
    
) ->  LONG
{
    unsafe {
        return GetMenuCheckMarkDimensions(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TrackPopupMenu(
    hMenu:  HMENU,
    uFlags:  UINT,
    x:  c_int,
    y:  c_int,
    nReserved:  c_int,
    hWnd:  HWND,
    prcRect: *const RECT    
) ->  BOOL
{
    unsafe {
        return TrackPopupMenu(
            hMenu,
            uFlags,
            x,
            y,
            nReserved,
            hWnd,
            prcRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TrackPopupMenuEx(
    hMenu:  HMENU,
    uFlags:  UINT,
    x:  c_int,
    y:  c_int,
    hwnd:  HWND,
    lptpm:  LPTPMPARAMS    
) ->  BOOL
{
    unsafe {
        return TrackPopupMenuEx(
            hMenu,
            uFlags,
            x,
            y,
            hwnd,
            lptpm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CalculatePopupWindowPosition(
    anchorPoint: *const POINT,
    windowSize: *const SIZE,
    flags:  UINT,
    excludeRect: *mut RECT,
    popupWindowPosition: *mut RECT    
) ->  BOOL
{
    unsafe {
        return CalculatePopupWindowPosition(
            anchorPoint,
            windowSize,
            flags,
            excludeRect,
            popupWindowPosition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuInfo(
    arg1:  HMENU,
    arg2:  LPMENUINFO    
) ->  BOOL
{
    unsafe {
        return GetMenuInfo(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMenuInfo(
    arg1:  HMENU,
    arg2:  LPCMENUINFO    
) ->  BOOL
{
    unsafe {
        return SetMenuInfo(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndMenu(
    
) ->  BOOL
{
    unsafe {
        return EndMenu(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InsertMenuItemA(
    hmenu:  HMENU,
    item:  UINT,
    fByPosition:  BOOL,
    lpmi:  LPCMENUITEMINFOA    
) ->  BOOL
{
    unsafe {
        return InsertMenuItemA(
            hmenu,
            item,
            fByPosition,
            lpmi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InsertMenuItemW(
    hmenu:  HMENU,
    item:  UINT,
    fByPosition:  BOOL,
    lpmi:  LPCMENUITEMINFOW    
) ->  BOOL
{
    unsafe {
        return InsertMenuItemW(
            hmenu,
            item,
            fByPosition,
            lpmi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuItemInfoA(
    hmenu:  HMENU,
    item:  UINT,
    fByPosition:  BOOL,
    lpmii:  LPMENUITEMINFOA    
) ->  BOOL
{
    unsafe {
        return GetMenuItemInfoA(
            hmenu,
            item,
            fByPosition,
            lpmii
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuItemInfoW(
    hmenu:  HMENU,
    item:  UINT,
    fByPosition:  BOOL,
    lpmii:  LPMENUITEMINFOW    
) ->  BOOL
{
    unsafe {
        return GetMenuItemInfoW(
            hmenu,
            item,
            fByPosition,
            lpmii
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMenuItemInfoA(
    hmenu:  HMENU,
    item:  UINT,
    fByPositon:  BOOL,
    lpmii:  LPCMENUITEMINFOA    
) ->  BOOL
{
    unsafe {
        return SetMenuItemInfoA(
            hmenu,
            item,
            fByPositon,
            lpmii
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMenuItemInfoW(
    hmenu:  HMENU,
    item:  UINT,
    fByPositon:  BOOL,
    lpmii:  LPCMENUITEMINFOW    
) ->  BOOL
{
    unsafe {
        return SetMenuItemInfoW(
            hmenu,
            item,
            fByPositon,
            lpmii
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuDefaultItem(
    hMenu:  HMENU,
    fByPos:  UINT,
    gmdiFlags:  UINT    
) ->  UINT
{
    unsafe {
        return GetMenuDefaultItem(
            hMenu,
            fByPos,
            gmdiFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMenuDefaultItem(
    hMenu:  HMENU,
    uItem:  UINT,
    fByPos:  UINT    
) ->  BOOL
{
    unsafe {
        return SetMenuDefaultItem(
            hMenu,
            uItem,
            fByPos
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuItemRect(
    hWnd:  HWND,
    hMenu:  HMENU,
    uItem:  UINT,
    lprcItem:  LPRECT    
) ->  BOOL
{
    unsafe {
        return GetMenuItemRect(
            hWnd,
            hMenu,
            uItem,
            lprcItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MenuItemFromPoint(
    hWnd:  HWND,
    hMenu:  HMENU,
    ptScreen:  POINT    
) ->  c_int
{
    unsafe {
        return MenuItemFromPoint(
            hWnd,
            hMenu,
            ptScreen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DragObject(
    hwndParent:  HWND,
    hwndFrom:  HWND,
    fmt:  UINT,
    data:  ULONG_PTR,
    hcur:  HCURSOR    
) ->  DWORD
{
    unsafe {
        return DragObject(
            hwndParent,
            hwndFrom,
            fmt,
            data,
            hcur
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DragDetect(
    hwnd:  HWND,
    pt:  POINT    
) ->  BOOL
{
    unsafe {
        return DragDetect(
            hwnd,
            pt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawIcon(
    hDC:  HDC,
    X:  c_int,
    Y:  c_int,
    hIcon:  HICON    
) ->  BOOL
{
    unsafe {
        return DrawIcon(
            hDC,
            X,
            Y,
            hIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawTextA(
    hdc:  HDC,
    lpchText:  LPCSTR,
    cchText:  c_int,
    lprc:  LPRECT,
    format:  UINT    
) ->  c_int
{
    unsafe {
        return DrawTextA(
            hdc,
            lpchText,
            cchText,
            lprc,
            format
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawTextW(
    hdc:  HDC,
    lpchText:  LPCWSTR,
    cchText:  c_int,
    lprc:  LPRECT,
    format:  UINT    
) ->  c_int
{
    unsafe {
        return DrawTextW(
            hdc,
            lpchText,
            cchText,
            lprc,
            format
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawTextExA(
    hdc:  HDC,
    lpchText:  LPSTR,
    cchText:  c_int,
    lprc:  LPRECT,
    format:  UINT,
    lpdtp:  LPDRAWTEXTPARAMS    
) ->  c_int
{
    unsafe {
        return DrawTextExA(
            hdc,
            lpchText,
            cchText,
            lprc,
            format,
            lpdtp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawTextExW(
    hdc:  HDC,
    lpchText:  LPWSTR,
    cchText:  c_int,
    lprc:  LPRECT,
    format:  UINT,
    lpdtp:  LPDRAWTEXTPARAMS    
) ->  c_int
{
    unsafe {
        return DrawTextExW(
            hdc,
            lpchText,
            cchText,
            lprc,
            format,
            lpdtp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GrayStringA(
    hDC:  HDC,
    hBrush:  HBRUSH,
    lpOutputFunc:  GRAYSTRINGPROC,
    lpData:  LPARAM,
    nCount:  c_int,
    X:  c_int,
    Y:  c_int,
    nWidth:  c_int,
    nHeight:  c_int    
) ->  BOOL
{
    unsafe {
        return GrayStringA(
            hDC,
            hBrush,
            lpOutputFunc,
            lpData,
            nCount,
            X,
            Y,
            nWidth,
            nHeight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GrayStringW(
    hDC:  HDC,
    hBrush:  HBRUSH,
    lpOutputFunc:  GRAYSTRINGPROC,
    lpData:  LPARAM,
    nCount:  c_int,
    X:  c_int,
    Y:  c_int,
    nWidth:  c_int,
    nHeight:  c_int    
) ->  BOOL
{
    unsafe {
        return GrayStringW(
            hDC,
            hBrush,
            lpOutputFunc,
            lpData,
            nCount,
            X,
            Y,
            nWidth,
            nHeight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawStateA(
    hdc:  HDC,
    hbrFore:  HBRUSH,
    qfnCallBack:  DRAWSTATEPROC,
    lData:  LPARAM,
    wData:  WPARAM,
    x:  c_int,
    y:  c_int,
    cx:  c_int,
    cy:  c_int,
    uFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return DrawStateA(
            hdc,
            hbrFore,
            qfnCallBack,
            lData,
            wData,
            x,
            y,
            cx,
            cy,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawStateW(
    hdc:  HDC,
    hbrFore:  HBRUSH,
    qfnCallBack:  DRAWSTATEPROC,
    lData:  LPARAM,
    wData:  WPARAM,
    x:  c_int,
    y:  c_int,
    cx:  c_int,
    cy:  c_int,
    uFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return DrawStateW(
            hdc,
            hbrFore,
            qfnCallBack,
            lData,
            wData,
            x,
            y,
            cx,
            cy,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TabbedTextOutA(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lpString:  LPCSTR,
    chCount:  c_int,
    nTabPositions:  c_int,
    lpnTabStopPositions: *const INT,
    nTabOrigin:  c_int    
) ->  LONG
{
    unsafe {
        return TabbedTextOutA(
            hdc,
            x,
            y,
            lpString,
            chCount,
            nTabPositions,
            lpnTabStopPositions,
            nTabOrigin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TabbedTextOutW(
    hdc:  HDC,
    x:  c_int,
    y:  c_int,
    lpString:  LPCWSTR,
    chCount:  c_int,
    nTabPositions:  c_int,
    lpnTabStopPositions: *const INT,
    nTabOrigin:  c_int    
) ->  LONG
{
    unsafe {
        return TabbedTextOutW(
            hdc,
            x,
            y,
            lpString,
            chCount,
            nTabPositions,
            lpnTabStopPositions,
            nTabOrigin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTabbedTextExtentA(
    hdc:  HDC,
    lpString:  LPCSTR,
    chCount:  c_int,
    nTabPositions:  c_int,
    lpnTabStopPositions: *const INT    
) ->  DWORD
{
    unsafe {
        return GetTabbedTextExtentA(
            hdc,
            lpString,
            chCount,
            nTabPositions,
            lpnTabStopPositions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTabbedTextExtentW(
    hdc:  HDC,
    lpString:  LPCWSTR,
    chCount:  c_int,
    nTabPositions:  c_int,
    lpnTabStopPositions: *const INT    
) ->  DWORD
{
    unsafe {
        return GetTabbedTextExtentW(
            hdc,
            lpString,
            chCount,
            nTabPositions,
            lpnTabStopPositions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UpdateWindow(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return UpdateWindow(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetActiveWindow(
    hWnd:  HWND    
) ->  HWND
{
    unsafe {
        return SetActiveWindow(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetForegroundWindow(
    
) ->  HWND
{
    unsafe {
        return GetForegroundWindow(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PaintDesktop(
    hdc:  HDC    
) ->  BOOL
{
    unsafe {
        return PaintDesktop(
            hdc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SwitchToThisWindow(
    hwnd:  HWND,
    fUnknown:  BOOL    
)
{
    unsafe {
        return SwitchToThisWindow(
            hwnd,
            fUnknown
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetForegroundWindow(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return SetForegroundWindow(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AllowSetForegroundWindow(
    dwProcessId:  DWORD    
) ->  BOOL
{
    unsafe {
        return AllowSetForegroundWindow(
            dwProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LockSetForegroundWindow(
    uLockCode:  UINT    
) ->  BOOL
{
    unsafe {
        return LockSetForegroundWindow(
            uLockCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WindowFromDC(
    hDC:  HDC    
) ->  HWND
{
    unsafe {
        return WindowFromDC(
            hDC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDC(
    hWnd:  HWND    
) ->  HDC
{
    unsafe {
        return GetDC(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDCEx(
    hWnd:  HWND,
    hrgnClip:  HRGN,
    flags:  DWORD    
) ->  HDC
{
    unsafe {
        return GetDCEx(
            hWnd,
            hrgnClip,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowDC(
    hWnd:  HWND    
) ->  HDC
{
    unsafe {
        return GetWindowDC(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseDC(
    hWnd:  HWND,
    hDC:  HDC    
) ->  c_int
{
    unsafe {
        return ReleaseDC(
            hWnd,
            hDC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BeginPaint(
    hWnd:  HWND,
    lpPaint:  LPPAINTSTRUCT    
) ->  HDC
{
    unsafe {
        return BeginPaint(
            hWnd,
            lpPaint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndPaint(
    hWnd:  HWND,
    lpPaint: *const PAINTSTRUCT    
) ->  BOOL
{
    unsafe {
        return EndPaint(
            hWnd,
            lpPaint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUpdateRect(
    hWnd:  HWND,
    lpRect:  LPRECT,
    bErase:  BOOL    
) ->  BOOL
{
    unsafe {
        return GetUpdateRect(
            hWnd,
            lpRect,
            bErase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUpdateRgn(
    hWnd:  HWND,
    hRgn:  HRGN,
    bErase:  BOOL    
) ->  c_int
{
    unsafe {
        return GetUpdateRgn(
            hWnd,
            hRgn,
            bErase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowRgn(
    hWnd:  HWND,
    hRgn:  HRGN,
    bRedraw:  BOOL    
) ->  c_int
{
    unsafe {
        return SetWindowRgn(
            hWnd,
            hRgn,
            bRedraw
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowRgn(
    hWnd:  HWND,
    hRgn:  HRGN    
) ->  c_int
{
    unsafe {
        return GetWindowRgn(
            hWnd,
            hRgn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowRgnBox(
    hWnd:  HWND,
    lprc:  LPRECT    
) ->  c_int
{
    unsafe {
        return GetWindowRgnBox(
            hWnd,
            lprc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExcludeUpdateRgn(
    hDC:  HDC,
    hWnd:  HWND    
) ->  c_int
{
    unsafe {
        return ExcludeUpdateRgn(
            hDC,
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InvalidateRect(
    hWnd:  HWND,
    lpRect: *const RECT,
    bErase:  BOOL    
) ->  BOOL
{
    unsafe {
        return InvalidateRect(
            hWnd,
            lpRect,
            bErase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ValidateRect(
    hWnd:  HWND,
    lpRect: *const RECT    
) ->  BOOL
{
    unsafe {
        return ValidateRect(
            hWnd,
            lpRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InvalidateRgn(
    hWnd:  HWND,
    hRgn:  HRGN,
    bErase:  BOOL    
) ->  BOOL
{
    unsafe {
        return InvalidateRgn(
            hWnd,
            hRgn,
            bErase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ValidateRgn(
    hWnd:  HWND,
    hRgn:  HRGN    
) ->  BOOL
{
    unsafe {
        return ValidateRgn(
            hWnd,
            hRgn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RedrawWindow(
    hWnd:  HWND,
    lprcUpdate: *const RECT,
    hrgnUpdate:  HRGN,
    flags:  UINT    
) ->  BOOL
{
    unsafe {
        return RedrawWindow(
            hWnd,
            lprcUpdate,
            hrgnUpdate,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LockWindowUpdate(
    hWndLock:  HWND    
) ->  BOOL
{
    unsafe {
        return LockWindowUpdate(
            hWndLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScrollWindow(
    hWnd:  HWND,
    XAmount:  c_int,
    YAmount:  c_int,
    lpRect: *const RECT,
    lpClipRect: *const RECT    
) ->  BOOL
{
    unsafe {
        return ScrollWindow(
            hWnd,
            XAmount,
            YAmount,
            lpRect,
            lpClipRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScrollDC(
    hDC:  HDC,
    dx:  c_int,
    dy:  c_int,
    lprcScroll: *const RECT,
    lprcClip: *const RECT,
    hrgnUpdate:  HRGN,
    lprcUpdate:  LPRECT    
) ->  BOOL
{
    unsafe {
        return ScrollDC(
            hDC,
            dx,
            dy,
            lprcScroll,
            lprcClip,
            hrgnUpdate,
            lprcUpdate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScrollWindowEx(
    hWnd:  HWND,
    dx:  c_int,
    dy:  c_int,
    prcScroll: *const RECT,
    prcClip: *const RECT,
    hrgnUpdate:  HRGN,
    prcUpdate:  LPRECT,
    flags:  UINT    
) ->  c_int
{
    unsafe {
        return ScrollWindowEx(
            hWnd,
            dx,
            dy,
            prcScroll,
            prcClip,
            hrgnUpdate,
            prcUpdate,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetScrollPos(
    hWnd:  HWND,
    nBar:  c_int,
    nPos:  c_int,
    bRedraw:  BOOL    
) ->  c_int
{
    unsafe {
        return SetScrollPos(
            hWnd,
            nBar,
            nPos,
            bRedraw
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetScrollPos(
    hWnd:  HWND,
    nBar:  c_int    
) ->  c_int
{
    unsafe {
        return GetScrollPos(
            hWnd,
            nBar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetScrollRange(
    hWnd:  HWND,
    nBar:  c_int,
    nMinPos:  c_int,
    nMaxPos:  c_int,
    bRedraw:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetScrollRange(
            hWnd,
            nBar,
            nMinPos,
            nMaxPos,
            bRedraw
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetScrollRange(
    hWnd:  HWND,
    nBar:  c_int,
    lpMinPos:  LPINT,
    lpMaxPos:  LPINT    
) ->  BOOL
{
    unsafe {
        return GetScrollRange(
            hWnd,
            nBar,
            lpMinPos,
            lpMaxPos
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShowScrollBar(
    hWnd:  HWND,
    wBar:  c_int,
    bShow:  BOOL    
) ->  BOOL
{
    unsafe {
        return ShowScrollBar(
            hWnd,
            wBar,
            bShow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnableScrollBar(
    hWnd:  HWND,
    wSBflags:  UINT,
    wArrows:  UINT    
) ->  BOOL
{
    unsafe {
        return EnableScrollBar(
            hWnd,
            wSBflags,
            wArrows
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPropA(
    hWnd:  HWND,
    lpString:  LPCSTR,
    hData:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetPropA(
            hWnd,
            lpString,
            hData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPropW(
    hWnd:  HWND,
    lpString:  LPCWSTR,
    hData:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetPropW(
            hWnd,
            lpString,
            hData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPropA(
    hWnd:  HWND,
    lpString:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return GetPropA(
            hWnd,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPropW(
    hWnd:  HWND,
    lpString:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return GetPropW(
            hWnd,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemovePropA(
    hWnd:  HWND,
    lpString:  LPCSTR    
) ->  HANDLE
{
    unsafe {
        return RemovePropA(
            hWnd,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemovePropW(
    hWnd:  HWND,
    lpString:  LPCWSTR    
) ->  HANDLE
{
    unsafe {
        return RemovePropW(
            hWnd,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPropsExA(
    hWnd:  HWND,
    lpEnumFunc:  PROPENUMPROCEXA,
    lParam:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumPropsExA(
            hWnd,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPropsExW(
    hWnd:  HWND,
    lpEnumFunc:  PROPENUMPROCEXW,
    lParam:  LPARAM    
) ->  c_int
{
    unsafe {
        return EnumPropsExW(
            hWnd,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPropsA(
    hWnd:  HWND,
    lpEnumFunc:  PROPENUMPROCA    
) ->  c_int
{
    unsafe {
        return EnumPropsA(
            hWnd,
            lpEnumFunc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPropsW(
    hWnd:  HWND,
    lpEnumFunc:  PROPENUMPROCW    
) ->  c_int
{
    unsafe {
        return EnumPropsW(
            hWnd,
            lpEnumFunc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowTextA(
    hWnd:  HWND,
    lpString:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetWindowTextA(
            hWnd,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowTextW(
    hWnd:  HWND,
    lpString:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetWindowTextW(
            hWnd,
            lpString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowTextA(
    hWnd:  HWND,
    lpString:  LPSTR,
    nMaxCount:  c_int    
) ->  c_int
{
    unsafe {
        return GetWindowTextA(
            hWnd,
            lpString,
            nMaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowTextW(
    hWnd:  HWND,
    lpString:  LPWSTR,
    nMaxCount:  c_int    
) ->  c_int
{
    unsafe {
        return GetWindowTextW(
            hWnd,
            lpString,
            nMaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowTextLengthA(
    hWnd:  HWND    
) ->  c_int
{
    unsafe {
        return GetWindowTextLengthA(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowTextLengthW(
    hWnd:  HWND    
) ->  c_int
{
    unsafe {
        return GetWindowTextLengthW(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClientRect(
    hWnd:  HWND,
    lpRect:  LPRECT    
) ->  BOOL
{
    unsafe {
        return GetClientRect(
            hWnd,
            lpRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowRect(
    hWnd:  HWND,
    lpRect:  LPRECT    
) ->  BOOL
{
    unsafe {
        return GetWindowRect(
            hWnd,
            lpRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AdjustWindowRect(
    lpRect:  LPRECT,
    dwStyle:  DWORD,
    bMenu:  BOOL    
) ->  BOOL
{
    unsafe {
        return AdjustWindowRect(
            lpRect,
            dwStyle,
            bMenu
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AdjustWindowRectEx(
    lpRect:  LPRECT,
    dwStyle:  DWORD,
    bMenu:  BOOL,
    dwExStyle:  DWORD    
) ->  BOOL
{
    unsafe {
        return AdjustWindowRectEx(
            lpRect,
            dwStyle,
            bMenu,
            dwExStyle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AdjustWindowRectExForDpi(
    lpRect:  LPRECT,
    dwStyle:  DWORD,
    bMenu:  BOOL,
    dwExStyle:  DWORD,
    dpi:  UINT    
) ->  BOOL
{
    unsafe {
        return AdjustWindowRectExForDpi(
            lpRect,
            dwStyle,
            bMenu,
            dwExStyle,
            dpi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowContextHelpId(
    arg1:  HWND,
    arg2:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetWindowContextHelpId(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowContextHelpId(
    arg1:  HWND    
) ->  DWORD
{
    unsafe {
        return GetWindowContextHelpId(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetMenuContextHelpId(
    arg1:  HMENU,
    arg2:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetMenuContextHelpId(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuContextHelpId(
    arg1:  HMENU    
) ->  DWORD
{
    unsafe {
        return GetMenuContextHelpId(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MessageBoxA(
    hWnd:  HWND,
    lpText:  LPCSTR,
    lpCaption:  LPCSTR,
    uType:  UINT    
) ->  c_int
{
    unsafe {
        return MessageBoxA(
            hWnd,
            lpText,
            lpCaption,
            uType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MessageBoxW(
    hWnd:  HWND,
    lpText:  LPCWSTR,
    lpCaption:  LPCWSTR,
    uType:  UINT    
) ->  c_int
{
    unsafe {
        return MessageBoxW(
            hWnd,
            lpText,
            lpCaption,
            uType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MessageBoxExA(
    hWnd:  HWND,
    lpText:  LPCSTR,
    lpCaption:  LPCSTR,
    uType:  UINT,
    wLanguageId:  WORD    
) ->  c_int
{
    unsafe {
        return MessageBoxExA(
            hWnd,
            lpText,
            lpCaption,
            uType,
            wLanguageId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MessageBoxExW(
    hWnd:  HWND,
    lpText:  LPCWSTR,
    lpCaption:  LPCWSTR,
    uType:  UINT,
    wLanguageId:  WORD    
) ->  c_int
{
    unsafe {
        return MessageBoxExW(
            hWnd,
            lpText,
            lpCaption,
            uType,
            wLanguageId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MessageBoxIndirectA(
    lpmbp: *const MSGBOXPARAMSA    
) ->  c_int
{
    unsafe {
        return MessageBoxIndirectA(
            lpmbp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MessageBoxIndirectW(
    lpmbp: *const MSGBOXPARAMSW    
) ->  c_int
{
    unsafe {
        return MessageBoxIndirectW(
            lpmbp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MessageBeep(
    uType:  UINT    
) ->  BOOL
{
    unsafe {
        return MessageBeep(
            uType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShowCursor(
    bShow:  BOOL    
) ->  c_int
{
    unsafe {
        return ShowCursor(
            bShow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCursorPos(
    X:  c_int,
    Y:  c_int    
) ->  BOOL
{
    unsafe {
        return SetCursorPos(
            X,
            Y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPhysicalCursorPos(
    X:  c_int,
    Y:  c_int    
) ->  BOOL
{
    unsafe {
        return SetPhysicalCursorPos(
            X,
            Y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCursor(
    hCursor:  HCURSOR    
) ->  HCURSOR
{
    unsafe {
        return SetCursor(
            hCursor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCursorPos(
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return GetCursorPos(
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPhysicalCursorPos(
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return GetPhysicalCursorPos(
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClipCursor(
    lpRect:  LPRECT    
) ->  BOOL
{
    unsafe {
        return GetClipCursor(
            lpRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCursor(
    
) ->  HCURSOR
{
    unsafe {
        return GetCursor(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateCaret(
    hWnd:  HWND,
    hBitmap:  HBITMAP,
    nWidth:  c_int,
    nHeight:  c_int    
) ->  BOOL
{
    unsafe {
        return CreateCaret(
            hWnd,
            hBitmap,
            nWidth,
            nHeight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCaretBlinkTime(
    
) ->  UINT
{
    unsafe {
        return GetCaretBlinkTime(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCaretBlinkTime(
    uMSeconds:  UINT    
) ->  BOOL
{
    unsafe {
        return SetCaretBlinkTime(
            uMSeconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroyCaret(
    
) ->  BOOL
{
    unsafe {
        return DestroyCaret(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HideCaret(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return HideCaret(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShowCaret(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return ShowCaret(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCaretPos(
    X:  c_int,
    Y:  c_int    
) ->  BOOL
{
    unsafe {
        return SetCaretPos(
            X,
            Y
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCaretPos(
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return GetCaretPos(
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClientToScreen(
    hWnd:  HWND,
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return ClientToScreen(
            hWnd,
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScreenToClient(
    hWnd:  HWND,
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return ScreenToClient(
            hWnd,
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LogicalToPhysicalPoint(
    hWnd:  HWND,
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return LogicalToPhysicalPoint(
            hWnd,
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PhysicalToLogicalPoint(
    hWnd:  HWND,
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return PhysicalToLogicalPoint(
            hWnd,
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LogicalToPhysicalPointForPerMonitorDPI(
    hWnd:  HWND,
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return LogicalToPhysicalPointForPerMonitorDPI(
            hWnd,
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PhysicalToLogicalPointForPerMonitorDPI(
    hWnd:  HWND,
    lpPoint:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return PhysicalToLogicalPointForPerMonitorDPI(
            hWnd,
            lpPoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapWindowPoints(
    hWndFrom:  HWND,
    hWndTo:  HWND,
    lpPoints:  LPPOINT,
    cPoints:  UINT    
) ->  c_int
{
    unsafe {
        return MapWindowPoints(
            hWndFrom,
            hWndTo,
            lpPoints,
            cPoints
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WindowFromPoint(
    Point:  POINT    
) ->  HWND
{
    unsafe {
        return WindowFromPoint(
            Point
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WindowFromPhysicalPoint(
    Point:  POINT    
) ->  HWND
{
    unsafe {
        return WindowFromPhysicalPoint(
            Point
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChildWindowFromPoint(
    hWndParent:  HWND,
    Point:  POINT    
) ->  HWND
{
    unsafe {
        return ChildWindowFromPoint(
            hWndParent,
            Point
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClipCursor(
    lpRect: *const RECT    
) ->  BOOL
{
    unsafe {
        return ClipCursor(
            lpRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChildWindowFromPointEx(
    hwnd:  HWND,
    pt:  POINT,
    flags:  UINT    
) ->  HWND
{
    unsafe {
        return ChildWindowFromPointEx(
            hwnd,
            pt,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSysColor(
    nIndex:  c_int    
) ->  DWORD
{
    unsafe {
        return GetSysColor(
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSysColorBrush(
    nIndex:  c_int    
) ->  HBRUSH
{
    unsafe {
        return GetSysColorBrush(
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSysColors(
    cElements:  c_int,
    lpaElements: *const INT,
    lpaRgbValues: *const COLORREF    
) ->  BOOL
{
    unsafe {
        return SetSysColors(
            cElements,
            lpaElements,
            lpaRgbValues
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawFocusRect(
    hDC:  HDC,
    lprc: *const RECT    
) ->  BOOL
{
    unsafe {
        return DrawFocusRect(
            hDC,
            lprc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FillRect(
    hDC:  HDC,
    lprc: *const RECT,
    hbr:  HBRUSH    
) ->  c_int
{
    unsafe {
        return FillRect(
            hDC,
            lprc,
            hbr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FrameRect(
    hDC:  HDC,
    lprc: *const RECT,
    hbr:  HBRUSH    
) ->  c_int
{
    unsafe {
        return FrameRect(
            hDC,
            lprc,
            hbr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InvertRect(
    hDC:  HDC,
    lprc: *const RECT    
) ->  BOOL
{
    unsafe {
        return InvertRect(
            hDC,
            lprc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetRect(
    lprc:  LPRECT,
    xLeft:  c_int,
    yTop:  c_int,
    xRight:  c_int,
    yBottom:  c_int    
) ->  BOOL
{
    unsafe {
        return SetRect(
            lprc,
            xLeft,
            yTop,
            xRight,
            yBottom
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetRectEmpty(
    lprc:  LPRECT    
) ->  BOOL
{
    unsafe {
        return SetRectEmpty(
            lprc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyRect(
    lprcDst:  LPRECT,
    lprcSrc: *const RECT    
) ->  BOOL
{
    unsafe {
        return CopyRect(
            lprcDst,
            lprcSrc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InflateRect(
    lprc:  LPRECT,
    dx:  c_int,
    dy:  c_int    
) ->  BOOL
{
    unsafe {
        return InflateRect(
            lprc,
            dx,
            dy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IntersectRect(
    lprcDst:  LPRECT,
    lprcSrc1: *const RECT,
    lprcSrc2: *const RECT    
) ->  BOOL
{
    unsafe {
        return IntersectRect(
            lprcDst,
            lprcSrc1,
            lprcSrc2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnionRect(
    lprcDst:  LPRECT,
    lprcSrc1: *const RECT,
    lprcSrc2: *const RECT    
) ->  BOOL
{
    unsafe {
        return UnionRect(
            lprcDst,
            lprcSrc1,
            lprcSrc2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SubtractRect(
    lprcDst:  LPRECT,
    lprcSrc1: *const RECT,
    lprcSrc2: *const RECT    
) ->  BOOL
{
    unsafe {
        return SubtractRect(
            lprcDst,
            lprcSrc1,
            lprcSrc2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OffsetRect(
    lprc:  LPRECT,
    dx:  c_int,
    dy:  c_int    
) ->  BOOL
{
    unsafe {
        return OffsetRect(
            lprc,
            dx,
            dy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsRectEmpty(
    lprc: *const RECT    
) ->  BOOL
{
    unsafe {
        return IsRectEmpty(
            lprc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EqualRect(
    lprc1: *const RECT,
    lprc2: *const RECT    
) ->  BOOL
{
    unsafe {
        return EqualRect(
            lprc1,
            lprc2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PtInRect(
    lprc: *const RECT,
    pt:  POINT    
) ->  BOOL
{
    unsafe {
        return PtInRect(
            lprc,
            pt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowWord(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  WORD
{
    unsafe {
        return GetWindowWord(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowWord(
    hWnd:  HWND,
    nIndex:  c_int,
    wNewWord:  WORD    
) ->  WORD
{
    unsafe {
        return SetWindowWord(
            hWnd,
            nIndex,
            wNewWord
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowLongA(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  LONG
{
    unsafe {
        return GetWindowLongA(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowLongW(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  LONG
{
    unsafe {
        return GetWindowLongW(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowLongA(
    hWnd:  HWND,
    nIndex:  c_int,
    dwNewLong:  LONG    
) ->  LONG
{
    unsafe {
        return SetWindowLongA(
            hWnd,
            nIndex,
            dwNewLong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowLongW(
    hWnd:  HWND,
    nIndex:  c_int,
    dwNewLong:  LONG    
) ->  LONG
{
    unsafe {
        return SetWindowLongW(
            hWnd,
            nIndex,
            dwNewLong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowLongPtrA(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  LONG_PTR
{
    unsafe {
        return GetWindowLongPtrA(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowLongPtrW(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  LONG_PTR
{
    unsafe {
        return GetWindowLongPtrW(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowLongPtrA(
    hWnd:  HWND,
    nIndex:  c_int,
    dwNewLong:  LONG_PTR    
) ->  LONG_PTR
{
    unsafe {
        return SetWindowLongPtrA(
            hWnd,
            nIndex,
            dwNewLong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowLongPtrW(
    hWnd:  HWND,
    nIndex:  c_int,
    dwNewLong:  LONG_PTR    
) ->  LONG_PTR
{
    unsafe {
        return SetWindowLongPtrW(
            hWnd,
            nIndex,
            dwNewLong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassWord(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  WORD
{
    unsafe {
        return GetClassWord(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetClassWord(
    hWnd:  HWND,
    nIndex:  c_int,
    wNewWord:  WORD    
) ->  WORD
{
    unsafe {
        return SetClassWord(
            hWnd,
            nIndex,
            wNewWord
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassLongA(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  DWORD
{
    unsafe {
        return GetClassLongA(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassLongW(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  DWORD
{
    unsafe {
        return GetClassLongW(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetClassLongA(
    hWnd:  HWND,
    nIndex:  c_int,
    dwNewLong:  LONG    
) ->  DWORD
{
    unsafe {
        return SetClassLongA(
            hWnd,
            nIndex,
            dwNewLong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetClassLongW(
    hWnd:  HWND,
    nIndex:  c_int,
    dwNewLong:  LONG    
) ->  DWORD
{
    unsafe {
        return SetClassLongW(
            hWnd,
            nIndex,
            dwNewLong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassLongPtrA(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  ULONG_PTR
{
    unsafe {
        return GetClassLongPtrA(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassLongPtrW(
    hWnd:  HWND,
    nIndex:  c_int    
) ->  ULONG_PTR
{
    unsafe {
        return GetClassLongPtrW(
            hWnd,
            nIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetClassLongPtrA(
    hWnd:  HWND,
    nIndex:  c_int,
    dwNewLong:  LONG_PTR    
) ->  ULONG_PTR
{
    unsafe {
        return SetClassLongPtrA(
            hWnd,
            nIndex,
            dwNewLong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetClassLongPtrW(
    hWnd:  HWND,
    nIndex:  c_int,
    dwNewLong:  LONG_PTR    
) ->  ULONG_PTR
{
    unsafe {
        return SetClassLongPtrW(
            hWnd,
            nIndex,
            dwNewLong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessDefaultLayout(
    pdwDefaultLayout: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return GetProcessDefaultLayout(
            pdwDefaultLayout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessDefaultLayout(
    dwDefaultLayout:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetProcessDefaultLayout(
            dwDefaultLayout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDesktopWindow(
    
) ->  HWND
{
    unsafe {
        return GetDesktopWindow(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetParent(
    hWnd:  HWND    
) ->  HWND
{
    unsafe {
        return GetParent(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetParent(
    hWndChild:  HWND,
    hWndNewParent:  HWND    
) ->  HWND
{
    unsafe {
        return SetParent(
            hWndChild,
            hWndNewParent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumChildWindows(
    hWndParent:  HWND,
    lpEnumFunc:  WNDENUMPROC,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumChildWindows(
            hWndParent,
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindWindowA(
    lpClassName:  LPCSTR,
    lpWindowName:  LPCSTR    
) ->  HWND
{
    unsafe {
        return FindWindowA(
            lpClassName,
            lpWindowName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindWindowW(
    lpClassName:  LPCWSTR,
    lpWindowName:  LPCWSTR    
) ->  HWND
{
    unsafe {
        return FindWindowW(
            lpClassName,
            lpWindowName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindWindowExA(
    hWndParent:  HWND,
    hWndChildAfter:  HWND,
    lpszClass:  LPCSTR,
    lpszWindow:  LPCSTR    
) ->  HWND
{
    unsafe {
        return FindWindowExA(
            hWndParent,
            hWndChildAfter,
            lpszClass,
            lpszWindow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindWindowExW(
    hWndParent:  HWND,
    hWndChildAfter:  HWND,
    lpszClass:  LPCWSTR,
    lpszWindow:  LPCWSTR    
) ->  HWND
{
    unsafe {
        return FindWindowExW(
            hWndParent,
            hWndChildAfter,
            lpszClass,
            lpszWindow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetShellWindow(
    
) ->  HWND
{
    unsafe {
        return GetShellWindow(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterShellHookWindow(
    hwnd:  HWND    
) ->  BOOL
{
    unsafe {
        return RegisterShellHookWindow(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeregisterShellHookWindow(
    hwnd:  HWND    
) ->  BOOL
{
    unsafe {
        return DeregisterShellHookWindow(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumWindows(
    lpEnumFunc:  WNDENUMPROC,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumWindows(
            lpEnumFunc,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumThreadWindows(
    dwThreadId:  DWORD,
    lpfn:  WNDENUMPROC,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumThreadWindows(
            dwThreadId,
            lpfn,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassNameA(
    hWnd:  HWND,
    lpClassName:  LPSTR,
    nMaxCount:  c_int    
) ->  c_int
{
    unsafe {
        return GetClassNameA(
            hWnd,
            lpClassName,
            nMaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassNameW(
    hWnd:  HWND,
    lpClassName:  LPWSTR,
    nMaxCount:  c_int    
) ->  c_int
{
    unsafe {
        return GetClassNameW(
            hWnd,
            lpClassName,
            nMaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTopWindow(
    hWnd:  HWND    
) ->  HWND
{
    unsafe {
        return GetTopWindow(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowThreadProcessId(
    hWnd:  HWND,
    lpdwProcessId:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetWindowThreadProcessId(
            hWnd,
            lpdwProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsGUIThread(
    bConvert:  BOOL    
) ->  BOOL
{
    unsafe {
        return IsGUIThread(
            bConvert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLastActivePopup(
    hWnd:  HWND    
) ->  HWND
{
    unsafe {
        return GetLastActivePopup(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindow(
    hWnd:  HWND,
    uCmd:  UINT    
) ->  HWND
{
    unsafe {
        return GetWindow(
            hWnd,
            uCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowsHookA(
    nFilterType:  c_int,
    pfnFilterProc:  HOOKPROC    
) ->  HHOOK
{
    unsafe {
        return SetWindowsHookA(
            nFilterType,
            pfnFilterProc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowsHookW(
    nFilterType:  c_int,
    pfnFilterProc:  HOOKPROC    
) ->  HHOOK
{
    unsafe {
        return SetWindowsHookW(
            nFilterType,
            pfnFilterProc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnhookWindowsHook(
    nCode:  c_int,
    pfnFilterProc:  HOOKPROC    
) ->  BOOL
{
    unsafe {
        return UnhookWindowsHook(
            nCode,
            pfnFilterProc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowsHookExA(
    idHook:  c_int,
    lpfn:  HOOKPROC,
    hmod:  HINSTANCE,
    dwThreadId:  DWORD    
) ->  HHOOK
{
    unsafe {
        return SetWindowsHookExA(
            idHook,
            lpfn,
            hmod,
            dwThreadId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWindowsHookExW(
    idHook:  c_int,
    lpfn:  HOOKPROC,
    hmod:  HINSTANCE,
    dwThreadId:  DWORD    
) ->  HHOOK
{
    unsafe {
        return SetWindowsHookExW(
            idHook,
            lpfn,
            hmod,
            dwThreadId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnhookWindowsHookEx(
    hhk:  HHOOK    
) ->  BOOL
{
    unsafe {
        return UnhookWindowsHookEx(
            hhk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CallNextHookEx(
    hhk:  HHOOK,
    nCode:  c_int,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return CallNextHookEx(
            hhk,
            nCode,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckMenuRadioItem(
    hmenu:  HMENU,
    first:  UINT,
    last:  UINT,
    check:  UINT,
    flags:  UINT    
) ->  BOOL
{
    unsafe {
        return CheckMenuRadioItem(
            hmenu,
            first,
            last,
            check,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadBitmapA(
    hInstance:  HINSTANCE,
    lpBitmapName:  LPCSTR    
) ->  HBITMAP
{
    unsafe {
        return LoadBitmapA(
            hInstance,
            lpBitmapName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadBitmapW(
    hInstance:  HINSTANCE,
    lpBitmapName:  LPCWSTR    
) ->  HBITMAP
{
    unsafe {
        return LoadBitmapW(
            hInstance,
            lpBitmapName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadCursorA(
    hInstance:  HINSTANCE,
    lpCursorName:  LPCSTR    
) ->  HCURSOR
{
    unsafe {
        return LoadCursorA(
            hInstance,
            lpCursorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadCursorW(
    hInstance:  HINSTANCE,
    lpCursorName:  LPCWSTR    
) ->  HCURSOR
{
    unsafe {
        return LoadCursorW(
            hInstance,
            lpCursorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadCursorFromFileA(
    lpFileName:  LPCSTR    
) ->  HCURSOR
{
    unsafe {
        return LoadCursorFromFileA(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadCursorFromFileW(
    lpFileName:  LPCWSTR    
) ->  HCURSOR
{
    unsafe {
        return LoadCursorFromFileW(
            lpFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateCursor(
    hInst:  HINSTANCE,
    xHotSpot:  c_int,
    yHotSpot:  c_int,
    nWidth:  c_int,
    nHeight:  c_int,
    pvANDPlane: *const c_void,
    pvXORPlane: *const c_void    
) ->  HCURSOR
{
    unsafe {
        return CreateCursor(
            hInst,
            xHotSpot,
            yHotSpot,
            nWidth,
            nHeight,
            pvANDPlane,
            pvXORPlane
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroyCursor(
    hCursor:  HCURSOR    
) ->  BOOL
{
    unsafe {
        return DestroyCursor(
            hCursor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSystemCursor(
    hcur:  HCURSOR,
    id:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetSystemCursor(
            hcur,
            id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadIconA(
    hInstance:  HINSTANCE,
    lpIconName:  LPCSTR    
) ->  HICON
{
    unsafe {
        return LoadIconA(
            hInstance,
            lpIconName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadIconW(
    hInstance:  HINSTANCE,
    lpIconName:  LPCWSTR    
) ->  HICON
{
    unsafe {
        return LoadIconW(
            hInstance,
            lpIconName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrivateExtractIconsA(
    szFileName:  LPCSTR,
    nIconIndex:  c_int,
    cxIcon:  c_int,
    cyIcon:  c_int,
    phicon: *mut HICON,
    piconid: *mut UINT,
    nIcons:  UINT,
    flags:  UINT    
) ->  UINT
{
    unsafe {
        return PrivateExtractIconsA(
            szFileName,
            nIconIndex,
            cxIcon,
            cyIcon,
            phicon,
            piconid,
            nIcons,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrivateExtractIconsW(
    szFileName:  LPCWSTR,
    nIconIndex:  c_int,
    cxIcon:  c_int,
    cyIcon:  c_int,
    phicon: *mut HICON,
    piconid: *mut UINT,
    nIcons:  UINT,
    flags:  UINT    
) ->  UINT
{
    unsafe {
        return PrivateExtractIconsW(
            szFileName,
            nIconIndex,
            cxIcon,
            cyIcon,
            phicon,
            piconid,
            nIcons,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateIcon(
    hInstance:  HINSTANCE,
    nWidth:  c_int,
    nHeight:  c_int,
    cPlanes:  BYTE,
    cBitsPixel:  BYTE,
    lpbANDbits: *const BYTE,
    lpbXORbits: *const BYTE    
) ->  HICON
{
    unsafe {
        return CreateIcon(
            hInstance,
            nWidth,
            nHeight,
            cPlanes,
            cBitsPixel,
            lpbANDbits,
            lpbXORbits
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroyIcon(
    hIcon:  HICON    
) ->  BOOL
{
    unsafe {
        return DestroyIcon(
            hIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupIconIdFromDirectory(
    presbits:  PBYTE,
    fIcon:  BOOL    
) ->  c_int
{
    unsafe {
        return LookupIconIdFromDirectory(
            presbits,
            fIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LookupIconIdFromDirectoryEx(
    presbits:  PBYTE,
    fIcon:  BOOL,
    cxDesired:  c_int,
    cyDesired:  c_int,
    Flags:  UINT    
) ->  c_int
{
    unsafe {
        return LookupIconIdFromDirectoryEx(
            presbits,
            fIcon,
            cxDesired,
            cyDesired,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateIconFromResource(
    presbits:  PBYTE,
    dwResSize:  DWORD,
    fIcon:  BOOL,
    dwVer:  DWORD    
) ->  HICON
{
    unsafe {
        return CreateIconFromResource(
            presbits,
            dwResSize,
            fIcon,
            dwVer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateIconFromResourceEx(
    presbits:  PBYTE,
    dwResSize:  DWORD,
    fIcon:  BOOL,
    dwVer:  DWORD,
    cxDesired:  c_int,
    cyDesired:  c_int,
    Flags:  UINT    
) ->  HICON
{
    unsafe {
        return CreateIconFromResourceEx(
            presbits,
            dwResSize,
            fIcon,
            dwVer,
            cxDesired,
            cyDesired,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadImageA(
    hInst:  HINSTANCE,
    name:  LPCSTR,
    type_:  UINT,
    cx:  c_int,
    cy:  c_int,
    fuLoad:  UINT    
) ->  HANDLE
{
    unsafe {
        return LoadImageA(
            hInst,
            name,
            type_,
            cx,
            cy,
            fuLoad
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadImageW(
    hInst:  HINSTANCE,
    name:  LPCWSTR,
    type_:  UINT,
    cx:  c_int,
    cy:  c_int,
    fuLoad:  UINT    
) ->  HANDLE
{
    unsafe {
        return LoadImageW(
            hInst,
            name,
            type_,
            cx,
            cy,
            fuLoad
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyImage(
    h:  HANDLE,
    type_:  UINT,
    cx:  c_int,
    cy:  c_int,
    flags:  UINT    
) ->  HANDLE
{
    unsafe {
        return CopyImage(
            h,
            type_,
            cx,
            cy,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrawIconEx(
    hdc:  HDC,
    xLeft:  c_int,
    yTop:  c_int,
    hIcon:  HICON,
    cxWidth:  c_int,
    cyWidth:  c_int,
    istepIfAniCur:  UINT,
    hbrFlickerFreeDraw:  HBRUSH,
    diFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return DrawIconEx(
            hdc,
            xLeft,
            yTop,
            hIcon,
            cxWidth,
            cyWidth,
            istepIfAniCur,
            hbrFlickerFreeDraw,
            diFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateIconIndirect(
    piconinfo:  PICONINFO    
) ->  HICON
{
    unsafe {
        return CreateIconIndirect(
            piconinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyIcon(
    hIcon:  HICON    
) ->  HICON
{
    unsafe {
        return CopyIcon(
            hIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetIconInfo(
    hIcon:  HICON,
    piconinfo:  PICONINFO    
) ->  BOOL
{
    unsafe {
        return GetIconInfo(
            hIcon,
            piconinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetIconInfoExA(
    hicon:  HICON,
    piconinfo:  PICONINFOEXA    
) ->  BOOL
{
    unsafe {
        return GetIconInfoExA(
            hicon,
            piconinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetIconInfoExW(
    hicon:  HICON,
    piconinfo:  PICONINFOEXW    
) ->  BOOL
{
    unsafe {
        return GetIconInfoExW(
            hicon,
            piconinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsDialogMessageA(
    hDlg:  HWND,
    lpMsg:  LPMSG    
) ->  BOOL
{
    unsafe {
        return IsDialogMessageA(
            hDlg,
            lpMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsDialogMessageW(
    hDlg:  HWND,
    lpMsg:  LPMSG    
) ->  BOOL
{
    unsafe {
        return IsDialogMessageW(
            hDlg,
            lpMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MapDialogRect(
    hDlg:  HWND,
    lpRect:  LPRECT    
) ->  BOOL
{
    unsafe {
        return MapDialogRect(
            hDlg,
            lpRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DlgDirListA(
    hDlg:  HWND,
    lpPathSpec:  LPSTR,
    nIDListBox:  c_int,
    nIDStaticPath:  c_int,
    uFileType:  UINT    
) ->  c_int
{
    unsafe {
        return DlgDirListA(
            hDlg,
            lpPathSpec,
            nIDListBox,
            nIDStaticPath,
            uFileType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DlgDirListW(
    hDlg:  HWND,
    lpPathSpec:  LPWSTR,
    nIDListBox:  c_int,
    nIDStaticPath:  c_int,
    uFileType:  UINT    
) ->  c_int
{
    unsafe {
        return DlgDirListW(
            hDlg,
            lpPathSpec,
            nIDListBox,
            nIDStaticPath,
            uFileType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DlgDirSelectExA(
    hwndDlg:  HWND,
    lpString:  LPSTR,
    chCount:  c_int,
    idListBox:  c_int    
) ->  BOOL
{
    unsafe {
        return DlgDirSelectExA(
            hwndDlg,
            lpString,
            chCount,
            idListBox
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DlgDirSelectExW(
    hwndDlg:  HWND,
    lpString:  LPWSTR,
    chCount:  c_int,
    idListBox:  c_int    
) ->  BOOL
{
    unsafe {
        return DlgDirSelectExW(
            hwndDlg,
            lpString,
            chCount,
            idListBox
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DlgDirListComboBoxA(
    hDlg:  HWND,
    lpPathSpec:  LPSTR,
    nIDComboBox:  c_int,
    nIDStaticPath:  c_int,
    uFiletype:  UINT    
) ->  c_int
{
    unsafe {
        return DlgDirListComboBoxA(
            hDlg,
            lpPathSpec,
            nIDComboBox,
            nIDStaticPath,
            uFiletype
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DlgDirListComboBoxW(
    hDlg:  HWND,
    lpPathSpec:  LPWSTR,
    nIDComboBox:  c_int,
    nIDStaticPath:  c_int,
    uFiletype:  UINT    
) ->  c_int
{
    unsafe {
        return DlgDirListComboBoxW(
            hDlg,
            lpPathSpec,
            nIDComboBox,
            nIDStaticPath,
            uFiletype
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DlgDirSelectComboBoxExA(
    hwndDlg:  HWND,
    lpString:  LPSTR,
    cchOut:  c_int,
    idComboBox:  c_int    
) ->  BOOL
{
    unsafe {
        return DlgDirSelectComboBoxExA(
            hwndDlg,
            lpString,
            cchOut,
            idComboBox
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DlgDirSelectComboBoxExW(
    hwndDlg:  HWND,
    lpString:  LPWSTR,
    cchOut:  c_int,
    idComboBox:  c_int    
) ->  BOOL
{
    unsafe {
        return DlgDirSelectComboBoxExW(
            hwndDlg,
            lpString,
            cchOut,
            idComboBox
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetScrollInfo(
    hwnd:  HWND,
    nBar:  c_int,
    lpsi:  LPCSCROLLINFO,
    redraw:  BOOL    
) ->  c_int
{
    unsafe {
        return SetScrollInfo(
            hwnd,
            nBar,
            lpsi,
            redraw
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetScrollInfo(
    hwnd:  HWND,
    nBar:  c_int,
    lpsi:  LPSCROLLINFO    
) ->  BOOL
{
    unsafe {
        return GetScrollInfo(
            hwnd,
            nBar,
            lpsi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefFrameProcA(
    hWnd:  HWND,
    hWndMDIClient:  HWND,
    uMsg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefFrameProcA(
            hWnd,
            hWndMDIClient,
            uMsg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefFrameProcW(
    hWnd:  HWND,
    hWndMDIClient:  HWND,
    uMsg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefFrameProcW(
            hWnd,
            hWndMDIClient,
            uMsg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefMDIChildProcA(
    hWnd:  HWND,
    uMsg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefMDIChildProcA(
            hWnd,
            uMsg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefMDIChildProcW(
    hWnd:  HWND,
    uMsg:  UINT,
    wParam:  WPARAM,
    lParam:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefMDIChildProcW(
            hWnd,
            uMsg,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TranslateMDISysAccel(
    hWndClient:  HWND,
    lpMsg:  LPMSG    
) ->  BOOL
{
    unsafe {
        return TranslateMDISysAccel(
            hWndClient,
            lpMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ArrangeIconicWindows(
    hWnd:  HWND    
) ->  UINT
{
    unsafe {
        return ArrangeIconicWindows(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMDIWindowA(
    lpClassName:  LPCSTR,
    lpWindowName:  LPCSTR,
    dwStyle:  DWORD,
    X:  c_int,
    Y:  c_int,
    nWidth:  c_int,
    nHeight:  c_int,
    hWndParent:  HWND,
    hInstance:  HINSTANCE,
    lParam:  LPARAM    
) ->  HWND
{
    unsafe {
        return CreateMDIWindowA(
            lpClassName,
            lpWindowName,
            dwStyle,
            X,
            Y,
            nWidth,
            nHeight,
            hWndParent,
            hInstance,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateMDIWindowW(
    lpClassName:  LPCWSTR,
    lpWindowName:  LPCWSTR,
    dwStyle:  DWORD,
    X:  c_int,
    Y:  c_int,
    nWidth:  c_int,
    nHeight:  c_int,
    hWndParent:  HWND,
    hInstance:  HINSTANCE,
    lParam:  LPARAM    
) ->  HWND
{
    unsafe {
        return CreateMDIWindowW(
            lpClassName,
            lpWindowName,
            dwStyle,
            X,
            Y,
            nWidth,
            nHeight,
            hWndParent,
            hInstance,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_TileWindows(
    hwndParent:  HWND,
    wHow:  UINT,
    lpRect: *const RECT,
    cKids:  UINT,
    lpKids: *const HWND    
) ->  WORD
{
    unsafe {
        return TileWindows(
            hwndParent,
            wHow,
            lpRect,
            cKids,
            lpKids
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CascadeWindows(
    hwndParent:  HWND,
    wHow:  UINT,
    lpRect: *const RECT,
    cKids:  UINT,
    lpKids: *const HWND    
) ->  WORD
{
    unsafe {
        return CascadeWindows(
            hwndParent,
            wHow,
            lpRect,
            cKids,
            lpKids
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WinHelpA(
    hWndMain:  HWND,
    lpszHelp:  LPCSTR,
    uCommand:  UINT,
    dwData:  ULONG_PTR    
) ->  BOOL
{
    unsafe {
        return WinHelpA(
            hWndMain,
            lpszHelp,
            uCommand,
            dwData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WinHelpW(
    hWndMain:  HWND,
    lpszHelp:  LPCWSTR,
    uCommand:  UINT,
    dwData:  ULONG_PTR    
) ->  BOOL
{
    unsafe {
        return WinHelpW(
            hWndMain,
            lpszHelp,
            uCommand,
            dwData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGuiResources(
    hProcess:  HANDLE,
    uiFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetGuiResources(
            hProcess,
            uiFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeDisplaySettingsA(
    lpDevMode: *mut DEVMODEA,
    dwFlags:  DWORD    
) ->  LONG
{
    unsafe {
        return ChangeDisplaySettingsA(
            lpDevMode,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeDisplaySettingsW(
    lpDevMode: *mut DEVMODEW,
    dwFlags:  DWORD    
) ->  LONG
{
    unsafe {
        return ChangeDisplaySettingsW(
            lpDevMode,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeDisplaySettingsExA(
    lpszDeviceName:  LPCSTR,
    lpDevMode: *mut DEVMODEA,
    hwnd:  HWND,
    dwflags:  DWORD,
    lParam:  LPVOID    
) ->  LONG
{
    unsafe {
        return ChangeDisplaySettingsExA(
            lpszDeviceName,
            lpDevMode,
            hwnd,
            dwflags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeDisplaySettingsExW(
    lpszDeviceName:  LPCWSTR,
    lpDevMode: *mut DEVMODEW,
    hwnd:  HWND,
    dwflags:  DWORD,
    lParam:  LPVOID    
) ->  LONG
{
    unsafe {
        return ChangeDisplaySettingsExW(
            lpszDeviceName,
            lpDevMode,
            hwnd,
            dwflags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDisplaySettingsA(
    lpszDeviceName:  LPCSTR,
    iModeNum:  DWORD,
    lpDevMode: *mut DEVMODEA    
) ->  BOOL
{
    unsafe {
        return EnumDisplaySettingsA(
            lpszDeviceName,
            iModeNum,
            lpDevMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDisplaySettingsW(
    lpszDeviceName:  LPCWSTR,
    iModeNum:  DWORD,
    lpDevMode: *mut DEVMODEW    
) ->  BOOL
{
    unsafe {
        return EnumDisplaySettingsW(
            lpszDeviceName,
            iModeNum,
            lpDevMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDisplaySettingsExA(
    lpszDeviceName:  LPCSTR,
    iModeNum:  DWORD,
    lpDevMode: *mut DEVMODEA,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumDisplaySettingsExA(
            lpszDeviceName,
            iModeNum,
            lpDevMode,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDisplaySettingsExW(
    lpszDeviceName:  LPCWSTR,
    iModeNum:  DWORD,
    lpDevMode: *mut DEVMODEW,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumDisplaySettingsExW(
            lpszDeviceName,
            iModeNum,
            lpDevMode,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDisplayDevicesA(
    lpDevice:  LPCSTR,
    iDevNum:  DWORD,
    lpDisplayDevice:  PDISPLAY_DEVICEA,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumDisplayDevicesA(
            lpDevice,
            iDevNum,
            lpDisplayDevice,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDisplayDevicesW(
    lpDevice:  LPCWSTR,
    iDevNum:  DWORD,
    lpDisplayDevice:  PDISPLAY_DEVICEW,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumDisplayDevicesW(
            lpDevice,
            iDevNum,
            lpDisplayDevice,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDisplayConfigBufferSizes(
    flags:  UINT32,
    numPathArrayElements: *mut UINT32,
    numModeInfoArrayElements: *mut UINT32    
) ->  LONG
{
    unsafe {
        return GetDisplayConfigBufferSizes(
            flags,
            numPathArrayElements,
            numModeInfoArrayElements
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDisplayConfig(
    numPathArrayElements:  UINT32,
    pathArray: *mut DISPLAYCONFIG_PATH_INFO,
    numModeInfoArrayElements:  UINT32,
    modeInfoArray: *mut DISPLAYCONFIG_MODE_INFO,
    flags:  UINT32    
) ->  LONG
{
    unsafe {
        return SetDisplayConfig(
            numPathArrayElements,
            pathArray,
            numModeInfoArrayElements,
            modeInfoArray,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryDisplayConfig(
    flags:  UINT32,
    numPathArrayElements: *mut UINT32,
    pathArray: *mut DISPLAYCONFIG_PATH_INFO,
    numModeInfoArrayElements: *mut UINT32,
    modeInfoArray: *mut DISPLAYCONFIG_MODE_INFO,
    currentTopologyId: *mut DISPLAYCONFIG_TOPOLOGY_ID    
) ->  LONG
{
    unsafe {
        return QueryDisplayConfig(
            flags,
            numPathArrayElements,
            pathArray,
            numModeInfoArrayElements,
            modeInfoArray,
            currentTopologyId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DisplayConfigGetDeviceInfo(
    requestPacket: *mut DISPLAYCONFIG_DEVICE_INFO_HEADER    
) ->  LONG
{
    unsafe {
        return DisplayConfigGetDeviceInfo(
            requestPacket
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DisplayConfigSetDeviceInfo(
    setPacket: *mut DISPLAYCONFIG_DEVICE_INFO_HEADER    
) ->  LONG
{
    unsafe {
        return DisplayConfigSetDeviceInfo(
            setPacket
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SystemParametersInfoA(
    uiAction:  UINT,
    uiParam:  UINT,
    pvParam:  PVOID,
    fWinIni:  UINT    
) ->  BOOL
{
    unsafe {
        return SystemParametersInfoA(
            uiAction,
            uiParam,
            pvParam,
            fWinIni
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SystemParametersInfoW(
    uiAction:  UINT,
    uiParam:  UINT,
    pvParam:  PVOID,
    fWinIni:  UINT    
) ->  BOOL
{
    unsafe {
        return SystemParametersInfoW(
            uiAction,
            uiParam,
            pvParam,
            fWinIni
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SystemParametersInfoForDpi(
    uiAction:  UINT,
    uiParam:  UINT,
    pvParam:  PVOID,
    fWinIni:  UINT,
    dpi:  UINT    
) ->  BOOL
{
    unsafe {
        return SystemParametersInfoForDpi(
            uiAction,
            uiParam,
            pvParam,
            fWinIni,
            dpi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SoundSentry(
    
) ->  BOOL
{
    unsafe {
        return SoundSentry(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDebugErrorLevel(
    dwLevel:  DWORD    
)
{
    unsafe {
        return SetDebugErrorLevel(
            dwLevel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetLastErrorEx(
    dwErrCode:  DWORD,
    dwType:  DWORD    
)
{
    unsafe {
        return SetLastErrorEx(
            dwErrCode,
            dwType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InternalGetWindowText(
    hWnd:  HWND,
    pString:  LPWSTR,
    cchMaxCount:  c_int    
) ->  c_int
{
    unsafe {
        return InternalGetWindowText(
            hWnd,
            pString,
            cchMaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CancelShutdown(
    
) ->  BOOL
{
    unsafe {
        return CancelShutdown(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MonitorFromPoint(
    pt:  POINT,
    dwFlags:  DWORD    
) ->  HMONITOR
{
    unsafe {
        return MonitorFromPoint(
            pt,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MonitorFromRect(
    lprc:  LPCRECT,
    dwFlags:  DWORD    
) ->  HMONITOR
{
    unsafe {
        return MonitorFromRect(
            lprc,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MonitorFromWindow(
    hwnd:  HWND,
    dwFlags:  DWORD    
) ->  HMONITOR
{
    unsafe {
        return MonitorFromWindow(
            hwnd,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMonitorInfoA(
    hMonitor:  HMONITOR,
    lpmi:  LPMONITORINFO    
) ->  BOOL
{
    unsafe {
        return GetMonitorInfoA(
            hMonitor,
            lpmi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMonitorInfoW(
    hMonitor:  HMONITOR,
    lpmi:  LPMONITORINFO    
) ->  BOOL
{
    unsafe {
        return GetMonitorInfoW(
            hMonitor,
            lpmi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDisplayMonitors(
    hdc:  HDC,
    lprcClip:  LPCRECT,
    lpfnEnum:  MONITORENUMPROC,
    dwData:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumDisplayMonitors(
            hdc,
            lprcClip,
            lpfnEnum,
            dwData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NotifyWinEvent(
    event:  DWORD,
    hwnd:  HWND,
    idObject:  LONG,
    idChild:  LONG    
)
{
    unsafe {
        return NotifyWinEvent(
            event,
            hwnd,
            idObject,
            idChild
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetWinEventHook(
    eventMin:  DWORD,
    eventMax:  DWORD,
    hmodWinEventProc:  HMODULE,
    pfnWinEventProc:  WINEVENTPROC,
    idProcess:  DWORD,
    idThread:  DWORD,
    dwFlags:  DWORD    
) ->  HWINEVENTHOOK
{
    unsafe {
        return SetWinEventHook(
            eventMin,
            eventMax,
            hmodWinEventProc,
            pfnWinEventProc,
            idProcess,
            idThread,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsWinEventHookInstalled(
    event:  DWORD    
) ->  BOOL
{
    unsafe {
        return IsWinEventHookInstalled(
            event
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnhookWinEvent(
    hWinEventHook:  HWINEVENTHOOK    
) ->  BOOL
{
    unsafe {
        return UnhookWinEvent(
            hWinEventHook
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGUIThreadInfo(
    idThread:  DWORD,
    pgui:  PGUITHREADINFO    
) ->  BOOL
{
    unsafe {
        return GetGUIThreadInfo(
            idThread,
            pgui
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BlockInput(
    fBlockIt:  BOOL    
) ->  BOOL
{
    unsafe {
        return BlockInput(
            fBlockIt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessDPIAware(
    
) ->  BOOL
{
    unsafe {
        return SetProcessDPIAware(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsProcessDPIAware(
    
) ->  BOOL
{
    unsafe {
        return IsProcessDPIAware(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadDpiAwarenessContext(
    dpiContext:  DPI_AWARENESS_CONTEXT    
) ->  DPI_AWARENESS_CONTEXT
{
    unsafe {
        return SetThreadDpiAwarenessContext(
            dpiContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadDpiAwarenessContext(
    
) ->  DPI_AWARENESS_CONTEXT
{
    unsafe {
        return GetThreadDpiAwarenessContext(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowDpiAwarenessContext(
    hwnd:  HWND    
) ->  DPI_AWARENESS_CONTEXT
{
    unsafe {
        return GetWindowDpiAwarenessContext(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAwarenessFromDpiAwarenessContext(
    value:  DPI_AWARENESS_CONTEXT    
) ->  DPI_AWARENESS
{
    unsafe {
        return GetAwarenessFromDpiAwarenessContext(
            value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDpiFromDpiAwarenessContext(
    value:  DPI_AWARENESS_CONTEXT    
) ->  UINT
{
    unsafe {
        return GetDpiFromDpiAwarenessContext(
            value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AreDpiAwarenessContextsEqual(
    dpiContextA:  DPI_AWARENESS_CONTEXT,
    dpiContextB:  DPI_AWARENESS_CONTEXT    
) ->  BOOL
{
    unsafe {
        return AreDpiAwarenessContextsEqual(
            dpiContextA,
            dpiContextB
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidDpiAwarenessContext(
    value:  DPI_AWARENESS_CONTEXT    
) ->  BOOL
{
    unsafe {
        return IsValidDpiAwarenessContext(
            value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDpiForWindow(
    hwnd:  HWND    
) ->  UINT
{
    unsafe {
        return GetDpiForWindow(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDpiForSystem(
    
) ->  UINT
{
    unsafe {
        return GetDpiForSystem(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemDpiForProcess(
    hProcess:  HANDLE    
) ->  UINT
{
    unsafe {
        return GetSystemDpiForProcess(
            hProcess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnableNonClientDpiScaling(
    hwnd:  HWND    
) ->  BOOL
{
    unsafe {
        return EnableNonClientDpiScaling(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InheritWindowMonitor(
    hwnd:  HWND,
    hwndInherit:  HWND    
) ->  BOOL
{
    unsafe {
        return InheritWindowMonitor(
            hwnd,
            hwndInherit
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessDpiAwarenessContext(
    value:  DPI_AWARENESS_CONTEXT    
) ->  BOOL
{
    unsafe {
        return SetProcessDpiAwarenessContext(
            value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDpiAwarenessContextForProcess(
    hProcess:  HANDLE    
) ->  DPI_AWARENESS_CONTEXT
{
    unsafe {
        return GetDpiAwarenessContextForProcess(
            hProcess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadDpiHostingBehavior(
    value:  DPI_HOSTING_BEHAVIOR    
) ->  DPI_HOSTING_BEHAVIOR
{
    unsafe {
        return SetThreadDpiHostingBehavior(
            value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadDpiHostingBehavior(
    
) ->  DPI_HOSTING_BEHAVIOR
{
    unsafe {
        return GetThreadDpiHostingBehavior(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowDpiHostingBehavior(
    hwnd:  HWND    
) ->  DPI_HOSTING_BEHAVIOR
{
    unsafe {
        return GetWindowDpiHostingBehavior(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowModuleFileNameA(
    hwnd:  HWND,
    pszFileName:  LPSTR,
    cchFileNameMax:  UINT    
) ->  UINT
{
    unsafe {
        return GetWindowModuleFileNameA(
            hwnd,
            pszFileName,
            cchFileNameMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowModuleFileNameW(
    hwnd:  HWND,
    pszFileName:  LPWSTR,
    cchFileNameMax:  UINT    
) ->  UINT
{
    unsafe {
        return GetWindowModuleFileNameW(
            hwnd,
            pszFileName,
            cchFileNameMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCursorInfo(
    pci:  PCURSORINFO    
) ->  BOOL
{
    unsafe {
        return GetCursorInfo(
            pci
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetWindowInfo(
    hwnd:  HWND,
    pwi:  PWINDOWINFO    
) ->  BOOL
{
    unsafe {
        return GetWindowInfo(
            hwnd,
            pwi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTitleBarInfo(
    hwnd:  HWND,
    pti:  PTITLEBARINFO    
) ->  BOOL
{
    unsafe {
        return GetTitleBarInfo(
            hwnd,
            pti
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetMenuBarInfo(
    hwnd:  HWND,
    idObject:  LONG,
    idItem:  LONG,
    pmbi:  PMENUBARINFO    
) ->  BOOL
{
    unsafe {
        return GetMenuBarInfo(
            hwnd,
            idObject,
            idItem,
            pmbi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetScrollBarInfo(
    hwnd:  HWND,
    idObject:  LONG,
    psbi:  PSCROLLBARINFO    
) ->  BOOL
{
    unsafe {
        return GetScrollBarInfo(
            hwnd,
            idObject,
            psbi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetComboBoxInfo(
    hwndCombo:  HWND,
    pcbi:  PCOMBOBOXINFO    
) ->  BOOL
{
    unsafe {
        return GetComboBoxInfo(
            hwndCombo,
            pcbi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAncestor(
    hwnd:  HWND,
    gaFlags:  UINT    
) ->  HWND
{
    unsafe {
        return GetAncestor(
            hwnd,
            gaFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RealChildWindowFromPoint(
    hwndParent:  HWND,
    ptParentClientCoords:  POINT    
) ->  HWND
{
    unsafe {
        return RealChildWindowFromPoint(
            hwndParent,
            ptParentClientCoords
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RealGetWindowClassA(
    hwnd:  HWND,
    ptszClassName:  LPSTR,
    cchClassNameMax:  UINT    
) ->  UINT
{
    unsafe {
        return RealGetWindowClassA(
            hwnd,
            ptszClassName,
            cchClassNameMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RealGetWindowClassW(
    hwnd:  HWND,
    ptszClassName:  LPWSTR,
    cchClassNameMax:  UINT    
) ->  UINT
{
    unsafe {
        return RealGetWindowClassW(
            hwnd,
            ptszClassName,
            cchClassNameMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAltTabInfoA(
    hwnd:  HWND,
    iItem:  c_int,
    pati:  PALTTABINFO,
    pszItemText:  LPSTR,
    cchItemText:  UINT    
) ->  BOOL
{
    unsafe {
        return GetAltTabInfoA(
            hwnd,
            iItem,
            pati,
            pszItemText,
            cchItemText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAltTabInfoW(
    hwnd:  HWND,
    iItem:  c_int,
    pati:  PALTTABINFO,
    pszItemText:  LPWSTR,
    cchItemText:  UINT    
) ->  BOOL
{
    unsafe {
        return GetAltTabInfoW(
            hwnd,
            iItem,
            pati,
            pszItemText,
            cchItemText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetListBoxInfo(
    hwnd:  HWND    
) ->  DWORD
{
    unsafe {
        return GetListBoxInfo(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LockWorkStation(
    
) ->  BOOL
{
    unsafe {
        return LockWorkStation(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UserHandleGrantAccess(
    hUserHandle:  HANDLE,
    hJob:  HANDLE,
    bGrant:  BOOL    
) ->  BOOL
{
    unsafe {
        return UserHandleGrantAccess(
            hUserHandle,
            hJob,
            bGrant
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRawInputData(
    hRawInput:  HRAWINPUT,
    uiCommand:  UINT,
    pData:  LPVOID,
    pcbSize:  PUINT,
    cbSizeHeader:  UINT    
) ->  UINT
{
    unsafe {
        return GetRawInputData(
            hRawInput,
            uiCommand,
            pData,
            pcbSize,
            cbSizeHeader
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRawInputDeviceInfoA(
    hDevice:  HANDLE,
    uiCommand:  UINT,
    pData:  LPVOID,
    pcbSize:  PUINT    
) ->  UINT
{
    unsafe {
        return GetRawInputDeviceInfoA(
            hDevice,
            uiCommand,
            pData,
            pcbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRawInputDeviceInfoW(
    hDevice:  HANDLE,
    uiCommand:  UINT,
    pData:  LPVOID,
    pcbSize:  PUINT    
) ->  UINT
{
    unsafe {
        return GetRawInputDeviceInfoW(
            hDevice,
            uiCommand,
            pData,
            pcbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRawInputBuffer(
    pData:  PRAWINPUT,
    pcbSize:  PUINT,
    cbSizeHeader:  UINT    
) ->  UINT
{
    unsafe {
        return GetRawInputBuffer(
            pData,
            pcbSize,
            cbSizeHeader
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterRawInputDevices(
    pRawInputDevices:  PCRAWINPUTDEVICE,
    uiNumDevices:  UINT,
    cbSize:  UINT    
) ->  BOOL
{
    unsafe {
        return RegisterRawInputDevices(
            pRawInputDevices,
            uiNumDevices,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRegisteredRawInputDevices(
    pRawInputDevices:  PRAWINPUTDEVICE,
    puiNumDevices:  PUINT,
    cbSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetRegisteredRawInputDevices(
            pRawInputDevices,
            puiNumDevices,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRawInputDeviceList(
    pRawInputDeviceList:  PRAWINPUTDEVICELIST,
    puiNumDevices:  PUINT,
    cbSize:  UINT    
) ->  UINT
{
    unsafe {
        return GetRawInputDeviceList(
            pRawInputDeviceList,
            puiNumDevices,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefRawInputProc(
    paRawInput: *mut PRAWINPUT,
    nInput:  INT,
    cbSizeHeader:  UINT    
) ->  LRESULT
{
    unsafe {
        return DefRawInputProc(
            paRawInput,
            nInput,
            cbSizeHeader
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerDevices(
    deviceCount: *mut UINT32,
    pointerDevices: *mut POINTER_DEVICE_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerDevices(
            deviceCount,
            pointerDevices
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerDevice(
    device:  HANDLE,
    pointerDevice: *mut POINTER_DEVICE_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerDevice(
            device,
            pointerDevice
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerDeviceProperties(
    device:  HANDLE,
    propertyCount: *mut UINT32,
    pointerProperties: *mut POINTER_DEVICE_PROPERTY    
) ->  BOOL
{
    unsafe {
        return GetPointerDeviceProperties(
            device,
            propertyCount,
            pointerProperties
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterPointerDeviceNotifications(
    window:  HWND,
    notifyRange:  BOOL    
) ->  BOOL
{
    unsafe {
        return RegisterPointerDeviceNotifications(
            window,
            notifyRange
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerDeviceRects(
    device:  HANDLE,
    pointerDeviceRect: *mut RECT,
    displayRect: *mut RECT    
) ->  BOOL
{
    unsafe {
        return GetPointerDeviceRects(
            device,
            pointerDeviceRect,
            displayRect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPointerDeviceCursors(
    device:  HANDLE,
    cursorCount: *mut UINT32,
    deviceCursors: *mut POINTER_DEVICE_CURSOR_INFO    
) ->  BOOL
{
    unsafe {
        return GetPointerDeviceCursors(
            device,
            cursorCount,
            deviceCursors
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRawPointerDeviceData(
    pointerId:  UINT32,
    historyCount:  UINT32,
    propertiesCount:  UINT32,
    pProperties: *mut POINTER_DEVICE_PROPERTY,
    pValues: *mut LONG    
) ->  BOOL
{
    unsafe {
        return GetRawPointerDeviceData(
            pointerId,
            historyCount,
            propertiesCount,
            pProperties,
            pValues
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeWindowMessageFilter(
    message:  UINT,
    dwFlag:  DWORD    
) ->  BOOL
{
    unsafe {
        return ChangeWindowMessageFilter(
            message,
            dwFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeWindowMessageFilterEx(
    hwnd:  HWND,
    message:  UINT,
    action:  DWORD,
    pChangeFilterStruct:  PCHANGEFILTERSTRUCT    
) ->  BOOL
{
    unsafe {
        return ChangeWindowMessageFilterEx(
            hwnd,
            message,
            action,
            pChangeFilterStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGestureInfo(
    hGestureInfo:  HGESTUREINFO,
    pGestureInfo:  PGESTUREINFO    
) ->  BOOL
{
    unsafe {
        return GetGestureInfo(
            hGestureInfo,
            pGestureInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGestureExtraArgs(
    hGestureInfo:  HGESTUREINFO,
    cbExtraArgs:  UINT,
    pExtraArgs:  PBYTE    
) ->  BOOL
{
    unsafe {
        return GetGestureExtraArgs(
            hGestureInfo,
            cbExtraArgs,
            pExtraArgs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseGestureInfoHandle(
    hGestureInfo:  HGESTUREINFO    
) ->  BOOL
{
    unsafe {
        return CloseGestureInfoHandle(
            hGestureInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetGestureConfig(
    hwnd:  HWND,
    dwReserved:  DWORD,
    cIDs:  UINT,
    pGestureConfig:  PGESTURECONFIG,
    cbSize:  UINT    
) ->  BOOL
{
    unsafe {
        return SetGestureConfig(
            hwnd,
            dwReserved,
            cIDs,
            pGestureConfig,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGestureConfig(
    hwnd:  HWND,
    dwReserved:  DWORD,
    dwFlags:  DWORD,
    pcIDs:  PUINT,
    pGestureConfig:  PGESTURECONFIG,
    cbSize:  UINT    
) ->  BOOL
{
    unsafe {
        return GetGestureConfig(
            hwnd,
            dwReserved,
            dwFlags,
            pcIDs,
            pGestureConfig,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShutdownBlockReasonCreate(
    hWnd:  HWND,
    pwszReason:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return ShutdownBlockReasonCreate(
            hWnd,
            pwszReason
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShutdownBlockReasonQuery(
    hWnd:  HWND,
    pwszBuff:  LPWSTR,
    pcchBuff: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return ShutdownBlockReasonQuery(
            hWnd,
            pwszBuff,
            pcchBuff
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShutdownBlockReasonDestroy(
    hWnd:  HWND    
) ->  BOOL
{
    unsafe {
        return ShutdownBlockReasonDestroy(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentInputMessageSource(
    inputMessageSource: *mut INPUT_MESSAGE_SOURCE    
) ->  BOOL
{
    unsafe {
        return GetCurrentInputMessageSource(
            inputMessageSource
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCIMSSM(
    inputMessageSource: *mut INPUT_MESSAGE_SOURCE    
) ->  BOOL
{
    unsafe {
        return GetCIMSSM(
            inputMessageSource
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAutoRotationState(
    pState:  PAR_STATE    
) ->  BOOL
{
    unsafe {
        return GetAutoRotationState(
            pState
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDisplayAutoRotationPreferences(
    pOrientation: *mut ORIENTATION_PREFERENCE    
) ->  BOOL
{
    unsafe {
        return GetDisplayAutoRotationPreferences(
            pOrientation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDisplayAutoRotationPreferencesByProcessId(
    dwProcessId:  DWORD,
    pOrientation: *mut ORIENTATION_PREFERENCE,
    fRotateScreen: *mut BOOL    
) ->  BOOL
{
    unsafe {
        return GetDisplayAutoRotationPreferencesByProcessId(
            dwProcessId,
            pOrientation,
            fRotateScreen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDisplayAutoRotationPreferences(
    orientation:  ORIENTATION_PREFERENCE    
) ->  BOOL
{
    unsafe {
        return SetDisplayAutoRotationPreferences(
            orientation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsImmersiveProcess(
    hProcess:  HANDLE    
) ->  BOOL
{
    unsafe {
        return IsImmersiveProcess(
            hProcess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessRestrictionExemption(
    fEnableExemption:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetProcessRestrictionExemption(
            fEnableExemption
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDateFormatA(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpDate: *const SYSTEMTIME,
    lpFormat:  LPCSTR,
    lpDateStr:  LPSTR,
    cchDate:  c_int    
) ->  c_int
{
    unsafe {
        return GetDateFormatA(
            Locale,
            dwFlags,
            lpDate,
            lpFormat,
            lpDateStr,
            cchDate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDateFormatW(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpDate: *const SYSTEMTIME,
    lpFormat:  LPCWSTR,
    lpDateStr:  LPWSTR,
    cchDate:  c_int    
) ->  c_int
{
    unsafe {
        return GetDateFormatW(
            Locale,
            dwFlags,
            lpDate,
            lpFormat,
            lpDateStr,
            cchDate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTimeFormatA(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpTime: *const SYSTEMTIME,
    lpFormat:  LPCSTR,
    lpTimeStr:  LPSTR,
    cchTime:  c_int    
) ->  c_int
{
    unsafe {
        return GetTimeFormatA(
            Locale,
            dwFlags,
            lpTime,
            lpFormat,
            lpTimeStr,
            cchTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTimeFormatW(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpTime: *const SYSTEMTIME,
    lpFormat:  LPCWSTR,
    lpTimeStr:  LPWSTR,
    cchTime:  c_int    
) ->  c_int
{
    unsafe {
        return GetTimeFormatW(
            Locale,
            dwFlags,
            lpTime,
            lpFormat,
            lpTimeStr,
            cchTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetTimeFormatEx(
    lpLocaleName:  LPCWSTR,
    dwFlags:  DWORD,
    lpTime: *const SYSTEMTIME,
    lpFormat:  LPCWSTR,
    lpTimeStr:  LPWSTR,
    cchTime:  c_int    
) ->  c_int
{
    unsafe {
        return GetTimeFormatEx(
            lpLocaleName,
            dwFlags,
            lpTime,
            lpFormat,
            lpTimeStr,
            cchTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDateFormatEx(
    lpLocaleName:  LPCWSTR,
    dwFlags:  DWORD,
    lpDate: *const SYSTEMTIME,
    lpFormat:  LPCWSTR,
    lpDateStr:  LPWSTR,
    cchDate:  c_int,
    lpCalendar:  LPCWSTR    
) ->  c_int
{
    unsafe {
        return GetDateFormatEx(
            lpLocaleName,
            dwFlags,
            lpDate,
            lpFormat,
            lpDateStr,
            cchDate,
            lpCalendar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDurationFormatEx(
    lpLocaleName:  LPCWSTR,
    dwFlags:  DWORD,
    lpDuration: *const SYSTEMTIME,
    ullDuration:  ULONGLONG,
    lpFormat:  LPCWSTR,
    lpDurationStr:  LPWSTR,
    cchDuration:  c_int    
) ->  c_int
{
    unsafe {
        return GetDurationFormatEx(
            lpLocaleName,
            dwFlags,
            lpDuration,
            ullDuration,
            lpFormat,
            lpDurationStr,
            cchDuration
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CompareStringEx(
    lpLocaleName:  LPCWSTR,
    dwCmpFlags:  DWORD,
    lpString1:  LPCWCH,
    cchCount1:  c_int,
    lpString2:  LPCWCH,
    cchCount2:  c_int,
    lpVersionInformation:  LPNLSVERSIONINFO,
    lpReserved:  LPVOID,
    lParam:  LPARAM    
) ->  c_int
{
    unsafe {
        return CompareStringEx(
            lpLocaleName,
            dwCmpFlags,
            lpString1,
            cchCount1,
            lpString2,
            cchCount2,
            lpVersionInformation,
            lpReserved,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CompareStringOrdinal(
    lpString1:  LPCWCH,
    cchCount1:  c_int,
    lpString2:  LPCWCH,
    cchCount2:  c_int,
    bIgnoreCase:  BOOL    
) ->  c_int
{
    unsafe {
        return CompareStringOrdinal(
            lpString1,
            cchCount1,
            lpString2,
            cchCount2,
            bIgnoreCase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CompareStringW(
    Locale:  LCID,
    dwCmpFlags:  DWORD,
    lpString1:  PCNZWCH,
    cchCount1:  c_int,
    lpString2:  PCNZWCH,
    cchCount2:  c_int    
) ->  c_int
{
    unsafe {
        return CompareStringW(
            Locale,
            dwCmpFlags,
            lpString1,
            cchCount1,
            lpString2,
            cchCount2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FoldStringW(
    dwMapFlags:  DWORD,
    lpSrcStr:  LPCWCH,
    cchSrc:  c_int,
    lpDestStr:  LPWSTR,
    cchDest:  c_int    
) ->  c_int
{
    unsafe {
        return FoldStringW(
            dwMapFlags,
            lpSrcStr,
            cchSrc,
            lpDestStr,
            cchDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStringTypeExW(
    Locale:  LCID,
    dwInfoType:  DWORD,
    lpSrcStr:  LPCWCH,
    cchSrc:  c_int,
    lpCharType:  LPWORD    
) ->  BOOL
{
    unsafe {
        return GetStringTypeExW(
            Locale,
            dwInfoType,
            lpSrcStr,
            cchSrc,
            lpCharType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStringTypeW(
    dwInfoType:  DWORD,
    lpSrcStr:  LPCWCH,
    cchSrc:  c_int,
    lpCharType:  LPWORD    
) ->  BOOL
{
    unsafe {
        return GetStringTypeW(
            dwInfoType,
            lpSrcStr,
            cchSrc,
            lpCharType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MultiByteToWideChar(
    CodePage:  UINT,
    dwFlags:  DWORD,
    lpMultiByteStr:  LPCCH,
    cbMultiByte:  c_int,
    lpWideCharStr:  LPWSTR,
    cchWideChar:  c_int    
) ->  c_int
{
    unsafe {
        return MultiByteToWideChar(
            CodePage,
            dwFlags,
            lpMultiByteStr,
            cbMultiByte,
            lpWideCharStr,
            cchWideChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WideCharToMultiByte(
    CodePage:  UINT,
    dwFlags:  DWORD,
    lpWideCharStr:  LPCWCH,
    cchWideChar:  c_int,
    lpMultiByteStr:  LPSTR,
    cbMultiByte:  c_int,
    lpDefaultChar:  LPCCH,
    lpUsedDefaultChar:  LPBOOL    
) ->  c_int
{
    unsafe {
        return WideCharToMultiByte(
            CodePage,
            dwFlags,
            lpWideCharStr,
            cchWideChar,
            lpMultiByteStr,
            cbMultiByte,
            lpDefaultChar,
            lpUsedDefaultChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidCodePage(
    CodePage:  UINT    
) ->  BOOL
{
    unsafe {
        return IsValidCodePage(
            CodePage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetACP(
    
) ->  UINT
{
    unsafe {
        return GetACP(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOEMCP(
    
) ->  UINT
{
    unsafe {
        return GetOEMCP(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCPInfo(
    CodePage:  UINT,
    lpCPInfo:  LPCPINFO    
) ->  BOOL
{
    unsafe {
        return GetCPInfo(
            CodePage,
            lpCPInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCPInfoExA(
    CodePage:  UINT,
    dwFlags:  DWORD,
    lpCPInfoEx:  LPCPINFOEXA    
) ->  BOOL
{
    unsafe {
        return GetCPInfoExA(
            CodePage,
            dwFlags,
            lpCPInfoEx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCPInfoExW(
    CodePage:  UINT,
    dwFlags:  DWORD,
    lpCPInfoEx:  LPCPINFOEXW    
) ->  BOOL
{
    unsafe {
        return GetCPInfoExW(
            CodePage,
            dwFlags,
            lpCPInfoEx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CompareStringA(
    Locale:  LCID,
    dwCmpFlags:  DWORD,
    lpString1:  PCNZCH,
    cchCount1:  c_int,
    lpString2:  PCNZCH,
    cchCount2:  c_int    
) ->  c_int
{
    unsafe {
        return CompareStringA(
            Locale,
            dwCmpFlags,
            lpString1,
            cchCount1,
            lpString2,
            cchCount2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNLSString(
    Locale:  LCID,
    dwFindNLSStringFlags:  DWORD,
    lpStringSource:  LPCWSTR,
    cchSource:  c_int,
    lpStringValue:  LPCWSTR,
    cchValue:  c_int,
    pcchFound:  LPINT    
) ->  c_int
{
    unsafe {
        return FindNLSString(
            Locale,
            dwFindNLSStringFlags,
            lpStringSource,
            cchSource,
            lpStringValue,
            cchValue,
            pcchFound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LCMapStringW(
    Locale:  LCID,
    dwMapFlags:  DWORD,
    lpSrcStr:  LPCWSTR,
    cchSrc:  c_int,
    lpDestStr:  LPWSTR,
    cchDest:  c_int    
) ->  c_int
{
    unsafe {
        return LCMapStringW(
            Locale,
            dwMapFlags,
            lpSrcStr,
            cchSrc,
            lpDestStr,
            cchDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LCMapStringA(
    Locale:  LCID,
    dwMapFlags:  DWORD,
    lpSrcStr:  LPCSTR,
    cchSrc:  c_int,
    lpDestStr:  LPSTR,
    cchDest:  c_int    
) ->  c_int
{
    unsafe {
        return LCMapStringA(
            Locale,
            dwMapFlags,
            lpSrcStr,
            cchSrc,
            lpDestStr,
            cchDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLocaleInfoW(
    Locale:  LCID,
    LCType:  LCTYPE,
    lpLCData:  LPWSTR,
    cchData:  c_int    
) ->  c_int
{
    unsafe {
        return GetLocaleInfoW(
            Locale,
            LCType,
            lpLCData,
            cchData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLocaleInfoA(
    Locale:  LCID,
    LCType:  LCTYPE,
    lpLCData:  LPSTR,
    cchData:  c_int    
) ->  c_int
{
    unsafe {
        return GetLocaleInfoA(
            Locale,
            LCType,
            lpLCData,
            cchData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetLocaleInfoA(
    Locale:  LCID,
    LCType:  LCTYPE,
    lpLCData:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetLocaleInfoA(
            Locale,
            LCType,
            lpLCData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetLocaleInfoW(
    Locale:  LCID,
    LCType:  LCTYPE,
    lpLCData:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetLocaleInfoW(
            Locale,
            LCType,
            lpLCData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCalendarInfoA(
    Locale:  LCID,
    Calendar:  CALID,
    CalType:  CALTYPE,
    lpCalData:  LPSTR,
    cchData:  c_int,
    lpValue:  LPDWORD    
) ->  c_int
{
    unsafe {
        return GetCalendarInfoA(
            Locale,
            Calendar,
            CalType,
            lpCalData,
            cchData,
            lpValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCalendarInfoW(
    Locale:  LCID,
    Calendar:  CALID,
    CalType:  CALTYPE,
    lpCalData:  LPWSTR,
    cchData:  c_int,
    lpValue:  LPDWORD    
) ->  c_int
{
    unsafe {
        return GetCalendarInfoW(
            Locale,
            Calendar,
            CalType,
            lpCalData,
            cchData,
            lpValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCalendarInfoA(
    Locale:  LCID,
    Calendar:  CALID,
    CalType:  CALTYPE,
    lpCalData:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetCalendarInfoA(
            Locale,
            Calendar,
            CalType,
            lpCalData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCalendarInfoW(
    Locale:  LCID,
    Calendar:  CALID,
    CalType:  CALTYPE,
    lpCalData:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetCalendarInfoW(
            Locale,
            Calendar,
            CalType,
            lpCalData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadStringByReference(
    Flags:  DWORD,
    Language:  PCWSTR,
    SourceString:  PCWSTR,
    Buffer:  PWSTR,
    cchBuffer:  ULONG,
    Directory:  PCWSTR,
    pcchBufferOut:  PULONG    
) ->  BOOL
{
    unsafe {
        return LoadStringByReference(
            Flags,
            Language,
            SourceString,
            Buffer,
            cchBuffer,
            Directory,
            pcchBufferOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsDBCSLeadByte(
    TestChar:  BYTE    
) ->  BOOL
{
    unsafe {
        return IsDBCSLeadByte(
            TestChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsDBCSLeadByteEx(
    CodePage:  UINT,
    TestChar:  BYTE    
) ->  BOOL
{
    unsafe {
        return IsDBCSLeadByteEx(
            CodePage,
            TestChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LocaleNameToLCID(
    lpName:  LPCWSTR,
    dwFlags:  DWORD    
) ->  LCID
{
    unsafe {
        return LocaleNameToLCID(
            lpName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LCIDToLocaleName(
    Locale:  LCID,
    lpName:  LPWSTR,
    cchName:  c_int,
    dwFlags:  DWORD    
) ->  c_int
{
    unsafe {
        return LCIDToLocaleName(
            Locale,
            lpName,
            cchName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDurationFormat(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpDuration: *const SYSTEMTIME,
    ullDuration:  ULONGLONG,
    lpFormat:  LPCWSTR,
    lpDurationStr:  LPWSTR,
    cchDuration:  c_int    
) ->  c_int
{
    unsafe {
        return GetDurationFormat(
            Locale,
            dwFlags,
            lpDuration,
            ullDuration,
            lpFormat,
            lpDurationStr,
            cchDuration
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumberFormatA(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpValue:  LPCSTR,
    lpFormat: *const NUMBERFMTA,
    lpNumberStr:  LPSTR,
    cchNumber:  c_int    
) ->  c_int
{
    unsafe {
        return GetNumberFormatA(
            Locale,
            dwFlags,
            lpValue,
            lpFormat,
            lpNumberStr,
            cchNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumberFormatW(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpValue:  LPCWSTR,
    lpFormat: *const NUMBERFMTW,
    lpNumberStr:  LPWSTR,
    cchNumber:  c_int    
) ->  c_int
{
    unsafe {
        return GetNumberFormatW(
            Locale,
            dwFlags,
            lpValue,
            lpFormat,
            lpNumberStr,
            cchNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrencyFormatA(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpValue:  LPCSTR,
    lpFormat: *const CURRENCYFMTA,
    lpCurrencyStr:  LPSTR,
    cchCurrency:  c_int    
) ->  c_int
{
    unsafe {
        return GetCurrencyFormatA(
            Locale,
            dwFlags,
            lpValue,
            lpFormat,
            lpCurrencyStr,
            cchCurrency
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrencyFormatW(
    Locale:  LCID,
    dwFlags:  DWORD,
    lpValue:  LPCWSTR,
    lpFormat: *const CURRENCYFMTW,
    lpCurrencyStr:  LPWSTR,
    cchCurrency:  c_int    
) ->  c_int
{
    unsafe {
        return GetCurrencyFormatW(
            Locale,
            dwFlags,
            lpValue,
            lpFormat,
            lpCurrencyStr,
            cchCurrency
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumCalendarInfoA(
    lpCalInfoEnumProc:  CALINFO_ENUMPROCA,
    Locale:  LCID,
    Calendar:  CALID,
    CalType:  CALTYPE    
) ->  BOOL
{
    unsafe {
        return EnumCalendarInfoA(
            lpCalInfoEnumProc,
            Locale,
            Calendar,
            CalType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumCalendarInfoW(
    lpCalInfoEnumProc:  CALINFO_ENUMPROCW,
    Locale:  LCID,
    Calendar:  CALID,
    CalType:  CALTYPE    
) ->  BOOL
{
    unsafe {
        return EnumCalendarInfoW(
            lpCalInfoEnumProc,
            Locale,
            Calendar,
            CalType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumCalendarInfoExA(
    lpCalInfoEnumProcEx:  CALINFO_ENUMPROCEXA,
    Locale:  LCID,
    Calendar:  CALID,
    CalType:  CALTYPE    
) ->  BOOL
{
    unsafe {
        return EnumCalendarInfoExA(
            lpCalInfoEnumProcEx,
            Locale,
            Calendar,
            CalType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumCalendarInfoExW(
    lpCalInfoEnumProcEx:  CALINFO_ENUMPROCEXW,
    Locale:  LCID,
    Calendar:  CALID,
    CalType:  CALTYPE    
) ->  BOOL
{
    unsafe {
        return EnumCalendarInfoExW(
            lpCalInfoEnumProcEx,
            Locale,
            Calendar,
            CalType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumTimeFormatsA(
    lpTimeFmtEnumProc:  TIMEFMT_ENUMPROCA,
    Locale:  LCID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumTimeFormatsA(
            lpTimeFmtEnumProc,
            Locale,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumTimeFormatsW(
    lpTimeFmtEnumProc:  TIMEFMT_ENUMPROCW,
    Locale:  LCID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumTimeFormatsW(
            lpTimeFmtEnumProc,
            Locale,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDateFormatsA(
    lpDateFmtEnumProc:  DATEFMT_ENUMPROCA,
    Locale:  LCID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumDateFormatsA(
            lpDateFmtEnumProc,
            Locale,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDateFormatsW(
    lpDateFmtEnumProc:  DATEFMT_ENUMPROCW,
    Locale:  LCID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumDateFormatsW(
            lpDateFmtEnumProc,
            Locale,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDateFormatsExA(
    lpDateFmtEnumProcEx:  DATEFMT_ENUMPROCEXA,
    Locale:  LCID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumDateFormatsExA(
            lpDateFmtEnumProcEx,
            Locale,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDateFormatsExW(
    lpDateFmtEnumProcEx:  DATEFMT_ENUMPROCEXW,
    Locale:  LCID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumDateFormatsExW(
            lpDateFmtEnumProcEx,
            Locale,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidLanguageGroup(
    LanguageGroup:  LGRPID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return IsValidLanguageGroup(
            LanguageGroup,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNLSVersion(
    Function:  NLS_FUNCTION,
    Locale:  LCID,
    lpVersionInformation:  LPNLSVERSIONINFO    
) ->  BOOL
{
    unsafe {
        return GetNLSVersion(
            Function,
            Locale,
            lpVersionInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidLocale(
    Locale:  LCID,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return IsValidLocale(
            Locale,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGeoInfoA(
    Location:  GEOID,
    GeoType:  GEOTYPE,
    lpGeoData:  LPSTR,
    cchData:  c_int,
    LangId:  LANGID    
) ->  c_int
{
    unsafe {
        return GetGeoInfoA(
            Location,
            GeoType,
            lpGeoData,
            cchData,
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGeoInfoW(
    Location:  GEOID,
    GeoType:  GEOTYPE,
    lpGeoData:  LPWSTR,
    cchData:  c_int,
    LangId:  LANGID    
) ->  c_int
{
    unsafe {
        return GetGeoInfoW(
            Location,
            GeoType,
            lpGeoData,
            cchData,
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetGeoInfoEx(
    location:  PWSTR,
    geoType:  GEOTYPE,
    geoData:  PWSTR,
    geoDataCount:  c_int    
) ->  c_int
{
    unsafe {
        return GetGeoInfoEx(
            location,
            geoType,
            geoData,
            geoDataCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemGeoID(
    GeoClass:  GEOCLASS,
    ParentGeoId:  GEOID,
    lpGeoEnumProc:  GEO_ENUMPROC    
) ->  BOOL
{
    unsafe {
        return EnumSystemGeoID(
            GeoClass,
            ParentGeoId,
            lpGeoEnumProc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemGeoNames(
    geoClass:  GEOCLASS,
    geoEnumProc:  GEO_ENUMNAMEPROC,
    data:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumSystemGeoNames(
            geoClass,
            geoEnumProc,
            data
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserGeoID(
    GeoClass:  GEOCLASS    
) ->  GEOID
{
    unsafe {
        return GetUserGeoID(
            GeoClass
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserDefaultGeoName(
    geoName:  LPWSTR,
    geoNameCount:  c_int    
) ->  c_int
{
    unsafe {
        return GetUserDefaultGeoName(
            geoName,
            geoNameCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUserGeoID(
    GeoId:  GEOID    
) ->  BOOL
{
    unsafe {
        return SetUserGeoID(
            GeoId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUserGeoName(
    geoName:  PWSTR    
) ->  BOOL
{
    unsafe {
        return SetUserGeoName(
            geoName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConvertDefaultLocale(
    Locale:  LCID    
) ->  LCID
{
    unsafe {
        return ConvertDefaultLocale(
            Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemDefaultUILanguage(
    
) ->  LANGID
{
    unsafe {
        return GetSystemDefaultUILanguage(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadLocale(
    
) ->  LCID
{
    unsafe {
        return GetThreadLocale(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadLocale(
    Locale:  LCID    
) ->  BOOL
{
    unsafe {
        return SetThreadLocale(
            Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserDefaultUILanguage(
    
) ->  LANGID
{
    unsafe {
        return GetUserDefaultUILanguage(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserDefaultLangID(
    
) ->  LANGID
{
    unsafe {
        return GetUserDefaultLangID(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemDefaultLangID(
    
) ->  LANGID
{
    unsafe {
        return GetSystemDefaultLangID(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemDefaultLCID(
    
) ->  LCID
{
    unsafe {
        return GetSystemDefaultLCID(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserDefaultLCID(
    
) ->  LCID
{
    unsafe {
        return GetUserDefaultLCID(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadUILanguage(
    LangId:  LANGID    
) ->  LANGID
{
    unsafe {
        return SetThreadUILanguage(
            LangId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadUILanguage(
    
) ->  LANGID
{
    unsafe {
        return GetThreadUILanguage(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetProcessPreferredUILanguages(
    dwFlags:  DWORD,
    pulNumLanguages:  PULONG,
    pwszLanguagesBuffer:  PZZWSTR,
    pcchLanguagesBuffer:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetProcessPreferredUILanguages(
            dwFlags,
            pulNumLanguages,
            pwszLanguagesBuffer,
            pcchLanguagesBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetProcessPreferredUILanguages(
    dwFlags:  DWORD,
    pwszLanguagesBuffer:  PCZZWSTR,
    pulNumLanguages:  PULONG    
) ->  BOOL
{
    unsafe {
        return SetProcessPreferredUILanguages(
            dwFlags,
            pwszLanguagesBuffer,
            pulNumLanguages
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserPreferredUILanguages(
    dwFlags:  DWORD,
    pulNumLanguages:  PULONG,
    pwszLanguagesBuffer:  PZZWSTR,
    pcchLanguagesBuffer:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetUserPreferredUILanguages(
            dwFlags,
            pulNumLanguages,
            pwszLanguagesBuffer,
            pcchLanguagesBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemPreferredUILanguages(
    dwFlags:  DWORD,
    pulNumLanguages:  PULONG,
    pwszLanguagesBuffer:  PZZWSTR,
    pcchLanguagesBuffer:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetSystemPreferredUILanguages(
            dwFlags,
            pulNumLanguages,
            pwszLanguagesBuffer,
            pcchLanguagesBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetThreadPreferredUILanguages(
    dwFlags:  DWORD,
    pulNumLanguages:  PULONG,
    pwszLanguagesBuffer:  PZZWSTR,
    pcchLanguagesBuffer:  PULONG    
) ->  BOOL
{
    unsafe {
        return GetThreadPreferredUILanguages(
            dwFlags,
            pulNumLanguages,
            pwszLanguagesBuffer,
            pcchLanguagesBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadPreferredUILanguages(
    dwFlags:  DWORD,
    pwszLanguagesBuffer:  PCZZWSTR,
    pulNumLanguages:  PULONG    
) ->  BOOL
{
    unsafe {
        return SetThreadPreferredUILanguages(
            dwFlags,
            pwszLanguagesBuffer,
            pulNumLanguages
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileMUIInfo(
    dwFlags:  DWORD,
    pcwszFilePath:  PCWSTR,
    pFileMUIInfo:  PFILEMUIINFO,
    pcbFileMUIInfo: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return GetFileMUIInfo(
            dwFlags,
            pcwszFilePath,
            pFileMUIInfo,
            pcbFileMUIInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileMUIPath(
    dwFlags:  DWORD,
    pcwszFilePath:  PCWSTR,
    pwszLanguage:  PWSTR,
    pcchLanguage:  PULONG,
    pwszFileMUIPath:  PWSTR,
    pcchFileMUIPath:  PULONG,
    pululEnumerator:  PULONGLONG    
) ->  BOOL
{
    unsafe {
        return GetFileMUIPath(
            dwFlags,
            pcwszFilePath,
            pwszLanguage,
            pcchLanguage,
            pwszFileMUIPath,
            pcchFileMUIPath,
            pululEnumerator
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUILanguageInfo(
    dwFlags:  DWORD,
    pwmszLanguage:  PCZZWSTR,
    pwszFallbackLanguages:  PZZWSTR,
    pcchFallbackLanguages:  PDWORD,
    pAttributes:  PDWORD    
) ->  BOOL
{
    unsafe {
        return GetUILanguageInfo(
            dwFlags,
            pwmszLanguage,
            pwszFallbackLanguages,
            pcchFallbackLanguages,
            pAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetThreadPreferredUILanguages2(
    flags:  ULONG,
    languages:  PCZZWSTR,
    numLanguagesSet:  PULONG,
    snapshot: *mut HSAVEDUILANGUAGES    
) ->  BOOL
{
    unsafe {
        return SetThreadPreferredUILanguages2(
            flags,
            languages,
            numLanguagesSet,
            snapshot
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RestoreThreadPreferredUILanguages(
    snapshot:  HSAVEDUILANGUAGES    
)
{
    unsafe {
        return RestoreThreadPreferredUILanguages(
            snapshot
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NotifyUILanguageChange(
    dwFlags:  DWORD,
    pcwstrNewLanguage:  PCWSTR,
    pcwstrPreviousLanguage:  PCWSTR,
    dwReserved:  DWORD,
    pdwStatusRtrn:  PDWORD    
) ->  BOOL
{
    unsafe {
        return NotifyUILanguageChange(
            dwFlags,
            pcwstrNewLanguage,
            pcwstrPreviousLanguage,
            dwReserved,
            pdwStatusRtrn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStringTypeExA(
    Locale:  LCID,
    dwInfoType:  DWORD,
    lpSrcStr:  LPCSTR,
    cchSrc:  c_int,
    lpCharType:  LPWORD    
) ->  BOOL
{
    unsafe {
        return GetStringTypeExA(
            Locale,
            dwInfoType,
            lpSrcStr,
            cchSrc,
            lpCharType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStringTypeA(
    Locale:  LCID,
    dwInfoType:  DWORD,
    lpSrcStr:  LPCSTR,
    cchSrc:  c_int,
    lpCharType:  LPWORD    
) ->  BOOL
{
    unsafe {
        return GetStringTypeA(
            Locale,
            dwInfoType,
            lpSrcStr,
            cchSrc,
            lpCharType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FoldStringA(
    dwMapFlags:  DWORD,
    lpSrcStr:  LPCSTR,
    cchSrc:  c_int,
    lpDestStr:  LPSTR,
    cchDest:  c_int    
) ->  c_int
{
    unsafe {
        return FoldStringA(
            dwMapFlags,
            lpSrcStr,
            cchSrc,
            lpDestStr,
            cchDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemLocalesA(
    lpLocaleEnumProc:  LOCALE_ENUMPROCA,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumSystemLocalesA(
            lpLocaleEnumProc,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemLocalesW(
    lpLocaleEnumProc:  LOCALE_ENUMPROCW,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumSystemLocalesW(
            lpLocaleEnumProc,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemLanguageGroupsA(
    lpLanguageGroupEnumProc:  LANGUAGEGROUP_ENUMPROCA,
    dwFlags:  DWORD,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumSystemLanguageGroupsA(
            lpLanguageGroupEnumProc,
            dwFlags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemLanguageGroupsW(
    lpLanguageGroupEnumProc:  LANGUAGEGROUP_ENUMPROCW,
    dwFlags:  DWORD,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumSystemLanguageGroupsW(
            lpLanguageGroupEnumProc,
            dwFlags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumLanguageGroupLocalesA(
    lpLangGroupLocaleEnumProc:  LANGGROUPLOCALE_ENUMPROCA,
    LanguageGroup:  LGRPID,
    dwFlags:  DWORD,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumLanguageGroupLocalesA(
            lpLangGroupLocaleEnumProc,
            LanguageGroup,
            dwFlags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumLanguageGroupLocalesW(
    lpLangGroupLocaleEnumProc:  LANGGROUPLOCALE_ENUMPROCW,
    LanguageGroup:  LGRPID,
    dwFlags:  DWORD,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumLanguageGroupLocalesW(
            lpLangGroupLocaleEnumProc,
            LanguageGroup,
            dwFlags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumUILanguagesA(
    lpUILanguageEnumProc:  UILANGUAGE_ENUMPROCA,
    dwFlags:  DWORD,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumUILanguagesA(
            lpUILanguageEnumProc,
            dwFlags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumUILanguagesW(
    lpUILanguageEnumProc:  UILANGUAGE_ENUMPROCW,
    dwFlags:  DWORD,
    lParam:  LONG_PTR    
) ->  BOOL
{
    unsafe {
        return EnumUILanguagesW(
            lpUILanguageEnumProc,
            dwFlags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemCodePagesA(
    lpCodePageEnumProc:  CODEPAGE_ENUMPROCA,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumSystemCodePagesA(
            lpCodePageEnumProc,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemCodePagesW(
    lpCodePageEnumProc:  CODEPAGE_ENUMPROCW,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return EnumSystemCodePagesW(
            lpCodePageEnumProc,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IdnToAscii(
    dwFlags:  DWORD,
    lpUnicodeCharStr:  LPCWSTR,
    cchUnicodeChar:  c_int,
    lpASCIICharStr:  LPWSTR,
    cchASCIIChar:  c_int    
) ->  c_int
{
    unsafe {
        return IdnToAscii(
            dwFlags,
            lpUnicodeCharStr,
            cchUnicodeChar,
            lpASCIICharStr,
            cchASCIIChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IdnToUnicode(
    dwFlags:  DWORD,
    lpASCIICharStr:  LPCWSTR,
    cchASCIIChar:  c_int,
    lpUnicodeCharStr:  LPWSTR,
    cchUnicodeChar:  c_int    
) ->  c_int
{
    unsafe {
        return IdnToUnicode(
            dwFlags,
            lpASCIICharStr,
            cchASCIIChar,
            lpUnicodeCharStr,
            cchUnicodeChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IdnToNameprepUnicode(
    dwFlags:  DWORD,
    lpUnicodeCharStr:  LPCWSTR,
    cchUnicodeChar:  c_int,
    lpNameprepCharStr:  LPWSTR,
    cchNameprepChar:  c_int    
) ->  c_int
{
    unsafe {
        return IdnToNameprepUnicode(
            dwFlags,
            lpUnicodeCharStr,
            cchUnicodeChar,
            lpNameprepCharStr,
            cchNameprepChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NormalizeString(
    NormForm:  NORM_FORM,
    lpSrcString:  LPCWSTR,
    cwSrcLength:  c_int,
    lpDstString:  LPWSTR,
    cwDstLength:  c_int    
) ->  c_int
{
    unsafe {
        return NormalizeString(
            NormForm,
            lpSrcString,
            cwSrcLength,
            lpDstString,
            cwDstLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsNormalizedString(
    NormForm:  NORM_FORM,
    lpString:  LPCWSTR,
    cwLength:  c_int    
) ->  BOOL
{
    unsafe {
        return IsNormalizedString(
            NormForm,
            lpString,
            cwLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerifyScripts(
    dwFlags:  DWORD,
    lpLocaleScripts:  LPCWSTR,
    cchLocaleScripts:  c_int,
    lpTestScripts:  LPCWSTR,
    cchTestScripts:  c_int    
) ->  BOOL
{
    unsafe {
        return VerifyScripts(
            dwFlags,
            lpLocaleScripts,
            cchLocaleScripts,
            lpTestScripts,
            cchTestScripts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetStringScripts(
    dwFlags:  DWORD,
    lpString:  LPCWSTR,
    cchString:  c_int,
    lpScripts:  LPWSTR,
    cchScripts:  c_int    
) ->  c_int
{
    unsafe {
        return GetStringScripts(
            dwFlags,
            lpString,
            cchString,
            lpScripts,
            cchScripts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLocaleInfoEx(
    lpLocaleName:  LPCWSTR,
    LCType:  LCTYPE,
    lpLCData:  LPWSTR,
    cchData:  c_int    
) ->  c_int
{
    unsafe {
        return GetLocaleInfoEx(
            lpLocaleName,
            LCType,
            lpLCData,
            cchData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCalendarInfoEx(
    lpLocaleName:  LPCWSTR,
    Calendar:  CALID,
    lpReserved:  LPCWSTR,
    CalType:  CALTYPE,
    lpCalData:  LPWSTR,
    cchData:  c_int,
    lpValue:  LPDWORD    
) ->  c_int
{
    unsafe {
        return GetCalendarInfoEx(
            lpLocaleName,
            Calendar,
            lpReserved,
            CalType,
            lpCalData,
            cchData,
            lpValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumberFormatEx(
    lpLocaleName:  LPCWSTR,
    dwFlags:  DWORD,
    lpValue:  LPCWSTR,
    lpFormat: *const NUMBERFMTW,
    lpNumberStr:  LPWSTR,
    cchNumber:  c_int    
) ->  c_int
{
    unsafe {
        return GetNumberFormatEx(
            lpLocaleName,
            dwFlags,
            lpValue,
            lpFormat,
            lpNumberStr,
            cchNumber
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrencyFormatEx(
    lpLocaleName:  LPCWSTR,
    dwFlags:  DWORD,
    lpValue:  LPCWSTR,
    lpFormat: *const CURRENCYFMTW,
    lpCurrencyStr:  LPWSTR,
    cchCurrency:  c_int    
) ->  c_int
{
    unsafe {
        return GetCurrencyFormatEx(
            lpLocaleName,
            dwFlags,
            lpValue,
            lpFormat,
            lpCurrencyStr,
            cchCurrency
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetUserDefaultLocaleName(
    lpLocaleName:  LPWSTR,
    cchLocaleName:  c_int    
) ->  c_int
{
    unsafe {
        return GetUserDefaultLocaleName(
            lpLocaleName,
            cchLocaleName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSystemDefaultLocaleName(
    lpLocaleName:  LPWSTR,
    cchLocaleName:  c_int    
) ->  c_int
{
    unsafe {
        return GetSystemDefaultLocaleName(
            lpLocaleName,
            cchLocaleName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsNLSDefinedString(
    Function:  NLS_FUNCTION,
    dwFlags:  DWORD,
    lpVersionInformation:  LPNLSVERSIONINFO,
    lpString:  LPCWSTR,
    cchStr:  INT    
) ->  BOOL
{
    unsafe {
        return IsNLSDefinedString(
            Function,
            dwFlags,
            lpVersionInformation,
            lpString,
            cchStr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNLSVersionEx(
    function:  NLS_FUNCTION,
    lpLocaleName:  LPCWSTR,
    lpVersionInformation:  LPNLSVERSIONINFOEX    
) ->  BOOL
{
    unsafe {
        return GetNLSVersionEx(
            function,
            lpLocaleName,
            lpVersionInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidNLSVersion(
    function:  NLS_FUNCTION,
    lpLocaleName:  LPCWSTR,
    lpVersionInformation:  LPNLSVERSIONINFOEX    
) ->  DWORD
{
    unsafe {
        return IsValidNLSVersion(
            function,
            lpLocaleName,
            lpVersionInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNLSStringEx(
    lpLocaleName:  LPCWSTR,
    dwFindNLSStringFlags:  DWORD,
    lpStringSource:  LPCWSTR,
    cchSource:  c_int,
    lpStringValue:  LPCWSTR,
    cchValue:  c_int,
    pcchFound:  LPINT,
    lpVersionInformation:  LPNLSVERSIONINFO,
    lpReserved:  LPVOID,
    sortHandle:  LPARAM    
) ->  c_int
{
    unsafe {
        return FindNLSStringEx(
            lpLocaleName,
            dwFindNLSStringFlags,
            lpStringSource,
            cchSource,
            lpStringValue,
            cchValue,
            pcchFound,
            lpVersionInformation,
            lpReserved,
            sortHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LCMapStringEx(
    lpLocaleName:  LPCWSTR,
    dwMapFlags:  DWORD,
    lpSrcStr:  LPCWSTR,
    cchSrc:  c_int,
    lpDestStr:  LPWSTR,
    cchDest:  c_int,
    lpVersionInformation:  LPNLSVERSIONINFO,
    lpReserved:  LPVOID,
    sortHandle:  LPARAM    
) ->  c_int
{
    unsafe {
        return LCMapStringEx(
            lpLocaleName,
            dwMapFlags,
            lpSrcStr,
            cchSrc,
            lpDestStr,
            cchDest,
            lpVersionInformation,
            lpReserved,
            sortHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidLocaleName(
    lpLocaleName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return IsValidLocaleName(
            lpLocaleName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumCalendarInfoExEx(
    pCalInfoEnumProcExEx:  CALINFO_ENUMPROCEXEX,
    lpLocaleName:  LPCWSTR,
    Calendar:  CALID,
    lpReserved:  LPCWSTR,
    CalType:  CALTYPE,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumCalendarInfoExEx(
            pCalInfoEnumProcExEx,
            lpLocaleName,
            Calendar,
            lpReserved,
            CalType,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDateFormatsExEx(
    lpDateFmtEnumProcExEx:  DATEFMT_ENUMPROCEXEX,
    lpLocaleName:  LPCWSTR,
    dwFlags:  DWORD,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumDateFormatsExEx(
            lpDateFmtEnumProcExEx,
            lpLocaleName,
            dwFlags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumTimeFormatsEx(
    lpTimeFmtEnumProcEx:  TIMEFMT_ENUMPROCEX,
    lpLocaleName:  LPCWSTR,
    dwFlags:  DWORD,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return EnumTimeFormatsEx(
            lpTimeFmtEnumProcEx,
            lpLocaleName,
            dwFlags,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumSystemLocalesEx(
    lpLocaleEnumProcEx:  LOCALE_ENUMPROCEX,
    dwFlags:  DWORD,
    lParam:  LPARAM,
    lpReserved:  LPVOID    
) ->  BOOL
{
    unsafe {
        return EnumSystemLocalesEx(
            lpLocaleEnumProcEx,
            dwFlags,
            lParam,
            lpReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResolveLocaleName(
    lpNameToResolve:  LPCWSTR,
    lpLocaleName:  LPWSTR,
    cchLocaleName:  c_int    
) ->  c_int
{
    unsafe {
        return ResolveLocaleName(
            lpNameToResolve,
            lpLocaleName,
            cchLocaleName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AllocConsole(
    
) ->  BOOL
{
    unsafe {
        return AllocConsole(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeConsole(
    
) ->  BOOL
{
    unsafe {
        return FreeConsole(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AttachConsole(
    dwProcessId:  DWORD    
) ->  BOOL
{
    unsafe {
        return AttachConsole(
            dwProcessId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleCP(
    
) ->  UINT
{
    unsafe {
        return GetConsoleCP(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleOutputCP(
    
) ->  UINT
{
    unsafe {
        return GetConsoleOutputCP(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleMode(
    hConsoleHandle:  HANDLE,
    lpMode:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetConsoleMode(
            hConsoleHandle,
            lpMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleMode(
    hConsoleHandle:  HANDLE,
    dwMode:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetConsoleMode(
            hConsoleHandle,
            dwMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumberOfConsoleInputEvents(
    hConsoleInput:  HANDLE,
    lpNumberOfEvents:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetNumberOfConsoleInputEvents(
            hConsoleInput,
            lpNumberOfEvents
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleInputA(
    hConsoleInput:  HANDLE,
    lpBuffer:  PINPUT_RECORD,
    nLength:  DWORD,
    lpNumberOfEventsRead:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return ReadConsoleInputA(
            hConsoleInput,
            lpBuffer,
            nLength,
            lpNumberOfEventsRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleInputW(
    hConsoleInput:  HANDLE,
    lpBuffer:  PINPUT_RECORD,
    nLength:  DWORD,
    lpNumberOfEventsRead:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return ReadConsoleInputW(
            hConsoleInput,
            lpBuffer,
            nLength,
            lpNumberOfEventsRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PeekConsoleInputA(
    hConsoleInput:  HANDLE,
    lpBuffer:  PINPUT_RECORD,
    nLength:  DWORD,
    lpNumberOfEventsRead:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return PeekConsoleInputA(
            hConsoleInput,
            lpBuffer,
            nLength,
            lpNumberOfEventsRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PeekConsoleInputW(
    hConsoleInput:  HANDLE,
    lpBuffer:  PINPUT_RECORD,
    nLength:  DWORD,
    lpNumberOfEventsRead:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return PeekConsoleInputW(
            hConsoleInput,
            lpBuffer,
            nLength,
            lpNumberOfEventsRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleA(
    hConsoleInput:  HANDLE,
    lpBuffer:  LPVOID,
    nNumberOfCharsToRead:  DWORD,
    lpNumberOfCharsRead:  LPDWORD,
    pInputControl:  PCONSOLE_READCONSOLE_CONTROL    
) ->  BOOL
{
    unsafe {
        return ReadConsoleA(
            hConsoleInput,
            lpBuffer,
            nNumberOfCharsToRead,
            lpNumberOfCharsRead,
            pInputControl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleW(
    hConsoleInput:  HANDLE,
    lpBuffer:  LPVOID,
    nNumberOfCharsToRead:  DWORD,
    lpNumberOfCharsRead:  LPDWORD,
    pInputControl:  PCONSOLE_READCONSOLE_CONTROL    
) ->  BOOL
{
    unsafe {
        return ReadConsoleW(
            hConsoleInput,
            lpBuffer,
            nNumberOfCharsToRead,
            lpNumberOfCharsRead,
            pInputControl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleA(
    hConsoleOutput:  HANDLE,
    lpBuffer: *const c_void,
    nNumberOfCharsToWrite:  DWORD,
    lpNumberOfCharsWritten:  LPDWORD,
    lpReserved:  LPVOID    
) ->  BOOL
{
    unsafe {
        return WriteConsoleA(
            hConsoleOutput,
            lpBuffer,
            nNumberOfCharsToWrite,
            lpNumberOfCharsWritten,
            lpReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleW(
    hConsoleOutput:  HANDLE,
    lpBuffer: *const c_void,
    nNumberOfCharsToWrite:  DWORD,
    lpNumberOfCharsWritten:  LPDWORD,
    lpReserved:  LPVOID    
) ->  BOOL
{
    unsafe {
        return WriteConsoleW(
            hConsoleOutput,
            lpBuffer,
            nNumberOfCharsToWrite,
            lpNumberOfCharsWritten,
            lpReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleCtrlHandler(
    HandlerRoutine:  PHANDLER_ROUTINE,
    Add:  BOOL    
) ->  BOOL
{
    unsafe {
        return SetConsoleCtrlHandler(
            HandlerRoutine,
            Add
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePseudoConsole(
    size:  COORD,
    hInput:  HANDLE,
    hOutput:  HANDLE,
    dwFlags:  DWORD,
    phPC: *mut HPCON    
) ->  HRESULT
{
    unsafe {
        return CreatePseudoConsole(
            size,
            hInput,
            hOutput,
            dwFlags,
            phPC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResizePseudoConsole(
    hPC:  HPCON,
    size:  COORD    
) ->  HRESULT
{
    unsafe {
        return ResizePseudoConsole(
            hPC,
            size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClosePseudoConsole(
    hPC:  HPCON    
)
{
    unsafe {
        return ClosePseudoConsole(
            hPC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FillConsoleOutputCharacterA(
    hConsoleOutput:  HANDLE,
    cCharacter:  CHAR,
    nLength:  DWORD,
    dwWriteCoord:  COORD,
    lpNumberOfCharsWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return FillConsoleOutputCharacterA(
            hConsoleOutput,
            cCharacter,
            nLength,
            dwWriteCoord,
            lpNumberOfCharsWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FillConsoleOutputCharacterW(
    hConsoleOutput:  HANDLE,
    cCharacter:  WCHAR,
    nLength:  DWORD,
    dwWriteCoord:  COORD,
    lpNumberOfCharsWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return FillConsoleOutputCharacterW(
            hConsoleOutput,
            cCharacter,
            nLength,
            dwWriteCoord,
            lpNumberOfCharsWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FillConsoleOutputAttribute(
    hConsoleOutput:  HANDLE,
    wAttribute:  WORD,
    nLength:  DWORD,
    dwWriteCoord:  COORD,
    lpNumberOfAttrsWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return FillConsoleOutputAttribute(
            hConsoleOutput,
            wAttribute,
            nLength,
            dwWriteCoord,
            lpNumberOfAttrsWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GenerateConsoleCtrlEvent(
    dwCtrlEvent:  DWORD,
    dwProcessGroupId:  DWORD    
) ->  BOOL
{
    unsafe {
        return GenerateConsoleCtrlEvent(
            dwCtrlEvent,
            dwProcessGroupId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateConsoleScreenBuffer(
    dwDesiredAccess:  DWORD,
    dwShareMode:  DWORD,
    lpSecurityAttributes: *const SECURITY_ATTRIBUTES,
    dwFlags:  DWORD,
    lpScreenBufferData:  LPVOID    
) ->  HANDLE
{
    unsafe {
        return CreateConsoleScreenBuffer(
            dwDesiredAccess,
            dwShareMode,
            lpSecurityAttributes,
            dwFlags,
            lpScreenBufferData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleActiveScreenBuffer(
    hConsoleOutput:  HANDLE    
) ->  BOOL
{
    unsafe {
        return SetConsoleActiveScreenBuffer(
            hConsoleOutput
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlushConsoleInputBuffer(
    hConsoleInput:  HANDLE    
) ->  BOOL
{
    unsafe {
        return FlushConsoleInputBuffer(
            hConsoleInput
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleCP(
    wCodePageID:  UINT    
) ->  BOOL
{
    unsafe {
        return SetConsoleCP(
            wCodePageID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleOutputCP(
    wCodePageID:  UINT    
) ->  BOOL
{
    unsafe {
        return SetConsoleOutputCP(
            wCodePageID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleCursorInfo(
    hConsoleOutput:  HANDLE,
    lpConsoleCursorInfo:  PCONSOLE_CURSOR_INFO    
) ->  BOOL
{
    unsafe {
        return GetConsoleCursorInfo(
            hConsoleOutput,
            lpConsoleCursorInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleCursorInfo(
    hConsoleOutput:  HANDLE,
    lpConsoleCursorInfo: *const CONSOLE_CURSOR_INFO    
) ->  BOOL
{
    unsafe {
        return SetConsoleCursorInfo(
            hConsoleOutput,
            lpConsoleCursorInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleScreenBufferInfo(
    hConsoleOutput:  HANDLE,
    lpConsoleScreenBufferInfo:  PCONSOLE_SCREEN_BUFFER_INFO    
) ->  BOOL
{
    unsafe {
        return GetConsoleScreenBufferInfo(
            hConsoleOutput,
            lpConsoleScreenBufferInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleScreenBufferInfoEx(
    hConsoleOutput:  HANDLE,
    lpConsoleScreenBufferInfoEx:  PCONSOLE_SCREEN_BUFFER_INFOEX    
) ->  BOOL
{
    unsafe {
        return GetConsoleScreenBufferInfoEx(
            hConsoleOutput,
            lpConsoleScreenBufferInfoEx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleScreenBufferInfoEx(
    hConsoleOutput:  HANDLE,
    lpConsoleScreenBufferInfoEx:  PCONSOLE_SCREEN_BUFFER_INFOEX    
) ->  BOOL
{
    unsafe {
        return SetConsoleScreenBufferInfoEx(
            hConsoleOutput,
            lpConsoleScreenBufferInfoEx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleScreenBufferSize(
    hConsoleOutput:  HANDLE,
    dwSize:  COORD    
) ->  BOOL
{
    unsafe {
        return SetConsoleScreenBufferSize(
            hConsoleOutput,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleCursorPosition(
    hConsoleOutput:  HANDLE,
    dwCursorPosition:  COORD    
) ->  BOOL
{
    unsafe {
        return SetConsoleCursorPosition(
            hConsoleOutput,
            dwCursorPosition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetLargestConsoleWindowSize(
    hConsoleOutput:  HANDLE    
) ->  COORD
{
    unsafe {
        return GetLargestConsoleWindowSize(
            hConsoleOutput
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleTextAttribute(
    hConsoleOutput:  HANDLE,
    wAttributes:  WORD    
) ->  BOOL
{
    unsafe {
        return SetConsoleTextAttribute(
            hConsoleOutput,
            wAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleWindowInfo(
    hConsoleOutput:  HANDLE,
    bAbsolute:  BOOL,
    lpConsoleWindow: *const SMALL_RECT    
) ->  BOOL
{
    unsafe {
        return SetConsoleWindowInfo(
            hConsoleOutput,
            bAbsolute,
            lpConsoleWindow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleOutputCharacterA(
    hConsoleOutput:  HANDLE,
    lpCharacter:  LPCSTR,
    nLength:  DWORD,
    dwWriteCoord:  COORD,
    lpNumberOfCharsWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return WriteConsoleOutputCharacterA(
            hConsoleOutput,
            lpCharacter,
            nLength,
            dwWriteCoord,
            lpNumberOfCharsWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleOutputCharacterW(
    hConsoleOutput:  HANDLE,
    lpCharacter:  LPCWSTR,
    nLength:  DWORD,
    dwWriteCoord:  COORD,
    lpNumberOfCharsWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return WriteConsoleOutputCharacterW(
            hConsoleOutput,
            lpCharacter,
            nLength,
            dwWriteCoord,
            lpNumberOfCharsWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleOutputAttribute(
    hConsoleOutput:  HANDLE,
    lpAttribute: *const WORD,
    nLength:  DWORD,
    dwWriteCoord:  COORD,
    lpNumberOfAttrsWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return WriteConsoleOutputAttribute(
            hConsoleOutput,
            lpAttribute,
            nLength,
            dwWriteCoord,
            lpNumberOfAttrsWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleOutputCharacterA(
    hConsoleOutput:  HANDLE,
    lpCharacter:  LPSTR,
    nLength:  DWORD,
    dwReadCoord:  COORD,
    lpNumberOfCharsRead:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return ReadConsoleOutputCharacterA(
            hConsoleOutput,
            lpCharacter,
            nLength,
            dwReadCoord,
            lpNumberOfCharsRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleOutputCharacterW(
    hConsoleOutput:  HANDLE,
    lpCharacter:  LPWSTR,
    nLength:  DWORD,
    dwReadCoord:  COORD,
    lpNumberOfCharsRead:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return ReadConsoleOutputCharacterW(
            hConsoleOutput,
            lpCharacter,
            nLength,
            dwReadCoord,
            lpNumberOfCharsRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleOutputAttribute(
    hConsoleOutput:  HANDLE,
    lpAttribute:  LPWORD,
    nLength:  DWORD,
    dwReadCoord:  COORD,
    lpNumberOfAttrsRead:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return ReadConsoleOutputAttribute(
            hConsoleOutput,
            lpAttribute,
            nLength,
            dwReadCoord,
            lpNumberOfAttrsRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleInputA(
    hConsoleInput:  HANDLE,
    lpBuffer: *const INPUT_RECORD,
    nLength:  DWORD,
    lpNumberOfEventsWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return WriteConsoleInputA(
            hConsoleInput,
            lpBuffer,
            nLength,
            lpNumberOfEventsWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleInputW(
    hConsoleInput:  HANDLE,
    lpBuffer: *const INPUT_RECORD,
    nLength:  DWORD,
    lpNumberOfEventsWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return WriteConsoleInputW(
            hConsoleInput,
            lpBuffer,
            nLength,
            lpNumberOfEventsWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScrollConsoleScreenBufferA(
    hConsoleOutput:  HANDLE,
    lpScrollRectangle: *const SMALL_RECT,
    lpClipRectangle: *const SMALL_RECT,
    dwDestinationOrigin:  COORD,
    lpFill: *const CHAR_INFO    
) ->  BOOL
{
    unsafe {
        return ScrollConsoleScreenBufferA(
            hConsoleOutput,
            lpScrollRectangle,
            lpClipRectangle,
            dwDestinationOrigin,
            lpFill
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScrollConsoleScreenBufferW(
    hConsoleOutput:  HANDLE,
    lpScrollRectangle: *const SMALL_RECT,
    lpClipRectangle: *const SMALL_RECT,
    dwDestinationOrigin:  COORD,
    lpFill: *const CHAR_INFO    
) ->  BOOL
{
    unsafe {
        return ScrollConsoleScreenBufferW(
            hConsoleOutput,
            lpScrollRectangle,
            lpClipRectangle,
            dwDestinationOrigin,
            lpFill
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleOutputA(
    hConsoleOutput:  HANDLE,
    lpBuffer: *const CHAR_INFO,
    dwBufferSize:  COORD,
    dwBufferCoord:  COORD,
    lpWriteRegion:  PSMALL_RECT    
) ->  BOOL
{
    unsafe {
        return WriteConsoleOutputA(
            hConsoleOutput,
            lpBuffer,
            dwBufferSize,
            dwBufferCoord,
            lpWriteRegion
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteConsoleOutputW(
    hConsoleOutput:  HANDLE,
    lpBuffer: *const CHAR_INFO,
    dwBufferSize:  COORD,
    dwBufferCoord:  COORD,
    lpWriteRegion:  PSMALL_RECT    
) ->  BOOL
{
    unsafe {
        return WriteConsoleOutputW(
            hConsoleOutput,
            lpBuffer,
            dwBufferSize,
            dwBufferCoord,
            lpWriteRegion
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleOutputA(
    hConsoleOutput:  HANDLE,
    lpBuffer:  PCHAR_INFO,
    dwBufferSize:  COORD,
    dwBufferCoord:  COORD,
    lpReadRegion:  PSMALL_RECT    
) ->  BOOL
{
    unsafe {
        return ReadConsoleOutputA(
            hConsoleOutput,
            lpBuffer,
            dwBufferSize,
            dwBufferCoord,
            lpReadRegion
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadConsoleOutputW(
    hConsoleOutput:  HANDLE,
    lpBuffer:  PCHAR_INFO,
    dwBufferSize:  COORD,
    dwBufferCoord:  COORD,
    lpReadRegion:  PSMALL_RECT    
) ->  BOOL
{
    unsafe {
        return ReadConsoleOutputW(
            hConsoleOutput,
            lpBuffer,
            dwBufferSize,
            dwBufferCoord,
            lpReadRegion
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleTitleA(
    lpConsoleTitle:  LPSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetConsoleTitleA(
            lpConsoleTitle,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleTitleW(
    lpConsoleTitle:  LPWSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetConsoleTitleW(
            lpConsoleTitle,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleOriginalTitleA(
    lpConsoleTitle:  LPSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetConsoleOriginalTitleA(
            lpConsoleTitle,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleOriginalTitleW(
    lpConsoleTitle:  LPWSTR,
    nSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetConsoleOriginalTitleW(
            lpConsoleTitle,
            nSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleTitleA(
    lpConsoleTitle:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetConsoleTitleA(
            lpConsoleTitle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleTitleW(
    lpConsoleTitle:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetConsoleTitleW(
            lpConsoleTitle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNumberOfConsoleMouseButtons(
    lpNumberOfMouseButtons:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetNumberOfConsoleMouseButtons(
            lpNumberOfMouseButtons
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleFontSize(
    hConsoleOutput:  HANDLE,
    nFont:  DWORD    
) ->  COORD
{
    unsafe {
        return GetConsoleFontSize(
            hConsoleOutput,
            nFont
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentConsoleFont(
    hConsoleOutput:  HANDLE,
    bMaximumWindow:  BOOL,
    lpConsoleCurrentFont:  PCONSOLE_FONT_INFO    
) ->  BOOL
{
    unsafe {
        return GetCurrentConsoleFont(
            hConsoleOutput,
            bMaximumWindow,
            lpConsoleCurrentFont
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCurrentConsoleFontEx(
    hConsoleOutput:  HANDLE,
    bMaximumWindow:  BOOL,
    lpConsoleCurrentFontEx:  PCONSOLE_FONT_INFOEX    
) ->  BOOL
{
    unsafe {
        return GetCurrentConsoleFontEx(
            hConsoleOutput,
            bMaximumWindow,
            lpConsoleCurrentFontEx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetCurrentConsoleFontEx(
    hConsoleOutput:  HANDLE,
    bMaximumWindow:  BOOL,
    lpConsoleCurrentFontEx:  PCONSOLE_FONT_INFOEX    
) ->  BOOL
{
    unsafe {
        return SetCurrentConsoleFontEx(
            hConsoleOutput,
            bMaximumWindow,
            lpConsoleCurrentFontEx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleSelectionInfo(
    lpConsoleSelectionInfo:  PCONSOLE_SELECTION_INFO    
) ->  BOOL
{
    unsafe {
        return GetConsoleSelectionInfo(
            lpConsoleSelectionInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleHistoryInfo(
    lpConsoleHistoryInfo:  PCONSOLE_HISTORY_INFO    
) ->  BOOL
{
    unsafe {
        return GetConsoleHistoryInfo(
            lpConsoleHistoryInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleHistoryInfo(
    lpConsoleHistoryInfo:  PCONSOLE_HISTORY_INFO    
) ->  BOOL
{
    unsafe {
        return SetConsoleHistoryInfo(
            lpConsoleHistoryInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleDisplayMode(
    lpModeFlags:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetConsoleDisplayMode(
            lpModeFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleDisplayMode(
    hConsoleOutput:  HANDLE,
    dwFlags:  DWORD,
    lpNewScreenBufferDimensions:  PCOORD    
) ->  BOOL
{
    unsafe {
        return SetConsoleDisplayMode(
            hConsoleOutput,
            dwFlags,
            lpNewScreenBufferDimensions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleWindow(
    
) ->  HWND
{
    unsafe {
        return GetConsoleWindow(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddConsoleAliasA(
    Source:  LPSTR,
    Target:  LPSTR,
    ExeName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return AddConsoleAliasA(
            Source,
            Target,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddConsoleAliasW(
    Source:  LPWSTR,
    Target:  LPWSTR,
    ExeName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return AddConsoleAliasW(
            Source,
            Target,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasA(
    Source:  LPSTR,
    TargetBuffer:  LPSTR,
    TargetBufferLength:  DWORD,
    ExeName:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasA(
            Source,
            TargetBuffer,
            TargetBufferLength,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasW(
    Source:  LPWSTR,
    TargetBuffer:  LPWSTR,
    TargetBufferLength:  DWORD,
    ExeName:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasW(
            Source,
            TargetBuffer,
            TargetBufferLength,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasesLengthA(
    ExeName:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasesLengthA(
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasesLengthW(
    ExeName:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasesLengthW(
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasExesLengthA(
    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasExesLengthA(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasExesLengthW(
    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasExesLengthW(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasesA(
    AliasBuffer:  LPSTR,
    AliasBufferLength:  DWORD,
    ExeName:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasesA(
            AliasBuffer,
            AliasBufferLength,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasesW(
    AliasBuffer:  LPWSTR,
    AliasBufferLength:  DWORD,
    ExeName:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasesW(
            AliasBuffer,
            AliasBufferLength,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasExesA(
    ExeNameBuffer:  LPSTR,
    ExeNameBufferLength:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasExesA(
            ExeNameBuffer,
            ExeNameBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleAliasExesW(
    ExeNameBuffer:  LPWSTR,
    ExeNameBufferLength:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetConsoleAliasExesW(
            ExeNameBuffer,
            ExeNameBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExpungeConsoleCommandHistoryA(
    ExeName:  LPSTR    
)
{
    unsafe {
        return ExpungeConsoleCommandHistoryA(
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExpungeConsoleCommandHistoryW(
    ExeName:  LPWSTR    
)
{
    unsafe {
        return ExpungeConsoleCommandHistoryW(
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleNumberOfCommandsA(
    Number:  DWORD,
    ExeName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return SetConsoleNumberOfCommandsA(
            Number,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConsoleNumberOfCommandsW(
    Number:  DWORD,
    ExeName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return SetConsoleNumberOfCommandsW(
            Number,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleCommandHistoryLengthA(
    ExeName:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleCommandHistoryLengthA(
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleCommandHistoryLengthW(
    ExeName:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleCommandHistoryLengthW(
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleCommandHistoryA(
    Commands:  LPSTR,
    CommandBufferLength:  DWORD,
    ExeName:  LPSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleCommandHistoryA(
            Commands,
            CommandBufferLength,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleCommandHistoryW(
    Commands:  LPWSTR,
    CommandBufferLength:  DWORD,
    ExeName:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return GetConsoleCommandHistoryW(
            Commands,
            CommandBufferLength,
            ExeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConsoleProcessList(
    lpdwProcessList:  LPDWORD,
    dwProcessCount:  DWORD    
) ->  DWORD
{
    unsafe {
        return GetConsoleProcessList(
            lpdwProcessList,
            dwProcessCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerFindFileA(
    uFlags:  DWORD,
    szFileName:  LPCSTR,
    szWinDir:  LPCSTR,
    szAppDir:  LPCSTR,
    szCurDir:  LPSTR,
    puCurDirLen:  PUINT,
    szDestDir:  LPSTR,
    puDestDirLen:  PUINT    
) ->  DWORD
{
    unsafe {
        return VerFindFileA(
            uFlags,
            szFileName,
            szWinDir,
            szAppDir,
            szCurDir,
            puCurDirLen,
            szDestDir,
            puDestDirLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerFindFileW(
    uFlags:  DWORD,
    szFileName:  LPCWSTR,
    szWinDir:  LPCWSTR,
    szAppDir:  LPCWSTR,
    szCurDir:  LPWSTR,
    puCurDirLen:  PUINT,
    szDestDir:  LPWSTR,
    puDestDirLen:  PUINT    
) ->  DWORD
{
    unsafe {
        return VerFindFileW(
            uFlags,
            szFileName,
            szWinDir,
            szAppDir,
            szCurDir,
            puCurDirLen,
            szDestDir,
            puDestDirLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerInstallFileA(
    uFlags:  DWORD,
    szSrcFileName:  LPCSTR,
    szDestFileName:  LPCSTR,
    szSrcDir:  LPCSTR,
    szDestDir:  LPCSTR,
    szCurDir:  LPCSTR,
    szTmpFile:  LPSTR,
    puTmpFileLen:  PUINT    
) ->  DWORD
{
    unsafe {
        return VerInstallFileA(
            uFlags,
            szSrcFileName,
            szDestFileName,
            szSrcDir,
            szDestDir,
            szCurDir,
            szTmpFile,
            puTmpFileLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerInstallFileW(
    uFlags:  DWORD,
    szSrcFileName:  LPCWSTR,
    szDestFileName:  LPCWSTR,
    szSrcDir:  LPCWSTR,
    szDestDir:  LPCWSTR,
    szCurDir:  LPCWSTR,
    szTmpFile:  LPWSTR,
    puTmpFileLen:  PUINT    
) ->  DWORD
{
    unsafe {
        return VerInstallFileW(
            uFlags,
            szSrcFileName,
            szDestFileName,
            szSrcDir,
            szDestDir,
            szCurDir,
            szTmpFile,
            puTmpFileLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileVersionInfoSizeA(
    lptstrFilename:  LPCSTR,
    lpdwHandle:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetFileVersionInfoSizeA(
            lptstrFilename,
            lpdwHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileVersionInfoSizeW(
    lptstrFilename:  LPCWSTR,
    lpdwHandle:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetFileVersionInfoSizeW(
            lptstrFilename,
            lpdwHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileVersionInfoA(
    lptstrFilename:  LPCSTR,
    dwHandle:  DWORD,
    dwLen:  DWORD,
    lpData:  LPVOID    
) ->  BOOL
{
    unsafe {
        return GetFileVersionInfoA(
            lptstrFilename,
            dwHandle,
            dwLen,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileVersionInfoW(
    lptstrFilename:  LPCWSTR,
    dwHandle:  DWORD,
    dwLen:  DWORD,
    lpData:  LPVOID    
) ->  BOOL
{
    unsafe {
        return GetFileVersionInfoW(
            lptstrFilename,
            dwHandle,
            dwLen,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileVersionInfoSizeExA(
    dwFlags:  DWORD,
    lpwstrFilename:  LPCSTR,
    lpdwHandle:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetFileVersionInfoSizeExA(
            dwFlags,
            lpwstrFilename,
            lpdwHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileVersionInfoSizeExW(
    dwFlags:  DWORD,
    lpwstrFilename:  LPCWSTR,
    lpdwHandle:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetFileVersionInfoSizeExW(
            dwFlags,
            lpwstrFilename,
            lpdwHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileVersionInfoExA(
    dwFlags:  DWORD,
    lpwstrFilename:  LPCSTR,
    dwHandle:  DWORD,
    dwLen:  DWORD,
    lpData:  LPVOID    
) ->  BOOL
{
    unsafe {
        return GetFileVersionInfoExA(
            dwFlags,
            lpwstrFilename,
            dwHandle,
            dwLen,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileVersionInfoExW(
    dwFlags:  DWORD,
    lpwstrFilename:  LPCWSTR,
    dwHandle:  DWORD,
    dwLen:  DWORD,
    lpData:  LPVOID    
) ->  BOOL
{
    unsafe {
        return GetFileVersionInfoExW(
            dwFlags,
            lpwstrFilename,
            dwHandle,
            dwLen,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerLanguageNameA(
    wLang:  DWORD,
    szLang:  LPSTR,
    cchLang:  DWORD    
) ->  DWORD
{
    unsafe {
        return VerLanguageNameA(
            wLang,
            szLang,
            cchLang
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerLanguageNameW(
    wLang:  DWORD,
    szLang:  LPWSTR,
    cchLang:  DWORD    
) ->  DWORD
{
    unsafe {
        return VerLanguageNameW(
            wLang,
            szLang,
            cchLang
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerQueryValueA(
    pBlock:  LPCVOID,
    lpSubBlock:  LPCSTR,
    lplpBuffer: *mut LPVOID,
    puLen:  PUINT    
) ->  BOOL
{
    unsafe {
        return VerQueryValueA(
            pBlock,
            lpSubBlock,
            lplpBuffer,
            puLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VerQueryValueW(
    pBlock:  LPCVOID,
    lpSubBlock:  LPCWSTR,
    lplpBuffer: *mut LPVOID,
    puLen:  PUINT    
) ->  BOOL
{
    unsafe {
        return VerQueryValueW(
            pBlock,
            lpSubBlock,
            lplpBuffer,
            puLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCloseKey(
    hKey:  HKEY    
) ->  LSTATUS
{
    unsafe {
        return RegCloseKey(
            hKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOverridePredefKey(
    hKey:  HKEY,
    hNewHKey:  HKEY    
) ->  LSTATUS
{
    unsafe {
        return RegOverridePredefKey(
            hKey,
            hNewHKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOpenUserClassesRoot(
    hToken:  HANDLE,
    dwOptions:  DWORD,
    samDesired:  REGSAM,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegOpenUserClassesRoot(
            hToken,
            dwOptions,
            samDesired,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOpenCurrentUser(
    samDesired:  REGSAM,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegOpenCurrentUser(
            samDesired,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDisablePredefinedCache(
    
) ->  LSTATUS
{
    unsafe {
        return RegDisablePredefinedCache(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDisablePredefinedCacheEx(
    
) ->  LSTATUS
{
    unsafe {
        return RegDisablePredefinedCacheEx(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegConnectRegistryA(
    lpMachineName:  LPCSTR,
    hKey:  HKEY,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegConnectRegistryA(
            lpMachineName,
            hKey,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegConnectRegistryW(
    lpMachineName:  LPCWSTR,
    hKey:  HKEY,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegConnectRegistryW(
            lpMachineName,
            hKey,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegConnectRegistryExA(
    lpMachineName:  LPCSTR,
    hKey:  HKEY,
    Flags:  ULONG,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegConnectRegistryExA(
            lpMachineName,
            hKey,
            Flags,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegConnectRegistryExW(
    lpMachineName:  LPCWSTR,
    hKey:  HKEY,
    Flags:  ULONG,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegConnectRegistryExW(
            lpMachineName,
            hKey,
            Flags,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCreateKeyA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegCreateKeyA(
            hKey,
            lpSubKey,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCreateKeyW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegCreateKeyW(
            hKey,
            lpSubKey,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCreateKeyExA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    Reserved:  DWORD,
    lpClass:  LPSTR,
    dwOptions:  DWORD,
    samDesired:  REGSAM,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    phkResult:  PHKEY,
    lpdwDisposition:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegCreateKeyExA(
            hKey,
            lpSubKey,
            Reserved,
            lpClass,
            dwOptions,
            samDesired,
            lpSecurityAttributes,
            phkResult,
            lpdwDisposition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCreateKeyExW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    Reserved:  DWORD,
    lpClass:  LPWSTR,
    dwOptions:  DWORD,
    samDesired:  REGSAM,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    phkResult:  PHKEY,
    lpdwDisposition:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegCreateKeyExW(
            hKey,
            lpSubKey,
            Reserved,
            lpClass,
            dwOptions,
            samDesired,
            lpSecurityAttributes,
            phkResult,
            lpdwDisposition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCreateKeyTransactedA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    Reserved:  DWORD,
    lpClass:  LPSTR,
    dwOptions:  DWORD,
    samDesired:  REGSAM,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    phkResult:  PHKEY,
    lpdwDisposition:  LPDWORD,
    hTransaction:  HANDLE,
    pExtendedParemeter:  PVOID    
) ->  LSTATUS
{
    unsafe {
        return RegCreateKeyTransactedA(
            hKey,
            lpSubKey,
            Reserved,
            lpClass,
            dwOptions,
            samDesired,
            lpSecurityAttributes,
            phkResult,
            lpdwDisposition,
            hTransaction,
            pExtendedParemeter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCreateKeyTransactedW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    Reserved:  DWORD,
    lpClass:  LPWSTR,
    dwOptions:  DWORD,
    samDesired:  REGSAM,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    phkResult:  PHKEY,
    lpdwDisposition:  LPDWORD,
    hTransaction:  HANDLE,
    pExtendedParemeter:  PVOID    
) ->  LSTATUS
{
    unsafe {
        return RegCreateKeyTransactedW(
            hKey,
            lpSubKey,
            Reserved,
            lpClass,
            dwOptions,
            samDesired,
            lpSecurityAttributes,
            phkResult,
            lpdwDisposition,
            hTransaction,
            pExtendedParemeter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteKeyA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteKeyA(
            hKey,
            lpSubKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteKeyW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteKeyW(
            hKey,
            lpSubKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteKeyExA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    samDesired:  REGSAM,
    Reserved:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteKeyExA(
            hKey,
            lpSubKey,
            samDesired,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteKeyExW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    samDesired:  REGSAM,
    Reserved:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteKeyExW(
            hKey,
            lpSubKey,
            samDesired,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteKeyTransactedA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    samDesired:  REGSAM,
    Reserved:  DWORD,
    hTransaction:  HANDLE,
    pExtendedParameter:  PVOID    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteKeyTransactedA(
            hKey,
            lpSubKey,
            samDesired,
            Reserved,
            hTransaction,
            pExtendedParameter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteKeyTransactedW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    samDesired:  REGSAM,
    Reserved:  DWORD,
    hTransaction:  HANDLE,
    pExtendedParameter:  PVOID    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteKeyTransactedW(
            hKey,
            lpSubKey,
            samDesired,
            Reserved,
            hTransaction,
            pExtendedParameter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDisableReflectionKey(
    hBase:  HKEY    
) ->  LONG
{
    unsafe {
        return RegDisableReflectionKey(
            hBase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegEnableReflectionKey(
    hBase:  HKEY    
) ->  LONG
{
    unsafe {
        return RegEnableReflectionKey(
            hBase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryReflectionKey(
    hBase:  HKEY,
    bIsReflectionDisabled: *mut BOOL    
) ->  LONG
{
    unsafe {
        return RegQueryReflectionKey(
            hBase,
            bIsReflectionDisabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteValueA(
    hKey:  HKEY,
    lpValueName:  LPCSTR    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteValueA(
            hKey,
            lpValueName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteValueW(
    hKey:  HKEY,
    lpValueName:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteValueW(
            hKey,
            lpValueName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegEnumKeyA(
    hKey:  HKEY,
    dwIndex:  DWORD,
    lpName:  LPSTR,
    cchName:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegEnumKeyA(
            hKey,
            dwIndex,
            lpName,
            cchName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegEnumKeyW(
    hKey:  HKEY,
    dwIndex:  DWORD,
    lpName:  LPWSTR,
    cchName:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegEnumKeyW(
            hKey,
            dwIndex,
            lpName,
            cchName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegEnumKeyExA(
    hKey:  HKEY,
    dwIndex:  DWORD,
    lpName:  LPSTR,
    lpcchName:  LPDWORD,
    lpReserved:  LPDWORD,
    lpClass:  LPSTR,
    lpcchClass:  LPDWORD,
    lpftLastWriteTime:  PFILETIME    
) ->  LSTATUS
{
    unsafe {
        return RegEnumKeyExA(
            hKey,
            dwIndex,
            lpName,
            lpcchName,
            lpReserved,
            lpClass,
            lpcchClass,
            lpftLastWriteTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegEnumKeyExW(
    hKey:  HKEY,
    dwIndex:  DWORD,
    lpName:  LPWSTR,
    lpcchName:  LPDWORD,
    lpReserved:  LPDWORD,
    lpClass:  LPWSTR,
    lpcchClass:  LPDWORD,
    lpftLastWriteTime:  PFILETIME    
) ->  LSTATUS
{
    unsafe {
        return RegEnumKeyExW(
            hKey,
            dwIndex,
            lpName,
            lpcchName,
            lpReserved,
            lpClass,
            lpcchClass,
            lpftLastWriteTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegEnumValueA(
    hKey:  HKEY,
    dwIndex:  DWORD,
    lpValueName:  LPSTR,
    lpcchValueName:  LPDWORD,
    lpReserved:  LPDWORD,
    lpType:  LPDWORD,
    lpData:  LPBYTE,
    lpcbData:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegEnumValueA(
            hKey,
            dwIndex,
            lpValueName,
            lpcchValueName,
            lpReserved,
            lpType,
            lpData,
            lpcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegEnumValueW(
    hKey:  HKEY,
    dwIndex:  DWORD,
    lpValueName:  LPWSTR,
    lpcchValueName:  LPDWORD,
    lpReserved:  LPDWORD,
    lpType:  LPDWORD,
    lpData:  LPBYTE,
    lpcbData:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegEnumValueW(
            hKey,
            dwIndex,
            lpValueName,
            lpcchValueName,
            lpReserved,
            lpType,
            lpData,
            lpcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegFlushKey(
    hKey:  HKEY    
) ->  LSTATUS
{
    unsafe {
        return RegFlushKey(
            hKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegGetKeySecurity(
    hKey:  HKEY,
    SecurityInformation:  SECURITY_INFORMATION,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    lpcbSecurityDescriptor:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegGetKeySecurity(
            hKey,
            SecurityInformation,
            pSecurityDescriptor,
            lpcbSecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegLoadKeyA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    lpFile:  LPCSTR    
) ->  LSTATUS
{
    unsafe {
        return RegLoadKeyA(
            hKey,
            lpSubKey,
            lpFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegLoadKeyW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    lpFile:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegLoadKeyW(
            hKey,
            lpSubKey,
            lpFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegNotifyChangeKeyValue(
    hKey:  HKEY,
    bWatchSubtree:  BOOL,
    dwNotifyFilter:  DWORD,
    hEvent:  HANDLE,
    fAsynchronous:  BOOL    
) ->  LSTATUS
{
    unsafe {
        return RegNotifyChangeKeyValue(
            hKey,
            bWatchSubtree,
            dwNotifyFilter,
            hEvent,
            fAsynchronous
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOpenKeyA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegOpenKeyA(
            hKey,
            lpSubKey,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOpenKeyW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegOpenKeyW(
            hKey,
            lpSubKey,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOpenKeyExA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    ulOptions:  DWORD,
    samDesired:  REGSAM,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegOpenKeyExA(
            hKey,
            lpSubKey,
            ulOptions,
            samDesired,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOpenKeyExW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    ulOptions:  DWORD,
    samDesired:  REGSAM,
    phkResult:  PHKEY    
) ->  LSTATUS
{
    unsafe {
        return RegOpenKeyExW(
            hKey,
            lpSubKey,
            ulOptions,
            samDesired,
            phkResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOpenKeyTransactedA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    ulOptions:  DWORD,
    samDesired:  REGSAM,
    phkResult:  PHKEY,
    hTransaction:  HANDLE,
    pExtendedParemeter:  PVOID    
) ->  LSTATUS
{
    unsafe {
        return RegOpenKeyTransactedA(
            hKey,
            lpSubKey,
            ulOptions,
            samDesired,
            phkResult,
            hTransaction,
            pExtendedParemeter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegOpenKeyTransactedW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    ulOptions:  DWORD,
    samDesired:  REGSAM,
    phkResult:  PHKEY,
    hTransaction:  HANDLE,
    pExtendedParemeter:  PVOID    
) ->  LSTATUS
{
    unsafe {
        return RegOpenKeyTransactedW(
            hKey,
            lpSubKey,
            ulOptions,
            samDesired,
            phkResult,
            hTransaction,
            pExtendedParemeter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryInfoKeyA(
    hKey:  HKEY,
    lpClass:  LPSTR,
    lpcchClass:  LPDWORD,
    lpReserved:  LPDWORD,
    lpcSubKeys:  LPDWORD,
    lpcbMaxSubKeyLen:  LPDWORD,
    lpcbMaxClassLen:  LPDWORD,
    lpcValues:  LPDWORD,
    lpcbMaxValueNameLen:  LPDWORD,
    lpcbMaxValueLen:  LPDWORD,
    lpcbSecurityDescriptor:  LPDWORD,
    lpftLastWriteTime:  PFILETIME    
) ->  LSTATUS
{
    unsafe {
        return RegQueryInfoKeyA(
            hKey,
            lpClass,
            lpcchClass,
            lpReserved,
            lpcSubKeys,
            lpcbMaxSubKeyLen,
            lpcbMaxClassLen,
            lpcValues,
            lpcbMaxValueNameLen,
            lpcbMaxValueLen,
            lpcbSecurityDescriptor,
            lpftLastWriteTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryInfoKeyW(
    hKey:  HKEY,
    lpClass:  LPWSTR,
    lpcchClass:  LPDWORD,
    lpReserved:  LPDWORD,
    lpcSubKeys:  LPDWORD,
    lpcbMaxSubKeyLen:  LPDWORD,
    lpcbMaxClassLen:  LPDWORD,
    lpcValues:  LPDWORD,
    lpcbMaxValueNameLen:  LPDWORD,
    lpcbMaxValueLen:  LPDWORD,
    lpcbSecurityDescriptor:  LPDWORD,
    lpftLastWriteTime:  PFILETIME    
) ->  LSTATUS
{
    unsafe {
        return RegQueryInfoKeyW(
            hKey,
            lpClass,
            lpcchClass,
            lpReserved,
            lpcSubKeys,
            lpcbMaxSubKeyLen,
            lpcbMaxClassLen,
            lpcValues,
            lpcbMaxValueNameLen,
            lpcbMaxValueLen,
            lpcbSecurityDescriptor,
            lpftLastWriteTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryValueA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    lpData:  LPSTR,
    lpcbData:  PLONG    
) ->  LSTATUS
{
    unsafe {
        return RegQueryValueA(
            hKey,
            lpSubKey,
            lpData,
            lpcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryValueW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    lpData:  LPWSTR,
    lpcbData:  PLONG    
) ->  LSTATUS
{
    unsafe {
        return RegQueryValueW(
            hKey,
            lpSubKey,
            lpData,
            lpcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryMultipleValuesA(
    hKey:  HKEY,
    val_list:  PVALENTA,
    num_vals:  DWORD,
    lpValueBuf:  LPSTR,
    ldwTotsize:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegQueryMultipleValuesA(
            hKey,
            val_list,
            num_vals,
            lpValueBuf,
            ldwTotsize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryMultipleValuesW(
    hKey:  HKEY,
    val_list:  PVALENTW,
    num_vals:  DWORD,
    lpValueBuf:  LPWSTR,
    ldwTotsize:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegQueryMultipleValuesW(
            hKey,
            val_list,
            num_vals,
            lpValueBuf,
            ldwTotsize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryValueExA(
    hKey:  HKEY,
    lpValueName:  LPCSTR,
    lpReserved:  LPDWORD,
    lpType:  LPDWORD,
    lpData:  LPBYTE,
    lpcbData:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegQueryValueExA(
            hKey,
            lpValueName,
            lpReserved,
            lpType,
            lpData,
            lpcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegQueryValueExW(
    hKey:  HKEY,
    lpValueName:  LPCWSTR,
    lpReserved:  LPDWORD,
    lpType:  LPDWORD,
    lpData:  LPBYTE,
    lpcbData:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegQueryValueExW(
            hKey,
            lpValueName,
            lpReserved,
            lpType,
            lpData,
            lpcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegReplaceKeyA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    lpNewFile:  LPCSTR,
    lpOldFile:  LPCSTR    
) ->  LSTATUS
{
    unsafe {
        return RegReplaceKeyA(
            hKey,
            lpSubKey,
            lpNewFile,
            lpOldFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegReplaceKeyW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    lpNewFile:  LPCWSTR,
    lpOldFile:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegReplaceKeyW(
            hKey,
            lpSubKey,
            lpNewFile,
            lpOldFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegRestoreKeyA(
    hKey:  HKEY,
    lpFile:  LPCSTR,
    dwFlags:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegRestoreKeyA(
            hKey,
            lpFile,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegRestoreKeyW(
    hKey:  HKEY,
    lpFile:  LPCWSTR,
    dwFlags:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegRestoreKeyW(
            hKey,
            lpFile,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegRenameKey(
    hKey:  HKEY,
    lpSubKeyName:  LPCWSTR,
    lpNewKeyName:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegRenameKey(
            hKey,
            lpSubKeyName,
            lpNewKeyName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSaveKeyA(
    hKey:  HKEY,
    lpFile:  LPCSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  LSTATUS
{
    unsafe {
        return RegSaveKeyA(
            hKey,
            lpFile,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSaveKeyW(
    hKey:  HKEY,
    lpFile:  LPCWSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  LSTATUS
{
    unsafe {
        return RegSaveKeyW(
            hKey,
            lpFile,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSetKeySecurity(
    hKey:  HKEY,
    SecurityInformation:  SECURITY_INFORMATION,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR    
) ->  LSTATUS
{
    unsafe {
        return RegSetKeySecurity(
            hKey,
            SecurityInformation,
            pSecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSetValueA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    dwType:  DWORD,
    lpData:  LPCSTR,
    cbData:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegSetValueA(
            hKey,
            lpSubKey,
            dwType,
            lpData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSetValueW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    dwType:  DWORD,
    lpData:  LPCWSTR,
    cbData:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegSetValueW(
            hKey,
            lpSubKey,
            dwType,
            lpData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSetValueExA(
    hKey:  HKEY,
    lpValueName:  LPCSTR,
    Reserved:  DWORD,
    dwType:  DWORD,
    lpData: *const BYTE,
    cbData:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegSetValueExA(
            hKey,
            lpValueName,
            Reserved,
            dwType,
            lpData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSetValueExW(
    hKey:  HKEY,
    lpValueName:  LPCWSTR,
    Reserved:  DWORD,
    dwType:  DWORD,
    lpData: *const BYTE,
    cbData:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegSetValueExW(
            hKey,
            lpValueName,
            Reserved,
            dwType,
            lpData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegUnLoadKeyA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR    
) ->  LSTATUS
{
    unsafe {
        return RegUnLoadKeyA(
            hKey,
            lpSubKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegUnLoadKeyW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegUnLoadKeyW(
            hKey,
            lpSubKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteKeyValueA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    lpValueName:  LPCSTR    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteKeyValueA(
            hKey,
            lpSubKey,
            lpValueName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteKeyValueW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    lpValueName:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteKeyValueW(
            hKey,
            lpSubKey,
            lpValueName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSetKeyValueA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR,
    lpValueName:  LPCSTR,
    dwType:  DWORD,
    lpData:  LPCVOID,
    cbData:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegSetKeyValueA(
            hKey,
            lpSubKey,
            lpValueName,
            dwType,
            lpData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSetKeyValueW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR,
    lpValueName:  LPCWSTR,
    dwType:  DWORD,
    lpData:  LPCVOID,
    cbData:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegSetKeyValueW(
            hKey,
            lpSubKey,
            lpValueName,
            dwType,
            lpData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteTreeA(
    hKey:  HKEY,
    lpSubKey:  LPCSTR    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteTreeA(
            hKey,
            lpSubKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegDeleteTreeW(
    hKey:  HKEY,
    lpSubKey:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegDeleteTreeW(
            hKey,
            lpSubKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCopyTreeA(
    hKeySrc:  HKEY,
    lpSubKey:  LPCSTR,
    hKeyDest:  HKEY    
) ->  LSTATUS
{
    unsafe {
        return RegCopyTreeA(
            hKeySrc,
            lpSubKey,
            hKeyDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegGetValueA(
    hkey:  HKEY,
    lpSubKey:  LPCSTR,
    lpValue:  LPCSTR,
    dwFlags:  DWORD,
    pdwType:  LPDWORD,
    pvData:  PVOID,
    pcbData:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegGetValueA(
            hkey,
            lpSubKey,
            lpValue,
            dwFlags,
            pdwType,
            pvData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegGetValueW(
    hkey:  HKEY,
    lpSubKey:  LPCWSTR,
    lpValue:  LPCWSTR,
    dwFlags:  DWORD,
    pdwType:  LPDWORD,
    pvData:  PVOID,
    pcbData:  LPDWORD    
) ->  LSTATUS
{
    unsafe {
        return RegGetValueW(
            hkey,
            lpSubKey,
            lpValue,
            dwFlags,
            pdwType,
            pvData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegCopyTreeW(
    hKeySrc:  HKEY,
    lpSubKey:  LPCWSTR,
    hKeyDest:  HKEY    
) ->  LSTATUS
{
    unsafe {
        return RegCopyTreeW(
            hKeySrc,
            lpSubKey,
            hKeyDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegLoadMUIStringA(
    hKey:  HKEY,
    pszValue:  LPCSTR,
    pszOutBuf:  LPSTR,
    cbOutBuf:  DWORD,
    pcbData:  LPDWORD,
    Flags:  DWORD,
    pszDirectory:  LPCSTR    
) ->  LSTATUS
{
    unsafe {
        return RegLoadMUIStringA(
            hKey,
            pszValue,
            pszOutBuf,
            cbOutBuf,
            pcbData,
            Flags,
            pszDirectory
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegLoadMUIStringW(
    hKey:  HKEY,
    pszValue:  LPCWSTR,
    pszOutBuf:  LPWSTR,
    cbOutBuf:  DWORD,
    pcbData:  LPDWORD,
    Flags:  DWORD,
    pszDirectory:  LPCWSTR    
) ->  LSTATUS
{
    unsafe {
        return RegLoadMUIStringW(
            hKey,
            pszValue,
            pszOutBuf,
            cbOutBuf,
            pcbData,
            Flags,
            pszDirectory
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegLoadAppKeyA(
    lpFile:  LPCSTR,
    phkResult:  PHKEY,
    samDesired:  REGSAM,
    dwOptions:  DWORD,
    Reserved:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegLoadAppKeyA(
            lpFile,
            phkResult,
            samDesired,
            dwOptions,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegLoadAppKeyW(
    lpFile:  LPCWSTR,
    phkResult:  PHKEY,
    samDesired:  REGSAM,
    dwOptions:  DWORD,
    Reserved:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegLoadAppKeyW(
            lpFile,
            phkResult,
            samDesired,
            dwOptions,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitiateSystemShutdownA(
    lpMachineName:  LPSTR,
    lpMessage:  LPSTR,
    dwTimeout:  DWORD,
    bForceAppsClosed:  BOOL,
    bRebootAfterShutdown:  BOOL    
) ->  BOOL
{
    unsafe {
        return InitiateSystemShutdownA(
            lpMachineName,
            lpMessage,
            dwTimeout,
            bForceAppsClosed,
            bRebootAfterShutdown
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitiateSystemShutdownW(
    lpMachineName:  LPWSTR,
    lpMessage:  LPWSTR,
    dwTimeout:  DWORD,
    bForceAppsClosed:  BOOL,
    bRebootAfterShutdown:  BOOL    
) ->  BOOL
{
    unsafe {
        return InitiateSystemShutdownW(
            lpMachineName,
            lpMessage,
            dwTimeout,
            bForceAppsClosed,
            bRebootAfterShutdown
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AbortSystemShutdownA(
    lpMachineName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return AbortSystemShutdownA(
            lpMachineName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AbortSystemShutdownW(
    lpMachineName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return AbortSystemShutdownW(
            lpMachineName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitiateSystemShutdownExA(
    lpMachineName:  LPSTR,
    lpMessage:  LPSTR,
    dwTimeout:  DWORD,
    bForceAppsClosed:  BOOL,
    bRebootAfterShutdown:  BOOL,
    dwReason:  DWORD    
) ->  BOOL
{
    unsafe {
        return InitiateSystemShutdownExA(
            lpMachineName,
            lpMessage,
            dwTimeout,
            bForceAppsClosed,
            bRebootAfterShutdown,
            dwReason
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitiateSystemShutdownExW(
    lpMachineName:  LPWSTR,
    lpMessage:  LPWSTR,
    dwTimeout:  DWORD,
    bForceAppsClosed:  BOOL,
    bRebootAfterShutdown:  BOOL,
    dwReason:  DWORD    
) ->  BOOL
{
    unsafe {
        return InitiateSystemShutdownExW(
            lpMachineName,
            lpMessage,
            dwTimeout,
            bForceAppsClosed,
            bRebootAfterShutdown,
            dwReason
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitiateShutdownA(
    lpMachineName:  LPSTR,
    lpMessage:  LPSTR,
    dwGracePeriod:  DWORD,
    dwShutdownFlags:  DWORD,
    dwReason:  DWORD    
) ->  DWORD
{
    unsafe {
        return InitiateShutdownA(
            lpMachineName,
            lpMessage,
            dwGracePeriod,
            dwShutdownFlags,
            dwReason
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitiateShutdownW(
    lpMachineName:  LPWSTR,
    lpMessage:  LPWSTR,
    dwGracePeriod:  DWORD,
    dwShutdownFlags:  DWORD,
    dwReason:  DWORD    
) ->  DWORD
{
    unsafe {
        return InitiateShutdownW(
            lpMachineName,
            lpMessage,
            dwGracePeriod,
            dwShutdownFlags,
            dwReason
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CheckForHiberboot(
    pHiberboot:  PBOOLEAN,
    bClearFlag:  BOOLEAN    
) ->  DWORD
{
    unsafe {
        return CheckForHiberboot(
            pHiberboot,
            bClearFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSaveKeyExA(
    hKey:  HKEY,
    lpFile:  LPCSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    Flags:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegSaveKeyExA(
            hKey,
            lpFile,
            lpSecurityAttributes,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegSaveKeyExW(
    hKey:  HKEY,
    lpFile:  LPCWSTR,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES,
    Flags:  DWORD    
) ->  LSTATUS
{
    unsafe {
        return RegSaveKeyExW(
            hKey,
            lpFile,
            lpSecurityAttributes,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetAddConnectionA(
    lpRemoteName:  LPCSTR,
    lpPassword:  LPCSTR,
    lpLocalName:  LPCSTR    
) ->  DWORD
{
    unsafe {
        return WNetAddConnectionA(
            lpRemoteName,
            lpPassword,
            lpLocalName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetAddConnectionW(
    lpRemoteName:  LPCWSTR,
    lpPassword:  LPCWSTR,
    lpLocalName:  LPCWSTR    
) ->  DWORD
{
    unsafe {
        return WNetAddConnectionW(
            lpRemoteName,
            lpPassword,
            lpLocalName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetAddConnection2A(
    lpNetResource:  LPNETRESOURCEA,
    lpPassword:  LPCSTR,
    lpUserName:  LPCSTR,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetAddConnection2A(
            lpNetResource,
            lpPassword,
            lpUserName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetAddConnection2W(
    lpNetResource:  LPNETRESOURCEW,
    lpPassword:  LPCWSTR,
    lpUserName:  LPCWSTR,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetAddConnection2W(
            lpNetResource,
            lpPassword,
            lpUserName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetAddConnection3A(
    hwndOwner:  HWND,
    lpNetResource:  LPNETRESOURCEA,
    lpPassword:  LPCSTR,
    lpUserName:  LPCSTR,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetAddConnection3A(
            hwndOwner,
            lpNetResource,
            lpPassword,
            lpUserName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetAddConnection3W(
    hwndOwner:  HWND,
    lpNetResource:  LPNETRESOURCEW,
    lpPassword:  LPCWSTR,
    lpUserName:  LPCWSTR,
    dwFlags:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetAddConnection3W(
            hwndOwner,
            lpNetResource,
            lpPassword,
            lpUserName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetAddConnection4A(
    hwndOwner:  HWND,
    lpNetResource:  LPNETRESOURCEA,
    pAuthBuffer:  PVOID,
    cbAuthBuffer:  DWORD,
    dwFlags:  DWORD,
    lpUseOptions:  PBYTE,
    cbUseOptions:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetAddConnection4A(
            hwndOwner,
            lpNetResource,
            pAuthBuffer,
            cbAuthBuffer,
            dwFlags,
            lpUseOptions,
            cbUseOptions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetAddConnection4W(
    hwndOwner:  HWND,
    lpNetResource:  LPNETRESOURCEW,
    pAuthBuffer:  PVOID,
    cbAuthBuffer:  DWORD,
    dwFlags:  DWORD,
    lpUseOptions:  PBYTE,
    cbUseOptions:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetAddConnection4W(
            hwndOwner,
            lpNetResource,
            pAuthBuffer,
            cbAuthBuffer,
            dwFlags,
            lpUseOptions,
            cbUseOptions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetCancelConnectionA(
    lpName:  LPCSTR,
    fForce:  BOOL    
) ->  DWORD
{
    unsafe {
        return WNetCancelConnectionA(
            lpName,
            fForce
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetCancelConnectionW(
    lpName:  LPCWSTR,
    fForce:  BOOL    
) ->  DWORD
{
    unsafe {
        return WNetCancelConnectionW(
            lpName,
            fForce
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetCancelConnection2A(
    lpName:  LPCSTR,
    dwFlags:  DWORD,
    fForce:  BOOL    
) ->  DWORD
{
    unsafe {
        return WNetCancelConnection2A(
            lpName,
            dwFlags,
            fForce
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetCancelConnection2W(
    lpName:  LPCWSTR,
    dwFlags:  DWORD,
    fForce:  BOOL    
) ->  DWORD
{
    unsafe {
        return WNetCancelConnection2W(
            lpName,
            dwFlags,
            fForce
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetConnectionA(
    lpLocalName:  LPCSTR,
    lpRemoteName:  LPSTR,
    lpnLength:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetConnectionA(
            lpLocalName,
            lpRemoteName,
            lpnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetConnectionW(
    lpLocalName:  LPCWSTR,
    lpRemoteName:  LPWSTR,
    lpnLength:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetConnectionW(
            lpLocalName,
            lpRemoteName,
            lpnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetRestoreSingleConnectionW(
    hwndParent:  HWND,
    lpDevice:  LPCWSTR,
    fUseUI:  BOOL    
) ->  DWORD
{
    unsafe {
        return WNetRestoreSingleConnectionW(
            hwndParent,
            lpDevice,
            fUseUI
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetUseConnectionA(
    hwndOwner:  HWND,
    lpNetResource:  LPNETRESOURCEA,
    lpPassword:  LPCSTR,
    lpUserId:  LPCSTR,
    dwFlags:  DWORD,
    lpAccessName:  LPSTR,
    lpBufferSize:  LPDWORD,
    lpResult:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetUseConnectionA(
            hwndOwner,
            lpNetResource,
            lpPassword,
            lpUserId,
            dwFlags,
            lpAccessName,
            lpBufferSize,
            lpResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetUseConnectionW(
    hwndOwner:  HWND,
    lpNetResource:  LPNETRESOURCEW,
    lpPassword:  LPCWSTR,
    lpUserId:  LPCWSTR,
    dwFlags:  DWORD,
    lpAccessName:  LPWSTR,
    lpBufferSize:  LPDWORD,
    lpResult:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetUseConnectionW(
            hwndOwner,
            lpNetResource,
            lpPassword,
            lpUserId,
            dwFlags,
            lpAccessName,
            lpBufferSize,
            lpResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetUseConnection4A(
    hwndOwner:  HWND,
    lpNetResource:  LPNETRESOURCEA,
    pAuthBuffer:  PVOID,
    cbAuthBuffer:  DWORD,
    dwFlags:  DWORD,
    lpUseOptions:  PBYTE,
    cbUseOptions:  DWORD,
    lpAccessName:  LPSTR,
    lpBufferSize:  LPDWORD,
    lpResult:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetUseConnection4A(
            hwndOwner,
            lpNetResource,
            pAuthBuffer,
            cbAuthBuffer,
            dwFlags,
            lpUseOptions,
            cbUseOptions,
            lpAccessName,
            lpBufferSize,
            lpResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetUseConnection4W(
    hwndOwner:  HWND,
    lpNetResource:  LPNETRESOURCEW,
    pAuthBuffer:  PVOID,
    cbAuthBuffer:  DWORD,
    dwFlags:  DWORD,
    lpUseOptions:  PBYTE,
    cbUseOptions:  DWORD,
    lpAccessName:  LPWSTR,
    lpBufferSize:  LPDWORD,
    lpResult:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetUseConnection4W(
            hwndOwner,
            lpNetResource,
            pAuthBuffer,
            cbAuthBuffer,
            dwFlags,
            lpUseOptions,
            cbUseOptions,
            lpAccessName,
            lpBufferSize,
            lpResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetConnectionDialog(
    hwnd:  HWND,
    dwType:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetConnectionDialog(
            hwnd,
            dwType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetDisconnectDialog(
    hwnd:  HWND,
    dwType:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetDisconnectDialog(
            hwnd,
            dwType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetConnectionDialog1A(
    lpConnDlgStruct:  LPCONNECTDLGSTRUCTA    
) ->  DWORD
{
    unsafe {
        return WNetConnectionDialog1A(
            lpConnDlgStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetConnectionDialog1W(
    lpConnDlgStruct:  LPCONNECTDLGSTRUCTW    
) ->  DWORD
{
    unsafe {
        return WNetConnectionDialog1W(
            lpConnDlgStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetDisconnectDialog1A(
    lpConnDlgStruct:  LPDISCDLGSTRUCTA    
) ->  DWORD
{
    unsafe {
        return WNetDisconnectDialog1A(
            lpConnDlgStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetDisconnectDialog1W(
    lpConnDlgStruct:  LPDISCDLGSTRUCTW    
) ->  DWORD
{
    unsafe {
        return WNetDisconnectDialog1W(
            lpConnDlgStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetOpenEnumA(
    dwScope:  DWORD,
    dwType:  DWORD,
    dwUsage:  DWORD,
    lpNetResource:  LPNETRESOURCEA,
    lphEnum:  LPHANDLE    
) ->  DWORD
{
    unsafe {
        return WNetOpenEnumA(
            dwScope,
            dwType,
            dwUsage,
            lpNetResource,
            lphEnum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetOpenEnumW(
    dwScope:  DWORD,
    dwType:  DWORD,
    dwUsage:  DWORD,
    lpNetResource:  LPNETRESOURCEW,
    lphEnum:  LPHANDLE    
) ->  DWORD
{
    unsafe {
        return WNetOpenEnumW(
            dwScope,
            dwType,
            dwUsage,
            lpNetResource,
            lphEnum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetEnumResourceA(
    hEnum:  HANDLE,
    lpcCount:  LPDWORD,
    lpBuffer:  LPVOID,
    lpBufferSize:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetEnumResourceA(
            hEnum,
            lpcCount,
            lpBuffer,
            lpBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetEnumResourceW(
    hEnum:  HANDLE,
    lpcCount:  LPDWORD,
    lpBuffer:  LPVOID,
    lpBufferSize:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetEnumResourceW(
            hEnum,
            lpcCount,
            lpBuffer,
            lpBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetCloseEnum(
    hEnum:  HANDLE    
) ->  DWORD
{
    unsafe {
        return WNetCloseEnum(
            hEnum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetResourceParentA(
    lpNetResource:  LPNETRESOURCEA,
    lpBuffer:  LPVOID,
    lpcbBuffer:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetResourceParentA(
            lpNetResource,
            lpBuffer,
            lpcbBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetResourceParentW(
    lpNetResource:  LPNETRESOURCEW,
    lpBuffer:  LPVOID,
    lpcbBuffer:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetResourceParentW(
            lpNetResource,
            lpBuffer,
            lpcbBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetResourceInformationA(
    lpNetResource:  LPNETRESOURCEA,
    lpBuffer:  LPVOID,
    lpcbBuffer:  LPDWORD,
    lplpSystem: *mut LPSTR    
) ->  DWORD
{
    unsafe {
        return WNetGetResourceInformationA(
            lpNetResource,
            lpBuffer,
            lpcbBuffer,
            lplpSystem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetResourceInformationW(
    lpNetResource:  LPNETRESOURCEW,
    lpBuffer:  LPVOID,
    lpcbBuffer:  LPDWORD,
    lplpSystem: *mut LPWSTR    
) ->  DWORD
{
    unsafe {
        return WNetGetResourceInformationW(
            lpNetResource,
            lpBuffer,
            lpcbBuffer,
            lplpSystem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetUniversalNameA(
    lpLocalPath:  LPCSTR,
    dwInfoLevel:  DWORD,
    lpBuffer:  LPVOID,
    lpBufferSize:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetUniversalNameA(
            lpLocalPath,
            dwInfoLevel,
            lpBuffer,
            lpBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetUniversalNameW(
    lpLocalPath:  LPCWSTR,
    dwInfoLevel:  DWORD,
    lpBuffer:  LPVOID,
    lpBufferSize:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetUniversalNameW(
            lpLocalPath,
            dwInfoLevel,
            lpBuffer,
            lpBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetUserA(
    lpName:  LPCSTR,
    lpUserName:  LPSTR,
    lpnLength:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetUserA(
            lpName,
            lpUserName,
            lpnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetUserW(
    lpName:  LPCWSTR,
    lpUserName:  LPWSTR,
    lpnLength:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetUserW(
            lpName,
            lpUserName,
            lpnLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetProviderNameA(
    dwNetType:  DWORD,
    lpProviderName:  LPSTR,
    lpBufferSize:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetProviderNameA(
            dwNetType,
            lpProviderName,
            lpBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetProviderNameW(
    dwNetType:  DWORD,
    lpProviderName:  LPWSTR,
    lpBufferSize:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetProviderNameW(
            dwNetType,
            lpProviderName,
            lpBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetNetworkInformationA(
    lpProvider:  LPCSTR,
    lpNetInfoStruct:  LPNETINFOSTRUCT    
) ->  DWORD
{
    unsafe {
        return WNetGetNetworkInformationA(
            lpProvider,
            lpNetInfoStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetNetworkInformationW(
    lpProvider:  LPCWSTR,
    lpNetInfoStruct:  LPNETINFOSTRUCT    
) ->  DWORD
{
    unsafe {
        return WNetGetNetworkInformationW(
            lpProvider,
            lpNetInfoStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetLastErrorA(
    lpError:  LPDWORD,
    lpErrorBuf:  LPSTR,
    nErrorBufSize:  DWORD,
    lpNameBuf:  LPSTR,
    nNameBufSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetLastErrorA(
            lpError,
            lpErrorBuf,
            nErrorBufSize,
            lpNameBuf,
            nNameBufSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WNetGetLastErrorW(
    lpError:  LPDWORD,
    lpErrorBuf:  LPWSTR,
    nErrorBufSize:  DWORD,
    lpNameBuf:  LPWSTR,
    nNameBufSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return WNetGetLastErrorW(
            lpError,
            lpErrorBuf,
            nErrorBufSize,
            lpNameBuf,
            nNameBufSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MultinetGetConnectionPerformanceA(
    lpNetResource:  LPNETRESOURCEA,
    lpNetConnectInfoStruct:  LPNETCONNECTINFOSTRUCT    
) ->  DWORD
{
    unsafe {
        return MultinetGetConnectionPerformanceA(
            lpNetResource,
            lpNetConnectInfoStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MultinetGetConnectionPerformanceW(
    lpNetResource:  LPNETRESOURCEW,
    lpNetConnectInfoStruct:  LPNETCONNECTINFOSTRUCT    
) ->  DWORD
{
    unsafe {
        return MultinetGetConnectionPerformanceW(
            lpNetResource,
            lpNetConnectInfoStruct
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeSetQualityOfService(
    hwndClient:  HWND,
    pqosNew: *const SECURITY_QUALITY_OF_SERVICE,
    pqosPrev:  PSECURITY_QUALITY_OF_SERVICE    
) ->  BOOL
{
    unsafe {
        return DdeSetQualityOfService(
            hwndClient,
            pqosNew,
            pqosPrev
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImpersonateDdeClientWindow(
    hWndClient:  HWND,
    hWndServer:  HWND    
) ->  BOOL
{
    unsafe {
        return ImpersonateDdeClientWindow(
            hWndClient,
            hWndServer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PackDDElParam(
    msg:  UINT,
    uiLo:  UINT_PTR,
    uiHi:  UINT_PTR    
) ->  LPARAM
{
    unsafe {
        return PackDDElParam(
            msg,
            uiLo,
            uiHi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnpackDDElParam(
    msg:  UINT,
    lParam:  LPARAM,
    puiLo:  PUINT_PTR,
    puiHi:  PUINT_PTR    
) ->  BOOL
{
    unsafe {
        return UnpackDDElParam(
            msg,
            lParam,
            puiLo,
            puiHi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeDDElParam(
    msg:  UINT,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return FreeDDElParam(
            msg,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReuseDDElParam(
    lParam:  LPARAM,
    msgIn:  UINT,
    msgOut:  UINT,
    uiLo:  UINT_PTR,
    uiHi:  UINT_PTR    
) ->  LPARAM
{
    unsafe {
        return ReuseDDElParam(
            lParam,
            msgIn,
            msgOut,
            uiLo,
            uiHi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeInitializeA(
    pidInst:  LPDWORD,
    pfnCallback:  PFNCALLBACK,
    afCmd:  DWORD,
    ulRes:  DWORD    
) ->  UINT
{
    unsafe {
        return DdeInitializeA(
            pidInst,
            pfnCallback,
            afCmd,
            ulRes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeInitializeW(
    pidInst:  LPDWORD,
    pfnCallback:  PFNCALLBACK,
    afCmd:  DWORD,
    ulRes:  DWORD    
) ->  UINT
{
    unsafe {
        return DdeInitializeW(
            pidInst,
            pfnCallback,
            afCmd,
            ulRes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeUninitialize(
    idInst:  DWORD    
) ->  BOOL
{
    unsafe {
        return DdeUninitialize(
            idInst
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeConnectList(
    idInst:  DWORD,
    hszService:  HSZ,
    hszTopic:  HSZ,
    hConvList:  HCONVLIST,
    pCC:  PCONVCONTEXT    
) ->  HCONVLIST
{
    unsafe {
        return DdeConnectList(
            idInst,
            hszService,
            hszTopic,
            hConvList,
            pCC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeQueryNextServer(
    hConvList:  HCONVLIST,
    hConvPrev:  HCONV    
) ->  HCONV
{
    unsafe {
        return DdeQueryNextServer(
            hConvList,
            hConvPrev
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeDisconnectList(
    hConvList:  HCONVLIST    
) ->  BOOL
{
    unsafe {
        return DdeDisconnectList(
            hConvList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeConnect(
    idInst:  DWORD,
    hszService:  HSZ,
    hszTopic:  HSZ,
    pCC:  PCONVCONTEXT    
) ->  HCONV
{
    unsafe {
        return DdeConnect(
            idInst,
            hszService,
            hszTopic,
            pCC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeDisconnect(
    hConv:  HCONV    
) ->  BOOL
{
    unsafe {
        return DdeDisconnect(
            hConv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeReconnect(
    hConv:  HCONV    
) ->  HCONV
{
    unsafe {
        return DdeReconnect(
            hConv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeQueryConvInfo(
    hConv:  HCONV,
    idTransaction:  DWORD,
    pConvInfo:  PCONVINFO    
) ->  UINT
{
    unsafe {
        return DdeQueryConvInfo(
            hConv,
            idTransaction,
            pConvInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeSetUserHandle(
    hConv:  HCONV,
    id:  DWORD,
    hUser:  DWORD_PTR    
) ->  BOOL
{
    unsafe {
        return DdeSetUserHandle(
            hConv,
            id,
            hUser
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeAbandonTransaction(
    idInst:  DWORD,
    hConv:  HCONV,
    idTransaction:  DWORD    
) ->  BOOL
{
    unsafe {
        return DdeAbandonTransaction(
            idInst,
            hConv,
            idTransaction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdePostAdvise(
    idInst:  DWORD,
    hszTopic:  HSZ,
    hszItem:  HSZ    
) ->  BOOL
{
    unsafe {
        return DdePostAdvise(
            idInst,
            hszTopic,
            hszItem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeEnableCallback(
    idInst:  DWORD,
    hConv:  HCONV,
    wCmd:  UINT    
) ->  BOOL
{
    unsafe {
        return DdeEnableCallback(
            idInst,
            hConv,
            wCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeImpersonateClient(
    hConv:  HCONV    
) ->  BOOL
{
    unsafe {
        return DdeImpersonateClient(
            hConv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeNameService(
    idInst:  DWORD,
    hsz1:  HSZ,
    hsz2:  HSZ,
    afCmd:  UINT    
) ->  HDDEDATA
{
    unsafe {
        return DdeNameService(
            idInst,
            hsz1,
            hsz2,
            afCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeClientTransaction(
    pData:  LPBYTE,
    cbData:  DWORD,
    hConv:  HCONV,
    hszItem:  HSZ,
    wFmt:  UINT,
    wType:  UINT,
    dwTimeout:  DWORD,
    pdwResult:  LPDWORD    
) ->  HDDEDATA
{
    unsafe {
        return DdeClientTransaction(
            pData,
            cbData,
            hConv,
            hszItem,
            wFmt,
            wType,
            dwTimeout,
            pdwResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeCreateDataHandle(
    idInst:  DWORD,
    pSrc:  LPBYTE,
    cb:  DWORD,
    cbOff:  DWORD,
    hszItem:  HSZ,
    wFmt:  UINT,
    afCmd:  UINT    
) ->  HDDEDATA
{
    unsafe {
        return DdeCreateDataHandle(
            idInst,
            pSrc,
            cb,
            cbOff,
            hszItem,
            wFmt,
            afCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeAddData(
    hData:  HDDEDATA,
    pSrc:  LPBYTE,
    cb:  DWORD,
    cbOff:  DWORD    
) ->  HDDEDATA
{
    unsafe {
        return DdeAddData(
            hData,
            pSrc,
            cb,
            cbOff
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeGetData(
    hData:  HDDEDATA,
    pDst:  LPBYTE,
    cbMax:  DWORD,
    cbOff:  DWORD    
) ->  DWORD
{
    unsafe {
        return DdeGetData(
            hData,
            pDst,
            cbMax,
            cbOff
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeAccessData(
    hData:  HDDEDATA,
    pcbDataSize:  LPDWORD    
) ->  LPBYTE
{
    unsafe {
        return DdeAccessData(
            hData,
            pcbDataSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeUnaccessData(
    hData:  HDDEDATA    
) ->  BOOL
{
    unsafe {
        return DdeUnaccessData(
            hData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeFreeDataHandle(
    hData:  HDDEDATA    
) ->  BOOL
{
    unsafe {
        return DdeFreeDataHandle(
            hData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeGetLastError(
    idInst:  DWORD    
) ->  UINT
{
    unsafe {
        return DdeGetLastError(
            idInst
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeCreateStringHandleA(
    idInst:  DWORD,
    psz:  LPCSTR,
    iCodePage:  c_int    
) ->  HSZ
{
    unsafe {
        return DdeCreateStringHandleA(
            idInst,
            psz,
            iCodePage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeCreateStringHandleW(
    idInst:  DWORD,
    psz:  LPCWSTR,
    iCodePage:  c_int    
) ->  HSZ
{
    unsafe {
        return DdeCreateStringHandleW(
            idInst,
            psz,
            iCodePage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeQueryStringA(
    idInst:  DWORD,
    hsz:  HSZ,
    psz:  LPSTR,
    cchMax:  DWORD,
    iCodePage:  c_int    
) ->  DWORD
{
    unsafe {
        return DdeQueryStringA(
            idInst,
            hsz,
            psz,
            cchMax,
            iCodePage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeQueryStringW(
    idInst:  DWORD,
    hsz:  HSZ,
    psz:  LPWSTR,
    cchMax:  DWORD,
    iCodePage:  c_int    
) ->  DWORD
{
    unsafe {
        return DdeQueryStringW(
            idInst,
            hsz,
            psz,
            cchMax,
            iCodePage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeFreeStringHandle(
    idInst:  DWORD,
    hsz:  HSZ    
) ->  BOOL
{
    unsafe {
        return DdeFreeStringHandle(
            idInst,
            hsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeKeepStringHandle(
    idInst:  DWORD,
    hsz:  HSZ    
) ->  BOOL
{
    unsafe {
        return DdeKeepStringHandle(
            idInst,
            hsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DdeCmpStringHandles(
    hsz1:  HSZ,
    hsz2:  HSZ    
) ->  c_int
{
    unsafe {
        return DdeCmpStringHandles(
            hsz1,
            hsz2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZStart(
    
) ->  INT
{
    unsafe {
        return LZStart(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZDone(
    
)
{
    unsafe {
        return LZDone(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyLZFile(
    hfSource:  INT,
    hfDest:  INT    
) ->  LONG
{
    unsafe {
        return CopyLZFile(
            hfSource,
            hfDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZCopy(
    hfSource:  INT,
    hfDest:  INT    
) ->  LONG
{
    unsafe {
        return LZCopy(
            hfSource,
            hfDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZInit(
    hfSource:  INT    
) ->  INT
{
    unsafe {
        return LZInit(
            hfSource
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetExpandedNameA(
    lpszSource:  LPSTR,
    lpszBuffer:  LPSTR    
) ->  INT
{
    unsafe {
        return GetExpandedNameA(
            lpszSource,
            lpszBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetExpandedNameW(
    lpszSource:  LPWSTR,
    lpszBuffer:  LPWSTR    
) ->  INT
{
    unsafe {
        return GetExpandedNameW(
            lpszSource,
            lpszBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZOpenFileA(
    lpFileName:  LPSTR,
    lpReOpenBuf:  LPOFSTRUCT,
    wStyle:  WORD    
) ->  INT
{
    unsafe {
        return LZOpenFileA(
            lpFileName,
            lpReOpenBuf,
            wStyle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZOpenFileW(
    lpFileName:  LPWSTR,
    lpReOpenBuf:  LPOFSTRUCT,
    wStyle:  WORD    
) ->  INT
{
    unsafe {
        return LZOpenFileW(
            lpFileName,
            lpReOpenBuf,
            wStyle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZSeek(
    hFile:  INT,
    lOffset:  LONG,
    iOrigin:  INT    
) ->  LONG
{
    unsafe {
        return LZSeek(
            hFile,
            lOffset,
            iOrigin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZRead(
    hFile:  INT,
    lpBuffer: *mut CHAR,
    cbRead:  INT    
) ->  INT
{
    unsafe {
        return LZRead(
            hFile,
            lpBuffer,
            cbRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LZClose(
    hFile:  INT    
)
{
    unsafe {
        return LZClose(
            hFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciSendCommandA(
    mciId:  MCIDEVICEID,
    uMsg:  UINT,
    dwParam1:  DWORD_PTR,
    dwParam2:  DWORD_PTR    
) ->  MCIERROR
{
    unsafe {
        return mciSendCommandA(
            mciId,
            uMsg,
            dwParam1,
            dwParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciSendCommandW(
    mciId:  MCIDEVICEID,
    uMsg:  UINT,
    dwParam1:  DWORD_PTR,
    dwParam2:  DWORD_PTR    
) ->  MCIERROR
{
    unsafe {
        return mciSendCommandW(
            mciId,
            uMsg,
            dwParam1,
            dwParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciSendStringA(
    lpstrCommand:  LPCSTR,
    lpstrReturnString:  LPSTR,
    uReturnLength:  UINT,
    hwndCallback:  HWND    
) ->  MCIERROR
{
    unsafe {
        return mciSendStringA(
            lpstrCommand,
            lpstrReturnString,
            uReturnLength,
            hwndCallback
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciSendStringW(
    lpstrCommand:  LPCWSTR,
    lpstrReturnString:  LPWSTR,
    uReturnLength:  UINT,
    hwndCallback:  HWND    
) ->  MCIERROR
{
    unsafe {
        return mciSendStringW(
            lpstrCommand,
            lpstrReturnString,
            uReturnLength,
            hwndCallback
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetDeviceIDA(
    pszDevice:  LPCSTR    
) ->  MCIDEVICEID
{
    unsafe {
        return mciGetDeviceIDA(
            pszDevice
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetDeviceIDW(
    pszDevice:  LPCWSTR    
) ->  MCIDEVICEID
{
    unsafe {
        return mciGetDeviceIDW(
            pszDevice
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetDeviceIDFromElementIDA(
    dwElementID:  DWORD,
    lpstrType:  LPCSTR    
) ->  MCIDEVICEID
{
    unsafe {
        return mciGetDeviceIDFromElementIDA(
            dwElementID,
            lpstrType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetDeviceIDFromElementIDW(
    dwElementID:  DWORD,
    lpstrType:  LPCWSTR    
) ->  MCIDEVICEID
{
    unsafe {
        return mciGetDeviceIDFromElementIDW(
            dwElementID,
            lpstrType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetErrorStringA(
    mcierr:  MCIERROR,
    pszText:  LPSTR,
    cchText:  UINT    
) ->  BOOL
{
    unsafe {
        return mciGetErrorStringA(
            mcierr,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetErrorStringW(
    mcierr:  MCIERROR,
    pszText:  LPWSTR,
    cchText:  UINT    
) ->  BOOL
{
    unsafe {
        return mciGetErrorStringW(
            mcierr,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciSetYieldProc(
    mciId:  MCIDEVICEID,
    fpYieldProc:  YIELDPROC,
    dwYieldData:  DWORD    
) ->  BOOL
{
    unsafe {
        return mciSetYieldProc(
            mciId,
            fpYieldProc,
            dwYieldData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetCreatorTask(
    mciId:  MCIDEVICEID    
) ->  HTASK
{
    unsafe {
        return mciGetCreatorTask(
            mciId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetYieldProc(
    mciId:  MCIDEVICEID,
    pdwYieldData:  LPDWORD    
) ->  YIELDPROC
{
    unsafe {
        return mciGetYieldProc(
            mciId,
            pdwYieldData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciGetDriverData(
    wDeviceID:  MCIDEVICEID    
) ->  DWORD_PTR
{
    unsafe {
        return mciGetDriverData(
            wDeviceID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciLoadCommandResource(
    hInstance:  HANDLE,
    lpResName:  LPCWSTR,
    wType:  UINT    
) ->  UINT
{
    unsafe {
        return mciLoadCommandResource(
            hInstance,
            lpResName,
            wType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciSetDriverData(
    wDeviceID:  MCIDEVICEID,
    dwData:  DWORD_PTR    
) ->  BOOL
{
    unsafe {
        return mciSetDriverData(
            wDeviceID,
            dwData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciDriverYield(
    wDeviceID:  MCIDEVICEID    
) ->  UINT
{
    unsafe {
        return mciDriverYield(
            wDeviceID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciDriverNotify(
    hwndCallback:  HANDLE,
    wDeviceID:  MCIDEVICEID,
    uStatus:  UINT    
) ->  BOOL
{
    unsafe {
        return mciDriverNotify(
            hwndCallback,
            wDeviceID,
            uStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mciFreeCommandResource(
    wTable:  UINT    
) ->  BOOL
{
    unsafe {
        return mciFreeCommandResource(
            wTable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseDriver(
    hDriver:  HDRVR,
    lParam1:  LPARAM,
    lParam2:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return CloseDriver(
            hDriver,
            lParam1,
            lParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenDriver(
    szDriverName:  LPCWSTR,
    szSectionName:  LPCWSTR,
    lParam2:  LPARAM    
) ->  HDRVR
{
    unsafe {
        return OpenDriver(
            szDriverName,
            szSectionName,
            lParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SendDriverMessage(
    hDriver:  HDRVR,
    message:  UINT,
    lParam1:  LPARAM,
    lParam2:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return SendDriverMessage(
            hDriver,
            message,
            lParam1,
            lParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DrvGetModuleHandle(
    hDriver:  HDRVR    
) ->  HMODULE
{
    unsafe {
        return DrvGetModuleHandle(
            hDriver
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDriverModuleHandle(
    hDriver:  HDRVR    
) ->  HMODULE
{
    unsafe {
        return GetDriverModuleHandle(
            hDriver
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DefDriverProc(
    dwDriverIdentifier:  DWORD_PTR,
    hdrvr:  HDRVR,
    uMsg:  UINT,
    lParam1:  LPARAM,
    lParam2:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return DefDriverProc(
            dwDriverIdentifier,
            hdrvr,
            uMsg,
            lParam1,
            lParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DriverCallback(
    dwCallback:  DWORD_PTR,
    dwFlags:  DWORD,
    hDevice:  HDRVR,
    dwMsg:  DWORD,
    dwUser:  DWORD_PTR,
    dwParam1:  DWORD_PTR,
    dwParam2:  DWORD_PTR    
) ->  BOOL
{
    unsafe {
        return DriverCallback(
            dwCallback,
            dwFlags,
            hDevice,
            dwMsg,
            dwUser,
            dwParam1,
            dwParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_sndOpenSound(
    EventName:  LPCWSTR,
    AppName:  LPCWSTR,
    Flags:  INT32,
    FileHandle:  PHANDLE    
) ->  LONG
{
    unsafe {
        return sndOpenSound(
            EventName,
            AppName,
            Flags,
            FileHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmDrvInstall(
    hDriver:  HDRVR,
    wszDrvEntry:  LPCWSTR,
    drvMessage:  DRIVERMSGPROC,
    wFlags:  UINT    
) ->  UINT
{
    unsafe {
        return mmDrvInstall(
            hDriver,
            wszDrvEntry,
            drvMessage,
            wFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioStringToFOURCCA(
    sz:  LPCSTR,
    uFlags:  UINT    
) ->  FOURCC
{
    unsafe {
        return mmioStringToFOURCCA(
            sz,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioStringToFOURCCW(
    sz:  LPCWSTR,
    uFlags:  UINT    
) ->  FOURCC
{
    unsafe {
        return mmioStringToFOURCCW(
            sz,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioInstallIOProcA(
    fccIOProc:  FOURCC,
    pIOProc:  LPMMIOPROC,
    dwFlags:  DWORD    
) ->  LPMMIOPROC
{
    unsafe {
        return mmioInstallIOProcA(
            fccIOProc,
            pIOProc,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioInstallIOProcW(
    fccIOProc:  FOURCC,
    pIOProc:  LPMMIOPROC,
    dwFlags:  DWORD    
) ->  LPMMIOPROC
{
    unsafe {
        return mmioInstallIOProcW(
            fccIOProc,
            pIOProc,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioOpenA(
    pszFileName:  LPSTR,
    pmmioinfo:  LPMMIOINFO,
    fdwOpen:  DWORD    
) ->  HMMIO
{
    unsafe {
        return mmioOpenA(
            pszFileName,
            pmmioinfo,
            fdwOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioOpenW(
    pszFileName:  LPWSTR,
    pmmioinfo:  LPMMIOINFO,
    fdwOpen:  DWORD    
) ->  HMMIO
{
    unsafe {
        return mmioOpenW(
            pszFileName,
            pmmioinfo,
            fdwOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioRenameA(
    pszFileName:  LPCSTR,
    pszNewFileName:  LPCSTR,
    pmmioinfo:  LPCMMIOINFO,
    fdwRename:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mmioRenameA(
            pszFileName,
            pszNewFileName,
            pmmioinfo,
            fdwRename
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioRenameW(
    pszFileName:  LPCWSTR,
    pszNewFileName:  LPCWSTR,
    pmmioinfo:  LPCMMIOINFO,
    fdwRename:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mmioRenameW(
            pszFileName,
            pszNewFileName,
            pmmioinfo,
            fdwRename
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioClose(
    hmmio:  HMMIO,
    fuClose:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioClose(
            hmmio,
            fuClose
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioRead(
    hmmio:  HMMIO,
    pch:  HPSTR,
    cch:  LONG    
) ->  LONG
{
    unsafe {
        return mmioRead(
            hmmio,
            pch,
            cch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioWrite(
    hmmio:  HMMIO,
    pch: *const c_char,
    cch:  LONG    
) ->  LONG
{
    unsafe {
        return mmioWrite(
            hmmio,
            pch,
            cch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioSeek(
    hmmio:  HMMIO,
    lOffset:  LONG,
    iOrigin:  c_int    
) ->  LONG
{
    unsafe {
        return mmioSeek(
            hmmio,
            lOffset,
            iOrigin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioGetInfo(
    hmmio:  HMMIO,
    pmmioinfo:  LPMMIOINFO,
    fuInfo:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioGetInfo(
            hmmio,
            pmmioinfo,
            fuInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioSetInfo(
    hmmio:  HMMIO,
    pmmioinfo:  LPCMMIOINFO,
    fuInfo:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioSetInfo(
            hmmio,
            pmmioinfo,
            fuInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioSetBuffer(
    hmmio:  HMMIO,
    pchBuffer:  LPSTR,
    cchBuffer:  LONG,
    fuBuffer:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioSetBuffer(
            hmmio,
            pchBuffer,
            cchBuffer,
            fuBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioFlush(
    hmmio:  HMMIO,
    fuFlush:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioFlush(
            hmmio,
            fuFlush
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioAdvance(
    hmmio:  HMMIO,
    pmmioinfo:  LPMMIOINFO,
    fuAdvance:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioAdvance(
            hmmio,
            pmmioinfo,
            fuAdvance
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioSendMessage(
    hmmio:  HMMIO,
    uMsg:  UINT,
    lParam1:  LPARAM,
    lParam2:  LPARAM    
) ->  LRESULT
{
    unsafe {
        return mmioSendMessage(
            hmmio,
            uMsg,
            lParam1,
            lParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioDescend(
    hmmio:  HMMIO,
    pmmcki:  LPMMCKINFO,
    pmmckiParent: *const MMCKINFO,
    fuDescend:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioDescend(
            hmmio,
            pmmcki,
            pmmckiParent,
            fuDescend
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioAscend(
    hmmio:  HMMIO,
    pmmcki:  LPMMCKINFO,
    fuAscend:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioAscend(
            hmmio,
            pmmcki,
            fuAscend
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mmioCreateChunk(
    hmmio:  HMMIO,
    pmmcki:  LPMMCKINFO,
    fuCreate:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mmioCreateChunk(
            hmmio,
            pmmcki,
            fuCreate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_timeSetEvent(
    uDelay:  UINT,
    uResolution:  UINT,
    fptc:  LPTIMECALLBACK,
    dwUser:  DWORD_PTR,
    fuEvent:  UINT    
) ->  MMRESULT
{
    unsafe {
        return timeSetEvent(
            uDelay,
            uResolution,
            fptc,
            dwUser,
            fuEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_timeKillEvent(
    uTimerID:  UINT    
) ->  MMRESULT
{
    unsafe {
        return timeKillEvent(
            uTimerID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_sndPlaySoundA(
    pszSound:  LPCSTR,
    fuSound:  UINT    
) ->  BOOL
{
    unsafe {
        return sndPlaySoundA(
            pszSound,
            fuSound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_sndPlaySoundW(
    pszSound:  LPCWSTR,
    fuSound:  UINT    
) ->  BOOL
{
    unsafe {
        return sndPlaySoundW(
            pszSound,
            fuSound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PlaySoundA(
    pszSound:  LPCSTR,
    hmod:  HMODULE,
    fdwSound:  DWORD    
) ->  BOOL
{
    unsafe {
        return PlaySoundA(
            pszSound,
            hmod,
            fdwSound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PlaySoundW(
    pszSound:  LPCWSTR,
    hmod:  HMODULE,
    fdwSound:  DWORD    
) ->  BOOL
{
    unsafe {
        return PlaySoundW(
            pszSound,
            hmod,
            fdwSound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetNumDevs(
    
) ->  UINT
{
    unsafe {
        return waveOutGetNumDevs(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetDevCapsA(
    uDeviceID:  UINT_PTR,
    pwoc:  LPWAVEOUTCAPSA,
    cbwoc:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetDevCapsA(
            uDeviceID,
            pwoc,
            cbwoc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetDevCapsW(
    uDeviceID:  UINT_PTR,
    pwoc:  LPWAVEOUTCAPSW,
    cbwoc:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetDevCapsW(
            uDeviceID,
            pwoc,
            cbwoc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetVolume(
    hwo:  HWAVEOUT,
    pdwVolume:  LPDWORD    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetVolume(
            hwo,
            pdwVolume
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutSetVolume(
    hwo:  HWAVEOUT,
    dwVolume:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return waveOutSetVolume(
            hwo,
            dwVolume
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetErrorTextA(
    mmrError:  MMRESULT,
    pszText:  LPSTR,
    cchText:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetErrorTextA(
            mmrError,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetErrorTextW(
    mmrError:  MMRESULT,
    pszText:  LPWSTR,
    cchText:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetErrorTextW(
            mmrError,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutOpen(
    phwo:  LPHWAVEOUT,
    uDeviceID:  UINT,
    pwfx:  LPCWAVEFORMATEX,
    dwCallback:  DWORD_PTR,
    dwInstance:  DWORD_PTR,
    fdwOpen:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return waveOutOpen(
            phwo,
            uDeviceID,
            pwfx,
            dwCallback,
            dwInstance,
            fdwOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutClose(
    hwo:  HWAVEOUT    
) ->  MMRESULT
{
    unsafe {
        return waveOutClose(
            hwo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutPrepareHeader(
    hwo:  HWAVEOUT,
    pwh:  LPWAVEHDR,
    cbwh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutPrepareHeader(
            hwo,
            pwh,
            cbwh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutUnprepareHeader(
    hwo:  HWAVEOUT,
    pwh:  LPWAVEHDR,
    cbwh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutUnprepareHeader(
            hwo,
            pwh,
            cbwh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutWrite(
    hwo:  HWAVEOUT,
    pwh:  LPWAVEHDR,
    cbwh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutWrite(
            hwo,
            pwh,
            cbwh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutPause(
    hwo:  HWAVEOUT    
) ->  MMRESULT
{
    unsafe {
        return waveOutPause(
            hwo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutRestart(
    hwo:  HWAVEOUT    
) ->  MMRESULT
{
    unsafe {
        return waveOutRestart(
            hwo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutReset(
    hwo:  HWAVEOUT    
) ->  MMRESULT
{
    unsafe {
        return waveOutReset(
            hwo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutBreakLoop(
    hwo:  HWAVEOUT    
) ->  MMRESULT
{
    unsafe {
        return waveOutBreakLoop(
            hwo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetPosition(
    hwo:  HWAVEOUT,
    pmmt:  LPMMTIME,
    cbmmt:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetPosition(
            hwo,
            pmmt,
            cbmmt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetPitch(
    hwo:  HWAVEOUT,
    pdwPitch:  LPDWORD    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetPitch(
            hwo,
            pdwPitch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutSetPitch(
    hwo:  HWAVEOUT,
    dwPitch:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return waveOutSetPitch(
            hwo,
            dwPitch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetPlaybackRate(
    hwo:  HWAVEOUT,
    pdwRate:  LPDWORD    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetPlaybackRate(
            hwo,
            pdwRate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutSetPlaybackRate(
    hwo:  HWAVEOUT,
    dwRate:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return waveOutSetPlaybackRate(
            hwo,
            dwRate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutGetID(
    hwo:  HWAVEOUT,
    puDeviceID:  LPUINT    
) ->  MMRESULT
{
    unsafe {
        return waveOutGetID(
            hwo,
            puDeviceID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveOutMessage(
    hwo:  HWAVEOUT,
    uMsg:  UINT,
    dw1:  DWORD_PTR,
    dw2:  DWORD_PTR    
) ->  MMRESULT
{
    unsafe {
        return waveOutMessage(
            hwo,
            uMsg,
            dw1,
            dw2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInGetNumDevs(
    
) ->  UINT
{
    unsafe {
        return waveInGetNumDevs(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInGetDevCapsA(
    uDeviceID:  UINT_PTR,
    pwic:  LPWAVEINCAPSA,
    cbwic:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveInGetDevCapsA(
            uDeviceID,
            pwic,
            cbwic
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInGetDevCapsW(
    uDeviceID:  UINT_PTR,
    pwic:  LPWAVEINCAPSW,
    cbwic:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveInGetDevCapsW(
            uDeviceID,
            pwic,
            cbwic
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInGetErrorTextA(
    mmrError:  MMRESULT,
    pszText:  LPSTR,
    cchText:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveInGetErrorTextA(
            mmrError,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInGetErrorTextW(
    mmrError:  MMRESULT,
    pszText:  LPWSTR,
    cchText:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveInGetErrorTextW(
            mmrError,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInOpen(
    phwi:  LPHWAVEIN,
    uDeviceID:  UINT,
    pwfx:  LPCWAVEFORMATEX,
    dwCallback:  DWORD_PTR,
    dwInstance:  DWORD_PTR,
    fdwOpen:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return waveInOpen(
            phwi,
            uDeviceID,
            pwfx,
            dwCallback,
            dwInstance,
            fdwOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInClose(
    hwi:  HWAVEIN    
) ->  MMRESULT
{
    unsafe {
        return waveInClose(
            hwi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInPrepareHeader(
    hwi:  HWAVEIN,
    pwh:  LPWAVEHDR,
    cbwh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveInPrepareHeader(
            hwi,
            pwh,
            cbwh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInUnprepareHeader(
    hwi:  HWAVEIN,
    pwh:  LPWAVEHDR,
    cbwh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveInUnprepareHeader(
            hwi,
            pwh,
            cbwh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInAddBuffer(
    hwi:  HWAVEIN,
    pwh:  LPWAVEHDR,
    cbwh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveInAddBuffer(
            hwi,
            pwh,
            cbwh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInStart(
    hwi:  HWAVEIN    
) ->  MMRESULT
{
    unsafe {
        return waveInStart(
            hwi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInStop(
    hwi:  HWAVEIN    
) ->  MMRESULT
{
    unsafe {
        return waveInStop(
            hwi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInReset(
    hwi:  HWAVEIN    
) ->  MMRESULT
{
    unsafe {
        return waveInReset(
            hwi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInGetPosition(
    hwi:  HWAVEIN,
    pmmt:  LPMMTIME,
    cbmmt:  UINT    
) ->  MMRESULT
{
    unsafe {
        return waveInGetPosition(
            hwi,
            pmmt,
            cbmmt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInGetID(
    hwi:  HWAVEIN,
    puDeviceID:  LPUINT    
) ->  MMRESULT
{
    unsafe {
        return waveInGetID(
            hwi,
            puDeviceID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_waveInMessage(
    hwi:  HWAVEIN,
    uMsg:  UINT,
    dw1:  DWORD_PTR,
    dw2:  DWORD_PTR    
) ->  MMRESULT
{
    unsafe {
        return waveInMessage(
            hwi,
            uMsg,
            dw1,
            dw2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutGetNumDevs(
    
) ->  UINT
{
    unsafe {
        return midiOutGetNumDevs(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiStreamOpen(
    phms:  LPHMIDISTRM,
    puDeviceID:  LPUINT,
    cMidi:  DWORD,
    dwCallback:  DWORD_PTR,
    dwInstance:  DWORD_PTR,
    fdwOpen:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return midiStreamOpen(
            phms,
            puDeviceID,
            cMidi,
            dwCallback,
            dwInstance,
            fdwOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiStreamClose(
    hms:  HMIDISTRM    
) ->  MMRESULT
{
    unsafe {
        return midiStreamClose(
            hms
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiStreamProperty(
    hms:  HMIDISTRM,
    lppropdata:  LPBYTE,
    dwProperty:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return midiStreamProperty(
            hms,
            lppropdata,
            dwProperty
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiStreamPosition(
    hms:  HMIDISTRM,
    lpmmt:  LPMMTIME,
    cbmmt:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiStreamPosition(
            hms,
            lpmmt,
            cbmmt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiStreamOut(
    hms:  HMIDISTRM,
    pmh:  LPMIDIHDR,
    cbmh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiStreamOut(
            hms,
            pmh,
            cbmh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiStreamPause(
    hms:  HMIDISTRM    
) ->  MMRESULT
{
    unsafe {
        return midiStreamPause(
            hms
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiStreamRestart(
    hms:  HMIDISTRM    
) ->  MMRESULT
{
    unsafe {
        return midiStreamRestart(
            hms
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiStreamStop(
    hms:  HMIDISTRM    
) ->  MMRESULT
{
    unsafe {
        return midiStreamStop(
            hms
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiConnect(
    hmi:  HMIDI,
    hmo:  HMIDIOUT,
    pReserved:  LPVOID    
) ->  MMRESULT
{
    unsafe {
        return midiConnect(
            hmi,
            hmo,
            pReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiDisconnect(
    hmi:  HMIDI,
    hmo:  HMIDIOUT,
    pReserved:  LPVOID    
) ->  MMRESULT
{
    unsafe {
        return midiDisconnect(
            hmi,
            hmo,
            pReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutGetDevCapsA(
    uDeviceID:  UINT_PTR,
    pmoc:  LPMIDIOUTCAPSA,
    cbmoc:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutGetDevCapsA(
            uDeviceID,
            pmoc,
            cbmoc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutGetDevCapsW(
    uDeviceID:  UINT_PTR,
    pmoc:  LPMIDIOUTCAPSW,
    cbmoc:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutGetDevCapsW(
            uDeviceID,
            pmoc,
            cbmoc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutGetVolume(
    hmo:  HMIDIOUT,
    pdwVolume:  LPDWORD    
) ->  MMRESULT
{
    unsafe {
        return midiOutGetVolume(
            hmo,
            pdwVolume
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutSetVolume(
    hmo:  HMIDIOUT,
    dwVolume:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return midiOutSetVolume(
            hmo,
            dwVolume
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutGetErrorTextA(
    mmrError:  MMRESULT,
    pszText:  LPSTR,
    cchText:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutGetErrorTextA(
            mmrError,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutGetErrorTextW(
    mmrError:  MMRESULT,
    pszText:  LPWSTR,
    cchText:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutGetErrorTextW(
            mmrError,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutOpen(
    phmo:  LPHMIDIOUT,
    uDeviceID:  UINT,
    dwCallback:  DWORD_PTR,
    dwInstance:  DWORD_PTR,
    fdwOpen:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return midiOutOpen(
            phmo,
            uDeviceID,
            dwCallback,
            dwInstance,
            fdwOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutClose(
    hmo:  HMIDIOUT    
) ->  MMRESULT
{
    unsafe {
        return midiOutClose(
            hmo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutPrepareHeader(
    hmo:  HMIDIOUT,
    pmh:  LPMIDIHDR,
    cbmh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutPrepareHeader(
            hmo,
            pmh,
            cbmh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutUnprepareHeader(
    hmo:  HMIDIOUT,
    pmh:  LPMIDIHDR,
    cbmh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutUnprepareHeader(
            hmo,
            pmh,
            cbmh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutShortMsg(
    hmo:  HMIDIOUT,
    dwMsg:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return midiOutShortMsg(
            hmo,
            dwMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutLongMsg(
    hmo:  HMIDIOUT,
    pmh:  LPMIDIHDR,
    cbmh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutLongMsg(
            hmo,
            pmh,
            cbmh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutReset(
    hmo:  HMIDIOUT    
) ->  MMRESULT
{
    unsafe {
        return midiOutReset(
            hmo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutCachePatches(
    hmo:  HMIDIOUT,
    uBank:  UINT,
    pwpa:  LPWORD,
    fuCache:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutCachePatches(
            hmo,
            uBank,
            pwpa,
            fuCache
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutCacheDrumPatches(
    hmo:  HMIDIOUT,
    uPatch:  UINT,
    pwkya:  LPWORD,
    fuCache:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutCacheDrumPatches(
            hmo,
            uPatch,
            pwkya,
            fuCache
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutGetID(
    hmo:  HMIDIOUT,
    puDeviceID:  LPUINT    
) ->  MMRESULT
{
    unsafe {
        return midiOutGetID(
            hmo,
            puDeviceID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiOutMessage(
    hmo:  HMIDIOUT,
    uMsg:  UINT,
    dw1:  DWORD_PTR,
    dw2:  DWORD_PTR    
) ->  MMRESULT
{
    unsafe {
        return midiOutMessage(
            hmo,
            uMsg,
            dw1,
            dw2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInGetNumDevs(
    
) ->  UINT
{
    unsafe {
        return midiInGetNumDevs(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInGetDevCapsA(
    uDeviceID:  UINT_PTR,
    pmic:  LPMIDIINCAPSA,
    cbmic:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiInGetDevCapsA(
            uDeviceID,
            pmic,
            cbmic
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInGetDevCapsW(
    uDeviceID:  UINT_PTR,
    pmic:  LPMIDIINCAPSW,
    cbmic:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiInGetDevCapsW(
            uDeviceID,
            pmic,
            cbmic
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInGetErrorTextA(
    mmrError:  MMRESULT,
    pszText:  LPSTR,
    cchText:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiInGetErrorTextA(
            mmrError,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInGetErrorTextW(
    mmrError:  MMRESULT,
    pszText:  LPWSTR,
    cchText:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiInGetErrorTextW(
            mmrError,
            pszText,
            cchText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInOpen(
    phmi:  LPHMIDIIN,
    uDeviceID:  UINT,
    dwCallback:  DWORD_PTR,
    dwInstance:  DWORD_PTR,
    fdwOpen:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return midiInOpen(
            phmi,
            uDeviceID,
            dwCallback,
            dwInstance,
            fdwOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInClose(
    hmi:  HMIDIIN    
) ->  MMRESULT
{
    unsafe {
        return midiInClose(
            hmi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInPrepareHeader(
    hmi:  HMIDIIN,
    pmh:  LPMIDIHDR,
    cbmh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiInPrepareHeader(
            hmi,
            pmh,
            cbmh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInUnprepareHeader(
    hmi:  HMIDIIN,
    pmh:  LPMIDIHDR,
    cbmh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiInUnprepareHeader(
            hmi,
            pmh,
            cbmh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInAddBuffer(
    hmi:  HMIDIIN,
    pmh:  LPMIDIHDR,
    cbmh:  UINT    
) ->  MMRESULT
{
    unsafe {
        return midiInAddBuffer(
            hmi,
            pmh,
            cbmh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInStart(
    hmi:  HMIDIIN    
) ->  MMRESULT
{
    unsafe {
        return midiInStart(
            hmi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInStop(
    hmi:  HMIDIIN    
) ->  MMRESULT
{
    unsafe {
        return midiInStop(
            hmi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInReset(
    hmi:  HMIDIIN    
) ->  MMRESULT
{
    unsafe {
        return midiInReset(
            hmi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInGetID(
    hmi:  HMIDIIN,
    puDeviceID:  LPUINT    
) ->  MMRESULT
{
    unsafe {
        return midiInGetID(
            hmi,
            puDeviceID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_midiInMessage(
    hmi:  HMIDIIN,
    uMsg:  UINT,
    dw1:  DWORD_PTR,
    dw2:  DWORD_PTR    
) ->  MMRESULT
{
    unsafe {
        return midiInMessage(
            hmi,
            uMsg,
            dw1,
            dw2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_auxGetNumDevs(
    
) ->  UINT
{
    unsafe {
        return auxGetNumDevs(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_auxGetDevCapsA(
    uDeviceID:  UINT_PTR,
    pac:  LPAUXCAPSA,
    cbac:  UINT    
) ->  MMRESULT
{
    unsafe {
        return auxGetDevCapsA(
            uDeviceID,
            pac,
            cbac
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_auxGetDevCapsW(
    uDeviceID:  UINT_PTR,
    pac:  LPAUXCAPSW,
    cbac:  UINT    
) ->  MMRESULT
{
    unsafe {
        return auxGetDevCapsW(
            uDeviceID,
            pac,
            cbac
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_auxSetVolume(
    uDeviceID:  UINT,
    dwVolume:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return auxSetVolume(
            uDeviceID,
            dwVolume
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_auxGetVolume(
    uDeviceID:  UINT,
    pdwVolume:  LPDWORD    
) ->  MMRESULT
{
    unsafe {
        return auxGetVolume(
            uDeviceID,
            pdwVolume
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_auxOutMessage(
    uDeviceID:  UINT,
    uMsg:  UINT,
    dw1:  DWORD_PTR,
    dw2:  DWORD_PTR    
) ->  MMRESULT
{
    unsafe {
        return auxOutMessage(
            uDeviceID,
            uMsg,
            dw1,
            dw2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetNumDevs(
    
) ->  UINT
{
    unsafe {
        return mixerGetNumDevs(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetDevCapsA(
    uMxId:  UINT_PTR,
    pmxcaps:  LPMIXERCAPSA,
    cbmxcaps:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mixerGetDevCapsA(
            uMxId,
            pmxcaps,
            cbmxcaps
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetDevCapsW(
    uMxId:  UINT_PTR,
    pmxcaps:  LPMIXERCAPSW,
    cbmxcaps:  UINT    
) ->  MMRESULT
{
    unsafe {
        return mixerGetDevCapsW(
            uMxId,
            pmxcaps,
            cbmxcaps
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerOpen(
    phmx:  LPHMIXER,
    uMxId:  UINT,
    dwCallback:  DWORD_PTR,
    dwInstance:  DWORD_PTR,
    fdwOpen:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerOpen(
            phmx,
            uMxId,
            dwCallback,
            dwInstance,
            fdwOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerClose(
    hmx:  HMIXER    
) ->  MMRESULT
{
    unsafe {
        return mixerClose(
            hmx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerMessage(
    hmx:  HMIXER,
    uMsg:  UINT,
    dwParam1:  DWORD_PTR,
    dwParam2:  DWORD_PTR    
) ->  DWORD
{
    unsafe {
        return mixerMessage(
            hmx,
            uMsg,
            dwParam1,
            dwParam2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetLineInfoA(
    hmxobj:  HMIXEROBJ,
    pmxl:  LPMIXERLINEA,
    fdwInfo:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerGetLineInfoA(
            hmxobj,
            pmxl,
            fdwInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetLineInfoW(
    hmxobj:  HMIXEROBJ,
    pmxl:  LPMIXERLINEW,
    fdwInfo:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerGetLineInfoW(
            hmxobj,
            pmxl,
            fdwInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetID(
    hmxobj:  HMIXEROBJ,
    puMxId: *mut UINT,
    fdwId:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerGetID(
            hmxobj,
            puMxId,
            fdwId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetLineControlsA(
    hmxobj:  HMIXEROBJ,
    pmxlc:  LPMIXERLINECONTROLSA,
    fdwControls:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerGetLineControlsA(
            hmxobj,
            pmxlc,
            fdwControls
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetLineControlsW(
    hmxobj:  HMIXEROBJ,
    pmxlc:  LPMIXERLINECONTROLSW,
    fdwControls:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerGetLineControlsW(
            hmxobj,
            pmxlc,
            fdwControls
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetControlDetailsA(
    hmxobj:  HMIXEROBJ,
    pmxcd:  LPMIXERCONTROLDETAILS,
    fdwDetails:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerGetControlDetailsA(
            hmxobj,
            pmxcd,
            fdwDetails
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerGetControlDetailsW(
    hmxobj:  HMIXEROBJ,
    pmxcd:  LPMIXERCONTROLDETAILS,
    fdwDetails:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerGetControlDetailsW(
            hmxobj,
            pmxcd,
            fdwDetails
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mixerSetControlDetails(
    hmxobj:  HMIXEROBJ,
    pmxcd:  LPMIXERCONTROLDETAILS,
    fdwDetails:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return mixerSetControlDetails(
            hmxobj,
            pmxcd,
            fdwDetails
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_timeGetSystemTime(
    pmmt:  LPMMTIME,
    cbmmt:  UINT    
) ->  MMRESULT
{
    unsafe {
        return timeGetSystemTime(
            pmmt,
            cbmmt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_timeGetTime(
    
) ->  DWORD
{
    unsafe {
        return timeGetTime(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_timeGetDevCaps(
    ptc:  LPTIMECAPS,
    cbtc:  UINT    
) ->  MMRESULT
{
    unsafe {
        return timeGetDevCaps(
            ptc,
            cbtc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_timeBeginPeriod(
    uPeriod:  UINT    
) ->  MMRESULT
{
    unsafe {
        return timeBeginPeriod(
            uPeriod
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_timeEndPeriod(
    uPeriod:  UINT    
) ->  MMRESULT
{
    unsafe {
        return timeEndPeriod(
            uPeriod
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joyGetPosEx(
    uJoyID:  UINT,
    pji:  LPJOYINFOEX    
) ->  MMRESULT
{
    unsafe {
        return joyGetPosEx(
            uJoyID,
            pji
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joyGetNumDevs(
    
) ->  UINT
{
    unsafe {
        return joyGetNumDevs(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joyGetDevCapsA(
    uJoyID:  UINT_PTR,
    pjc:  LPJOYCAPSA,
    cbjc:  UINT    
) ->  MMRESULT
{
    unsafe {
        return joyGetDevCapsA(
            uJoyID,
            pjc,
            cbjc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joyGetDevCapsW(
    uJoyID:  UINT_PTR,
    pjc:  LPJOYCAPSW,
    cbjc:  UINT    
) ->  MMRESULT
{
    unsafe {
        return joyGetDevCapsW(
            uJoyID,
            pjc,
            cbjc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joyGetPos(
    uJoyID:  UINT,
    pji:  LPJOYINFO    
) ->  MMRESULT
{
    unsafe {
        return joyGetPos(
            uJoyID,
            pji
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joyGetThreshold(
    uJoyID:  UINT,
    puThreshold:  LPUINT    
) ->  MMRESULT
{
    unsafe {
        return joyGetThreshold(
            uJoyID,
            puThreshold
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joyReleaseCapture(
    uJoyID:  UINT    
) ->  MMRESULT
{
    unsafe {
        return joyReleaseCapture(
            uJoyID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joySetCapture(
    hwnd:  HWND,
    uJoyID:  UINT,
    uPeriod:  UINT,
    fChanged:  BOOL    
) ->  MMRESULT
{
    unsafe {
        return joySetCapture(
            hwnd,
            uJoyID,
            uPeriod,
            fChanged
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joySetThreshold(
    uJoyID:  UINT,
    uThreshold:  UINT    
) ->  MMRESULT
{
    unsafe {
        return joySetThreshold(
            uJoyID,
            uThreshold
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_joyConfigChanged(
    dwFlags:  DWORD    
) ->  MMRESULT
{
    unsafe {
        return joyConfigChanged(
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Netbios(
    pncb:  PNCB    
) ->  UCHAR
{
    unsafe {
        return Netbios(
            pncb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingCopy(
    SourceBinding:  RPC_BINDING_HANDLE,
    DestinationBinding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingCopy(
            SourceBinding,
            DestinationBinding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingFree(
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingFree(
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingSetOption(
    hBinding:  RPC_BINDING_HANDLE,
    option:  c_ulong,
    optionValue:  ULONG_PTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingSetOption(
            hBinding,
            option,
            optionValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqOption(
    hBinding:  RPC_BINDING_HANDLE,
    option:  c_ulong,
    pOptionValue: *mut ULONG_PTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqOption(
            hBinding,
            option,
            pOptionValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingFromStringBindingA(
    StringBinding:  RPC_CSTR,
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingFromStringBindingA(
            StringBinding,
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingFromStringBindingW(
    StringBinding:  RPC_WSTR,
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingFromStringBindingW(
            StringBinding,
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsGetContextBinding(
    ContextHandle: *mut c_void,
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSsGetContextBinding(
            ContextHandle,
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqObject(
    Binding:  RPC_BINDING_HANDLE,
    ObjectUuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqObject(
            Binding,
            ObjectUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingReset(
    Binding:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingReset(
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingSetObject(
    Binding:  RPC_BINDING_HANDLE,
    ObjectUuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingSetObject(
            Binding,
            ObjectUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtInqDefaultProtectLevel(
    AuthnSvc:  c_ulong,
    AuthnLevel: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtInqDefaultProtectLevel(
            AuthnSvc,
            AuthnLevel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingToStringBindingA(
    Binding:  RPC_BINDING_HANDLE,
    StringBinding: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingToStringBindingA(
            Binding,
            StringBinding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingToStringBindingW(
    Binding:  RPC_BINDING_HANDLE,
    StringBinding: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingToStringBindingW(
            Binding,
            StringBinding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingVectorFree(
    BindingVector: *mut *mut RPC_BINDING_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingVectorFree(
            BindingVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcStringBindingComposeA(
    ObjUuid:  RPC_CSTR,
    ProtSeq:  RPC_CSTR,
    NetworkAddr:  RPC_CSTR,
    Endpoint:  RPC_CSTR,
    Options:  RPC_CSTR,
    StringBinding: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcStringBindingComposeA(
            ObjUuid,
            ProtSeq,
            NetworkAddr,
            Endpoint,
            Options,
            StringBinding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcStringBindingComposeW(
    ObjUuid:  RPC_WSTR,
    ProtSeq:  RPC_WSTR,
    NetworkAddr:  RPC_WSTR,
    Endpoint:  RPC_WSTR,
    Options:  RPC_WSTR,
    StringBinding: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcStringBindingComposeW(
            ObjUuid,
            ProtSeq,
            NetworkAddr,
            Endpoint,
            Options,
            StringBinding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcStringBindingParseA(
    StringBinding:  RPC_CSTR,
    ObjUuid: *mut RPC_CSTR,
    Protseq: *mut RPC_CSTR,
    NetworkAddr: *mut RPC_CSTR,
    Endpoint: *mut RPC_CSTR,
    NetworkOptions: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcStringBindingParseA(
            StringBinding,
            ObjUuid,
            Protseq,
            NetworkAddr,
            Endpoint,
            NetworkOptions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcStringBindingParseW(
    StringBinding:  RPC_WSTR,
    ObjUuid: *mut RPC_WSTR,
    Protseq: *mut RPC_WSTR,
    NetworkAddr: *mut RPC_WSTR,
    Endpoint: *mut RPC_WSTR,
    NetworkOptions: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcStringBindingParseW(
            StringBinding,
            ObjUuid,
            Protseq,
            NetworkAddr,
            Endpoint,
            NetworkOptions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcStringFreeA(
    String: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcStringFreeA(
            String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcStringFreeW(
    String: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcStringFreeW(
            String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcIfInqId(
    RpcIfHandle:  RPC_IF_HANDLE,
    RpcIfId: *mut RPC_IF_ID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcIfInqId(
            RpcIfHandle,
            RpcIfId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNetworkIsProtseqValidA(
    Protseq:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNetworkIsProtseqValidA(
            Protseq
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNetworkIsProtseqValidW(
    Protseq:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNetworkIsProtseqValidW(
            Protseq
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtInqComTimeout(
    Binding:  RPC_BINDING_HANDLE,
    Timeout: *mut c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtInqComTimeout(
            Binding,
            Timeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtSetComTimeout(
    Binding:  RPC_BINDING_HANDLE,
    Timeout:  c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtSetComTimeout(
            Binding,
            Timeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtSetCancelTimeout(
    Timeout:  c_long    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtSetCancelTimeout(
            Timeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNetworkInqProtseqsA(
    ProtseqVector: *mut *mut RPC_PROTSEQ_VECTORA    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNetworkInqProtseqsA(
            ProtseqVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNetworkInqProtseqsW(
    ProtseqVector: *mut *mut RPC_PROTSEQ_VECTORW    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNetworkInqProtseqsW(
            ProtseqVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcObjectInqType(
    ObjUuid: *mut UUID,
    TypeUuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcObjectInqType(
            ObjUuid,
            TypeUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcObjectSetInqFn(
    InquiryFn:  Option    
) ->  RPC_STATUS
{
    unsafe {
        return RpcObjectSetInqFn(
            InquiryFn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcObjectSetType(
    ObjUuid: *mut UUID,
    TypeUuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcObjectSetType(
            ObjUuid,
            TypeUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcProtseqVectorFreeA(
    ProtseqVector: *mut *mut RPC_PROTSEQ_VECTORA    
) ->  RPC_STATUS
{
    unsafe {
        return RpcProtseqVectorFreeA(
            ProtseqVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcProtseqVectorFreeW(
    ProtseqVector: *mut *mut RPC_PROTSEQ_VECTORW    
) ->  RPC_STATUS
{
    unsafe {
        return RpcProtseqVectorFreeW(
            ProtseqVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInqBindings(
    BindingVector: *mut *mut RPC_BINDING_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInqBindings(
            BindingVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInqBindingsEx(
    SecurityDescriptor: *mut c_void,
    BindingVector: *mut *mut RPC_BINDING_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInqBindingsEx(
            SecurityDescriptor,
            BindingVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInqIf(
    IfSpec:  RPC_IF_HANDLE,
    MgrTypeUuid: *mut UUID,
    MgrEpv: *mut *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInqIf(
            IfSpec,
            MgrTypeUuid,
            MgrEpv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerListen(
    MinimumCallThreads:  c_uint,
    MaxCalls:  c_uint,
    DontWait:  c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerListen(
            MinimumCallThreads,
            MaxCalls,
            DontWait
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerRegisterIf(
    IfSpec:  RPC_IF_HANDLE,
    MgrTypeUuid: *mut UUID,
    MgrEpv: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerRegisterIf(
            IfSpec,
            MgrTypeUuid,
            MgrEpv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerRegisterIfEx(
    IfSpec:  RPC_IF_HANDLE,
    MgrTypeUuid: *mut UUID,
    MgrEpv: *mut c_void,
    Flags:  c_uint,
    MaxCalls:  c_uint,
    IfCallback:  Option    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerRegisterIfEx(
            IfSpec,
            MgrTypeUuid,
            MgrEpv,
            Flags,
            MaxCalls,
            IfCallback
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerRegisterIf2(
    IfSpec:  RPC_IF_HANDLE,
    MgrTypeUuid: *mut UUID,
    MgrEpv: *mut c_void,
    Flags:  c_uint,
    MaxCalls:  c_uint,
    MaxRpcSize:  c_uint,
    IfCallbackFn:  Option    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerRegisterIf2(
            IfSpec,
            MgrTypeUuid,
            MgrEpv,
            Flags,
            MaxCalls,
            MaxRpcSize,
            IfCallbackFn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerRegisterIf3(
    IfSpec:  RPC_IF_HANDLE,
    MgrTypeUuid: *mut UUID,
    MgrEpv: *mut c_void,
    Flags:  c_uint,
    MaxCalls:  c_uint,
    MaxRpcSize:  c_uint,
    IfCallback:  Option,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerRegisterIf3(
            IfSpec,
            MgrTypeUuid,
            MgrEpv,
            Flags,
            MaxCalls,
            MaxRpcSize,
            IfCallback,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUnregisterIf(
    IfSpec:  RPC_IF_HANDLE,
    MgrTypeUuid: *mut UUID,
    WaitForCallsToComplete:  c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUnregisterIf(
            IfSpec,
            MgrTypeUuid,
            WaitForCallsToComplete
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUnregisterIfEx(
    IfSpec:  RPC_IF_HANDLE,
    MgrTypeUuid: *mut UUID,
    RundownContextHandles:  c_int    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUnregisterIfEx(
            IfSpec,
            MgrTypeUuid,
            RundownContextHandles
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseAllProtseqs(
    MaxCalls:  c_uint,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseAllProtseqs(
            MaxCalls,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseAllProtseqsEx(
    MaxCalls:  c_uint,
    SecurityDescriptor: *mut c_void,
    Policy:  PRPC_POLICY    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseAllProtseqsEx(
            MaxCalls,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseAllProtseqsIf(
    MaxCalls:  c_uint,
    IfSpec:  RPC_IF_HANDLE,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseAllProtseqsIf(
            MaxCalls,
            IfSpec,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseAllProtseqsIfEx(
    MaxCalls:  c_uint,
    IfSpec:  RPC_IF_HANDLE,
    SecurityDescriptor: *mut c_void,
    Policy:  PRPC_POLICY    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseAllProtseqsIfEx(
            MaxCalls,
            IfSpec,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqA(
    Protseq:  RPC_CSTR,
    MaxCalls:  c_uint,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqA(
            Protseq,
            MaxCalls,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqExA(
    Protseq:  RPC_CSTR,
    MaxCalls:  c_uint,
    SecurityDescriptor: *mut c_void,
    Policy:  PRPC_POLICY    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqExA(
            Protseq,
            MaxCalls,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqW(
    Protseq:  RPC_WSTR,
    MaxCalls:  c_uint,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqW(
            Protseq,
            MaxCalls,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqExW(
    Protseq:  RPC_WSTR,
    MaxCalls:  c_uint,
    SecurityDescriptor: *mut c_void,
    Policy:  PRPC_POLICY    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqExW(
            Protseq,
            MaxCalls,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqEpA(
    Protseq:  RPC_CSTR,
    MaxCalls:  c_uint,
    Endpoint:  RPC_CSTR,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqEpA(
            Protseq,
            MaxCalls,
            Endpoint,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqEpExA(
    Protseq:  RPC_CSTR,
    MaxCalls:  c_uint,
    Endpoint:  RPC_CSTR,
    SecurityDescriptor: *mut c_void,
    Policy:  PRPC_POLICY    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqEpExA(
            Protseq,
            MaxCalls,
            Endpoint,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqEpW(
    Protseq:  RPC_WSTR,
    MaxCalls:  c_uint,
    Endpoint:  RPC_WSTR,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqEpW(
            Protseq,
            MaxCalls,
            Endpoint,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqEpExW(
    Protseq:  RPC_WSTR,
    MaxCalls:  c_uint,
    Endpoint:  RPC_WSTR,
    SecurityDescriptor: *mut c_void,
    Policy:  PRPC_POLICY    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqEpExW(
            Protseq,
            MaxCalls,
            Endpoint,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqIfA(
    Protseq:  RPC_CSTR,
    MaxCalls:  c_uint,
    IfSpec:  RPC_IF_HANDLE,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqIfA(
            Protseq,
            MaxCalls,
            IfSpec,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqIfExA(
    Protseq:  RPC_CSTR,
    MaxCalls:  c_uint,
    IfSpec:  RPC_IF_HANDLE,
    SecurityDescriptor: *mut c_void,
    Policy:  PRPC_POLICY    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqIfExA(
            Protseq,
            MaxCalls,
            IfSpec,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqIfW(
    Protseq:  RPC_WSTR,
    MaxCalls:  c_uint,
    IfSpec:  RPC_IF_HANDLE,
    SecurityDescriptor: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqIfW(
            Protseq,
            MaxCalls,
            IfSpec,
            SecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUseProtseqIfExW(
    Protseq:  RPC_WSTR,
    MaxCalls:  c_uint,
    IfSpec:  RPC_IF_HANDLE,
    SecurityDescriptor: *mut c_void,
    Policy:  PRPC_POLICY    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUseProtseqIfExW(
            Protseq,
            MaxCalls,
            IfSpec,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerYield(
    
)
{
    unsafe {
        return RpcServerYield(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtStatsVectorFree(
    StatsVector: *mut *mut RPC_STATS_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtStatsVectorFree(
            StatsVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtInqStats(
    Binding:  RPC_BINDING_HANDLE,
    Statistics: *mut *mut RPC_STATS_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtInqStats(
            Binding,
            Statistics
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtIsServerListening(
    Binding:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtIsServerListening(
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtStopServerListening(
    Binding:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtStopServerListening(
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtWaitServerListen(
    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtWaitServerListen(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtSetServerStackSize(
    ThreadStackSize:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtSetServerStackSize(
            ThreadStackSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsDontSerializeContext(
    
)
{
    unsafe {
        return RpcSsDontSerializeContext(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtEnableIdleCleanup(
    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtEnableIdleCleanup(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtInqIfIds(
    Binding:  RPC_BINDING_HANDLE,
    IfIdVector: *mut *mut RPC_IF_ID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtInqIfIds(
            Binding,
            IfIdVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcIfIdVectorFree(
    IfIdVector: *mut *mut RPC_IF_ID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcIfIdVectorFree(
            IfIdVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtInqServerPrincNameA(
    Binding:  RPC_BINDING_HANDLE,
    AuthnSvc:  c_ulong,
    ServerPrincName: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtInqServerPrincNameA(
            Binding,
            AuthnSvc,
            ServerPrincName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtInqServerPrincNameW(
    Binding:  RPC_BINDING_HANDLE,
    AuthnSvc:  c_ulong,
    ServerPrincName: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtInqServerPrincNameW(
            Binding,
            AuthnSvc,
            ServerPrincName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInqDefaultPrincNameA(
    AuthnSvc:  c_ulong,
    PrincName: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInqDefaultPrincNameA(
            AuthnSvc,
            PrincName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInqDefaultPrincNameW(
    AuthnSvc:  c_ulong,
    PrincName: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInqDefaultPrincNameW(
            AuthnSvc,
            PrincName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcEpResolveBinding(
    Binding:  RPC_BINDING_HANDLE,
    IfSpec:  RPC_IF_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcEpResolveBinding(
            Binding,
            IfSpec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingInqEntryNameA(
    Binding:  RPC_BINDING_HANDLE,
    EntryNameSyntax:  c_ulong,
    EntryName: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingInqEntryNameA(
            Binding,
            EntryNameSyntax,
            EntryName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingInqEntryNameW(
    Binding:  RPC_BINDING_HANDLE,
    EntryNameSyntax:  c_ulong,
    EntryName: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingInqEntryNameW(
            Binding,
            EntryNameSyntax,
            EntryName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingCreateA(
    Template: *mut RPC_BINDING_HANDLE_TEMPLATE_V1_A,
    Security: *mut RPC_BINDING_HANDLE_SECURITY_V1_A,
    Options: *mut RPC_BINDING_HANDLE_OPTIONS_V1,
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingCreateA(
            Template,
            Security,
            Options,
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingCreateW(
    Template: *mut RPC_BINDING_HANDLE_TEMPLATE_V1_W,
    Security: *mut RPC_BINDING_HANDLE_SECURITY_V1_W,
    Options: *mut RPC_BINDING_HANDLE_OPTIONS_V1,
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingCreateW(
            Template,
            Security,
            Options,
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingGetTrainingContextHandle(
    Binding:  RPC_BINDING_HANDLE,
    ContextHandle: *mut *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingGetTrainingContextHandle(
            Binding,
            ContextHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInqBindingHandle(
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInqBindingHandle(
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcImpersonateClient(
    BindingHandle:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcImpersonateClient(
            BindingHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcImpersonateClient2(
    BindingHandle:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcImpersonateClient2(
            BindingHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcRevertToSelfEx(
    BindingHandle:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcRevertToSelfEx(
            BindingHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcRevertToSelf(
    
) ->  RPC_STATUS
{
    unsafe {
        return RpcRevertToSelf(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcImpersonateClientContainer(
    BindingHandle:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcImpersonateClientContainer(
            BindingHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcRevertContainerImpersonation(
    
) ->  RPC_STATUS
{
    unsafe {
        return RpcRevertContainerImpersonation(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqAuthClientA(
    ClientBinding:  RPC_BINDING_HANDLE,
    Privs: *mut RPC_AUTHZ_HANDLE,
    ServerPrincName: *mut RPC_CSTR,
    AuthnLevel: *mut c_ulong,
    AuthnSvc: *mut c_ulong,
    AuthzSvc: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqAuthClientA(
            ClientBinding,
            Privs,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthzSvc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqAuthClientW(
    ClientBinding:  RPC_BINDING_HANDLE,
    Privs: *mut RPC_AUTHZ_HANDLE,
    ServerPrincName: *mut RPC_WSTR,
    AuthnLevel: *mut c_ulong,
    AuthnSvc: *mut c_ulong,
    AuthzSvc: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqAuthClientW(
            ClientBinding,
            Privs,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthzSvc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqAuthClientExA(
    ClientBinding:  RPC_BINDING_HANDLE,
    Privs: *mut RPC_AUTHZ_HANDLE,
    ServerPrincName: *mut RPC_CSTR,
    AuthnLevel: *mut c_ulong,
    AuthnSvc: *mut c_ulong,
    AuthzSvc: *mut c_ulong,
    Flags:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqAuthClientExA(
            ClientBinding,
            Privs,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthzSvc,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqAuthClientExW(
    ClientBinding:  RPC_BINDING_HANDLE,
    Privs: *mut RPC_AUTHZ_HANDLE,
    ServerPrincName: *mut RPC_WSTR,
    AuthnLevel: *mut c_ulong,
    AuthnSvc: *mut c_ulong,
    AuthzSvc: *mut c_ulong,
    Flags:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqAuthClientExW(
            ClientBinding,
            Privs,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthzSvc,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqAuthInfoA(
    Binding:  RPC_BINDING_HANDLE,
    ServerPrincName: *mut RPC_CSTR,
    AuthnLevel: *mut c_ulong,
    AuthnSvc: *mut c_ulong,
    AuthIdentity: *mut RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqAuthInfoA(
            Binding,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthIdentity,
            AuthzSvc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqAuthInfoW(
    Binding:  RPC_BINDING_HANDLE,
    ServerPrincName: *mut RPC_WSTR,
    AuthnLevel: *mut c_ulong,
    AuthnSvc: *mut c_ulong,
    AuthIdentity: *mut RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqAuthInfoW(
            Binding,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthIdentity,
            AuthzSvc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingSetAuthInfoA(
    Binding:  RPC_BINDING_HANDLE,
    ServerPrincName:  RPC_CSTR,
    AuthnLevel:  c_ulong,
    AuthnSvc:  c_ulong,
    AuthIdentity:  RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingSetAuthInfoA(
            Binding,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthIdentity,
            AuthzSvc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingSetAuthInfoExA(
    Binding:  RPC_BINDING_HANDLE,
    ServerPrincName:  RPC_CSTR,
    AuthnLevel:  c_ulong,
    AuthnSvc:  c_ulong,
    AuthIdentity:  RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc:  c_ulong,
    SecurityQos: *mut RPC_SECURITY_QOS    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingSetAuthInfoExA(
            Binding,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthIdentity,
            AuthzSvc,
            SecurityQos
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingSetAuthInfoW(
    Binding:  RPC_BINDING_HANDLE,
    ServerPrincName:  RPC_WSTR,
    AuthnLevel:  c_ulong,
    AuthnSvc:  c_ulong,
    AuthIdentity:  RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingSetAuthInfoW(
            Binding,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthIdentity,
            AuthzSvc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingSetAuthInfoExW(
    Binding:  RPC_BINDING_HANDLE,
    ServerPrincName:  RPC_WSTR,
    AuthnLevel:  c_ulong,
    AuthnSvc:  c_ulong,
    AuthIdentity:  RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc:  c_ulong,
    SecurityQOS: *mut RPC_SECURITY_QOS    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingSetAuthInfoExW(
            Binding,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthIdentity,
            AuthzSvc,
            SecurityQOS
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqAuthInfoExA(
    Binding:  RPC_BINDING_HANDLE,
    ServerPrincName: *mut RPC_CSTR,
    AuthnLevel: *mut c_ulong,
    AuthnSvc: *mut c_ulong,
    AuthIdentity: *mut RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc: *mut c_ulong,
    RpcQosVersion:  c_ulong,
    SecurityQOS: *mut RPC_SECURITY_QOS    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqAuthInfoExA(
            Binding,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthIdentity,
            AuthzSvc,
            RpcQosVersion,
            SecurityQOS
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingInqAuthInfoExW(
    Binding:  RPC_BINDING_HANDLE,
    ServerPrincName: *mut RPC_WSTR,
    AuthnLevel: *mut c_ulong,
    AuthnSvc: *mut c_ulong,
    AuthIdentity: *mut RPC_AUTH_IDENTITY_HANDLE,
    AuthzSvc: *mut c_ulong,
    RpcQosVersion:  c_ulong,
    SecurityQOS: *mut RPC_SECURITY_QOS    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingInqAuthInfoExW(
            Binding,
            ServerPrincName,
            AuthnLevel,
            AuthnSvc,
            AuthIdentity,
            AuthzSvc,
            RpcQosVersion,
            SecurityQOS
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerCompleteSecurityCallback(
    BindingHandle:  RPC_BINDING_HANDLE,
    Status:  RPC_STATUS    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerCompleteSecurityCallback(
            BindingHandle,
            Status
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerRegisterAuthInfoA(
    ServerPrincName:  RPC_CSTR,
    AuthnSvc:  c_ulong,
    GetKeyFn:  RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerRegisterAuthInfoA(
            ServerPrincName,
            AuthnSvc,
            GetKeyFn,
            Arg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerRegisterAuthInfoW(
    ServerPrincName:  RPC_WSTR,
    AuthnSvc:  c_ulong,
    GetKeyFn:  RPC_AUTH_KEY_RETRIEVAL_FN,
    Arg: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerRegisterAuthInfoW(
            ServerPrincName,
            AuthnSvc,
            GetKeyFn,
            Arg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingServerFromClient(
    ClientBinding:  RPC_BINDING_HANDLE,
    ServerBinding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingServerFromClient(
            ClientBinding,
            ServerBinding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcTestCancel(
    
) ->  RPC_STATUS
{
    unsafe {
        return RpcTestCancel(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerTestCancel(
    BindingHandle:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerTestCancel(
            BindingHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcCancelThread(
    Thread: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcCancelThread(
            Thread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcCancelThreadEx(
    Thread: *mut c_void,
    Timeout:  c_long    
) ->  RPC_STATUS
{
    unsafe {
        return RpcCancelThreadEx(
            Thread,
            Timeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidCreate(
    Uuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return UuidCreate(
            Uuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidCreateSequential(
    Uuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return UuidCreateSequential(
            Uuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidToStringA(
    Uuid: *const UUID,
    StringUuid: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return UuidToStringA(
            Uuid,
            StringUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidFromStringA(
    StringUuid:  RPC_CSTR,
    Uuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return UuidFromStringA(
            StringUuid,
            Uuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidToStringW(
    Uuid: *const UUID,
    StringUuid: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return UuidToStringW(
            Uuid,
            StringUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidFromStringW(
    StringUuid:  RPC_WSTR,
    Uuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return UuidFromStringW(
            StringUuid,
            Uuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidCompare(
    Uuid1: *mut UUID,
    Uuid2: *mut UUID,
    Status: *mut RPC_STATUS    
) ->  c_int
{
    unsafe {
        return UuidCompare(
            Uuid1,
            Uuid2,
            Status
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidCreateNil(
    NilUuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return UuidCreateNil(
            NilUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidEqual(
    Uuid1: *mut UUID,
    Uuid2: *mut UUID,
    Status: *mut RPC_STATUS    
) ->  c_int
{
    unsafe {
        return UuidEqual(
            Uuid1,
            Uuid2,
            Status
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidHash(
    Uuid: *mut UUID,
    Status: *mut RPC_STATUS    
) ->  c_ushort
{
    unsafe {
        return UuidHash(
            Uuid,
            Status
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UuidIsNil(
    Uuid: *mut UUID,
    Status: *mut RPC_STATUS    
) ->  c_int
{
    unsafe {
        return UuidIsNil(
            Uuid,
            Status
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcEpRegisterNoReplaceA(
    IfSpec:  RPC_IF_HANDLE,
    BindingVector: *mut RPC_BINDING_VECTOR,
    UuidVector: *mut UUID_VECTOR,
    Annotation:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcEpRegisterNoReplaceA(
            IfSpec,
            BindingVector,
            UuidVector,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcEpRegisterNoReplaceW(
    IfSpec:  RPC_IF_HANDLE,
    BindingVector: *mut RPC_BINDING_VECTOR,
    UuidVector: *mut UUID_VECTOR,
    Annotation:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcEpRegisterNoReplaceW(
            IfSpec,
            BindingVector,
            UuidVector,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcEpRegisterA(
    IfSpec:  RPC_IF_HANDLE,
    BindingVector: *mut RPC_BINDING_VECTOR,
    UuidVector: *mut UUID_VECTOR,
    Annotation:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcEpRegisterA(
            IfSpec,
            BindingVector,
            UuidVector,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcEpRegisterW(
    IfSpec:  RPC_IF_HANDLE,
    BindingVector: *mut RPC_BINDING_VECTOR,
    UuidVector: *mut UUID_VECTOR,
    Annotation:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcEpRegisterW(
            IfSpec,
            BindingVector,
            UuidVector,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcEpUnregister(
    IfSpec:  RPC_IF_HANDLE,
    BindingVector: *mut RPC_BINDING_VECTOR,
    UuidVector: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcEpUnregister(
            IfSpec,
            BindingVector,
            UuidVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DceErrorInqTextA(
    RpcStatus:  RPC_STATUS,
    ErrorText:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return DceErrorInqTextA(
            RpcStatus,
            ErrorText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DceErrorInqTextW(
    RpcStatus:  RPC_STATUS,
    ErrorText:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return DceErrorInqTextW(
            RpcStatus,
            ErrorText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtEpEltInqBegin(
    EpBinding:  RPC_BINDING_HANDLE,
    InquiryType:  c_ulong,
    IfId: *mut RPC_IF_ID,
    VersOption:  c_ulong,
    ObjectUuid: *mut UUID,
    InquiryContext: *mut RPC_EP_INQ_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtEpEltInqBegin(
            EpBinding,
            InquiryType,
            IfId,
            VersOption,
            ObjectUuid,
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtEpEltInqDone(
    InquiryContext: *mut RPC_EP_INQ_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtEpEltInqDone(
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtEpEltInqNextA(
    InquiryContext:  RPC_EP_INQ_HANDLE,
    IfId: *mut RPC_IF_ID,
    Binding: *mut RPC_BINDING_HANDLE,
    ObjectUuid: *mut UUID,
    Annotation: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtEpEltInqNextA(
            InquiryContext,
            IfId,
            Binding,
            ObjectUuid,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtEpEltInqNextW(
    InquiryContext:  RPC_EP_INQ_HANDLE,
    IfId: *mut RPC_IF_ID,
    Binding: *mut RPC_BINDING_HANDLE,
    ObjectUuid: *mut UUID,
    Annotation: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtEpEltInqNextW(
            InquiryContext,
            IfId,
            Binding,
            ObjectUuid,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtEpUnregister(
    EpBinding:  RPC_BINDING_HANDLE,
    IfId: *mut RPC_IF_ID,
    Binding:  RPC_BINDING_HANDLE,
    ObjectUuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtEpUnregister(
            EpBinding,
            IfId,
            Binding,
            ObjectUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcMgmtSetAuthorizationFn(
    AuthorizationFn:  RPC_MGMT_AUTHORIZATION_FN    
) ->  RPC_STATUS
{
    unsafe {
        return RpcMgmtSetAuthorizationFn(
            AuthorizationFn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcExceptionFilter(
    ExceptionCode:  c_ulong    
) ->  c_int
{
    unsafe {
        return RpcExceptionFilter(
            ExceptionCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInterfaceGroupCreateW(
    Interfaces: *mut RPC_INTERFACE_TEMPLATEW,
    NumIfs:  c_ulong,
    Endpoints: *mut RPC_ENDPOINT_TEMPLATEW,
    NumEndpoints:  c_ulong,
    IdlePeriod:  c_ulong,
    IdleCallbackFn:  Option,
    IdleCallbackContext: *mut c_void,
    IfGroup:  PRPC_INTERFACE_GROUP    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInterfaceGroupCreateW(
            Interfaces,
            NumIfs,
            Endpoints,
            NumEndpoints,
            IdlePeriod,
            IdleCallbackFn,
            IdleCallbackContext,
            IfGroup
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInterfaceGroupCreateA(
    Interfaces: *mut RPC_INTERFACE_TEMPLATEA,
    NumIfs:  c_ulong,
    Endpoints: *mut RPC_ENDPOINT_TEMPLATEA,
    NumEndpoints:  c_ulong,
    IdlePeriod:  c_ulong,
    IdleCallbackFn:  Option,
    IdleCallbackContext: *mut c_void,
    IfGroup:  PRPC_INTERFACE_GROUP    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInterfaceGroupCreateA(
            Interfaces,
            NumIfs,
            Endpoints,
            NumEndpoints,
            IdlePeriod,
            IdleCallbackFn,
            IdleCallbackContext,
            IfGroup
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInterfaceGroupClose(
    IfGroup:  RPC_INTERFACE_GROUP    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInterfaceGroupClose(
            IfGroup
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInterfaceGroupActivate(
    IfGroup:  RPC_INTERFACE_GROUP    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInterfaceGroupActivate(
            IfGroup
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInterfaceGroupDeactivate(
    IfGroup:  RPC_INTERFACE_GROUP,
    ForceDeactivation:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInterfaceGroupDeactivate(
            IfGroup,
            ForceDeactivation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInterfaceGroupInqBindings(
    IfGroup:  RPC_INTERFACE_GROUP,
    BindingVector: *mut *mut RPC_BINDING_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInterfaceGroupInqBindings(
            IfGroup,
            BindingVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcNegotiateTransferSyntax(
    Message: *mut RPC_MESSAGE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcNegotiateTransferSyntax(
            Message
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcGetBuffer(
    Message: *mut RPC_MESSAGE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcGetBuffer(
            Message
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcGetBufferWithObject(
    Message: *mut RPC_MESSAGE,
    ObjectUuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcGetBufferWithObject(
            Message,
            ObjectUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcSendReceive(
    Message: *mut RPC_MESSAGE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcSendReceive(
            Message
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcFreeBuffer(
    Message: *mut RPC_MESSAGE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcFreeBuffer(
            Message
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcSend(
    Message:  PRPC_MESSAGE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcSend(
            Message
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcReceive(
    Message:  PRPC_MESSAGE,
    Size:  c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcReceive(
            Message,
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcFreePipeBuffer(
    Message: *mut RPC_MESSAGE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcFreePipeBuffer(
            Message
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcReallocPipeBuffer(
    Message:  PRPC_MESSAGE,
    NewSize:  c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcReallocPipeBuffer(
            Message,
            NewSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcRequestMutex(
    Mutex: *mut I_RPC_MUTEX    
)
{
    unsafe {
        return I_RpcRequestMutex(
            Mutex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcClearMutex(
    Mutex:  I_RPC_MUTEX    
)
{
    unsafe {
        return I_RpcClearMutex(
            Mutex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcDeleteMutex(
    Mutex:  I_RPC_MUTEX    
)
{
    unsafe {
        return I_RpcDeleteMutex(
            Mutex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcAllocate(
    Size:  c_uint    
) -> *mut c_void
{
    unsafe {
        return I_RpcAllocate(
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcFree(
    Object: *mut c_void    
)
{
    unsafe {
        return I_RpcFree(
            Object
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcFreeSystemHandleCollection(
    CallObj: *mut c_void,
    FreeFlags:  c_ulong    
) ->  c_ulong
{
    unsafe {
        return I_RpcFreeSystemHandleCollection(
            CallObj,
            FreeFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcSetSystemHandle(
    Handle: *mut c_void,
    Type:  c_uchar,
    AccessMask:  c_ulong,
    CallObj: *mut c_void,
    HandleIndex: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcSetSystemHandle(
            Handle,
            Type,
            AccessMask,
            CallObj,
            HandleIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcGetSystemHandle(
    pMemory: *mut c_uchar,
    Type:  c_uchar,
    AccessMask:  c_ulong,
    HandleIndex:  c_ulong,
    CallObj: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcGetSystemHandle(
            pMemory,
            Type,
            AccessMask,
            HandleIndex,
            CallObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcFreeSystemHandle(
    Type:  c_uchar,
    Handle: *mut c_void    
)
{
    unsafe {
        return I_RpcFreeSystemHandle(
            Type,
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcPauseExecution(
    Milliseconds:  c_ulong    
)
{
    unsafe {
        return I_RpcPauseExecution(
            Milliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcGetExtendedError(
    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcGetExtendedError(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcSystemHandleTypeSpecificWork(
    Handle: *mut c_void,
    ActualType:  c_uchar,
    IdlType:  c_uchar,
    MarshalDirection:  LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcSystemHandleTypeSpecificWork(
            Handle,
            ActualType,
            IdlType,
            MarshalDirection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcMonitorAssociation(
    Handle:  RPC_BINDING_HANDLE,
    RundownRoutine:  PRPC_RUNDOWN,
    Context: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcMonitorAssociation(
            Handle,
            RundownRoutine,
            Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcStopMonitorAssociation(
    Handle:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcStopMonitorAssociation(
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcGetCurrentCallHandle(
    
) ->  RPC_BINDING_HANDLE
{
    unsafe {
        return I_RpcGetCurrentCallHandle(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcGetAssociationContext(
    BindingHandle:  RPC_BINDING_HANDLE,
    AssociationContext: *mut *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcGetAssociationContext(
            BindingHandle,
            AssociationContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcGetServerContextList(
    BindingHandle:  RPC_BINDING_HANDLE    
) -> *mut c_void
{
    unsafe {
        return I_RpcGetServerContextList(
            BindingHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcSetServerContextList(
    BindingHandle:  RPC_BINDING_HANDLE,
    ServerContextList: *mut c_void    
)
{
    unsafe {
        return I_RpcSetServerContextList(
            BindingHandle,
            ServerContextList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcNsInterfaceExported(
    EntryNameSyntax:  c_ulong,
    EntryName: *mut c_ushort,
    RpcInterfaceInformation: *mut RPC_SERVER_INTERFACE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcNsInterfaceExported(
            EntryNameSyntax,
            EntryName,
            RpcInterfaceInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcNsInterfaceUnexported(
    EntryNameSyntax:  c_ulong,
    EntryName: *mut c_ushort,
    RpcInterfaceInformation: *mut RPC_SERVER_INTERFACE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcNsInterfaceUnexported(
            EntryNameSyntax,
            EntryName,
            RpcInterfaceInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingToStaticStringBindingW(
    Binding:  RPC_BINDING_HANDLE,
    StringBinding: *mut *mut c_ushort    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingToStaticStringBindingW(
            Binding,
            StringBinding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqSecurityContext(
    Binding:  RPC_BINDING_HANDLE,
    SecurityContextHandle: *mut *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqSecurityContext(
            Binding,
            SecurityContextHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqSecurityContextKeyInfo(
    Binding:  RPC_BINDING_HANDLE,
    KeyInfo: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqSecurityContextKeyInfo(
            Binding,
            KeyInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqWireIdForSnego(
    Binding:  RPC_BINDING_HANDLE,
    WireId: *mut c_uchar    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqWireIdForSnego(
            Binding,
            WireId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqMarshalledTargetInfo(
    Binding:  RPC_BINDING_HANDLE,
    MarshalledTargetInfoSize: *mut c_ulong,
    MarshalledTargetInfo: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqMarshalledTargetInfo(
            Binding,
            MarshalledTargetInfoSize,
            MarshalledTargetInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqLocalClientPID(
    Binding:  RPC_BINDING_HANDLE,
    Pid: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqLocalClientPID(
            Binding,
            Pid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingHandleToAsyncHandle(
    Binding:  RPC_BINDING_HANDLE,
    AsyncHandle: *mut *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingHandleToAsyncHandle(
            Binding,
            AsyncHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcNsBindingSetEntryNameW(
    Binding:  RPC_BINDING_HANDLE,
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcNsBindingSetEntryNameW(
            Binding,
            EntryNameSyntax,
            EntryName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcNsBindingSetEntryNameA(
    Binding:  RPC_BINDING_HANDLE,
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcNsBindingSetEntryNameA(
            Binding,
            EntryNameSyntax,
            EntryName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerUseProtseqEp2A(
    NetworkAddress:  RPC_CSTR,
    Protseq:  RPC_CSTR,
    MaxCalls:  c_uint,
    Endpoint:  RPC_CSTR,
    SecurityDescriptor: *mut c_void,
    Policy: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerUseProtseqEp2A(
            NetworkAddress,
            Protseq,
            MaxCalls,
            Endpoint,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerUseProtseqEp2W(
    NetworkAddress:  RPC_WSTR,
    Protseq:  RPC_WSTR,
    MaxCalls:  c_uint,
    Endpoint:  RPC_WSTR,
    SecurityDescriptor: *mut c_void,
    Policy: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerUseProtseqEp2W(
            NetworkAddress,
            Protseq,
            MaxCalls,
            Endpoint,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerUseProtseq2W(
    NetworkAddress:  RPC_WSTR,
    Protseq:  RPC_WSTR,
    MaxCalls:  c_uint,
    SecurityDescriptor: *mut c_void,
    Policy: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerUseProtseq2W(
            NetworkAddress,
            Protseq,
            MaxCalls,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerUseProtseq2A(
    NetworkAddress:  RPC_CSTR,
    Protseq:  RPC_CSTR,
    MaxCalls:  c_uint,
    SecurityDescriptor: *mut c_void,
    Policy: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerUseProtseq2A(
            NetworkAddress,
            Protseq,
            MaxCalls,
            SecurityDescriptor,
            Policy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerStartService(
    Protseq:  RPC_WSTR,
    Endpoint:  RPC_WSTR,
    IfSpec:  RPC_IF_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerStartService(
            Protseq,
            Endpoint,
            IfSpec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqDynamicEndpointW(
    Binding:  RPC_BINDING_HANDLE,
    DynamicEndpoint: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqDynamicEndpointW(
            Binding,
            DynamicEndpoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqDynamicEndpointA(
    Binding:  RPC_BINDING_HANDLE,
    DynamicEndpoint: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqDynamicEndpointA(
            Binding,
            DynamicEndpoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerCheckClientRestriction(
    Context:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerCheckClientRestriction(
            Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqTransportType(
    Binding:  RPC_BINDING_HANDLE,
    Type: *mut c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqTransportType(
            Binding,
            Type
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcIfInqTransferSyntaxes(
    RpcIfHandle:  RPC_IF_HANDLE,
    TransferSyntaxes: *mut RPC_TRANSFER_SYNTAX,
    TransferSyntaxSize:  c_uint,
    TransferSyntaxCount: *mut c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcIfInqTransferSyntaxes(
            RpcIfHandle,
            TransferSyntaxes,
            TransferSyntaxSize,
            TransferSyntaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_UuidCreate(
    Uuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return I_UuidCreate(
            Uuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcUninitializeNdrOle(
    
)
{
    unsafe {
        return I_RpcUninitializeNdrOle(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingCopy(
    SourceBinding:  RPC_BINDING_HANDLE,
    DestinationBinding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingCopy(
            SourceBinding,
            DestinationBinding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingIsClientLocal(
    BindingHandle:  RPC_BINDING_HANDLE,
    ClientLocalFlag: *mut c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingIsClientLocal(
            BindingHandle,
            ClientLocalFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqConnId(
    Binding:  RPC_BINDING_HANDLE,
    ConnId: *mut *mut c_void,
    pfFirstCall: *mut c_int    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqConnId(
            Binding,
            ConnId,
            pfFirstCall
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingCreateNP(
    ServerName:  RPC_WSTR,
    ServiceName:  RPC_WSTR,
    NetworkOptions:  RPC_WSTR,
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingCreateNP(
            ServerName,
            ServiceName,
            NetworkOptions,
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcSsDontSerializeContext(
    
)
{
    unsafe {
        return I_RpcSsDontSerializeContext(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcLaunchDatagramReceiveThread(
    pAddress: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcLaunchDatagramReceiveThread(
            pAddress
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerRegisterForwardFunction(
    pForwardFunction:  Option    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerRegisterForwardFunction(
            pForwardFunction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerInqAddressChangeFn(
    
) ->  Option
{
    unsafe {
        return I_RpcServerInqAddressChangeFn(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerSetAddressChangeFn(
    pAddressChangeFn:  Option    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerSetAddressChangeFn(
            pAddressChangeFn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerInqLocalConnAddress(
    Binding:  RPC_BINDING_HANDLE,
    Buffer: *mut c_void,
    BufferSize: *mut c_ulong,
    AddressFormat: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerInqLocalConnAddress(
            Binding,
            Buffer,
            BufferSize,
            AddressFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerInqRemoteConnAddress(
    Binding:  RPC_BINDING_HANDLE,
    Buffer: *mut c_void,
    BufferSize: *mut c_ulong,
    AddressFormat: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerInqRemoteConnAddress(
            Binding,
            Buffer,
            BufferSize,
            AddressFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcSessionStrictContextHandle(
    
)
{
    unsafe {
        return I_RpcSessionStrictContextHandle(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcTurnOnEEInfoPropagation(
    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcTurnOnEEInfoPropagation(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcConnectionInqSockBuffSize(
    RecvBuffSize: *mut c_ulong,
    SendBuffSize: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcConnectionInqSockBuffSize(
            RecvBuffSize,
            SendBuffSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcConnectionSetSockBuffSize(
    RecvBuffSize:  c_ulong,
    SendBuffSize:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcConnectionSetSockBuffSize(
            RecvBuffSize,
            SendBuffSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerStartListening(
    hWnd: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerStartListening(
            hWnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerStopListening(
    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerStopListening(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingSetAsync(
    Binding:  RPC_BINDING_HANDLE,
    BlockingFn:  RPC_BLOCKING_FN,
    ServerTid:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingSetAsync(
            Binding,
            BlockingFn,
            ServerTid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcSetThreadParams(
    fClientFree:  c_int,
    Context: *mut c_void,
    hWndClient: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcSetThreadParams(
            fClientFree,
            Context,
            hWndClient
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcWindowProc(
    hWnd: *mut c_void,
    Message:  c_uint,
    wParam:  c_uint,
    lParam:  c_ulong    
) ->  c_uint
{
    unsafe {
        return I_RpcWindowProc(
            hWnd,
            Message,
            wParam,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerUnregisterEndpointA(
    Protseq:  RPC_CSTR,
    Endpoint:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerUnregisterEndpointA(
            Protseq,
            Endpoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerUnregisterEndpointW(
    Protseq:  RPC_WSTR,
    Endpoint:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerUnregisterEndpointW(
            Protseq,
            Endpoint
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerInqTransportType(
    Type: *mut c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerInqTransportType(
            Type
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcMapWin32Status(
    Status:  RPC_STATUS    
) ->  c_long
{
    unsafe {
        return I_RpcMapWin32Status(
            Status
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcProxyNewConnection(
    ConnectionType:  c_ulong,
    ServerAddress: *mut c_ushort,
    ServerPort: *mut c_ushort,
    MinConnTimeout: *mut c_ushort,
    ConnectionParameter: *mut c_void,
    CallOutState: *mut RDR_CALLOUT_STATE,
    ProxyCallbackInterface: *mut I_RpcProxyCallbackInterface    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcProxyNewConnection(
            ConnectionType,
            ServerAddress,
            ServerPort,
            MinConnTimeout,
            ConnectionParameter,
            CallOutState,
            ProxyCallbackInterface
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcReplyToClientWithStatus(
    ConnectionParameter: *mut c_void,
    RpcStatus:  RPC_STATUS    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcReplyToClientWithStatus(
            ConnectionParameter,
            RpcStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcRecordCalloutFailure(
    RpcStatus:  RPC_STATUS,
    CallOutState: *mut RDR_CALLOUT_STATE,
    DllName: *mut c_ushort    
)
{
    unsafe {
        return I_RpcRecordCalloutFailure(
            RpcStatus,
            CallOutState,
            DllName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcMgmtEnableDedicatedThreadPool(
    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcMgmtEnableDedicatedThreadPool(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcGetDefaultSD(
    ppSecurityDescriptor: *mut *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcGetDefaultSD(
            ppSecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcOpenClientProcess(
    Binding:  RPC_BINDING_HANDLE,
    DesiredAccess:  c_ulong,
    ClientProcess: *mut *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcOpenClientProcess(
            Binding,
            DesiredAccess,
            ClientProcess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingIsServerLocal(
    Binding:  RPC_BINDING_HANDLE,
    ServerLocalFlag: *mut c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingIsServerLocal(
            Binding,
            ServerLocalFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingSetPrivateOption(
    hBinding:  RPC_BINDING_HANDLE,
    option:  c_ulong,
    optionValue:  ULONG_PTR    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingSetPrivateOption(
            hBinding,
            option,
            optionValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerSubscribeForDisconnectNotification(
    Binding:  RPC_BINDING_HANDLE,
    hEvent: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerSubscribeForDisconnectNotification(
            Binding,
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerGetAssociationID(
    Binding:  RPC_BINDING_HANDLE,
    AssociationID: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerGetAssociationID(
            Binding,
            AssociationID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerDisableExceptionFilter(
    
) ->  c_long
{
    unsafe {
        return I_RpcServerDisableExceptionFilter(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerSubscribeForDisconnectNotification2(
    Binding:  RPC_BINDING_HANDLE,
    hEvent: *mut c_void,
    SubscriptionId: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerSubscribeForDisconnectNotification2(
            Binding,
            hEvent,
            SubscriptionId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcServerUnsubscribeForDisconnectNotification(
    Binding:  RPC_BINDING_HANDLE,
    SubscriptionId:  UUID    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcServerUnsubscribeForDisconnectNotification(
            Binding,
            SubscriptionId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingExportA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    IfSpec:  RPC_IF_HANDLE,
    BindingVec: *mut RPC_BINDING_VECTOR,
    ObjectUuidVec: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingExportA(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            BindingVec,
            ObjectUuidVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingUnexportA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjectUuidVec: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingUnexportA(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjectUuidVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingExportW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    IfSpec:  RPC_IF_HANDLE,
    BindingVec: *mut RPC_BINDING_VECTOR,
    ObjectUuidVec: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingExportW(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            BindingVec,
            ObjectUuidVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingUnexportW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjectUuidVec: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingUnexportW(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjectUuidVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingExportPnPA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjectVector: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingExportPnPA(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjectVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingUnexportPnPA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjectVector: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingUnexportPnPA(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjectVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingExportPnPW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjectVector: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingExportPnPW(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjectVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingUnexportPnPW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjectVector: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingUnexportPnPW(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjectVector
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingLookupBeginA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjUuid: *mut UUID,
    BindingMaxCount:  c_ulong,
    LookupContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingLookupBeginA(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjUuid,
            BindingMaxCount,
            LookupContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingLookupBeginW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjUuid: *mut UUID,
    BindingMaxCount:  c_ulong,
    LookupContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingLookupBeginW(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjUuid,
            BindingMaxCount,
            LookupContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingLookupNext(
    LookupContext:  RPC_NS_HANDLE,
    BindingVec: *mut *mut RPC_BINDING_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingLookupNext(
            LookupContext,
            BindingVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingLookupDone(
    LookupContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingLookupDone(
            LookupContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupDeleteA(
    GroupNameSyntax:  c_ulong,
    GroupName:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupDeleteA(
            GroupNameSyntax,
            GroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrAddA(
    GroupNameSyntax:  c_ulong,
    GroupName:  RPC_CSTR,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrAddA(
            GroupNameSyntax,
            GroupName,
            MemberNameSyntax,
            MemberName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrRemoveA(
    GroupNameSyntax:  c_ulong,
    GroupName:  RPC_CSTR,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrRemoveA(
            GroupNameSyntax,
            GroupName,
            MemberNameSyntax,
            MemberName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrInqBeginA(
    GroupNameSyntax:  c_ulong,
    GroupName:  RPC_CSTR,
    MemberNameSyntax:  c_ulong,
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrInqBeginA(
            GroupNameSyntax,
            GroupName,
            MemberNameSyntax,
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrInqNextA(
    InquiryContext:  RPC_NS_HANDLE,
    MemberName: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrInqNextA(
            InquiryContext,
            MemberName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupDeleteW(
    GroupNameSyntax:  c_ulong,
    GroupName:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupDeleteW(
            GroupNameSyntax,
            GroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrAddW(
    GroupNameSyntax:  c_ulong,
    GroupName:  RPC_WSTR,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrAddW(
            GroupNameSyntax,
            GroupName,
            MemberNameSyntax,
            MemberName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrRemoveW(
    GroupNameSyntax:  c_ulong,
    GroupName:  RPC_WSTR,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrRemoveW(
            GroupNameSyntax,
            GroupName,
            MemberNameSyntax,
            MemberName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrInqBeginW(
    GroupNameSyntax:  c_ulong,
    GroupName:  RPC_WSTR,
    MemberNameSyntax:  c_ulong,
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrInqBeginW(
            GroupNameSyntax,
            GroupName,
            MemberNameSyntax,
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrInqNextW(
    InquiryContext:  RPC_NS_HANDLE,
    MemberName: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrInqNextW(
            InquiryContext,
            MemberName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsGroupMbrInqDone(
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsGroupMbrInqDone(
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileDeleteA(
    ProfileNameSyntax:  c_ulong,
    ProfileName:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileDeleteA(
            ProfileNameSyntax,
            ProfileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltAddA(
    ProfileNameSyntax:  c_ulong,
    ProfileName:  RPC_CSTR,
    IfId: *mut RPC_IF_ID,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_CSTR,
    Priority:  c_ulong,
    Annotation:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltAddA(
            ProfileNameSyntax,
            ProfileName,
            IfId,
            MemberNameSyntax,
            MemberName,
            Priority,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltRemoveA(
    ProfileNameSyntax:  c_ulong,
    ProfileName:  RPC_CSTR,
    IfId: *mut RPC_IF_ID,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltRemoveA(
            ProfileNameSyntax,
            ProfileName,
            IfId,
            MemberNameSyntax,
            MemberName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltInqBeginA(
    ProfileNameSyntax:  c_ulong,
    ProfileName:  RPC_CSTR,
    InquiryType:  c_ulong,
    IfId: *mut RPC_IF_ID,
    VersOption:  c_ulong,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_CSTR,
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltInqBeginA(
            ProfileNameSyntax,
            ProfileName,
            InquiryType,
            IfId,
            VersOption,
            MemberNameSyntax,
            MemberName,
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltInqNextA(
    InquiryContext:  RPC_NS_HANDLE,
    IfId: *mut RPC_IF_ID,
    MemberName: *mut RPC_CSTR,
    Priority: *mut c_ulong,
    Annotation: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltInqNextA(
            InquiryContext,
            IfId,
            MemberName,
            Priority,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileDeleteW(
    ProfileNameSyntax:  c_ulong,
    ProfileName:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileDeleteW(
            ProfileNameSyntax,
            ProfileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltAddW(
    ProfileNameSyntax:  c_ulong,
    ProfileName:  RPC_WSTR,
    IfId: *mut RPC_IF_ID,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_WSTR,
    Priority:  c_ulong,
    Annotation:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltAddW(
            ProfileNameSyntax,
            ProfileName,
            IfId,
            MemberNameSyntax,
            MemberName,
            Priority,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltRemoveW(
    ProfileNameSyntax:  c_ulong,
    ProfileName:  RPC_WSTR,
    IfId: *mut RPC_IF_ID,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltRemoveW(
            ProfileNameSyntax,
            ProfileName,
            IfId,
            MemberNameSyntax,
            MemberName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltInqBeginW(
    ProfileNameSyntax:  c_ulong,
    ProfileName:  RPC_WSTR,
    InquiryType:  c_ulong,
    IfId: *mut RPC_IF_ID,
    VersOption:  c_ulong,
    MemberNameSyntax:  c_ulong,
    MemberName:  RPC_WSTR,
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltInqBeginW(
            ProfileNameSyntax,
            ProfileName,
            InquiryType,
            IfId,
            VersOption,
            MemberNameSyntax,
            MemberName,
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltInqNextW(
    InquiryContext:  RPC_NS_HANDLE,
    IfId: *mut RPC_IF_ID,
    MemberName: *mut RPC_WSTR,
    Priority: *mut c_ulong,
    Annotation: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltInqNextW(
            InquiryContext,
            IfId,
            MemberName,
            Priority,
            Annotation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsProfileEltInqDone(
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsProfileEltInqDone(
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsEntryObjectInqBeginA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsEntryObjectInqBeginA(
            EntryNameSyntax,
            EntryName,
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsEntryObjectInqBeginW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsEntryObjectInqBeginW(
            EntryNameSyntax,
            EntryName,
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsEntryObjectInqNext(
    InquiryContext:  RPC_NS_HANDLE,
    ObjUuid: *mut UUID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsEntryObjectInqNext(
            InquiryContext,
            ObjUuid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsEntryObjectInqDone(
    InquiryContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsEntryObjectInqDone(
            InquiryContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsEntryExpandNameA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    ExpandedName: *mut RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsEntryExpandNameA(
            EntryNameSyntax,
            EntryName,
            ExpandedName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtBindingUnexportA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    IfId: *mut RPC_IF_ID,
    VersOption:  c_ulong,
    ObjectUuidVec: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtBindingUnexportA(
            EntryNameSyntax,
            EntryName,
            IfId,
            VersOption,
            ObjectUuidVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtEntryCreateA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtEntryCreateA(
            EntryNameSyntax,
            EntryName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtEntryDeleteA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtEntryDeleteA(
            EntryNameSyntax,
            EntryName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtEntryInqIfIdsA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    IfIdVec: *mut *mut RPC_IF_ID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtEntryInqIfIdsA(
            EntryNameSyntax,
            EntryName,
            IfIdVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtHandleSetExpAge(
    NsHandle:  RPC_NS_HANDLE,
    ExpirationAge:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtHandleSetExpAge(
            NsHandle,
            ExpirationAge
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtInqExpAge(
    ExpirationAge: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtInqExpAge(
            ExpirationAge
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtSetExpAge(
    ExpirationAge:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtSetExpAge(
            ExpirationAge
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsEntryExpandNameW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    ExpandedName: *mut RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsEntryExpandNameW(
            EntryNameSyntax,
            EntryName,
            ExpandedName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtBindingUnexportW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    IfId: *mut RPC_IF_ID,
    VersOption:  c_ulong,
    ObjectUuidVec: *mut UUID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtBindingUnexportW(
            EntryNameSyntax,
            EntryName,
            IfId,
            VersOption,
            ObjectUuidVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtEntryCreateW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtEntryCreateW(
            EntryNameSyntax,
            EntryName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtEntryDeleteW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtEntryDeleteW(
            EntryNameSyntax,
            EntryName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsMgmtEntryInqIfIdsW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    IfIdVec: *mut *mut RPC_IF_ID_VECTOR    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsMgmtEntryInqIfIdsW(
            EntryNameSyntax,
            EntryName,
            IfIdVec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingImportBeginA(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_CSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjUuid: *mut UUID,
    ImportContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingImportBeginA(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjUuid,
            ImportContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingImportBeginW(
    EntryNameSyntax:  c_ulong,
    EntryName:  RPC_WSTR,
    IfSpec:  RPC_IF_HANDLE,
    ObjUuid: *mut UUID,
    ImportContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingImportBeginW(
            EntryNameSyntax,
            EntryName,
            IfSpec,
            ObjUuid,
            ImportContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingImportNext(
    ImportContext:  RPC_NS_HANDLE,
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingImportNext(
            ImportContext,
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingImportDone(
    ImportContext: *mut RPC_NS_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingImportDone(
            ImportContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcNsBindingSelect(
    BindingVec: *mut RPC_BINDING_VECTOR,
    Binding: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcNsBindingSelect(
            BindingVec,
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcAsyncRegisterInfo(
    pAsync:  PRPC_ASYNC_STATE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcAsyncRegisterInfo(
            pAsync
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcAsyncInitializeHandle(
    pAsync:  PRPC_ASYNC_STATE,
    Size:  c_uint    
) ->  RPC_STATUS
{
    unsafe {
        return RpcAsyncInitializeHandle(
            pAsync,
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcAsyncGetCallStatus(
    pAsync:  PRPC_ASYNC_STATE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcAsyncGetCallStatus(
            pAsync
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcAsyncCompleteCall(
    pAsync:  PRPC_ASYNC_STATE,
    Reply: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcAsyncCompleteCall(
            pAsync,
            Reply
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcAsyncAbortCall(
    pAsync:  PRPC_ASYNC_STATE,
    ExceptionCode:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcAsyncAbortCall(
            pAsync,
            ExceptionCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcAsyncCancelCall(
    pAsync:  PRPC_ASYNC_STATE,
    fAbort:  BOOL    
) ->  RPC_STATUS
{
    unsafe {
        return RpcAsyncCancelCall(
            pAsync,
            fAbort
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorStartEnumeration(
    EnumHandle: *mut RPC_ERROR_ENUM_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcErrorStartEnumeration(
            EnumHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorGetNextRecord(
    EnumHandle: *mut RPC_ERROR_ENUM_HANDLE,
    CopyStrings:  BOOL,
    ErrorInfo: *mut RPC_EXTENDED_ERROR_INFO    
) ->  RPC_STATUS
{
    unsafe {
        return RpcErrorGetNextRecord(
            EnumHandle,
            CopyStrings,
            ErrorInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorEndEnumeration(
    EnumHandle: *mut RPC_ERROR_ENUM_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcErrorEndEnumeration(
            EnumHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorResetEnumeration(
    EnumHandle: *mut RPC_ERROR_ENUM_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcErrorResetEnumeration(
            EnumHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorGetNumberOfRecords(
    EnumHandle: *mut RPC_ERROR_ENUM_HANDLE,
    Records: *mut c_int    
) ->  RPC_STATUS
{
    unsafe {
        return RpcErrorGetNumberOfRecords(
            EnumHandle,
            Records
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorSaveErrorInfo(
    EnumHandle: *mut RPC_ERROR_ENUM_HANDLE,
    ErrorBlob: *mut PVOID,
    BlobSize: *mut usize    
) ->  RPC_STATUS
{
    unsafe {
        return RpcErrorSaveErrorInfo(
            EnumHandle,
            ErrorBlob,
            BlobSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorLoadErrorInfo(
    ErrorBlob:  PVOID,
    BlobSize:  usize,
    EnumHandle: *mut RPC_ERROR_ENUM_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcErrorLoadErrorInfo(
            ErrorBlob,
            BlobSize,
            EnumHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorAddRecord(
    ErrorInfo: *mut RPC_EXTENDED_ERROR_INFO    
) ->  RPC_STATUS
{
    unsafe {
        return RpcErrorAddRecord(
            ErrorInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcErrorClearInformation(
    
)
{
    unsafe {
        return RpcErrorClearInformation(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcAsyncCleanupThread(
    dwTimeout:  DWORD    
) ->  RPC_STATUS
{
    unsafe {
        return RpcAsyncCleanupThread(
            dwTimeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcGetAuthorizationContextForClient(
    ClientBinding:  RPC_BINDING_HANDLE,
    ImpersonateOnReturn:  BOOL,
    Reserved1:  PVOID,
    pExpirationTime:  PLARGE_INTEGER,
    Reserved2:  LUID,
    Reserved3:  DWORD,
    Reserved4:  PVOID,
    pAuthzClientContext: *mut PVOID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcGetAuthorizationContextForClient(
            ClientBinding,
            ImpersonateOnReturn,
            Reserved1,
            pExpirationTime,
            Reserved2,
            Reserved3,
            Reserved4,
            pAuthzClientContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcFreeAuthorizationContext(
    pAuthzClientContext: *mut PVOID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcFreeAuthorizationContext(
            pAuthzClientContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsContextLockExclusive(
    ServerBindingHandle:  RPC_BINDING_HANDLE,
    UserContext:  PVOID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSsContextLockExclusive(
            ServerBindingHandle,
            UserContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsContextLockShared(
    ServerBindingHandle:  RPC_BINDING_HANDLE,
    UserContext:  PVOID    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSsContextLockShared(
            ServerBindingHandle,
            UserContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInqCallAttributesW(
    ClientBinding:  RPC_BINDING_HANDLE,
    RpcCallAttributes: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInqCallAttributesW(
            ClientBinding,
            RpcCallAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerInqCallAttributesA(
    ClientBinding:  RPC_BINDING_HANDLE,
    RpcCallAttributes: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerInqCallAttributesA(
            ClientBinding,
            RpcCallAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerSubscribeForNotification(
    Binding:  RPC_BINDING_HANDLE,
    Notification:  RPC_NOTIFICATIONS,
    NotificationType:  RPC_NOTIFICATION_TYPES,
    NotificationInfo: *mut RPC_ASYNC_NOTIFICATION_INFO    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerSubscribeForNotification(
            Binding,
            Notification,
            NotificationType,
            NotificationInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcServerUnsubscribeForNotification(
    Binding:  RPC_BINDING_HANDLE,
    Notification:  RPC_NOTIFICATIONS,
    NotificationsQueued: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return RpcServerUnsubscribeForNotification(
            Binding,
            Notification,
            NotificationsQueued
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingBind(
    pAsync:  PRPC_ASYNC_STATE,
    Binding:  RPC_BINDING_HANDLE,
    IfSpec:  RPC_IF_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingBind(
            pAsync,
            Binding,
            IfSpec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcBindingUnbind(
    Binding:  RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcBindingUnbind(
            Binding
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcAsyncSetHandle(
    Message:  PRPC_MESSAGE,
    pAsync:  PRPC_ASYNC_STATE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcAsyncSetHandle(
            Message,
            pAsync
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcAsyncAbortCall(
    pAsync:  PRPC_ASYNC_STATE,
    ExceptionCode:  c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcAsyncAbortCall(
            pAsync,
            ExceptionCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcExceptionFilter(
    ExceptionCode:  c_ulong    
) ->  c_int
{
    unsafe {
        return I_RpcExceptionFilter(
            ExceptionCode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcBindingInqClientTokenAttributes(
    Binding:  RPC_BINDING_HANDLE,
    TokenId: *mut LUID,
    AuthenticationId: *mut LUID,
    ModifiedId: *mut LUID    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcBindingInqClientTokenAttributes(
            Binding,
            TokenId,
            AuthenticationId,
            ModifiedId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CommandLineToArgvW(
    lpCmdLine:  LPCWSTR,
    pNumArgs: *mut c_int    
) -> *mut LPWSTR
{
    unsafe {
        return CommandLineToArgvW(
            lpCmdLine,
            pNumArgs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DragQueryFileA(
    hDrop:  HDROP,
    iFile:  UINT,
    lpszFile:  LPSTR,
    cch:  UINT    
) ->  UINT
{
    unsafe {
        return DragQueryFileA(
            hDrop,
            iFile,
            lpszFile,
            cch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DragQueryFileW(
    hDrop:  HDROP,
    iFile:  UINT,
    lpszFile:  LPWSTR,
    cch:  UINT    
) ->  UINT
{
    unsafe {
        return DragQueryFileW(
            hDrop,
            iFile,
            lpszFile,
            cch
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DragQueryPoint(
    hDrop:  HDROP,
    ppt: *mut POINT    
) ->  BOOL
{
    unsafe {
        return DragQueryPoint(
            hDrop,
            ppt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DragFinish(
    hDrop:  HDROP    
)
{
    unsafe {
        return DragFinish(
            hDrop
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DragAcceptFiles(
    hWnd:  HWND,
    fAccept:  BOOL    
)
{
    unsafe {
        return DragAcceptFiles(
            hWnd,
            fAccept
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShellExecuteA(
    hwnd:  HWND,
    lpOperation:  LPCSTR,
    lpFile:  LPCSTR,
    lpParameters:  LPCSTR,
    lpDirectory:  LPCSTR,
    nShowCmd:  INT    
) ->  HINSTANCE
{
    unsafe {
        return ShellExecuteA(
            hwnd,
            lpOperation,
            lpFile,
            lpParameters,
            lpDirectory,
            nShowCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShellExecuteW(
    hwnd:  HWND,
    lpOperation:  LPCWSTR,
    lpFile:  LPCWSTR,
    lpParameters:  LPCWSTR,
    lpDirectory:  LPCWSTR,
    nShowCmd:  INT    
) ->  HINSTANCE
{
    unsafe {
        return ShellExecuteW(
            hwnd,
            lpOperation,
            lpFile,
            lpParameters,
            lpDirectory,
            nShowCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindExecutableA(
    lpFile:  LPCSTR,
    lpDirectory:  LPCSTR,
    lpResult:  LPSTR    
) ->  HINSTANCE
{
    unsafe {
        return FindExecutableA(
            lpFile,
            lpDirectory,
            lpResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindExecutableW(
    lpFile:  LPCWSTR,
    lpDirectory:  LPCWSTR,
    lpResult:  LPWSTR    
) ->  HINSTANCE
{
    unsafe {
        return FindExecutableW(
            lpFile,
            lpDirectory,
            lpResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShellAboutA(
    hWnd:  HWND,
    szApp:  LPCSTR,
    szOtherStuff:  LPCSTR,
    hIcon:  HICON    
) ->  INT
{
    unsafe {
        return ShellAboutA(
            hWnd,
            szApp,
            szOtherStuff,
            hIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShellAboutW(
    hWnd:  HWND,
    szApp:  LPCWSTR,
    szOtherStuff:  LPCWSTR,
    hIcon:  HICON    
) ->  INT
{
    unsafe {
        return ShellAboutW(
            hWnd,
            szApp,
            szOtherStuff,
            hIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DuplicateIcon(
    hInst:  HINSTANCE,
    hIcon:  HICON    
) ->  HICON
{
    unsafe {
        return DuplicateIcon(
            hInst,
            hIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtractAssociatedIconA(
    hInst:  HINSTANCE,
    pszIconPath:  LPSTR,
    piIcon: *mut WORD    
) ->  HICON
{
    unsafe {
        return ExtractAssociatedIconA(
            hInst,
            pszIconPath,
            piIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtractAssociatedIconW(
    hInst:  HINSTANCE,
    pszIconPath:  LPWSTR,
    piIcon: *mut WORD    
) ->  HICON
{
    unsafe {
        return ExtractAssociatedIconW(
            hInst,
            pszIconPath,
            piIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtractAssociatedIconExA(
    hInst:  HINSTANCE,
    pszIconPath:  LPSTR,
    piIconIndex: *mut WORD,
    piIconId: *mut WORD    
) ->  HICON
{
    unsafe {
        return ExtractAssociatedIconExA(
            hInst,
            pszIconPath,
            piIconIndex,
            piIconId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtractAssociatedIconExW(
    hInst:  HINSTANCE,
    pszIconPath:  LPWSTR,
    piIconIndex: *mut WORD,
    piIconId: *mut WORD    
) ->  HICON
{
    unsafe {
        return ExtractAssociatedIconExW(
            hInst,
            pszIconPath,
            piIconIndex,
            piIconId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtractIconA(
    hInst:  HINSTANCE,
    pszExeFileName:  LPCSTR,
    nIconIndex:  UINT    
) ->  HICON
{
    unsafe {
        return ExtractIconA(
            hInst,
            pszExeFileName,
            nIconIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtractIconW(
    hInst:  HINSTANCE,
    pszExeFileName:  LPCWSTR,
    nIconIndex:  UINT    
) ->  HICON
{
    unsafe {
        return ExtractIconW(
            hInst,
            pszExeFileName,
            nIconIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHAppBarMessage(
    dwMessage:  DWORD,
    pData:  PAPPBARDATA    
) ->  UINT_PTR
{
    unsafe {
        return SHAppBarMessage(
            dwMessage,
            pData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DoEnvironmentSubstA(
    pszSrc:  LPSTR,
    cchSrc:  UINT    
) ->  DWORD
{
    unsafe {
        return DoEnvironmentSubstA(
            pszSrc,
            cchSrc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DoEnvironmentSubstW(
    pszSrc:  LPWSTR,
    cchSrc:  UINT    
) ->  DWORD
{
    unsafe {
        return DoEnvironmentSubstW(
            pszSrc,
            cchSrc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtractIconExA(
    lpszFile:  LPCSTR,
    nIconIndex:  c_int,
    phiconLarge: *mut HICON,
    phiconSmall: *mut HICON,
    nIcons:  UINT    
) ->  UINT
{
    unsafe {
        return ExtractIconExA(
            lpszFile,
            nIconIndex,
            phiconLarge,
            phiconSmall,
            nIcons
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtractIconExW(
    lpszFile:  LPCWSTR,
    nIconIndex:  c_int,
    phiconLarge: *mut HICON,
    phiconSmall: *mut HICON,
    nIcons:  UINT    
) ->  UINT
{
    unsafe {
        return ExtractIconExW(
            lpszFile,
            nIconIndex,
            phiconLarge,
            phiconSmall,
            nIcons
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHFileOperationA(
    lpFileOp:  LPSHFILEOPSTRUCTA    
) ->  c_int
{
    unsafe {
        return SHFileOperationA(
            lpFileOp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHFileOperationW(
    lpFileOp:  LPSHFILEOPSTRUCTW    
) ->  c_int
{
    unsafe {
        return SHFileOperationW(
            lpFileOp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHFreeNameMappings(
    hNameMappings:  HANDLE    
)
{
    unsafe {
        return SHFreeNameMappings(
            hNameMappings
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShellExecuteExA(
    pExecInfo: *mut SHELLEXECUTEINFOA    
) ->  BOOL
{
    unsafe {
        return ShellExecuteExA(
            pExecInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShellExecuteExW(
    pExecInfo: *mut SHELLEXECUTEINFOW    
) ->  BOOL
{
    unsafe {
        return ShellExecuteExW(
            pExecInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHCreateProcessAsUserW(
    pscpi:  PSHCREATEPROCESSINFOW    
) ->  BOOL
{
    unsafe {
        return SHCreateProcessAsUserW(
            pscpi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHEvaluateSystemCommandTemplate(
    pszCmdTemplate:  PCWSTR,
    ppszApplication: *mut PWSTR,
    ppszCommandLine: *mut PWSTR,
    ppszParameters: *mut PWSTR    
) ->  HRESULT
{
    unsafe {
        return SHEvaluateSystemCommandTemplate(
            pszCmdTemplate,
            ppszApplication,
            ppszCommandLine,
            ppszParameters
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AssocCreateForClasses(
    rgClasses: *const ASSOCIATIONELEMENT,
    cClasses:  ULONG,
    riid: *const IID,
    ppv: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return AssocCreateForClasses(
            rgClasses,
            cClasses,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHQueryRecycleBinA(
    pszRootPath:  LPCSTR,
    pSHQueryRBInfo:  LPSHQUERYRBINFO    
) ->  HRESULT
{
    unsafe {
        return SHQueryRecycleBinA(
            pszRootPath,
            pSHQueryRBInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHQueryRecycleBinW(
    pszRootPath:  LPCWSTR,
    pSHQueryRBInfo:  LPSHQUERYRBINFO    
) ->  HRESULT
{
    unsafe {
        return SHQueryRecycleBinW(
            pszRootPath,
            pSHQueryRBInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHEmptyRecycleBinA(
    hwnd:  HWND,
    pszRootPath:  LPCSTR,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return SHEmptyRecycleBinA(
            hwnd,
            pszRootPath,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHEmptyRecycleBinW(
    hwnd:  HWND,
    pszRootPath:  LPCWSTR,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return SHEmptyRecycleBinW(
            hwnd,
            pszRootPath,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHQueryUserNotificationState(
    pquns: *mut QUERY_USER_NOTIFICATION_STATE    
) ->  HRESULT
{
    unsafe {
        return SHQueryUserNotificationState(
            pquns
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetPropertyStoreForWindow(
    hwnd:  HWND,
    riid: *const IID,
    ppv: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return SHGetPropertyStoreForWindow(
            hwnd,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Shell_NotifyIconA(
    dwMessage:  DWORD,
    lpData:  PNOTIFYICONDATAA    
) ->  BOOL
{
    unsafe {
        return Shell_NotifyIconA(
            dwMessage,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Shell_NotifyIconW(
    dwMessage:  DWORD,
    lpData:  PNOTIFYICONDATAW    
) ->  BOOL
{
    unsafe {
        return Shell_NotifyIconW(
            dwMessage,
            lpData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Shell_NotifyIconGetRect(
    identifier: *const NOTIFYICONIDENTIFIER,
    iconLocation: *mut RECT    
) ->  HRESULT
{
    unsafe {
        return Shell_NotifyIconGetRect(
            identifier,
            iconLocation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetFileInfoA(
    pszPath:  LPCSTR,
    dwFileAttributes:  DWORD,
    psfi: *mut SHFILEINFOA,
    cbFileInfo:  UINT,
    uFlags:  UINT    
) ->  DWORD_PTR
{
    unsafe {
        return SHGetFileInfoA(
            pszPath,
            dwFileAttributes,
            psfi,
            cbFileInfo,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetFileInfoW(
    pszPath:  LPCWSTR,
    dwFileAttributes:  DWORD,
    psfi: *mut SHFILEINFOW,
    cbFileInfo:  UINT,
    uFlags:  UINT    
) ->  DWORD_PTR
{
    unsafe {
        return SHGetFileInfoW(
            pszPath,
            dwFileAttributes,
            psfi,
            cbFileInfo,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetStockIconInfo(
    siid:  SHSTOCKICONID,
    uFlags:  UINT,
    psii: *mut SHSTOCKICONINFO    
) ->  HRESULT
{
    unsafe {
        return SHGetStockIconInfo(
            siid,
            uFlags,
            psii
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetDiskFreeSpaceExA(
    pszDirectoryName:  LPCSTR,
    pulFreeBytesAvailableToCaller: *mut ULARGE_INTEGER,
    pulTotalNumberOfBytes: *mut ULARGE_INTEGER,
    pulTotalNumberOfFreeBytes: *mut ULARGE_INTEGER    
) ->  BOOL
{
    unsafe {
        return SHGetDiskFreeSpaceExA(
            pszDirectoryName,
            pulFreeBytesAvailableToCaller,
            pulTotalNumberOfBytes,
            pulTotalNumberOfFreeBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetDiskFreeSpaceExW(
    pszDirectoryName:  LPCWSTR,
    pulFreeBytesAvailableToCaller: *mut ULARGE_INTEGER,
    pulTotalNumberOfBytes: *mut ULARGE_INTEGER,
    pulTotalNumberOfFreeBytes: *mut ULARGE_INTEGER    
) ->  BOOL
{
    unsafe {
        return SHGetDiskFreeSpaceExW(
            pszDirectoryName,
            pulFreeBytesAvailableToCaller,
            pulTotalNumberOfBytes,
            pulTotalNumberOfFreeBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetNewLinkInfoA(
    pszLinkTo:  LPCSTR,
    pszDir:  LPCSTR,
    pszName:  LPSTR,
    pfMustCopy: *mut BOOL,
    uFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return SHGetNewLinkInfoA(
            pszLinkTo,
            pszDir,
            pszName,
            pfMustCopy,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetNewLinkInfoW(
    pszLinkTo:  LPCWSTR,
    pszDir:  LPCWSTR,
    pszName:  LPWSTR,
    pfMustCopy: *mut BOOL,
    uFlags:  UINT    
) ->  BOOL
{
    unsafe {
        return SHGetNewLinkInfoW(
            pszLinkTo,
            pszDir,
            pszName,
            pfMustCopy,
            uFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHInvokePrinterCommandA(
    hwnd:  HWND,
    uAction:  UINT,
    lpBuf1:  LPCSTR,
    lpBuf2:  LPCSTR,
    fModal:  BOOL    
) ->  BOOL
{
    unsafe {
        return SHInvokePrinterCommandA(
            hwnd,
            uAction,
            lpBuf1,
            lpBuf2,
            fModal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHInvokePrinterCommandW(
    hwnd:  HWND,
    uAction:  UINT,
    lpBuf1:  LPCWSTR,
    lpBuf2:  LPCWSTR,
    fModal:  BOOL    
) ->  BOOL
{
    unsafe {
        return SHInvokePrinterCommandW(
            hwnd,
            uAction,
            lpBuf1,
            lpBuf2,
            fModal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHLoadNonloadedIconOverlayIdentifiers(
    
) ->  HRESULT
{
    unsafe {
        return SHLoadNonloadedIconOverlayIdentifiers(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHIsFileAvailableOffline(
    pwszPath:  PCWSTR,
    pdwStatus: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return SHIsFileAvailableOffline(
            pwszPath,
            pdwStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHSetLocalizedName(
    pszPath:  PCWSTR,
    pszResModule:  PCWSTR,
    idsRes:  c_int    
) ->  HRESULT
{
    unsafe {
        return SHSetLocalizedName(
            pszPath,
            pszResModule,
            idsRes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHRemoveLocalizedName(
    pszPath:  PCWSTR    
) ->  HRESULT
{
    unsafe {
        return SHRemoveLocalizedName(
            pszPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetLocalizedName(
    pszPath:  PCWSTR,
    pszResModule:  PWSTR,
    cch:  UINT,
    pidsRes: *mut c_int    
) ->  HRESULT
{
    unsafe {
        return SHGetLocalizedName(
            pszPath,
            pszResModule,
            cch,
            pidsRes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShellMessageBoxA(
    hAppInst:  HINSTANCE,
    hWnd:  HWND,
    lpcText:  LPCSTR,
    lpcTitle:  LPCSTR,
    fuStyle:  UINT    
) ->  c_int
{
    unsafe {
        return ShellMessageBoxA(
            hAppInst,
            hWnd,
            lpcText,
            lpcTitle,
            fuStyle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ShellMessageBoxW(
    hAppInst:  HINSTANCE,
    hWnd:  HWND,
    lpcText:  LPCWSTR,
    lpcTitle:  LPCWSTR,
    fuStyle:  UINT    
) ->  c_int
{
    unsafe {
        return ShellMessageBoxW(
            hAppInst,
            hWnd,
            lpcText,
            lpcTitle,
            fuStyle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsLFNDriveA(
    pszPath:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return IsLFNDriveA(
            pszPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsLFNDriveW(
    pszPath:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return IsLFNDriveW(
            pszPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHEnumerateUnreadMailAccountsA(
    hKeyUser:  HKEY,
    dwIndex:  DWORD,
    pszMailAddress:  LPSTR,
    cchMailAddress:  c_int    
) ->  HRESULT
{
    unsafe {
        return SHEnumerateUnreadMailAccountsA(
            hKeyUser,
            dwIndex,
            pszMailAddress,
            cchMailAddress
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHEnumerateUnreadMailAccountsW(
    hKeyUser:  HKEY,
    dwIndex:  DWORD,
    pszMailAddress:  LPWSTR,
    cchMailAddress:  c_int    
) ->  HRESULT
{
    unsafe {
        return SHEnumerateUnreadMailAccountsW(
            hKeyUser,
            dwIndex,
            pszMailAddress,
            cchMailAddress
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetUnreadMailCountA(
    hKeyUser:  HKEY,
    pszMailAddress:  LPCSTR,
    pdwCount: *mut DWORD,
    pFileTime: *mut FILETIME,
    pszShellExecuteCommand:  LPSTR,
    cchShellExecuteCommand:  c_int    
) ->  HRESULT
{
    unsafe {
        return SHGetUnreadMailCountA(
            hKeyUser,
            pszMailAddress,
            pdwCount,
            pFileTime,
            pszShellExecuteCommand,
            cchShellExecuteCommand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetUnreadMailCountW(
    hKeyUser:  HKEY,
    pszMailAddress:  LPCWSTR,
    pdwCount: *mut DWORD,
    pFileTime: *mut FILETIME,
    pszShellExecuteCommand:  LPWSTR,
    cchShellExecuteCommand:  c_int    
) ->  HRESULT
{
    unsafe {
        return SHGetUnreadMailCountW(
            hKeyUser,
            pszMailAddress,
            pdwCount,
            pFileTime,
            pszShellExecuteCommand,
            cchShellExecuteCommand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHSetUnreadMailCountA(
    pszMailAddress:  LPCSTR,
    dwCount:  DWORD,
    pszShellExecuteCommand:  LPCSTR    
) ->  HRESULT
{
    unsafe {
        return SHSetUnreadMailCountA(
            pszMailAddress,
            dwCount,
            pszShellExecuteCommand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHSetUnreadMailCountW(
    pszMailAddress:  LPCWSTR,
    dwCount:  DWORD,
    pszShellExecuteCommand:  LPCWSTR    
) ->  HRESULT
{
    unsafe {
        return SHSetUnreadMailCountW(
            pszMailAddress,
            dwCount,
            pszShellExecuteCommand
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHTestTokenMembership(
    hToken:  HANDLE,
    ulRID:  ULONG    
) ->  BOOL
{
    unsafe {
        return SHTestTokenMembership(
            hToken,
            ulRID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetImageList(
    iImageList:  c_int,
    riid: *const IID,
    ppvObj: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return SHGetImageList(
            iImageList,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InitNetworkAddressControl(
    
) ->  BOOL
{
    unsafe {
        return InitNetworkAddressControl(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SHGetDriveMedia(
    pszDrive:  PCWSTR,
    pdwMediaContent: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return SHGetDriveMedia(
            pszDrive,
            pdwMediaContent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptAcquireContextA(
    phProv: *mut HCRYPTPROV,
    szContainer:  LPCSTR,
    szProvider:  LPCSTR,
    dwProvType:  DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptAcquireContextA(
            phProv,
            szContainer,
            szProvider,
            dwProvType,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptAcquireContextW(
    phProv: *mut HCRYPTPROV,
    szContainer:  LPCWSTR,
    szProvider:  LPCWSTR,
    dwProvType:  DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptAcquireContextW(
            phProv,
            szContainer,
            szProvider,
            dwProvType,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptReleaseContext(
    hProv:  HCRYPTPROV,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptReleaseContext(
            hProv,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGenKey(
    hProv:  HCRYPTPROV,
    Algid:  ALG_ID,
    dwFlags:  DWORD,
    phKey: *mut HCRYPTKEY    
) ->  BOOL
{
    unsafe {
        return CryptGenKey(
            hProv,
            Algid,
            dwFlags,
            phKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDeriveKey(
    hProv:  HCRYPTPROV,
    Algid:  ALG_ID,
    hBaseData:  HCRYPTHASH,
    dwFlags:  DWORD,
    phKey: *mut HCRYPTKEY    
) ->  BOOL
{
    unsafe {
        return CryptDeriveKey(
            hProv,
            Algid,
            hBaseData,
            dwFlags,
            phKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDestroyKey(
    hKey:  HCRYPTKEY    
) ->  BOOL
{
    unsafe {
        return CryptDestroyKey(
            hKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetKeyParam(
    hKey:  HCRYPTKEY,
    dwParam:  DWORD,
    pbData: *const BYTE,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSetKeyParam(
            hKey,
            dwParam,
            pbData,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetKeyParam(
    hKey:  HCRYPTKEY,
    dwParam:  DWORD,
    pbData: *mut BYTE,
    pdwDataLen: *mut DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptGetKeyParam(
            hKey,
            dwParam,
            pbData,
            pdwDataLen,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetHashParam(
    hHash:  HCRYPTHASH,
    dwParam:  DWORD,
    pbData: *const BYTE,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSetHashParam(
            hHash,
            dwParam,
            pbData,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetHashParam(
    hHash:  HCRYPTHASH,
    dwParam:  DWORD,
    pbData: *mut BYTE,
    pdwDataLen: *mut DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptGetHashParam(
            hHash,
            dwParam,
            pbData,
            pdwDataLen,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetProvParam(
    hProv:  HCRYPTPROV,
    dwParam:  DWORD,
    pbData: *const BYTE,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSetProvParam(
            hProv,
            dwParam,
            pbData,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetProvParam(
    hProv:  HCRYPTPROV,
    dwParam:  DWORD,
    pbData: *mut BYTE,
    pdwDataLen: *mut DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptGetProvParam(
            hProv,
            dwParam,
            pbData,
            pdwDataLen,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGenRandom(
    hProv:  HCRYPTPROV,
    dwLen:  DWORD,
    pbBuffer: *mut BYTE    
) ->  BOOL
{
    unsafe {
        return CryptGenRandom(
            hProv,
            dwLen,
            pbBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetUserKey(
    hProv:  HCRYPTPROV,
    dwKeySpec:  DWORD,
    phUserKey: *mut HCRYPTKEY    
) ->  BOOL
{
    unsafe {
        return CryptGetUserKey(
            hProv,
            dwKeySpec,
            phUserKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptExportKey(
    hKey:  HCRYPTKEY,
    hExpKey:  HCRYPTKEY,
    dwBlobType:  DWORD,
    dwFlags:  DWORD,
    pbData: *mut BYTE,
    pdwDataLen: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptExportKey(
            hKey,
            hExpKey,
            dwBlobType,
            dwFlags,
            pbData,
            pdwDataLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptImportKey(
    hProv:  HCRYPTPROV,
    pbData: *const BYTE,
    dwDataLen:  DWORD,
    hPubKey:  HCRYPTKEY,
    dwFlags:  DWORD,
    phKey: *mut HCRYPTKEY    
) ->  BOOL
{
    unsafe {
        return CryptImportKey(
            hProv,
            pbData,
            dwDataLen,
            hPubKey,
            dwFlags,
            phKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEncrypt(
    hKey:  HCRYPTKEY,
    hHash:  HCRYPTHASH,
    Final:  BOOL,
    dwFlags:  DWORD,
    pbData: *mut BYTE,
    pdwDataLen: *mut DWORD,
    dwBufLen:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptEncrypt(
            hKey,
            hHash,
            Final,
            dwFlags,
            pbData,
            pdwDataLen,
            dwBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDecrypt(
    hKey:  HCRYPTKEY,
    hHash:  HCRYPTHASH,
    Final:  BOOL,
    dwFlags:  DWORD,
    pbData: *mut BYTE,
    pdwDataLen: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptDecrypt(
            hKey,
            hHash,
            Final,
            dwFlags,
            pbData,
            pdwDataLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptCreateHash(
    hProv:  HCRYPTPROV,
    Algid:  ALG_ID,
    hKey:  HCRYPTKEY,
    dwFlags:  DWORD,
    phHash: *mut HCRYPTHASH    
) ->  BOOL
{
    unsafe {
        return CryptCreateHash(
            hProv,
            Algid,
            hKey,
            dwFlags,
            phHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptHashData(
    hHash:  HCRYPTHASH,
    pbData: *const BYTE,
    dwDataLen:  DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptHashData(
            hHash,
            pbData,
            dwDataLen,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptHashSessionKey(
    hHash:  HCRYPTHASH,
    hKey:  HCRYPTKEY,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptHashSessionKey(
            hHash,
            hKey,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDestroyHash(
    hHash:  HCRYPTHASH    
) ->  BOOL
{
    unsafe {
        return CryptDestroyHash(
            hHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSignHashA(
    hHash:  HCRYPTHASH,
    dwKeySpec:  DWORD,
    szDescription:  LPCSTR,
    dwFlags:  DWORD,
    pbSignature: *mut BYTE,
    pdwSigLen: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSignHashA(
            hHash,
            dwKeySpec,
            szDescription,
            dwFlags,
            pbSignature,
            pdwSigLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSignHashW(
    hHash:  HCRYPTHASH,
    dwKeySpec:  DWORD,
    szDescription:  LPCWSTR,
    dwFlags:  DWORD,
    pbSignature: *mut BYTE,
    pdwSigLen: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSignHashW(
            hHash,
            dwKeySpec,
            szDescription,
            dwFlags,
            pbSignature,
            pdwSigLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifySignatureA(
    hHash:  HCRYPTHASH,
    pbSignature: *const BYTE,
    dwSigLen:  DWORD,
    hPubKey:  HCRYPTKEY,
    szDescription:  LPCSTR,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptVerifySignatureA(
            hHash,
            pbSignature,
            dwSigLen,
            hPubKey,
            szDescription,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifySignatureW(
    hHash:  HCRYPTHASH,
    pbSignature: *const BYTE,
    dwSigLen:  DWORD,
    hPubKey:  HCRYPTKEY,
    szDescription:  LPCWSTR,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptVerifySignatureW(
            hHash,
            pbSignature,
            dwSigLen,
            hPubKey,
            szDescription,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetProviderA(
    pszProvName:  LPCSTR,
    dwProvType:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSetProviderA(
            pszProvName,
            dwProvType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetProviderW(
    pszProvName:  LPCWSTR,
    dwProvType:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSetProviderW(
            pszProvName,
            dwProvType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetProviderExA(
    pszProvName:  LPCSTR,
    dwProvType:  DWORD,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSetProviderExA(
            pszProvName,
            dwProvType,
            pdwReserved,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetProviderExW(
    pszProvName:  LPCWSTR,
    dwProvType:  DWORD,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSetProviderExW(
            pszProvName,
            dwProvType,
            pdwReserved,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetDefaultProviderA(
    dwProvType:  DWORD,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD,
    pszProvName:  LPSTR,
    pcbProvName: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptGetDefaultProviderA(
            dwProvType,
            pdwReserved,
            dwFlags,
            pszProvName,
            pcbProvName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetDefaultProviderW(
    dwProvType:  DWORD,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD,
    pszProvName:  LPWSTR,
    pcbProvName: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptGetDefaultProviderW(
            dwProvType,
            pdwReserved,
            dwFlags,
            pszProvName,
            pcbProvName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEnumProviderTypesA(
    dwIndex:  DWORD,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD,
    pdwProvType: *mut DWORD,
    szTypeName:  LPSTR,
    pcbTypeName: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptEnumProviderTypesA(
            dwIndex,
            pdwReserved,
            dwFlags,
            pdwProvType,
            szTypeName,
            pcbTypeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEnumProviderTypesW(
    dwIndex:  DWORD,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD,
    pdwProvType: *mut DWORD,
    szTypeName:  LPWSTR,
    pcbTypeName: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptEnumProviderTypesW(
            dwIndex,
            pdwReserved,
            dwFlags,
            pdwProvType,
            szTypeName,
            pcbTypeName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEnumProvidersA(
    dwIndex:  DWORD,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD,
    pdwProvType: *mut DWORD,
    szProvName:  LPSTR,
    pcbProvName: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptEnumProvidersA(
            dwIndex,
            pdwReserved,
            dwFlags,
            pdwProvType,
            szProvName,
            pcbProvName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEnumProvidersW(
    dwIndex:  DWORD,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD,
    pdwProvType: *mut DWORD,
    szProvName:  LPWSTR,
    pcbProvName: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptEnumProvidersW(
            dwIndex,
            pdwReserved,
            dwFlags,
            pdwProvType,
            szProvName,
            pcbProvName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptContextAddRef(
    hProv:  HCRYPTPROV,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptContextAddRef(
            hProv,
            pdwReserved,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDuplicateKey(
    hKey:  HCRYPTKEY,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD,
    phKey: *mut HCRYPTKEY    
) ->  BOOL
{
    unsafe {
        return CryptDuplicateKey(
            hKey,
            pdwReserved,
            dwFlags,
            phKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDuplicateHash(
    hHash:  HCRYPTHASH,
    pdwReserved: *mut DWORD,
    dwFlags:  DWORD,
    phHash: *mut HCRYPTHASH    
) ->  BOOL
{
    unsafe {
        return CryptDuplicateHash(
            hHash,
            pdwReserved,
            dwFlags,
            phHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEncSChannel(
    pData: *mut *mut BYTE,
    dwDecSize: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return GetEncSChannel(
            pData,
            dwDecSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptOpenAlgorithmProvider(
    phAlgorithm: *mut BCRYPT_ALG_HANDLE,
    pszAlgId:  LPCWSTR,
    pszImplementation:  LPCWSTR,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptOpenAlgorithmProvider(
            phAlgorithm,
            pszAlgId,
            pszImplementation,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptEnumAlgorithms(
    dwAlgOperations:  ULONG,
    pAlgCount: *mut ULONG,
    ppAlgList: *mut *mut BCRYPT_ALGORITHM_IDENTIFIER,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptEnumAlgorithms(
            dwAlgOperations,
            pAlgCount,
            ppAlgList,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptEnumProviders(
    pszAlgId:  LPCWSTR,
    pImplCount: *mut ULONG,
    ppImplList: *mut *mut BCRYPT_PROVIDER_NAME,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptEnumProviders(
            pszAlgId,
            pImplCount,
            ppImplList,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptGetProperty(
    hObject:  BCRYPT_HANDLE,
    pszProperty:  LPCWSTR,
    pbOutput:  PUCHAR,
    cbOutput:  ULONG,
    pcbResult: *mut ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptGetProperty(
            hObject,
            pszProperty,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptSetProperty(
    hObject:  BCRYPT_HANDLE,
    pszProperty:  LPCWSTR,
    pbInput:  PUCHAR,
    cbInput:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptSetProperty(
            hObject,
            pszProperty,
            pbInput,
            cbInput,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptCloseAlgorithmProvider(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptCloseAlgorithmProvider(
            hAlgorithm,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptFreeBuffer(
    pvBuffer:  PVOID    
)
{
    unsafe {
        return BCryptFreeBuffer(
            pvBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptGenerateSymmetricKey(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    phKey: *mut BCRYPT_KEY_HANDLE,
    pbKeyObject:  PUCHAR,
    cbKeyObject:  ULONG,
    pbSecret:  PUCHAR,
    cbSecret:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptGenerateSymmetricKey(
            hAlgorithm,
            phKey,
            pbKeyObject,
            cbKeyObject,
            pbSecret,
            cbSecret,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptGenerateKeyPair(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    phKey: *mut BCRYPT_KEY_HANDLE,
    dwLength:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptGenerateKeyPair(
            hAlgorithm,
            phKey,
            dwLength,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptEncrypt(
    hKey:  BCRYPT_KEY_HANDLE,
    pbInput:  PUCHAR,
    cbInput:  ULONG,
    pPaddingInfo: *mut c_void,
    pbIV:  PUCHAR,
    cbIV:  ULONG,
    pbOutput:  PUCHAR,
    cbOutput:  ULONG,
    pcbResult: *mut ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptEncrypt(
            hKey,
            pbInput,
            cbInput,
            pPaddingInfo,
            pbIV,
            cbIV,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDecrypt(
    hKey:  BCRYPT_KEY_HANDLE,
    pbInput:  PUCHAR,
    cbInput:  ULONG,
    pPaddingInfo: *mut c_void,
    pbIV:  PUCHAR,
    cbIV:  ULONG,
    pbOutput:  PUCHAR,
    cbOutput:  ULONG,
    pcbResult: *mut ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDecrypt(
            hKey,
            pbInput,
            cbInput,
            pPaddingInfo,
            pbIV,
            cbIV,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptExportKey(
    hKey:  BCRYPT_KEY_HANDLE,
    hExportKey:  BCRYPT_KEY_HANDLE,
    pszBlobType:  LPCWSTR,
    pbOutput:  PUCHAR,
    cbOutput:  ULONG,
    pcbResult: *mut ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptExportKey(
            hKey,
            hExportKey,
            pszBlobType,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptImportKey(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    hImportKey:  BCRYPT_KEY_HANDLE,
    pszBlobType:  LPCWSTR,
    phKey: *mut BCRYPT_KEY_HANDLE,
    pbKeyObject:  PUCHAR,
    cbKeyObject:  ULONG,
    pbInput:  PUCHAR,
    cbInput:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptImportKey(
            hAlgorithm,
            hImportKey,
            pszBlobType,
            phKey,
            pbKeyObject,
            cbKeyObject,
            pbInput,
            cbInput,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptImportKeyPair(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    hImportKey:  BCRYPT_KEY_HANDLE,
    pszBlobType:  LPCWSTR,
    phKey: *mut BCRYPT_KEY_HANDLE,
    pbInput:  PUCHAR,
    cbInput:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptImportKeyPair(
            hAlgorithm,
            hImportKey,
            pszBlobType,
            phKey,
            pbInput,
            cbInput,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDuplicateKey(
    hKey:  BCRYPT_KEY_HANDLE,
    phNewKey: *mut BCRYPT_KEY_HANDLE,
    pbKeyObject:  PUCHAR,
    cbKeyObject:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDuplicateKey(
            hKey,
            phNewKey,
            pbKeyObject,
            cbKeyObject,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptFinalizeKeyPair(
    hKey:  BCRYPT_KEY_HANDLE,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptFinalizeKeyPair(
            hKey,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDestroyKey(
    hKey:  BCRYPT_KEY_HANDLE    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDestroyKey(
            hKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDestroySecret(
    hSecret:  BCRYPT_SECRET_HANDLE    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDestroySecret(
            hSecret
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptSignHash(
    hKey:  BCRYPT_KEY_HANDLE,
    pPaddingInfo: *mut c_void,
    pbInput:  PUCHAR,
    cbInput:  ULONG,
    pbOutput:  PUCHAR,
    cbOutput:  ULONG,
    pcbResult: *mut ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptSignHash(
            hKey,
            pPaddingInfo,
            pbInput,
            cbInput,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptVerifySignature(
    hKey:  BCRYPT_KEY_HANDLE,
    pPaddingInfo: *mut c_void,
    pbHash:  PUCHAR,
    cbHash:  ULONG,
    pbSignature:  PUCHAR,
    cbSignature:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptVerifySignature(
            hKey,
            pPaddingInfo,
            pbHash,
            cbHash,
            pbSignature,
            cbSignature,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptSecretAgreement(
    hPrivKey:  BCRYPT_KEY_HANDLE,
    hPubKey:  BCRYPT_KEY_HANDLE,
    phAgreedSecret: *mut BCRYPT_SECRET_HANDLE,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptSecretAgreement(
            hPrivKey,
            hPubKey,
            phAgreedSecret,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDeriveKey(
    hSharedSecret:  BCRYPT_SECRET_HANDLE,
    pwszKDF:  LPCWSTR,
    pParameterList: *mut BCryptBufferDesc,
    pbDerivedKey:  PUCHAR,
    cbDerivedKey:  ULONG,
    pcbResult: *mut ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDeriveKey(
            hSharedSecret,
            pwszKDF,
            pParameterList,
            pbDerivedKey,
            cbDerivedKey,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptKeyDerivation(
    hKey:  BCRYPT_KEY_HANDLE,
    pParameterList: *mut BCryptBufferDesc,
    pbDerivedKey:  PUCHAR,
    cbDerivedKey:  ULONG,
    pcbResult: *mut ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptKeyDerivation(
            hKey,
            pParameterList,
            pbDerivedKey,
            cbDerivedKey,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptCreateHash(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    phHash: *mut BCRYPT_HASH_HANDLE,
    pbHashObject:  PUCHAR,
    cbHashObject:  ULONG,
    pbSecret:  PUCHAR,
    cbSecret:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptCreateHash(
            hAlgorithm,
            phHash,
            pbHashObject,
            cbHashObject,
            pbSecret,
            cbSecret,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptHashData(
    hHash:  BCRYPT_HASH_HANDLE,
    pbInput:  PUCHAR,
    cbInput:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptHashData(
            hHash,
            pbInput,
            cbInput,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptFinishHash(
    hHash:  BCRYPT_HASH_HANDLE,
    pbOutput:  PUCHAR,
    cbOutput:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptFinishHash(
            hHash,
            pbOutput,
            cbOutput,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptCreateMultiHash(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    phHash: *mut BCRYPT_HASH_HANDLE,
    nHashes:  ULONG,
    pbHashObject:  PUCHAR,
    cbHashObject:  ULONG,
    pbSecret:  PUCHAR,
    cbSecret:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptCreateMultiHash(
            hAlgorithm,
            phHash,
            nHashes,
            pbHashObject,
            cbHashObject,
            pbSecret,
            cbSecret,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptProcessMultiOperations(
    hObject:  BCRYPT_HANDLE,
    operationType:  BCRYPT_MULTI_OPERATION_TYPE,
    pOperations:  PVOID,
    cbOperations:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptProcessMultiOperations(
            hObject,
            operationType,
            pOperations,
            cbOperations,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDuplicateHash(
    hHash:  BCRYPT_HASH_HANDLE,
    phNewHash: *mut BCRYPT_HASH_HANDLE,
    pbHashObject:  PUCHAR,
    cbHashObject:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDuplicateHash(
            hHash,
            phNewHash,
            pbHashObject,
            cbHashObject,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDestroyHash(
    hHash:  BCRYPT_HASH_HANDLE    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDestroyHash(
            hHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptHash(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    pbSecret:  PUCHAR,
    cbSecret:  ULONG,
    pbInput:  PUCHAR,
    cbInput:  ULONG,
    pbOutput:  PUCHAR,
    cbOutput:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptHash(
            hAlgorithm,
            pbSecret,
            cbSecret,
            pbInput,
            cbInput,
            pbOutput,
            cbOutput
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptGenRandom(
    hAlgorithm:  BCRYPT_ALG_HANDLE,
    pbBuffer:  PUCHAR,
    cbBuffer:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptGenRandom(
            hAlgorithm,
            pbBuffer,
            cbBuffer,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDeriveKeyCapi(
    hHash:  BCRYPT_HASH_HANDLE,
    hTargetAlg:  BCRYPT_ALG_HANDLE,
    pbDerivedKey:  PUCHAR,
    cbDerivedKey:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDeriveKeyCapi(
            hHash,
            hTargetAlg,
            pbDerivedKey,
            cbDerivedKey,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDeriveKeyPBKDF2(
    hPrf:  BCRYPT_ALG_HANDLE,
    pbPassword:  PUCHAR,
    cbPassword:  ULONG,
    pbSalt:  PUCHAR,
    cbSalt:  ULONG,
    cIterations:  ULONGLONG,
    pbDerivedKey:  PUCHAR,
    cbDerivedKey:  ULONG,
    dwFlags:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDeriveKeyPBKDF2(
            hPrf,
            pbPassword,
            cbPassword,
            pbSalt,
            cbSalt,
            cIterations,
            pbDerivedKey,
            cbDerivedKey,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptQueryProviderRegistration(
    pszProvider:  LPCWSTR,
    dwMode:  ULONG,
    dwInterface:  ULONG,
    pcbBuffer: *mut ULONG,
    ppBuffer: *mut PCRYPT_PROVIDER_REG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptQueryProviderRegistration(
            pszProvider,
            dwMode,
            dwInterface,
            pcbBuffer,
            ppBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptEnumRegisteredProviders(
    pcbBuffer: *mut ULONG,
    ppBuffer: *mut PCRYPT_PROVIDERS    
) ->  NTSTATUS
{
    unsafe {
        return BCryptEnumRegisteredProviders(
            pcbBuffer,
            ppBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptCreateContext(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    pConfig:  PCRYPT_CONTEXT_CONFIG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptCreateContext(
            dwTable,
            pszContext,
            pConfig
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptDeleteContext(
    dwTable:  ULONG,
    pszContext:  LPCWSTR    
) ->  NTSTATUS
{
    unsafe {
        return BCryptDeleteContext(
            dwTable,
            pszContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptEnumContexts(
    dwTable:  ULONG,
    pcbBuffer: *mut ULONG,
    ppBuffer: *mut PCRYPT_CONTEXTS    
) ->  NTSTATUS
{
    unsafe {
        return BCryptEnumContexts(
            dwTable,
            pcbBuffer,
            ppBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptConfigureContext(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    pConfig:  PCRYPT_CONTEXT_CONFIG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptConfigureContext(
            dwTable,
            pszContext,
            pConfig
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptQueryContextConfiguration(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    pcbBuffer: *mut ULONG,
    ppBuffer: *mut PCRYPT_CONTEXT_CONFIG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptQueryContextConfiguration(
            dwTable,
            pszContext,
            pcbBuffer,
            ppBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptAddContextFunction(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pszFunction:  LPCWSTR,
    dwPosition:  ULONG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptAddContextFunction(
            dwTable,
            pszContext,
            dwInterface,
            pszFunction,
            dwPosition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptRemoveContextFunction(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pszFunction:  LPCWSTR    
) ->  NTSTATUS
{
    unsafe {
        return BCryptRemoveContextFunction(
            dwTable,
            pszContext,
            dwInterface,
            pszFunction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptEnumContextFunctions(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pcbBuffer: *mut ULONG,
    ppBuffer: *mut PCRYPT_CONTEXT_FUNCTIONS    
) ->  NTSTATUS
{
    unsafe {
        return BCryptEnumContextFunctions(
            dwTable,
            pszContext,
            dwInterface,
            pcbBuffer,
            ppBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptConfigureContextFunction(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pszFunction:  LPCWSTR,
    pConfig:  PCRYPT_CONTEXT_FUNCTION_CONFIG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptConfigureContextFunction(
            dwTable,
            pszContext,
            dwInterface,
            pszFunction,
            pConfig
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptQueryContextFunctionConfiguration(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pszFunction:  LPCWSTR,
    pcbBuffer: *mut ULONG,
    ppBuffer: *mut PCRYPT_CONTEXT_FUNCTION_CONFIG    
) ->  NTSTATUS
{
    unsafe {
        return BCryptQueryContextFunctionConfiguration(
            dwTable,
            pszContext,
            dwInterface,
            pszFunction,
            pcbBuffer,
            ppBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptEnumContextFunctionProviders(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pszFunction:  LPCWSTR,
    pcbBuffer: *mut ULONG,
    ppBuffer: *mut PCRYPT_CONTEXT_FUNCTION_PROVIDERS    
) ->  NTSTATUS
{
    unsafe {
        return BCryptEnumContextFunctionProviders(
            dwTable,
            pszContext,
            dwInterface,
            pszFunction,
            pcbBuffer,
            ppBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptSetContextFunctionProperty(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pszFunction:  LPCWSTR,
    pszProperty:  LPCWSTR,
    cbValue:  ULONG,
    pbValue:  PUCHAR    
) ->  NTSTATUS
{
    unsafe {
        return BCryptSetContextFunctionProperty(
            dwTable,
            pszContext,
            dwInterface,
            pszFunction,
            pszProperty,
            cbValue,
            pbValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptQueryContextFunctionProperty(
    dwTable:  ULONG,
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pszFunction:  LPCWSTR,
    pszProperty:  LPCWSTR,
    pcbValue: *mut ULONG,
    ppbValue: *mut PUCHAR    
) ->  NTSTATUS
{
    unsafe {
        return BCryptQueryContextFunctionProperty(
            dwTable,
            pszContext,
            dwInterface,
            pszFunction,
            pszProperty,
            pcbValue,
            ppbValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptRegisterConfigChangeNotify(
    phEvent: *mut HANDLE    
) ->  NTSTATUS
{
    unsafe {
        return BCryptRegisterConfigChangeNotify(
            phEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptUnregisterConfigChangeNotify(
    hEvent:  HANDLE    
) ->  NTSTATUS
{
    unsafe {
        return BCryptUnregisterConfigChangeNotify(
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptResolveProviders(
    pszContext:  LPCWSTR,
    dwInterface:  ULONG,
    pszFunction:  LPCWSTR,
    pszProvider:  LPCWSTR,
    dwMode:  ULONG,
    dwFlags:  ULONG,
    pcbBuffer: *mut ULONG,
    ppBuffer: *mut PCRYPT_PROVIDER_REFS    
) ->  NTSTATUS
{
    unsafe {
        return BCryptResolveProviders(
            pszContext,
            dwInterface,
            pszFunction,
            pszProvider,
            dwMode,
            dwFlags,
            pcbBuffer,
            ppBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BCryptGetFipsAlgorithmMode(
    pfEnabled: *mut BOOLEAN    
) ->  NTSTATUS
{
    unsafe {
        return BCryptGetFipsAlgorithmMode(
            pfEnabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CngGetFipsAlgorithmMode(
    
) ->  BOOLEAN
{
    unsafe {
        return CngGetFipsAlgorithmMode(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptOpenStorageProvider(
    phProvider: *mut NCRYPT_PROV_HANDLE,
    pszProviderName:  LPCWSTR,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptOpenStorageProvider(
            phProvider,
            pszProviderName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptEnumAlgorithms(
    hProvider:  NCRYPT_PROV_HANDLE,
    dwAlgOperations:  DWORD,
    pdwAlgCount: *mut DWORD,
    ppAlgList: *mut *mut NCryptAlgorithmName,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptEnumAlgorithms(
            hProvider,
            dwAlgOperations,
            pdwAlgCount,
            ppAlgList,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptIsAlgSupported(
    hProvider:  NCRYPT_PROV_HANDLE,
    pszAlgId:  LPCWSTR,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptIsAlgSupported(
            hProvider,
            pszAlgId,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptEnumKeys(
    hProvider:  NCRYPT_PROV_HANDLE,
    pszScope:  LPCWSTR,
    ppKeyName: *mut *mut NCryptKeyName,
    ppEnumState: *mut PVOID,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptEnumKeys(
            hProvider,
            pszScope,
            ppKeyName,
            ppEnumState,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptEnumStorageProviders(
    pdwProviderCount: *mut DWORD,
    ppProviderList: *mut *mut NCryptProviderName,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptEnumStorageProviders(
            pdwProviderCount,
            ppProviderList,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptFreeBuffer(
    pvInput:  PVOID    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptFreeBuffer(
            pvInput
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptOpenKey(
    hProvider:  NCRYPT_PROV_HANDLE,
    phKey: *mut NCRYPT_KEY_HANDLE,
    pszKeyName:  LPCWSTR,
    dwLegacyKeySpec:  DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptOpenKey(
            hProvider,
            phKey,
            pszKeyName,
            dwLegacyKeySpec,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptCreatePersistedKey(
    hProvider:  NCRYPT_PROV_HANDLE,
    phKey: *mut NCRYPT_KEY_HANDLE,
    pszAlgId:  LPCWSTR,
    pszKeyName:  LPCWSTR,
    dwLegacyKeySpec:  DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptCreatePersistedKey(
            hProvider,
            phKey,
            pszAlgId,
            pszKeyName,
            dwLegacyKeySpec,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptGetProperty(
    hObject:  NCRYPT_HANDLE,
    pszProperty:  LPCWSTR,
    pbOutput:  PBYTE,
    cbOutput:  DWORD,
    pcbResult: *mut DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptGetProperty(
            hObject,
            pszProperty,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptSetProperty(
    hObject:  NCRYPT_HANDLE,
    pszProperty:  LPCWSTR,
    pbInput:  PBYTE,
    cbInput:  DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptSetProperty(
            hObject,
            pszProperty,
            pbInput,
            cbInput,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptFinalizeKey(
    hKey:  NCRYPT_KEY_HANDLE,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptFinalizeKey(
            hKey,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptEncrypt(
    hKey:  NCRYPT_KEY_HANDLE,
    pbInput:  PBYTE,
    cbInput:  DWORD,
    pPaddingInfo: *mut c_void,
    pbOutput:  PBYTE,
    cbOutput:  DWORD,
    pcbResult: *mut DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptEncrypt(
            hKey,
            pbInput,
            cbInput,
            pPaddingInfo,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptDecrypt(
    hKey:  NCRYPT_KEY_HANDLE,
    pbInput:  PBYTE,
    cbInput:  DWORD,
    pPaddingInfo: *mut c_void,
    pbOutput:  PBYTE,
    cbOutput:  DWORD,
    pcbResult: *mut DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptDecrypt(
            hKey,
            pbInput,
            cbInput,
            pPaddingInfo,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptImportKey(
    hProvider:  NCRYPT_PROV_HANDLE,
    hImportKey:  NCRYPT_KEY_HANDLE,
    pszBlobType:  LPCWSTR,
    pParameterList: *mut NCryptBufferDesc,
    phKey: *mut NCRYPT_KEY_HANDLE,
    pbData:  PBYTE,
    cbData:  DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptImportKey(
            hProvider,
            hImportKey,
            pszBlobType,
            pParameterList,
            phKey,
            pbData,
            cbData,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptExportKey(
    hKey:  NCRYPT_KEY_HANDLE,
    hExportKey:  NCRYPT_KEY_HANDLE,
    pszBlobType:  LPCWSTR,
    pParameterList: *mut NCryptBufferDesc,
    pbOutput:  PBYTE,
    cbOutput:  DWORD,
    pcbResult: *mut DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptExportKey(
            hKey,
            hExportKey,
            pszBlobType,
            pParameterList,
            pbOutput,
            cbOutput,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptSignHash(
    hKey:  NCRYPT_KEY_HANDLE,
    pPaddingInfo: *mut c_void,
    pbHashValue:  PBYTE,
    cbHashValue:  DWORD,
    pbSignature:  PBYTE,
    cbSignature:  DWORD,
    pcbResult: *mut DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptSignHash(
            hKey,
            pPaddingInfo,
            pbHashValue,
            cbHashValue,
            pbSignature,
            cbSignature,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptVerifySignature(
    hKey:  NCRYPT_KEY_HANDLE,
    pPaddingInfo: *mut c_void,
    pbHashValue:  PBYTE,
    cbHashValue:  DWORD,
    pbSignature:  PBYTE,
    cbSignature:  DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptVerifySignature(
            hKey,
            pPaddingInfo,
            pbHashValue,
            cbHashValue,
            pbSignature,
            cbSignature,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptDeleteKey(
    hKey:  NCRYPT_KEY_HANDLE,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptDeleteKey(
            hKey,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptFreeObject(
    hObject:  NCRYPT_HANDLE    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptFreeObject(
            hObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptIsKeyHandle(
    hKey:  NCRYPT_KEY_HANDLE    
) ->  BOOL
{
    unsafe {
        return NCryptIsKeyHandle(
            hKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptTranslateHandle(
    phProvider: *mut NCRYPT_PROV_HANDLE,
    phKey: *mut NCRYPT_KEY_HANDLE,
    hLegacyProv:  HCRYPTPROV,
    hLegacyKey:  HCRYPTKEY,
    dwLegacyKeySpec:  DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptTranslateHandle(
            phProvider,
            phKey,
            hLegacyProv,
            hLegacyKey,
            dwLegacyKeySpec,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptNotifyChangeKey(
    hProvider:  NCRYPT_PROV_HANDLE,
    phEvent: *mut HANDLE,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptNotifyChangeKey(
            hProvider,
            phEvent,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptSecretAgreement(
    hPrivKey:  NCRYPT_KEY_HANDLE,
    hPubKey:  NCRYPT_KEY_HANDLE,
    phAgreedSecret: *mut NCRYPT_SECRET_HANDLE,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptSecretAgreement(
            hPrivKey,
            hPubKey,
            phAgreedSecret,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptDeriveKey(
    hSharedSecret:  NCRYPT_SECRET_HANDLE,
    pwszKDF:  LPCWSTR,
    pParameterList: *mut NCryptBufferDesc,
    pbDerivedKey:  PBYTE,
    cbDerivedKey:  DWORD,
    pcbResult: *mut DWORD,
    dwFlags:  ULONG    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptDeriveKey(
            hSharedSecret,
            pwszKDF,
            pParameterList,
            pbDerivedKey,
            cbDerivedKey,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptKeyDerivation(
    hKey:  NCRYPT_KEY_HANDLE,
    pParameterList: *mut NCryptBufferDesc,
    pbDerivedKey:  PUCHAR,
    cbDerivedKey:  DWORD,
    pcbResult: *mut DWORD,
    dwFlags:  ULONG    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptKeyDerivation(
            hKey,
            pParameterList,
            pbDerivedKey,
            cbDerivedKey,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptCreateClaim(
    hSubjectKey:  NCRYPT_KEY_HANDLE,
    hAuthorityKey:  NCRYPT_KEY_HANDLE,
    dwClaimType:  DWORD,
    pParameterList: *mut NCryptBufferDesc,
    pbClaimBlob:  PBYTE,
    cbClaimBlob:  DWORD,
    pcbResult: *mut DWORD,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptCreateClaim(
            hSubjectKey,
            hAuthorityKey,
            dwClaimType,
            pParameterList,
            pbClaimBlob,
            cbClaimBlob,
            pcbResult,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NCryptVerifyClaim(
    hSubjectKey:  NCRYPT_KEY_HANDLE,
    hAuthorityKey:  NCRYPT_KEY_HANDLE,
    dwClaimType:  DWORD,
    pParameterList: *mut NCryptBufferDesc,
    pbClaimBlob:  PBYTE,
    cbClaimBlob:  DWORD,
    pOutput: *mut NCryptBufferDesc,
    dwFlags:  DWORD    
) ->  SECURITY_STATUS
{
    unsafe {
        return NCryptVerifyClaim(
            hSubjectKey,
            hAuthorityKey,
            dwClaimType,
            pParameterList,
            pbClaimBlob,
            cbClaimBlob,
            pOutput,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptFormatObject(
    dwCertEncodingType:  DWORD,
    dwFormatType:  DWORD,
    dwFormatStrType:  DWORD,
    pFormatStruct: *mut c_void,
    lpszStructType:  LPCSTR,
    pbEncoded: *const BYTE,
    cbEncoded:  DWORD,
    pbFormat: *mut c_void,
    pcbFormat: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptFormatObject(
            dwCertEncodingType,
            dwFormatType,
            dwFormatStrType,
            pFormatStruct,
            lpszStructType,
            pbEncoded,
            cbEncoded,
            pbFormat,
            pcbFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEncodeObjectEx(
    dwCertEncodingType:  DWORD,
    lpszStructType:  LPCSTR,
    pvStructInfo: *const c_void,
    dwFlags:  DWORD,
    pEncodePara:  PCRYPT_ENCODE_PARA,
    pvEncoded: *mut c_void,
    pcbEncoded: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptEncodeObjectEx(
            dwCertEncodingType,
            lpszStructType,
            pvStructInfo,
            dwFlags,
            pEncodePara,
            pvEncoded,
            pcbEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEncodeObject(
    dwCertEncodingType:  DWORD,
    lpszStructType:  LPCSTR,
    pvStructInfo: *const c_void,
    pbEncoded: *mut BYTE,
    pcbEncoded: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptEncodeObject(
            dwCertEncodingType,
            lpszStructType,
            pvStructInfo,
            pbEncoded,
            pcbEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDecodeObjectEx(
    dwCertEncodingType:  DWORD,
    lpszStructType:  LPCSTR,
    pbEncoded: *const BYTE,
    cbEncoded:  DWORD,
    dwFlags:  DWORD,
    pDecodePara:  PCRYPT_DECODE_PARA,
    pvStructInfo: *mut c_void,
    pcbStructInfo: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptDecodeObjectEx(
            dwCertEncodingType,
            lpszStructType,
            pbEncoded,
            cbEncoded,
            dwFlags,
            pDecodePara,
            pvStructInfo,
            pcbStructInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDecodeObject(
    dwCertEncodingType:  DWORD,
    lpszStructType:  LPCSTR,
    pbEncoded: *const BYTE,
    cbEncoded:  DWORD,
    dwFlags:  DWORD,
    pvStructInfo: *mut c_void,
    pcbStructInfo: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptDecodeObject(
            dwCertEncodingType,
            lpszStructType,
            pbEncoded,
            cbEncoded,
            dwFlags,
            pvStructInfo,
            pcbStructInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptInstallOIDFunctionAddress(
    hModule:  HMODULE,
    dwEncodingType:  DWORD,
    pszFuncName:  LPCSTR,
    cFuncEntry:  DWORD,
    rgFuncEntry: *const CRYPT_OID_FUNC_ENTRY,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptInstallOIDFunctionAddress(
            hModule,
            dwEncodingType,
            pszFuncName,
            cFuncEntry,
            rgFuncEntry,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptInitOIDFunctionSet(
    pszFuncName:  LPCSTR,
    dwFlags:  DWORD    
) ->  HCRYPTOIDFUNCSET
{
    unsafe {
        return CryptInitOIDFunctionSet(
            pszFuncName,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetOIDFunctionAddress(
    hFuncSet:  HCRYPTOIDFUNCSET,
    dwEncodingType:  DWORD,
    pszOID:  LPCSTR,
    dwFlags:  DWORD,
    ppvFuncAddr: *mut *mut c_void,
    phFuncAddr: *mut HCRYPTOIDFUNCADDR    
) ->  BOOL
{
    unsafe {
        return CryptGetOIDFunctionAddress(
            hFuncSet,
            dwEncodingType,
            pszOID,
            dwFlags,
            ppvFuncAddr,
            phFuncAddr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetDefaultOIDDllList(
    hFuncSet:  HCRYPTOIDFUNCSET,
    dwEncodingType:  DWORD,
    pwszDllList: *mut WCHAR,
    pcchDllList: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptGetDefaultOIDDllList(
            hFuncSet,
            dwEncodingType,
            pwszDllList,
            pcchDllList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetDefaultOIDFunctionAddress(
    hFuncSet:  HCRYPTOIDFUNCSET,
    dwEncodingType:  DWORD,
    pwszDll:  LPCWSTR,
    dwFlags:  DWORD,
    ppvFuncAddr: *mut *mut c_void,
    phFuncAddr: *mut HCRYPTOIDFUNCADDR    
) ->  BOOL
{
    unsafe {
        return CryptGetDefaultOIDFunctionAddress(
            hFuncSet,
            dwEncodingType,
            pwszDll,
            dwFlags,
            ppvFuncAddr,
            phFuncAddr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptFreeOIDFunctionAddress(
    hFuncAddr:  HCRYPTOIDFUNCADDR,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptFreeOIDFunctionAddress(
            hFuncAddr,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptRegisterOIDFunction(
    dwEncodingType:  DWORD,
    pszFuncName:  LPCSTR,
    pszOID:  LPCSTR,
    pwszDll:  LPCWSTR,
    pszOverrideFuncName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return CryptRegisterOIDFunction(
            dwEncodingType,
            pszFuncName,
            pszOID,
            pwszDll,
            pszOverrideFuncName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUnregisterOIDFunction(
    dwEncodingType:  DWORD,
    pszFuncName:  LPCSTR,
    pszOID:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return CryptUnregisterOIDFunction(
            dwEncodingType,
            pszFuncName,
            pszOID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptRegisterDefaultOIDFunction(
    dwEncodingType:  DWORD,
    pszFuncName:  LPCSTR,
    dwIndex:  DWORD,
    pwszDll:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return CryptRegisterDefaultOIDFunction(
            dwEncodingType,
            pszFuncName,
            dwIndex,
            pwszDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUnregisterDefaultOIDFunction(
    dwEncodingType:  DWORD,
    pszFuncName:  LPCSTR,
    pwszDll:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return CryptUnregisterDefaultOIDFunction(
            dwEncodingType,
            pszFuncName,
            pwszDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetOIDFunctionValue(
    dwEncodingType:  DWORD,
    pszFuncName:  LPCSTR,
    pszOID:  LPCSTR,
    pwszValueName:  LPCWSTR,
    dwValueType:  DWORD,
    pbValueData: *const BYTE,
    cbValueData:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSetOIDFunctionValue(
            dwEncodingType,
            pszFuncName,
            pszOID,
            pwszValueName,
            dwValueType,
            pbValueData,
            cbValueData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetOIDFunctionValue(
    dwEncodingType:  DWORD,
    pszFuncName:  LPCSTR,
    pszOID:  LPCSTR,
    pwszValueName:  LPCWSTR,
    pdwValueType: *mut DWORD,
    pbValueData: *mut BYTE,
    pcbValueData: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptGetOIDFunctionValue(
            dwEncodingType,
            pszFuncName,
            pszOID,
            pwszValueName,
            pdwValueType,
            pbValueData,
            pcbValueData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEnumOIDFunction(
    dwEncodingType:  DWORD,
    pszFuncName:  LPCSTR,
    pszOID:  LPCSTR,
    dwFlags:  DWORD,
    pvArg: *mut c_void,
    pfnEnumOIDFunc:  PFN_CRYPT_ENUM_OID_FUNC    
) ->  BOOL
{
    unsafe {
        return CryptEnumOIDFunction(
            dwEncodingType,
            pszFuncName,
            pszOID,
            dwFlags,
            pvArg,
            pfnEnumOIDFunc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptFindOIDInfo(
    dwKeyType:  DWORD,
    pvKey: *mut c_void,
    dwGroupId:  DWORD    
) ->  PCCRYPT_OID_INFO
{
    unsafe {
        return CryptFindOIDInfo(
            dwKeyType,
            pvKey,
            dwGroupId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptRegisterOIDInfo(
    pInfo:  PCCRYPT_OID_INFO,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptRegisterOIDInfo(
            pInfo,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUnregisterOIDInfo(
    pInfo:  PCCRYPT_OID_INFO    
) ->  BOOL
{
    unsafe {
        return CryptUnregisterOIDInfo(
            pInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEnumOIDInfo(
    dwGroupId:  DWORD,
    dwFlags:  DWORD,
    pvArg: *mut c_void,
    pfnEnumOIDInfo:  PFN_CRYPT_ENUM_OID_INFO    
) ->  BOOL
{
    unsafe {
        return CryptEnumOIDInfo(
            dwGroupId,
            dwFlags,
            pvArg,
            pfnEnumOIDInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptFindLocalizedName(
    pwszCryptName:  LPCWSTR    
) ->  LPCWSTR
{
    unsafe {
        return CryptFindLocalizedName(
            pwszCryptName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgOpenToEncode(
    dwMsgEncodingType:  DWORD,
    dwFlags:  DWORD,
    dwMsgType:  DWORD,
    pvMsgEncodeInfo: *const c_void,
    pszInnerContentObjID:  LPSTR,
    pStreamInfo:  PCMSG_STREAM_INFO    
) ->  HCRYPTMSG
{
    unsafe {
        return CryptMsgOpenToEncode(
            dwMsgEncodingType,
            dwFlags,
            dwMsgType,
            pvMsgEncodeInfo,
            pszInnerContentObjID,
            pStreamInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgCalculateEncodedLength(
    dwMsgEncodingType:  DWORD,
    dwFlags:  DWORD,
    dwMsgType:  DWORD,
    pvMsgEncodeInfo: *const c_void,
    pszInnerContentObjID:  LPSTR,
    cbData:  DWORD    
) ->  DWORD
{
    unsafe {
        return CryptMsgCalculateEncodedLength(
            dwMsgEncodingType,
            dwFlags,
            dwMsgType,
            pvMsgEncodeInfo,
            pszInnerContentObjID,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgOpenToDecode(
    dwMsgEncodingType:  DWORD,
    dwFlags:  DWORD,
    dwMsgType:  DWORD,
    hCryptProv:  HCRYPTPROV_LEGACY,
    pRecipientInfo:  PCERT_INFO,
    pStreamInfo:  PCMSG_STREAM_INFO    
) ->  HCRYPTMSG
{
    unsafe {
        return CryptMsgOpenToDecode(
            dwMsgEncodingType,
            dwFlags,
            dwMsgType,
            hCryptProv,
            pRecipientInfo,
            pStreamInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgDuplicate(
    hCryptMsg:  HCRYPTMSG    
) ->  HCRYPTMSG
{
    unsafe {
        return CryptMsgDuplicate(
            hCryptMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgClose(
    hCryptMsg:  HCRYPTMSG    
) ->  BOOL
{
    unsafe {
        return CryptMsgClose(
            hCryptMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgUpdate(
    hCryptMsg:  HCRYPTMSG,
    pbData: *const BYTE,
    cbData:  DWORD,
    fFinal:  BOOL    
) ->  BOOL
{
    unsafe {
        return CryptMsgUpdate(
            hCryptMsg,
            pbData,
            cbData,
            fFinal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgGetParam(
    hCryptMsg:  HCRYPTMSG,
    dwParamType:  DWORD,
    dwIndex:  DWORD,
    pvData: *mut c_void,
    pcbData: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptMsgGetParam(
            hCryptMsg,
            dwParamType,
            dwIndex,
            pvData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgControl(
    hCryptMsg:  HCRYPTMSG,
    dwFlags:  DWORD,
    dwCtrlType:  DWORD,
    pvCtrlPara: *const c_void    
) ->  BOOL
{
    unsafe {
        return CryptMsgControl(
            hCryptMsg,
            dwFlags,
            dwCtrlType,
            pvCtrlPara
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgVerifyCountersignatureEncoded(
    hCryptProv:  HCRYPTPROV_LEGACY,
    dwEncodingType:  DWORD,
    pbSignerInfo:  PBYTE,
    cbSignerInfo:  DWORD,
    pbSignerInfoCountersignature:  PBYTE,
    cbSignerInfoCountersignature:  DWORD,
    pciCountersigner:  PCERT_INFO    
) ->  BOOL
{
    unsafe {
        return CryptMsgVerifyCountersignatureEncoded(
            hCryptProv,
            dwEncodingType,
            pbSignerInfo,
            cbSignerInfo,
            pbSignerInfoCountersignature,
            cbSignerInfoCountersignature,
            pciCountersigner
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgVerifyCountersignatureEncodedEx(
    hCryptProv:  HCRYPTPROV_LEGACY,
    dwEncodingType:  DWORD,
    pbSignerInfo:  PBYTE,
    cbSignerInfo:  DWORD,
    pbSignerInfoCountersignature:  PBYTE,
    cbSignerInfoCountersignature:  DWORD,
    dwSignerType:  DWORD,
    pvSigner: *mut c_void,
    dwFlags:  DWORD,
    pvExtra: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CryptMsgVerifyCountersignatureEncodedEx(
            hCryptProv,
            dwEncodingType,
            pbSignerInfo,
            cbSignerInfo,
            pbSignerInfoCountersignature,
            cbSignerInfoCountersignature,
            dwSignerType,
            pvSigner,
            dwFlags,
            pvExtra
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgCountersign(
    hCryptMsg:  HCRYPTMSG,
    dwIndex:  DWORD,
    cCountersigners:  DWORD,
    rgCountersigners:  PCMSG_SIGNER_ENCODE_INFO    
) ->  BOOL
{
    unsafe {
        return CryptMsgCountersign(
            hCryptMsg,
            dwIndex,
            cCountersigners,
            rgCountersigners
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgCountersignEncoded(
    dwEncodingType:  DWORD,
    pbSignerInfo:  PBYTE,
    cbSignerInfo:  DWORD,
    cCountersigners:  DWORD,
    rgCountersigners:  PCMSG_SIGNER_ENCODE_INFO,
    pbCountersignature:  PBYTE,
    pcbCountersignature:  PDWORD    
) ->  BOOL
{
    unsafe {
        return CryptMsgCountersignEncoded(
            dwEncodingType,
            pbSignerInfo,
            cbSignerInfo,
            cCountersigners,
            rgCountersigners,
            pbCountersignature,
            pcbCountersignature
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertOpenStore(
    lpszStoreProvider:  LPCSTR,
    dwEncodingType:  DWORD,
    hCryptProv:  HCRYPTPROV_LEGACY,
    dwFlags:  DWORD,
    pvPara: *const c_void    
) ->  HCERTSTORE
{
    unsafe {
        return CertOpenStore(
            lpszStoreProvider,
            dwEncodingType,
            hCryptProv,
            dwFlags,
            pvPara
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertDuplicateStore(
    hCertStore:  HCERTSTORE    
) ->  HCERTSTORE
{
    unsafe {
        return CertDuplicateStore(
            hCertStore
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSaveStore(
    hCertStore:  HCERTSTORE,
    dwEncodingType:  DWORD,
    dwSaveAs:  DWORD,
    dwSaveTo:  DWORD,
    pvSaveToPara: *mut c_void,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CertSaveStore(
            hCertStore,
            dwEncodingType,
            dwSaveAs,
            dwSaveTo,
            pvSaveToPara,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCloseStore(
    hCertStore:  HCERTSTORE,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CertCloseStore(
            hCertStore,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetSubjectCertificateFromStore(
    hCertStore:  HCERTSTORE,
    dwCertEncodingType:  DWORD,
    pCertId:  PCERT_INFO    
) ->  PCCERT_CONTEXT
{
    unsafe {
        return CertGetSubjectCertificateFromStore(
            hCertStore,
            dwCertEncodingType,
            pCertId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumCertificatesInStore(
    hCertStore:  HCERTSTORE,
    pPrevCertContext:  PCCERT_CONTEXT    
) ->  PCCERT_CONTEXT
{
    unsafe {
        return CertEnumCertificatesInStore(
            hCertStore,
            pPrevCertContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindCertificateInStore(
    hCertStore:  HCERTSTORE,
    dwCertEncodingType:  DWORD,
    dwFindFlags:  DWORD,
    dwFindType:  DWORD,
    pvFindPara: *const c_void,
    pPrevCertContext:  PCCERT_CONTEXT    
) ->  PCCERT_CONTEXT
{
    unsafe {
        return CertFindCertificateInStore(
            hCertStore,
            dwCertEncodingType,
            dwFindFlags,
            dwFindType,
            pvFindPara,
            pPrevCertContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetIssuerCertificateFromStore(
    hCertStore:  HCERTSTORE,
    pSubjectContext:  PCCERT_CONTEXT,
    pPrevIssuerContext:  PCCERT_CONTEXT,
    pdwFlags: *mut DWORD    
) ->  PCCERT_CONTEXT
{
    unsafe {
        return CertGetIssuerCertificateFromStore(
            hCertStore,
            pSubjectContext,
            pPrevIssuerContext,
            pdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertVerifySubjectCertificateContext(
    pSubject:  PCCERT_CONTEXT,
    pIssuer:  PCCERT_CONTEXT,
    pdwFlags: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertVerifySubjectCertificateContext(
            pSubject,
            pIssuer,
            pdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertDuplicateCertificateContext(
    pCertContext:  PCCERT_CONTEXT    
) ->  PCCERT_CONTEXT
{
    unsafe {
        return CertDuplicateCertificateContext(
            pCertContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCreateCertificateContext(
    dwCertEncodingType:  DWORD,
    pbCertEncoded: *const BYTE,
    cbCertEncoded:  DWORD    
) ->  PCCERT_CONTEXT
{
    unsafe {
        return CertCreateCertificateContext(
            dwCertEncodingType,
            pbCertEncoded,
            cbCertEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFreeCertificateContext(
    pCertContext:  PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertFreeCertificateContext(
            pCertContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSetCertificateContextProperty(
    pCertContext:  PCCERT_CONTEXT,
    dwPropId:  DWORD,
    dwFlags:  DWORD,
    pvData: *const c_void    
) ->  BOOL
{
    unsafe {
        return CertSetCertificateContextProperty(
            pCertContext,
            dwPropId,
            dwFlags,
            pvData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetCertificateContextProperty(
    pCertContext:  PCCERT_CONTEXT,
    dwPropId:  DWORD,
    pvData: *mut c_void,
    pcbData: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertGetCertificateContextProperty(
            pCertContext,
            dwPropId,
            pvData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumCertificateContextProperties(
    pCertContext:  PCCERT_CONTEXT,
    dwPropId:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertEnumCertificateContextProperties(
            pCertContext,
            dwPropId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCreateCTLEntryFromCertificateContextProperties(
    pCertContext:  PCCERT_CONTEXT,
    cOptAttr:  DWORD,
    rgOptAttr:  PCRYPT_ATTRIBUTE,
    dwFlags:  DWORD,
    pvReserved: *mut c_void,
    pCtlEntry:  PCTL_ENTRY,
    pcbCtlEntry: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertCreateCTLEntryFromCertificateContextProperties(
            pCertContext,
            cOptAttr,
            rgOptAttr,
            dwFlags,
            pvReserved,
            pCtlEntry,
            pcbCtlEntry
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSetCertificateContextPropertiesFromCTLEntry(
    pCertContext:  PCCERT_CONTEXT,
    pCtlEntry:  PCTL_ENTRY,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CertSetCertificateContextPropertiesFromCTLEntry(
            pCertContext,
            pCtlEntry,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetCRLFromStore(
    hCertStore:  HCERTSTORE,
    pIssuerContext:  PCCERT_CONTEXT,
    pPrevCrlContext:  PCCRL_CONTEXT,
    pdwFlags: *mut DWORD    
) ->  PCCRL_CONTEXT
{
    unsafe {
        return CertGetCRLFromStore(
            hCertStore,
            pIssuerContext,
            pPrevCrlContext,
            pdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumCRLsInStore(
    hCertStore:  HCERTSTORE,
    pPrevCrlContext:  PCCRL_CONTEXT    
) ->  PCCRL_CONTEXT
{
    unsafe {
        return CertEnumCRLsInStore(
            hCertStore,
            pPrevCrlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindCRLInStore(
    hCertStore:  HCERTSTORE,
    dwCertEncodingType:  DWORD,
    dwFindFlags:  DWORD,
    dwFindType:  DWORD,
    pvFindPara: *const c_void,
    pPrevCrlContext:  PCCRL_CONTEXT    
) ->  PCCRL_CONTEXT
{
    unsafe {
        return CertFindCRLInStore(
            hCertStore,
            dwCertEncodingType,
            dwFindFlags,
            dwFindType,
            pvFindPara,
            pPrevCrlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertDuplicateCRLContext(
    pCrlContext:  PCCRL_CONTEXT    
) ->  PCCRL_CONTEXT
{
    unsafe {
        return CertDuplicateCRLContext(
            pCrlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCreateCRLContext(
    dwCertEncodingType:  DWORD,
    pbCrlEncoded: *const BYTE,
    cbCrlEncoded:  DWORD    
) ->  PCCRL_CONTEXT
{
    unsafe {
        return CertCreateCRLContext(
            dwCertEncodingType,
            pbCrlEncoded,
            cbCrlEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFreeCRLContext(
    pCrlContext:  PCCRL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertFreeCRLContext(
            pCrlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSetCRLContextProperty(
    pCrlContext:  PCCRL_CONTEXT,
    dwPropId:  DWORD,
    dwFlags:  DWORD,
    pvData: *const c_void    
) ->  BOOL
{
    unsafe {
        return CertSetCRLContextProperty(
            pCrlContext,
            dwPropId,
            dwFlags,
            pvData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetCRLContextProperty(
    pCrlContext:  PCCRL_CONTEXT,
    dwPropId:  DWORD,
    pvData: *mut c_void,
    pcbData: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertGetCRLContextProperty(
            pCrlContext,
            dwPropId,
            pvData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumCRLContextProperties(
    pCrlContext:  PCCRL_CONTEXT,
    dwPropId:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertEnumCRLContextProperties(
            pCrlContext,
            dwPropId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindCertificateInCRL(
    pCert:  PCCERT_CONTEXT,
    pCrlContext:  PCCRL_CONTEXT,
    dwFlags:  DWORD,
    pvReserved: *mut c_void,
    ppCrlEntry: *mut PCRL_ENTRY    
) ->  BOOL
{
    unsafe {
        return CertFindCertificateInCRL(
            pCert,
            pCrlContext,
            dwFlags,
            pvReserved,
            ppCrlEntry
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertIsValidCRLForCertificate(
    pCert:  PCCERT_CONTEXT,
    pCrl:  PCCRL_CONTEXT,
    dwFlags:  DWORD,
    pvReserved: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CertIsValidCRLForCertificate(
            pCert,
            pCrl,
            dwFlags,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddEncodedCertificateToStore(
    hCertStore:  HCERTSTORE,
    dwCertEncodingType:  DWORD,
    pbCertEncoded: *const BYTE,
    cbCertEncoded:  DWORD,
    dwAddDisposition:  DWORD,
    ppCertContext: *mut PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddEncodedCertificateToStore(
            hCertStore,
            dwCertEncodingType,
            pbCertEncoded,
            cbCertEncoded,
            dwAddDisposition,
            ppCertContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddCertificateContextToStore(
    hCertStore:  HCERTSTORE,
    pCertContext:  PCCERT_CONTEXT,
    dwAddDisposition:  DWORD,
    ppStoreContext: *mut PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddCertificateContextToStore(
            hCertStore,
            pCertContext,
            dwAddDisposition,
            ppStoreContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddSerializedElementToStore(
    hCertStore:  HCERTSTORE,
    pbElement: *const BYTE,
    cbElement:  DWORD,
    dwAddDisposition:  DWORD,
    dwFlags:  DWORD,
    dwContextTypeFlags:  DWORD,
    pdwContextType: *mut DWORD,
    ppvContext: *mut *mut c_void    
) ->  BOOL
{
    unsafe {
        return CertAddSerializedElementToStore(
            hCertStore,
            pbElement,
            cbElement,
            dwAddDisposition,
            dwFlags,
            dwContextTypeFlags,
            pdwContextType,
            ppvContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertDeleteCertificateFromStore(
    pCertContext:  PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertDeleteCertificateFromStore(
            pCertContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddEncodedCRLToStore(
    hCertStore:  HCERTSTORE,
    dwCertEncodingType:  DWORD,
    pbCrlEncoded: *const BYTE,
    cbCrlEncoded:  DWORD,
    dwAddDisposition:  DWORD,
    ppCrlContext: *mut PCCRL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddEncodedCRLToStore(
            hCertStore,
            dwCertEncodingType,
            pbCrlEncoded,
            cbCrlEncoded,
            dwAddDisposition,
            ppCrlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddCRLContextToStore(
    hCertStore:  HCERTSTORE,
    pCrlContext:  PCCRL_CONTEXT,
    dwAddDisposition:  DWORD,
    ppStoreContext: *mut PCCRL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddCRLContextToStore(
            hCertStore,
            pCrlContext,
            dwAddDisposition,
            ppStoreContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertDeleteCRLFromStore(
    pCrlContext:  PCCRL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertDeleteCRLFromStore(
            pCrlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSerializeCertificateStoreElement(
    pCertContext:  PCCERT_CONTEXT,
    dwFlags:  DWORD,
    pbElement: *mut BYTE,
    pcbElement: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertSerializeCertificateStoreElement(
            pCertContext,
            dwFlags,
            pbElement,
            pcbElement
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSerializeCRLStoreElement(
    pCrlContext:  PCCRL_CONTEXT,
    dwFlags:  DWORD,
    pbElement: *mut BYTE,
    pcbElement: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertSerializeCRLStoreElement(
            pCrlContext,
            dwFlags,
            pbElement,
            pcbElement
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertDuplicateCTLContext(
    pCtlContext:  PCCTL_CONTEXT    
) ->  PCCTL_CONTEXT
{
    unsafe {
        return CertDuplicateCTLContext(
            pCtlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCreateCTLContext(
    dwMsgAndCertEncodingType:  DWORD,
    pbCtlEncoded: *const BYTE,
    cbCtlEncoded:  DWORD    
) ->  PCCTL_CONTEXT
{
    unsafe {
        return CertCreateCTLContext(
            dwMsgAndCertEncodingType,
            pbCtlEncoded,
            cbCtlEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFreeCTLContext(
    pCtlContext:  PCCTL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertFreeCTLContext(
            pCtlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSetCTLContextProperty(
    pCtlContext:  PCCTL_CONTEXT,
    dwPropId:  DWORD,
    dwFlags:  DWORD,
    pvData: *const c_void    
) ->  BOOL
{
    unsafe {
        return CertSetCTLContextProperty(
            pCtlContext,
            dwPropId,
            dwFlags,
            pvData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetCTLContextProperty(
    pCtlContext:  PCCTL_CONTEXT,
    dwPropId:  DWORD,
    pvData: *mut c_void,
    pcbData: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertGetCTLContextProperty(
            pCtlContext,
            dwPropId,
            pvData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumCTLContextProperties(
    pCtlContext:  PCCTL_CONTEXT,
    dwPropId:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertEnumCTLContextProperties(
            pCtlContext,
            dwPropId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumCTLsInStore(
    hCertStore:  HCERTSTORE,
    pPrevCtlContext:  PCCTL_CONTEXT    
) ->  PCCTL_CONTEXT
{
    unsafe {
        return CertEnumCTLsInStore(
            hCertStore,
            pPrevCtlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindSubjectInCTL(
    dwEncodingType:  DWORD,
    dwSubjectType:  DWORD,
    pvSubject: *mut c_void,
    pCtlContext:  PCCTL_CONTEXT,
    dwFlags:  DWORD    
) ->  PCTL_ENTRY
{
    unsafe {
        return CertFindSubjectInCTL(
            dwEncodingType,
            dwSubjectType,
            pvSubject,
            pCtlContext,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindCTLInStore(
    hCertStore:  HCERTSTORE,
    dwMsgAndCertEncodingType:  DWORD,
    dwFindFlags:  DWORD,
    dwFindType:  DWORD,
    pvFindPara: *const c_void,
    pPrevCtlContext:  PCCTL_CONTEXT    
) ->  PCCTL_CONTEXT
{
    unsafe {
        return CertFindCTLInStore(
            hCertStore,
            dwMsgAndCertEncodingType,
            dwFindFlags,
            dwFindType,
            pvFindPara,
            pPrevCtlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddEncodedCTLToStore(
    hCertStore:  HCERTSTORE,
    dwMsgAndCertEncodingType:  DWORD,
    pbCtlEncoded: *const BYTE,
    cbCtlEncoded:  DWORD,
    dwAddDisposition:  DWORD,
    ppCtlContext: *mut PCCTL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddEncodedCTLToStore(
            hCertStore,
            dwMsgAndCertEncodingType,
            pbCtlEncoded,
            cbCtlEncoded,
            dwAddDisposition,
            ppCtlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddCTLContextToStore(
    hCertStore:  HCERTSTORE,
    pCtlContext:  PCCTL_CONTEXT,
    dwAddDisposition:  DWORD,
    ppStoreContext: *mut PCCTL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddCTLContextToStore(
            hCertStore,
            pCtlContext,
            dwAddDisposition,
            ppStoreContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSerializeCTLStoreElement(
    pCtlContext:  PCCTL_CONTEXT,
    dwFlags:  DWORD,
    pbElement: *mut BYTE,
    pcbElement: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertSerializeCTLStoreElement(
            pCtlContext,
            dwFlags,
            pbElement,
            pcbElement
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertDeleteCTLFromStore(
    pCtlContext:  PCCTL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertDeleteCTLFromStore(
            pCtlContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddCertificateLinkToStore(
    hCertStore:  HCERTSTORE,
    pCertContext:  PCCERT_CONTEXT,
    dwAddDisposition:  DWORD,
    ppStoreContext: *mut PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddCertificateLinkToStore(
            hCertStore,
            pCertContext,
            dwAddDisposition,
            ppStoreContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddCRLLinkToStore(
    hCertStore:  HCERTSTORE,
    pCrlContext:  PCCRL_CONTEXT,
    dwAddDisposition:  DWORD,
    ppStoreContext: *mut PCCRL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddCRLLinkToStore(
            hCertStore,
            pCrlContext,
            dwAddDisposition,
            ppStoreContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddCTLLinkToStore(
    hCertStore:  HCERTSTORE,
    pCtlContext:  PCCTL_CONTEXT,
    dwAddDisposition:  DWORD,
    ppStoreContext: *mut PCCTL_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertAddCTLLinkToStore(
            hCertStore,
            pCtlContext,
            dwAddDisposition,
            ppStoreContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddStoreToCollection(
    hCollectionStore:  HCERTSTORE,
    hSiblingStore:  HCERTSTORE,
    dwUpdateFlags:  DWORD,
    dwPriority:  DWORD    
) ->  BOOL
{
    unsafe {
        return CertAddStoreToCollection(
            hCollectionStore,
            hSiblingStore,
            dwUpdateFlags,
            dwPriority
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertRemoveStoreFromCollection(
    hCollectionStore:  HCERTSTORE,
    hSiblingStore:  HCERTSTORE    
)
{
    unsafe {
        return CertRemoveStoreFromCollection(
            hCollectionStore,
            hSiblingStore
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertControlStore(
    hCertStore:  HCERTSTORE,
    dwFlags:  DWORD,
    dwCtrlType:  DWORD,
    pvCtrlPara: *const c_void    
) ->  BOOL
{
    unsafe {
        return CertControlStore(
            hCertStore,
            dwFlags,
            dwCtrlType,
            pvCtrlPara
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSetStoreProperty(
    hCertStore:  HCERTSTORE,
    dwPropId:  DWORD,
    dwFlags:  DWORD,
    pvData: *const c_void    
) ->  BOOL
{
    unsafe {
        return CertSetStoreProperty(
            hCertStore,
            dwPropId,
            dwFlags,
            pvData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetStoreProperty(
    hCertStore:  HCERTSTORE,
    dwPropId:  DWORD,
    pvData: *mut c_void,
    pcbData: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertGetStoreProperty(
            hCertStore,
            dwPropId,
            pvData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCreateContext(
    dwContextType:  DWORD,
    dwEncodingType:  DWORD,
    pbEncoded: *const BYTE,
    cbEncoded:  DWORD,
    dwFlags:  DWORD,
    pCreatePara:  PCERT_CREATE_CONTEXT_PARA    
) -> *const c_void
{
    unsafe {
        return CertCreateContext(
            dwContextType,
            dwEncodingType,
            pbEncoded,
            cbEncoded,
            dwFlags,
            pCreatePara
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertRegisterSystemStore(
    pvSystemStore: *const c_void,
    dwFlags:  DWORD,
    pStoreInfo:  PCERT_SYSTEM_STORE_INFO,
    pvReserved: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CertRegisterSystemStore(
            pvSystemStore,
            dwFlags,
            pStoreInfo,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertRegisterPhysicalStore(
    pvSystemStore: *const c_void,
    dwFlags:  DWORD,
    pwszStoreName:  LPCWSTR,
    pStoreInfo:  PCERT_PHYSICAL_STORE_INFO,
    pvReserved: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CertRegisterPhysicalStore(
            pvSystemStore,
            dwFlags,
            pwszStoreName,
            pStoreInfo,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertUnregisterSystemStore(
    pvSystemStore: *const c_void,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CertUnregisterSystemStore(
            pvSystemStore,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertUnregisterPhysicalStore(
    pvSystemStore: *const c_void,
    dwFlags:  DWORD,
    pwszStoreName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return CertUnregisterPhysicalStore(
            pvSystemStore,
            dwFlags,
            pwszStoreName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumSystemStoreLocation(
    dwFlags:  DWORD,
    pvArg: *mut c_void,
    pfnEnum:  PFN_CERT_ENUM_SYSTEM_STORE_LOCATION    
) ->  BOOL
{
    unsafe {
        return CertEnumSystemStoreLocation(
            dwFlags,
            pvArg,
            pfnEnum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumSystemStore(
    dwFlags:  DWORD,
    pvSystemStoreLocationPara: *mut c_void,
    pvArg: *mut c_void,
    pfnEnum:  PFN_CERT_ENUM_SYSTEM_STORE    
) ->  BOOL
{
    unsafe {
        return CertEnumSystemStore(
            dwFlags,
            pvSystemStoreLocationPara,
            pvArg,
            pfnEnum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumPhysicalStore(
    pvSystemStore: *const c_void,
    dwFlags:  DWORD,
    pvArg: *mut c_void,
    pfnEnum:  PFN_CERT_ENUM_PHYSICAL_STORE    
) ->  BOOL
{
    unsafe {
        return CertEnumPhysicalStore(
            pvSystemStore,
            dwFlags,
            pvArg,
            pfnEnum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetEnhancedKeyUsage(
    pCertContext:  PCCERT_CONTEXT,
    dwFlags:  DWORD,
    pUsage:  PCERT_ENHKEY_USAGE,
    pcbUsage: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertGetEnhancedKeyUsage(
            pCertContext,
            dwFlags,
            pUsage,
            pcbUsage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSetEnhancedKeyUsage(
    pCertContext:  PCCERT_CONTEXT,
    pUsage:  PCERT_ENHKEY_USAGE    
) ->  BOOL
{
    unsafe {
        return CertSetEnhancedKeyUsage(
            pCertContext,
            pUsage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddEnhancedKeyUsageIdentifier(
    pCertContext:  PCCERT_CONTEXT,
    pszUsageIdentifier:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return CertAddEnhancedKeyUsageIdentifier(
            pCertContext,
            pszUsageIdentifier
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertRemoveEnhancedKeyUsageIdentifier(
    pCertContext:  PCCERT_CONTEXT,
    pszUsageIdentifier:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return CertRemoveEnhancedKeyUsageIdentifier(
            pCertContext,
            pszUsageIdentifier
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetValidUsages(
    cCerts:  DWORD,
    rghCerts: *mut PCCERT_CONTEXT,
    cNumOIDs: *mut c_int,
    rghOIDs: *mut LPSTR,
    pcbOIDs: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CertGetValidUsages(
            cCerts,
            rghCerts,
            cNumOIDs,
            rghOIDs,
            pcbOIDs
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgGetAndVerifySigner(
    hCryptMsg:  HCRYPTMSG,
    cSignerStore:  DWORD,
    rghSignerStore: *mut HCERTSTORE,
    dwFlags:  DWORD,
    ppSigner: *mut PCCERT_CONTEXT,
    pdwSignerIndex: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptMsgGetAndVerifySigner(
            hCryptMsg,
            cSignerStore,
            rghSignerStore,
            dwFlags,
            ppSigner,
            pdwSignerIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgSignCTL(
    dwMsgEncodingType:  DWORD,
    pbCtlContent: *mut BYTE,
    cbCtlContent:  DWORD,
    pSignInfo:  PCMSG_SIGNED_ENCODE_INFO,
    dwFlags:  DWORD,
    pbEncoded: *mut BYTE,
    pcbEncoded: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptMsgSignCTL(
            dwMsgEncodingType,
            pbCtlContent,
            cbCtlContent,
            pSignInfo,
            dwFlags,
            pbEncoded,
            pcbEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMsgEncodeAndSignCTL(
    dwMsgEncodingType:  DWORD,
    pCtlInfo:  PCTL_INFO,
    pSignInfo:  PCMSG_SIGNED_ENCODE_INFO,
    dwFlags:  DWORD,
    pbEncoded: *mut BYTE,
    pcbEncoded: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptMsgEncodeAndSignCTL(
            dwMsgEncodingType,
            pCtlInfo,
            pSignInfo,
            dwFlags,
            pbEncoded,
            pcbEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindSubjectInSortedCTL(
    pSubjectIdentifier:  PCRYPT_DATA_BLOB,
    pCtlContext:  PCCTL_CONTEXT,
    dwFlags:  DWORD,
    pvReserved: *mut c_void,
    pEncodedAttributes:  PCRYPT_DER_BLOB    
) ->  BOOL
{
    unsafe {
        return CertFindSubjectInSortedCTL(
            pSubjectIdentifier,
            pCtlContext,
            dwFlags,
            pvReserved,
            pEncodedAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertEnumSubjectInSortedCTL(
    pCtlContext:  PCCTL_CONTEXT,
    ppvNextSubject: *mut *mut c_void,
    pSubjectIdentifier:  PCRYPT_DER_BLOB,
    pEncodedAttributes:  PCRYPT_DER_BLOB    
) ->  BOOL
{
    unsafe {
        return CertEnumSubjectInSortedCTL(
            pCtlContext,
            ppvNextSubject,
            pSubjectIdentifier,
            pEncodedAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertVerifyCTLUsage(
    dwEncodingType:  DWORD,
    dwSubjectType:  DWORD,
    pvSubject: *mut c_void,
    pSubjectUsage:  PCTL_USAGE,
    dwFlags:  DWORD,
    pVerifyUsagePara:  PCTL_VERIFY_USAGE_PARA,
    pVerifyUsageStatus:  PCTL_VERIFY_USAGE_STATUS    
) ->  BOOL
{
    unsafe {
        return CertVerifyCTLUsage(
            dwEncodingType,
            dwSubjectType,
            pvSubject,
            pSubjectUsage,
            dwFlags,
            pVerifyUsagePara,
            pVerifyUsageStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertVerifyRevocation(
    dwEncodingType:  DWORD,
    dwRevType:  DWORD,
    cContext:  DWORD,
    rgpvContext: *mut PVOID,
    dwFlags:  DWORD,
    pRevPara:  PCERT_REVOCATION_PARA,
    pRevStatus:  PCERT_REVOCATION_STATUS    
) ->  BOOL
{
    unsafe {
        return CertVerifyRevocation(
            dwEncodingType,
            dwRevType,
            cContext,
            rgpvContext,
            dwFlags,
            pRevPara,
            pRevStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCompareIntegerBlob(
    pInt1:  PCRYPT_INTEGER_BLOB,
    pInt2:  PCRYPT_INTEGER_BLOB    
) ->  BOOL
{
    unsafe {
        return CertCompareIntegerBlob(
            pInt1,
            pInt2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCompareCertificate(
    dwCertEncodingType:  DWORD,
    pCertId1:  PCERT_INFO,
    pCertId2:  PCERT_INFO    
) ->  BOOL
{
    unsafe {
        return CertCompareCertificate(
            dwCertEncodingType,
            pCertId1,
            pCertId2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCompareCertificateName(
    dwCertEncodingType:  DWORD,
    pCertName1:  PCERT_NAME_BLOB,
    pCertName2:  PCERT_NAME_BLOB    
) ->  BOOL
{
    unsafe {
        return CertCompareCertificateName(
            dwCertEncodingType,
            pCertName1,
            pCertName2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertIsRDNAttrsInCertificateName(
    dwCertEncodingType:  DWORD,
    dwFlags:  DWORD,
    pCertName:  PCERT_NAME_BLOB,
    pRDN:  PCERT_RDN    
) ->  BOOL
{
    unsafe {
        return CertIsRDNAttrsInCertificateName(
            dwCertEncodingType,
            dwFlags,
            pCertName,
            pRDN
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertComparePublicKeyInfo(
    dwCertEncodingType:  DWORD,
    pPublicKey1:  PCERT_PUBLIC_KEY_INFO,
    pPublicKey2:  PCERT_PUBLIC_KEY_INFO    
) ->  BOOL
{
    unsafe {
        return CertComparePublicKeyInfo(
            dwCertEncodingType,
            pPublicKey1,
            pPublicKey2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetPublicKeyLength(
    dwCertEncodingType:  DWORD,
    pPublicKey:  PCERT_PUBLIC_KEY_INFO    
) ->  DWORD
{
    unsafe {
        return CertGetPublicKeyLength(
            dwCertEncodingType,
            pPublicKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifyCertificateSignature(
    hCryptProv:  HCRYPTPROV_LEGACY,
    dwCertEncodingType:  DWORD,
    pbEncoded: *const BYTE,
    cbEncoded:  DWORD,
    pPublicKey:  PCERT_PUBLIC_KEY_INFO    
) ->  BOOL
{
    unsafe {
        return CryptVerifyCertificateSignature(
            hCryptProv,
            dwCertEncodingType,
            pbEncoded,
            cbEncoded,
            pPublicKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifyCertificateSignatureEx(
    hCryptProv:  HCRYPTPROV_LEGACY,
    dwCertEncodingType:  DWORD,
    dwSubjectType:  DWORD,
    pvSubject: *mut c_void,
    dwIssuerType:  DWORD,
    pvIssuer: *mut c_void,
    dwFlags:  DWORD,
    pvExtra: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CryptVerifyCertificateSignatureEx(
            hCryptProv,
            dwCertEncodingType,
            dwSubjectType,
            pvSubject,
            dwIssuerType,
            pvIssuer,
            dwFlags,
            pvExtra
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertIsStrongHashToSign(
    pStrongSignPara:  PCCERT_STRONG_SIGN_PARA,
    pwszCNGHashAlgid:  LPCWSTR,
    pSigningCert:  PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertIsStrongHashToSign(
            pStrongSignPara,
            pwszCNGHashAlgid,
            pSigningCert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptHashToBeSigned(
    hCryptProv:  HCRYPTPROV_LEGACY,
    dwCertEncodingType:  DWORD,
    pbEncoded: *const BYTE,
    cbEncoded:  DWORD,
    pbComputedHash: *mut BYTE,
    pcbComputedHash: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptHashToBeSigned(
            hCryptProv,
            dwCertEncodingType,
            pbEncoded,
            cbEncoded,
            pbComputedHash,
            pcbComputedHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptHashCertificate(
    hCryptProv:  HCRYPTPROV_LEGACY,
    Algid:  ALG_ID,
    dwFlags:  DWORD,
    pbEncoded: *const BYTE,
    cbEncoded:  DWORD,
    pbComputedHash: *mut BYTE,
    pcbComputedHash: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptHashCertificate(
            hCryptProv,
            Algid,
            dwFlags,
            pbEncoded,
            cbEncoded,
            pbComputedHash,
            pcbComputedHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptHashCertificate2(
    pwszCNGHashAlgid:  LPCWSTR,
    dwFlags:  DWORD,
    pvReserved: *mut c_void,
    pbEncoded: *const BYTE,
    cbEncoded:  DWORD,
    pbComputedHash: *mut BYTE,
    pcbComputedHash: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptHashCertificate2(
            pwszCNGHashAlgid,
            dwFlags,
            pvReserved,
            pbEncoded,
            cbEncoded,
            pbComputedHash,
            pcbComputedHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSignCertificate(
    hCryptProvOrNCryptKey:  HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
    dwKeySpec:  DWORD,
    dwCertEncodingType:  DWORD,
    pbEncodedToBeSigned: *const BYTE,
    cbEncodedToBeSigned:  DWORD,
    pSignatureAlgorithm:  PCRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: *const c_void,
    pbSignature: *mut BYTE,
    pcbSignature: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSignCertificate(
            hCryptProvOrNCryptKey,
            dwKeySpec,
            dwCertEncodingType,
            pbEncodedToBeSigned,
            cbEncodedToBeSigned,
            pSignatureAlgorithm,
            pvHashAuxInfo,
            pbSignature,
            pcbSignature
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSignAndEncodeCertificate(
    hCryptProvOrNCryptKey:  HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
    dwKeySpec:  DWORD,
    dwCertEncodingType:  DWORD,
    lpszStructType:  LPCSTR,
    pvStructInfo: *const c_void,
    pSignatureAlgorithm:  PCRYPT_ALGORITHM_IDENTIFIER,
    pvHashAuxInfo: *const c_void,
    pbEncoded: *mut BYTE,
    pcbEncoded: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSignAndEncodeCertificate(
            hCryptProvOrNCryptKey,
            dwKeySpec,
            dwCertEncodingType,
            lpszStructType,
            pvStructInfo,
            pSignatureAlgorithm,
            pvHashAuxInfo,
            pbEncoded,
            pcbEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertVerifyTimeValidity(
    pTimeToVerify:  LPFILETIME,
    pCertInfo:  PCERT_INFO    
) ->  LONG
{
    unsafe {
        return CertVerifyTimeValidity(
            pTimeToVerify,
            pCertInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertVerifyCRLTimeValidity(
    pTimeToVerify:  LPFILETIME,
    pCrlInfo:  PCRL_INFO    
) ->  LONG
{
    unsafe {
        return CertVerifyCRLTimeValidity(
            pTimeToVerify,
            pCrlInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertVerifyValidityNesting(
    pSubjectInfo:  PCERT_INFO,
    pIssuerInfo:  PCERT_INFO    
) ->  BOOL
{
    unsafe {
        return CertVerifyValidityNesting(
            pSubjectInfo,
            pIssuerInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertVerifyCRLRevocation(
    dwCertEncodingType:  DWORD,
    pCertId:  PCERT_INFO,
    cCrlInfo:  DWORD,
    rgpCrlInfo: *mut PCRL_INFO    
) ->  BOOL
{
    unsafe {
        return CertVerifyCRLRevocation(
            dwCertEncodingType,
            pCertId,
            cCrlInfo,
            rgpCrlInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAlgIdToOID(
    dwAlgId:  DWORD    
) ->  LPCSTR
{
    unsafe {
        return CertAlgIdToOID(
            dwAlgId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertOIDToAlgId(
    pszObjId:  LPCSTR    
) ->  DWORD
{
    unsafe {
        return CertOIDToAlgId(
            pszObjId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindExtension(
    pszObjId:  LPCSTR,
    cExtensions:  DWORD,
    rgExtensions: *mut CERT_EXTENSION    
) ->  PCERT_EXTENSION
{
    unsafe {
        return CertFindExtension(
            pszObjId,
            cExtensions,
            rgExtensions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindAttribute(
    pszObjId:  LPCSTR,
    cAttr:  DWORD,
    rgAttr: *mut CRYPT_ATTRIBUTE    
) ->  PCRYPT_ATTRIBUTE
{
    unsafe {
        return CertFindAttribute(
            pszObjId,
            cAttr,
            rgAttr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindRDNAttr(
    pszObjId:  LPCSTR,
    pName:  PCERT_NAME_INFO    
) ->  PCERT_RDN_ATTR
{
    unsafe {
        return CertFindRDNAttr(
            pszObjId,
            pName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetIntendedKeyUsage(
    dwCertEncodingType:  DWORD,
    pCertInfo:  PCERT_INFO,
    pbKeyUsage: *mut BYTE,
    cbKeyUsage:  DWORD    
) ->  BOOL
{
    unsafe {
        return CertGetIntendedKeyUsage(
            dwCertEncodingType,
            pCertInfo,
            pbKeyUsage,
            cbKeyUsage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptInstallDefaultContext(
    hCryptProv:  HCRYPTPROV,
    dwDefaultType:  DWORD,
    pvDefaultPara: *const c_void,
    dwFlags:  DWORD,
    pvReserved: *mut c_void,
    phDefaultContext: *mut HCRYPTDEFAULTCONTEXT    
) ->  BOOL
{
    unsafe {
        return CryptInstallDefaultContext(
            hCryptProv,
            dwDefaultType,
            pvDefaultPara,
            dwFlags,
            pvReserved,
            phDefaultContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUninstallDefaultContext(
    hDefaultContext:  HCRYPTDEFAULTCONTEXT,
    dwFlags:  DWORD,
    pvReserved: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CryptUninstallDefaultContext(
            hDefaultContext,
            dwFlags,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptExportPublicKeyInfo(
    hCryptProvOrNCryptKey:  HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
    dwKeySpec:  DWORD,
    dwCertEncodingType:  DWORD,
    pInfo:  PCERT_PUBLIC_KEY_INFO,
    pcbInfo: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptExportPublicKeyInfo(
            hCryptProvOrNCryptKey,
            dwKeySpec,
            dwCertEncodingType,
            pInfo,
            pcbInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptExportPublicKeyInfoEx(
    hCryptProvOrNCryptKey:  HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
    dwKeySpec:  DWORD,
    dwCertEncodingType:  DWORD,
    pszPublicKeyObjId:  LPSTR,
    dwFlags:  DWORD,
    pvAuxInfo: *mut c_void,
    pInfo:  PCERT_PUBLIC_KEY_INFO,
    pcbInfo: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptExportPublicKeyInfoEx(
            hCryptProvOrNCryptKey,
            dwKeySpec,
            dwCertEncodingType,
            pszPublicKeyObjId,
            dwFlags,
            pvAuxInfo,
            pInfo,
            pcbInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptExportPublicKeyInfoFromBCryptKeyHandle(
    hBCryptKey:  BCRYPT_KEY_HANDLE,
    dwCertEncodingType:  DWORD,
    pszPublicKeyObjId:  LPSTR,
    dwFlags:  DWORD,
    pvAuxInfo: *mut c_void,
    pInfo:  PCERT_PUBLIC_KEY_INFO,
    pcbInfo: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptExportPublicKeyInfoFromBCryptKeyHandle(
            hBCryptKey,
            dwCertEncodingType,
            pszPublicKeyObjId,
            dwFlags,
            pvAuxInfo,
            pInfo,
            pcbInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptImportPublicKeyInfo(
    hCryptProv:  HCRYPTPROV,
    dwCertEncodingType:  DWORD,
    pInfo:  PCERT_PUBLIC_KEY_INFO,
    phKey: *mut HCRYPTKEY    
) ->  BOOL
{
    unsafe {
        return CryptImportPublicKeyInfo(
            hCryptProv,
            dwCertEncodingType,
            pInfo,
            phKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptImportPublicKeyInfoEx(
    hCryptProv:  HCRYPTPROV,
    dwCertEncodingType:  DWORD,
    pInfo:  PCERT_PUBLIC_KEY_INFO,
    aiKeyAlg:  ALG_ID,
    dwFlags:  DWORD,
    pvAuxInfo: *mut c_void,
    phKey: *mut HCRYPTKEY    
) ->  BOOL
{
    unsafe {
        return CryptImportPublicKeyInfoEx(
            hCryptProv,
            dwCertEncodingType,
            pInfo,
            aiKeyAlg,
            dwFlags,
            pvAuxInfo,
            phKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptImportPublicKeyInfoEx2(
    dwCertEncodingType:  DWORD,
    pInfo:  PCERT_PUBLIC_KEY_INFO,
    dwFlags:  DWORD,
    pvAuxInfo: *mut c_void,
    phKey: *mut BCRYPT_KEY_HANDLE    
) ->  BOOL
{
    unsafe {
        return CryptImportPublicKeyInfoEx2(
            dwCertEncodingType,
            pInfo,
            dwFlags,
            pvAuxInfo,
            phKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptAcquireCertificatePrivateKey(
    pCert:  PCCERT_CONTEXT,
    dwFlags:  DWORD,
    pvParameters: *mut c_void,
    phCryptProvOrNCryptKey: *mut HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
    pdwKeySpec: *mut DWORD,
    pfCallerFreeProvOrNCryptKey: *mut BOOL    
) ->  BOOL
{
    unsafe {
        return CryptAcquireCertificatePrivateKey(
            pCert,
            dwFlags,
            pvParameters,
            phCryptProvOrNCryptKey,
            pdwKeySpec,
            pfCallerFreeProvOrNCryptKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptFindCertificateKeyProvInfo(
    pCert:  PCCERT_CONTEXT,
    dwFlags:  DWORD,
    pvReserved: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CryptFindCertificateKeyProvInfo(
            pCert,
            dwFlags,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptImportPKCS8(
    sPrivateKeyAndParams:  CRYPT_PKCS8_IMPORT_PARAMS,
    dwFlags:  DWORD,
    phCryptProv: *mut HCRYPTPROV,
    pvAuxInfo: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CryptImportPKCS8(
            sPrivateKeyAndParams,
            dwFlags,
            phCryptProv,
            pvAuxInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptExportPKCS8(
    hCryptProv:  HCRYPTPROV,
    dwKeySpec:  DWORD,
    pszPrivateKeyObjId:  LPSTR,
    dwFlags:  DWORD,
    pvAuxInfo: *mut c_void,
    pbPrivateKeyBlob: *mut BYTE,
    pcbPrivateKeyBlob: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptExportPKCS8(
            hCryptProv,
            dwKeySpec,
            pszPrivateKeyObjId,
            dwFlags,
            pvAuxInfo,
            pbPrivateKeyBlob,
            pcbPrivateKeyBlob
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptExportPKCS8Ex(
    psExportParams: *mut CRYPT_PKCS8_EXPORT_PARAMS,
    dwFlags:  DWORD,
    pvAuxInfo: *mut c_void,
    pbPrivateKeyBlob: *mut BYTE,
    pcbPrivateKeyBlob: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptExportPKCS8Ex(
            psExportParams,
            dwFlags,
            pvAuxInfo,
            pbPrivateKeyBlob,
            pcbPrivateKeyBlob
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptHashPublicKeyInfo(
    hCryptProv:  HCRYPTPROV_LEGACY,
    Algid:  ALG_ID,
    dwFlags:  DWORD,
    dwCertEncodingType:  DWORD,
    pInfo:  PCERT_PUBLIC_KEY_INFO,
    pbComputedHash: *mut BYTE,
    pcbComputedHash: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptHashPublicKeyInfo(
            hCryptProv,
            Algid,
            dwFlags,
            dwCertEncodingType,
            pInfo,
            pbComputedHash,
            pcbComputedHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertRDNValueToStrA(
    dwValueType:  DWORD,
    pValue:  PCERT_RDN_VALUE_BLOB,
    psz:  LPSTR,
    csz:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertRDNValueToStrA(
            dwValueType,
            pValue,
            psz,
            csz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertRDNValueToStrW(
    dwValueType:  DWORD,
    pValue:  PCERT_RDN_VALUE_BLOB,
    psz:  LPWSTR,
    csz:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertRDNValueToStrW(
            dwValueType,
            pValue,
            psz,
            csz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertNameToStrA(
    dwCertEncodingType:  DWORD,
    pName:  PCERT_NAME_BLOB,
    dwStrType:  DWORD,
    psz:  LPSTR,
    csz:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertNameToStrA(
            dwCertEncodingType,
            pName,
            dwStrType,
            psz,
            csz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertNameToStrW(
    dwCertEncodingType:  DWORD,
    pName:  PCERT_NAME_BLOB,
    dwStrType:  DWORD,
    psz:  LPWSTR,
    csz:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertNameToStrW(
            dwCertEncodingType,
            pName,
            dwStrType,
            psz,
            csz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertStrToNameA(
    dwCertEncodingType:  DWORD,
    pszX500:  LPCSTR,
    dwStrType:  DWORD,
    pvReserved: *mut c_void,
    pbEncoded: *mut BYTE,
    pcbEncoded: *mut DWORD,
    ppszError: *mut LPCSTR    
) ->  BOOL
{
    unsafe {
        return CertStrToNameA(
            dwCertEncodingType,
            pszX500,
            dwStrType,
            pvReserved,
            pbEncoded,
            pcbEncoded,
            ppszError
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertStrToNameW(
    dwCertEncodingType:  DWORD,
    pszX500:  LPCWSTR,
    dwStrType:  DWORD,
    pvReserved: *mut c_void,
    pbEncoded: *mut BYTE,
    pcbEncoded: *mut DWORD,
    ppszError: *mut LPCWSTR    
) ->  BOOL
{
    unsafe {
        return CertStrToNameW(
            dwCertEncodingType,
            pszX500,
            dwStrType,
            pvReserved,
            pbEncoded,
            pcbEncoded,
            ppszError
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetNameStringA(
    pCertContext:  PCCERT_CONTEXT,
    dwType:  DWORD,
    dwFlags:  DWORD,
    pvTypePara: *mut c_void,
    pszNameString:  LPSTR,
    cchNameString:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertGetNameStringA(
            pCertContext,
            dwType,
            dwFlags,
            pvTypePara,
            pszNameString,
            cchNameString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetNameStringW(
    pCertContext:  PCCERT_CONTEXT,
    dwType:  DWORD,
    dwFlags:  DWORD,
    pvTypePara: *mut c_void,
    pszNameString:  LPWSTR,
    cchNameString:  DWORD    
) ->  DWORD
{
    unsafe {
        return CertGetNameStringW(
            pCertContext,
            dwType,
            dwFlags,
            pvTypePara,
            pszNameString,
            cchNameString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSignMessage(
    pSignPara:  PCRYPT_SIGN_MESSAGE_PARA,
    fDetachedSignature:  BOOL,
    cToBeSigned:  DWORD,
    rgpbToBeSigned: *mut *mut BYTE,
    rgcbToBeSigned: *mut DWORD,
    pbSignedBlob: *mut BYTE,
    pcbSignedBlob: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSignMessage(
            pSignPara,
            fDetachedSignature,
            cToBeSigned,
            rgpbToBeSigned,
            rgcbToBeSigned,
            pbSignedBlob,
            pcbSignedBlob
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifyMessageSignature(
    pVerifyPara:  PCRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex:  DWORD,
    pbSignedBlob: *const BYTE,
    cbSignedBlob:  DWORD,
    pbDecoded: *mut BYTE,
    pcbDecoded: *mut DWORD,
    ppSignerCert: *mut PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CryptVerifyMessageSignature(
            pVerifyPara,
            dwSignerIndex,
            pbSignedBlob,
            cbSignedBlob,
            pbDecoded,
            pcbDecoded,
            ppSignerCert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetMessageSignerCount(
    dwMsgEncodingType:  DWORD,
    pbSignedBlob: *const BYTE,
    cbSignedBlob:  DWORD    
) ->  LONG
{
    unsafe {
        return CryptGetMessageSignerCount(
            dwMsgEncodingType,
            pbSignedBlob,
            cbSignedBlob
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetMessageCertificates(
    dwMsgAndCertEncodingType:  DWORD,
    hCryptProv:  HCRYPTPROV_LEGACY,
    dwFlags:  DWORD,
    pbSignedBlob: *const BYTE,
    cbSignedBlob:  DWORD    
) ->  HCERTSTORE
{
    unsafe {
        return CryptGetMessageCertificates(
            dwMsgAndCertEncodingType,
            hCryptProv,
            dwFlags,
            pbSignedBlob,
            cbSignedBlob
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifyDetachedMessageSignature(
    pVerifyPara:  PCRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex:  DWORD,
    pbDetachedSignBlob: *const BYTE,
    cbDetachedSignBlob:  DWORD,
    cToBeSigned:  DWORD,
    rgpbToBeSigned: *mut *mut BYTE,
    rgcbToBeSigned: *mut DWORD,
    ppSignerCert: *mut PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CryptVerifyDetachedMessageSignature(
            pVerifyPara,
            dwSignerIndex,
            pbDetachedSignBlob,
            cbDetachedSignBlob,
            cToBeSigned,
            rgpbToBeSigned,
            rgcbToBeSigned,
            ppSignerCert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEncryptMessage(
    pEncryptPara:  PCRYPT_ENCRYPT_MESSAGE_PARA,
    cRecipientCert:  DWORD,
    rgpRecipientCert: *mut PCCERT_CONTEXT,
    pbToBeEncrypted: *const BYTE,
    cbToBeEncrypted:  DWORD,
    pbEncryptedBlob: *mut BYTE,
    pcbEncryptedBlob: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptEncryptMessage(
            pEncryptPara,
            cRecipientCert,
            rgpRecipientCert,
            pbToBeEncrypted,
            cbToBeEncrypted,
            pbEncryptedBlob,
            pcbEncryptedBlob
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDecryptMessage(
    pDecryptPara:  PCRYPT_DECRYPT_MESSAGE_PARA,
    pbEncryptedBlob: *const BYTE,
    cbEncryptedBlob:  DWORD,
    pbDecrypted: *mut BYTE,
    pcbDecrypted: *mut DWORD,
    ppXchgCert: *mut PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CryptDecryptMessage(
            pDecryptPara,
            pbEncryptedBlob,
            cbEncryptedBlob,
            pbDecrypted,
            pcbDecrypted,
            ppXchgCert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSignAndEncryptMessage(
    pSignPara:  PCRYPT_SIGN_MESSAGE_PARA,
    pEncryptPara:  PCRYPT_ENCRYPT_MESSAGE_PARA,
    cRecipientCert:  DWORD,
    rgpRecipientCert: *mut PCCERT_CONTEXT,
    pbToBeSignedAndEncrypted: *const BYTE,
    cbToBeSignedAndEncrypted:  DWORD,
    pbSignedAndEncryptedBlob: *mut BYTE,
    pcbSignedAndEncryptedBlob: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSignAndEncryptMessage(
            pSignPara,
            pEncryptPara,
            cRecipientCert,
            rgpRecipientCert,
            pbToBeSignedAndEncrypted,
            cbToBeSignedAndEncrypted,
            pbSignedAndEncryptedBlob,
            pcbSignedAndEncryptedBlob
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDecryptAndVerifyMessageSignature(
    pDecryptPara:  PCRYPT_DECRYPT_MESSAGE_PARA,
    pVerifyPara:  PCRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex:  DWORD,
    pbEncryptedBlob: *const BYTE,
    cbEncryptedBlob:  DWORD,
    pbDecrypted: *mut BYTE,
    pcbDecrypted: *mut DWORD,
    ppXchgCert: *mut PCCERT_CONTEXT,
    ppSignerCert: *mut PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CryptDecryptAndVerifyMessageSignature(
            pDecryptPara,
            pVerifyPara,
            dwSignerIndex,
            pbEncryptedBlob,
            cbEncryptedBlob,
            pbDecrypted,
            pcbDecrypted,
            ppXchgCert,
            ppSignerCert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptDecodeMessage(
    dwMsgTypeFlags:  DWORD,
    pDecryptPara:  PCRYPT_DECRYPT_MESSAGE_PARA,
    pVerifyPara:  PCRYPT_VERIFY_MESSAGE_PARA,
    dwSignerIndex:  DWORD,
    pbEncodedBlob: *const BYTE,
    cbEncodedBlob:  DWORD,
    dwPrevInnerContentType:  DWORD,
    pdwMsgType: *mut DWORD,
    pdwInnerContentType: *mut DWORD,
    pbDecoded: *mut BYTE,
    pcbDecoded: *mut DWORD,
    ppXchgCert: *mut PCCERT_CONTEXT,
    ppSignerCert: *mut PCCERT_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CryptDecodeMessage(
            dwMsgTypeFlags,
            pDecryptPara,
            pVerifyPara,
            dwSignerIndex,
            pbEncodedBlob,
            cbEncodedBlob,
            dwPrevInnerContentType,
            pdwMsgType,
            pdwInnerContentType,
            pbDecoded,
            pcbDecoded,
            ppXchgCert,
            ppSignerCert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptHashMessage(
    pHashPara:  PCRYPT_HASH_MESSAGE_PARA,
    fDetachedHash:  BOOL,
    cToBeHashed:  DWORD,
    rgpbToBeHashed: *mut *mut BYTE,
    rgcbToBeHashed: *mut DWORD,
    pbHashedBlob: *mut BYTE,
    pcbHashedBlob: *mut DWORD,
    pbComputedHash: *mut BYTE,
    pcbComputedHash: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptHashMessage(
            pHashPara,
            fDetachedHash,
            cToBeHashed,
            rgpbToBeHashed,
            rgcbToBeHashed,
            pbHashedBlob,
            pcbHashedBlob,
            pbComputedHash,
            pcbComputedHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifyMessageHash(
    pHashPara:  PCRYPT_HASH_MESSAGE_PARA,
    pbHashedBlob: *mut BYTE,
    cbHashedBlob:  DWORD,
    pbToBeHashed: *mut BYTE,
    pcbToBeHashed: *mut DWORD,
    pbComputedHash: *mut BYTE,
    pcbComputedHash: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptVerifyMessageHash(
            pHashPara,
            pbHashedBlob,
            cbHashedBlob,
            pbToBeHashed,
            pcbToBeHashed,
            pbComputedHash,
            pcbComputedHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifyDetachedMessageHash(
    pHashPara:  PCRYPT_HASH_MESSAGE_PARA,
    pbDetachedHashBlob: *mut BYTE,
    cbDetachedHashBlob:  DWORD,
    cToBeHashed:  DWORD,
    rgpbToBeHashed: *mut *mut BYTE,
    rgcbToBeHashed: *mut DWORD,
    pbComputedHash: *mut BYTE,
    pcbComputedHash: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptVerifyDetachedMessageHash(
            pHashPara,
            pbDetachedHashBlob,
            cbDetachedHashBlob,
            cToBeHashed,
            rgpbToBeHashed,
            rgcbToBeHashed,
            pbComputedHash,
            pcbComputedHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSignMessageWithKey(
    pSignPara:  PCRYPT_KEY_SIGN_MESSAGE_PARA,
    pbToBeSigned: *const BYTE,
    cbToBeSigned:  DWORD,
    pbSignedBlob: *mut BYTE,
    pcbSignedBlob: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptSignMessageWithKey(
            pSignPara,
            pbToBeSigned,
            cbToBeSigned,
            pbSignedBlob,
            pcbSignedBlob
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifyMessageSignatureWithKey(
    pVerifyPara:  PCRYPT_KEY_VERIFY_MESSAGE_PARA,
    pPublicKeyInfo:  PCERT_PUBLIC_KEY_INFO,
    pbSignedBlob: *const BYTE,
    cbSignedBlob:  DWORD,
    pbDecoded: *mut BYTE,
    pcbDecoded: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptVerifyMessageSignatureWithKey(
            pVerifyPara,
            pPublicKeyInfo,
            pbSignedBlob,
            cbSignedBlob,
            pbDecoded,
            pcbDecoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertOpenSystemStoreA(
    hProv:  HCRYPTPROV_LEGACY,
    szSubsystemProtocol:  LPCSTR    
) ->  HCERTSTORE
{
    unsafe {
        return CertOpenSystemStoreA(
            hProv,
            szSubsystemProtocol
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertOpenSystemStoreW(
    hProv:  HCRYPTPROV_LEGACY,
    szSubsystemProtocol:  LPCWSTR    
) ->  HCERTSTORE
{
    unsafe {
        return CertOpenSystemStoreW(
            hProv,
            szSubsystemProtocol
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddEncodedCertificateToSystemStoreA(
    szCertStoreName:  LPCSTR,
    pbCertEncoded: *const BYTE,
    cbCertEncoded:  DWORD    
) ->  BOOL
{
    unsafe {
        return CertAddEncodedCertificateToSystemStoreA(
            szCertStoreName,
            pbCertEncoded,
            cbCertEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddEncodedCertificateToSystemStoreW(
    szCertStoreName:  LPCWSTR,
    pbCertEncoded: *const BYTE,
    cbCertEncoded:  DWORD    
) ->  BOOL
{
    unsafe {
        return CertAddEncodedCertificateToSystemStoreW(
            szCertStoreName,
            pbCertEncoded,
            cbCertEncoded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindCertsByIssuer(
    pCertChains:  PCERT_CHAIN,
    pcbCertChains: *mut DWORD,
    pcCertChains: *mut DWORD,
    pbEncodedIssuerName: *mut BYTE,
    cbEncodedIssuerName:  DWORD,
    pwszPurpose:  LPCWSTR,
    dwKeySpec:  DWORD    
) ->  HRESULT
{
    unsafe {
        return FindCertsByIssuer(
            pCertChains,
            pcbCertChains,
            pcCertChains,
            pbEncodedIssuerName,
            cbEncodedIssuerName,
            pwszPurpose,
            dwKeySpec
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptQueryObject(
    dwObjectType:  DWORD,
    pvObject: *const c_void,
    dwExpectedContentTypeFlags:  DWORD,
    dwExpectedFormatTypeFlags:  DWORD,
    dwFlags:  DWORD,
    pdwMsgAndCertEncodingType: *mut DWORD,
    pdwContentType: *mut DWORD,
    pdwFormatType: *mut DWORD,
    phCertStore: *mut HCERTSTORE,
    phMsg: *mut HCRYPTMSG,
    ppvContext: *mut *mut c_void    
) ->  BOOL
{
    unsafe {
        return CryptQueryObject(
            dwObjectType,
            pvObject,
            dwExpectedContentTypeFlags,
            dwExpectedFormatTypeFlags,
            dwFlags,
            pdwMsgAndCertEncodingType,
            pdwContentType,
            pdwFormatType,
            phCertStore,
            phMsg,
            ppvContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMemAlloc(
    cbSize:  ULONG    
) ->  LPVOID
{
    unsafe {
        return CryptMemAlloc(
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMemRealloc(
    pv:  LPVOID,
    cbSize:  ULONG    
) ->  LPVOID
{
    unsafe {
        return CryptMemRealloc(
            pv,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptMemFree(
    pv:  LPVOID    
)
{
    unsafe {
        return CryptMemFree(
            pv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptCreateAsyncHandle(
    dwFlags:  DWORD,
    phAsync:  PHCRYPTASYNC    
) ->  BOOL
{
    unsafe {
        return CryptCreateAsyncHandle(
            dwFlags,
            phAsync
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetAsyncParam(
    hAsync:  HCRYPTASYNC,
    pszParamOid:  LPSTR,
    pvParam:  LPVOID,
    pfnFree:  PFN_CRYPT_ASYNC_PARAM_FREE_FUNC    
) ->  BOOL
{
    unsafe {
        return CryptSetAsyncParam(
            hAsync,
            pszParamOid,
            pvParam,
            pfnFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetAsyncParam(
    hAsync:  HCRYPTASYNC,
    pszParamOid:  LPSTR,
    ppvParam: *mut LPVOID,
    ppfnFree: *mut PFN_CRYPT_ASYNC_PARAM_FREE_FUNC    
) ->  BOOL
{
    unsafe {
        return CryptGetAsyncParam(
            hAsync,
            pszParamOid,
            ppvParam,
            ppfnFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptCloseAsyncHandle(
    hAsync:  HCRYPTASYNC    
) ->  BOOL
{
    unsafe {
        return CryptCloseAsyncHandle(
            hAsync
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptRetrieveObjectByUrlA(
    pszUrl:  LPCSTR,
    pszObjectOid:  LPCSTR,
    dwRetrievalFlags:  DWORD,
    dwTimeout:  DWORD,
    ppvObject: *mut LPVOID,
    hAsyncRetrieve:  HCRYPTASYNC,
    pCredentials:  PCRYPT_CREDENTIALS,
    pvVerify:  LPVOID,
    pAuxInfo:  PCRYPT_RETRIEVE_AUX_INFO    
) ->  BOOL
{
    unsafe {
        return CryptRetrieveObjectByUrlA(
            pszUrl,
            pszObjectOid,
            dwRetrievalFlags,
            dwTimeout,
            ppvObject,
            hAsyncRetrieve,
            pCredentials,
            pvVerify,
            pAuxInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptRetrieveObjectByUrlW(
    pszUrl:  LPCWSTR,
    pszObjectOid:  LPCSTR,
    dwRetrievalFlags:  DWORD,
    dwTimeout:  DWORD,
    ppvObject: *mut LPVOID,
    hAsyncRetrieve:  HCRYPTASYNC,
    pCredentials:  PCRYPT_CREDENTIALS,
    pvVerify:  LPVOID,
    pAuxInfo:  PCRYPT_RETRIEVE_AUX_INFO    
) ->  BOOL
{
    unsafe {
        return CryptRetrieveObjectByUrlW(
            pszUrl,
            pszObjectOid,
            dwRetrievalFlags,
            dwTimeout,
            ppvObject,
            hAsyncRetrieve,
            pCredentials,
            pvVerify,
            pAuxInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptInstallCancelRetrieval(
    pfnCancel:  PFN_CRYPT_CANCEL_RETRIEVAL,
    pvArg: *const c_void,
    dwFlags:  DWORD,
    pvReserved: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CryptInstallCancelRetrieval(
            pfnCancel,
            pvArg,
            dwFlags,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUninstallCancelRetrieval(
    dwFlags:  DWORD,
    pvReserved: *mut c_void    
) ->  BOOL
{
    unsafe {
        return CryptUninstallCancelRetrieval(
            dwFlags,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptCancelAsyncRetrieval(
    hAsyncRetrieval:  HCRYPTASYNC    
) ->  BOOL
{
    unsafe {
        return CryptCancelAsyncRetrieval(
            hAsyncRetrieval
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetObjectUrl(
    pszUrlOid:  LPCSTR,
    pvPara:  LPVOID,
    dwFlags:  DWORD,
    pUrlArray:  PCRYPT_URL_ARRAY,
    pcbUrlArray: *mut DWORD,
    pUrlInfo:  PCRYPT_URL_INFO,
    pcbUrlInfo: *mut DWORD,
    pvReserved:  LPVOID    
) ->  BOOL
{
    unsafe {
        return CryptGetObjectUrl(
            pszUrlOid,
            pvPara,
            dwFlags,
            pUrlArray,
            pcbUrlArray,
            pUrlInfo,
            pcbUrlInfo,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetTimeValidObject(
    pszTimeValidOid:  LPCSTR,
    pvPara:  LPVOID,
    pIssuer:  PCCERT_CONTEXT,
    pftValidFor:  LPFILETIME,
    dwFlags:  DWORD,
    dwTimeout:  DWORD,
    ppvObject: *mut LPVOID,
    pCredentials:  PCRYPT_CREDENTIALS,
    pExtraInfo:  PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO    
) ->  BOOL
{
    unsafe {
        return CryptGetTimeValidObject(
            pszTimeValidOid,
            pvPara,
            pIssuer,
            pftValidFor,
            dwFlags,
            dwTimeout,
            ppvObject,
            pCredentials,
            pExtraInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptFlushTimeValidObject(
    pszFlushTimeValidOid:  LPCSTR,
    pvPara:  LPVOID,
    pIssuer:  PCCERT_CONTEXT,
    dwFlags:  DWORD,
    pvReserved:  LPVOID    
) ->  BOOL
{
    unsafe {
        return CryptFlushTimeValidObject(
            pszFlushTimeValidOid,
            pvPara,
            pIssuer,
            dwFlags,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCreateSelfSignCertificate(
    hCryptProvOrNCryptKey:  HCRYPTPROV_OR_NCRYPT_KEY_HANDLE,
    pSubjectIssuerBlob:  PCERT_NAME_BLOB,
    dwFlags:  DWORD,
    pKeyProvInfo:  PCRYPT_KEY_PROV_INFO,
    pSignatureAlgorithm:  PCRYPT_ALGORITHM_IDENTIFIER,
    pStartTime:  PSYSTEMTIME,
    pEndTime:  PSYSTEMTIME,
    pExtensions:  PCERT_EXTENSIONS    
) ->  PCCERT_CONTEXT
{
    unsafe {
        return CertCreateSelfSignCertificate(
            hCryptProvOrNCryptKey,
            pSubjectIssuerBlob,
            dwFlags,
            pKeyProvInfo,
            pSignatureAlgorithm,
            pStartTime,
            pEndTime,
            pExtensions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptGetKeyIdentifierProperty(
    pKeyIdentifier: *const CRYPT_HASH_BLOB,
    dwPropId:  DWORD,
    dwFlags:  DWORD,
    pwszComputerName:  LPCWSTR,
    pvReserved: *mut c_void,
    pvData: *mut c_void,
    pcbData: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptGetKeyIdentifierProperty(
            pKeyIdentifier,
            dwPropId,
            dwFlags,
            pwszComputerName,
            pvReserved,
            pvData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptSetKeyIdentifierProperty(
    pKeyIdentifier: *const CRYPT_HASH_BLOB,
    dwPropId:  DWORD,
    dwFlags:  DWORD,
    pwszComputerName:  LPCWSTR,
    pvReserved: *mut c_void,
    pvData: *const c_void    
) ->  BOOL
{
    unsafe {
        return CryptSetKeyIdentifierProperty(
            pKeyIdentifier,
            dwPropId,
            dwFlags,
            pwszComputerName,
            pvReserved,
            pvData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptEnumKeyIdentifierProperties(
    pKeyIdentifier: *const CRYPT_HASH_BLOB,
    dwPropId:  DWORD,
    dwFlags:  DWORD,
    pwszComputerName:  LPCWSTR,
    pvReserved: *mut c_void,
    pvArg: *mut c_void,
    pfnEnum:  PFN_CRYPT_ENUM_KEYID_PROP    
) ->  BOOL
{
    unsafe {
        return CryptEnumKeyIdentifierProperties(
            pKeyIdentifier,
            dwPropId,
            dwFlags,
            pwszComputerName,
            pvReserved,
            pvArg,
            pfnEnum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptCreateKeyIdentifierFromCSP(
    dwCertEncodingType:  DWORD,
    pszPubKeyOID:  LPCSTR,
    pPubKeyStruc: *const PUBLICKEYSTRUC,
    cbPubKeyStruc:  DWORD,
    dwFlags:  DWORD,
    pvReserved: *mut c_void,
    pbHash: *mut BYTE,
    pcbHash: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptCreateKeyIdentifierFromCSP(
            dwCertEncodingType,
            pszPubKeyOID,
            pPubKeyStruc,
            cbPubKeyStruc,
            dwFlags,
            pvReserved,
            pbHash,
            pcbHash
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCreateCertificateChainEngine(
    pConfig:  PCERT_CHAIN_ENGINE_CONFIG,
    phChainEngine: *mut HCERTCHAINENGINE    
) ->  BOOL
{
    unsafe {
        return CertCreateCertificateChainEngine(
            pConfig,
            phChainEngine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFreeCertificateChainEngine(
    hChainEngine:  HCERTCHAINENGINE    
)
{
    unsafe {
        return CertFreeCertificateChainEngine(
            hChainEngine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertResyncCertificateChainEngine(
    hChainEngine:  HCERTCHAINENGINE    
) ->  BOOL
{
    unsafe {
        return CertResyncCertificateChainEngine(
            hChainEngine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetCertificateChain(
    hChainEngine:  HCERTCHAINENGINE,
    pCertContext:  PCCERT_CONTEXT,
    pTime:  LPFILETIME,
    hAdditionalStore:  HCERTSTORE,
    pChainPara:  PCERT_CHAIN_PARA,
    dwFlags:  DWORD,
    pvReserved:  LPVOID,
    ppChainContext: *mut PCCERT_CHAIN_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertGetCertificateChain(
            hChainEngine,
            pCertContext,
            pTime,
            hAdditionalStore,
            pChainPara,
            dwFlags,
            pvReserved,
            ppChainContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFreeCertificateChain(
    pChainContext:  PCCERT_CHAIN_CONTEXT    
)
{
    unsafe {
        return CertFreeCertificateChain(
            pChainContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertDuplicateCertificateChain(
    pChainContext:  PCCERT_CHAIN_CONTEXT    
) ->  PCCERT_CHAIN_CONTEXT
{
    unsafe {
        return CertDuplicateCertificateChain(
            pChainContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFindChainInStore(
    hCertStore:  HCERTSTORE,
    dwCertEncodingType:  DWORD,
    dwFindFlags:  DWORD,
    dwFindType:  DWORD,
    pvFindPara: *const c_void,
    pPrevChainContext:  PCCERT_CHAIN_CONTEXT    
) ->  PCCERT_CHAIN_CONTEXT
{
    unsafe {
        return CertFindChainInStore(
            hCertStore,
            dwCertEncodingType,
            dwFindFlags,
            dwFindType,
            pvFindPara,
            pPrevChainContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertVerifyCertificateChainPolicy(
    pszPolicyOID:  LPCSTR,
    pChainContext:  PCCERT_CHAIN_CONTEXT,
    pPolicyPara:  PCERT_CHAIN_POLICY_PARA,
    pPolicyStatus:  PCERT_CHAIN_POLICY_STATUS    
) ->  BOOL
{
    unsafe {
        return CertVerifyCertificateChainPolicy(
            pszPolicyOID,
            pChainContext,
            pPolicyPara,
            pPolicyStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptStringToBinaryA(
    pszString:  LPCSTR,
    cchString:  DWORD,
    dwFlags:  DWORD,
    pbBinary: *mut BYTE,
    pcbBinary: *mut DWORD,
    pdwSkip: *mut DWORD,
    pdwFlags: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptStringToBinaryA(
            pszString,
            cchString,
            dwFlags,
            pbBinary,
            pcbBinary,
            pdwSkip,
            pdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptStringToBinaryW(
    pszString:  LPCWSTR,
    cchString:  DWORD,
    dwFlags:  DWORD,
    pbBinary: *mut BYTE,
    pcbBinary: *mut DWORD,
    pdwSkip: *mut DWORD,
    pdwFlags: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptStringToBinaryW(
            pszString,
            cchString,
            dwFlags,
            pbBinary,
            pcbBinary,
            pdwSkip,
            pdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptBinaryToStringA(
    pbBinary: *const BYTE,
    cbBinary:  DWORD,
    dwFlags:  DWORD,
    pszString:  LPSTR,
    pcchString: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptBinaryToStringA(
            pbBinary,
            cbBinary,
            dwFlags,
            pszString,
            pcchString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptBinaryToStringW(
    pbBinary: *const BYTE,
    cbBinary:  DWORD,
    dwFlags:  DWORD,
    pszString:  LPWSTR,
    pcchString: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptBinaryToStringW(
            pbBinary,
            cbBinary,
            dwFlags,
            pszString,
            pcchString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PFXImportCertStore(
    pPFX: *mut CRYPT_DATA_BLOB,
    szPassword:  LPCWSTR,
    dwFlags:  DWORD    
) ->  HCERTSTORE
{
    unsafe {
        return PFXImportCertStore(
            pPFX,
            szPassword,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PFXIsPFXBlob(
    pPFX: *mut CRYPT_DATA_BLOB    
) ->  BOOL
{
    unsafe {
        return PFXIsPFXBlob(
            pPFX
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PFXVerifyPassword(
    pPFX: *mut CRYPT_DATA_BLOB,
    szPassword:  LPCWSTR,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return PFXVerifyPassword(
            pPFX,
            szPassword,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PFXExportCertStoreEx(
    hStore:  HCERTSTORE,
    pPFX: *mut CRYPT_DATA_BLOB,
    szPassword:  LPCWSTR,
    pvPara: *mut c_void,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return PFXExportCertStoreEx(
            hStore,
            pPFX,
            szPassword,
            pvPara,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PFXExportCertStore(
    hStore:  HCERTSTORE,
    pPFX: *mut CRYPT_DATA_BLOB,
    szPassword:  LPCWSTR,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return PFXExportCertStore(
            hStore,
            pPFX,
            szPassword,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertOpenServerOcspResponse(
    pChainContext:  PCCERT_CHAIN_CONTEXT,
    dwFlags:  DWORD,
    pOpenPara:  PCERT_SERVER_OCSP_RESPONSE_OPEN_PARA    
) ->  HCERT_SERVER_OCSP_RESPONSE
{
    unsafe {
        return CertOpenServerOcspResponse(
            pChainContext,
            dwFlags,
            pOpenPara
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddRefServerOcspResponse(
    hServerOcspResponse:  HCERT_SERVER_OCSP_RESPONSE    
)
{
    unsafe {
        return CertAddRefServerOcspResponse(
            hServerOcspResponse
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertCloseServerOcspResponse(
    hServerOcspResponse:  HCERT_SERVER_OCSP_RESPONSE,
    dwFlags:  DWORD    
)
{
    unsafe {
        return CertCloseServerOcspResponse(
            hServerOcspResponse,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertGetServerOcspResponseContext(
    hServerOcspResponse:  HCERT_SERVER_OCSP_RESPONSE,
    dwFlags:  DWORD,
    pvReserved:  LPVOID    
) ->  PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
{
    unsafe {
        return CertGetServerOcspResponseContext(
            hServerOcspResponse,
            dwFlags,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertAddRefServerOcspResponseContext(
    pServerOcspResponseContext:  PCCERT_SERVER_OCSP_RESPONSE_CONTEXT    
)
{
    unsafe {
        return CertAddRefServerOcspResponseContext(
            pServerOcspResponseContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFreeServerOcspResponseContext(
    pServerOcspResponseContext:  PCCERT_SERVER_OCSP_RESPONSE_CONTEXT    
)
{
    unsafe {
        return CertFreeServerOcspResponseContext(
            pServerOcspResponseContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertRetrieveLogoOrBiometricInfo(
    pCertContext:  PCCERT_CONTEXT,
    lpszLogoOrBiometricType:  LPCSTR,
    dwRetrievalFlags:  DWORD,
    dwTimeout:  DWORD,
    dwFlags:  DWORD,
    pvReserved: *mut c_void,
    ppbData: *mut *mut BYTE,
    pcbData: *mut DWORD,
    ppwszMimeType: *mut LPWSTR    
) ->  BOOL
{
    unsafe {
        return CertRetrieveLogoOrBiometricInfo(
            pCertContext,
            lpszLogoOrBiometricType,
            dwRetrievalFlags,
            dwTimeout,
            dwFlags,
            pvReserved,
            ppbData,
            pcbData,
            ppwszMimeType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertSelectCertificateChains(
    pSelectionContext:  LPCGUID,
    dwFlags:  DWORD,
    pChainParameters:  PCCERT_SELECT_CHAIN_PARA,
    cCriteria:  DWORD,
    rgpCriteria:  PCCERT_SELECT_CRITERIA,
    hStore:  HCERTSTORE,
    pcSelection:  PDWORD,
    pprgpSelection: *mut *mut PCCERT_CHAIN_CONTEXT    
) ->  BOOL
{
    unsafe {
        return CertSelectCertificateChains(
            pSelectionContext,
            dwFlags,
            pChainParameters,
            cCriteria,
            rgpCriteria,
            hStore,
            pcSelection,
            pprgpSelection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertFreeCertificateChainList(
    prgpSelection: *mut PCCERT_CHAIN_CONTEXT    
)
{
    unsafe {
        return CertFreeCertificateChainList(
            prgpSelection
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptRetrieveTimeStamp(
    wszUrl:  LPCWSTR,
    dwRetrievalFlags:  DWORD,
    dwTimeout:  DWORD,
    pszHashId:  LPCSTR,
    pPara: *const CRYPT_TIMESTAMP_PARA,
    pbData: *const BYTE,
    cbData:  DWORD,
    ppTsContext: *mut PCRYPT_TIMESTAMP_CONTEXT,
    ppTsSigner: *mut PCCERT_CONTEXT,
    phStore: *mut HCERTSTORE    
) ->  BOOL
{
    unsafe {
        return CryptRetrieveTimeStamp(
            wszUrl,
            dwRetrievalFlags,
            dwTimeout,
            pszHashId,
            pPara,
            pbData,
            cbData,
            ppTsContext,
            ppTsSigner,
            phStore
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptVerifyTimeStampSignature(
    pbTSContentInfo: *const BYTE,
    cbTSContentInfo:  DWORD,
    pbData: *const BYTE,
    cbData:  DWORD,
    hAdditionalStore:  HCERTSTORE,
    ppTsContext: *mut PCRYPT_TIMESTAMP_CONTEXT,
    ppTsSigner: *mut PCCERT_CONTEXT,
    phStore: *mut HCERTSTORE    
) ->  BOOL
{
    unsafe {
        return CryptVerifyTimeStampSignature(
            pbTSContentInfo,
            cbTSContentInfo,
            pbData,
            cbData,
            hAdditionalStore,
            ppTsContext,
            ppTsSigner,
            phStore
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CertIsWeakHash(
    dwHashUseType:  DWORD,
    pwszCNGHashAlgid:  LPCWSTR,
    dwChainFlags:  DWORD,
    pSignerChainContext:  PCCERT_CHAIN_CONTEXT,
    pTimeStamp:  LPFILETIME,
    pwszFileName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return CertIsWeakHash(
            dwHashUseType,
            pwszCNGHashAlgid,
            dwChainFlags,
            pSignerChainContext,
            pTimeStamp,
            pwszFileName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptProtectData(
    pDataIn: *mut DATA_BLOB,
    szDataDescr:  LPCWSTR,
    pOptionalEntropy: *mut DATA_BLOB,
    pvReserved:  PVOID,
    pPromptStruct: *mut CRYPTPROTECT_PROMPTSTRUCT,
    dwFlags:  DWORD,
    pDataOut: *mut DATA_BLOB    
) ->  BOOL
{
    unsafe {
        return CryptProtectData(
            pDataIn,
            szDataDescr,
            pOptionalEntropy,
            pvReserved,
            pPromptStruct,
            dwFlags,
            pDataOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUnprotectData(
    pDataIn: *mut DATA_BLOB,
    ppszDataDescr: *mut LPWSTR,
    pOptionalEntropy: *mut DATA_BLOB,
    pvReserved:  PVOID,
    pPromptStruct: *mut CRYPTPROTECT_PROMPTSTRUCT,
    dwFlags:  DWORD,
    pDataOut: *mut DATA_BLOB    
) ->  BOOL
{
    unsafe {
        return CryptUnprotectData(
            pDataIn,
            ppszDataDescr,
            pOptionalEntropy,
            pvReserved,
            pPromptStruct,
            dwFlags,
            pDataOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptProtectDataNoUI(
    pDataIn: *mut DATA_BLOB,
    szDataDescr:  LPCWSTR,
    pOptionalEntropy: *mut DATA_BLOB,
    pvReserved:  PVOID,
    pPromptStruct: *mut CRYPTPROTECT_PROMPTSTRUCT,
    dwFlags:  DWORD,
    pbOptionalPassword: *const BYTE,
    cbOptionalPassword:  DWORD,
    pDataOut: *mut DATA_BLOB    
) ->  BOOL
{
    unsafe {
        return CryptProtectDataNoUI(
            pDataIn,
            szDataDescr,
            pOptionalEntropy,
            pvReserved,
            pPromptStruct,
            dwFlags,
            pbOptionalPassword,
            cbOptionalPassword,
            pDataOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUnprotectDataNoUI(
    pDataIn: *mut DATA_BLOB,
    ppszDataDescr: *mut LPWSTR,
    pOptionalEntropy: *mut DATA_BLOB,
    pvReserved:  PVOID,
    pPromptStruct: *mut CRYPTPROTECT_PROMPTSTRUCT,
    dwFlags:  DWORD,
    pbOptionalPassword: *const BYTE,
    cbOptionalPassword:  DWORD,
    pDataOut: *mut DATA_BLOB    
) ->  BOOL
{
    unsafe {
        return CryptUnprotectDataNoUI(
            pDataIn,
            ppszDataDescr,
            pOptionalEntropy,
            pvReserved,
            pPromptStruct,
            dwFlags,
            pbOptionalPassword,
            cbOptionalPassword,
            pDataOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUpdateProtectedState(
    pOldSid:  PSID,
    pwszOldPassword:  LPCWSTR,
    dwFlags:  DWORD,
    pdwSuccessCount: *mut DWORD,
    pdwFailureCount: *mut DWORD    
) ->  BOOL
{
    unsafe {
        return CryptUpdateProtectedState(
            pOldSid,
            pwszOldPassword,
            dwFlags,
            pdwSuccessCount,
            pdwFailureCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptProtectMemory(
    pDataIn:  LPVOID,
    cbDataIn:  DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptProtectMemory(
            pDataIn,
            cbDataIn,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CryptUnprotectMemory(
    pDataIn:  LPVOID,
    cbDataIn:  DWORD,
    dwFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return CryptUnprotectMemory(
            pDataIn,
            cbDataIn,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryUsersOnEncryptedFile(
    lpFileName:  LPCWSTR,
    pUsers: *mut PENCRYPTION_CERTIFICATE_HASH_LIST    
) ->  DWORD
{
    unsafe {
        return QueryUsersOnEncryptedFile(
            lpFileName,
            pUsers
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryRecoveryAgentsOnEncryptedFile(
    lpFileName:  LPCWSTR,
    pRecoveryAgents: *mut PENCRYPTION_CERTIFICATE_HASH_LIST    
) ->  DWORD
{
    unsafe {
        return QueryRecoveryAgentsOnEncryptedFile(
            lpFileName,
            pRecoveryAgents
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RemoveUsersFromEncryptedFile(
    lpFileName:  LPCWSTR,
    pHashes:  PENCRYPTION_CERTIFICATE_HASH_LIST    
) ->  DWORD
{
    unsafe {
        return RemoveUsersFromEncryptedFile(
            lpFileName,
            pHashes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddUsersToEncryptedFile(
    lpFileName:  LPCWSTR,
    pEncryptionCertificates:  PENCRYPTION_CERTIFICATE_LIST    
) ->  DWORD
{
    unsafe {
        return AddUsersToEncryptedFile(
            lpFileName,
            pEncryptionCertificates
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUserFileEncryptionKey(
    pEncryptionCertificate:  PENCRYPTION_CERTIFICATE    
) ->  DWORD
{
    unsafe {
        return SetUserFileEncryptionKey(
            pEncryptionCertificate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetUserFileEncryptionKeyEx(
    pEncryptionCertificate:  PENCRYPTION_CERTIFICATE,
    dwCapabilities:  DWORD,
    dwFlags:  DWORD,
    pvReserved:  LPVOID    
) ->  DWORD
{
    unsafe {
        return SetUserFileEncryptionKeyEx(
            pEncryptionCertificate,
            dwCapabilities,
            dwFlags,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeEncryptionCertificateHashList(
    pUsers:  PENCRYPTION_CERTIFICATE_HASH_LIST    
)
{
    unsafe {
        return FreeEncryptionCertificateHashList(
            pUsers
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EncryptionDisable(
    DirPath:  LPCWSTR,
    Disable:  BOOL    
) ->  BOOL
{
    unsafe {
        return EncryptionDisable(
            DirPath,
            Disable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DuplicateEncryptionInfoFile(
    SrcFileName:  LPCWSTR,
    DstFileName:  LPCWSTR,
    dwCreationDistribution:  DWORD,
    dwAttributes:  DWORD,
    lpSecurityAttributes:  LPSECURITY_ATTRIBUTES    
) ->  DWORD
{
    unsafe {
        return DuplicateEncryptionInfoFile(
            SrcFileName,
            DstFileName,
            dwCreationDistribution,
            dwAttributes,
            lpSecurityAttributes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetEncryptedFileMetadata(
    lpFileName:  LPCWSTR,
    pcbMetadata:  PDWORD,
    ppbMetadata: *mut PBYTE    
) ->  DWORD
{
    unsafe {
        return GetEncryptedFileMetadata(
            lpFileName,
            pcbMetadata,
            ppbMetadata
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetEncryptedFileMetadata(
    lpFileName:  LPCWSTR,
    pbOldMetadata:  PBYTE,
    pbNewMetadata:  PBYTE,
    pOwnerHash:  PENCRYPTION_CERTIFICATE_HASH,
    dwOperation:  DWORD,
    pCertificatesAdded:  PENCRYPTION_CERTIFICATE_HASH_LIST    
) ->  DWORD
{
    unsafe {
        return SetEncryptedFileMetadata(
            lpFileName,
            pbOldMetadata,
            pbNewMetadata,
            pOwnerHash,
            dwOperation,
            pCertificatesAdded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeEncryptedFileMetadata(
    pbMetadata:  PBYTE    
)
{
    unsafe {
        return FreeEncryptedFileMetadata(
            pbMetadata
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcNsGetBuffer(
    Message:  PRPC_MESSAGE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcNsGetBuffer(
            Message
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcNsSendReceive(
    Message:  PRPC_MESSAGE,
    Handle: *mut RPC_BINDING_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcNsSendReceive(
            Message,
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcNsRaiseException(
    Message:  PRPC_MESSAGE,
    Status:  RPC_STATUS    
)
{
    unsafe {
        return I_RpcNsRaiseException(
            Message,
            Status
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcReBindBuffer(
    Message:  PRPC_MESSAGE    
) ->  RPC_STATUS
{
    unsafe {
        return I_RpcReBindBuffer(
            Message
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_NsServerBindSearch(
    
) ->  RPC_STATUS
{
    unsafe {
        return I_NsServerBindSearch(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_NsClientBindSearch(
    
) ->  RPC_STATUS
{
    unsafe {
        return I_NsClientBindSearch(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_NsClientBindDone(
    
)
{
    unsafe {
        return I_NsClientBindDone(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MIDL_user_allocate(
    size:  usize    
) -> *mut c_void
{
    unsafe {
        return MIDL_user_allocate(
            size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MIDL_user_free(
    arg1: *mut c_void    
)
{
    unsafe {
        return MIDL_user_free(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcDefaultAllocate(
    bh:  handle_t,
    size:  usize,
    RealAlloc:  Option    
) -> *mut c_void
{
    unsafe {
        return I_RpcDefaultAllocate(
            bh,
            size,
            RealAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_I_RpcDefaultFree(
    bh:  handle_t,
    arg1: *mut c_void,
    RealFree:  Option    
)
{
    unsafe {
        return I_RpcDefaultFree(
            bh,
            arg1,
            RealFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRCContextBinding(
    CContext:  NDR_CCONTEXT    
) ->  RPC_BINDING_HANDLE
{
    unsafe {
        return NDRCContextBinding(
            CContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRCContextMarshall(
    CContext:  NDR_CCONTEXT,
    pBuff: *mut c_void    
)
{
    unsafe {
        return NDRCContextMarshall(
            CContext,
            pBuff
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRCContextUnmarshall(
    pCContext: *mut NDR_CCONTEXT,
    hBinding:  RPC_BINDING_HANDLE,
    pBuff: *mut c_void,
    DataRepresentation:  c_ulong    
)
{
    unsafe {
        return NDRCContextUnmarshall(
            pCContext,
            hBinding,
            pBuff,
            DataRepresentation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRCContextUnmarshall2(
    pCContext: *mut NDR_CCONTEXT,
    hBinding:  RPC_BINDING_HANDLE,
    pBuff: *mut c_void,
    DataRepresentation:  c_ulong    
)
{
    unsafe {
        return NDRCContextUnmarshall2(
            pCContext,
            hBinding,
            pBuff,
            DataRepresentation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRSContextMarshall(
    CContext:  NDR_SCONTEXT,
    pBuff: *mut c_void,
    userRunDownIn:  NDR_RUNDOWN    
)
{
    unsafe {
        return NDRSContextMarshall(
            CContext,
            pBuff,
            userRunDownIn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRSContextUnmarshall(
    pBuff: *mut c_void,
    DataRepresentation:  c_ulong    
) ->  NDR_SCONTEXT
{
    unsafe {
        return NDRSContextUnmarshall(
            pBuff,
            DataRepresentation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRSContextMarshallEx(
    BindingHandle:  RPC_BINDING_HANDLE,
    CContext:  NDR_SCONTEXT,
    pBuff: *mut c_void,
    userRunDownIn:  NDR_RUNDOWN    
)
{
    unsafe {
        return NDRSContextMarshallEx(
            BindingHandle,
            CContext,
            pBuff,
            userRunDownIn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRSContextMarshall2(
    BindingHandle:  RPC_BINDING_HANDLE,
    CContext:  NDR_SCONTEXT,
    pBuff: *mut c_void,
    userRunDownIn:  NDR_RUNDOWN,
    CtxGuard: *mut c_void,
    Flags:  c_ulong    
)
{
    unsafe {
        return NDRSContextMarshall2(
            BindingHandle,
            CContext,
            pBuff,
            userRunDownIn,
            CtxGuard,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRSContextUnmarshallEx(
    BindingHandle:  RPC_BINDING_HANDLE,
    pBuff: *mut c_void,
    DataRepresentation:  c_ulong    
) ->  NDR_SCONTEXT
{
    unsafe {
        return NDRSContextUnmarshallEx(
            BindingHandle,
            pBuff,
            DataRepresentation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NDRSContextUnmarshall2(
    BindingHandle:  RPC_BINDING_HANDLE,
    pBuff: *mut c_void,
    DataRepresentation:  c_ulong,
    CtxGuard: *mut c_void,
    Flags:  c_ulong    
) ->  NDR_SCONTEXT
{
    unsafe {
        return NDRSContextUnmarshall2(
            BindingHandle,
            pBuff,
            DataRepresentation,
            CtxGuard,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsDestroyClientContext(
    ContextHandle: *mut *mut c_void    
)
{
    unsafe {
        return RpcSsDestroyClientContext(
            ContextHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcCsGetTags(
    hBinding:  RPC_BINDING_HANDLE,
    fServerSide:  c_int,
    pulSendingTag: *mut c_ulong,
    pulDesiredReceivingTag: *mut c_ulong,
    pulReceivingTag: *mut c_ulong,
    pStatus: *mut error_status_t    
)
{
    unsafe {
        return RpcCsGetTags(
            hBinding,
            fServerSide,
            pulSendingTag,
            pulDesiredReceivingTag,
            pulReceivingTag,
            pStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClientGetSupportedSyntaxes(
    pInf: *mut RPC_CLIENT_INTERFACE,
    pCount: *mut c_ulong,
    pArr: *mut *mut MIDL_SYNTAX_INFO    
) ->  RPC_STATUS
{
    unsafe {
        return NdrClientGetSupportedSyntaxes(
            pInf,
            pCount,
            pArr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerGetSupportedSyntaxes(
    pInf: *mut RPC_SERVER_INTERFACE,
    pCount: *mut c_ulong,
    pArr: *mut *mut MIDL_SYNTAX_INFO,
    pPreferSyntaxIndex: *mut c_ulong    
) ->  RPC_STATUS
{
    unsafe {
        return NdrServerGetSupportedSyntaxes(
            pInf,
            pCount,
            pArr,
            pPreferSyntaxIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrSimpleTypeMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    FormatChar:  c_uchar    
)
{
    unsafe {
        return NdrSimpleTypeMarshall(
            pStubMsg,
            pMemory,
            FormatChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPointerMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrPointerMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsArrayMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrCsArrayMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsTagMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrCsTagMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrSimpleStructMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrSimpleStructMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStructMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantStructMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingStructMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantVaryingStructMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexStructMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrComplexStructMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrFixedArrayMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrFixedArrayMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantArrayMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantArrayMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingArrayMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantVaryingArrayMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrVaryingArrayMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrVaryingArrayMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexArrayMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrComplexArrayMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonConformantStringMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrNonConformantStringMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStringMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantStringMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrEncapsulatedUnionMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrEncapsulatedUnionMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonEncapsulatedUnionMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrNonEncapsulatedUnionMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrByteCountPointerMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrByteCountPointerMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrXmitOrRepAsMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrXmitOrRepAsMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrUserMarshalMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrUserMarshalMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrInterfacePointerMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
) -> *mut c_uchar
{
    unsafe {
        return NdrInterfacePointerMarshall(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClientContextMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ContextHandle:  NDR_CCONTEXT,
    fCheck:  c_int    
)
{
    unsafe {
        return NdrClientContextMarshall(
            pStubMsg,
            ContextHandle,
            fCheck
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerContextMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ContextHandle:  NDR_SCONTEXT,
    RundownRoutine:  NDR_RUNDOWN    
)
{
    unsafe {
        return NdrServerContextMarshall(
            pStubMsg,
            ContextHandle,
            RundownRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerContextNewMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ContextHandle:  NDR_SCONTEXT,
    RundownRoutine:  NDR_RUNDOWN,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrServerContextNewMarshall(
            pStubMsg,
            ContextHandle,
            RundownRoutine,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrSimpleTypeUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    FormatChar:  c_uchar    
)
{
    unsafe {
        return NdrSimpleTypeUnmarshall(
            pStubMsg,
            pMemory,
            FormatChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsArrayUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrCsArrayUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsTagUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrCsTagUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrRangeUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrRangeUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCorrelationInitialize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_void,
    CacheSize:  c_ulong,
    flags:  c_ulong    
)
{
    unsafe {
        return NdrCorrelationInitialize(
            pStubMsg,
            pMemory,
            CacheSize,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCorrelationPass(
    pStubMsg:  PMIDL_STUB_MESSAGE    
)
{
    unsafe {
        return NdrCorrelationPass(
            pStubMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCorrelationFree(
    pStubMsg:  PMIDL_STUB_MESSAGE    
)
{
    unsafe {
        return NdrCorrelationFree(
            pStubMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPointerUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrPointerUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrSimpleStructUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrSimpleStructUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStructUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantStructUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingStructUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantVaryingStructUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexStructUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrComplexStructUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrFixedArrayUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrFixedArrayUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantArrayUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantArrayUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingArrayUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantVaryingArrayUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrVaryingArrayUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrVaryingArrayUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexArrayUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrComplexArrayUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonConformantStringUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrNonConformantStringUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStringUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrConformantStringUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrEncapsulatedUnionUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrEncapsulatedUnionUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonEncapsulatedUnionUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrNonEncapsulatedUnionUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrByteCountPointerUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrByteCountPointerUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrXmitOrRepAsUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrXmitOrRepAsUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrUserMarshalUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrUserMarshalUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrInterfacePointerUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_uchar,
    pFormat:  PFORMAT_STRING,
    fMustAlloc:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrInterfacePointerUnmarshall(
            pStubMsg,
            ppMemory,
            pFormat,
            fMustAlloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClientContextUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pContextHandle: *mut NDR_CCONTEXT,
    BindHandle:  RPC_BINDING_HANDLE    
)
{
    unsafe {
        return NdrClientContextUnmarshall(
            pStubMsg,
            pContextHandle,
            BindHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerContextUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE    
) ->  NDR_SCONTEXT
{
    unsafe {
        return NdrServerContextUnmarshall(
            pStubMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrContextHandleInitialize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  NDR_SCONTEXT
{
    unsafe {
        return NdrContextHandleInitialize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerContextNewUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  NDR_SCONTEXT
{
    unsafe {
        return NdrServerContextNewUnmarshall(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPointerBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrPointerBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsArrayBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrCsArrayBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsTagBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrCsTagBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrSimpleStructBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrSimpleStructBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStructBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantStructBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingStructBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantVaryingStructBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexStructBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrComplexStructBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrFixedArrayBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrFixedArrayBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantArrayBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantArrayBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingArrayBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantVaryingArrayBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrVaryingArrayBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrVaryingArrayBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexArrayBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrComplexArrayBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStringBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantStringBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonConformantStringBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrNonConformantStringBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrEncapsulatedUnionBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrEncapsulatedUnionBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonEncapsulatedUnionBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrNonEncapsulatedUnionBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrByteCountPointerBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrByteCountPointerBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrXmitOrRepAsBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrXmitOrRepAsBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrUserMarshalBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrUserMarshalBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrInterfacePointerBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrInterfacePointerBufferSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrContextHandleSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrContextHandleSize(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPointerMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrPointerMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrContextHandleMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrContextHandleMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsArrayMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrCsArrayMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsTagMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrCsTagMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrSimpleStructMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrSimpleStructMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStructMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrConformantStructMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingStructMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrConformantVaryingStructMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexStructMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrComplexStructMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrFixedArrayMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrFixedArrayMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantArrayMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrConformantArrayMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingArrayMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrConformantVaryingArrayMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrVaryingArrayMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrVaryingArrayMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexArrayMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrComplexArrayMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStringMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrConformantStringMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonConformantStringMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrNonConformantStringMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrEncapsulatedUnionMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrEncapsulatedUnionMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonEncapsulatedUnionMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrNonEncapsulatedUnionMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrXmitOrRepAsMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrXmitOrRepAsMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrUserMarshalMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrUserMarshalMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrInterfacePointerMemorySize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
) ->  c_ulong
{
    unsafe {
        return NdrInterfacePointerMemorySize(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPointerFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrPointerFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCsArrayFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrCsArrayFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrSimpleStructFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrSimpleStructFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantStructFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantStructFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingStructFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantVaryingStructFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexStructFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrComplexStructFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrFixedArrayFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrFixedArrayFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantArrayFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantArrayFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConformantVaryingArrayFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConformantVaryingArrayFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrVaryingArrayFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrVaryingArrayFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrComplexArrayFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrComplexArrayFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrEncapsulatedUnionFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrEncapsulatedUnionFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNonEncapsulatedUnionFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrNonEncapsulatedUnionFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrByteCountPointerFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrByteCountPointerFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrXmitOrRepAsFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrXmitOrRepAsFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrUserMarshalFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrUserMarshalFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrInterfacePointerFree(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_uchar,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrInterfacePointerFree(
            pStubMsg,
            pMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConvert2(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING,
    NumberParams:  c_long    
)
{
    unsafe {
        return NdrConvert2(
            pStubMsg,
            pFormat,
            NumberParams
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrConvert(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrConvert(
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrUserMarshalSimpleTypeConvert(
    pFlags: *mut c_ulong,
    pBuffer: *mut c_uchar,
    FormatChar:  c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrUserMarshalSimpleTypeConvert(
            pFlags,
            pBuffer,
            FormatChar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClientInitializeNew(
    pRpcMsg:  PRPC_MESSAGE,
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pStubDescriptor:  PMIDL_STUB_DESC,
    ProcNum:  c_uint    
)
{
    unsafe {
        return NdrClientInitializeNew(
            pRpcMsg,
            pStubMsg,
            pStubDescriptor,
            ProcNum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerInitializeNew(
    pRpcMsg:  PRPC_MESSAGE,
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pStubDescriptor:  PMIDL_STUB_DESC    
) -> *mut c_uchar
{
    unsafe {
        return NdrServerInitializeNew(
            pRpcMsg,
            pStubMsg,
            pStubDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerInitializePartial(
    pRpcMsg:  PRPC_MESSAGE,
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pStubDescriptor:  PMIDL_STUB_DESC,
    RequestedBufferSize:  c_ulong    
)
{
    unsafe {
        return NdrServerInitializePartial(
            pRpcMsg,
            pStubMsg,
            pStubDescriptor,
            RequestedBufferSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClientInitialize(
    pRpcMsg:  PRPC_MESSAGE,
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pStubDescriptor:  PMIDL_STUB_DESC,
    ProcNum:  c_uint    
)
{
    unsafe {
        return NdrClientInitialize(
            pRpcMsg,
            pStubMsg,
            pStubDescriptor,
            ProcNum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerInitialize(
    pRpcMsg:  PRPC_MESSAGE,
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pStubDescriptor:  PMIDL_STUB_DESC    
) -> *mut c_uchar
{
    unsafe {
        return NdrServerInitialize(
            pRpcMsg,
            pStubMsg,
            pStubDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerInitializeUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pStubDescriptor:  PMIDL_STUB_DESC,
    pRpcMsg:  PRPC_MESSAGE    
) -> *mut c_uchar
{
    unsafe {
        return NdrServerInitializeUnmarshall(
            pStubMsg,
            pStubDescriptor,
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerInitializeMarshall(
    pRpcMsg:  PRPC_MESSAGE,
    pStubMsg:  PMIDL_STUB_MESSAGE    
)
{
    unsafe {
        return NdrServerInitializeMarshall(
            pRpcMsg,
            pStubMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrGetBuffer(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    BufferLength:  c_ulong,
    Handle:  RPC_BINDING_HANDLE    
) -> *mut c_uchar
{
    unsafe {
        return NdrGetBuffer(
            pStubMsg,
            BufferLength,
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNsGetBuffer(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    BufferLength:  c_ulong,
    Handle:  RPC_BINDING_HANDLE    
) -> *mut c_uchar
{
    unsafe {
        return NdrNsGetBuffer(
            pStubMsg,
            BufferLength,
            Handle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrSendReceive(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pBufferEnd: *mut c_uchar    
) -> *mut c_uchar
{
    unsafe {
        return NdrSendReceive(
            pStubMsg,
            pBufferEnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrNsSendReceive(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pBufferEnd: *mut c_uchar,
    pAutoHandle: *mut RPC_BINDING_HANDLE    
) -> *mut c_uchar
{
    unsafe {
        return NdrNsSendReceive(
            pStubMsg,
            pBufferEnd,
            pAutoHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrFreeBuffer(
    pStubMsg:  PMIDL_STUB_MESSAGE    
)
{
    unsafe {
        return NdrFreeBuffer(
            pStubMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrGetDcomProtocolVersion(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pVersion: *mut RPC_VERSION    
) ->  HRESULT
{
    unsafe {
        return NdrGetDcomProtocolVersion(
            pStubMsg,
            pVersion
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClientCall2(
    pStubDescriptor:  PMIDL_STUB_DESC,
    pFormat:  PFORMAT_STRING    
) ->  CLIENT_CALL_RETURN
{
    unsafe {
        return NdrClientCall2(
            pStubDescriptor,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClientCall(
    pStubDescriptor:  PMIDL_STUB_DESC,
    pFormat:  PFORMAT_STRING    
) ->  CLIENT_CALL_RETURN
{
    unsafe {
        return NdrClientCall(
            pStubDescriptor,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrAsyncClientCall(
    pStubDescriptor:  PMIDL_STUB_DESC,
    pFormat:  PFORMAT_STRING    
) ->  CLIENT_CALL_RETURN
{
    unsafe {
        return NdrAsyncClientCall(
            pStubDescriptor,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrDcomAsyncClientCall(
    pStubDescriptor:  PMIDL_STUB_DESC,
    pFormat:  PFORMAT_STRING    
) ->  CLIENT_CALL_RETURN
{
    unsafe {
        return NdrDcomAsyncClientCall(
            pStubDescriptor,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrAsyncServerCall(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return NdrAsyncServerCall(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrAsyncStubCall(
    pThis: *mut IRpcStubBuffer,
    pChannel: *mut IRpcChannelBuffer,
    pRpcMsg:  PRPC_MESSAGE,
    pdwStubPhase: *mut c_ulong    
) ->  c_long
{
    unsafe {
        return NdrAsyncStubCall(
            pThis,
            pChannel,
            pRpcMsg,
            pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrDcomAsyncStubCall(
    pThis: *mut IRpcStubBuffer,
    pChannel: *mut IRpcChannelBuffer,
    pRpcMsg:  PRPC_MESSAGE,
    pdwStubPhase: *mut c_ulong    
) ->  c_long
{
    unsafe {
        return NdrDcomAsyncStubCall(
            pThis,
            pChannel,
            pRpcMsg,
            pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrStubCall2(
    pThis: *mut c_void,
    pChannel: *mut c_void,
    pRpcMsg:  PRPC_MESSAGE,
    pdwStubPhase: *mut c_ulong    
) ->  c_long
{
    unsafe {
        return NdrStubCall2(
            pThis,
            pChannel,
            pRpcMsg,
            pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerCall2(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return NdrServerCall2(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrStubCall(
    pThis: *mut c_void,
    pChannel: *mut c_void,
    pRpcMsg:  PRPC_MESSAGE,
    pdwStubPhase: *mut c_ulong    
) ->  c_long
{
    unsafe {
        return NdrStubCall(
            pThis,
            pChannel,
            pRpcMsg,
            pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerCall(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return NdrServerCall(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerUnmarshall(
    pChannel: *mut c_void,
    pRpcMsg:  PRPC_MESSAGE,
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pStubDescriptor:  PMIDL_STUB_DESC,
    pFormat:  PFORMAT_STRING,
    pParamList: *mut c_void    
) ->  c_int
{
    unsafe {
        return NdrServerUnmarshall(
            pChannel,
            pRpcMsg,
            pStubMsg,
            pStubDescriptor,
            pFormat,
            pParamList
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerMarshall(
    pThis: *mut c_void,
    pChannel: *mut c_void,
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrServerMarshall(
            pThis,
            pChannel,
            pStubMsg,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrMapCommAndFaultStatus(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pCommStatus: *mut c_ulong,
    pFaultStatus: *mut c_ulong,
    Status:  RPC_STATUS    
) ->  RPC_STATUS
{
    unsafe {
        return NdrMapCommAndFaultStatus(
            pStubMsg,
            pCommStatus,
            pFaultStatus,
            Status
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsAllocate(
    Size:  usize    
) -> *mut c_void
{
    unsafe {
        return RpcSsAllocate(
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsDisableAllocate(
    
)
{
    unsafe {
        return RpcSsDisableAllocate(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsEnableAllocate(
    
)
{
    unsafe {
        return RpcSsEnableAllocate(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsFree(
    NodeToFree: *mut c_void    
)
{
    unsafe {
        return RpcSsFree(
            NodeToFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsGetThreadHandle(
    
) ->  RPC_SS_THREAD_HANDLE
{
    unsafe {
        return RpcSsGetThreadHandle(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsSetClientAllocFree(
    ClientAlloc:  Option,
    ClientFree:  Option    
)
{
    unsafe {
        return RpcSsSetClientAllocFree(
            ClientAlloc,
            ClientFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsSetThreadHandle(
    Id:  RPC_SS_THREAD_HANDLE    
)
{
    unsafe {
        return RpcSsSetThreadHandle(
            Id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSsSwapClientAllocFree(
    ClientAlloc:  Option,
    ClientFree:  Option,
    OldClientAlloc: *mut Option,
    OldClientFree: *mut Option    
)
{
    unsafe {
        return RpcSsSwapClientAllocFree(
            ClientAlloc,
            ClientFree,
            OldClientAlloc,
            OldClientFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmAllocate(
    Size:  usize,
    pStatus: *mut RPC_STATUS    
) -> *mut c_void
{
    unsafe {
        return RpcSmAllocate(
            Size,
            pStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmClientFree(
    pNodeToFree: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSmClientFree(
            pNodeToFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmDestroyClientContext(
    ContextHandle: *mut *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSmDestroyClientContext(
            ContextHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmDisableAllocate(
    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSmDisableAllocate(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmEnableAllocate(
    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSmEnableAllocate(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmFree(
    NodeToFree: *mut c_void    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSmFree(
            NodeToFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmGetThreadHandle(
    pStatus: *mut RPC_STATUS    
) ->  RPC_SS_THREAD_HANDLE
{
    unsafe {
        return RpcSmGetThreadHandle(
            pStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmSetClientAllocFree(
    ClientAlloc:  Option,
    ClientFree:  Option    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSmSetClientAllocFree(
            ClientAlloc,
            ClientFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmSetThreadHandle(
    Id:  RPC_SS_THREAD_HANDLE    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSmSetThreadHandle(
            Id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcSmSwapClientAllocFree(
    ClientAlloc:  Option,
    ClientFree:  Option,
    OldClientAlloc: *mut Option,
    OldClientFree: *mut Option    
) ->  RPC_STATUS
{
    unsafe {
        return RpcSmSwapClientAllocFree(
            ClientAlloc,
            ClientFree,
            OldClientAlloc,
            OldClientFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrRpcSsEnableAllocate(
    pMessage:  PMIDL_STUB_MESSAGE    
)
{
    unsafe {
        return NdrRpcSsEnableAllocate(
            pMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrRpcSsDisableAllocate(
    pMessage:  PMIDL_STUB_MESSAGE    
)
{
    unsafe {
        return NdrRpcSsDisableAllocate(
            pMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrRpcSmSetClientToOsf(
    pMessage:  PMIDL_STUB_MESSAGE    
)
{
    unsafe {
        return NdrRpcSmSetClientToOsf(
            pMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrRpcSmClientAllocate(
    Size:  usize    
) -> *mut c_void
{
    unsafe {
        return NdrRpcSmClientAllocate(
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrRpcSmClientFree(
    NodeToFree: *mut c_void    
)
{
    unsafe {
        return NdrRpcSmClientFree(
            NodeToFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrRpcSsDefaultAllocate(
    Size:  usize    
) -> *mut c_void
{
    unsafe {
        return NdrRpcSsDefaultAllocate(
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrRpcSsDefaultFree(
    NodeToFree: *mut c_void    
)
{
    unsafe {
        return NdrRpcSsDefaultFree(
            NodeToFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrFullPointerXlatInit(
    NumberOfPointers:  c_ulong,
    XlatSide:  XLAT_SIDE    
) ->  PFULL_PTR_XLAT_TABLES
{
    unsafe {
        return NdrFullPointerXlatInit(
            NumberOfPointers,
            XlatSide
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrFullPointerXlatFree(
    pXlatTables:  PFULL_PTR_XLAT_TABLES    
)
{
    unsafe {
        return NdrFullPointerXlatFree(
            pXlatTables
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrAllocate(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    Len:  usize    
) -> *mut c_void
{
    unsafe {
        return NdrAllocate(
            pStubMsg,
            Len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClearOutParameters(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pFormat:  PFORMAT_STRING,
    ArgAddr: *mut c_void    
)
{
    unsafe {
        return NdrClearOutParameters(
            pStubMsg,
            pFormat,
            ArgAddr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrOleAllocate(
    Size:  usize    
) -> *mut c_void
{
    unsafe {
        return NdrOleAllocate(
            Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrOleFree(
    NodeToFree: *mut c_void    
)
{
    unsafe {
        return NdrOleFree(
            NodeToFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrGetUserMarshalInfo(
    pFlags: *mut c_ulong,
    InformationLevel:  c_ulong,
    pMarshalInfo: *mut NDR_USER_MARSHAL_INFO    
) ->  RPC_STATUS
{
    unsafe {
        return NdrGetUserMarshalInfo(
            pFlags,
            InformationLevel,
            pMarshalInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrCreateServerInterfaceFromStub(
    pStub: *mut IRpcStubBuffer,
    pServerIf: *mut RPC_SERVER_INTERFACE    
) ->  RPC_STATUS
{
    unsafe {
        return NdrCreateServerInterfaceFromStub(
            pStub,
            pServerIf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrClientCall3(
    pProxyInfo: *mut MIDL_STUBLESS_PROXY_INFO,
    nProcNum:  c_ulong,
    pReturnValue: *mut c_void    
) ->  CLIENT_CALL_RETURN
{
    unsafe {
        return NdrClientCall3(
            pProxyInfo,
            nProcNum,
            pReturnValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Ndr64AsyncClientCall(
    pProxyInfo: *mut MIDL_STUBLESS_PROXY_INFO,
    nProcNum:  c_ulong,
    pReturnValue: *mut c_void    
) ->  CLIENT_CALL_RETURN
{
    unsafe {
        return Ndr64AsyncClientCall(
            pProxyInfo,
            nProcNum,
            pReturnValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Ndr64DcomAsyncClientCall(
    pProxyInfo: *mut MIDL_STUBLESS_PROXY_INFO,
    nProcNum:  c_ulong,
    pReturnValue: *mut c_void    
) ->  CLIENT_CALL_RETURN
{
    unsafe {
        return Ndr64DcomAsyncClientCall(
            pProxyInfo,
            nProcNum,
            pReturnValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Ndr64AsyncServerCall(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return Ndr64AsyncServerCall(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Ndr64AsyncServerCall64(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return Ndr64AsyncServerCall64(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Ndr64AsyncServerCallAll(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return Ndr64AsyncServerCallAll(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Ndr64AsyncStubCall(
    pThis: *mut IRpcStubBuffer,
    pChannel: *mut IRpcChannelBuffer,
    pRpcMsg:  PRPC_MESSAGE,
    pdwStubPhase: *mut c_ulong    
) ->  c_long
{
    unsafe {
        return Ndr64AsyncStubCall(
            pThis,
            pChannel,
            pRpcMsg,
            pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_Ndr64DcomAsyncStubCall(
    pThis: *mut IRpcStubBuffer,
    pChannel: *mut IRpcChannelBuffer,
    pRpcMsg:  PRPC_MESSAGE,
    pdwStubPhase: *mut c_ulong    
) ->  c_long
{
    unsafe {
        return Ndr64DcomAsyncStubCall(
            pThis,
            pChannel,
            pRpcMsg,
            pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrStubCall3(
    pThis: *mut c_void,
    pChannel: *mut c_void,
    pRpcMsg:  PRPC_MESSAGE,
    pdwStubPhase: *mut c_ulong    
) ->  c_long
{
    unsafe {
        return NdrStubCall3(
            pThis,
            pChannel,
            pRpcMsg,
            pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerCallAll(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return NdrServerCallAll(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerCallNdr64(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return NdrServerCallNdr64(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrServerCall3(
    pRpcMsg:  PRPC_MESSAGE    
)
{
    unsafe {
        return NdrServerCall3(
            pRpcMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPartialIgnoreClientMarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_void    
)
{
    unsafe {
        return NdrPartialIgnoreClientMarshall(
            pStubMsg,
            pMemory
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPartialIgnoreServerUnmarshall(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_void    
)
{
    unsafe {
        return NdrPartialIgnoreServerUnmarshall(
            pStubMsg,
            ppMemory
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPartialIgnoreClientBufferSize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    pMemory: *mut c_void    
)
{
    unsafe {
        return NdrPartialIgnoreClientBufferSize(
            pStubMsg,
            pMemory
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NdrPartialIgnoreServerInitialize(
    pStubMsg:  PMIDL_STUB_MESSAGE,
    ppMemory: *mut *mut c_void,
    pFormat:  PFORMAT_STRING    
)
{
    unsafe {
        return NdrPartialIgnoreServerInitialize(
            pStubMsg,
            ppMemory,
            pFormat
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RpcUserFree(
    AsyncHandle:  handle_t,
    pBuffer: *mut c_void    
)
{
    unsafe {
        return RpcUserFree(
            AsyncHandle,
            pBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardEstablishContext(
    dwScope:  DWORD,
    pvReserved1:  LPCVOID,
    pvReserved2:  LPCVOID,
    phContext:  LPSCARDCONTEXT    
) ->  LONG
{
    unsafe {
        return SCardEstablishContext(
            dwScope,
            pvReserved1,
            pvReserved2,
            phContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardReleaseContext(
    hContext:  SCARDCONTEXT    
) ->  LONG
{
    unsafe {
        return SCardReleaseContext(
            hContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardIsValidContext(
    hContext:  SCARDCONTEXT    
) ->  LONG
{
    unsafe {
        return SCardIsValidContext(
            hContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListReaderGroupsA(
    hContext:  SCARDCONTEXT,
    mszGroups:  LPSTR,
    pcchGroups:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListReaderGroupsA(
            hContext,
            mszGroups,
            pcchGroups
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListReaderGroupsW(
    hContext:  SCARDCONTEXT,
    mszGroups:  LPWSTR,
    pcchGroups:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListReaderGroupsW(
            hContext,
            mszGroups,
            pcchGroups
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListReadersA(
    hContext:  SCARDCONTEXT,
    mszGroups:  LPCSTR,
    mszReaders:  LPSTR,
    pcchReaders:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListReadersA(
            hContext,
            mszGroups,
            mszReaders,
            pcchReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListReadersW(
    hContext:  SCARDCONTEXT,
    mszGroups:  LPCWSTR,
    mszReaders:  LPWSTR,
    pcchReaders:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListReadersW(
            hContext,
            mszGroups,
            mszReaders,
            pcchReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListCardsA(
    hContext:  SCARDCONTEXT,
    pbAtr:  LPCBYTE,
    rgquidInterfaces:  LPCGUID,
    cguidInterfaceCount:  DWORD,
    mszCards: *mut CHAR,
    pcchCards:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListCardsA(
            hContext,
            pbAtr,
            rgquidInterfaces,
            cguidInterfaceCount,
            mszCards,
            pcchCards
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListCardsW(
    hContext:  SCARDCONTEXT,
    pbAtr:  LPCBYTE,
    rgquidInterfaces:  LPCGUID,
    cguidInterfaceCount:  DWORD,
    mszCards: *mut WCHAR,
    pcchCards:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListCardsW(
            hContext,
            pbAtr,
            rgquidInterfaces,
            cguidInterfaceCount,
            mszCards,
            pcchCards
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListInterfacesA(
    hContext:  SCARDCONTEXT,
    szCard:  LPCSTR,
    pguidInterfaces:  LPGUID,
    pcguidInterfaces:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListInterfacesA(
            hContext,
            szCard,
            pguidInterfaces,
            pcguidInterfaces
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListInterfacesW(
    hContext:  SCARDCONTEXT,
    szCard:  LPCWSTR,
    pguidInterfaces:  LPGUID,
    pcguidInterfaces:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListInterfacesW(
            hContext,
            szCard,
            pguidInterfaces,
            pcguidInterfaces
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetProviderIdA(
    hContext:  SCARDCONTEXT,
    szCard:  LPCSTR,
    pguidProviderId:  LPGUID    
) ->  LONG
{
    unsafe {
        return SCardGetProviderIdA(
            hContext,
            szCard,
            pguidProviderId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetProviderIdW(
    hContext:  SCARDCONTEXT,
    szCard:  LPCWSTR,
    pguidProviderId:  LPGUID    
) ->  LONG
{
    unsafe {
        return SCardGetProviderIdW(
            hContext,
            szCard,
            pguidProviderId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetCardTypeProviderNameA(
    hContext:  SCARDCONTEXT,
    szCardName:  LPCSTR,
    dwProviderId:  DWORD,
    szProvider: *mut CHAR,
    pcchProvider:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetCardTypeProviderNameA(
            hContext,
            szCardName,
            dwProviderId,
            szProvider,
            pcchProvider
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetCardTypeProviderNameW(
    hContext:  SCARDCONTEXT,
    szCardName:  LPCWSTR,
    dwProviderId:  DWORD,
    szProvider: *mut WCHAR,
    pcchProvider:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetCardTypeProviderNameW(
            hContext,
            szCardName,
            dwProviderId,
            szProvider,
            pcchProvider
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardIntroduceReaderGroupA(
    hContext:  SCARDCONTEXT,
    szGroupName:  LPCSTR    
) ->  LONG
{
    unsafe {
        return SCardIntroduceReaderGroupA(
            hContext,
            szGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardIntroduceReaderGroupW(
    hContext:  SCARDCONTEXT,
    szGroupName:  LPCWSTR    
) ->  LONG
{
    unsafe {
        return SCardIntroduceReaderGroupW(
            hContext,
            szGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardForgetReaderGroupA(
    hContext:  SCARDCONTEXT,
    szGroupName:  LPCSTR    
) ->  LONG
{
    unsafe {
        return SCardForgetReaderGroupA(
            hContext,
            szGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardForgetReaderGroupW(
    hContext:  SCARDCONTEXT,
    szGroupName:  LPCWSTR    
) ->  LONG
{
    unsafe {
        return SCardForgetReaderGroupW(
            hContext,
            szGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardIntroduceReaderA(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCSTR,
    szDeviceName:  LPCSTR    
) ->  LONG
{
    unsafe {
        return SCardIntroduceReaderA(
            hContext,
            szReaderName,
            szDeviceName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardIntroduceReaderW(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCWSTR,
    szDeviceName:  LPCWSTR    
) ->  LONG
{
    unsafe {
        return SCardIntroduceReaderW(
            hContext,
            szReaderName,
            szDeviceName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardForgetReaderA(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCSTR    
) ->  LONG
{
    unsafe {
        return SCardForgetReaderA(
            hContext,
            szReaderName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardForgetReaderW(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCWSTR    
) ->  LONG
{
    unsafe {
        return SCardForgetReaderW(
            hContext,
            szReaderName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardAddReaderToGroupA(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCSTR,
    szGroupName:  LPCSTR    
) ->  LONG
{
    unsafe {
        return SCardAddReaderToGroupA(
            hContext,
            szReaderName,
            szGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardAddReaderToGroupW(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCWSTR,
    szGroupName:  LPCWSTR    
) ->  LONG
{
    unsafe {
        return SCardAddReaderToGroupW(
            hContext,
            szReaderName,
            szGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardRemoveReaderFromGroupA(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCSTR,
    szGroupName:  LPCSTR    
) ->  LONG
{
    unsafe {
        return SCardRemoveReaderFromGroupA(
            hContext,
            szReaderName,
            szGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardRemoveReaderFromGroupW(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCWSTR,
    szGroupName:  LPCWSTR    
) ->  LONG
{
    unsafe {
        return SCardRemoveReaderFromGroupW(
            hContext,
            szReaderName,
            szGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardIntroduceCardTypeA(
    hContext:  SCARDCONTEXT,
    szCardName:  LPCSTR,
    pguidPrimaryProvider:  LPCGUID,
    rgguidInterfaces:  LPCGUID,
    dwInterfaceCount:  DWORD,
    pbAtr:  LPCBYTE,
    pbAtrMask:  LPCBYTE,
    cbAtrLen:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardIntroduceCardTypeA(
            hContext,
            szCardName,
            pguidPrimaryProvider,
            rgguidInterfaces,
            dwInterfaceCount,
            pbAtr,
            pbAtrMask,
            cbAtrLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardIntroduceCardTypeW(
    hContext:  SCARDCONTEXT,
    szCardName:  LPCWSTR,
    pguidPrimaryProvider:  LPCGUID,
    rgguidInterfaces:  LPCGUID,
    dwInterfaceCount:  DWORD,
    pbAtr:  LPCBYTE,
    pbAtrMask:  LPCBYTE,
    cbAtrLen:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardIntroduceCardTypeW(
            hContext,
            szCardName,
            pguidPrimaryProvider,
            rgguidInterfaces,
            dwInterfaceCount,
            pbAtr,
            pbAtrMask,
            cbAtrLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardSetCardTypeProviderNameA(
    hContext:  SCARDCONTEXT,
    szCardName:  LPCSTR,
    dwProviderId:  DWORD,
    szProvider:  LPCSTR    
) ->  LONG
{
    unsafe {
        return SCardSetCardTypeProviderNameA(
            hContext,
            szCardName,
            dwProviderId,
            szProvider
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardSetCardTypeProviderNameW(
    hContext:  SCARDCONTEXT,
    szCardName:  LPCWSTR,
    dwProviderId:  DWORD,
    szProvider:  LPCWSTR    
) ->  LONG
{
    unsafe {
        return SCardSetCardTypeProviderNameW(
            hContext,
            szCardName,
            dwProviderId,
            szProvider
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardForgetCardTypeA(
    hContext:  SCARDCONTEXT,
    szCardName:  LPCSTR    
) ->  LONG
{
    unsafe {
        return SCardForgetCardTypeA(
            hContext,
            szCardName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardForgetCardTypeW(
    hContext:  SCARDCONTEXT,
    szCardName:  LPCWSTR    
) ->  LONG
{
    unsafe {
        return SCardForgetCardTypeW(
            hContext,
            szCardName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardFreeMemory(
    hContext:  SCARDCONTEXT,
    pvMem:  LPCVOID    
) ->  LONG
{
    unsafe {
        return SCardFreeMemory(
            hContext,
            pvMem
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardAccessStartedEvent(
    
) ->  HANDLE
{
    unsafe {
        return SCardAccessStartedEvent(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardReleaseStartedEvent(
    
)
{
    unsafe {
        return SCardReleaseStartedEvent(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardLocateCardsA(
    hContext:  SCARDCONTEXT,
    mszCards:  LPCSTR,
    rgReaderStates:  LPSCARD_READERSTATEA,
    cReaders:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardLocateCardsA(
            hContext,
            mszCards,
            rgReaderStates,
            cReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardLocateCardsW(
    hContext:  SCARDCONTEXT,
    mszCards:  LPCWSTR,
    rgReaderStates:  LPSCARD_READERSTATEW,
    cReaders:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardLocateCardsW(
            hContext,
            mszCards,
            rgReaderStates,
            cReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardLocateCardsByATRA(
    hContext:  SCARDCONTEXT,
    rgAtrMasks:  LPSCARD_ATRMASK,
    cAtrs:  DWORD,
    rgReaderStates:  LPSCARD_READERSTATEA,
    cReaders:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardLocateCardsByATRA(
            hContext,
            rgAtrMasks,
            cAtrs,
            rgReaderStates,
            cReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardLocateCardsByATRW(
    hContext:  SCARDCONTEXT,
    rgAtrMasks:  LPSCARD_ATRMASK,
    cAtrs:  DWORD,
    rgReaderStates:  LPSCARD_READERSTATEW,
    cReaders:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardLocateCardsByATRW(
            hContext,
            rgAtrMasks,
            cAtrs,
            rgReaderStates,
            cReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetStatusChangeA(
    hContext:  SCARDCONTEXT,
    dwTimeout:  DWORD,
    rgReaderStates:  LPSCARD_READERSTATEA,
    cReaders:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardGetStatusChangeA(
            hContext,
            dwTimeout,
            rgReaderStates,
            cReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetStatusChangeW(
    hContext:  SCARDCONTEXT,
    dwTimeout:  DWORD,
    rgReaderStates:  LPSCARD_READERSTATEW,
    cReaders:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardGetStatusChangeW(
            hContext,
            dwTimeout,
            rgReaderStates,
            cReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardCancel(
    hContext:  SCARDCONTEXT    
) ->  LONG
{
    unsafe {
        return SCardCancel(
            hContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardConnectA(
    hContext:  SCARDCONTEXT,
    szReader:  LPCSTR,
    dwShareMode:  DWORD,
    dwPreferredProtocols:  DWORD,
    phCard:  LPSCARDHANDLE,
    pdwActiveProtocol:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardConnectA(
            hContext,
            szReader,
            dwShareMode,
            dwPreferredProtocols,
            phCard,
            pdwActiveProtocol
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardConnectW(
    hContext:  SCARDCONTEXT,
    szReader:  LPCWSTR,
    dwShareMode:  DWORD,
    dwPreferredProtocols:  DWORD,
    phCard:  LPSCARDHANDLE,
    pdwActiveProtocol:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardConnectW(
            hContext,
            szReader,
            dwShareMode,
            dwPreferredProtocols,
            phCard,
            pdwActiveProtocol
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardReconnect(
    hCard:  SCARDHANDLE,
    dwShareMode:  DWORD,
    dwPreferredProtocols:  DWORD,
    dwInitialization:  DWORD,
    pdwActiveProtocol:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardReconnect(
            hCard,
            dwShareMode,
            dwPreferredProtocols,
            dwInitialization,
            pdwActiveProtocol
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardDisconnect(
    hCard:  SCARDHANDLE,
    dwDisposition:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardDisconnect(
            hCard,
            dwDisposition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardBeginTransaction(
    hCard:  SCARDHANDLE    
) ->  LONG
{
    unsafe {
        return SCardBeginTransaction(
            hCard
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardEndTransaction(
    hCard:  SCARDHANDLE,
    dwDisposition:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardEndTransaction(
            hCard,
            dwDisposition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardCancelTransaction(
    hCard:  SCARDHANDLE    
) ->  LONG
{
    unsafe {
        return SCardCancelTransaction(
            hCard
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardState(
    hCard:  SCARDHANDLE,
    pdwState:  LPDWORD,
    pdwProtocol:  LPDWORD,
    pbAtr:  LPBYTE,
    pcbAtrLen:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardState(
            hCard,
            pdwState,
            pdwProtocol,
            pbAtr,
            pcbAtrLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardStatusA(
    hCard:  SCARDHANDLE,
    mszReaderNames:  LPSTR,
    pcchReaderLen:  LPDWORD,
    pdwState:  LPDWORD,
    pdwProtocol:  LPDWORD,
    pbAtr:  LPBYTE,
    pcbAtrLen:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardStatusA(
            hCard,
            mszReaderNames,
            pcchReaderLen,
            pdwState,
            pdwProtocol,
            pbAtr,
            pcbAtrLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardStatusW(
    hCard:  SCARDHANDLE,
    mszReaderNames:  LPWSTR,
    pcchReaderLen:  LPDWORD,
    pdwState:  LPDWORD,
    pdwProtocol:  LPDWORD,
    pbAtr:  LPBYTE,
    pcbAtrLen:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardStatusW(
            hCard,
            mszReaderNames,
            pcchReaderLen,
            pdwState,
            pdwProtocol,
            pbAtr,
            pcbAtrLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardTransmit(
    hCard:  SCARDHANDLE,
    pioSendPci:  LPCSCARD_IO_REQUEST,
    pbSendBuffer:  LPCBYTE,
    cbSendLength:  DWORD,
    pioRecvPci:  LPSCARD_IO_REQUEST,
    pbRecvBuffer:  LPBYTE,
    pcbRecvLength:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardTransmit(
            hCard,
            pioSendPci,
            pbSendBuffer,
            cbSendLength,
            pioRecvPci,
            pbRecvBuffer,
            pcbRecvLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetTransmitCount(
    hCard:  SCARDHANDLE,
    pcTransmitCount:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetTransmitCount(
            hCard,
            pcTransmitCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardControl(
    hCard:  SCARDHANDLE,
    dwControlCode:  DWORD,
    lpInBuffer:  LPCVOID,
    cbInBufferSize:  DWORD,
    lpOutBuffer:  LPVOID,
    cbOutBufferSize:  DWORD,
    lpBytesReturned:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardControl(
            hCard,
            dwControlCode,
            lpInBuffer,
            cbInBufferSize,
            lpOutBuffer,
            cbOutBufferSize,
            lpBytesReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetAttrib(
    hCard:  SCARDHANDLE,
    dwAttrId:  DWORD,
    pbAttr:  LPBYTE,
    pcbAttrLen:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetAttrib(
            hCard,
            dwAttrId,
            pbAttr,
            pcbAttrLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardSetAttrib(
    hCard:  SCARDHANDLE,
    dwAttrId:  DWORD,
    pbAttr:  LPCBYTE,
    cbAttrLen:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardSetAttrib(
            hCard,
            dwAttrId,
            pbAttr,
            cbAttrLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardUIDlgSelectCardA(
    arg1:  LPOPENCARDNAME_EXA    
) ->  LONG
{
    unsafe {
        return SCardUIDlgSelectCardA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardUIDlgSelectCardW(
    arg1:  LPOPENCARDNAME_EXW    
) ->  LONG
{
    unsafe {
        return SCardUIDlgSelectCardW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOpenCardNameA(
    arg1:  LPOPENCARDNAMEA    
) ->  LONG
{
    unsafe {
        return GetOpenCardNameA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOpenCardNameW(
    arg1:  LPOPENCARDNAMEW    
) ->  LONG
{
    unsafe {
        return GetOpenCardNameW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardDlgExtendedError(
    
) ->  LONG
{
    unsafe {
        return SCardDlgExtendedError(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardReadCacheA(
    hContext:  SCARDCONTEXT,
    CardIdentifier: *mut UUID,
    FreshnessCounter:  DWORD,
    LookupName:  LPSTR,
    Data:  PBYTE,
    DataLen: *mut DWORD    
) ->  LONG
{
    unsafe {
        return SCardReadCacheA(
            hContext,
            CardIdentifier,
            FreshnessCounter,
            LookupName,
            Data,
            DataLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardReadCacheW(
    hContext:  SCARDCONTEXT,
    CardIdentifier: *mut UUID,
    FreshnessCounter:  DWORD,
    LookupName:  LPWSTR,
    Data:  PBYTE,
    DataLen: *mut DWORD    
) ->  LONG
{
    unsafe {
        return SCardReadCacheW(
            hContext,
            CardIdentifier,
            FreshnessCounter,
            LookupName,
            Data,
            DataLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardWriteCacheA(
    hContext:  SCARDCONTEXT,
    CardIdentifier: *mut UUID,
    FreshnessCounter:  DWORD,
    LookupName:  LPSTR,
    Data:  PBYTE,
    DataLen:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardWriteCacheA(
            hContext,
            CardIdentifier,
            FreshnessCounter,
            LookupName,
            Data,
            DataLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardWriteCacheW(
    hContext:  SCARDCONTEXT,
    CardIdentifier: *mut UUID,
    FreshnessCounter:  DWORD,
    LookupName:  LPWSTR,
    Data:  PBYTE,
    DataLen:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardWriteCacheW(
            hContext,
            CardIdentifier,
            FreshnessCounter,
            LookupName,
            Data,
            DataLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetReaderIconA(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCSTR,
    pbIcon:  LPBYTE,
    pcbIcon:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetReaderIconA(
            hContext,
            szReaderName,
            pbIcon,
            pcbIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetReaderIconW(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCWSTR,
    pbIcon:  LPBYTE,
    pcbIcon:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetReaderIconW(
            hContext,
            szReaderName,
            pbIcon,
            pcbIcon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetDeviceTypeIdA(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCSTR,
    pdwDeviceTypeId:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetDeviceTypeIdA(
            hContext,
            szReaderName,
            pdwDeviceTypeId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetDeviceTypeIdW(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCWSTR,
    pdwDeviceTypeId:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetDeviceTypeIdW(
            hContext,
            szReaderName,
            pdwDeviceTypeId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetReaderDeviceInstanceIdA(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCSTR,
    szDeviceInstanceId:  LPSTR,
    pcchDeviceInstanceId:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetReaderDeviceInstanceIdA(
            hContext,
            szReaderName,
            szDeviceInstanceId,
            pcchDeviceInstanceId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardGetReaderDeviceInstanceIdW(
    hContext:  SCARDCONTEXT,
    szReaderName:  LPCWSTR,
    szDeviceInstanceId:  LPWSTR,
    pcchDeviceInstanceId:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardGetReaderDeviceInstanceIdW(
            hContext,
            szReaderName,
            szDeviceInstanceId,
            pcchDeviceInstanceId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListReadersWithDeviceInstanceIdA(
    hContext:  SCARDCONTEXT,
    szDeviceInstanceId:  LPCSTR,
    mszReaders:  LPSTR,
    pcchReaders:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListReadersWithDeviceInstanceIdA(
            hContext,
            szDeviceInstanceId,
            mszReaders,
            pcchReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardListReadersWithDeviceInstanceIdW(
    hContext:  SCARDCONTEXT,
    szDeviceInstanceId:  LPCWSTR,
    mszReaders:  LPWSTR,
    pcchReaders:  LPDWORD    
) ->  LONG
{
    unsafe {
        return SCardListReadersWithDeviceInstanceIdW(
            hContext,
            szDeviceInstanceId,
            mszReaders,
            pcchReaders
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SCardAudit(
    hContext:  SCARDCONTEXT,
    dwEvent:  DWORD    
) ->  LONG
{
    unsafe {
        return SCardAudit(
            hContext,
            dwEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePropertySheetPageA(
    constPropSheetPagePointer:  LPCPROPSHEETPAGEA    
) ->  HPROPSHEETPAGE
{
    unsafe {
        return CreatePropertySheetPageA(
            constPropSheetPagePointer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePropertySheetPageW(
    constPropSheetPagePointer:  LPCPROPSHEETPAGEW    
) ->  HPROPSHEETPAGE
{
    unsafe {
        return CreatePropertySheetPageW(
            constPropSheetPagePointer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DestroyPropertySheetPage(
    arg1:  HPROPSHEETPAGE    
) ->  BOOL
{
    unsafe {
        return DestroyPropertySheetPage(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PropertySheetA(
    arg1:  LPCPROPSHEETHEADERA    
) ->  INT_PTR
{
    unsafe {
        return PropertySheetA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PropertySheetW(
    arg1:  LPCPROPSHEETHEADERW    
) ->  INT_PTR
{
    unsafe {
        return PropertySheetW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrintersA(
    Flags:  DWORD,
    Name:  LPSTR,
    Level:  DWORD,
    pPrinterEnum:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPrintersA(
            Flags,
            Name,
            Level,
            pPrinterEnum,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrintersW(
    Flags:  DWORD,
    Name:  LPWSTR,
    Level:  DWORD,
    pPrinterEnum:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPrintersW(
            Flags,
            Name,
            Level,
            pPrinterEnum,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSpoolFileHandle(
    hPrinter:  HANDLE    
) ->  HANDLE
{
    unsafe {
        return GetSpoolFileHandle(
            hPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CommitSpoolData(
    hPrinter:  HANDLE,
    hSpoolFile:  HANDLE,
    cbCommit:  DWORD    
) ->  HANDLE
{
    unsafe {
        return CommitSpoolData(
            hPrinter,
            hSpoolFile,
            cbCommit
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseSpoolFileHandle(
    hPrinter:  HANDLE,
    hSpoolFile:  HANDLE    
) ->  BOOL
{
    unsafe {
        return CloseSpoolFileHandle(
            hPrinter,
            hSpoolFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenPrinterA(
    pPrinterName:  LPSTR,
    phPrinter:  LPHANDLE,
    pDefault:  LPPRINTER_DEFAULTSA    
) ->  BOOL
{
    unsafe {
        return OpenPrinterA(
            pPrinterName,
            phPrinter,
            pDefault
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenPrinterW(
    pPrinterName:  LPWSTR,
    phPrinter:  LPHANDLE,
    pDefault:  LPPRINTER_DEFAULTSW    
) ->  BOOL
{
    unsafe {
        return OpenPrinterW(
            pPrinterName,
            phPrinter,
            pDefault
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResetPrinterA(
    hPrinter:  HANDLE,
    pDefault:  LPPRINTER_DEFAULTSA    
) ->  BOOL
{
    unsafe {
        return ResetPrinterA(
            hPrinter,
            pDefault
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ResetPrinterW(
    hPrinter:  HANDLE,
    pDefault:  LPPRINTER_DEFAULTSW    
) ->  BOOL
{
    unsafe {
        return ResetPrinterW(
            hPrinter,
            pDefault
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetJobA(
    hPrinter:  HANDLE,
    JobId:  DWORD,
    Level:  DWORD,
    pJob:  LPBYTE,
    Command:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetJobA(
            hPrinter,
            JobId,
            Level,
            pJob,
            Command
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetJobW(
    hPrinter:  HANDLE,
    JobId:  DWORD,
    Level:  DWORD,
    pJob:  LPBYTE,
    Command:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetJobW(
            hPrinter,
            JobId,
            Level,
            pJob,
            Command
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetJobA(
    hPrinter:  HANDLE,
    JobId:  DWORD,
    Level:  DWORD,
    pJob:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetJobA(
            hPrinter,
            JobId,
            Level,
            pJob,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetJobW(
    hPrinter:  HANDLE,
    JobId:  DWORD,
    Level:  DWORD,
    pJob:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetJobW(
            hPrinter,
            JobId,
            Level,
            pJob,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumJobsA(
    hPrinter:  HANDLE,
    FirstJob:  DWORD,
    NoJobs:  DWORD,
    Level:  DWORD,
    pJob:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumJobsA(
            hPrinter,
            FirstJob,
            NoJobs,
            Level,
            pJob,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumJobsW(
    hPrinter:  HANDLE,
    FirstJob:  DWORD,
    NoJobs:  DWORD,
    Level:  DWORD,
    pJob:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumJobsW(
            hPrinter,
            FirstJob,
            NoJobs,
            Level,
            pJob,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterA(
    pName:  LPSTR,
    Level:  DWORD,
    pPrinter:  LPBYTE    
) ->  HANDLE
{
    unsafe {
        return AddPrinterA(
            pName,
            Level,
            pPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterW(
    pName:  LPWSTR,
    Level:  DWORD,
    pPrinter:  LPBYTE    
) ->  HANDLE
{
    unsafe {
        return AddPrinterW(
            pName,
            Level,
            pPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinter(
    hPrinter:  HANDLE    
) ->  BOOL
{
    unsafe {
        return DeletePrinter(
            hPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPrinterA(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pPrinter:  LPBYTE,
    Command:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetPrinterA(
            hPrinter,
            Level,
            pPrinter,
            Command
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPrinterW(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pPrinter:  LPBYTE,
    Command:  DWORD    
) ->  BOOL
{
    unsafe {
        return SetPrinterW(
            hPrinter,
            Level,
            pPrinter,
            Command
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterA(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pPrinter:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrinterA(
            hPrinter,
            Level,
            pPrinter,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterW(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pPrinter:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrinterW(
            hPrinter,
            Level,
            pPrinter,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterDriverA(
    pName:  LPSTR,
    Level:  DWORD,
    pDriverInfo:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return AddPrinterDriverA(
            pName,
            Level,
            pDriverInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterDriverW(
    pName:  LPWSTR,
    Level:  DWORD,
    pDriverInfo:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return AddPrinterDriverW(
            pName,
            Level,
            pDriverInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterDriverExA(
    pName:  LPSTR,
    Level:  DWORD,
    lpbDriverInfo:  PBYTE,
    dwFileCopyFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return AddPrinterDriverExA(
            pName,
            Level,
            lpbDriverInfo,
            dwFileCopyFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterDriverExW(
    pName:  LPWSTR,
    Level:  DWORD,
    lpbDriverInfo:  PBYTE,
    dwFileCopyFlags:  DWORD    
) ->  BOOL
{
    unsafe {
        return AddPrinterDriverExW(
            pName,
            Level,
            lpbDriverInfo,
            dwFileCopyFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrinterDriversA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    Level:  DWORD,
    pDriverInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPrinterDriversA(
            pName,
            pEnvironment,
            Level,
            pDriverInfo,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrinterDriversW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    Level:  DWORD,
    pDriverInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPrinterDriversW(
            pName,
            pEnvironment,
            Level,
            pDriverInfo,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDriverA(
    hPrinter:  HANDLE,
    pEnvironment:  LPSTR,
    Level:  DWORD,
    pDriverInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrinterDriverA(
            hPrinter,
            pEnvironment,
            Level,
            pDriverInfo,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDriverW(
    hPrinter:  HANDLE,
    pEnvironment:  LPWSTR,
    Level:  DWORD,
    pDriverInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrinterDriverW(
            hPrinter,
            pEnvironment,
            Level,
            pDriverInfo,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDriverDirectoryA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    Level:  DWORD,
    pDriverDirectory:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrinterDriverDirectoryA(
            pName,
            pEnvironment,
            Level,
            pDriverDirectory,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDriverDirectoryW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    Level:  DWORD,
    pDriverDirectory:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrinterDriverDirectoryW(
            pName,
            pEnvironment,
            Level,
            pDriverDirectory,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDriverA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    pDriverName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return DeletePrinterDriverA(
            pName,
            pEnvironment,
            pDriverName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDriverW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    pDriverName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return DeletePrinterDriverW(
            pName,
            pEnvironment,
            pDriverName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDriverExA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    pDriverName:  LPSTR,
    dwDeleteFlag:  DWORD,
    dwVersionFlag:  DWORD    
) ->  BOOL
{
    unsafe {
        return DeletePrinterDriverExA(
            pName,
            pEnvironment,
            pDriverName,
            dwDeleteFlag,
            dwVersionFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDriverExW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    pDriverName:  LPWSTR,
    dwDeleteFlag:  DWORD,
    dwVersionFlag:  DWORD    
) ->  BOOL
{
    unsafe {
        return DeletePrinterDriverExW(
            pName,
            pEnvironment,
            pDriverName,
            dwDeleteFlag,
            dwVersionFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrintProcessorA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    pPathName:  LPSTR,
    pPrintProcessorName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return AddPrintProcessorA(
            pName,
            pEnvironment,
            pPathName,
            pPrintProcessorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrintProcessorW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    pPathName:  LPWSTR,
    pPrintProcessorName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return AddPrintProcessorW(
            pName,
            pEnvironment,
            pPathName,
            pPrintProcessorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrintProcessorsA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    Level:  DWORD,
    pPrintProcessorInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPrintProcessorsA(
            pName,
            pEnvironment,
            Level,
            pPrintProcessorInfo,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrintProcessorsW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    Level:  DWORD,
    pPrintProcessorInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPrintProcessorsW(
            pName,
            pEnvironment,
            Level,
            pPrintProcessorInfo,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrintProcessorDirectoryA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    Level:  DWORD,
    pPrintProcessorInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrintProcessorDirectoryA(
            pName,
            pEnvironment,
            Level,
            pPrintProcessorInfo,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrintProcessorDirectoryW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    Level:  DWORD,
    pPrintProcessorInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrintProcessorDirectoryW(
            pName,
            pEnvironment,
            Level,
            pPrintProcessorInfo,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrintProcessorDatatypesA(
    pName:  LPSTR,
    pPrintProcessorName:  LPSTR,
    Level:  DWORD,
    pDatatypes:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPrintProcessorDatatypesA(
            pName,
            pPrintProcessorName,
            Level,
            pDatatypes,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrintProcessorDatatypesW(
    pName:  LPWSTR,
    pPrintProcessorName:  LPWSTR,
    Level:  DWORD,
    pDatatypes:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPrintProcessorDatatypesW(
            pName,
            pPrintProcessorName,
            Level,
            pDatatypes,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrintProcessorA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    pPrintProcessorName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return DeletePrintProcessorA(
            pName,
            pEnvironment,
            pPrintProcessorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrintProcessorW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    pPrintProcessorName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return DeletePrintProcessorW(
            pName,
            pEnvironment,
            pPrintProcessorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartDocPrinterA(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pDocInfo:  LPBYTE    
) ->  DWORD
{
    unsafe {
        return StartDocPrinterA(
            hPrinter,
            Level,
            pDocInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartDocPrinterW(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pDocInfo:  LPBYTE    
) ->  DWORD
{
    unsafe {
        return StartDocPrinterW(
            hPrinter,
            Level,
            pDocInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartPagePrinter(
    hPrinter:  HANDLE    
) ->  BOOL
{
    unsafe {
        return StartPagePrinter(
            hPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WritePrinter(
    hPrinter:  HANDLE,
    pBuf:  LPVOID,
    cbBuf:  DWORD,
    pcWritten:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return WritePrinter(
            hPrinter,
            pBuf,
            cbBuf,
            pcWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FlushPrinter(
    hPrinter:  HANDLE,
    pBuf:  LPVOID,
    cbBuf:  DWORD,
    pcWritten:  LPDWORD,
    cSleep:  DWORD    
) ->  BOOL
{
    unsafe {
        return FlushPrinter(
            hPrinter,
            pBuf,
            cbBuf,
            pcWritten,
            cSleep
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndPagePrinter(
    hPrinter:  HANDLE    
) ->  BOOL
{
    unsafe {
        return EndPagePrinter(
            hPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AbortPrinter(
    hPrinter:  HANDLE    
) ->  BOOL
{
    unsafe {
        return AbortPrinter(
            hPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadPrinter(
    hPrinter:  HANDLE,
    pBuf:  LPVOID,
    cbBuf:  DWORD,
    pNoBytesRead:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return ReadPrinter(
            hPrinter,
            pBuf,
            cbBuf,
            pNoBytesRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EndDocPrinter(
    hPrinter:  HANDLE    
) ->  BOOL
{
    unsafe {
        return EndDocPrinter(
            hPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddJobA(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pData:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return AddJobA(
            hPrinter,
            Level,
            pData,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddJobW(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pData:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return AddJobW(
            hPrinter,
            Level,
            pData,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ScheduleJob(
    hPrinter:  HANDLE,
    JobId:  DWORD    
) ->  BOOL
{
    unsafe {
        return ScheduleJob(
            hPrinter,
            JobId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrinterProperties(
    hWnd:  HWND,
    hPrinter:  HANDLE    
) ->  BOOL
{
    unsafe {
        return PrinterProperties(
            hWnd,
            hPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DocumentPropertiesA(
    hWnd:  HWND,
    hPrinter:  HANDLE,
    pDeviceName:  LPSTR,
    pDevModeOutput:  PDEVMODEA,
    pDevModeInput:  PDEVMODEA,
    fMode:  DWORD    
) ->  LONG
{
    unsafe {
        return DocumentPropertiesA(
            hWnd,
            hPrinter,
            pDeviceName,
            pDevModeOutput,
            pDevModeInput,
            fMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DocumentPropertiesW(
    hWnd:  HWND,
    hPrinter:  HANDLE,
    pDeviceName:  LPWSTR,
    pDevModeOutput:  PDEVMODEW,
    pDevModeInput:  PDEVMODEW,
    fMode:  DWORD    
) ->  LONG
{
    unsafe {
        return DocumentPropertiesW(
            hWnd,
            hPrinter,
            pDeviceName,
            pDevModeOutput,
            pDevModeInput,
            fMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AdvancedDocumentPropertiesA(
    hWnd:  HWND,
    hPrinter:  HANDLE,
    pDeviceName:  LPSTR,
    pDevModeOutput:  PDEVMODEA,
    pDevModeInput:  PDEVMODEA    
) ->  LONG
{
    unsafe {
        return AdvancedDocumentPropertiesA(
            hWnd,
            hPrinter,
            pDeviceName,
            pDevModeOutput,
            pDevModeInput
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AdvancedDocumentPropertiesW(
    hWnd:  HWND,
    hPrinter:  HANDLE,
    pDeviceName:  LPWSTR,
    pDevModeOutput:  PDEVMODEW,
    pDevModeInput:  PDEVMODEW    
) ->  LONG
{
    unsafe {
        return AdvancedDocumentPropertiesW(
            hWnd,
            hPrinter,
            pDeviceName,
            pDevModeOutput,
            pDevModeInput
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ExtDeviceMode(
    hWnd:  HWND,
    hInst:  HANDLE,
    pDevModeOutput:  LPDEVMODEA,
    pDeviceName:  LPSTR,
    pPort:  LPSTR,
    pDevModeInput:  LPDEVMODEA,
    pProfile:  LPSTR,
    fMode:  DWORD    
) ->  LONG
{
    unsafe {
        return ExtDeviceMode(
            hWnd,
            hInst,
            pDevModeOutput,
            pDeviceName,
            pPort,
            pDevModeInput,
            pProfile,
            fMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDataA(
    hPrinter:  HANDLE,
    pValueName:  LPSTR,
    pType:  LPDWORD,
    pData:  LPBYTE,
    nSize:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetPrinterDataA(
            hPrinter,
            pValueName,
            pType,
            pData,
            nSize,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDataW(
    hPrinter:  HANDLE,
    pValueName:  LPWSTR,
    pType:  LPDWORD,
    pData:  LPBYTE,
    nSize:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetPrinterDataW(
            hPrinter,
            pValueName,
            pType,
            pData,
            nSize,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDataExA(
    hPrinter:  HANDLE,
    pKeyName:  LPCSTR,
    pValueName:  LPCSTR,
    pType:  LPDWORD,
    pData:  LPBYTE,
    nSize:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetPrinterDataExA(
            hPrinter,
            pKeyName,
            pValueName,
            pType,
            pData,
            nSize,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDataExW(
    hPrinter:  HANDLE,
    pKeyName:  LPCWSTR,
    pValueName:  LPCWSTR,
    pType:  LPDWORD,
    pData:  LPBYTE,
    nSize:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return GetPrinterDataExW(
            hPrinter,
            pKeyName,
            pValueName,
            pType,
            pData,
            nSize,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrinterDataA(
    hPrinter:  HANDLE,
    dwIndex:  DWORD,
    pValueName:  LPSTR,
    cbValueName:  DWORD,
    pcbValueName:  LPDWORD,
    pType:  LPDWORD,
    pData:  LPBYTE,
    cbData:  DWORD,
    pcbData:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return EnumPrinterDataA(
            hPrinter,
            dwIndex,
            pValueName,
            cbValueName,
            pcbValueName,
            pType,
            pData,
            cbData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrinterDataW(
    hPrinter:  HANDLE,
    dwIndex:  DWORD,
    pValueName:  LPWSTR,
    cbValueName:  DWORD,
    pcbValueName:  LPDWORD,
    pType:  LPDWORD,
    pData:  LPBYTE,
    cbData:  DWORD,
    pcbData:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return EnumPrinterDataW(
            hPrinter,
            dwIndex,
            pValueName,
            cbValueName,
            pcbValueName,
            pType,
            pData,
            cbData,
            pcbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrinterDataExA(
    hPrinter:  HANDLE,
    pKeyName:  LPCSTR,
    pEnumValues:  LPBYTE,
    cbEnumValues:  DWORD,
    pcbEnumValues:  LPDWORD,
    pnEnumValues:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return EnumPrinterDataExA(
            hPrinter,
            pKeyName,
            pEnumValues,
            cbEnumValues,
            pcbEnumValues,
            pnEnumValues
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrinterDataExW(
    hPrinter:  HANDLE,
    pKeyName:  LPCWSTR,
    pEnumValues:  LPBYTE,
    cbEnumValues:  DWORD,
    pcbEnumValues:  LPDWORD,
    pnEnumValues:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return EnumPrinterDataExW(
            hPrinter,
            pKeyName,
            pEnumValues,
            cbEnumValues,
            pcbEnumValues,
            pnEnumValues
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrinterKeyA(
    hPrinter:  HANDLE,
    pKeyName:  LPCSTR,
    pSubkey:  LPSTR,
    cbSubkey:  DWORD,
    pcbSubkey:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return EnumPrinterKeyA(
            hPrinter,
            pKeyName,
            pSubkey,
            cbSubkey,
            pcbSubkey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPrinterKeyW(
    hPrinter:  HANDLE,
    pKeyName:  LPCWSTR,
    pSubkey:  LPWSTR,
    cbSubkey:  DWORD,
    pcbSubkey:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return EnumPrinterKeyW(
            hPrinter,
            pKeyName,
            pSubkey,
            cbSubkey,
            pcbSubkey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPrinterDataA(
    hPrinter:  HANDLE,
    pValueName:  LPSTR,
    Type:  DWORD,
    pData:  LPBYTE,
    cbData:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetPrinterDataA(
            hPrinter,
            pValueName,
            Type,
            pData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPrinterDataW(
    hPrinter:  HANDLE,
    pValueName:  LPWSTR,
    Type:  DWORD,
    pData:  LPBYTE,
    cbData:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetPrinterDataW(
            hPrinter,
            pValueName,
            Type,
            pData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPrinterDataExA(
    hPrinter:  HANDLE,
    pKeyName:  LPCSTR,
    pValueName:  LPCSTR,
    Type:  DWORD,
    pData:  LPBYTE,
    cbData:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetPrinterDataExA(
            hPrinter,
            pKeyName,
            pValueName,
            Type,
            pData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPrinterDataExW(
    hPrinter:  HANDLE,
    pKeyName:  LPCWSTR,
    pValueName:  LPCWSTR,
    Type:  DWORD,
    pData:  LPBYTE,
    cbData:  DWORD    
) ->  DWORD
{
    unsafe {
        return SetPrinterDataExW(
            hPrinter,
            pKeyName,
            pValueName,
            Type,
            pData,
            cbData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDataA(
    hPrinter:  HANDLE,
    pValueName:  LPSTR    
) ->  DWORD
{
    unsafe {
        return DeletePrinterDataA(
            hPrinter,
            pValueName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDataW(
    hPrinter:  HANDLE,
    pValueName:  LPWSTR    
) ->  DWORD
{
    unsafe {
        return DeletePrinterDataW(
            hPrinter,
            pValueName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDataExA(
    hPrinter:  HANDLE,
    pKeyName:  LPCSTR,
    pValueName:  LPCSTR    
) ->  DWORD
{
    unsafe {
        return DeletePrinterDataExA(
            hPrinter,
            pKeyName,
            pValueName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDataExW(
    hPrinter:  HANDLE,
    pKeyName:  LPCWSTR,
    pValueName:  LPCWSTR    
) ->  DWORD
{
    unsafe {
        return DeletePrinterDataExW(
            hPrinter,
            pKeyName,
            pValueName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterKeyA(
    hPrinter:  HANDLE,
    pKeyName:  LPCSTR    
) ->  DWORD
{
    unsafe {
        return DeletePrinterKeyA(
            hPrinter,
            pKeyName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterKeyW(
    hPrinter:  HANDLE,
    pKeyName:  LPCWSTR    
) ->  DWORD
{
    unsafe {
        return DeletePrinterKeyW(
            hPrinter,
            pKeyName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitForPrinterChange(
    hPrinter:  HANDLE,
    Flags:  DWORD    
) ->  DWORD
{
    unsafe {
        return WaitForPrinterChange(
            hPrinter,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindFirstPrinterChangeNotification(
    hPrinter:  HANDLE,
    fdwFilter:  DWORD,
    fdwOptions:  DWORD,
    pPrinterNotifyOptions:  PVOID    
) ->  HANDLE
{
    unsafe {
        return FindFirstPrinterChangeNotification(
            hPrinter,
            fdwFilter,
            fdwOptions,
            pPrinterNotifyOptions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindNextPrinterChangeNotification(
    hChange:  HANDLE,
    pdwChange:  PDWORD,
    pvReserved:  LPVOID,
    ppPrinterNotifyInfo: *mut LPVOID    
) ->  BOOL
{
    unsafe {
        return FindNextPrinterChangeNotification(
            hChange,
            pdwChange,
            pvReserved,
            ppPrinterNotifyInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreePrinterNotifyInfo(
    pPrinterNotifyInfo:  PPRINTER_NOTIFY_INFO    
) ->  BOOL
{
    unsafe {
        return FreePrinterNotifyInfo(
            pPrinterNotifyInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindClosePrinterChangeNotification(
    hChange:  HANDLE    
) ->  BOOL
{
    unsafe {
        return FindClosePrinterChangeNotification(
            hChange
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrinterMessageBoxA(
    hPrinter:  HANDLE,
    Error:  DWORD,
    hWnd:  HWND,
    pText:  LPSTR,
    pCaption:  LPSTR,
    dwType:  DWORD    
) ->  DWORD
{
    unsafe {
        return PrinterMessageBoxA(
            hPrinter,
            Error,
            hWnd,
            pText,
            pCaption,
            dwType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrinterMessageBoxW(
    hPrinter:  HANDLE,
    Error:  DWORD,
    hWnd:  HWND,
    pText:  LPWSTR,
    pCaption:  LPWSTR,
    dwType:  DWORD    
) ->  DWORD
{
    unsafe {
        return PrinterMessageBoxW(
            hPrinter,
            Error,
            hWnd,
            pText,
            pCaption,
            dwType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClosePrinter(
    hPrinter:  HANDLE    
) ->  BOOL
{
    unsafe {
        return ClosePrinter(
            hPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddFormA(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pForm:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return AddFormA(
            hPrinter,
            Level,
            pForm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddFormW(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pForm:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return AddFormW(
            hPrinter,
            Level,
            pForm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteFormA(
    hPrinter:  HANDLE,
    pFormName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return DeleteFormA(
            hPrinter,
            pFormName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteFormW(
    hPrinter:  HANDLE,
    pFormName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return DeleteFormW(
            hPrinter,
            pFormName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFormA(
    hPrinter:  HANDLE,
    pFormName:  LPSTR,
    Level:  DWORD,
    pForm:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetFormA(
            hPrinter,
            pFormName,
            Level,
            pForm,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFormW(
    hPrinter:  HANDLE,
    pFormName:  LPWSTR,
    Level:  DWORD,
    pForm:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetFormW(
            hPrinter,
            pFormName,
            Level,
            pForm,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFormA(
    hPrinter:  HANDLE,
    pFormName:  LPSTR,
    Level:  DWORD,
    pForm:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return SetFormA(
            hPrinter,
            pFormName,
            Level,
            pForm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetFormW(
    hPrinter:  HANDLE,
    pFormName:  LPWSTR,
    Level:  DWORD,
    pForm:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return SetFormW(
            hPrinter,
            pFormName,
            Level,
            pForm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumFormsA(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pForm:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumFormsA(
            hPrinter,
            Level,
            pForm,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumFormsW(
    hPrinter:  HANDLE,
    Level:  DWORD,
    pForm:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumFormsW(
            hPrinter,
            Level,
            pForm,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumMonitorsA(
    pName:  LPSTR,
    Level:  DWORD,
    pMonitor:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumMonitorsA(
            pName,
            Level,
            pMonitor,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumMonitorsW(
    pName:  LPWSTR,
    Level:  DWORD,
    pMonitor:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumMonitorsW(
            pName,
            Level,
            pMonitor,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddMonitorA(
    pName:  LPSTR,
    Level:  DWORD,
    pMonitors:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return AddMonitorA(
            pName,
            Level,
            pMonitors
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddMonitorW(
    pName:  LPWSTR,
    Level:  DWORD,
    pMonitors:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return AddMonitorW(
            pName,
            Level,
            pMonitors
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteMonitorA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    pMonitorName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return DeleteMonitorA(
            pName,
            pEnvironment,
            pMonitorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteMonitorW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    pMonitorName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return DeleteMonitorW(
            pName,
            pEnvironment,
            pMonitorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPortsA(
    pName:  LPSTR,
    Level:  DWORD,
    pPort:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPortsA(
            pName,
            Level,
            pPort,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumPortsW(
    pName:  LPWSTR,
    Level:  DWORD,
    pPort:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD,
    pcReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumPortsW(
            pName,
            Level,
            pPort,
            cbBuf,
            pcbNeeded,
            pcReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPortA(
    pName:  LPSTR,
    hWnd:  HWND,
    pMonitorName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return AddPortA(
            pName,
            hWnd,
            pMonitorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPortW(
    pName:  LPWSTR,
    hWnd:  HWND,
    pMonitorName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return AddPortW(
            pName,
            hWnd,
            pMonitorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConfigurePortA(
    pName:  LPSTR,
    hWnd:  HWND,
    pPortName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return ConfigurePortA(
            pName,
            hWnd,
            pPortName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConfigurePortW(
    pName:  LPWSTR,
    hWnd:  HWND,
    pPortName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return ConfigurePortW(
            pName,
            hWnd,
            pPortName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePortA(
    pName:  LPSTR,
    hWnd:  HWND,
    pPortName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return DeletePortA(
            pName,
            hWnd,
            pPortName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePortW(
    pName:  LPWSTR,
    hWnd:  HWND,
    pPortName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return DeletePortW(
            pName,
            hWnd,
            pPortName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_XcvDataW(
    hXcv:  HANDLE,
    pszDataName:  PCWSTR,
    pInputData:  PBYTE,
    cbInputData:  DWORD,
    pOutputData:  PBYTE,
    cbOutputData:  DWORD,
    pcbOutputNeeded:  PDWORD,
    pdwStatus:  PDWORD    
) ->  BOOL
{
    unsafe {
        return XcvDataW(
            hXcv,
            pszDataName,
            pInputData,
            cbInputData,
            pOutputData,
            cbOutputData,
            pcbOutputNeeded,
            pdwStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDefaultPrinterA(
    pszBuffer:  LPSTR,
    pcchBuffer:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetDefaultPrinterA(
            pszBuffer,
            pcchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetDefaultPrinterW(
    pszBuffer:  LPWSTR,
    pcchBuffer:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetDefaultPrinterW(
            pszBuffer,
            pcchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDefaultPrinterA(
    pszPrinter:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return SetDefaultPrinterA(
            pszPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetDefaultPrinterW(
    pszPrinter:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return SetDefaultPrinterW(
            pszPrinter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPortA(
    pName:  LPSTR,
    pPortName:  LPSTR,
    dwLevel:  DWORD,
    pPortInfo:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return SetPortA(
            pName,
            pPortName,
            dwLevel,
            pPortInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetPortW(
    pName:  LPWSTR,
    pPortName:  LPWSTR,
    dwLevel:  DWORD,
    pPortInfo:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return SetPortW(
            pName,
            pPortName,
            dwLevel,
            pPortInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterConnectionA(
    pName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return AddPrinterConnectionA(
            pName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterConnectionW(
    pName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return AddPrinterConnectionW(
            pName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterConnectionA(
    pName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return DeletePrinterConnectionA(
            pName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterConnectionW(
    pName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return DeletePrinterConnectionW(
            pName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ConnectToPrinterDlg(
    hwnd:  HWND,
    Flags:  DWORD    
) ->  HANDLE
{
    unsafe {
        return ConnectToPrinterDlg(
            hwnd,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrintProvidorA(
    pName:  LPSTR,
    Level:  DWORD,
    pProvidorInfo:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return AddPrintProvidorA(
            pName,
            Level,
            pProvidorInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrintProvidorW(
    pName:  LPWSTR,
    Level:  DWORD,
    pProvidorInfo:  LPBYTE    
) ->  BOOL
{
    unsafe {
        return AddPrintProvidorW(
            pName,
            Level,
            pProvidorInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrintProvidorA(
    pName:  LPSTR,
    pEnvironment:  LPSTR,
    pPrintProvidorName:  LPSTR    
) ->  BOOL
{
    unsafe {
        return DeletePrintProvidorA(
            pName,
            pEnvironment,
            pPrintProvidorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrintProvidorW(
    pName:  LPWSTR,
    pEnvironment:  LPWSTR,
    pPrintProvidorName:  LPWSTR    
) ->  BOOL
{
    unsafe {
        return DeletePrintProvidorW(
            pName,
            pEnvironment,
            pPrintProvidorName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidDevmodeA(
    pDevmode:  PDEVMODEA,
    DevmodeSize:  usize    
) ->  BOOL
{
    unsafe {
        return IsValidDevmodeA(
            pDevmode,
            DevmodeSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidDevmodeW(
    pDevmode:  PDEVMODEW,
    DevmodeSize:  usize    
) ->  BOOL
{
    unsafe {
        return IsValidDevmodeW(
            pDevmode,
            DevmodeSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenPrinter2A(
    pPrinterName:  LPCSTR,
    phPrinter:  LPHANDLE,
    pDefault:  PPRINTER_DEFAULTSA,
    pOptions:  PPRINTER_OPTIONSA    
) ->  BOOL
{
    unsafe {
        return OpenPrinter2A(
            pPrinterName,
            phPrinter,
            pDefault,
            pOptions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenPrinter2W(
    pPrinterName:  LPCWSTR,
    phPrinter:  LPHANDLE,
    pDefault:  PPRINTER_DEFAULTSW,
    pOptions:  PPRINTER_OPTIONSW    
) ->  BOOL
{
    unsafe {
        return OpenPrinter2W(
            pPrinterName,
            phPrinter,
            pDefault,
            pOptions
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterConnection2A(
    hWnd:  HWND,
    pszName:  LPCSTR,
    dwLevel:  DWORD,
    pConnectionInfo:  PVOID    
) ->  BOOL
{
    unsafe {
        return AddPrinterConnection2A(
            hWnd,
            pszName,
            dwLevel,
            pConnectionInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AddPrinterConnection2W(
    hWnd:  HWND,
    pszName:  LPCWSTR,
    dwLevel:  DWORD,
    pConnectionInfo:  PVOID    
) ->  BOOL
{
    unsafe {
        return AddPrinterConnection2W(
            hWnd,
            pszName,
            dwLevel,
            pConnectionInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InstallPrinterDriverFromPackageA(
    pszServer:  LPCSTR,
    pszInfPath:  LPCSTR,
    pszDriverName:  LPCSTR,
    pszEnvironment:  LPCSTR,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return InstallPrinterDriverFromPackageA(
            pszServer,
            pszInfPath,
            pszDriverName,
            pszEnvironment,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InstallPrinterDriverFromPackageW(
    pszServer:  LPCWSTR,
    pszInfPath:  LPCWSTR,
    pszDriverName:  LPCWSTR,
    pszEnvironment:  LPCWSTR,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return InstallPrinterDriverFromPackageW(
            pszServer,
            pszInfPath,
            pszDriverName,
            pszEnvironment,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UploadPrinterDriverPackageA(
    pszServer:  LPCSTR,
    pszInfPath:  LPCSTR,
    pszEnvironment:  LPCSTR,
    dwFlags:  DWORD,
    hwnd:  HWND,
    pszDestInfPath:  LPSTR,
    pcchDestInfPath:  PULONG    
) ->  HRESULT
{
    unsafe {
        return UploadPrinterDriverPackageA(
            pszServer,
            pszInfPath,
            pszEnvironment,
            dwFlags,
            hwnd,
            pszDestInfPath,
            pcchDestInfPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UploadPrinterDriverPackageW(
    pszServer:  LPCWSTR,
    pszInfPath:  LPCWSTR,
    pszEnvironment:  LPCWSTR,
    dwFlags:  DWORD,
    hwnd:  HWND,
    pszDestInfPath:  LPWSTR,
    pcchDestInfPath:  PULONG    
) ->  HRESULT
{
    unsafe {
        return UploadPrinterDriverPackageW(
            pszServer,
            pszInfPath,
            pszEnvironment,
            dwFlags,
            hwnd,
            pszDestInfPath,
            pcchDestInfPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCorePrinterDriversA(
    pszServer:  LPCSTR,
    pszEnvironment:  LPCSTR,
    pszzCoreDriverDependencies:  LPCSTR,
    cCorePrinterDrivers:  DWORD,
    pCorePrinterDrivers:  PCORE_PRINTER_DRIVERA    
) ->  HRESULT
{
    unsafe {
        return GetCorePrinterDriversA(
            pszServer,
            pszEnvironment,
            pszzCoreDriverDependencies,
            cCorePrinterDrivers,
            pCorePrinterDrivers
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetCorePrinterDriversW(
    pszServer:  LPCWSTR,
    pszEnvironment:  LPCWSTR,
    pszzCoreDriverDependencies:  LPCWSTR,
    cCorePrinterDrivers:  DWORD,
    pCorePrinterDrivers:  PCORE_PRINTER_DRIVERW    
) ->  HRESULT
{
    unsafe {
        return GetCorePrinterDriversW(
            pszServer,
            pszEnvironment,
            pszzCoreDriverDependencies,
            cCorePrinterDrivers,
            pCorePrinterDrivers
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CorePrinterDriverInstalledA(
    pszServer:  LPCSTR,
    pszEnvironment:  LPCSTR,
    CoreDriverGUID:  GUID,
    ftDriverDate:  FILETIME,
    dwlDriverVersion:  DWORDLONG,
    pbDriverInstalled: *mut BOOL    
) ->  HRESULT
{
    unsafe {
        return CorePrinterDriverInstalledA(
            pszServer,
            pszEnvironment,
            CoreDriverGUID,
            ftDriverDate,
            dwlDriverVersion,
            pbDriverInstalled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CorePrinterDriverInstalledW(
    pszServer:  LPCWSTR,
    pszEnvironment:  LPCWSTR,
    CoreDriverGUID:  GUID,
    ftDriverDate:  FILETIME,
    dwlDriverVersion:  DWORDLONG,
    pbDriverInstalled: *mut BOOL    
) ->  HRESULT
{
    unsafe {
        return CorePrinterDriverInstalledW(
            pszServer,
            pszEnvironment,
            CoreDriverGUID,
            ftDriverDate,
            dwlDriverVersion,
            pbDriverInstalled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDriverPackagePathA(
    pszServer:  LPCSTR,
    pszEnvironment:  LPCSTR,
    pszLanguage:  LPCSTR,
    pszPackageID:  LPCSTR,
    pszDriverPackageCab:  LPSTR,
    cchDriverPackageCab:  DWORD,
    pcchRequiredSize:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return GetPrinterDriverPackagePathA(
            pszServer,
            pszEnvironment,
            pszLanguage,
            pszPackageID,
            pszDriverPackageCab,
            cchDriverPackageCab,
            pcchRequiredSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDriverPackagePathW(
    pszServer:  LPCWSTR,
    pszEnvironment:  LPCWSTR,
    pszLanguage:  LPCWSTR,
    pszPackageID:  LPCWSTR,
    pszDriverPackageCab:  LPWSTR,
    cchDriverPackageCab:  DWORD,
    pcchRequiredSize:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return GetPrinterDriverPackagePathW(
            pszServer,
            pszEnvironment,
            pszLanguage,
            pszPackageID,
            pszDriverPackageCab,
            cchDriverPackageCab,
            pcchRequiredSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDriverPackageA(
    pszServer:  LPCSTR,
    pszInfPath:  LPCSTR,
    pszEnvironment:  LPCSTR    
) ->  HRESULT
{
    unsafe {
        return DeletePrinterDriverPackageA(
            pszServer,
            pszInfPath,
            pszEnvironment
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeletePrinterDriverPackageW(
    pszServer:  LPCWSTR,
    pszInfPath:  LPCWSTR,
    pszEnvironment:  LPCWSTR    
) ->  HRESULT
{
    unsafe {
        return DeletePrinterDriverPackageW(
            pszServer,
            pszInfPath,
            pszEnvironment
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReportJobProcessingProgress(
    printerHandle:  HANDLE,
    jobId:  ULONG,
    jobOperation:  EPrintXPSJobOperation,
    jobProgress:  EPrintXPSJobProgress    
) ->  HRESULT
{
    unsafe {
        return ReportJobProcessingProgress(
            printerHandle,
            jobId,
            jobOperation,
            jobProgress
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDriver2A(
    hWnd:  HWND,
    hPrinter:  HANDLE,
    pEnvironment:  LPSTR,
    Level:  DWORD,
    pDriverInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrinterDriver2A(
            hWnd,
            hPrinter,
            pEnvironment,
            Level,
            pDriverInfo,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrinterDriver2W(
    hWnd:  HWND,
    hPrinter:  HANDLE,
    pEnvironment:  LPWSTR,
    Level:  DWORD,
    pDriverInfo:  LPBYTE,
    cbBuf:  DWORD,
    pcbNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetPrinterDriver2W(
            hWnd,
            hPrinter,
            pEnvironment,
            Level,
            pDriverInfo,
            cbBuf,
            pcbNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrintExecutionData(
    pData: *mut PRINT_EXECUTION_DATA    
) ->  BOOL
{
    unsafe {
        return GetPrintExecutionData(
            pData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetJobNamedPropertyValue(
    hPrinter:  HANDLE,
    JobId:  DWORD,
    pszName:  PCWSTR,
    pValue: *mut PrintPropertyValue    
) ->  DWORD
{
    unsafe {
        return GetJobNamedPropertyValue(
            hPrinter,
            JobId,
            pszName,
            pValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreePrintPropertyValue(
    pValue: *mut PrintPropertyValue    
)
{
    unsafe {
        return FreePrintPropertyValue(
            pValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreePrintNamedPropertyArray(
    cProperties:  DWORD,
    ppProperties: *mut *mut PrintNamedProperty    
)
{
    unsafe {
        return FreePrintNamedPropertyArray(
            cProperties,
            ppProperties
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetJobNamedProperty(
    hPrinter:  HANDLE,
    JobId:  DWORD,
    pProperty: *const PrintNamedProperty    
) ->  DWORD
{
    unsafe {
        return SetJobNamedProperty(
            hPrinter,
            JobId,
            pProperty
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteJobNamedProperty(
    hPrinter:  HANDLE,
    JobId:  DWORD,
    pszName:  PCWSTR    
) ->  DWORD
{
    unsafe {
        return DeleteJobNamedProperty(
            hPrinter,
            JobId,
            pszName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumJobNamedProperties(
    hPrinter:  HANDLE,
    JobId:  DWORD,
    pcProperties: *mut DWORD,
    ppProperties: *mut *mut PrintNamedProperty    
) ->  DWORD
{
    unsafe {
        return EnumJobNamedProperties(
            hPrinter,
            JobId,
            pcProperties,
            ppProperties
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetPrintOutputInfo(
    hWnd:  HWND,
    pszPrinter:  PCWSTR,
    phFile: *mut HANDLE,
    ppszOutputFile: *mut PWSTR    
) ->  HRESULT
{
    unsafe {
        return GetPrintOutputInfo(
            hWnd,
            pszPrinter,
            phFile,
            ppszOutputFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__calloc_base(
    _Count:  usize,
    _Size:  usize    
) -> *mut c_void
{
    unsafe {
        return _calloc_base(
            _Count,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_calloc(
    _Count:  c_ulonglong,
    _Size:  c_ulonglong    
) -> *mut c_void
{
    unsafe {
        return calloc(
            _Count,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__callnewh(
    _Size:  usize    
) ->  c_int
{
    unsafe {
        return _callnewh(
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__expand(
    _Block: *mut c_void,
    _Size:  usize    
) -> *mut c_void
{
    unsafe {
        return _expand(
            _Block,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__free_base(
    _Block: *mut c_void    
)
{
    unsafe {
        return _free_base(
            _Block
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_free(
    _Block: *mut c_void    
)
{
    unsafe {
        return free(
            _Block
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__malloc_base(
    _Size:  usize    
) -> *mut c_void
{
    unsafe {
        return _malloc_base(
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_malloc(
    _Size:  c_ulonglong    
) -> *mut c_void
{
    unsafe {
        return malloc(
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__msize_base(
    _Block: *mut c_void    
) ->  usize
{
    unsafe {
        return _msize_base(
            _Block
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__msize(
    _Block: *mut c_void    
) ->  usize
{
    unsafe {
        return _msize(
            _Block
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__realloc_base(
    _Block: *mut c_void,
    _Size:  usize    
) -> *mut c_void
{
    unsafe {
        return _realloc_base(
            _Block,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_realloc(
    _Block: *mut c_void,
    _Size:  c_ulonglong    
) -> *mut c_void
{
    unsafe {
        return realloc(
            _Block,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__recalloc_base(
    _Block: *mut c_void,
    _Count:  usize,
    _Size:  usize    
) -> *mut c_void
{
    unsafe {
        return _recalloc_base(
            _Block,
            _Count,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__recalloc(
    _Block: *mut c_void,
    _Count:  usize,
    _Size:  usize    
) -> *mut c_void
{
    unsafe {
        return _recalloc(
            _Block,
            _Count,
            _Size
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__aligned_free(
    _Block: *mut c_void    
)
{
    unsafe {
        return _aligned_free(
            _Block
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__aligned_malloc(
    _Size:  usize,
    _Alignment:  usize    
) -> *mut c_void
{
    unsafe {
        return _aligned_malloc(
            _Size,
            _Alignment
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__aligned_offset_malloc(
    _Size:  usize,
    _Alignment:  usize,
    _Offset:  usize    
) -> *mut c_void
{
    unsafe {
        return _aligned_offset_malloc(
            _Size,
            _Alignment,
            _Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__aligned_msize(
    _Block: *mut c_void,
    _Alignment:  usize,
    _Offset:  usize    
) ->  usize
{
    unsafe {
        return _aligned_msize(
            _Block,
            _Alignment,
            _Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__aligned_offset_realloc(
    _Block: *mut c_void,
    _Size:  usize,
    _Alignment:  usize,
    _Offset:  usize    
) -> *mut c_void
{
    unsafe {
        return _aligned_offset_realloc(
            _Block,
            _Size,
            _Alignment,
            _Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__aligned_offset_recalloc(
    _Block: *mut c_void,
    _Count:  usize,
    _Size:  usize,
    _Alignment:  usize,
    _Offset:  usize    
) -> *mut c_void
{
    unsafe {
        return _aligned_offset_recalloc(
            _Block,
            _Count,
            _Size,
            _Alignment,
            _Offset
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__aligned_realloc(
    _Block: *mut c_void,
    _Size:  usize,
    _Alignment:  usize    
) -> *mut c_void
{
    unsafe {
        return _aligned_realloc(
            _Block,
            _Size,
            _Alignment
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__aligned_recalloc(
    _Block: *mut c_void,
    _Count:  usize,
    _Size:  usize,
    _Alignment:  usize    
) -> *mut c_void
{
    unsafe {
        return _aligned_recalloc(
            _Block,
            _Count,
            _Size,
            _Alignment
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_bsearch_s(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements:  rsize_t,
    _SizeOfElements:  rsize_t,
    _CompareFunction:  _CoreCrtSecureSearchSortCompareFunction,
    _Context: *mut c_void    
) -> *mut c_void
{
    unsafe {
        return bsearch_s(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
            _Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_qsort_s(
    _Base: *mut c_void,
    _NumOfElements:  rsize_t,
    _SizeOfElements:  rsize_t,
    _CompareFunction:  _CoreCrtSecureSearchSortCompareFunction,
    _Context: *mut c_void    
)
{
    unsafe {
        return qsort_s(
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
            _Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_bsearch(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements:  usize,
    _SizeOfElements:  usize,
    _CompareFunction:  _CoreCrtNonSecureSearchSortCompareFunction    
) -> *mut c_void
{
    unsafe {
        return bsearch(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_qsort(
    _Base: *mut c_void,
    _NumOfElements:  usize,
    _SizeOfElements:  usize,
    _CompareFunction:  _CoreCrtNonSecureSearchSortCompareFunction    
)
{
    unsafe {
        return qsort(
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lfind_s(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements:  usize,
    _CompareFunction:  _CoreCrtSecureSearchSortCompareFunction,
    _Context: *mut c_void    
) -> *mut c_void
{
    unsafe {
        return _lfind_s(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
            _Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lfind(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements:  c_uint,
    _CompareFunction:  _CoreCrtNonSecureSearchSortCompareFunction    
) -> *mut c_void
{
    unsafe {
        return _lfind(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lsearch_s(
    _Key: *const c_void,
    _Base: *mut c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements:  usize,
    _CompareFunction:  _CoreCrtSecureSearchSortCompareFunction,
    _Context: *mut c_void    
) -> *mut c_void
{
    unsafe {
        return _lsearch_s(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction,
            _Context
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lsearch(
    _Key: *const c_void,
    _Base: *mut c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements:  c_uint,
    _CompareFunction:  _CoreCrtNonSecureSearchSortCompareFunction    
) -> *mut c_void
{
    unsafe {
        return _lsearch(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lfind(
    _Key: *const c_void,
    _Base: *const c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements:  c_uint,
    _CompareFunction:  _CoreCrtNonSecureSearchSortCompareFunction    
) -> *mut c_void
{
    unsafe {
        return lfind(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lsearch(
    _Key: *const c_void,
    _Base: *mut c_void,
    _NumOfElements: *mut c_uint,
    _SizeOfElements:  c_uint,
    _CompareFunction:  _CoreCrtNonSecureSearchSortCompareFunction    
) -> *mut c_void
{
    unsafe {
        return lsearch(
            _Key,
            _Base,
            _NumOfElements,
            _SizeOfElements,
            _CompareFunction
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__itow_s(
    _Value:  c_int,
    _Buffer: *mut wchar_t,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _itow_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__itow(
    _Value:  c_int,
    _Buffer: *mut wchar_t,
    _Radix:  c_int    
) -> *mut wchar_t
{
    unsafe {
        return _itow(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ltow_s(
    _Value:  c_long,
    _Buffer: *mut wchar_t,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _ltow_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ltow(
    _Value:  c_long,
    _Buffer: *mut wchar_t,
    _Radix:  c_int    
) -> *mut wchar_t
{
    unsafe {
        return _ltow(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ultow_s(
    _Value:  c_ulong,
    _Buffer: *mut wchar_t,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _ultow_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ultow(
    _Value:  c_ulong,
    _Buffer: *mut wchar_t,
    _Radix:  c_int    
) -> *mut wchar_t
{
    unsafe {
        return _ultow(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstod(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t    
) ->  f64
{
    unsafe {
        return wcstod(
            _String,
            _EndPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstod_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Locale:  _locale_t    
) ->  f64
{
    unsafe {
        return _wcstod_l(
            _String,
            _EndPtr,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstol(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int    
) ->  c_long
{
    unsafe {
        return wcstol(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstol_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_long
{
    unsafe {
        return _wcstol_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstoll(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int    
) ->  c_longlong
{
    unsafe {
        return wcstoll(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstoll_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_longlong
{
    unsafe {
        return _wcstoll_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstoul(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int    
) ->  c_ulong
{
    unsafe {
        return wcstoul(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstoul_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_ulong
{
    unsafe {
        return _wcstoul_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstoull(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int    
) ->  c_ulonglong
{
    unsafe {
        return wcstoull(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstoull_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_ulonglong
{
    unsafe {
        return _wcstoull_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstold(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t    
) ->  f64
{
    unsafe {
        return wcstold(
            _String,
            _EndPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstold_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Locale:  _locale_t    
) ->  f64
{
    unsafe {
        return _wcstold_l(
            _String,
            _EndPtr,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstof(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t    
) ->  f32
{
    unsafe {
        return wcstof(
            _String,
            _EndPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstof_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Locale:  _locale_t    
) ->  f32
{
    unsafe {
        return _wcstof_l(
            _String,
            _EndPtr,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtof(
    _String: *const wchar_t    
) ->  f64
{
    unsafe {
        return _wtof(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtof_l(
    _String: *const wchar_t,
    _Locale:  _locale_t    
) ->  f64
{
    unsafe {
        return _wtof_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtoi(
    _String: *const wchar_t    
) ->  c_int
{
    unsafe {
        return _wtoi(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtoi_l(
    _String: *const wchar_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _wtoi_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtol(
    _String: *const wchar_t    
) ->  c_long
{
    unsafe {
        return _wtol(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtol_l(
    _String: *const wchar_t,
    _Locale:  _locale_t    
) ->  c_long
{
    unsafe {
        return _wtol_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtoll(
    _String: *const wchar_t    
) ->  c_longlong
{
    unsafe {
        return _wtoll(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtoll_l(
    _String: *const wchar_t,
    _Locale:  _locale_t    
) ->  c_longlong
{
    unsafe {
        return _wtoll_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__i64tow_s(
    _Value:  c_longlong,
    _Buffer: *mut wchar_t,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _i64tow_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__i64tow(
    _Value:  c_longlong,
    _Buffer: *mut wchar_t,
    _Radix:  c_int    
) -> *mut wchar_t
{
    unsafe {
        return _i64tow(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ui64tow_s(
    _Value:  c_ulonglong,
    _Buffer: *mut wchar_t,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _ui64tow_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ui64tow(
    _Value:  c_ulonglong,
    _Buffer: *mut wchar_t,
    _Radix:  c_int    
) -> *mut wchar_t
{
    unsafe {
        return _ui64tow(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtoi64(
    _String: *const wchar_t    
) ->  c_longlong
{
    unsafe {
        return _wtoi64(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wtoi64_l(
    _String: *const wchar_t,
    _Locale:  _locale_t    
) ->  c_longlong
{
    unsafe {
        return _wtoi64_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstoi64(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int    
) ->  c_longlong
{
    unsafe {
        return _wcstoi64(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstoi64_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_longlong
{
    unsafe {
        return _wcstoi64_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstoui64(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int    
) ->  c_ulonglong
{
    unsafe {
        return _wcstoui64(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstoui64_l(
    _String: *const wchar_t,
    _EndPtr: *mut *mut wchar_t,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_ulonglong
{
    unsafe {
        return _wcstoui64_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wfullpath(
    _Buffer: *mut wchar_t,
    _Path: *const wchar_t,
    _BufferCount:  usize    
) -> *mut wchar_t
{
    unsafe {
        return _wfullpath(
            _Buffer,
            _Path,
            _BufferCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wmakepath_s(
    _Buffer: *mut wchar_t,
    _BufferCount:  usize,
    _Drive: *const wchar_t,
    _Dir: *const wchar_t,
    _Filename: *const wchar_t,
    _Ext: *const wchar_t    
) ->  errno_t
{
    unsafe {
        return _wmakepath_s(
            _Buffer,
            _BufferCount,
            _Drive,
            _Dir,
            _Filename,
            _Ext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wmakepath(
    _Buffer: *mut wchar_t,
    _Drive: *const wchar_t,
    _Dir: *const wchar_t,
    _Filename: *const wchar_t,
    _Ext: *const wchar_t    
)
{
    unsafe {
        return _wmakepath(
            _Buffer,
            _Drive,
            _Dir,
            _Filename,
            _Ext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wperror(
    _ErrorMessage: *const wchar_t    
)
{
    unsafe {
        return _wperror(
            _ErrorMessage
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wsplitpath(
    _FullPath: *const wchar_t,
    _Drive: *mut wchar_t,
    _Dir: *mut wchar_t,
    _Filename: *mut wchar_t,
    _Ext: *mut wchar_t    
)
{
    unsafe {
        return _wsplitpath(
            _FullPath,
            _Drive,
            _Dir,
            _Filename,
            _Ext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wsplitpath_s(
    _FullPath: *const wchar_t,
    _Drive: *mut wchar_t,
    _DriveCount:  usize,
    _Dir: *mut wchar_t,
    _DirCount:  usize,
    _Filename: *mut wchar_t,
    _FilenameCount:  usize,
    _Ext: *mut wchar_t,
    _ExtCount:  usize    
) ->  errno_t
{
    unsafe {
        return _wsplitpath_s(
            _FullPath,
            _Drive,
            _DriveCount,
            _Dir,
            _DirCount,
            _Filename,
            _FilenameCount,
            _Ext,
            _ExtCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wdupenv_s(
    _Buffer: *mut *mut wchar_t,
    _BufferCount: *mut usize,
    _VarName: *const wchar_t    
) ->  errno_t
{
    unsafe {
        return _wdupenv_s(
            _Buffer,
            _BufferCount,
            _VarName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wgetenv(
    _VarName: *const wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return _wgetenv(
            _VarName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wgetenv_s(
    _RequiredCount: *mut usize,
    _Buffer: *mut wchar_t,
    _BufferCount:  usize,
    _VarName: *const wchar_t    
) ->  errno_t
{
    unsafe {
        return _wgetenv_s(
            _RequiredCount,
            _Buffer,
            _BufferCount,
            _VarName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wputenv(
    _EnvString: *const wchar_t    
) ->  c_int
{
    unsafe {
        return _wputenv(
            _EnvString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wputenv_s(
    _Name: *const wchar_t,
    _Value: *const wchar_t    
) ->  errno_t
{
    unsafe {
        return _wputenv_s(
            _Name,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wsearchenv_s(
    _Filename: *const wchar_t,
    _VarName: *const wchar_t,
    _Buffer: *mut wchar_t,
    _BufferCount:  usize    
) ->  errno_t
{
    unsafe {
        return _wsearchenv_s(
            _Filename,
            _VarName,
            _Buffer,
            _BufferCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wsearchenv(
    _Filename: *const wchar_t,
    _VarName: *const wchar_t,
    _ResultPath: *mut wchar_t    
)
{
    unsafe {
        return _wsearchenv(
            _Filename,
            _VarName,
            _ResultPath
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wsystem(
    _Command: *const wchar_t    
) ->  c_int
{
    unsafe {
        return _wsystem(
            _Command
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__swab(
    _Buf1: *mut c_char,
    _Buf2: *mut c_char,
    _SizeInBytes:  c_int    
)
{
    unsafe {
        return _swab(
            _Buf1,
            _Buf2,
            _SizeInBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__set_abort_behavior(
    _Flags:  c_uint,
    _Mask:  c_uint    
) ->  c_uint
{
    unsafe {
        return _set_abort_behavior(
            _Flags,
            _Mask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_atexit(
    arg1:  Option    
) ->  c_int
{
    unsafe {
        return atexit(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__onexit(
    _Func:  _onexit_t    
) ->  _onexit_t
{
    unsafe {
        return _onexit(
            _Func
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_at_quick_exit(
    arg1:  Option    
) ->  c_int
{
    unsafe {
        return at_quick_exit(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__set_purecall_handler(
    _Handler:  _purecall_handler    
) ->  _purecall_handler
{
    unsafe {
        return _set_purecall_handler(
            _Handler
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_purecall_handler(
    
) ->  _purecall_handler
{
    unsafe {
        return _get_purecall_handler(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__set_invalid_parameter_handler(
    _Handler:  _invalid_parameter_handler    
) ->  _invalid_parameter_handler
{
    unsafe {
        return _set_invalid_parameter_handler(
            _Handler
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_invalid_parameter_handler(
    
) ->  _invalid_parameter_handler
{
    unsafe {
        return _get_invalid_parameter_handler(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__set_thread_local_invalid_parameter_handler(
    _Handler:  _invalid_parameter_handler    
) ->  _invalid_parameter_handler
{
    unsafe {
        return _set_thread_local_invalid_parameter_handler(
            _Handler
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_thread_local_invalid_parameter_handler(
    
) ->  _invalid_parameter_handler
{
    unsafe {
        return _get_thread_local_invalid_parameter_handler(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__set_error_mode(
    _Mode:  c_int    
) ->  c_int
{
    unsafe {
        return _set_error_mode(
            _Mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___sys_errlist(
    
) -> *mut *mut c_char
{
    unsafe {
        return __sys_errlist(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___sys_nerr(
    
) -> *mut c_int
{
    unsafe {
        return __sys_nerr(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_perror(
    _ErrMsg: *const c_char    
)
{
    unsafe {
        return perror(
            _ErrMsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___p__pgmptr(
    
) -> *mut *mut c_char
{
    unsafe {
        return __p__pgmptr(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___p__wpgmptr(
    
) -> *mut *mut wchar_t
{
    unsafe {
        return __p__wpgmptr(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___p__fmode(
    
) -> *mut c_int
{
    unsafe {
        return __p__fmode(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_pgmptr(
    _Value: *mut *mut c_char    
) ->  errno_t
{
    unsafe {
        return _get_pgmptr(
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_wpgmptr(
    _Value: *mut *mut wchar_t    
) ->  errno_t
{
    unsafe {
        return _get_wpgmptr(
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__set_fmode(
    _Mode:  c_int    
) ->  errno_t
{
    unsafe {
        return _set_fmode(
            _Mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_fmode(
    _PMode: *mut c_int    
) ->  errno_t
{
    unsafe {
        return _get_fmode(
            _PMode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_abs(
    _Number:  c_int    
) ->  c_int
{
    unsafe {
        return abs(
            _Number
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_labs(
    _Number:  c_long    
) ->  c_long
{
    unsafe {
        return labs(
            _Number
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_llabs(
    _Number:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return llabs(
            _Number
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__abs64(
    _Number:  c_longlong    
) ->  c_longlong
{
    unsafe {
        return _abs64(
            _Number
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__byteswap_ushort(
    _Number:  c_ushort    
) ->  c_ushort
{
    unsafe {
        return _byteswap_ushort(
            _Number
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__byteswap_ulong(
    _Number:  c_ulong    
) ->  c_ulong
{
    unsafe {
        return _byteswap_ulong(
            _Number
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__byteswap_uint64(
    _Number:  c_ulonglong    
) ->  c_ulonglong
{
    unsafe {
        return _byteswap_uint64(
            _Number
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_div(
    _Numerator:  c_int,
    _Denominator:  c_int    
) ->  div_t
{
    unsafe {
        return div(
            _Numerator,
            _Denominator
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ldiv(
    _Numerator:  c_long,
    _Denominator:  c_long    
) ->  ldiv_t
{
    unsafe {
        return ldiv(
            _Numerator,
            _Denominator
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_lldiv(
    _Numerator:  c_longlong,
    _Denominator:  c_longlong    
) ->  lldiv_t
{
    unsafe {
        return lldiv(
            _Numerator,
            _Denominator
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lrotl(
    _Value:  c_ulong,
    _Shift:  c_int    
) ->  c_ulong
{
    unsafe {
        return _lrotl(
            _Value,
            _Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__lrotr(
    _Value:  c_ulong,
    _Shift:  c_int    
) ->  c_ulong
{
    unsafe {
        return _lrotr(
            _Value,
            _Shift
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_srand(
    _Seed:  c_uint    
)
{
    unsafe {
        return srand(
            _Seed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_rand(
    
) ->  c_int
{
    unsafe {
        return rand(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_atof(
    _String: *const c_char    
) ->  f64
{
    unsafe {
        return atof(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_atoi(
    _String: *const c_char    
) ->  c_int
{
    unsafe {
        return atoi(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_atol(
    _String: *const c_char    
) ->  c_long
{
    unsafe {
        return atol(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_atoll(
    _String: *const c_char    
) ->  c_longlong
{
    unsafe {
        return atoll(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atoi64(
    _String: *const c_char    
) ->  c_longlong
{
    unsafe {
        return _atoi64(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atof_l(
    _String: *const c_char,
    _Locale:  _locale_t    
) ->  f64
{
    unsafe {
        return _atof_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atoi_l(
    _String: *const c_char,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _atoi_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atol_l(
    _String: *const c_char,
    _Locale:  _locale_t    
) ->  c_long
{
    unsafe {
        return _atol_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atoll_l(
    _String: *const c_char,
    _Locale:  _locale_t    
) ->  c_longlong
{
    unsafe {
        return _atoll_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atoi64_l(
    _String: *const c_char,
    _Locale:  _locale_t    
) ->  c_longlong
{
    unsafe {
        return _atoi64_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atoflt(
    _Result: *mut _CRT_FLOAT,
    _String: *const c_char    
) ->  c_int
{
    unsafe {
        return _atoflt(
            _Result,
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atodbl(
    _Result: *mut _CRT_DOUBLE,
    _String: *mut c_char    
) ->  c_int
{
    unsafe {
        return _atodbl(
            _Result,
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atoldbl(
    _Result: *mut _LDOUBLE,
    _String: *mut c_char    
) ->  c_int
{
    unsafe {
        return _atoldbl(
            _Result,
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atoflt_l(
    _Result: *mut _CRT_FLOAT,
    _String: *const c_char,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _atoflt_l(
            _Result,
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atodbl_l(
    _Result: *mut _CRT_DOUBLE,
    _String: *mut c_char,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _atodbl_l(
            _Result,
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__atoldbl_l(
    _Result: *mut _LDOUBLE,
    _String: *mut c_char,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _atoldbl_l(
            _Result,
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtof(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char    
) ->  f32
{
    unsafe {
        return strtof(
            _String,
            _EndPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtof_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Locale:  _locale_t    
) ->  f32
{
    unsafe {
        return _strtof_l(
            _String,
            _EndPtr,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtod(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char    
) ->  f64
{
    unsafe {
        return strtod(
            _String,
            _EndPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtod_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Locale:  _locale_t    
) ->  f64
{
    unsafe {
        return _strtod_l(
            _String,
            _EndPtr,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtold(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char    
) ->  f64
{
    unsafe {
        return strtold(
            _String,
            _EndPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtold_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Locale:  _locale_t    
) ->  f64
{
    unsafe {
        return _strtold_l(
            _String,
            _EndPtr,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtol(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int    
) ->  c_long
{
    unsafe {
        return strtol(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtol_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_long
{
    unsafe {
        return _strtol_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtoll(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int    
) ->  c_longlong
{
    unsafe {
        return strtoll(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtoll_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_longlong
{
    unsafe {
        return _strtoll_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtoul(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int    
) ->  c_ulong
{
    unsafe {
        return strtoul(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtoul_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_ulong
{
    unsafe {
        return _strtoul_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strtoull(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int    
) ->  c_ulonglong
{
    unsafe {
        return strtoull(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtoull_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_ulonglong
{
    unsafe {
        return _strtoull_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtoi64(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int    
) ->  c_longlong
{
    unsafe {
        return _strtoi64(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtoi64_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_longlong
{
    unsafe {
        return _strtoi64_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtoui64(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int    
) ->  c_ulonglong
{
    unsafe {
        return _strtoui64(
            _String,
            _EndPtr,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtoui64_l(
    _String: *const c_char,
    _EndPtr: *mut *mut c_char,
    _Radix:  c_int,
    _Locale:  _locale_t    
) ->  c_ulonglong
{
    unsafe {
        return _strtoui64_l(
            _String,
            _EndPtr,
            _Radix,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__itoa_s(
    _Value:  c_int,
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _itoa_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__itoa(
    _Value:  c_int,
    _Buffer: *mut c_char,
    _Radix:  c_int    
) -> *mut c_char
{
    unsafe {
        return _itoa(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ltoa_s(
    _Value:  c_long,
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _ltoa_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ltoa(
    _Value:  c_long,
    _Buffer: *mut c_char,
    _Radix:  c_int    
) -> *mut c_char
{
    unsafe {
        return _ltoa(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ultoa_s(
    _Value:  c_ulong,
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _ultoa_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ultoa(
    _Value:  c_ulong,
    _Buffer: *mut c_char,
    _Radix:  c_int    
) -> *mut c_char
{
    unsafe {
        return _ultoa(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__i64toa_s(
    _Value:  c_longlong,
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _i64toa_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__i64toa(
    _Value:  c_longlong,
    _Buffer: *mut c_char,
    _Radix:  c_int    
) -> *mut c_char
{
    unsafe {
        return _i64toa(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ui64toa_s(
    _Value:  c_ulonglong,
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Radix:  c_int    
) ->  errno_t
{
    unsafe {
        return _ui64toa_s(
            _Value,
            _Buffer,
            _BufferCount,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ui64toa(
    _Value:  c_ulonglong,
    _Buffer: *mut c_char,
    _Radix:  c_int    
) -> *mut c_char
{
    unsafe {
        return _ui64toa(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ecvt_s(
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Value:  f64,
    _DigitCount:  c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int    
) ->  errno_t
{
    unsafe {
        return _ecvt_s(
            _Buffer,
            _BufferCount,
            _Value,
            _DigitCount,
            _PtDec,
            _PtSign
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ecvt(
    _Value:  f64,
    _DigitCount:  c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int    
) -> *mut c_char
{
    unsafe {
        return _ecvt(
            _Value,
            _DigitCount,
            _PtDec,
            _PtSign
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__fcvt_s(
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Value:  f64,
    _FractionalDigitCount:  c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int    
) ->  errno_t
{
    unsafe {
        return _fcvt_s(
            _Buffer,
            _BufferCount,
            _Value,
            _FractionalDigitCount,
            _PtDec,
            _PtSign
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__fcvt(
    _Value:  f64,
    _FractionalDigitCount:  c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int    
) -> *mut c_char
{
    unsafe {
        return _fcvt(
            _Value,
            _FractionalDigitCount,
            _PtDec,
            _PtSign
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__gcvt_s(
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Value:  f64,
    _DigitCount:  c_int    
) ->  errno_t
{
    unsafe {
        return _gcvt_s(
            _Buffer,
            _BufferCount,
            _Value,
            _DigitCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__gcvt(
    _Value:  f64,
    _DigitCount:  c_int,
    _Buffer: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return _gcvt(
            _Value,
            _DigitCount,
            _Buffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mblen(
    _Ch: *const c_char,
    _MaxCount:  usize    
) ->  c_int
{
    unsafe {
        return mblen(
            _Ch,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mblen_l(
    _Ch: *const c_char,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _mblen_l(
            _Ch,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mbstrlen(
    _String: *const c_char    
) ->  usize
{
    unsafe {
        return _mbstrlen(
            _String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mbstrlen_l(
    _String: *const c_char,
    _Locale:  _locale_t    
) ->  usize
{
    unsafe {
        return _mbstrlen_l(
            _String,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mbstrnlen(
    _String: *const c_char,
    _MaxCount:  usize    
) ->  usize
{
    unsafe {
        return _mbstrnlen(
            _String,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mbstrnlen_l(
    _String: *const c_char,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  usize
{
    unsafe {
        return _mbstrnlen_l(
            _String,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mbtowc(
    _DstCh: *mut wchar_t,
    _SrcCh: *const c_char,
    _SrcSizeInBytes:  usize    
) ->  c_int
{
    unsafe {
        return mbtowc(
            _DstCh,
            _SrcCh,
            _SrcSizeInBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mbtowc_l(
    _DstCh: *mut wchar_t,
    _SrcCh: *const c_char,
    _SrcSizeInBytes:  usize,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _mbtowc_l(
            _DstCh,
            _SrcCh,
            _SrcSizeInBytes,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mbstowcs_s(
    _PtNumOfCharConverted: *mut usize,
    _DstBuf: *mut wchar_t,
    _SizeInWords:  usize,
    _SrcBuf: *const c_char,
    _MaxCount:  usize    
) ->  errno_t
{
    unsafe {
        return mbstowcs_s(
            _PtNumOfCharConverted,
            _DstBuf,
            _SizeInWords,
            _SrcBuf,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_mbstowcs(
    _Dest: *mut wchar_t,
    _Source: *const c_char,
    _MaxCount:  usize    
) ->  usize
{
    unsafe {
        return mbstowcs(
            _Dest,
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mbstowcs_s_l(
    _PtNumOfCharConverted: *mut usize,
    _DstBuf: *mut wchar_t,
    _SizeInWords:  usize,
    _SrcBuf: *const c_char,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  errno_t
{
    unsafe {
        return _mbstowcs_s_l(
            _PtNumOfCharConverted,
            _DstBuf,
            _SizeInWords,
            _SrcBuf,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mbstowcs_l(
    _Dest: *mut wchar_t,
    _Source: *const c_char,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  usize
{
    unsafe {
        return _mbstowcs_l(
            _Dest,
            _Source,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wctomb(
    _MbCh: *mut c_char,
    _WCh:  wchar_t    
) ->  c_int
{
    unsafe {
        return wctomb(
            _MbCh,
            _WCh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wctomb_l(
    _MbCh: *mut c_char,
    _WCh:  wchar_t,
    _Locale:  _locale_t    
) ->  c_int
{
    unsafe {
        return _wctomb_l(
            _MbCh,
            _WCh,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wctomb_s(
    _SizeConverted: *mut c_int,
    _MbCh: *mut c_char,
    _SizeInBytes:  rsize_t,
    _WCh:  wchar_t    
) ->  errno_t
{
    unsafe {
        return wctomb_s(
            _SizeConverted,
            _MbCh,
            _SizeInBytes,
            _WCh
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wctomb_s_l(
    _SizeConverted: *mut c_int,
    _MbCh: *mut c_char,
    _SizeInBytes:  usize,
    _WCh:  wchar_t,
    _Locale:  _locale_t    
) ->  errno_t
{
    unsafe {
        return _wctomb_s_l(
            _SizeConverted,
            _MbCh,
            _SizeInBytes,
            _WCh,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstombs_s(
    _PtNumOfCharConverted: *mut usize,
    _Dst: *mut c_char,
    _DstSizeInBytes:  usize,
    _Src: *const wchar_t,
    _MaxCountInBytes:  usize    
) ->  errno_t
{
    unsafe {
        return wcstombs_s(
            _PtNumOfCharConverted,
            _Dst,
            _DstSizeInBytes,
            _Src,
            _MaxCountInBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcstombs(
    _Dest: *mut c_char,
    _Source: *const wchar_t,
    _MaxCount:  usize    
) ->  usize
{
    unsafe {
        return wcstombs(
            _Dest,
            _Source,
            _MaxCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstombs_s_l(
    _PtNumOfCharConverted: *mut usize,
    _Dst: *mut c_char,
    _DstSizeInBytes:  usize,
    _Src: *const wchar_t,
    _MaxCountInBytes:  usize,
    _Locale:  _locale_t    
) ->  errno_t
{
    unsafe {
        return _wcstombs_s_l(
            _PtNumOfCharConverted,
            _Dst,
            _DstSizeInBytes,
            _Src,
            _MaxCountInBytes,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcstombs_l(
    _Dest: *mut c_char,
    _Source: *const wchar_t,
    _MaxCount:  usize,
    _Locale:  _locale_t    
) ->  usize
{
    unsafe {
        return _wcstombs_l(
            _Dest,
            _Source,
            _MaxCount,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__fullpath(
    _Buffer: *mut c_char,
    _Path: *const c_char,
    _BufferCount:  usize    
) -> *mut c_char
{
    unsafe {
        return _fullpath(
            _Buffer,
            _Path,
            _BufferCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__makepath_s(
    _Buffer: *mut c_char,
    _BufferCount:  usize,
    _Drive: *const c_char,
    _Dir: *const c_char,
    _Filename: *const c_char,
    _Ext: *const c_char    
) ->  errno_t
{
    unsafe {
        return _makepath_s(
            _Buffer,
            _BufferCount,
            _Drive,
            _Dir,
            _Filename,
            _Ext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__makepath(
    _Buffer: *mut c_char,
    _Drive: *const c_char,
    _Dir: *const c_char,
    _Filename: *const c_char,
    _Ext: *const c_char    
)
{
    unsafe {
        return _makepath(
            _Buffer,
            _Drive,
            _Dir,
            _Filename,
            _Ext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__splitpath(
    _FullPath: *const c_char,
    _Drive: *mut c_char,
    _Dir: *mut c_char,
    _Filename: *mut c_char,
    _Ext: *mut c_char    
)
{
    unsafe {
        return _splitpath(
            _FullPath,
            _Drive,
            _Dir,
            _Filename,
            _Ext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__splitpath_s(
    _FullPath: *const c_char,
    _Drive: *mut c_char,
    _DriveCount:  usize,
    _Dir: *mut c_char,
    _DirCount:  usize,
    _Filename: *mut c_char,
    _FilenameCount:  usize,
    _Ext: *mut c_char,
    _ExtCount:  usize    
) ->  errno_t
{
    unsafe {
        return _splitpath_s(
            _FullPath,
            _Drive,
            _DriveCount,
            _Dir,
            _DirCount,
            _Filename,
            _FilenameCount,
            _Ext,
            _ExtCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getenv_s(
    _RequiredCount: *mut usize,
    _Buffer: *mut c_char,
    _BufferCount:  rsize_t,
    _VarName: *const c_char    
) ->  errno_t
{
    unsafe {
        return getenv_s(
            _RequiredCount,
            _Buffer,
            _BufferCount,
            _VarName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___p___argc(
    
) -> *mut c_int
{
    unsafe {
        return __p___argc(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getenv(
    _VarName: *const c_char    
) -> *mut c_char
{
    unsafe {
        return getenv(
            _VarName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__dupenv_s(
    _Buffer: *mut *mut c_char,
    _BufferCount: *mut usize,
    _VarName: *const c_char    
) ->  errno_t
{
    unsafe {
        return _dupenv_s(
            _Buffer,
            _BufferCount,
            _VarName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_system(
    _Command: *const c_char    
) ->  c_int
{
    unsafe {
        return system(
            _Command
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__putenv(
    _EnvString: *const c_char    
) ->  c_int
{
    unsafe {
        return _putenv(
            _EnvString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__putenv_s(
    _Name: *const c_char,
    _Value: *const c_char    
) ->  errno_t
{
    unsafe {
        return _putenv_s(
            _Name,
            _Value
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__searchenv_s(
    _Filename: *const c_char,
    _VarName: *const c_char,
    _Buffer: *mut c_char,
    _BufferCount:  usize    
) ->  errno_t
{
    unsafe {
        return _searchenv_s(
            _Filename,
            _VarName,
            _Buffer,
            _BufferCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__searchenv(
    _Filename: *const c_char,
    _VarName: *const c_char,
    _Buffer: *mut c_char    
)
{
    unsafe {
        return _searchenv(
            _Filename,
            _VarName,
            _Buffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__seterrormode(
    _Mode:  c_int    
)
{
    unsafe {
        return _seterrormode(
            _Mode
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__beep(
    _Frequency:  c_uint,
    _Duration:  c_uint    
)
{
    unsafe {
        return _beep(
            _Frequency,
            _Duration
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__sleep(
    _Duration:  c_ulong    
)
{
    unsafe {
        return _sleep(
            _Duration
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ecvt(
    _Value:  f64,
    _DigitCount:  c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int    
) -> *mut c_char
{
    unsafe {
        return ecvt(
            _Value,
            _DigitCount,
            _PtDec,
            _PtSign
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_fcvt(
    _Value:  f64,
    _FractionalDigitCount:  c_int,
    _PtDec: *mut c_int,
    _PtSign: *mut c_int    
) -> *mut c_char
{
    unsafe {
        return fcvt(
            _Value,
            _FractionalDigitCount,
            _PtDec,
            _PtSign
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_gcvt(
    _Value:  f64,
    _DigitCount:  c_int,
    _DstBuf: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return gcvt(
            _Value,
            _DigitCount,
            _DstBuf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_itoa(
    _Value:  c_int,
    _Buffer: *mut c_char,
    _Radix:  c_int    
) -> *mut c_char
{
    unsafe {
        return itoa(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ltoa(
    _Value:  c_long,
    _Buffer: *mut c_char,
    _Radix:  c_int    
) -> *mut c_char
{
    unsafe {
        return ltoa(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_swab(
    _Buf1: *mut c_char,
    _Buf2: *mut c_char,
    _SizeInBytes:  c_int    
)
{
    unsafe {
        return swab(
            _Buf1,
            _Buf2,
            _SizeInBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ultoa(
    _Value:  c_ulong,
    _Buffer: *mut c_char,
    _Radix:  c_int    
) -> *mut c_char
{
    unsafe {
        return ultoa(
            _Value,
            _Buffer,
            _Radix
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_putenv(
    _EnvString: *const c_char    
) ->  c_int
{
    unsafe {
        return putenv(
            _EnvString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_onexit(
    _Func:  _onexit_t    
) ->  _onexit_t
{
    unsafe {
        return onexit(
            _Func
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IUnknown_QueryInterface_Proxy(
    This: *mut IUnknown,
    riid: *const IID,
    ppvObject: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return IUnknown_QueryInterface_Proxy(
            This,
            riid,
            ppvObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IUnknown_QueryInterface_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IUnknown_QueryInterface_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IUnknown_AddRef_Proxy(
    This: *mut IUnknown    
) ->  ULONG
{
    unsafe {
        return IUnknown_AddRef_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IUnknown_AddRef_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IUnknown_AddRef_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IUnknown_Release_Proxy(
    This: *mut IUnknown    
) ->  ULONG
{
    unsafe {
        return IUnknown_Release_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IUnknown_Release_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IUnknown_Release_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IClassFactory_RemoteCreateInstance_Proxy(
    This: *mut IClassFactory,
    riid: *const IID,
    ppvObject: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IClassFactory_RemoteCreateInstance_Proxy(
            This,
            riid,
            ppvObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IClassFactory_RemoteCreateInstance_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IClassFactory_RemoteCreateInstance_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IClassFactory_RemoteLockServer_Proxy(
    This: *mut IClassFactory,
    fLock:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IClassFactory_RemoteLockServer_Proxy(
            This,
            fLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IClassFactory_RemoteLockServer_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IClassFactory_RemoteLockServer_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IClassFactory_CreateInstance_Proxy(
    This: *mut IClassFactory,
    pUnkOuter: *mut IUnknown,
    riid: *const IID,
    ppvObject: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return IClassFactory_CreateInstance_Proxy(
            This,
            pUnkOuter,
            riid,
            ppvObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IClassFactory_CreateInstance_Stub(
    This: *mut IClassFactory,
    riid: *const IID,
    ppvObject: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IClassFactory_CreateInstance_Stub(
            This,
            riid,
            ppvObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IClassFactory_LockServer_Proxy(
    This: *mut IClassFactory,
    fLock:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IClassFactory_LockServer_Proxy(
            This,
            fLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IClassFactory_LockServer_Stub(
    This: *mut IClassFactory,
    fLock:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IClassFactory_LockServer_Stub(
            This,
            fLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumUnknown_RemoteNext_Proxy(
    This: *mut IEnumUnknown,
    celt:  ULONG,
    rgelt: *mut *mut IUnknown,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumUnknown_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumUnknown_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumUnknown_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumString_RemoteNext_Proxy(
    This: *mut IEnumString,
    celt:  ULONG,
    rgelt: *mut LPOLESTR,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumString_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumString_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumString_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ISequentialStream_RemoteRead_Proxy(
    This: *mut ISequentialStream,
    pv: *mut byte,
    cb:  ULONG,
    pcbRead: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ISequentialStream_RemoteRead_Proxy(
            This,
            pv,
            cb,
            pcbRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ISequentialStream_RemoteRead_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ISequentialStream_RemoteRead_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ISequentialStream_RemoteWrite_Proxy(
    This: *mut ISequentialStream,
    pv: *const byte,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ISequentialStream_RemoteWrite_Proxy(
            This,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ISequentialStream_RemoteWrite_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ISequentialStream_RemoteWrite_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStream_RemoteSeek_Proxy(
    This: *mut IStream,
    dlibMove:  LARGE_INTEGER,
    dwOrigin:  DWORD,
    plibNewPosition: *mut ULARGE_INTEGER    
) ->  HRESULT
{
    unsafe {
        return IStream_RemoteSeek_Proxy(
            This,
            dlibMove,
            dwOrigin,
            plibNewPosition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStream_RemoteSeek_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IStream_RemoteSeek_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStream_RemoteCopyTo_Proxy(
    This: *mut IStream,
    pstm: *mut IStream,
    cb:  ULARGE_INTEGER,
    pcbRead: *mut ULARGE_INTEGER,
    pcbWritten: *mut ULARGE_INTEGER    
) ->  HRESULT
{
    unsafe {
        return IStream_RemoteCopyTo_Proxy(
            This,
            pstm,
            cb,
            pcbRead,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStream_RemoteCopyTo_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IStream_RemoteCopyTo_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumUnknown_Next_Proxy(
    This: *mut IEnumUnknown,
    celt:  ULONG,
    rgelt: *mut *mut IUnknown,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumUnknown_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumUnknown_Next_Stub(
    This: *mut IEnumUnknown,
    celt:  ULONG,
    rgelt: *mut *mut IUnknown,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumUnknown_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumString_Next_Proxy(
    This: *mut IEnumString,
    celt:  ULONG,
    rgelt: *mut LPOLESTR,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumString_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumString_Next_Stub(
    This: *mut IEnumString,
    celt:  ULONG,
    rgelt: *mut LPOLESTR,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumString_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ISequentialStream_Read_Proxy(
    This: *mut ISequentialStream,
    pv: *mut c_void,
    cb:  ULONG,
    pcbRead: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ISequentialStream_Read_Proxy(
            This,
            pv,
            cb,
            pcbRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ISequentialStream_Read_Stub(
    This: *mut ISequentialStream,
    pv: *mut byte,
    cb:  ULONG,
    pcbRead: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ISequentialStream_Read_Stub(
            This,
            pv,
            cb,
            pcbRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ISequentialStream_Write_Proxy(
    This: *mut ISequentialStream,
    pv: *const c_void,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ISequentialStream_Write_Proxy(
            This,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ISequentialStream_Write_Stub(
    This: *mut ISequentialStream,
    pv: *const byte,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ISequentialStream_Write_Stub(
            This,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStream_Seek_Proxy(
    This: *mut IStream,
    dlibMove:  LARGE_INTEGER,
    dwOrigin:  DWORD,
    plibNewPosition: *mut ULARGE_INTEGER    
) ->  HRESULT
{
    unsafe {
        return IStream_Seek_Proxy(
            This,
            dlibMove,
            dwOrigin,
            plibNewPosition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStream_Seek_Stub(
    This: *mut IStream,
    dlibMove:  LARGE_INTEGER,
    dwOrigin:  DWORD,
    plibNewPosition: *mut ULARGE_INTEGER    
) ->  HRESULT
{
    unsafe {
        return IStream_Seek_Stub(
            This,
            dlibMove,
            dwOrigin,
            plibNewPosition
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStream_CopyTo_Proxy(
    This: *mut IStream,
    pstm: *mut IStream,
    cb:  ULARGE_INTEGER,
    pcbRead: *mut ULARGE_INTEGER,
    pcbWritten: *mut ULARGE_INTEGER    
) ->  HRESULT
{
    unsafe {
        return IStream_CopyTo_Proxy(
            This,
            pstm,
            cb,
            pcbRead,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStream_CopyTo_Stub(
    This: *mut IStream,
    pstm: *mut IStream,
    cb:  ULARGE_INTEGER,
    pcbRead: *mut ULARGE_INTEGER,
    pcbWritten: *mut ULARGE_INTEGER    
) ->  HRESULT
{
    unsafe {
        return IStream_CopyTo_Stub(
            This,
            pstm,
            cb,
            pcbRead,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetMalloc(
    dwMemContext:  DWORD,
    ppMalloc: *mut LPMALLOC    
) ->  HRESULT
{
    unsafe {
        return CoGetMalloc(
            dwMemContext,
            ppMalloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateStreamOnHGlobal(
    hGlobal:  HGLOBAL,
    fDeleteOnRelease:  BOOL,
    ppstm: *mut LPSTREAM    
) ->  HRESULT
{
    unsafe {
        return CreateStreamOnHGlobal(
            hGlobal,
            fDeleteOnRelease,
            ppstm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetHGlobalFromStream(
    pstm:  LPSTREAM,
    phglobal: *mut HGLOBAL    
) ->  HRESULT
{
    unsafe {
        return GetHGlobalFromStream(
            pstm,
            phglobal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoUninitialize(
    
)
{
    unsafe {
        return CoUninitialize(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetCurrentProcess(
    
) ->  DWORD
{
    unsafe {
        return CoGetCurrentProcess(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInitializeEx(
    pvReserved:  LPVOID,
    dwCoInit:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInitializeEx(
            pvReserved,
            dwCoInit
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetCallerTID(
    lpdwTID:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return CoGetCallerTID(
            lpdwTID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetCurrentLogicalThreadId(
    pguid: *mut GUID    
) ->  HRESULT
{
    unsafe {
        return CoGetCurrentLogicalThreadId(
            pguid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetContextToken(
    pToken: *mut ULONG_PTR    
) ->  HRESULT
{
    unsafe {
        return CoGetContextToken(
            pToken
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetDefaultContext(
    aptType:  APTTYPE,
    riid: *const IID,
    ppv: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return CoGetDefaultContext(
            aptType,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetApartmentType(
    pAptType: *mut APTTYPE,
    pAptQualifier: *mut APTTYPEQUALIFIER    
) ->  HRESULT
{
    unsafe {
        return CoGetApartmentType(
            pAptType,
            pAptQualifier
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoDecodeProxy(
    dwClientPid:  DWORD,
    ui64ProxyAddress:  UINT64,
    pServerInformation:  PServerInformation    
) ->  HRESULT
{
    unsafe {
        return CoDecodeProxy(
            dwClientPid,
            ui64ProxyAddress,
            pServerInformation
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoIncrementMTAUsage(
    pCookie: *mut CO_MTA_USAGE_COOKIE    
) ->  HRESULT
{
    unsafe {
        return CoIncrementMTAUsage(
            pCookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoDecrementMTAUsage(
    Cookie:  CO_MTA_USAGE_COOKIE    
) ->  HRESULT
{
    unsafe {
        return CoDecrementMTAUsage(
            Cookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoAllowUnmarshalerCLSID(
    clsid: *const IID    
) ->  HRESULT
{
    unsafe {
        return CoAllowUnmarshalerCLSID(
            clsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetObjectContext(
    riid: *const IID,
    ppv: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoGetObjectContext(
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetClassObject(
    rclsid: *const IID,
    dwClsContext:  DWORD,
    pvReserved:  LPVOID,
    riid: *const IID,
    ppv: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoGetClassObject(
            rclsid,
            dwClsContext,
            pvReserved,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterClassObject(
    rclsid: *const IID,
    pUnk:  LPUNKNOWN,
    dwClsContext:  DWORD,
    flags:  DWORD,
    lpdwRegister:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return CoRegisterClassObject(
            rclsid,
            pUnk,
            dwClsContext,
            flags,
            lpdwRegister
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRevokeClassObject(
    dwRegister:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoRevokeClassObject(
            dwRegister
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoResumeClassObjects(
    
) ->  HRESULT
{
    unsafe {
        return CoResumeClassObjects(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoSuspendClassObjects(
    
) ->  HRESULT
{
    unsafe {
        return CoSuspendClassObjects(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoAddRefServerProcess(
    
) ->  ULONG
{
    unsafe {
        return CoAddRefServerProcess(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoReleaseServerProcess(
    
) ->  ULONG
{
    unsafe {
        return CoReleaseServerProcess(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetPSClsid(
    riid: *const IID,
    pClsid: *mut CLSID    
) ->  HRESULT
{
    unsafe {
        return CoGetPSClsid(
            riid,
            pClsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterPSClsid(
    riid: *const IID,
    rclsid: *const IID    
) ->  HRESULT
{
    unsafe {
        return CoRegisterPSClsid(
            riid,
            rclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterSurrogate(
    pSurrogate:  LPSURROGATE    
) ->  HRESULT
{
    unsafe {
        return CoRegisterSurrogate(
            pSurrogate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetMarshalSizeMax(
    pulSize: *mut ULONG,
    riid: *const IID,
    pUnk:  LPUNKNOWN,
    dwDestContext:  DWORD,
    pvDestContext:  LPVOID,
    mshlflags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoGetMarshalSizeMax(
            pulSize,
            riid,
            pUnk,
            dwDestContext,
            pvDestContext,
            mshlflags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoMarshalInterface(
    pStm:  LPSTREAM,
    riid: *const IID,
    pUnk:  LPUNKNOWN,
    dwDestContext:  DWORD,
    pvDestContext:  LPVOID,
    mshlflags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoMarshalInterface(
            pStm,
            riid,
            pUnk,
            dwDestContext,
            pvDestContext,
            mshlflags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoUnmarshalInterface(
    pStm:  LPSTREAM,
    riid: *const IID,
    ppv: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoUnmarshalInterface(
            pStm,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoMarshalHresult(
    pstm:  LPSTREAM,
    hresult:  HRESULT    
) ->  HRESULT
{
    unsafe {
        return CoMarshalHresult(
            pstm,
            hresult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoUnmarshalHresult(
    pstm:  LPSTREAM,
    phresult: *mut HRESULT    
) ->  HRESULT
{
    unsafe {
        return CoUnmarshalHresult(
            pstm,
            phresult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoReleaseMarshalData(
    pStm:  LPSTREAM    
) ->  HRESULT
{
    unsafe {
        return CoReleaseMarshalData(
            pStm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoDisconnectObject(
    pUnk:  LPUNKNOWN,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoDisconnectObject(
            pUnk,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoLockObjectExternal(
    pUnk:  LPUNKNOWN,
    fLock:  BOOL,
    fLastUnlockReleases:  BOOL    
) ->  HRESULT
{
    unsafe {
        return CoLockObjectExternal(
            pUnk,
            fLock,
            fLastUnlockReleases
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetStandardMarshal(
    riid: *const IID,
    pUnk:  LPUNKNOWN,
    dwDestContext:  DWORD,
    pvDestContext:  LPVOID,
    mshlflags:  DWORD,
    ppMarshal: *mut LPMARSHAL    
) ->  HRESULT
{
    unsafe {
        return CoGetStandardMarshal(
            riid,
            pUnk,
            dwDestContext,
            pvDestContext,
            mshlflags,
            ppMarshal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetStdMarshalEx(
    pUnkOuter:  LPUNKNOWN,
    smexflags:  DWORD,
    ppUnkInner: *mut LPUNKNOWN    
) ->  HRESULT
{
    unsafe {
        return CoGetStdMarshalEx(
            pUnkOuter,
            smexflags,
            ppUnkInner
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoIsHandlerConnected(
    pUnk:  LPUNKNOWN    
) ->  BOOL
{
    unsafe {
        return CoIsHandlerConnected(
            pUnk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoMarshalInterThreadInterfaceInStream(
    riid: *const IID,
    pUnk:  LPUNKNOWN,
    ppStm: *mut LPSTREAM    
) ->  HRESULT
{
    unsafe {
        return CoMarshalInterThreadInterfaceInStream(
            riid,
            pUnk,
            ppStm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetInterfaceAndReleaseStream(
    pStm:  LPSTREAM,
    iid: *const IID,
    ppv: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoGetInterfaceAndReleaseStream(
            pStm,
            iid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoCreateFreeThreadedMarshaler(
    punkOuter:  LPUNKNOWN,
    ppunkMarshal: *mut LPUNKNOWN    
) ->  HRESULT
{
    unsafe {
        return CoCreateFreeThreadedMarshaler(
            punkOuter,
            ppunkMarshal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoFreeUnusedLibraries(
    
)
{
    unsafe {
        return CoFreeUnusedLibraries(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoFreeUnusedLibrariesEx(
    dwUnloadDelay:  DWORD,
    dwReserved:  DWORD    
)
{
    unsafe {
        return CoFreeUnusedLibrariesEx(
            dwUnloadDelay,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoDisconnectContext(
    dwTimeout:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoDisconnectContext(
            dwTimeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInitializeSecurity(
    pSecDesc:  PSECURITY_DESCRIPTOR,
    cAuthSvc:  LONG,
    asAuthSvc: *mut SOLE_AUTHENTICATION_SERVICE,
    pReserved1: *mut c_void,
    dwAuthnLevel:  DWORD,
    dwImpLevel:  DWORD,
    pAuthList: *mut c_void,
    dwCapabilities:  DWORD,
    pReserved3: *mut c_void    
) ->  HRESULT
{
    unsafe {
        return CoInitializeSecurity(
            pSecDesc,
            cAuthSvc,
            asAuthSvc,
            pReserved1,
            dwAuthnLevel,
            dwImpLevel,
            pAuthList,
            dwCapabilities,
            pReserved3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetCallContext(
    riid: *const IID,
    ppInterface: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return CoGetCallContext(
            riid,
            ppInterface
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoQueryProxyBlanket(
    pProxy: *mut IUnknown,
    pwAuthnSvc: *mut DWORD,
    pAuthzSvc: *mut DWORD,
    pServerPrincName: *mut LPOLESTR,
    pAuthnLevel: *mut DWORD,
    pImpLevel: *mut DWORD,
    pAuthInfo: *mut RPC_AUTH_IDENTITY_HANDLE,
    pCapabilites: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return CoQueryProxyBlanket(
            pProxy,
            pwAuthnSvc,
            pAuthzSvc,
            pServerPrincName,
            pAuthnLevel,
            pImpLevel,
            pAuthInfo,
            pCapabilites
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoSetProxyBlanket(
    pProxy: *mut IUnknown,
    dwAuthnSvc:  DWORD,
    dwAuthzSvc:  DWORD,
    pServerPrincName: *mut OLECHAR,
    dwAuthnLevel:  DWORD,
    dwImpLevel:  DWORD,
    pAuthInfo:  RPC_AUTH_IDENTITY_HANDLE,
    dwCapabilities:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoSetProxyBlanket(
            pProxy,
            dwAuthnSvc,
            dwAuthzSvc,
            pServerPrincName,
            dwAuthnLevel,
            dwImpLevel,
            pAuthInfo,
            dwCapabilities
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoCopyProxy(
    pProxy: *mut IUnknown,
    ppCopy: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return CoCopyProxy(
            pProxy,
            ppCopy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoQueryClientBlanket(
    pAuthnSvc: *mut DWORD,
    pAuthzSvc: *mut DWORD,
    pServerPrincName: *mut LPOLESTR,
    pAuthnLevel: *mut DWORD,
    pImpLevel: *mut DWORD,
    pPrivs: *mut RPC_AUTHZ_HANDLE,
    pCapabilities: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return CoQueryClientBlanket(
            pAuthnSvc,
            pAuthzSvc,
            pServerPrincName,
            pAuthnLevel,
            pImpLevel,
            pPrivs,
            pCapabilities
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoImpersonateClient(
    
) ->  HRESULT
{
    unsafe {
        return CoImpersonateClient(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRevertToSelf(
    
) ->  HRESULT
{
    unsafe {
        return CoRevertToSelf(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoQueryAuthenticationServices(
    pcAuthSvc: *mut DWORD,
    asAuthSvc: *mut *mut SOLE_AUTHENTICATION_SERVICE    
) ->  HRESULT
{
    unsafe {
        return CoQueryAuthenticationServices(
            pcAuthSvc,
            asAuthSvc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoSwitchCallContext(
    pNewObject: *mut IUnknown,
    ppOldObject: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return CoSwitchCallContext(
            pNewObject,
            ppOldObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoCreateInstance(
    rclsid: *const IID,
    pUnkOuter:  LPUNKNOWN,
    dwClsContext:  DWORD,
    riid: *const IID,
    ppv: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoCreateInstance(
            rclsid,
            pUnkOuter,
            dwClsContext,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoCreateInstanceEx(
    Clsid: *const IID,
    punkOuter: *mut IUnknown,
    dwClsCtx:  DWORD,
    pServerInfo: *mut COSERVERINFO,
    dwCount:  DWORD,
    pResults: *mut MULTI_QI    
) ->  HRESULT
{
    unsafe {
        return CoCreateInstanceEx(
            Clsid,
            punkOuter,
            dwClsCtx,
            pServerInfo,
            dwCount,
            pResults
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoCreateInstanceFromApp(
    Clsid: *const IID,
    punkOuter: *mut IUnknown,
    dwClsCtx:  DWORD,
    reserved:  PVOID,
    dwCount:  DWORD,
    pResults: *mut MULTI_QI    
) ->  HRESULT
{
    unsafe {
        return CoCreateInstanceFromApp(
            Clsid,
            punkOuter,
            dwClsCtx,
            reserved,
            dwCount,
            pResults
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterActivationFilter(
    pActivationFilter: *mut IActivationFilter    
) ->  HRESULT
{
    unsafe {
        return CoRegisterActivationFilter(
            pActivationFilter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetCancelObject(
    dwThreadId:  DWORD,
    iid: *const IID,
    ppUnk: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return CoGetCancelObject(
            dwThreadId,
            iid,
            ppUnk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoSetCancelObject(
    pUnk: *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return CoSetCancelObject(
            pUnk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoCancelCall(
    dwThreadId:  DWORD,
    ulTimeout:  ULONG    
) ->  HRESULT
{
    unsafe {
        return CoCancelCall(
            dwThreadId,
            ulTimeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoTestCancel(
    
) ->  HRESULT
{
    unsafe {
        return CoTestCancel(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoEnableCallCancellation(
    pReserved:  LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoEnableCallCancellation(
            pReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoDisableCallCancellation(
    pReserved:  LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoDisableCallCancellation(
            pReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StringFromCLSID(
    rclsid: *const IID,
    lplpsz: *mut LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return StringFromCLSID(
            rclsid,
            lplpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLSIDFromString(
    lpsz:  LPCOLESTR,
    pclsid:  LPCLSID    
) ->  HRESULT
{
    unsafe {
        return CLSIDFromString(
            lpsz,
            pclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StringFromIID(
    rclsid: *const IID,
    lplpsz: *mut LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return StringFromIID(
            rclsid,
            lplpsz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IIDFromString(
    lpsz:  LPCOLESTR,
    lpiid:  LPIID    
) ->  HRESULT
{
    unsafe {
        return IIDFromString(
            lpsz,
            lpiid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ProgIDFromCLSID(
    clsid: *const IID,
    lplpszProgID: *mut LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return ProgIDFromCLSID(
            clsid,
            lplpszProgID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLSIDFromProgID(
    lpszProgID:  LPCOLESTR,
    lpclsid:  LPCLSID    
) ->  HRESULT
{
    unsafe {
        return CLSIDFromProgID(
            lpszProgID,
            lpclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StringFromGUID2(
    rguid: *const GUID,
    lpsz:  LPOLESTR,
    cchMax:  c_int    
) ->  c_int
{
    unsafe {
        return StringFromGUID2(
            rguid,
            lpsz,
            cchMax
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoCreateGuid(
    pguid: *mut GUID    
) ->  HRESULT
{
    unsafe {
        return CoCreateGuid(
            pguid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PropVariantCopy(
    pvarDest: *mut PROPVARIANT,
    pvarSrc: *const PROPVARIANT    
) ->  HRESULT
{
    unsafe {
        return PropVariantCopy(
            pvarDest,
            pvarSrc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PropVariantClear(
    pvar: *mut PROPVARIANT    
) ->  HRESULT
{
    unsafe {
        return PropVariantClear(
            pvar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreePropVariantArray(
    cVariants:  ULONG,
    rgvars: *mut PROPVARIANT    
) ->  HRESULT
{
    unsafe {
        return FreePropVariantArray(
            cVariants,
            rgvars
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoWaitForMultipleHandles(
    dwFlags:  DWORD,
    dwTimeout:  DWORD,
    cHandles:  ULONG,
    pHandles:  LPHANDLE,
    lpdwindex:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return CoWaitForMultipleHandles(
            dwFlags,
            dwTimeout,
            cHandles,
            pHandles,
            lpdwindex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoWaitForMultipleObjects(
    dwFlags:  DWORD,
    dwTimeout:  DWORD,
    cHandles:  ULONG,
    pHandles: *const HANDLE,
    lpdwindex:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return CoWaitForMultipleObjects(
            dwFlags,
            dwTimeout,
            cHandles,
            pHandles,
            lpdwindex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetTreatAsClass(
    clsidOld: *const IID,
    pClsidNew:  LPCLSID    
) ->  HRESULT
{
    unsafe {
        return CoGetTreatAsClass(
            clsidOld,
            pClsidNew
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInvalidateRemoteMachineBindings(
    pszMachineName:  LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return CoInvalidateRemoteMachineBindings(
            pszMachineName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RoGetAgileReference(
    options:  AgileReferenceOptions,
    riid: *const IID,
    pUnk: *mut IUnknown,
    ppAgileReference: *mut *mut IAgileReference    
) ->  HRESULT
{
    unsafe {
        return RoGetAgileReference(
            options,
            riid,
            pUnk,
            ppAgileReference
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DllGetClassObject(
    rclsid: *const IID,
    riid: *const IID,
    ppv: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return DllGetClassObject(
            rclsid,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DllCanUnloadNow(
    
) ->  HRESULT
{
    unsafe {
        return DllCanUnloadNow(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoTaskMemAlloc(
    cb:  SIZE_T    
) ->  LPVOID
{
    unsafe {
        return CoTaskMemAlloc(
            cb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoTaskMemRealloc(
    pv:  LPVOID,
    cb:  SIZE_T    
) ->  LPVOID
{
    unsafe {
        return CoTaskMemRealloc(
            pv,
            cb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoTaskMemFree(
    pv:  LPVOID    
)
{
    unsafe {
        return CoTaskMemFree(
            pv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoFileTimeNow(
    lpFileTime: *mut FILETIME    
) ->  HRESULT
{
    unsafe {
        return CoFileTimeNow(
            lpFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLSIDFromProgIDEx(
    lpszProgID:  LPCOLESTR,
    lpclsid:  LPCLSID    
) ->  HRESULT
{
    unsafe {
        return CLSIDFromProgIDEx(
            lpszProgID,
            lpclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterDeviceCatalog(
    deviceInstanceId:  PCWSTR,
    cookie: *mut CO_DEVICE_CATALOG_COOKIE    
) ->  HRESULT
{
    unsafe {
        return CoRegisterDeviceCatalog(
            deviceInstanceId,
            cookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRevokeDeviceCatalog(
    cookie:  CO_DEVICE_CATALOG_COOKIE    
) ->  HRESULT
{
    unsafe {
        return CoRevokeDeviceCatalog(
            cookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindCtx_RemoteSetBindOptions_Proxy(
    This: *mut IBindCtx,
    pbindopts: *mut BIND_OPTS2    
) ->  HRESULT
{
    unsafe {
        return IBindCtx_RemoteSetBindOptions_Proxy(
            This,
            pbindopts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindCtx_RemoteSetBindOptions_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IBindCtx_RemoteSetBindOptions_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindCtx_RemoteGetBindOptions_Proxy(
    This: *mut IBindCtx,
    pbindopts: *mut BIND_OPTS2    
) ->  HRESULT
{
    unsafe {
        return IBindCtx_RemoteGetBindOptions_Proxy(
            This,
            pbindopts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindCtx_RemoteGetBindOptions_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IBindCtx_RemoteGetBindOptions_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumMoniker_RemoteNext_Proxy(
    This: *mut IEnumMoniker,
    celt:  ULONG,
    rgelt: *mut *mut IMoniker,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumMoniker_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumMoniker_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumMoniker_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IRunnableObject_RemoteIsRunning_Proxy(
    This: *mut IRunnableObject    
) ->  HRESULT
{
    unsafe {
        return IRunnableObject_RemoteIsRunning_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IRunnableObject_RemoteIsRunning_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IRunnableObject_RemoteIsRunning_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IMoniker_RemoteBindToObject_Proxy(
    This: *mut IMoniker,
    pbc: *mut IBindCtx,
    pmkToLeft: *mut IMoniker,
    riidResult: *const IID,
    ppvResult: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IMoniker_RemoteBindToObject_Proxy(
            This,
            pbc,
            pmkToLeft,
            riidResult,
            ppvResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IMoniker_RemoteBindToObject_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IMoniker_RemoteBindToObject_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IMoniker_RemoteBindToStorage_Proxy(
    This: *mut IMoniker,
    pbc: *mut IBindCtx,
    pmkToLeft: *mut IMoniker,
    riid: *const IID,
    ppvObj: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IMoniker_RemoteBindToStorage_Proxy(
            This,
            pbc,
            pmkToLeft,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IMoniker_RemoteBindToStorage_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IMoniker_RemoteBindToStorage_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATSTG_RemoteNext_Proxy(
    This: *mut IEnumSTATSTG,
    celt:  ULONG,
    rgelt: *mut STATSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATSTG_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATSTG_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumSTATSTG_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_RemoteOpenStream_Proxy(
    This: *mut IStorage,
    pwcsName: *const OLECHAR,
    cbReserved1:  ULONG,
    reserved1: *mut byte,
    grfMode:  DWORD,
    reserved2:  DWORD,
    ppstm: *mut *mut IStream    
) ->  HRESULT
{
    unsafe {
        return IStorage_RemoteOpenStream_Proxy(
            This,
            pwcsName,
            cbReserved1,
            reserved1,
            grfMode,
            reserved2,
            ppstm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_RemoteOpenStream_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IStorage_RemoteOpenStream_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_RemoteCopyTo_Proxy(
    This: *mut IStorage,
    ciidExclude:  DWORD,
    rgiidExclude: *const IID,
    snbExclude:  SNB,
    pstgDest: *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return IStorage_RemoteCopyTo_Proxy(
            This,
            ciidExclude,
            rgiidExclude,
            snbExclude,
            pstgDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_RemoteCopyTo_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IStorage_RemoteCopyTo_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_RemoteEnumElements_Proxy(
    This: *mut IStorage,
    reserved1:  DWORD,
    cbReserved2:  ULONG,
    reserved2: *mut byte,
    reserved3:  DWORD,
    ppenum: *mut *mut IEnumSTATSTG    
) ->  HRESULT
{
    unsafe {
        return IStorage_RemoteEnumElements_Proxy(
            This,
            reserved1,
            cbReserved2,
            reserved2,
            reserved3,
            ppenum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_RemoteEnumElements_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IStorage_RemoteEnumElements_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ILockBytes_RemoteReadAt_Proxy(
    This: *mut ILockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *mut byte,
    cb:  ULONG,
    pcbRead: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ILockBytes_RemoteReadAt_Proxy(
            This,
            ulOffset,
            pv,
            cb,
            pcbRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ILockBytes_RemoteReadAt_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ILockBytes_RemoteReadAt_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ILockBytes_RemoteWriteAt_Proxy(
    This: *mut ILockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *const byte,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ILockBytes_RemoteWriteAt_Proxy(
            This,
            ulOffset,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ILockBytes_RemoteWriteAt_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ILockBytes_RemoteWriteAt_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumFORMATETC_RemoteNext_Proxy(
    This: *mut IEnumFORMATETC,
    celt:  ULONG,
    rgelt: *mut FORMATETC,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumFORMATETC_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumFORMATETC_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumFORMATETC_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATDATA_RemoteNext_Proxy(
    This: *mut IEnumSTATDATA,
    celt:  ULONG,
    rgelt: *mut STATDATA,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATDATA_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATDATA_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumSTATDATA_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnDataChange_Proxy(
    This: *mut IAdviseSink,
    pFormatetc: *mut FORMATETC,
    pStgmed: *mut ASYNC_STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_RemoteOnDataChange_Proxy(
            This,
            pFormatetc,
            pStgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnDataChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IAdviseSink_RemoteOnDataChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnViewChange_Proxy(
    This: *mut IAdviseSink,
    dwAspect:  DWORD,
    lindex:  LONG    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_RemoteOnViewChange_Proxy(
            This,
            dwAspect,
            lindex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnViewChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IAdviseSink_RemoteOnViewChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnRename_Proxy(
    This: *mut IAdviseSink,
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_RemoteOnRename_Proxy(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnRename_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IAdviseSink_RemoteOnRename_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnSave_Proxy(
    This: *mut IAdviseSink    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_RemoteOnSave_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnSave_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IAdviseSink_RemoteOnSave_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnClose_Proxy(
    This: *mut IAdviseSink    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_RemoteOnClose_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_RemoteOnClose_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IAdviseSink_RemoteOnClose_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
    This: *mut AsyncIAdviseSink,
    pFormatetc: *mut FORMATETC,
    pStgmed: *mut ASYNC_STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(
            This,
            pFormatetc,
            pStgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
    This: *mut AsyncIAdviseSink,
    dwAspect:  DWORD,
    lindex:  LONG    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(
            This,
            dwAspect,
            lindex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
    This: *mut AsyncIAdviseSink,
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    This: *mut IAdviseSink2,
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IAdviseSink2_RemoteOnLinkSrcChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
    This: *mut AsyncIAdviseSink2,
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
    This: *mut AsyncIAdviseSink2    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_RemoteGetData_Proxy(
    This: *mut IDataObject,
    pformatetcIn: *mut FORMATETC,
    pRemoteMedium: *mut STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IDataObject_RemoteGetData_Proxy(
            This,
            pformatetcIn,
            pRemoteMedium
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_RemoteGetData_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IDataObject_RemoteGetData_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_RemoteGetDataHere_Proxy(
    This: *mut IDataObject,
    pformatetc: *mut FORMATETC,
    pRemoteMedium: *mut STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IDataObject_RemoteGetDataHere_Proxy(
            This,
            pformatetc,
            pRemoteMedium
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_RemoteGetDataHere_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IDataObject_RemoteGetDataHere_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_RemoteSetData_Proxy(
    This: *mut IDataObject,
    pformatetc: *mut FORMATETC,
    pmedium: *mut FLAG_STGMEDIUM,
    fRelease:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IDataObject_RemoteSetData_Proxy(
            This,
            pformatetc,
            pmedium,
            fRelease
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_RemoteSetData_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IDataObject_RemoteSetData_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IFillLockBytes_RemoteFillAppend_Proxy(
    This: *mut IFillLockBytes,
    pv: *const byte,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IFillLockBytes_RemoteFillAppend_Proxy(
            This,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IFillLockBytes_RemoteFillAppend_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IFillLockBytes_RemoteFillAppend_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IFillLockBytes_RemoteFillAt_Proxy(
    This: *mut IFillLockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *const byte,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IFillLockBytes_RemoteFillAt_Proxy(
            This,
            ulOffset,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IFillLockBytes_RemoteFillAt_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IFillLockBytes_RemoteFillAt_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ASYNC_STGMEDIUM_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut ASYNC_STGMEDIUM    
) ->  c_ulong
{
    unsafe {
        return ASYNC_STGMEDIUM_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ASYNC_STGMEDIUM_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut ASYNC_STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return ASYNC_STGMEDIUM_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ASYNC_STGMEDIUM_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut ASYNC_STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return ASYNC_STGMEDIUM_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ASYNC_STGMEDIUM_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut ASYNC_STGMEDIUM    
)
{
    unsafe {
        return ASYNC_STGMEDIUM_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLIPFORMAT_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut CLIPFORMAT    
) ->  c_ulong
{
    unsafe {
        return CLIPFORMAT_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLIPFORMAT_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut CLIPFORMAT    
) -> *mut c_uchar
{
    unsafe {
        return CLIPFORMAT_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLIPFORMAT_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut CLIPFORMAT    
) -> *mut c_uchar
{
    unsafe {
        return CLIPFORMAT_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLIPFORMAT_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut CLIPFORMAT    
)
{
    unsafe {
        return CLIPFORMAT_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FLAG_STGMEDIUM_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut FLAG_STGMEDIUM    
) ->  c_ulong
{
    unsafe {
        return FLAG_STGMEDIUM_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FLAG_STGMEDIUM_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut FLAG_STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return FLAG_STGMEDIUM_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FLAG_STGMEDIUM_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut FLAG_STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return FLAG_STGMEDIUM_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FLAG_STGMEDIUM_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut FLAG_STGMEDIUM    
)
{
    unsafe {
        return FLAG_STGMEDIUM_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HBITMAP_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HBITMAP    
) ->  c_ulong
{
    unsafe {
        return HBITMAP_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HBITMAP_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HBITMAP    
) -> *mut c_uchar
{
    unsafe {
        return HBITMAP_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HBITMAP_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HBITMAP    
) -> *mut c_uchar
{
    unsafe {
        return HBITMAP_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HBITMAP_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut HBITMAP    
)
{
    unsafe {
        return HBITMAP_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HDC_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HDC    
) ->  c_ulong
{
    unsafe {
        return HDC_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HDC_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HDC    
) -> *mut c_uchar
{
    unsafe {
        return HDC_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HDC_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HDC    
) -> *mut c_uchar
{
    unsafe {
        return HDC_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HDC_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut HDC    
)
{
    unsafe {
        return HDC_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HICON_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HICON    
) ->  c_ulong
{
    unsafe {
        return HICON_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HICON_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HICON    
) -> *mut c_uchar
{
    unsafe {
        return HICON_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HICON_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HICON    
) -> *mut c_uchar
{
    unsafe {
        return HICON_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HICON_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut HICON    
)
{
    unsafe {
        return HICON_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SNB_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut SNB    
) ->  c_ulong
{
    unsafe {
        return SNB_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SNB_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut SNB    
) -> *mut c_uchar
{
    unsafe {
        return SNB_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SNB_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut SNB    
) -> *mut c_uchar
{
    unsafe {
        return SNB_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SNB_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut SNB    
)
{
    unsafe {
        return SNB_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_STGMEDIUM_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut STGMEDIUM    
) ->  c_ulong
{
    unsafe {
        return STGMEDIUM_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_STGMEDIUM_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return STGMEDIUM_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_STGMEDIUM_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return STGMEDIUM_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_STGMEDIUM_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut STGMEDIUM    
)
{
    unsafe {
        return STGMEDIUM_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ASYNC_STGMEDIUM_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut ASYNC_STGMEDIUM    
) ->  c_ulong
{
    unsafe {
        return ASYNC_STGMEDIUM_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ASYNC_STGMEDIUM_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut ASYNC_STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return ASYNC_STGMEDIUM_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ASYNC_STGMEDIUM_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut ASYNC_STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return ASYNC_STGMEDIUM_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ASYNC_STGMEDIUM_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut ASYNC_STGMEDIUM    
)
{
    unsafe {
        return ASYNC_STGMEDIUM_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLIPFORMAT_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut CLIPFORMAT    
) ->  c_ulong
{
    unsafe {
        return CLIPFORMAT_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLIPFORMAT_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut CLIPFORMAT    
) -> *mut c_uchar
{
    unsafe {
        return CLIPFORMAT_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLIPFORMAT_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut CLIPFORMAT    
) -> *mut c_uchar
{
    unsafe {
        return CLIPFORMAT_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLIPFORMAT_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut CLIPFORMAT    
)
{
    unsafe {
        return CLIPFORMAT_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FLAG_STGMEDIUM_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut FLAG_STGMEDIUM    
) ->  c_ulong
{
    unsafe {
        return FLAG_STGMEDIUM_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FLAG_STGMEDIUM_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut FLAG_STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return FLAG_STGMEDIUM_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FLAG_STGMEDIUM_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut FLAG_STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return FLAG_STGMEDIUM_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FLAG_STGMEDIUM_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut FLAG_STGMEDIUM    
)
{
    unsafe {
        return FLAG_STGMEDIUM_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HBITMAP_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HBITMAP    
) ->  c_ulong
{
    unsafe {
        return HBITMAP_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HBITMAP_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HBITMAP    
) -> *mut c_uchar
{
    unsafe {
        return HBITMAP_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HBITMAP_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HBITMAP    
) -> *mut c_uchar
{
    unsafe {
        return HBITMAP_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HBITMAP_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut HBITMAP    
)
{
    unsafe {
        return HBITMAP_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HDC_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HDC    
) ->  c_ulong
{
    unsafe {
        return HDC_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HDC_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HDC    
) -> *mut c_uchar
{
    unsafe {
        return HDC_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HDC_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HDC    
) -> *mut c_uchar
{
    unsafe {
        return HDC_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HDC_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut HDC    
)
{
    unsafe {
        return HDC_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HICON_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HICON    
) ->  c_ulong
{
    unsafe {
        return HICON_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HICON_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HICON    
) -> *mut c_uchar
{
    unsafe {
        return HICON_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HICON_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HICON    
) -> *mut c_uchar
{
    unsafe {
        return HICON_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HICON_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut HICON    
)
{
    unsafe {
        return HICON_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SNB_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut SNB    
) ->  c_ulong
{
    unsafe {
        return SNB_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SNB_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut SNB    
) -> *mut c_uchar
{
    unsafe {
        return SNB_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SNB_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut SNB    
) -> *mut c_uchar
{
    unsafe {
        return SNB_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SNB_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut SNB    
)
{
    unsafe {
        return SNB_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_STGMEDIUM_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut STGMEDIUM    
) ->  c_ulong
{
    unsafe {
        return STGMEDIUM_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_STGMEDIUM_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return STGMEDIUM_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_STGMEDIUM_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut STGMEDIUM    
) -> *mut c_uchar
{
    unsafe {
        return STGMEDIUM_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_STGMEDIUM_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut STGMEDIUM    
)
{
    unsafe {
        return STGMEDIUM_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindCtx_SetBindOptions_Proxy(
    This: *mut IBindCtx,
    pbindopts: *mut BIND_OPTS    
) ->  HRESULT
{
    unsafe {
        return IBindCtx_SetBindOptions_Proxy(
            This,
            pbindopts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindCtx_SetBindOptions_Stub(
    This: *mut IBindCtx,
    pbindopts: *mut BIND_OPTS2    
) ->  HRESULT
{
    unsafe {
        return IBindCtx_SetBindOptions_Stub(
            This,
            pbindopts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindCtx_GetBindOptions_Proxy(
    This: *mut IBindCtx,
    pbindopts: *mut BIND_OPTS    
) ->  HRESULT
{
    unsafe {
        return IBindCtx_GetBindOptions_Proxy(
            This,
            pbindopts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindCtx_GetBindOptions_Stub(
    This: *mut IBindCtx,
    pbindopts: *mut BIND_OPTS2    
) ->  HRESULT
{
    unsafe {
        return IBindCtx_GetBindOptions_Stub(
            This,
            pbindopts
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumMoniker_Next_Proxy(
    This: *mut IEnumMoniker,
    celt:  ULONG,
    rgelt: *mut *mut IMoniker,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumMoniker_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumMoniker_Next_Stub(
    This: *mut IEnumMoniker,
    celt:  ULONG,
    rgelt: *mut *mut IMoniker,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumMoniker_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IRunnableObject_IsRunning_Proxy(
    This: *mut IRunnableObject    
) ->  BOOL
{
    unsafe {
        return IRunnableObject_IsRunning_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IRunnableObject_IsRunning_Stub(
    This: *mut IRunnableObject    
) ->  HRESULT
{
    unsafe {
        return IRunnableObject_IsRunning_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IMoniker_BindToObject_Proxy(
    This: *mut IMoniker,
    pbc: *mut IBindCtx,
    pmkToLeft: *mut IMoniker,
    riidResult: *const IID,
    ppvResult: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return IMoniker_BindToObject_Proxy(
            This,
            pbc,
            pmkToLeft,
            riidResult,
            ppvResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IMoniker_BindToObject_Stub(
    This: *mut IMoniker,
    pbc: *mut IBindCtx,
    pmkToLeft: *mut IMoniker,
    riidResult: *const IID,
    ppvResult: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IMoniker_BindToObject_Stub(
            This,
            pbc,
            pmkToLeft,
            riidResult,
            ppvResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IMoniker_BindToStorage_Proxy(
    This: *mut IMoniker,
    pbc: *mut IBindCtx,
    pmkToLeft: *mut IMoniker,
    riid: *const IID,
    ppvObj: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return IMoniker_BindToStorage_Proxy(
            This,
            pbc,
            pmkToLeft,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IMoniker_BindToStorage_Stub(
    This: *mut IMoniker,
    pbc: *mut IBindCtx,
    pmkToLeft: *mut IMoniker,
    riid: *const IID,
    ppvObj: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IMoniker_BindToStorage_Stub(
            This,
            pbc,
            pmkToLeft,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATSTG_Next_Proxy(
    This: *mut IEnumSTATSTG,
    celt:  ULONG,
    rgelt: *mut STATSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATSTG_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATSTG_Next_Stub(
    This: *mut IEnumSTATSTG,
    celt:  ULONG,
    rgelt: *mut STATSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATSTG_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_OpenStream_Proxy(
    This: *mut IStorage,
    pwcsName: *const OLECHAR,
    reserved1: *mut c_void,
    grfMode:  DWORD,
    reserved2:  DWORD,
    ppstm: *mut *mut IStream    
) ->  HRESULT
{
    unsafe {
        return IStorage_OpenStream_Proxy(
            This,
            pwcsName,
            reserved1,
            grfMode,
            reserved2,
            ppstm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_OpenStream_Stub(
    This: *mut IStorage,
    pwcsName: *const OLECHAR,
    cbReserved1:  ULONG,
    reserved1: *mut byte,
    grfMode:  DWORD,
    reserved2:  DWORD,
    ppstm: *mut *mut IStream    
) ->  HRESULT
{
    unsafe {
        return IStorage_OpenStream_Stub(
            This,
            pwcsName,
            cbReserved1,
            reserved1,
            grfMode,
            reserved2,
            ppstm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_CopyTo_Proxy(
    This: *mut IStorage,
    ciidExclude:  DWORD,
    rgiidExclude: *const IID,
    snbExclude:  SNB,
    pstgDest: *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return IStorage_CopyTo_Proxy(
            This,
            ciidExclude,
            rgiidExclude,
            snbExclude,
            pstgDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_CopyTo_Stub(
    This: *mut IStorage,
    ciidExclude:  DWORD,
    rgiidExclude: *const IID,
    snbExclude:  SNB,
    pstgDest: *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return IStorage_CopyTo_Stub(
            This,
            ciidExclude,
            rgiidExclude,
            snbExclude,
            pstgDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_EnumElements_Proxy(
    This: *mut IStorage,
    reserved1:  DWORD,
    reserved2: *mut c_void,
    reserved3:  DWORD,
    ppenum: *mut *mut IEnumSTATSTG    
) ->  HRESULT
{
    unsafe {
        return IStorage_EnumElements_Proxy(
            This,
            reserved1,
            reserved2,
            reserved3,
            ppenum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IStorage_EnumElements_Stub(
    This: *mut IStorage,
    reserved1:  DWORD,
    cbReserved2:  ULONG,
    reserved2: *mut byte,
    reserved3:  DWORD,
    ppenum: *mut *mut IEnumSTATSTG    
) ->  HRESULT
{
    unsafe {
        return IStorage_EnumElements_Stub(
            This,
            reserved1,
            cbReserved2,
            reserved2,
            reserved3,
            ppenum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ILockBytes_ReadAt_Proxy(
    This: *mut ILockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *mut c_void,
    cb:  ULONG,
    pcbRead: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ILockBytes_ReadAt_Proxy(
            This,
            ulOffset,
            pv,
            cb,
            pcbRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ILockBytes_ReadAt_Stub(
    This: *mut ILockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *mut byte,
    cb:  ULONG,
    pcbRead: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ILockBytes_ReadAt_Stub(
            This,
            ulOffset,
            pv,
            cb,
            pcbRead
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ILockBytes_WriteAt_Proxy(
    This: *mut ILockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *const c_void,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ILockBytes_WriteAt_Proxy(
            This,
            ulOffset,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ILockBytes_WriteAt_Stub(
    This: *mut ILockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *const byte,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ILockBytes_WriteAt_Stub(
            This,
            ulOffset,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumFORMATETC_Next_Proxy(
    This: *mut IEnumFORMATETC,
    celt:  ULONG,
    rgelt: *mut FORMATETC,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumFORMATETC_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumFORMATETC_Next_Stub(
    This: *mut IEnumFORMATETC,
    celt:  ULONG,
    rgelt: *mut FORMATETC,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumFORMATETC_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATDATA_Next_Proxy(
    This: *mut IEnumSTATDATA,
    celt:  ULONG,
    rgelt: *mut STATDATA,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATDATA_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATDATA_Next_Stub(
    This: *mut IEnumSTATDATA,
    celt:  ULONG,
    rgelt: *mut STATDATA,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATDATA_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnDataChange_Proxy(
    This: *mut IAdviseSink,
    pFormatetc: *mut FORMATETC,
    pStgmed: *mut STGMEDIUM    
)
{
    unsafe {
        return IAdviseSink_OnDataChange_Proxy(
            This,
            pFormatetc,
            pStgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnDataChange_Stub(
    This: *mut IAdviseSink,
    pFormatetc: *mut FORMATETC,
    pStgmed: *mut ASYNC_STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_OnDataChange_Stub(
            This,
            pFormatetc,
            pStgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnViewChange_Proxy(
    This: *mut IAdviseSink,
    dwAspect:  DWORD,
    lindex:  LONG    
)
{
    unsafe {
        return IAdviseSink_OnViewChange_Proxy(
            This,
            dwAspect,
            lindex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnViewChange_Stub(
    This: *mut IAdviseSink,
    dwAspect:  DWORD,
    lindex:  LONG    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_OnViewChange_Stub(
            This,
            dwAspect,
            lindex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnRename_Proxy(
    This: *mut IAdviseSink,
    pmk: *mut IMoniker    
)
{
    unsafe {
        return IAdviseSink_OnRename_Proxy(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnRename_Stub(
    This: *mut IAdviseSink,
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_OnRename_Stub(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnSave_Proxy(
    This: *mut IAdviseSink    
)
{
    unsafe {
        return IAdviseSink_OnSave_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnSave_Stub(
    This: *mut IAdviseSink    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_OnSave_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnClose_Proxy(
    This: *mut IAdviseSink    
)
{
    unsafe {
        return IAdviseSink_OnClose_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink_OnClose_Stub(
    This: *mut IAdviseSink    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink_OnClose_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnDataChange_Proxy(
    This: *mut AsyncIAdviseSink,
    pFormatetc: *mut FORMATETC,
    pStgmed: *mut STGMEDIUM    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnDataChange_Proxy(
            This,
            pFormatetc,
            pStgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnDataChange_Stub(
    This: *mut AsyncIAdviseSink,
    pFormatetc: *mut FORMATETC,
    pStgmed: *mut ASYNC_STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnDataChange_Stub(
            This,
            pFormatetc,
            pStgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnDataChange_Proxy(
    This: *mut AsyncIAdviseSink    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnDataChange_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnDataChange_Stub(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnDataChange_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnViewChange_Proxy(
    This: *mut AsyncIAdviseSink,
    dwAspect:  DWORD,
    lindex:  LONG    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnViewChange_Proxy(
            This,
            dwAspect,
            lindex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnViewChange_Stub(
    This: *mut AsyncIAdviseSink,
    dwAspect:  DWORD,
    lindex:  LONG    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnViewChange_Stub(
            This,
            dwAspect,
            lindex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnViewChange_Proxy(
    This: *mut AsyncIAdviseSink    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnViewChange_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnViewChange_Stub(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnViewChange_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnRename_Proxy(
    This: *mut AsyncIAdviseSink,
    pmk: *mut IMoniker    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnRename_Proxy(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnRename_Stub(
    This: *mut AsyncIAdviseSink,
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnRename_Stub(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnRename_Proxy(
    This: *mut AsyncIAdviseSink    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnRename_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnRename_Stub(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnRename_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnSave_Proxy(
    This: *mut AsyncIAdviseSink    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnSave_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnSave_Stub(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnSave_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnSave_Proxy(
    This: *mut AsyncIAdviseSink    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnSave_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnSave_Stub(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnSave_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnClose_Proxy(
    This: *mut AsyncIAdviseSink    
)
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnClose_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Begin_OnClose_Stub(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Begin_OnClose_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnClose_Proxy(
    This: *mut AsyncIAdviseSink    
)
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnClose_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink_Finish_OnClose_Stub(
    This: *mut AsyncIAdviseSink    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink_Finish_OnClose_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink2_OnLinkSrcChange_Proxy(
    This: *mut IAdviseSink2,
    pmk: *mut IMoniker    
)
{
    unsafe {
        return IAdviseSink2_OnLinkSrcChange_Proxy(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IAdviseSink2_OnLinkSrcChange_Stub(
    This: *mut IAdviseSink2,
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return IAdviseSink2_OnLinkSrcChange_Stub(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
    This: *mut AsyncIAdviseSink2,
    pmk: *mut IMoniker    
)
{
    unsafe {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
    This: *mut AsyncIAdviseSink2,
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(
            This,
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
    This: *mut AsyncIAdviseSink2    
)
{
    unsafe {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
    This: *mut AsyncIAdviseSink2    
) ->  HRESULT
{
    unsafe {
        return AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_GetData_Proxy(
    This: *mut IDataObject,
    pformatetcIn: *mut FORMATETC,
    pmedium: *mut STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IDataObject_GetData_Proxy(
            This,
            pformatetcIn,
            pmedium
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_GetData_Stub(
    This: *mut IDataObject,
    pformatetcIn: *mut FORMATETC,
    pRemoteMedium: *mut STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IDataObject_GetData_Stub(
            This,
            pformatetcIn,
            pRemoteMedium
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_GetDataHere_Proxy(
    This: *mut IDataObject,
    pformatetc: *mut FORMATETC,
    pmedium: *mut STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IDataObject_GetDataHere_Proxy(
            This,
            pformatetc,
            pmedium
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_GetDataHere_Stub(
    This: *mut IDataObject,
    pformatetc: *mut FORMATETC,
    pRemoteMedium: *mut STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IDataObject_GetDataHere_Stub(
            This,
            pformatetc,
            pRemoteMedium
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_SetData_Proxy(
    This: *mut IDataObject,
    pformatetc: *mut FORMATETC,
    pmedium: *mut STGMEDIUM,
    fRelease:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IDataObject_SetData_Proxy(
            This,
            pformatetc,
            pmedium,
            fRelease
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDataObject_SetData_Stub(
    This: *mut IDataObject,
    pformatetc: *mut FORMATETC,
    pmedium: *mut FLAG_STGMEDIUM,
    fRelease:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IDataObject_SetData_Stub(
            This,
            pformatetc,
            pmedium,
            fRelease
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IFillLockBytes_FillAppend_Proxy(
    This: *mut IFillLockBytes,
    pv: *const c_void,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IFillLockBytes_FillAppend_Proxy(
            This,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IFillLockBytes_FillAppend_Stub(
    This: *mut IFillLockBytes,
    pv: *const byte,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IFillLockBytes_FillAppend_Stub(
            This,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IFillLockBytes_FillAt_Proxy(
    This: *mut IFillLockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *const c_void,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IFillLockBytes_FillAt_Proxy(
            This,
            ulOffset,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IFillLockBytes_FillAt_Stub(
    This: *mut IFillLockBytes,
    ulOffset:  ULARGE_INTEGER,
    pv: *const byte,
    cb:  ULONG,
    pcbWritten: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IFillLockBytes_FillAt_Stub(
            This,
            ulOffset,
            pv,
            cb,
            pcbWritten
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDispatch_RemoteInvoke_Proxy(
    This: *mut IDispatch,
    dispIdMember:  DISPID,
    riid: *const IID,
    lcid:  LCID,
    dwFlags:  DWORD,
    pDispParams: *mut DISPPARAMS,
    pVarResult: *mut VARIANT,
    pExcepInfo: *mut EXCEPINFO,
    pArgErr: *mut UINT,
    cVarRef:  UINT,
    rgVarRefIdx: *mut UINT,
    rgVarRef: *mut VARIANTARG    
) ->  HRESULT
{
    unsafe {
        return IDispatch_RemoteInvoke_Proxy(
            This,
            dispIdMember,
            riid,
            lcid,
            dwFlags,
            pDispParams,
            pVarResult,
            pExcepInfo,
            pArgErr,
            cVarRef,
            rgVarRefIdx,
            rgVarRef
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDispatch_RemoteInvoke_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IDispatch_RemoteInvoke_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumVARIANT_RemoteNext_Proxy(
    This: *mut IEnumVARIANT,
    celt:  ULONG,
    rgVar: *mut VARIANT,
    pCeltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumVARIANT_RemoteNext_Proxy(
            This,
            celt,
            rgVar,
            pCeltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumVARIANT_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumVARIANT_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeComp_RemoteBind_Proxy(
    This: *mut ITypeComp,
    szName:  LPOLESTR,
    lHashVal:  ULONG,
    wFlags:  WORD,
    ppTInfo: *mut *mut ITypeInfo,
    pDescKind: *mut DESCKIND,
    ppFuncDesc: *mut LPFUNCDESC,
    ppVarDesc: *mut LPVARDESC,
    ppTypeComp: *mut *mut ITypeComp,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeComp_RemoteBind_Proxy(
            This,
            szName,
            lHashVal,
            wFlags,
            ppTInfo,
            pDescKind,
            ppFuncDesc,
            ppVarDesc,
            ppTypeComp,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeComp_RemoteBind_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeComp_RemoteBind_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeComp_RemoteBindType_Proxy(
    This: *mut ITypeComp,
    szName:  LPOLESTR,
    lHashVal:  ULONG,
    ppTInfo: *mut *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeComp_RemoteBindType_Proxy(
            This,
            szName,
            lHashVal,
            ppTInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeComp_RemoteBindType_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeComp_RemoteBindType_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetTypeAttr_Proxy(
    This: *mut ITypeInfo,
    ppTypeAttr: *mut LPTYPEATTR,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_RemoteGetTypeAttr_Proxy(
            This,
            ppTypeAttr,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetTypeAttr_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_RemoteGetTypeAttr_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetFuncDesc_Proxy(
    This: *mut ITypeInfo,
    index:  UINT,
    ppFuncDesc: *mut LPFUNCDESC,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_RemoteGetFuncDesc_Proxy(
            This,
            index,
            ppFuncDesc,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetFuncDesc_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_RemoteGetFuncDesc_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetVarDesc_Proxy(
    This: *mut ITypeInfo,
    index:  UINT,
    ppVarDesc: *mut LPVARDESC,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_RemoteGetVarDesc_Proxy(
            This,
            index,
            ppVarDesc,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetVarDesc_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_RemoteGetVarDesc_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetNames_Proxy(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    rgBstrNames: *mut BSTR,
    cMaxNames:  UINT,
    pcNames: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_RemoteGetNames_Proxy(
            This,
            memid,
            rgBstrNames,
            cMaxNames,
            pcNames
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetNames_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_RemoteGetNames_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalGetIDsOfNames_Proxy(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_LocalGetIDsOfNames_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalGetIDsOfNames_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_LocalGetIDsOfNames_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalInvoke_Proxy(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_LocalInvoke_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalInvoke_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_LocalInvoke_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetDocumentation_Proxy(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    refPtrFlags:  DWORD,
    pBstrName: *mut BSTR,
    pBstrDocString: *mut BSTR,
    pdwHelpContext: *mut DWORD,
    pBstrHelpFile: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_RemoteGetDocumentation_Proxy(
            This,
            memid,
            refPtrFlags,
            pBstrName,
            pBstrDocString,
            pdwHelpContext,
            pBstrHelpFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetDocumentation_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_RemoteGetDocumentation_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetDllEntry_Proxy(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    invKind:  INVOKEKIND,
    refPtrFlags:  DWORD,
    pBstrDllName: *mut BSTR,
    pBstrName: *mut BSTR,
    pwOrdinal: *mut WORD    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_RemoteGetDllEntry_Proxy(
            This,
            memid,
            invKind,
            refPtrFlags,
            pBstrDllName,
            pBstrName,
            pwOrdinal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetDllEntry_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_RemoteGetDllEntry_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalAddressOfMember_Proxy(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_LocalAddressOfMember_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalAddressOfMember_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_LocalAddressOfMember_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteCreateInstance_Proxy(
    This: *mut ITypeInfo,
    riid: *const IID,
    ppvObj: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_RemoteCreateInstance_Proxy(
            This,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteCreateInstance_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_RemoteCreateInstance_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetContainingTypeLib_Proxy(
    This: *mut ITypeInfo,
    ppTLib: *mut *mut ITypeLib,
    pIndex: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_RemoteGetContainingTypeLib_Proxy(
            This,
            ppTLib,
            pIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_RemoteGetContainingTypeLib_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_RemoteGetContainingTypeLib_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalReleaseTypeAttr_Proxy(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_LocalReleaseTypeAttr_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalReleaseTypeAttr_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_LocalReleaseTypeAttr_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalReleaseFuncDesc_Proxy(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_LocalReleaseFuncDesc_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalReleaseFuncDesc_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_LocalReleaseFuncDesc_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalReleaseVarDesc_Proxy(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_LocalReleaseVarDesc_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_LocalReleaseVarDesc_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo_LocalReleaseVarDesc_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo2_RemoteGetDocumentation2_Proxy(
    This: *mut ITypeInfo2,
    memid:  MEMBERID,
    lcid:  LCID,
    refPtrFlags:  DWORD,
    pbstrHelpString: *mut BSTR,
    pdwHelpStringContext: *mut DWORD,
    pbstrHelpStringDll: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo2_RemoteGetDocumentation2_Proxy(
            This,
            memid,
            lcid,
            refPtrFlags,
            pbstrHelpString,
            pdwHelpStringContext,
            pbstrHelpStringDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo2_RemoteGetDocumentation2_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeInfo2_RemoteGetDocumentation2_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteGetTypeInfoCount_Proxy(
    This: *mut ITypeLib,
    pcTInfo: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_RemoteGetTypeInfoCount_Proxy(
            This,
            pcTInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteGetTypeInfoCount_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeLib_RemoteGetTypeInfoCount_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteGetLibAttr_Proxy(
    This: *mut ITypeLib,
    ppTLibAttr: *mut LPTLIBATTR,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_RemoteGetLibAttr_Proxy(
            This,
            ppTLibAttr,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteGetLibAttr_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeLib_RemoteGetLibAttr_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteGetDocumentation_Proxy(
    This: *mut ITypeLib,
    index:  INT,
    refPtrFlags:  DWORD,
    pBstrName: *mut BSTR,
    pBstrDocString: *mut BSTR,
    pdwHelpContext: *mut DWORD,
    pBstrHelpFile: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_RemoteGetDocumentation_Proxy(
            This,
            index,
            refPtrFlags,
            pBstrName,
            pBstrDocString,
            pdwHelpContext,
            pBstrHelpFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteGetDocumentation_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeLib_RemoteGetDocumentation_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteIsName_Proxy(
    This: *mut ITypeLib,
    szNameBuf:  LPOLESTR,
    lHashVal:  ULONG,
    pfName: *mut BOOL,
    pBstrLibName: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_RemoteIsName_Proxy(
            This,
            szNameBuf,
            lHashVal,
            pfName,
            pBstrLibName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteIsName_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeLib_RemoteIsName_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteFindName_Proxy(
    This: *mut ITypeLib,
    szNameBuf:  LPOLESTR,
    lHashVal:  ULONG,
    ppTInfo: *mut *mut ITypeInfo,
    rgMemId: *mut MEMBERID,
    pcFound: *mut USHORT,
    pBstrLibName: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_RemoteFindName_Proxy(
            This,
            szNameBuf,
            lHashVal,
            ppTInfo,
            rgMemId,
            pcFound,
            pBstrLibName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_RemoteFindName_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeLib_RemoteFindName_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_LocalReleaseTLibAttr_Proxy(
    This: *mut ITypeLib    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_LocalReleaseTLibAttr_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_LocalReleaseTLibAttr_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeLib_LocalReleaseTLibAttr_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib2_RemoteGetLibStatistics_Proxy(
    This: *mut ITypeLib2,
    pcUniqueNames: *mut ULONG,
    pcchUniqueNames: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ITypeLib2_RemoteGetLibStatistics_Proxy(
            This,
            pcUniqueNames,
            pcchUniqueNames
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib2_RemoteGetLibStatistics_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeLib2_RemoteGetLibStatistics_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib2_RemoteGetDocumentation2_Proxy(
    This: *mut ITypeLib2,
    index:  INT,
    lcid:  LCID,
    refPtrFlags:  DWORD,
    pbstrHelpString: *mut BSTR,
    pdwHelpStringContext: *mut DWORD,
    pbstrHelpStringDll: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib2_RemoteGetDocumentation2_Proxy(
            This,
            index,
            lcid,
            refPtrFlags,
            pbstrHelpString,
            pdwHelpStringContext,
            pbstrHelpStringDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib2_RemoteGetDocumentation2_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return ITypeLib2_RemoteGetDocumentation2_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IPropertyBag_RemoteRead_Proxy(
    This: *mut IPropertyBag,
    pszPropName:  LPCOLESTR,
    pVar: *mut VARIANT,
    pErrorLog: *mut IErrorLog,
    varType:  DWORD,
    pUnkObj: *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IPropertyBag_RemoteRead_Proxy(
            This,
            pszPropName,
            pVar,
            pErrorLog,
            varType,
            pUnkObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IPropertyBag_RemoteRead_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IPropertyBag_RemoteRead_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BSTR_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut BSTR    
) ->  c_ulong
{
    unsafe {
        return BSTR_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BSTR_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut BSTR    
) -> *mut c_uchar
{
    unsafe {
        return BSTR_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BSTR_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut BSTR    
) -> *mut c_uchar
{
    unsafe {
        return BSTR_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BSTR_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut BSTR    
)
{
    unsafe {
        return BSTR_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLEANLOCALSTORAGE_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut CLEANLOCALSTORAGE    
) ->  c_ulong
{
    unsafe {
        return CLEANLOCALSTORAGE_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLEANLOCALSTORAGE_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut CLEANLOCALSTORAGE    
) -> *mut c_uchar
{
    unsafe {
        return CLEANLOCALSTORAGE_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLEANLOCALSTORAGE_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut CLEANLOCALSTORAGE    
) -> *mut c_uchar
{
    unsafe {
        return CLEANLOCALSTORAGE_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLEANLOCALSTORAGE_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut CLEANLOCALSTORAGE    
)
{
    unsafe {
        return CLEANLOCALSTORAGE_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VARIANT_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut VARIANT    
) ->  c_ulong
{
    unsafe {
        return VARIANT_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VARIANT_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut VARIANT    
) -> *mut c_uchar
{
    unsafe {
        return VARIANT_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VARIANT_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut VARIANT    
) -> *mut c_uchar
{
    unsafe {
        return VARIANT_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VARIANT_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut VARIANT    
)
{
    unsafe {
        return VARIANT_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BSTR_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut BSTR    
) ->  c_ulong
{
    unsafe {
        return BSTR_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BSTR_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut BSTR    
) -> *mut c_uchar
{
    unsafe {
        return BSTR_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BSTR_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut BSTR    
) -> *mut c_uchar
{
    unsafe {
        return BSTR_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BSTR_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut BSTR    
)
{
    unsafe {
        return BSTR_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLEANLOCALSTORAGE_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut CLEANLOCALSTORAGE    
) ->  c_ulong
{
    unsafe {
        return CLEANLOCALSTORAGE_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLEANLOCALSTORAGE_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut CLEANLOCALSTORAGE    
) -> *mut c_uchar
{
    unsafe {
        return CLEANLOCALSTORAGE_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLEANLOCALSTORAGE_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut CLEANLOCALSTORAGE    
) -> *mut c_uchar
{
    unsafe {
        return CLEANLOCALSTORAGE_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CLEANLOCALSTORAGE_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut CLEANLOCALSTORAGE    
)
{
    unsafe {
        return CLEANLOCALSTORAGE_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VARIANT_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut VARIANT    
) ->  c_ulong
{
    unsafe {
        return VARIANT_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VARIANT_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut VARIANT    
) -> *mut c_uchar
{
    unsafe {
        return VARIANT_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VARIANT_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut VARIANT    
) -> *mut c_uchar
{
    unsafe {
        return VARIANT_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VARIANT_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut VARIANT    
)
{
    unsafe {
        return VARIANT_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDispatch_Invoke_Proxy(
    This: *mut IDispatch,
    dispIdMember:  DISPID,
    riid: *const IID,
    lcid:  LCID,
    wFlags:  WORD,
    pDispParams: *mut DISPPARAMS,
    pVarResult: *mut VARIANT,
    pExcepInfo: *mut EXCEPINFO,
    puArgErr: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return IDispatch_Invoke_Proxy(
            This,
            dispIdMember,
            riid,
            lcid,
            wFlags,
            pDispParams,
            pVarResult,
            pExcepInfo,
            puArgErr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IDispatch_Invoke_Stub(
    This: *mut IDispatch,
    dispIdMember:  DISPID,
    riid: *const IID,
    lcid:  LCID,
    dwFlags:  DWORD,
    pDispParams: *mut DISPPARAMS,
    pVarResult: *mut VARIANT,
    pExcepInfo: *mut EXCEPINFO,
    pArgErr: *mut UINT,
    cVarRef:  UINT,
    rgVarRefIdx: *mut UINT,
    rgVarRef: *mut VARIANTARG    
) ->  HRESULT
{
    unsafe {
        return IDispatch_Invoke_Stub(
            This,
            dispIdMember,
            riid,
            lcid,
            dwFlags,
            pDispParams,
            pVarResult,
            pExcepInfo,
            pArgErr,
            cVarRef,
            rgVarRefIdx,
            rgVarRef
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumVARIANT_Next_Proxy(
    This: *mut IEnumVARIANT,
    celt:  ULONG,
    rgVar: *mut VARIANT,
    pCeltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumVARIANT_Next_Proxy(
            This,
            celt,
            rgVar,
            pCeltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumVARIANT_Next_Stub(
    This: *mut IEnumVARIANT,
    celt:  ULONG,
    rgVar: *mut VARIANT,
    pCeltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumVARIANT_Next_Stub(
            This,
            celt,
            rgVar,
            pCeltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeComp_Bind_Proxy(
    This: *mut ITypeComp,
    szName:  LPOLESTR,
    lHashVal:  ULONG,
    wFlags:  WORD,
    ppTInfo: *mut *mut ITypeInfo,
    pDescKind: *mut DESCKIND,
    pBindPtr: *mut BINDPTR    
) ->  HRESULT
{
    unsafe {
        return ITypeComp_Bind_Proxy(
            This,
            szName,
            lHashVal,
            wFlags,
            ppTInfo,
            pDescKind,
            pBindPtr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeComp_Bind_Stub(
    This: *mut ITypeComp,
    szName:  LPOLESTR,
    lHashVal:  ULONG,
    wFlags:  WORD,
    ppTInfo: *mut *mut ITypeInfo,
    pDescKind: *mut DESCKIND,
    ppFuncDesc: *mut LPFUNCDESC,
    ppVarDesc: *mut LPVARDESC,
    ppTypeComp: *mut *mut ITypeComp,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeComp_Bind_Stub(
            This,
            szName,
            lHashVal,
            wFlags,
            ppTInfo,
            pDescKind,
            ppFuncDesc,
            ppVarDesc,
            ppTypeComp,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeComp_BindType_Proxy(
    This: *mut ITypeComp,
    szName:  LPOLESTR,
    lHashVal:  ULONG,
    ppTInfo: *mut *mut ITypeInfo,
    ppTComp: *mut *mut ITypeComp    
) ->  HRESULT
{
    unsafe {
        return ITypeComp_BindType_Proxy(
            This,
            szName,
            lHashVal,
            ppTInfo,
            ppTComp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeComp_BindType_Stub(
    This: *mut ITypeComp,
    szName:  LPOLESTR,
    lHashVal:  ULONG,
    ppTInfo: *mut *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeComp_BindType_Stub(
            This,
            szName,
            lHashVal,
            ppTInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetTypeAttr_Proxy(
    This: *mut ITypeInfo,
    ppTypeAttr: *mut *mut TYPEATTR    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetTypeAttr_Proxy(
            This,
            ppTypeAttr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetTypeAttr_Stub(
    This: *mut ITypeInfo,
    ppTypeAttr: *mut LPTYPEATTR,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetTypeAttr_Stub(
            This,
            ppTypeAttr,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetFuncDesc_Proxy(
    This: *mut ITypeInfo,
    index:  UINT,
    ppFuncDesc: *mut *mut FUNCDESC    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetFuncDesc_Proxy(
            This,
            index,
            ppFuncDesc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetFuncDesc_Stub(
    This: *mut ITypeInfo,
    index:  UINT,
    ppFuncDesc: *mut LPFUNCDESC,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetFuncDesc_Stub(
            This,
            index,
            ppFuncDesc,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetVarDesc_Proxy(
    This: *mut ITypeInfo,
    index:  UINT,
    ppVarDesc: *mut *mut VARDESC    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetVarDesc_Proxy(
            This,
            index,
            ppVarDesc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetVarDesc_Stub(
    This: *mut ITypeInfo,
    index:  UINT,
    ppVarDesc: *mut LPVARDESC,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetVarDesc_Stub(
            This,
            index,
            ppVarDesc,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetNames_Proxy(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    rgBstrNames: *mut BSTR,
    cMaxNames:  UINT,
    pcNames: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetNames_Proxy(
            This,
            memid,
            rgBstrNames,
            cMaxNames,
            pcNames
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetNames_Stub(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    rgBstrNames: *mut BSTR,
    cMaxNames:  UINT,
    pcNames: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetNames_Stub(
            This,
            memid,
            rgBstrNames,
            cMaxNames,
            pcNames
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetIDsOfNames_Proxy(
    This: *mut ITypeInfo,
    rgszNames: *mut LPOLESTR,
    cNames:  UINT,
    pMemId: *mut MEMBERID    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetIDsOfNames_Proxy(
            This,
            rgszNames,
            cNames,
            pMemId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetIDsOfNames_Stub(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetIDsOfNames_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_Invoke_Proxy(
    This: *mut ITypeInfo,
    pvInstance:  PVOID,
    memid:  MEMBERID,
    wFlags:  WORD,
    pDispParams: *mut DISPPARAMS,
    pVarResult: *mut VARIANT,
    pExcepInfo: *mut EXCEPINFO,
    puArgErr: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_Invoke_Proxy(
            This,
            pvInstance,
            memid,
            wFlags,
            pDispParams,
            pVarResult,
            pExcepInfo,
            puArgErr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_Invoke_Stub(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_Invoke_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetDocumentation_Proxy(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    pBstrName: *mut BSTR,
    pBstrDocString: *mut BSTR,
    pdwHelpContext: *mut DWORD,
    pBstrHelpFile: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetDocumentation_Proxy(
            This,
            memid,
            pBstrName,
            pBstrDocString,
            pdwHelpContext,
            pBstrHelpFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetDocumentation_Stub(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    refPtrFlags:  DWORD,
    pBstrName: *mut BSTR,
    pBstrDocString: *mut BSTR,
    pdwHelpContext: *mut DWORD,
    pBstrHelpFile: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetDocumentation_Stub(
            This,
            memid,
            refPtrFlags,
            pBstrName,
            pBstrDocString,
            pdwHelpContext,
            pBstrHelpFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetDllEntry_Proxy(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    invKind:  INVOKEKIND,
    pBstrDllName: *mut BSTR,
    pBstrName: *mut BSTR,
    pwOrdinal: *mut WORD    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetDllEntry_Proxy(
            This,
            memid,
            invKind,
            pBstrDllName,
            pBstrName,
            pwOrdinal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetDllEntry_Stub(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    invKind:  INVOKEKIND,
    refPtrFlags:  DWORD,
    pBstrDllName: *mut BSTR,
    pBstrName: *mut BSTR,
    pwOrdinal: *mut WORD    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetDllEntry_Stub(
            This,
            memid,
            invKind,
            refPtrFlags,
            pBstrDllName,
            pBstrName,
            pwOrdinal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_AddressOfMember_Proxy(
    This: *mut ITypeInfo,
    memid:  MEMBERID,
    invKind:  INVOKEKIND,
    ppv: *mut PVOID    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_AddressOfMember_Proxy(
            This,
            memid,
            invKind,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_AddressOfMember_Stub(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_AddressOfMember_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_CreateInstance_Proxy(
    This: *mut ITypeInfo,
    pUnkOuter: *mut IUnknown,
    riid: *const IID,
    ppvObj: *mut PVOID    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_CreateInstance_Proxy(
            This,
            pUnkOuter,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_CreateInstance_Stub(
    This: *mut ITypeInfo,
    riid: *const IID,
    ppvObj: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_CreateInstance_Stub(
            This,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetContainingTypeLib_Proxy(
    This: *mut ITypeInfo,
    ppTLib: *mut *mut ITypeLib,
    pIndex: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetContainingTypeLib_Proxy(
            This,
            ppTLib,
            pIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_GetContainingTypeLib_Stub(
    This: *mut ITypeInfo,
    ppTLib: *mut *mut ITypeLib,
    pIndex: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_GetContainingTypeLib_Stub(
            This,
            ppTLib,
            pIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_ReleaseTypeAttr_Proxy(
    This: *mut ITypeInfo,
    pTypeAttr: *mut TYPEATTR    
)
{
    unsafe {
        return ITypeInfo_ReleaseTypeAttr_Proxy(
            This,
            pTypeAttr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_ReleaseTypeAttr_Stub(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_ReleaseTypeAttr_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_ReleaseFuncDesc_Proxy(
    This: *mut ITypeInfo,
    pFuncDesc: *mut FUNCDESC    
)
{
    unsafe {
        return ITypeInfo_ReleaseFuncDesc_Proxy(
            This,
            pFuncDesc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_ReleaseFuncDesc_Stub(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_ReleaseFuncDesc_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_ReleaseVarDesc_Proxy(
    This: *mut ITypeInfo,
    pVarDesc: *mut VARDESC    
)
{
    unsafe {
        return ITypeInfo_ReleaseVarDesc_Proxy(
            This,
            pVarDesc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo_ReleaseVarDesc_Stub(
    This: *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo_ReleaseVarDesc_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo2_GetDocumentation2_Proxy(
    This: *mut ITypeInfo2,
    memid:  MEMBERID,
    lcid:  LCID,
    pbstrHelpString: *mut BSTR,
    pdwHelpStringContext: *mut DWORD,
    pbstrHelpStringDll: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo2_GetDocumentation2_Proxy(
            This,
            memid,
            lcid,
            pbstrHelpString,
            pdwHelpStringContext,
            pbstrHelpStringDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeInfo2_GetDocumentation2_Stub(
    This: *mut ITypeInfo2,
    memid:  MEMBERID,
    lcid:  LCID,
    refPtrFlags:  DWORD,
    pbstrHelpString: *mut BSTR,
    pdwHelpStringContext: *mut DWORD,
    pbstrHelpStringDll: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeInfo2_GetDocumentation2_Stub(
            This,
            memid,
            lcid,
            refPtrFlags,
            pbstrHelpString,
            pdwHelpStringContext,
            pbstrHelpStringDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_GetTypeInfoCount_Proxy(
    This: *mut ITypeLib    
) ->  UINT
{
    unsafe {
        return ITypeLib_GetTypeInfoCount_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_GetTypeInfoCount_Stub(
    This: *mut ITypeLib,
    pcTInfo: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_GetTypeInfoCount_Stub(
            This,
            pcTInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_GetLibAttr_Proxy(
    This: *mut ITypeLib,
    ppTLibAttr: *mut *mut TLIBATTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_GetLibAttr_Proxy(
            This,
            ppTLibAttr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_GetLibAttr_Stub(
    This: *mut ITypeLib,
    ppTLibAttr: *mut LPTLIBATTR,
    pDummy: *mut CLEANLOCALSTORAGE    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_GetLibAttr_Stub(
            This,
            ppTLibAttr,
            pDummy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_GetDocumentation_Proxy(
    This: *mut ITypeLib,
    index:  INT,
    pBstrName: *mut BSTR,
    pBstrDocString: *mut BSTR,
    pdwHelpContext: *mut DWORD,
    pBstrHelpFile: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_GetDocumentation_Proxy(
            This,
            index,
            pBstrName,
            pBstrDocString,
            pdwHelpContext,
            pBstrHelpFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_GetDocumentation_Stub(
    This: *mut ITypeLib,
    index:  INT,
    refPtrFlags:  DWORD,
    pBstrName: *mut BSTR,
    pBstrDocString: *mut BSTR,
    pdwHelpContext: *mut DWORD,
    pBstrHelpFile: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_GetDocumentation_Stub(
            This,
            index,
            refPtrFlags,
            pBstrName,
            pBstrDocString,
            pdwHelpContext,
            pBstrHelpFile
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_IsName_Proxy(
    This: *mut ITypeLib,
    szNameBuf:  LPOLESTR,
    lHashVal:  ULONG,
    pfName: *mut BOOL    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_IsName_Proxy(
            This,
            szNameBuf,
            lHashVal,
            pfName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_IsName_Stub(
    This: *mut ITypeLib,
    szNameBuf:  LPOLESTR,
    lHashVal:  ULONG,
    pfName: *mut BOOL,
    pBstrLibName: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_IsName_Stub(
            This,
            szNameBuf,
            lHashVal,
            pfName,
            pBstrLibName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_FindName_Proxy(
    This: *mut ITypeLib,
    szNameBuf:  LPOLESTR,
    lHashVal:  ULONG,
    ppTInfo: *mut *mut ITypeInfo,
    rgMemId: *mut MEMBERID,
    pcFound: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_FindName_Proxy(
            This,
            szNameBuf,
            lHashVal,
            ppTInfo,
            rgMemId,
            pcFound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_FindName_Stub(
    This: *mut ITypeLib,
    szNameBuf:  LPOLESTR,
    lHashVal:  ULONG,
    ppTInfo: *mut *mut ITypeInfo,
    rgMemId: *mut MEMBERID,
    pcFound: *mut USHORT,
    pBstrLibName: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_FindName_Stub(
            This,
            szNameBuf,
            lHashVal,
            ppTInfo,
            rgMemId,
            pcFound,
            pBstrLibName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_ReleaseTLibAttr_Proxy(
    This: *mut ITypeLib,
    pTLibAttr: *mut TLIBATTR    
)
{
    unsafe {
        return ITypeLib_ReleaseTLibAttr_Proxy(
            This,
            pTLibAttr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib_ReleaseTLibAttr_Stub(
    This: *mut ITypeLib    
) ->  HRESULT
{
    unsafe {
        return ITypeLib_ReleaseTLibAttr_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib2_GetLibStatistics_Proxy(
    This: *mut ITypeLib2,
    pcUniqueNames: *mut ULONG,
    pcchUniqueNames: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ITypeLib2_GetLibStatistics_Proxy(
            This,
            pcUniqueNames,
            pcchUniqueNames
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib2_GetLibStatistics_Stub(
    This: *mut ITypeLib2,
    pcUniqueNames: *mut ULONG,
    pcchUniqueNames: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return ITypeLib2_GetLibStatistics_Stub(
            This,
            pcUniqueNames,
            pcchUniqueNames
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib2_GetDocumentation2_Proxy(
    This: *mut ITypeLib2,
    index:  INT,
    lcid:  LCID,
    pbstrHelpString: *mut BSTR,
    pdwHelpStringContext: *mut DWORD,
    pbstrHelpStringDll: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib2_GetDocumentation2_Proxy(
            This,
            index,
            lcid,
            pbstrHelpString,
            pdwHelpStringContext,
            pbstrHelpStringDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ITypeLib2_GetDocumentation2_Stub(
    This: *mut ITypeLib2,
    index:  INT,
    lcid:  LCID,
    refPtrFlags:  DWORD,
    pbstrHelpString: *mut BSTR,
    pdwHelpStringContext: *mut DWORD,
    pbstrHelpStringDll: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return ITypeLib2_GetDocumentation2_Stub(
            This,
            index,
            lcid,
            refPtrFlags,
            pbstrHelpString,
            pdwHelpStringContext,
            pbstrHelpStringDll
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IPropertyBag_Read_Proxy(
    This: *mut IPropertyBag,
    pszPropName:  LPCOLESTR,
    pVar: *mut VARIANT,
    pErrorLog: *mut IErrorLog    
) ->  HRESULT
{
    unsafe {
        return IPropertyBag_Read_Proxy(
            This,
            pszPropName,
            pVar,
            pErrorLog
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IPropertyBag_Read_Stub(
    This: *mut IPropertyBag,
    pszPropName:  LPCOLESTR,
    pVar: *mut VARIANT,
    pErrorLog: *mut IErrorLog,
    varType:  DWORD,
    pUnkObj: *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IPropertyBag_Read_Stub(
            This,
            pszPropName,
            pVar,
            pErrorLog,
            varType,
            pUnkObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATPROPSTG_RemoteNext_Proxy(
    This: *mut IEnumSTATPROPSTG,
    celt:  ULONG,
    rgelt: *mut STATPROPSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATPROPSTG_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATPROPSTG_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumSTATPROPSTG_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATPROPSETSTG_RemoteNext_Proxy(
    This: *mut IEnumSTATPROPSETSTG,
    celt:  ULONG,
    rgelt: *mut STATPROPSETSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATPROPSETSTG_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATPROPSETSTG_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumSTATPROPSETSTG_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPSAFEARRAY_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut LPSAFEARRAY    
) ->  c_ulong
{
    unsafe {
        return LPSAFEARRAY_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPSAFEARRAY_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut LPSAFEARRAY    
) -> *mut c_uchar
{
    unsafe {
        return LPSAFEARRAY_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPSAFEARRAY_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut LPSAFEARRAY    
) -> *mut c_uchar
{
    unsafe {
        return LPSAFEARRAY_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPSAFEARRAY_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut LPSAFEARRAY    
)
{
    unsafe {
        return LPSAFEARRAY_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPSAFEARRAY_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut LPSAFEARRAY    
) ->  c_ulong
{
    unsafe {
        return LPSAFEARRAY_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPSAFEARRAY_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut LPSAFEARRAY    
) -> *mut c_uchar
{
    unsafe {
        return LPSAFEARRAY_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPSAFEARRAY_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut LPSAFEARRAY    
) -> *mut c_uchar
{
    unsafe {
        return LPSAFEARRAY_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LPSAFEARRAY_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut LPSAFEARRAY    
)
{
    unsafe {
        return LPSAFEARRAY_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATPROPSTG_Next_Proxy(
    This: *mut IEnumSTATPROPSTG,
    celt:  ULONG,
    rgelt: *mut STATPROPSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATPROPSTG_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATPROPSTG_Next_Stub(
    This: *mut IEnumSTATPROPSTG,
    celt:  ULONG,
    rgelt: *mut STATPROPSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATPROPSTG_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATPROPSETSTG_Next_Proxy(
    This: *mut IEnumSTATPROPSETSTG,
    celt:  ULONG,
    rgelt: *mut STATPROPSETSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATPROPSETSTG_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumSTATPROPSETSTG_Next_Stub(
    This: *mut IEnumSTATPROPSETSTG,
    celt:  ULONG,
    rgelt: *mut STATPROPSETSTG,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumSTATPROPSETSTG_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgCreateDocfile(
    pwcsName: *const WCHAR,
    grfMode:  DWORD,
    reserved:  DWORD,
    ppstgOpen: *mut *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return StgCreateDocfile(
            pwcsName,
            grfMode,
            reserved,
            ppstgOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgCreateDocfileOnILockBytes(
    plkbyt: *mut ILockBytes,
    grfMode:  DWORD,
    reserved:  DWORD,
    ppstgOpen: *mut *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return StgCreateDocfileOnILockBytes(
            plkbyt,
            grfMode,
            reserved,
            ppstgOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgOpenStorage(
    pwcsName: *const WCHAR,
    pstgPriority: *mut IStorage,
    grfMode:  DWORD,
    snbExclude:  SNB,
    reserved:  DWORD,
    ppstgOpen: *mut *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return StgOpenStorage(
            pwcsName,
            pstgPriority,
            grfMode,
            snbExclude,
            reserved,
            ppstgOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgOpenStorageOnILockBytes(
    plkbyt: *mut ILockBytes,
    pstgPriority: *mut IStorage,
    grfMode:  DWORD,
    snbExclude:  SNB,
    reserved:  DWORD,
    ppstgOpen: *mut *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return StgOpenStorageOnILockBytes(
            plkbyt,
            pstgPriority,
            grfMode,
            snbExclude,
            reserved,
            ppstgOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgIsStorageFile(
    pwcsName: *const WCHAR    
) ->  HRESULT
{
    unsafe {
        return StgIsStorageFile(
            pwcsName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgIsStorageILockBytes(
    plkbyt: *mut ILockBytes    
) ->  HRESULT
{
    unsafe {
        return StgIsStorageILockBytes(
            plkbyt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgSetTimes(
    lpszName: *const WCHAR,
    pctime: *const FILETIME,
    patime: *const FILETIME,
    pmtime: *const FILETIME    
) ->  HRESULT
{
    unsafe {
        return StgSetTimes(
            lpszName,
            pctime,
            patime,
            pmtime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgCreateStorageEx(
    pwcsName: *const WCHAR,
    grfMode:  DWORD,
    stgfmt:  DWORD,
    grfAttrs:  DWORD,
    pStgOptions: *mut STGOPTIONS,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    riid: *const IID,
    ppObjectOpen: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return StgCreateStorageEx(
            pwcsName,
            grfMode,
            stgfmt,
            grfAttrs,
            pStgOptions,
            pSecurityDescriptor,
            riid,
            ppObjectOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgOpenStorageEx(
    pwcsName: *const WCHAR,
    grfMode:  DWORD,
    stgfmt:  DWORD,
    grfAttrs:  DWORD,
    pStgOptions: *mut STGOPTIONS,
    pSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    riid: *const IID,
    ppObjectOpen: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return StgOpenStorageEx(
            pwcsName,
            grfMode,
            stgfmt,
            grfAttrs,
            pStgOptions,
            pSecurityDescriptor,
            riid,
            ppObjectOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgCreatePropStg(
    pUnk: *mut IUnknown,
    fmtid: *const IID,
    pclsid: *const CLSID,
    grfFlags:  DWORD,
    dwReserved:  DWORD,
    ppPropStg: *mut *mut IPropertyStorage    
) ->  HRESULT
{
    unsafe {
        return StgCreatePropStg(
            pUnk,
            fmtid,
            pclsid,
            grfFlags,
            dwReserved,
            ppPropStg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgOpenPropStg(
    pUnk: *mut IUnknown,
    fmtid: *const IID,
    grfFlags:  DWORD,
    dwReserved:  DWORD,
    ppPropStg: *mut *mut IPropertyStorage    
) ->  HRESULT
{
    unsafe {
        return StgOpenPropStg(
            pUnk,
            fmtid,
            grfFlags,
            dwReserved,
            ppPropStg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgCreatePropSetStg(
    pStorage: *mut IStorage,
    dwReserved:  DWORD,
    ppPropSetStg: *mut *mut IPropertySetStorage    
) ->  HRESULT
{
    unsafe {
        return StgCreatePropSetStg(
            pStorage,
            dwReserved,
            ppPropSetStg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FmtIdToPropStgName(
    pfmtid: *const FMTID,
    oszName:  LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return FmtIdToPropStgName(
            pfmtid,
            oszName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PropStgNameToFmtId(
    oszName:  LPOLESTR,
    pfmtid: *mut FMTID    
) ->  HRESULT
{
    unsafe {
        return PropStgNameToFmtId(
            oszName,
            pfmtid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadClassStg(
    pStg:  LPSTORAGE,
    pclsid: *mut CLSID    
) ->  HRESULT
{
    unsafe {
        return ReadClassStg(
            pStg,
            pclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteClassStg(
    pStg:  LPSTORAGE,
    rclsid: *const IID    
) ->  HRESULT
{
    unsafe {
        return WriteClassStg(
            pStg,
            rclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadClassStm(
    pStm:  LPSTREAM,
    pclsid: *mut CLSID    
) ->  HRESULT
{
    unsafe {
        return ReadClassStm(
            pStm,
            pclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteClassStm(
    pStm:  LPSTREAM,
    rclsid: *const IID    
) ->  HRESULT
{
    unsafe {
        return WriteClassStm(
            pStm,
            rclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetHGlobalFromILockBytes(
    plkbyt:  LPLOCKBYTES,
    phglobal: *mut HGLOBAL    
) ->  HRESULT
{
    unsafe {
        return GetHGlobalFromILockBytes(
            plkbyt,
            phglobal
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateILockBytesOnHGlobal(
    hGlobal:  HGLOBAL,
    fDeleteOnRelease:  BOOL,
    pplkbyt: *mut LPLOCKBYTES    
) ->  HRESULT
{
    unsafe {
        return CreateILockBytesOnHGlobal(
            hGlobal,
            fDeleteOnRelease,
            pplkbyt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetConvertStg(
    pStg:  LPSTORAGE    
) ->  HRESULT
{
    unsafe {
        return GetConvertStg(
            pStg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoBuildVersion(
    
) ->  DWORD
{
    unsafe {
        return CoBuildVersion(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInitialize(
    pvReserved:  LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoInitialize(
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterMallocSpy(
    pMallocSpy:  LPMALLOCSPY    
) ->  HRESULT
{
    unsafe {
        return CoRegisterMallocSpy(
            pMallocSpy
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRevokeMallocSpy(
    
) ->  HRESULT
{
    unsafe {
        return CoRevokeMallocSpy(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoCreateStandardMalloc(
    memctx:  DWORD,
    ppMalloc: *mut *mut IMalloc    
) ->  HRESULT
{
    unsafe {
        return CoCreateStandardMalloc(
            memctx,
            ppMalloc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterInitializeSpy(
    pSpy: *mut IInitializeSpy,
    puliCookie: *mut ULARGE_INTEGER    
) ->  HRESULT
{
    unsafe {
        return CoRegisterInitializeSpy(
            pSpy,
            puliCookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRevokeInitializeSpy(
    uliCookie:  ULARGE_INTEGER    
) ->  HRESULT
{
    unsafe {
        return CoRevokeInitializeSpy(
            uliCookie
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetSystemSecurityPermissions(
    comSDType:  COMSD,
    ppSD: *mut PSECURITY_DESCRIPTOR    
) ->  HRESULT
{
    unsafe {
        return CoGetSystemSecurityPermissions(
            comSDType,
            ppSD
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoLoadLibrary(
    lpszLibName:  LPOLESTR,
    bAutoFree:  BOOL    
) ->  HINSTANCE
{
    unsafe {
        return CoLoadLibrary(
            lpszLibName,
            bAutoFree
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoFreeLibrary(
    hInst:  HINSTANCE    
)
{
    unsafe {
        return CoFreeLibrary(
            hInst
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoFreeAllLibraries(
    
)
{
    unsafe {
        return CoFreeAllLibraries(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetInstanceFromFile(
    pServerInfo: *mut COSERVERINFO,
    pClsid: *mut CLSID,
    punkOuter: *mut IUnknown,
    dwClsCtx:  DWORD,
    grfMode:  DWORD,
    pwszName: *mut OLECHAR,
    dwCount:  DWORD,
    pResults: *mut MULTI_QI    
) ->  HRESULT
{
    unsafe {
        return CoGetInstanceFromFile(
            pServerInfo,
            pClsid,
            punkOuter,
            dwClsCtx,
            grfMode,
            pwszName,
            dwCount,
            pResults
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetInstanceFromIStorage(
    pServerInfo: *mut COSERVERINFO,
    pClsid: *mut CLSID,
    punkOuter: *mut IUnknown,
    dwClsCtx:  DWORD,
    pstg: *mut IStorage,
    dwCount:  DWORD,
    pResults: *mut MULTI_QI    
) ->  HRESULT
{
    unsafe {
        return CoGetInstanceFromIStorage(
            pServerInfo,
            pClsid,
            punkOuter,
            dwClsCtx,
            pstg,
            dwCount,
            pResults
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoAllowSetForegroundWindow(
    pUnk: *mut IUnknown,
    lpvReserved:  LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoAllowSetForegroundWindow(
            pUnk,
            lpvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DcomChannelSetHResult(
    pvReserved:  LPVOID,
    pulReserved: *mut ULONG,
    appsHR:  HRESULT    
) ->  HRESULT
{
    unsafe {
        return DcomChannelSetHResult(
            pvReserved,
            pulReserved,
            appsHR
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoIsOle1Class(
    rclsid: *const IID    
) ->  BOOL
{
    unsafe {
        return CoIsOle1Class(
            rclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoFileTimeToDosDateTime(
    lpFileTime: *mut FILETIME,
    lpDosDate:  LPWORD,
    lpDosTime:  LPWORD    
) ->  BOOL
{
    unsafe {
        return CoFileTimeToDosDateTime(
            lpFileTime,
            lpDosDate,
            lpDosTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoDosDateTimeToFileTime(
    nDosDate:  WORD,
    nDosTime:  WORD,
    lpFileTime: *mut FILETIME    
) ->  BOOL
{
    unsafe {
        return CoDosDateTimeToFileTime(
            nDosDate,
            nDosTime,
            lpFileTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterMessageFilter(
    lpMessageFilter:  LPMESSAGEFILTER,
    lplpMessageFilter: *mut LPMESSAGEFILTER    
) ->  HRESULT
{
    unsafe {
        return CoRegisterMessageFilter(
            lpMessageFilter,
            lplpMessageFilter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoRegisterChannelHook(
    ExtensionUuid: *const GUID,
    pChannelHook: *mut IChannelHook    
) ->  HRESULT
{
    unsafe {
        return CoRegisterChannelHook(
            ExtensionUuid,
            pChannelHook
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoTreatAsClass(
    clsidOld: *const IID,
    clsidNew: *const IID    
) ->  HRESULT
{
    unsafe {
        return CoTreatAsClass(
            clsidOld,
            clsidNew
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDataAdviseHolder(
    ppDAHolder: *mut LPDATAADVISEHOLDER    
) ->  HRESULT
{
    unsafe {
        return CreateDataAdviseHolder(
            ppDAHolder
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDataCache(
    pUnkOuter:  LPUNKNOWN,
    rclsid: *const IID,
    iid: *const IID,
    ppv: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return CreateDataCache(
            pUnkOuter,
            rclsid,
            iid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgOpenAsyncDocfileOnIFillLockBytes(
    pflb: *mut IFillLockBytes,
    grfMode:  DWORD,
    asyncFlags:  DWORD,
    ppstgOpen: *mut *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return StgOpenAsyncDocfileOnIFillLockBytes(
            pflb,
            grfMode,
            asyncFlags,
            ppstgOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgGetIFillLockBytesOnILockBytes(
    pilb: *mut ILockBytes,
    ppflb: *mut *mut IFillLockBytes    
) ->  HRESULT
{
    unsafe {
        return StgGetIFillLockBytesOnILockBytes(
            pilb,
            ppflb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgGetIFillLockBytesOnFile(
    pwcsName: *const OLECHAR,
    ppflb: *mut *mut IFillLockBytes    
) ->  HRESULT
{
    unsafe {
        return StgGetIFillLockBytesOnFile(
            pwcsName,
            ppflb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgOpenLayoutDocfile(
    pwcsDfName: *const OLECHAR,
    grfMode:  DWORD,
    reserved:  DWORD,
    ppstgOpen: *mut *mut IStorage    
) ->  HRESULT
{
    unsafe {
        return StgOpenLayoutDocfile(
            pwcsDfName,
            grfMode,
            reserved,
            ppstgOpen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInstall(
    pbc: *mut IBindCtx,
    dwFlags:  DWORD,
    pClassSpec: *mut uCLSSPEC,
    pQuery: *mut QUERYCONTEXT,
    pszCodeBase:  LPWSTR    
) ->  HRESULT
{
    unsafe {
        return CoInstall(
            pbc,
            dwFlags,
            pClassSpec,
            pQuery,
            pszCodeBase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BindMoniker(
    pmk:  LPMONIKER,
    grfOpt:  DWORD,
    iidResult: *const IID,
    ppvResult: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return BindMoniker(
            pmk,
            grfOpt,
            iidResult,
            ppvResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetObject(
    pszName:  LPCWSTR,
    pBindOptions: *mut BIND_OPTS,
    riid: *const IID,
    ppv: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return CoGetObject(
            pszName,
            pBindOptions,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MkParseDisplayName(
    pbc:  LPBC,
    szUserName:  LPCOLESTR,
    pchEaten: *mut ULONG,
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return MkParseDisplayName(
            pbc,
            szUserName,
            pchEaten,
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MonikerRelativePathTo(
    pmkSrc:  LPMONIKER,
    pmkDest:  LPMONIKER,
    ppmkRelPath: *mut LPMONIKER,
    dwReserved:  BOOL    
) ->  HRESULT
{
    unsafe {
        return MonikerRelativePathTo(
            pmkSrc,
            pmkDest,
            ppmkRelPath,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MonikerCommonPrefixWith(
    pmkThis:  LPMONIKER,
    pmkOther:  LPMONIKER,
    ppmkCommon: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return MonikerCommonPrefixWith(
            pmkThis,
            pmkOther,
            ppmkCommon
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateBindCtx(
    reserved:  DWORD,
    ppbc: *mut LPBC    
) ->  HRESULT
{
    unsafe {
        return CreateBindCtx(
            reserved,
            ppbc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateGenericComposite(
    pmkFirst:  LPMONIKER,
    pmkRest:  LPMONIKER,
    ppmkComposite: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return CreateGenericComposite(
            pmkFirst,
            pmkRest,
            ppmkComposite
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassFile(
    szFilename:  LPCOLESTR,
    pclsid: *mut CLSID    
) ->  HRESULT
{
    unsafe {
        return GetClassFile(
            szFilename,
            pclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateClassMoniker(
    rclsid: *const IID,
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return CreateClassMoniker(
            rclsid,
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFileMoniker(
    lpszPathName:  LPCOLESTR,
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return CreateFileMoniker(
            lpszPathName,
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateItemMoniker(
    lpszDelim:  LPCOLESTR,
    lpszItem:  LPCOLESTR,
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return CreateItemMoniker(
            lpszDelim,
            lpszItem,
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateAntiMoniker(
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return CreateAntiMoniker(
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreatePointerMoniker(
    punk:  LPUNKNOWN,
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return CreatePointerMoniker(
            punk,
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateObjrefMoniker(
    punk:  LPUNKNOWN,
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return CreateObjrefMoniker(
            punk,
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRunningObjectTable(
    reserved:  DWORD,
    pprot: *mut LPRUNNINGOBJECTTABLE    
) ->  HRESULT
{
    unsafe {
        return GetRunningObjectTable(
            reserved,
            pprot
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleCache2_RemoteUpdateCache_Proxy(
    This: *mut IOleCache2,
    pDataObject:  LPDATAOBJECT,
    grfUpdf:  DWORD,
    pReserved:  LONG_PTR    
) ->  HRESULT
{
    unsafe {
        return IOleCache2_RemoteUpdateCache_Proxy(
            This,
            pDataObject,
            grfUpdf,
            pReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleCache2_RemoteUpdateCache_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IOleCache2_RemoteUpdateCache_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
    This: *mut IOleInPlaceActiveObject    
) ->  HRESULT
{
    unsafe {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
    This: *mut IOleInPlaceActiveObject,
    prcBorder:  LPCRECT,
    riid: *const IID,
    pUIWindow: *mut IOleInPlaceUIWindow,
    fFrameWindow:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
            This,
            prcBorder,
            riid,
            pUIWindow,
            fFrameWindow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_RemoteDraw_Proxy(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect:  ULONG_PTR,
    ptd: *mut DVTARGETDEVICE,
    hdcTargetDev:  HDC,
    hdcDraw:  HDC,
    lprcBounds:  LPCRECTL,
    lprcWBounds:  LPCRECTL,
    pContinue: *mut IContinue    
) ->  HRESULT
{
    unsafe {
        return IViewObject_RemoteDraw_Proxy(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            ptd,
            hdcTargetDev,
            hdcDraw,
            lprcBounds,
            lprcWBounds,
            pContinue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_RemoteDraw_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IViewObject_RemoteDraw_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_RemoteGetColorSet_Proxy(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect:  ULONG_PTR,
    ptd: *mut DVTARGETDEVICE,
    hicTargetDev:  ULONG_PTR,
    ppColorSet: *mut *mut LOGPALETTE    
) ->  HRESULT
{
    unsafe {
        return IViewObject_RemoteGetColorSet_Proxy(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            ptd,
            hicTargetDev,
            ppColorSet
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_RemoteGetColorSet_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IViewObject_RemoteGetColorSet_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_RemoteFreeze_Proxy(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect:  ULONG_PTR,
    pdwFreeze: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IViewObject_RemoteFreeze_Proxy(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            pdwFreeze
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_RemoteFreeze_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IViewObject_RemoteFreeze_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_RemoteGetAdvise_Proxy(
    This: *mut IViewObject,
    pAspects: *mut DWORD,
    pAdvf: *mut DWORD,
    ppAdvSink: *mut *mut IAdviseSink    
) ->  HRESULT
{
    unsafe {
        return IViewObject_RemoteGetAdvise_Proxy(
            This,
            pAspects,
            pAdvf,
            ppAdvSink
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_RemoteGetAdvise_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IViewObject_RemoteGetAdvise_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumOLEVERB_RemoteNext_Proxy(
    This: *mut IEnumOLEVERB,
    celt:  ULONG,
    rgelt:  LPOLEVERB,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumOLEVERB_RemoteNext_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumOLEVERB_RemoteNext_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IEnumOLEVERB_RemoteNext_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HACCEL_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HACCEL    
) ->  c_ulong
{
    unsafe {
        return HACCEL_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HACCEL_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HACCEL    
) -> *mut c_uchar
{
    unsafe {
        return HACCEL_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HACCEL_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HACCEL    
) -> *mut c_uchar
{
    unsafe {
        return HACCEL_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HACCEL_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut HACCEL    
)
{
    unsafe {
        return HACCEL_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HGLOBAL_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HGLOBAL    
) ->  c_ulong
{
    unsafe {
        return HGLOBAL_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HGLOBAL_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HGLOBAL    
) -> *mut c_uchar
{
    unsafe {
        return HGLOBAL_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HGLOBAL_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HGLOBAL    
) -> *mut c_uchar
{
    unsafe {
        return HGLOBAL_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HGLOBAL_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut HGLOBAL    
)
{
    unsafe {
        return HGLOBAL_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HMENU_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HMENU    
) ->  c_ulong
{
    unsafe {
        return HMENU_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HMENU_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HMENU    
) -> *mut c_uchar
{
    unsafe {
        return HMENU_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HMENU_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HMENU    
) -> *mut c_uchar
{
    unsafe {
        return HMENU_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HMENU_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut HMENU    
)
{
    unsafe {
        return HMENU_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HWND_UserSize(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HWND    
) ->  c_ulong
{
    unsafe {
        return HWND_UserSize(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HWND_UserMarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HWND    
) -> *mut c_uchar
{
    unsafe {
        return HWND_UserMarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HWND_UserUnmarshal(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HWND    
) -> *mut c_uchar
{
    unsafe {
        return HWND_UserUnmarshal(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HWND_UserFree(
    arg1: *mut c_ulong,
    arg2: *mut HWND    
)
{
    unsafe {
        return HWND_UserFree(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HACCEL_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HACCEL    
) ->  c_ulong
{
    unsafe {
        return HACCEL_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HACCEL_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HACCEL    
) -> *mut c_uchar
{
    unsafe {
        return HACCEL_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HACCEL_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HACCEL    
) -> *mut c_uchar
{
    unsafe {
        return HACCEL_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HACCEL_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut HACCEL    
)
{
    unsafe {
        return HACCEL_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HGLOBAL_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HGLOBAL    
) ->  c_ulong
{
    unsafe {
        return HGLOBAL_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HGLOBAL_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HGLOBAL    
) -> *mut c_uchar
{
    unsafe {
        return HGLOBAL_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HGLOBAL_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HGLOBAL    
) -> *mut c_uchar
{
    unsafe {
        return HGLOBAL_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HGLOBAL_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut HGLOBAL    
)
{
    unsafe {
        return HGLOBAL_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HMENU_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HMENU    
) ->  c_ulong
{
    unsafe {
        return HMENU_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HMENU_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HMENU    
) -> *mut c_uchar
{
    unsafe {
        return HMENU_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HMENU_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HMENU    
) -> *mut c_uchar
{
    unsafe {
        return HMENU_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HMENU_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut HMENU    
)
{
    unsafe {
        return HMENU_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HWND_UserSize64(
    arg1: *mut c_ulong,
    arg2:  c_ulong,
    arg3: *mut HWND    
) ->  c_ulong
{
    unsafe {
        return HWND_UserSize64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HWND_UserMarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HWND    
) -> *mut c_uchar
{
    unsafe {
        return HWND_UserMarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HWND_UserUnmarshal64(
    arg1: *mut c_ulong,
    arg2: *mut c_uchar,
    arg3: *mut HWND    
) -> *mut c_uchar
{
    unsafe {
        return HWND_UserUnmarshal64(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HWND_UserFree64(
    arg1: *mut c_ulong,
    arg2: *mut HWND    
)
{
    unsafe {
        return HWND_UserFree64(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleCache2_UpdateCache_Proxy(
    This: *mut IOleCache2,
    pDataObject:  LPDATAOBJECT,
    grfUpdf:  DWORD,
    pReserved:  LPVOID    
) ->  HRESULT
{
    unsafe {
        return IOleCache2_UpdateCache_Proxy(
            This,
            pDataObject,
            grfUpdf,
            pReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleCache2_UpdateCache_Stub(
    This: *mut IOleCache2,
    pDataObject:  LPDATAOBJECT,
    grfUpdf:  DWORD,
    pReserved:  LONG_PTR    
) ->  HRESULT
{
    unsafe {
        return IOleCache2_UpdateCache_Stub(
            This,
            pDataObject,
            grfUpdf,
            pReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    This: *mut IOleInPlaceActiveObject,
    lpmsg:  LPMSG    
) ->  HRESULT
{
    unsafe {
        return IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
            This,
            lpmsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleInPlaceActiveObject_TranslateAccelerator_Stub(
    This: *mut IOleInPlaceActiveObject    
) ->  HRESULT
{
    unsafe {
        return IOleInPlaceActiveObject_TranslateAccelerator_Stub(
            This
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleInPlaceActiveObject_ResizeBorder_Proxy(
    This: *mut IOleInPlaceActiveObject,
    prcBorder:  LPCRECT,
    pUIWindow: *mut IOleInPlaceUIWindow,
    fFrameWindow:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IOleInPlaceActiveObject_ResizeBorder_Proxy(
            This,
            prcBorder,
            pUIWindow,
            fFrameWindow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IOleInPlaceActiveObject_ResizeBorder_Stub(
    This: *mut IOleInPlaceActiveObject,
    prcBorder:  LPCRECT,
    riid: *const IID,
    pUIWindow: *mut IOleInPlaceUIWindow,
    fFrameWindow:  BOOL    
) ->  HRESULT
{
    unsafe {
        return IOleInPlaceActiveObject_ResizeBorder_Stub(
            This,
            prcBorder,
            riid,
            pUIWindow,
            fFrameWindow
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_Draw_Proxy(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect: *mut c_void,
    ptd: *mut DVTARGETDEVICE,
    hdcTargetDev:  HDC,
    hdcDraw:  HDC,
    lprcBounds:  LPCRECTL,
    lprcWBounds:  LPCRECTL,
    pfnContinue:  Option,
    dwContinue:  ULONG_PTR    
) ->  HRESULT
{
    unsafe {
        return IViewObject_Draw_Proxy(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            ptd,
            hdcTargetDev,
            hdcDraw,
            lprcBounds,
            lprcWBounds,
            pfnContinue,
            dwContinue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_Draw_Stub(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect:  ULONG_PTR,
    ptd: *mut DVTARGETDEVICE,
    hdcTargetDev:  HDC,
    hdcDraw:  HDC,
    lprcBounds:  LPCRECTL,
    lprcWBounds:  LPCRECTL,
    pContinue: *mut IContinue    
) ->  HRESULT
{
    unsafe {
        return IViewObject_Draw_Stub(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            ptd,
            hdcTargetDev,
            hdcDraw,
            lprcBounds,
            lprcWBounds,
            pContinue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_GetColorSet_Proxy(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect: *mut c_void,
    ptd: *mut DVTARGETDEVICE,
    hicTargetDev:  HDC,
    ppColorSet: *mut *mut LOGPALETTE    
) ->  HRESULT
{
    unsafe {
        return IViewObject_GetColorSet_Proxy(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            ptd,
            hicTargetDev,
            ppColorSet
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_GetColorSet_Stub(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect:  ULONG_PTR,
    ptd: *mut DVTARGETDEVICE,
    hicTargetDev:  ULONG_PTR,
    ppColorSet: *mut *mut LOGPALETTE    
) ->  HRESULT
{
    unsafe {
        return IViewObject_GetColorSet_Stub(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            ptd,
            hicTargetDev,
            ppColorSet
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_Freeze_Proxy(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect: *mut c_void,
    pdwFreeze: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IViewObject_Freeze_Proxy(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            pdwFreeze
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_Freeze_Stub(
    This: *mut IViewObject,
    dwDrawAspect:  DWORD,
    lindex:  LONG,
    pvAspect:  ULONG_PTR,
    pdwFreeze: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IViewObject_Freeze_Stub(
            This,
            dwDrawAspect,
            lindex,
            pvAspect,
            pdwFreeze
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_GetAdvise_Proxy(
    This: *mut IViewObject,
    pAspects: *mut DWORD,
    pAdvf: *mut DWORD,
    ppAdvSink: *mut *mut IAdviseSink    
) ->  HRESULT
{
    unsafe {
        return IViewObject_GetAdvise_Proxy(
            This,
            pAspects,
            pAdvf,
            ppAdvSink
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IViewObject_GetAdvise_Stub(
    This: *mut IViewObject,
    pAspects: *mut DWORD,
    pAdvf: *mut DWORD,
    ppAdvSink: *mut *mut IAdviseSink    
) ->  HRESULT
{
    unsafe {
        return IViewObject_GetAdvise_Stub(
            This,
            pAspects,
            pAdvf,
            ppAdvSink
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumOLEVERB_Next_Proxy(
    This: *mut IEnumOLEVERB,
    celt:  ULONG,
    rgelt:  LPOLEVERB,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumOLEVERB_Next_Proxy(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEnumOLEVERB_Next_Stub(
    This: *mut IEnumOLEVERB,
    celt:  ULONG,
    rgelt:  LPOLEVERB,
    pceltFetched: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return IEnumOLEVERB_Next_Stub(
            This,
            celt,
            rgelt,
            pceltFetched
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IServiceProvider_RemoteQueryService_Proxy(
    This: *mut IServiceProvider,
    guidService: *const GUID,
    riid: *const IID,
    ppvObject: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IServiceProvider_RemoteQueryService_Proxy(
            This,
            guidService,
            riid,
            ppvObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IServiceProvider_RemoteQueryService_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IServiceProvider_RemoteQueryService_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IServiceProvider_QueryService_Proxy(
    This: *mut IServiceProvider,
    guidService: *const GUID,
    riid: *const IID,
    ppvObject: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return IServiceProvider_QueryService_Proxy(
            This,
            guidService,
            riid,
            ppvObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IServiceProvider_QueryService_Stub(
    This: *mut IServiceProvider,
    guidService: *const GUID,
    riid: *const IID,
    ppvObject: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IServiceProvider_QueryService_Stub(
            This,
            guidService,
            riid,
            ppvObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateURLMoniker(
    pMkCtx:  LPMONIKER,
    szURL:  LPCWSTR,
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return CreateURLMoniker(
            pMkCtx,
            szURL,
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateURLMonikerEx(
    pMkCtx:  LPMONIKER,
    szURL:  LPCWSTR,
    ppmk: *mut LPMONIKER,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CreateURLMonikerEx(
            pMkCtx,
            szURL,
            ppmk,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassURL(
    szURL:  LPCWSTR,
    pClsID: *mut CLSID    
) ->  HRESULT
{
    unsafe {
        return GetClassURL(
            szURL,
            pClsID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateAsyncBindCtx(
    reserved:  DWORD,
    pBSCb: *mut IBindStatusCallback,
    pEFetc: *mut IEnumFORMATETC,
    ppBC: *mut *mut IBindCtx    
) ->  HRESULT
{
    unsafe {
        return CreateAsyncBindCtx(
            reserved,
            pBSCb,
            pEFetc,
            ppBC
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateURLMonikerEx2(
    pMkCtx:  LPMONIKER,
    pUri: *mut IUri,
    ppmk: *mut LPMONIKER,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CreateURLMonikerEx2(
            pMkCtx,
            pUri,
            ppmk,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateAsyncBindCtxEx(
    pbc: *mut IBindCtx,
    dwOptions:  DWORD,
    pBSCb: *mut IBindStatusCallback,
    pEnum: *mut IEnumFORMATETC,
    ppBC: *mut *mut IBindCtx,
    reserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CreateAsyncBindCtxEx(
            pbc,
            dwOptions,
            pBSCb,
            pEnum,
            ppBC,
            reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_MkParseDisplayNameEx(
    pbc: *mut IBindCtx,
    szDisplayName:  LPCWSTR,
    pchEaten: *mut ULONG,
    ppmk: *mut LPMONIKER    
) ->  HRESULT
{
    unsafe {
        return MkParseDisplayNameEx(
            pbc,
            szDisplayName,
            pchEaten,
            ppmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterBindStatusCallback(
    pBC:  LPBC,
    pBSCb: *mut IBindStatusCallback,
    ppBSCBPrev: *mut *mut IBindStatusCallback,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return RegisterBindStatusCallback(
            pBC,
            pBSCb,
            ppBSCBPrev,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RevokeBindStatusCallback(
    pBC:  LPBC,
    pBSCb: *mut IBindStatusCallback    
) ->  HRESULT
{
    unsafe {
        return RevokeBindStatusCallback(
            pBC,
            pBSCb
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetClassFileOrMime(
    pBC:  LPBC,
    szFilename:  LPCWSTR,
    pBuffer:  LPVOID,
    cbSize:  DWORD,
    szMime:  LPCWSTR,
    dwReserved:  DWORD,
    pclsid: *mut CLSID    
) ->  HRESULT
{
    unsafe {
        return GetClassFileOrMime(
            pBC,
            szFilename,
            pBuffer,
            cbSize,
            szMime,
            dwReserved,
            pclsid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsValidURL(
    pBC:  LPBC,
    szURL:  LPCWSTR,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return IsValidURL(
            pBC,
            szURL,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoGetClassObjectFromURL(
    rCLASSID: *const IID,
    szCODE:  LPCWSTR,
    dwFileVersionMS:  DWORD,
    dwFileVersionLS:  DWORD,
    szTYPE:  LPCWSTR,
    pBindCtx:  LPBINDCTX,
    dwClsContext:  DWORD,
    pvReserved:  LPVOID,
    riid: *const IID,
    ppv: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return CoGetClassObjectFromURL(
            rCLASSID,
            szCODE,
            dwFileVersionMS,
            dwFileVersionLS,
            szTYPE,
            pBindCtx,
            dwClsContext,
            pvReserved,
            riid,
            ppv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEInstallScope(
    pdwScope:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return IEInstallScope(
            pdwScope
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FaultInIEFeature(
    hWnd:  HWND,
    pClassSpec: *mut uCLSSPEC,
    pQuery: *mut QUERYCONTEXT,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return FaultInIEFeature(
            hWnd,
            pClassSpec,
            pQuery,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetComponentIDFromCLSSPEC(
    pClassspec: *mut uCLSSPEC,
    ppszComponentID: *mut LPSTR    
) ->  HRESULT
{
    unsafe {
        return GetComponentIDFromCLSSPEC(
            pClassspec,
            ppszComponentID
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsAsyncMoniker(
    pmk: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return IsAsyncMoniker(
            pmk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateURLBinding(
    lpszUrl:  LPCWSTR,
    pbc: *mut IBindCtx,
    ppBdg: *mut *mut IBinding    
) ->  HRESULT
{
    unsafe {
        return CreateURLBinding(
            lpszUrl,
            pbc,
            ppBdg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterMediaTypes(
    ctypes:  UINT,
    rgszTypes: *const LPCSTR,
    rgcfTypes: *mut CLIPFORMAT    
) ->  HRESULT
{
    unsafe {
        return RegisterMediaTypes(
            ctypes,
            rgszTypes,
            rgcfTypes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindMediaType(
    rgszTypes:  LPCSTR,
    rgcfTypes: *mut CLIPFORMAT    
) ->  HRESULT
{
    unsafe {
        return FindMediaType(
            rgszTypes,
            rgcfTypes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateFormatEnumerator(
    cfmtetc:  UINT,
    rgfmtetc: *mut FORMATETC,
    ppenumfmtetc: *mut *mut IEnumFORMATETC    
) ->  HRESULT
{
    unsafe {
        return CreateFormatEnumerator(
            cfmtetc,
            rgfmtetc,
            ppenumfmtetc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterFormatEnumerator(
    pBC:  LPBC,
    pEFetc: *mut IEnumFORMATETC,
    reserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return RegisterFormatEnumerator(
            pBC,
            pEFetc,
            reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RevokeFormatEnumerator(
    pBC:  LPBC,
    pEFetc: *mut IEnumFORMATETC    
) ->  HRESULT
{
    unsafe {
        return RevokeFormatEnumerator(
            pBC,
            pEFetc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterMediaTypeClass(
    pBC:  LPBC,
    ctypes:  UINT,
    rgszTypes: *const LPCSTR,
    rgclsID: *mut CLSID,
    reserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return RegisterMediaTypeClass(
            pBC,
            ctypes,
            rgszTypes,
            rgclsID,
            reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindMediaTypeClass(
    pBC:  LPBC,
    szType:  LPCSTR,
    pclsID: *mut CLSID,
    reserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return FindMediaTypeClass(
            pBC,
            szType,
            pclsID,
            reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UrlMkSetSessionOption(
    dwOption:  DWORD,
    pBuffer:  LPVOID,
    dwBufferLength:  DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return UrlMkSetSessionOption(
            dwOption,
            pBuffer,
            dwBufferLength,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UrlMkGetSessionOption(
    dwOption:  DWORD,
    pBuffer:  LPVOID,
    dwBufferLength:  DWORD,
    pdwBufferLengthOut: *mut DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return UrlMkGetSessionOption(
            dwOption,
            pBuffer,
            dwBufferLength,
            pdwBufferLengthOut,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindMimeFromData(
    pBC:  LPBC,
    pwzUrl:  LPCWSTR,
    pBuffer:  LPVOID,
    cbSize:  DWORD,
    pwzMimeProposed:  LPCWSTR,
    dwMimeFlags:  DWORD,
    ppwzMimeOut: *mut LPWSTR,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return FindMimeFromData(
            pBC,
            pwzUrl,
            pBuffer,
            cbSize,
            pwzMimeProposed,
            dwMimeFlags,
            ppwzMimeOut,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ObtainUserAgentString(
    dwOption:  DWORD,
    pszUAOut:  LPSTR,
    cbSize: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return ObtainUserAgentString(
            dwOption,
            pszUAOut,
            cbSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CompareSecurityIds(
    pbSecurityId1: *mut BYTE,
    dwLen1:  DWORD,
    pbSecurityId2: *mut BYTE,
    dwLen2:  DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CompareSecurityIds(
            pbSecurityId1,
            dwLen1,
            pbSecurityId2,
            dwLen2,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CompatFlagsFromClsid(
    pclsid: *mut CLSID,
    pdwCompatFlags:  LPDWORD,
    pdwMiscStatusFlags:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return CompatFlagsFromClsid(
            pclsid,
            pdwCompatFlags,
            pdwMiscStatusFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetAccessForIEAppContainer(
    hObject:  HANDLE,
    ieObjectType:  IEObjectType,
    dwAccessMask:  DWORD    
) ->  HRESULT
{
    unsafe {
        return SetAccessForIEAppContainer(
            hObject,
            ieObjectType,
            dwAccessMask
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBinding_RemoteGetBindResult_Proxy(
    This: *mut IBinding,
    pclsidProtocol: *mut CLSID,
    pdwResult: *mut DWORD,
    pszResult: *mut LPOLESTR,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return IBinding_RemoteGetBindResult_Proxy(
            This,
            pclsidProtocol,
            pdwResult,
            pszResult,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBinding_RemoteGetBindResult_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IBinding_RemoteGetBindResult_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallback_RemoteGetBindInfo_Proxy(
    This: *mut IBindStatusCallback,
    grfBINDF: *mut DWORD,
    pbindinfo: *mut RemBINDINFO,
    pstgmed: *mut RemSTGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallback_RemoteGetBindInfo_Proxy(
            This,
            grfBINDF,
            pbindinfo,
            pstgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallback_RemoteGetBindInfo_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IBindStatusCallback_RemoteGetBindInfo_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallback_RemoteOnDataAvailable_Proxy(
    This: *mut IBindStatusCallback,
    grfBSCF:  DWORD,
    dwSize:  DWORD,
    pformatetc: *mut RemFORMATETC,
    pstgmed: *mut RemSTGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallback_RemoteOnDataAvailable_Proxy(
            This,
            grfBSCF,
            dwSize,
            pformatetc,
            pstgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallback_RemoteOnDataAvailable_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IBindStatusCallback_RemoteOnDataAvailable_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
    This: *mut IBindStatusCallbackEx,
    grfBINDF: *mut DWORD,
    pbindinfo: *mut RemBINDINFO,
    pstgmed: *mut RemSTGMEDIUM,
    grfBINDF2: *mut DWORD,
    pdwReserved: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(
            This,
            grfBINDF,
            pbindinfo,
            pstgmed,
            grfBINDF2,
            pdwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateUri(
    pwzURI:  LPCWSTR,
    dwFlags:  DWORD,
    dwReserved:  DWORD_PTR,
    ppURI: *mut *mut IUri    
) ->  HRESULT
{
    unsafe {
        return CreateUri(
            pwzURI,
            dwFlags,
            dwReserved,
            ppURI
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateUriWithFragment(
    pwzURI:  LPCWSTR,
    pwzFragment:  LPCWSTR,
    dwFlags:  DWORD,
    dwReserved:  DWORD_PTR,
    ppURI: *mut *mut IUri    
) ->  HRESULT
{
    unsafe {
        return CreateUriWithFragment(
            pwzURI,
            pwzFragment,
            dwFlags,
            dwReserved,
            ppURI
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateUriFromMultiByteString(
    pszANSIInputUri:  LPCSTR,
    dwEncodingFlags:  DWORD,
    dwCodePage:  DWORD,
    dwCreateFlags:  DWORD,
    dwReserved:  DWORD_PTR,
    ppUri: *mut *mut IUri    
) ->  HRESULT
{
    unsafe {
        return CreateUriFromMultiByteString(
            pszANSIInputUri,
            dwEncodingFlags,
            dwCodePage,
            dwCreateFlags,
            dwReserved,
            ppUri
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateIUriBuilder(
    pIUri: *mut IUri,
    dwFlags:  DWORD,
    dwReserved:  DWORD_PTR,
    ppIUriBuilder: *mut *mut IUriBuilder    
) ->  HRESULT
{
    unsafe {
        return CreateIUriBuilder(
            pIUri,
            dwFlags,
            dwReserved,
            ppIUriBuilder
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IWinInetInfo_RemoteQueryOption_Proxy(
    This: *mut IWinInetInfo,
    dwOption:  DWORD,
    pBuffer: *mut BYTE,
    pcbBuf: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IWinInetInfo_RemoteQueryOption_Proxy(
            This,
            dwOption,
            pBuffer,
            pcbBuf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IWinInetInfo_RemoteQueryOption_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IWinInetInfo_RemoteQueryOption_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IWinInetHttpInfo_RemoteQueryInfo_Proxy(
    This: *mut IWinInetHttpInfo,
    dwOption:  DWORD,
    pBuffer: *mut BYTE,
    pcbBuf: *mut DWORD,
    pdwFlags: *mut DWORD,
    pdwReserved: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IWinInetHttpInfo_RemoteQueryInfo_Proxy(
            This,
            dwOption,
            pBuffer,
            pcbBuf,
            pdwFlags,
            pdwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IWinInetHttpInfo_RemoteQueryInfo_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IWinInetHttpInfo_RemoteQueryInfo_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindHost_RemoteMonikerBindToStorage_Proxy(
    This: *mut IBindHost,
    pMk: *mut IMoniker,
    pBC: *mut IBindCtx,
    pBSC: *mut IBindStatusCallback,
    riid: *const IID,
    ppvObj: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IBindHost_RemoteMonikerBindToStorage_Proxy(
            This,
            pMk,
            pBC,
            pBSC,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindHost_RemoteMonikerBindToStorage_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IBindHost_RemoteMonikerBindToStorage_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindHost_RemoteMonikerBindToObject_Proxy(
    This: *mut IBindHost,
    pMk: *mut IMoniker,
    pBC: *mut IBindCtx,
    pBSC: *mut IBindStatusCallback,
    riid: *const IID,
    ppvObj: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IBindHost_RemoteMonikerBindToObject_Proxy(
            This,
            pMk,
            pBC,
            pBSC,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindHost_RemoteMonikerBindToObject_Stub(
    This: *mut IRpcStubBuffer,
    _pRpcChannelBuffer: *mut IRpcChannelBuffer,
    _pRpcMessage:  PRPC_MESSAGE,
    _pdwStubPhase: *mut DWORD    
)
{
    unsafe {
        return IBindHost_RemoteMonikerBindToObject_Stub(
            This,
            _pRpcChannelBuffer,
            _pRpcMessage,
            _pdwStubPhase
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HlinkSimpleNavigateToString(
    szTarget:  LPCWSTR,
    szLocation:  LPCWSTR,
    szTargetFrameName:  LPCWSTR,
    pUnk: *mut IUnknown,
    pbc: *mut IBindCtx,
    arg1: *mut IBindStatusCallback,
    grfHLNF:  DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return HlinkSimpleNavigateToString(
            szTarget,
            szLocation,
            szTargetFrameName,
            pUnk,
            pbc,
            arg1,
            grfHLNF,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HlinkSimpleNavigateToMoniker(
    pmkTarget: *mut IMoniker,
    szLocation:  LPCWSTR,
    szTargetFrameName:  LPCWSTR,
    pUnk: *mut IUnknown,
    pbc: *mut IBindCtx,
    arg1: *mut IBindStatusCallback,
    grfHLNF:  DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return HlinkSimpleNavigateToMoniker(
            pmkTarget,
            szLocation,
            szTargetFrameName,
            pUnk,
            pbc,
            arg1,
            grfHLNF,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLOpenStreamA(
    arg1:  LPUNKNOWN,
    arg2:  LPCSTR,
    arg3:  DWORD,
    arg4:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLOpenStreamA(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLOpenStreamW(
    arg1:  LPUNKNOWN,
    arg2:  LPCWSTR,
    arg3:  DWORD,
    arg4:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLOpenStreamW(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLOpenPullStreamA(
    arg1:  LPUNKNOWN,
    arg2:  LPCSTR,
    arg3:  DWORD,
    arg4:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLOpenPullStreamA(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLOpenPullStreamW(
    arg1:  LPUNKNOWN,
    arg2:  LPCWSTR,
    arg3:  DWORD,
    arg4:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLOpenPullStreamW(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLDownloadToFileA(
    arg1:  LPUNKNOWN,
    arg2:  LPCSTR,
    arg3:  LPCSTR,
    arg4:  DWORD,
    arg5:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLDownloadToFileA(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLDownloadToFileW(
    arg1:  LPUNKNOWN,
    arg2:  LPCWSTR,
    arg3:  LPCWSTR,
    arg4:  DWORD,
    arg5:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLDownloadToFileW(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLDownloadToCacheFileA(
    arg1:  LPUNKNOWN,
    arg2:  LPCSTR,
    arg3:  LPSTR,
    cchFileName:  DWORD,
    arg4:  DWORD,
    arg5:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLDownloadToCacheFileA(
            arg1,
            arg2,
            arg3,
            cchFileName,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLDownloadToCacheFileW(
    arg1:  LPUNKNOWN,
    arg2:  LPCWSTR,
    arg3:  LPWSTR,
    cchFileName:  DWORD,
    arg4:  DWORD,
    arg5:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLDownloadToCacheFileW(
            arg1,
            arg2,
            arg3,
            cchFileName,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLOpenBlockingStreamA(
    arg1:  LPUNKNOWN,
    arg2:  LPCSTR,
    arg3: *mut LPSTREAM,
    arg4:  DWORD,
    arg5:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLOpenBlockingStreamA(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_URLOpenBlockingStreamW(
    arg1:  LPUNKNOWN,
    arg2:  LPCWSTR,
    arg3: *mut LPSTREAM,
    arg4:  DWORD,
    arg5:  LPBINDSTATUSCALLBACK    
) ->  HRESULT
{
    unsafe {
        return URLOpenBlockingStreamW(
            arg1,
            arg2,
            arg3,
            arg4,
            arg5
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HlinkGoBack(
    pUnk: *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return HlinkGoBack(
            pUnk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HlinkGoForward(
    pUnk: *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return HlinkGoForward(
            pUnk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HlinkNavigateString(
    pUnk: *mut IUnknown,
    szTarget:  LPCWSTR    
) ->  HRESULT
{
    unsafe {
        return HlinkNavigateString(
            pUnk,
            szTarget
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_HlinkNavigateMoniker(
    pUnk: *mut IUnknown,
    pmkTarget: *mut IMoniker    
) ->  HRESULT
{
    unsafe {
        return HlinkNavigateMoniker(
            pUnk,
            pmkTarget
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetParseUrl(
    pwzUrl:  LPCWSTR,
    ParseAction:  PARSEACTION,
    dwFlags:  DWORD,
    pszResult:  LPWSTR,
    cchResult:  DWORD,
    pcchResult: *mut DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetParseUrl(
            pwzUrl,
            ParseAction,
            dwFlags,
            pszResult,
            cchResult,
            pcchResult,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetParseIUri(
    pIUri: *mut IUri,
    ParseAction:  PARSEACTION,
    dwFlags:  DWORD,
    pwzResult:  LPWSTR,
    cchResult:  DWORD,
    pcchResult: *mut DWORD,
    dwReserved:  DWORD_PTR    
) ->  HRESULT
{
    unsafe {
        return CoInternetParseIUri(
            pIUri,
            ParseAction,
            dwFlags,
            pwzResult,
            cchResult,
            pcchResult,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetCombineUrl(
    pwzBaseUrl:  LPCWSTR,
    pwzRelativeUrl:  LPCWSTR,
    dwCombineFlags:  DWORD,
    pszResult:  LPWSTR,
    cchResult:  DWORD,
    pcchResult: *mut DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetCombineUrl(
            pwzBaseUrl,
            pwzRelativeUrl,
            dwCombineFlags,
            pszResult,
            cchResult,
            pcchResult,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetCombineUrlEx(
    pBaseUri: *mut IUri,
    pwzRelativeUrl:  LPCWSTR,
    dwCombineFlags:  DWORD,
    ppCombinedUri: *mut *mut IUri,
    dwReserved:  DWORD_PTR    
) ->  HRESULT
{
    unsafe {
        return CoInternetCombineUrlEx(
            pBaseUri,
            pwzRelativeUrl,
            dwCombineFlags,
            ppCombinedUri,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetCombineIUri(
    pBaseUri: *mut IUri,
    pRelativeUri: *mut IUri,
    dwCombineFlags:  DWORD,
    ppCombinedUri: *mut *mut IUri,
    dwReserved:  DWORD_PTR    
) ->  HRESULT
{
    unsafe {
        return CoInternetCombineIUri(
            pBaseUri,
            pRelativeUri,
            dwCombineFlags,
            ppCombinedUri,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetCompareUrl(
    pwzUrl1:  LPCWSTR,
    pwzUrl2:  LPCWSTR,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetCompareUrl(
            pwzUrl1,
            pwzUrl2,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetGetProtocolFlags(
    pwzUrl:  LPCWSTR,
    pdwFlags: *mut DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetGetProtocolFlags(
            pwzUrl,
            pdwFlags,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetQueryInfo(
    pwzUrl:  LPCWSTR,
    QueryOptions:  QUERYOPTION,
    dwQueryFlags:  DWORD,
    pvBuffer:  LPVOID,
    cbBuffer:  DWORD,
    pcbBuffer: *mut DWORD,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetQueryInfo(
            pwzUrl,
            QueryOptions,
            dwQueryFlags,
            pvBuffer,
            cbBuffer,
            pcbBuffer,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetGetSession(
    dwSessionMode:  DWORD,
    ppIInternetSession: *mut *mut IInternetSession,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetGetSession(
            dwSessionMode,
            ppIInternetSession,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetGetSecurityUrl(
    pwszUrl:  LPCWSTR,
    ppwszSecUrl: *mut LPWSTR,
    psuAction:  PSUACTION,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetGetSecurityUrl(
            pwszUrl,
            ppwszSecUrl,
            psuAction,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_AsyncInstallDistributionUnit(
    szDistUnit:  LPCWSTR,
    szTYPE:  LPCWSTR,
    szExt:  LPCWSTR,
    dwFileVersionMS:  DWORD,
    dwFileVersionLS:  DWORD,
    szURL:  LPCWSTR,
    pbc: *mut IBindCtx,
    pvReserved:  LPVOID,
    flags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return AsyncInstallDistributionUnit(
            szDistUnit,
            szTYPE,
            szExt,
            dwFileVersionMS,
            dwFileVersionLS,
            szURL,
            pbc,
            pvReserved,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetGetSecurityUrlEx(
    pUri: *mut IUri,
    ppSecUri: *mut *mut IUri,
    psuAction:  PSUACTION,
    dwReserved:  DWORD_PTR    
) ->  HRESULT
{
    unsafe {
        return CoInternetGetSecurityUrlEx(
            pUri,
            ppSecUri,
            psuAction,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetSetFeatureEnabled(
    FeatureEntry:  INTERNETFEATURELIST,
    dwFlags:  DWORD,
    fEnable:  BOOL    
) ->  HRESULT
{
    unsafe {
        return CoInternetSetFeatureEnabled(
            FeatureEntry,
            dwFlags,
            fEnable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetIsFeatureEnabled(
    FeatureEntry:  INTERNETFEATURELIST,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetIsFeatureEnabled(
            FeatureEntry,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetIsFeatureEnabledForUrl(
    FeatureEntry:  INTERNETFEATURELIST,
    dwFlags:  DWORD,
    szURL:  LPCWSTR,
    pSecMgr: *mut IInternetSecurityManager    
) ->  HRESULT
{
    unsafe {
        return CoInternetIsFeatureEnabledForUrl(
            FeatureEntry,
            dwFlags,
            szURL,
            pSecMgr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetIsFeatureEnabledForIUri(
    FeatureEntry:  INTERNETFEATURELIST,
    dwFlags:  DWORD,
    pIUri: *mut IUri,
    pSecMgr: *mut IInternetSecurityManagerEx2    
) ->  HRESULT
{
    unsafe {
        return CoInternetIsFeatureEnabledForIUri(
            FeatureEntry,
            dwFlags,
            pIUri,
            pSecMgr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetIsFeatureZoneElevationEnabled(
    szFromURL:  LPCWSTR,
    szToURL:  LPCWSTR,
    pSecMgr: *mut IInternetSecurityManager,
    dwFlags:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetIsFeatureZoneElevationEnabled(
            szFromURL,
            szToURL,
            pSecMgr,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyStgMedium(
    pcstgmedSrc: *const STGMEDIUM,
    pstgmedDest: *mut STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return CopyStgMedium(
            pcstgmedSrc,
            pstgmedDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CopyBindInfo(
    pcbiSrc: *const BINDINFO,
    pbiDest: *mut BINDINFO    
) ->  HRESULT
{
    unsafe {
        return CopyBindInfo(
            pcbiSrc,
            pbiDest
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseBindInfo(
    pbindinfo: *mut BINDINFO    
)
{
    unsafe {
        return ReleaseBindInfo(
            pbindinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IEGetUserPrivateNamespaceName(
    
) ->  PWSTR
{
    unsafe {
        return IEGetUserPrivateNamespaceName(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetCreateSecurityManager(
    pSP: *mut IServiceProvider,
    ppSM: *mut *mut IInternetSecurityManager,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetCreateSecurityManager(
            pSP,
            ppSM,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CoInternetCreateZoneManager(
    pSP: *mut IServiceProvider,
    ppZM: *mut *mut IInternetZoneManager,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return CoInternetCreateZoneManager(
            pSP,
            ppZM,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSoftwareUpdateInfo(
    szDistUnit:  LPCWSTR,
    psdi:  LPSOFTDISTINFO    
) ->  HRESULT
{
    unsafe {
        return GetSoftwareUpdateInfo(
            szDistUnit,
            psdi
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetSoftwareUpdateAdvertisementState(
    szDistUnit:  LPCWSTR,
    dwAdState:  DWORD,
    dwAdvertisedVersionMS:  DWORD,
    dwAdvertisedVersionLS:  DWORD    
) ->  HRESULT
{
    unsafe {
        return SetSoftwareUpdateAdvertisementState(
            szDistUnit,
            dwAdState,
            dwAdvertisedVersionMS,
            dwAdvertisedVersionLS
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsLoggingEnabledA(
    pszUrl:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return IsLoggingEnabledA(
            pszUrl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsLoggingEnabledW(
    pwszUrl:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return IsLoggingEnabledW(
            pwszUrl
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteHitLogging(
    lpLogginginfo:  LPHIT_LOGGING_INFO    
) ->  BOOL
{
    unsafe {
        return WriteHitLogging(
            lpLogginginfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBinding_GetBindResult_Proxy(
    This: *mut IBinding,
    pclsidProtocol: *mut CLSID,
    pdwResult: *mut DWORD,
    pszResult: *mut LPOLESTR,
    pdwReserved: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IBinding_GetBindResult_Proxy(
            This,
            pclsidProtocol,
            pdwResult,
            pszResult,
            pdwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBinding_GetBindResult_Stub(
    This: *mut IBinding,
    pclsidProtocol: *mut CLSID,
    pdwResult: *mut DWORD,
    pszResult: *mut LPOLESTR,
    dwReserved:  DWORD    
) ->  HRESULT
{
    unsafe {
        return IBinding_GetBindResult_Stub(
            This,
            pclsidProtocol,
            pdwResult,
            pszResult,
            dwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallback_GetBindInfo_Proxy(
    This: *mut IBindStatusCallback,
    grfBINDF: *mut DWORD,
    pbindinfo: *mut BINDINFO    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallback_GetBindInfo_Proxy(
            This,
            grfBINDF,
            pbindinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallback_GetBindInfo_Stub(
    This: *mut IBindStatusCallback,
    grfBINDF: *mut DWORD,
    pbindinfo: *mut RemBINDINFO,
    pstgmed: *mut RemSTGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallback_GetBindInfo_Stub(
            This,
            grfBINDF,
            pbindinfo,
            pstgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallback_OnDataAvailable_Proxy(
    This: *mut IBindStatusCallback,
    grfBSCF:  DWORD,
    dwSize:  DWORD,
    pformatetc: *mut FORMATETC,
    pstgmed: *mut STGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallback_OnDataAvailable_Proxy(
            This,
            grfBSCF,
            dwSize,
            pformatetc,
            pstgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallback_OnDataAvailable_Stub(
    This: *mut IBindStatusCallback,
    grfBSCF:  DWORD,
    dwSize:  DWORD,
    pformatetc: *mut RemFORMATETC,
    pstgmed: *mut RemSTGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallback_OnDataAvailable_Stub(
            This,
            grfBSCF,
            dwSize,
            pformatetc,
            pstgmed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallbackEx_GetBindInfoEx_Proxy(
    This: *mut IBindStatusCallbackEx,
    grfBINDF: *mut DWORD,
    pbindinfo: *mut BINDINFO,
    grfBINDF2: *mut DWORD,
    pdwReserved: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallbackEx_GetBindInfoEx_Proxy(
            This,
            grfBINDF,
            pbindinfo,
            grfBINDF2,
            pdwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindStatusCallbackEx_GetBindInfoEx_Stub(
    This: *mut IBindStatusCallbackEx,
    grfBINDF: *mut DWORD,
    pbindinfo: *mut RemBINDINFO,
    pstgmed: *mut RemSTGMEDIUM,
    grfBINDF2: *mut DWORD,
    pdwReserved: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IBindStatusCallbackEx_GetBindInfoEx_Stub(
            This,
            grfBINDF,
            pbindinfo,
            pstgmed,
            grfBINDF2,
            pdwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IWinInetInfo_QueryOption_Proxy(
    This: *mut IWinInetInfo,
    dwOption:  DWORD,
    pBuffer:  LPVOID,
    pcbBuf: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IWinInetInfo_QueryOption_Proxy(
            This,
            dwOption,
            pBuffer,
            pcbBuf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IWinInetInfo_QueryOption_Stub(
    This: *mut IWinInetInfo,
    dwOption:  DWORD,
    pBuffer: *mut BYTE,
    pcbBuf: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IWinInetInfo_QueryOption_Stub(
            This,
            dwOption,
            pBuffer,
            pcbBuf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IWinInetHttpInfo_QueryInfo_Proxy(
    This: *mut IWinInetHttpInfo,
    dwOption:  DWORD,
    pBuffer:  LPVOID,
    pcbBuf: *mut DWORD,
    pdwFlags: *mut DWORD,
    pdwReserved: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IWinInetHttpInfo_QueryInfo_Proxy(
            This,
            dwOption,
            pBuffer,
            pcbBuf,
            pdwFlags,
            pdwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IWinInetHttpInfo_QueryInfo_Stub(
    This: *mut IWinInetHttpInfo,
    dwOption:  DWORD,
    pBuffer: *mut BYTE,
    pcbBuf: *mut DWORD,
    pdwFlags: *mut DWORD,
    pdwReserved: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return IWinInetHttpInfo_QueryInfo_Stub(
            This,
            dwOption,
            pBuffer,
            pcbBuf,
            pdwFlags,
            pdwReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindHost_MonikerBindToStorage_Proxy(
    This: *mut IBindHost,
    pMk: *mut IMoniker,
    pBC: *mut IBindCtx,
    pBSC: *mut IBindStatusCallback,
    riid: *const IID,
    ppvObj: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return IBindHost_MonikerBindToStorage_Proxy(
            This,
            pMk,
            pBC,
            pBSC,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindHost_MonikerBindToStorage_Stub(
    This: *mut IBindHost,
    pMk: *mut IMoniker,
    pBC: *mut IBindCtx,
    pBSC: *mut IBindStatusCallback,
    riid: *const IID,
    ppvObj: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IBindHost_MonikerBindToStorage_Stub(
            This,
            pMk,
            pBC,
            pBSC,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindHost_MonikerBindToObject_Proxy(
    This: *mut IBindHost,
    pMk: *mut IMoniker,
    pBC: *mut IBindCtx,
    pBSC: *mut IBindStatusCallback,
    riid: *const IID,
    ppvObj: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return IBindHost_MonikerBindToObject_Proxy(
            This,
            pMk,
            pBC,
            pBSC,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IBindHost_MonikerBindToObject_Stub(
    This: *mut IBindHost,
    pMk: *mut IMoniker,
    pBC: *mut IBindCtx,
    pBSC: *mut IBindStatusCallback,
    riid: *const IID,
    ppvObj: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return IBindHost_MonikerBindToObject_Stub(
            This,
            pMk,
            pBC,
            pBSC,
            riid,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StgConvertVariantToProperty(
    pvar: *const PROPVARIANT,
    CodePage:  USHORT,
    pprop: *mut SERIALIZEDPROPERTYVALUE,
    pcb: *mut ULONG,
    pid:  PROPID,
    fReserved:  BOOLEAN,
    pcIndirect: *mut ULONG    
) -> *mut SERIALIZEDPROPERTYVALUE
{
    unsafe {
        return StgConvertVariantToProperty(
            pvar,
            CodePage,
            pprop,
            pcb,
            pid,
            fReserved,
            pcIndirect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateStdProgressIndicator(
    hwndParent:  HWND,
    pszTitle:  LPCOLESTR,
    pIbscCaller: *mut IBindStatusCallback,
    ppIbsc: *mut *mut IBindStatusCallback    
) ->  HRESULT
{
    unsafe {
        return CreateStdProgressIndicator(
            hwndParent,
            pszTitle,
            pIbscCaller,
            ppIbsc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysAllocString(
    psz: *const OLECHAR    
) ->  BSTR
{
    unsafe {
        return SysAllocString(
            psz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysReAllocString(
    pbstr: *mut BSTR,
    psz: *const OLECHAR    
) ->  INT
{
    unsafe {
        return SysReAllocString(
            pbstr,
            psz
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysAllocStringLen(
    strIn: *const OLECHAR,
    ui:  UINT    
) ->  BSTR
{
    unsafe {
        return SysAllocStringLen(
            strIn,
            ui
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysReAllocStringLen(
    pbstr: *mut BSTR,
    psz: *const OLECHAR,
    len:  c_uint    
) ->  INT
{
    unsafe {
        return SysReAllocStringLen(
            pbstr,
            psz,
            len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysAddRefString(
    bstrString:  BSTR    
) ->  HRESULT
{
    unsafe {
        return SysAddRefString(
            bstrString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysReleaseString(
    bstrString:  BSTR    
)
{
    unsafe {
        return SysReleaseString(
            bstrString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysFreeString(
    bstrString:  BSTR    
)
{
    unsafe {
        return SysFreeString(
            bstrString
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysStringLen(
    pbstr:  BSTR    
) ->  UINT
{
    unsafe {
        return SysStringLen(
            pbstr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysStringByteLen(
    bstr:  BSTR    
) ->  UINT
{
    unsafe {
        return SysStringByteLen(
            bstr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SysAllocStringByteLen(
    psz:  LPCSTR,
    len:  UINT    
) ->  BSTR
{
    unsafe {
        return SysAllocStringByteLen(
            psz,
            len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DosDateTimeToVariantTime(
    wDosDate:  USHORT,
    wDosTime:  USHORT,
    pvtime: *mut DOUBLE    
) ->  INT
{
    unsafe {
        return DosDateTimeToVariantTime(
            wDosDate,
            wDosTime,
            pvtime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VariantTimeToDosDateTime(
    vtime:  DOUBLE,
    pwDosDate: *mut USHORT,
    pwDosTime: *mut USHORT    
) ->  INT
{
    unsafe {
        return VariantTimeToDosDateTime(
            vtime,
            pwDosDate,
            pwDosTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SystemTimeToVariantTime(
    lpSystemTime:  LPSYSTEMTIME,
    pvtime: *mut DOUBLE    
) ->  INT
{
    unsafe {
        return SystemTimeToVariantTime(
            lpSystemTime,
            pvtime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VariantTimeToSystemTime(
    vtime:  DOUBLE,
    lpSystemTime:  LPSYSTEMTIME    
) ->  INT
{
    unsafe {
        return VariantTimeToSystemTime(
            vtime,
            lpSystemTime
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayAllocDescriptor(
    cDims:  UINT,
    ppsaOut: *mut *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayAllocDescriptor(
            cDims,
            ppsaOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayAllocDescriptorEx(
    vt:  VARTYPE,
    cDims:  UINT,
    ppsaOut: *mut *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayAllocDescriptorEx(
            vt,
            cDims,
            ppsaOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayAllocData(
    psa: *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayAllocData(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayCreate(
    vt:  VARTYPE,
    cDims:  UINT,
    rgsabound: *mut SAFEARRAYBOUND    
) -> *mut SAFEARRAY
{
    unsafe {
        return SafeArrayCreate(
            vt,
            cDims,
            rgsabound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayCreateEx(
    vt:  VARTYPE,
    cDims:  UINT,
    rgsabound: *mut SAFEARRAYBOUND,
    pvExtra:  PVOID    
) -> *mut SAFEARRAY
{
    unsafe {
        return SafeArrayCreateEx(
            vt,
            cDims,
            rgsabound,
            pvExtra
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayCopyData(
    psaSource: *mut SAFEARRAY,
    psaTarget: *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayCopyData(
            psaSource,
            psaTarget
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayReleaseDescriptor(
    psa: *mut SAFEARRAY    
)
{
    unsafe {
        return SafeArrayReleaseDescriptor(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayDestroyDescriptor(
    psa: *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayDestroyDescriptor(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayReleaseData(
    pData:  PVOID    
)
{
    unsafe {
        return SafeArrayReleaseData(
            pData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayDestroyData(
    psa: *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayDestroyData(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayAddRef(
    psa: *mut SAFEARRAY,
    ppDataToRelease: *mut PVOID    
) ->  HRESULT
{
    unsafe {
        return SafeArrayAddRef(
            psa,
            ppDataToRelease
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayDestroy(
    psa: *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayDestroy(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayRedim(
    psa: *mut SAFEARRAY,
    psaboundNew: *mut SAFEARRAYBOUND    
) ->  HRESULT
{
    unsafe {
        return SafeArrayRedim(
            psa,
            psaboundNew
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayGetDim(
    psa: *mut SAFEARRAY    
) ->  UINT
{
    unsafe {
        return SafeArrayGetDim(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayGetElemsize(
    psa: *mut SAFEARRAY    
) ->  UINT
{
    unsafe {
        return SafeArrayGetElemsize(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayGetUBound(
    psa: *mut SAFEARRAY,
    nDim:  UINT,
    plUbound: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return SafeArrayGetUBound(
            psa,
            nDim,
            plUbound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayGetLBound(
    psa: *mut SAFEARRAY,
    nDim:  UINT,
    plLbound: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return SafeArrayGetLBound(
            psa,
            nDim,
            plLbound
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayLock(
    psa: *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayLock(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayUnlock(
    psa: *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayUnlock(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayAccessData(
    psa: *mut SAFEARRAY,
    ppvData: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return SafeArrayAccessData(
            psa,
            ppvData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayUnaccessData(
    psa: *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayUnaccessData(
            psa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayGetElement(
    psa: *mut SAFEARRAY,
    rgIndices: *mut LONG,
    pv: *mut c_void    
) ->  HRESULT
{
    unsafe {
        return SafeArrayGetElement(
            psa,
            rgIndices,
            pv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayPutElement(
    psa: *mut SAFEARRAY,
    rgIndices: *mut LONG,
    pv: *mut c_void    
) ->  HRESULT
{
    unsafe {
        return SafeArrayPutElement(
            psa,
            rgIndices,
            pv
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayCopy(
    psa: *mut SAFEARRAY,
    ppsaOut: *mut *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return SafeArrayCopy(
            psa,
            ppsaOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayPtrOfIndex(
    psa: *mut SAFEARRAY,
    rgIndices: *mut LONG,
    ppvData: *mut *mut c_void    
) ->  HRESULT
{
    unsafe {
        return SafeArrayPtrOfIndex(
            psa,
            rgIndices,
            ppvData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArraySetRecordInfo(
    psa: *mut SAFEARRAY,
    prinfo: *mut IRecordInfo    
) ->  HRESULT
{
    unsafe {
        return SafeArraySetRecordInfo(
            psa,
            prinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayGetRecordInfo(
    psa: *mut SAFEARRAY,
    prinfo: *mut *mut IRecordInfo    
) ->  HRESULT
{
    unsafe {
        return SafeArrayGetRecordInfo(
            psa,
            prinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArraySetIID(
    psa: *mut SAFEARRAY,
    guid: *const GUID    
) ->  HRESULT
{
    unsafe {
        return SafeArraySetIID(
            psa,
            guid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayGetIID(
    psa: *mut SAFEARRAY,
    pguid: *mut GUID    
) ->  HRESULT
{
    unsafe {
        return SafeArrayGetIID(
            psa,
            pguid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayGetVartype(
    psa: *mut SAFEARRAY,
    pvt: *mut VARTYPE    
) ->  HRESULT
{
    unsafe {
        return SafeArrayGetVartype(
            psa,
            pvt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayCreateVector(
    vt:  VARTYPE,
    lLbound:  LONG,
    cElements:  ULONG    
) -> *mut SAFEARRAY
{
    unsafe {
        return SafeArrayCreateVector(
            vt,
            lLbound,
            cElements
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SafeArrayCreateVectorEx(
    vt:  VARTYPE,
    lLbound:  LONG,
    cElements:  ULONG,
    pvExtra:  PVOID    
) -> *mut SAFEARRAY
{
    unsafe {
        return SafeArrayCreateVectorEx(
            vt,
            lLbound,
            cElements,
            pvExtra
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VariantInit(
    pvarg: *mut VARIANTARG    
)
{
    unsafe {
        return VariantInit(
            pvarg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VariantClear(
    pvarg: *mut VARIANTARG    
) ->  HRESULT
{
    unsafe {
        return VariantClear(
            pvarg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VariantCopy(
    pvargDest: *mut VARIANTARG,
    pvargSrc: *const VARIANTARG    
) ->  HRESULT
{
    unsafe {
        return VariantCopy(
            pvargDest,
            pvargSrc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VariantCopyInd(
    pvarDest: *mut VARIANT,
    pvargSrc: *const VARIANTARG    
) ->  HRESULT
{
    unsafe {
        return VariantCopyInd(
            pvarDest,
            pvargSrc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VariantChangeType(
    pvargDest: *mut VARIANTARG,
    pvarSrc: *const VARIANTARG,
    wFlags:  USHORT,
    vt:  VARTYPE    
) ->  HRESULT
{
    unsafe {
        return VariantChangeType(
            pvargDest,
            pvarSrc,
            wFlags,
            vt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VariantChangeTypeEx(
    pvargDest: *mut VARIANTARG,
    pvarSrc: *const VARIANTARG,
    lcid:  LCID,
    wFlags:  USHORT,
    vt:  VARTYPE    
) ->  HRESULT
{
    unsafe {
        return VariantChangeTypeEx(
            pvargDest,
            pvarSrc,
            lcid,
            wFlags,
            vt
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VectorFromBstr(
    bstr:  BSTR,
    ppsa: *mut *mut SAFEARRAY    
) ->  HRESULT
{
    unsafe {
        return VectorFromBstr(
            bstr,
            ppsa
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_BstrFromVector(
    psa: *mut SAFEARRAY,
    pbstr: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return BstrFromVector(
            psa,
            pbstr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromI2(
    sIn:  SHORT,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromI2(
            sIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromI4(
    lIn:  LONG,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromI4(
            lIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromI8(
    i64In:  LONG64,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromI8(
            i64In,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromR4(
    fltIn:  FLOAT,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromR4(
            fltIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromR8(
    dblIn:  DOUBLE,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromR8(
            dblIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromCy(
    cyIn:  CY,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromCy(
            cyIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromDate(
    dateIn:  DATE,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromDate(
            dateIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromStr(
            strIn,
            lcid,
            dwFlags,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromDisp(
            pdispIn,
            lcid,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromBool(
    boolIn:  VARIANT_BOOL,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromBool(
            boolIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromI1(
    cIn:  CHAR,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromI1(
            cIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromUI2(
    uiIn:  USHORT,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromUI2(
            uiIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromUI4(
    ulIn:  ULONG,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromUI4(
            ulIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromUI8(
    ui64In:  ULONG64,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromUI8(
            ui64In,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI1FromDec(
    pdecIn: *const DECIMAL,
    pbOut: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarUI1FromDec(
            pdecIn,
            pbOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromUI1(
    bIn:  BYTE,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromUI1(
            bIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromI4(
    lIn:  LONG,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromI4(
            lIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromI8(
    i64In:  LONG64,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromI8(
            i64In,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromR4(
    fltIn:  FLOAT,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromR4(
            fltIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromR8(
    dblIn:  DOUBLE,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromR8(
            dblIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromCy(
    cyIn:  CY,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromCy(
            cyIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromDate(
    dateIn:  DATE,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromDate(
            dateIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromStr(
            strIn,
            lcid,
            dwFlags,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromDisp(
            pdispIn,
            lcid,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromBool(
    boolIn:  VARIANT_BOOL,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromBool(
            boolIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromI1(
    cIn:  CHAR,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromI1(
            cIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromUI2(
    uiIn:  USHORT,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromUI2(
            uiIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromUI4(
    ulIn:  ULONG,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromUI4(
            ulIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromUI8(
    ui64In:  ULONG64,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromUI8(
            ui64In,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI2FromDec(
    pdecIn: *const DECIMAL,
    psOut: *mut SHORT    
) ->  HRESULT
{
    unsafe {
        return VarI2FromDec(
            pdecIn,
            psOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromUI1(
    bIn:  BYTE,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromUI1(
            bIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromI2(
    sIn:  SHORT,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromI2(
            sIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromI8(
    i64In:  LONG64,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromI8(
            i64In,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromR4(
    fltIn:  FLOAT,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromR4(
            fltIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromR8(
    dblIn:  DOUBLE,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromR8(
            dblIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromCy(
    cyIn:  CY,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromCy(
            cyIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromDate(
    dateIn:  DATE,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromDate(
            dateIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromStr(
            strIn,
            lcid,
            dwFlags,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromDisp(
            pdispIn,
            lcid,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromBool(
    boolIn:  VARIANT_BOOL,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromBool(
            boolIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromI1(
    cIn:  CHAR,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromI1(
            cIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromUI2(
    uiIn:  USHORT,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromUI2(
            uiIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromUI4(
    ulIn:  ULONG,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromUI4(
            ulIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromUI8(
    ui64In:  ULONG64,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromUI8(
            ui64In,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI4FromDec(
    pdecIn: *const DECIMAL,
    plOut: *mut LONG    
) ->  HRESULT
{
    unsafe {
        return VarI4FromDec(
            pdecIn,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromUI1(
    bIn:  BYTE,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromUI1(
            bIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromI2(
    sIn:  SHORT,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromI2(
            sIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromR4(
    fltIn:  FLOAT,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromR4(
            fltIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromR8(
    dblIn:  DOUBLE,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromR8(
            dblIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromCy(
    cyIn:  CY,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromCy(
            cyIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromDate(
    dateIn:  DATE,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromDate(
            dateIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromStr(
            strIn,
            lcid,
            dwFlags,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromDisp(
            pdispIn,
            lcid,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromBool(
    boolIn:  VARIANT_BOOL,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromBool(
            boolIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromI1(
    cIn:  CHAR,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromI1(
            cIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromUI2(
    uiIn:  USHORT,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromUI2(
            uiIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromUI4(
    ulIn:  ULONG,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromUI4(
            ulIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromUI8(
    ui64In:  ULONG64,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromUI8(
            ui64In,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI8FromDec(
    pdecIn: *const DECIMAL,
    pi64Out: *mut LONG64    
) ->  HRESULT
{
    unsafe {
        return VarI8FromDec(
            pdecIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromUI1(
    bIn:  BYTE,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromUI1(
            bIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromI2(
    sIn:  SHORT,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromI2(
            sIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromI4(
    lIn:  LONG,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromI4(
            lIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromI8(
    i64In:  LONG64,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromI8(
            i64In,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromR8(
    dblIn:  DOUBLE,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromR8(
            dblIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromCy(
    cyIn:  CY,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromCy(
            cyIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromDate(
    dateIn:  DATE,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromDate(
            dateIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromStr(
            strIn,
            lcid,
            dwFlags,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromDisp(
            pdispIn,
            lcid,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromBool(
    boolIn:  VARIANT_BOOL,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromBool(
            boolIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromI1(
    cIn:  CHAR,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromI1(
            cIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromUI2(
    uiIn:  USHORT,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromUI2(
            uiIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromUI4(
    ulIn:  ULONG,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromUI4(
            ulIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromUI8(
    ui64In:  ULONG64,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromUI8(
            ui64In,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4FromDec(
    pdecIn: *const DECIMAL,
    pfltOut: *mut FLOAT    
) ->  HRESULT
{
    unsafe {
        return VarR4FromDec(
            pdecIn,
            pfltOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromUI1(
    bIn:  BYTE,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromUI1(
            bIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromI2(
    sIn:  SHORT,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromI2(
            sIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromI4(
    lIn:  LONG,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromI4(
            lIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromI8(
    i64In:  LONG64,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromI8(
            i64In,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromR4(
    fltIn:  FLOAT,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromR4(
            fltIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromCy(
    cyIn:  CY,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromCy(
            cyIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromDate(
    dateIn:  DATE,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromDate(
            dateIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromStr(
            strIn,
            lcid,
            dwFlags,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromDisp(
            pdispIn,
            lcid,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromBool(
    boolIn:  VARIANT_BOOL,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromBool(
            boolIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromI1(
    cIn:  CHAR,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromI1(
            cIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromUI2(
    uiIn:  USHORT,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromUI2(
            uiIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromUI4(
    ulIn:  ULONG,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromUI4(
            ulIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromUI8(
    ui64In:  ULONG64,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromUI8(
            ui64In,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8FromDec(
    pdecIn: *const DECIMAL,
    pdblOut: *mut DOUBLE    
) ->  HRESULT
{
    unsafe {
        return VarR8FromDec(
            pdecIn,
            pdblOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromUI1(
    bIn:  BYTE,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromUI1(
            bIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromI2(
    sIn:  SHORT,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromI2(
            sIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromI4(
    lIn:  LONG,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromI4(
            lIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromI8(
    i64In:  LONG64,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromI8(
            i64In,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromR4(
    fltIn:  FLOAT,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromR4(
            fltIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromR8(
    dblIn:  DOUBLE,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromR8(
            dblIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromCy(
    cyIn:  CY,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromCy(
            cyIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromStr(
            strIn,
            lcid,
            dwFlags,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromDisp(
            pdispIn,
            lcid,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromBool(
    boolIn:  VARIANT_BOOL,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromBool(
            boolIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromI1(
    cIn:  CHAR,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromI1(
            cIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromUI2(
    uiIn:  USHORT,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromUI2(
            uiIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromUI4(
    ulIn:  ULONG,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromUI4(
            ulIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromUI8(
    ui64In:  ULONG64,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromUI8(
            ui64In,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromDec(
    pdecIn: *const DECIMAL,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromDec(
            pdecIn,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromUI1(
    bIn:  BYTE,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromUI1(
            bIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromI2(
    sIn:  SHORT,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromI2(
            sIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromI4(
    lIn:  LONG,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromI4(
            lIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromI8(
    i64In:  LONG64,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromI8(
            i64In,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromR4(
    fltIn:  FLOAT,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromR4(
            fltIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromR8(
    dblIn:  DOUBLE,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromR8(
            dblIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromDate(
    dateIn:  DATE,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromDate(
            dateIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromStr(
            strIn,
            lcid,
            dwFlags,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromDisp(
            pdispIn,
            lcid,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromBool(
    boolIn:  VARIANT_BOOL,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromBool(
            boolIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromI1(
    cIn:  CHAR,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromI1(
            cIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromUI2(
    uiIn:  USHORT,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromUI2(
            uiIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromUI4(
    ulIn:  ULONG,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromUI4(
            ulIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromUI8(
    ui64In:  ULONG64,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromUI8(
            ui64In,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFromDec(
    pdecIn: *const DECIMAL,
    pcyOut: *mut CY    
) ->  HRESULT
{
    unsafe {
        return VarCyFromDec(
            pdecIn,
            pcyOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromUI1(
    bVal:  BYTE,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromUI1(
            bVal,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromI2(
    iVal:  SHORT,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromI2(
            iVal,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromI4(
    lIn:  LONG,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromI4(
            lIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromI8(
    i64In:  LONG64,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromI8(
            i64In,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromR4(
    fltIn:  FLOAT,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromR4(
            fltIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromR8(
    dblIn:  DOUBLE,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromR8(
            dblIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromCy(
    cyIn:  CY,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromCy(
            cyIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromDate(
    dateIn:  DATE,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromDate(
            dateIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromDisp(
            pdispIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromBool(
    boolIn:  VARIANT_BOOL,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromBool(
            boolIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromI1(
    cIn:  CHAR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromI1(
            cIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromUI2(
    uiIn:  USHORT,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromUI2(
            uiIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromUI4(
    ulIn:  ULONG,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromUI4(
            ulIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromUI8(
    ui64In:  ULONG64,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromUI8(
            ui64In,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrFromDec(
    pdecIn: *const DECIMAL,
    lcid:  LCID,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrFromDec(
            pdecIn,
            lcid,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromUI1(
    bIn:  BYTE,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromUI1(
            bIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromI2(
    sIn:  SHORT,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromI2(
            sIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromI4(
    lIn:  LONG,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromI4(
            lIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromI8(
    i64In:  LONG64,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromI8(
            i64In,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromR4(
    fltIn:  FLOAT,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromR4(
            fltIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromR8(
    dblIn:  DOUBLE,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromR8(
            dblIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromDate(
    dateIn:  DATE,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromDate(
            dateIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromCy(
    cyIn:  CY,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromCy(
            cyIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromStr(
            strIn,
            lcid,
            dwFlags,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromDisp(
            pdispIn,
            lcid,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromI1(
    cIn:  CHAR,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromI1(
            cIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromUI2(
    uiIn:  USHORT,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromUI2(
            uiIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromUI4(
    ulIn:  ULONG,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromUI4(
            ulIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromUI8(
    i64In:  ULONG64,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromUI8(
            i64In,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBoolFromDec(
    pdecIn: *const DECIMAL,
    pboolOut: *mut VARIANT_BOOL    
) ->  HRESULT
{
    unsafe {
        return VarBoolFromDec(
            pdecIn,
            pboolOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromUI1(
    bIn:  BYTE,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromUI1(
            bIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromI2(
    uiIn:  SHORT,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromI2(
            uiIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromI4(
    lIn:  LONG,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromI4(
            lIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromI8(
    i64In:  LONG64,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromI8(
            i64In,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromR4(
    fltIn:  FLOAT,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromR4(
            fltIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromR8(
    dblIn:  DOUBLE,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromR8(
            dblIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromDate(
    dateIn:  DATE,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromDate(
            dateIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromCy(
    cyIn:  CY,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromCy(
            cyIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromStr(
            strIn,
            lcid,
            dwFlags,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromDisp(
            pdispIn,
            lcid,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromBool(
    boolIn:  VARIANT_BOOL,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromBool(
            boolIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromUI2(
    uiIn:  USHORT,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromUI2(
            uiIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromUI4(
    ulIn:  ULONG,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromUI4(
            ulIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromUI8(
    i64In:  ULONG64,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromUI8(
            i64In,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarI1FromDec(
    pdecIn: *const DECIMAL,
    pcOut: *mut CHAR    
) ->  HRESULT
{
    unsafe {
        return VarI1FromDec(
            pdecIn,
            pcOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromUI1(
    bIn:  BYTE,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromUI1(
            bIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromI2(
    uiIn:  SHORT,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromI2(
            uiIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromI4(
    lIn:  LONG,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromI4(
            lIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromI8(
    i64In:  LONG64,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromI8(
            i64In,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromR4(
    fltIn:  FLOAT,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromR4(
            fltIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromR8(
    dblIn:  DOUBLE,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromR8(
            dblIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromDate(
    dateIn:  DATE,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromDate(
            dateIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromCy(
    cyIn:  CY,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromCy(
            cyIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromStr(
            strIn,
            lcid,
            dwFlags,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromDisp(
            pdispIn,
            lcid,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromBool(
    boolIn:  VARIANT_BOOL,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromBool(
            boolIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromI1(
    cIn:  CHAR,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromI1(
            cIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromUI4(
    ulIn:  ULONG,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromUI4(
            ulIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromUI8(
    i64In:  ULONG64,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromUI8(
            i64In,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI2FromDec(
    pdecIn: *const DECIMAL,
    puiOut: *mut USHORT    
) ->  HRESULT
{
    unsafe {
        return VarUI2FromDec(
            pdecIn,
            puiOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromUI1(
    bIn:  BYTE,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromUI1(
            bIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromI2(
    uiIn:  SHORT,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromI2(
            uiIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromI4(
    lIn:  LONG,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromI4(
            lIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromI8(
    i64In:  LONG64,
    plOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromI8(
            i64In,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromR4(
    fltIn:  FLOAT,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromR4(
            fltIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromR8(
    dblIn:  DOUBLE,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromR8(
            dblIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromDate(
    dateIn:  DATE,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromDate(
            dateIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromCy(
    cyIn:  CY,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromCy(
            cyIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromStr(
            strIn,
            lcid,
            dwFlags,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromDisp(
            pdispIn,
            lcid,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromBool(
    boolIn:  VARIANT_BOOL,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromBool(
            boolIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromI1(
    cIn:  CHAR,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromI1(
            cIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromUI2(
    uiIn:  USHORT,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromUI2(
            uiIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromUI8(
    ui64In:  ULONG64,
    plOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromUI8(
            ui64In,
            plOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI4FromDec(
    pdecIn: *const DECIMAL,
    pulOut: *mut ULONG    
) ->  HRESULT
{
    unsafe {
        return VarUI4FromDec(
            pdecIn,
            pulOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromUI1(
    bIn:  BYTE,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromUI1(
            bIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromI2(
    sIn:  SHORT,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromI2(
            sIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromI4(
    lIn:  LONG,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromI4(
            lIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromI8(
    ui64In:  LONG64,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromI8(
            ui64In,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromR4(
    fltIn:  FLOAT,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromR4(
            fltIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromR8(
    dblIn:  DOUBLE,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromR8(
            dblIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromCy(
    cyIn:  CY,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromCy(
            cyIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromDate(
    dateIn:  DATE,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromDate(
            dateIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromStr(
            strIn,
            lcid,
            dwFlags,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromDisp(
            pdispIn,
            lcid,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromBool(
    boolIn:  VARIANT_BOOL,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromBool(
            boolIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromI1(
    cIn:  CHAR,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromI1(
            cIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromUI2(
    uiIn:  USHORT,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromUI2(
            uiIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromUI4(
    ulIn:  ULONG,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromUI4(
            ulIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUI8FromDec(
    pdecIn: *const DECIMAL,
    pi64Out: *mut ULONG64    
) ->  HRESULT
{
    unsafe {
        return VarUI8FromDec(
            pdecIn,
            pi64Out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromUI1(
    bIn:  BYTE,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromUI1(
            bIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromI2(
    uiIn:  SHORT,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromI2(
            uiIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromI4(
    lIn:  LONG,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromI4(
            lIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromI8(
    i64In:  LONG64,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromI8(
            i64In,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromR4(
    fltIn:  FLOAT,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromR4(
            fltIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromR8(
    dblIn:  DOUBLE,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromR8(
            dblIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromDate(
    dateIn:  DATE,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromDate(
            dateIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromCy(
    cyIn:  CY,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromCy(
            cyIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromStr(
            strIn,
            lcid,
            dwFlags,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromDisp(
    pdispIn: *mut IDispatch,
    lcid:  LCID,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromDisp(
            pdispIn,
            lcid,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromBool(
    boolIn:  VARIANT_BOOL,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromBool(
            boolIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromI1(
    cIn:  CHAR,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromI1(
            cIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromUI2(
    uiIn:  USHORT,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromUI2(
            uiIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromUI4(
    ulIn:  ULONG,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromUI4(
            ulIn,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFromUI8(
    ui64In:  ULONG64,
    pdecOut: *mut DECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFromUI8(
            ui64In,
            pdecOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarParseNumFromStr(
    strIn:  LPCOLESTR,
    lcid:  LCID,
    dwFlags:  ULONG,
    pnumprs: *mut NUMPARSE,
    rgbDig: *mut BYTE    
) ->  HRESULT
{
    unsafe {
        return VarParseNumFromStr(
            strIn,
            lcid,
            dwFlags,
            pnumprs,
            rgbDig
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarNumFromParseNum(
    pnumprs: *mut NUMPARSE,
    rgbDig: *mut BYTE,
    dwVtBits:  ULONG,
    pvar: *mut VARIANT    
) ->  HRESULT
{
    unsafe {
        return VarNumFromParseNum(
            pnumprs,
            rgbDig,
            dwVtBits,
            pvar
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarAdd(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarAdd(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarAnd(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarAnd(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCat(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarCat(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDiv(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarDiv(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarEqv(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarEqv(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarIdiv(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarIdiv(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarImp(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarImp(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarMod(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarMod(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarMul(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarMul(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarOr(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarOr(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarPow(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarPow(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarSub(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarSub(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarXor(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarXor(
            pvarLeft,
            pvarRight,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarAbs(
    pvarIn:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarAbs(
            pvarIn,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarFix(
    pvarIn:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarFix(
            pvarIn,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarInt(
    pvarIn:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarInt(
            pvarIn,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarNeg(
    pvarIn:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarNeg(
            pvarIn,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarNot(
    pvarIn:  LPVARIANT,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarNot(
            pvarIn,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarRound(
    pvarIn:  LPVARIANT,
    cDecimals:  c_int,
    pvarResult:  LPVARIANT    
) ->  HRESULT
{
    unsafe {
        return VarRound(
            pvarIn,
            cDecimals,
            pvarResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCmp(
    pvarLeft:  LPVARIANT,
    pvarRight:  LPVARIANT,
    lcid:  LCID,
    dwFlags:  ULONG    
) ->  HRESULT
{
    unsafe {
        return VarCmp(
            pvarLeft,
            pvarRight,
            lcid,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecAdd(
    pdecLeft:  LPDECIMAL,
    pdecRight:  LPDECIMAL,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecAdd(
            pdecLeft,
            pdecRight,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecDiv(
    pdecLeft:  LPDECIMAL,
    pdecRight:  LPDECIMAL,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecDiv(
            pdecLeft,
            pdecRight,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecMul(
    pdecLeft:  LPDECIMAL,
    pdecRight:  LPDECIMAL,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecMul(
            pdecLeft,
            pdecRight,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecSub(
    pdecLeft:  LPDECIMAL,
    pdecRight:  LPDECIMAL,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecSub(
            pdecLeft,
            pdecRight,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecAbs(
    pdecIn:  LPDECIMAL,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecAbs(
            pdecIn,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecFix(
    pdecIn:  LPDECIMAL,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecFix(
            pdecIn,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecInt(
    pdecIn:  LPDECIMAL,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecInt(
            pdecIn,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecNeg(
    pdecIn:  LPDECIMAL,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecNeg(
            pdecIn,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecRound(
    pdecIn:  LPDECIMAL,
    cDecimals:  c_int,
    pdecResult:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecRound(
            pdecIn,
            cDecimals,
            pdecResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecCmp(
    pdecLeft:  LPDECIMAL,
    pdecRight:  LPDECIMAL    
) ->  HRESULT
{
    unsafe {
        return VarDecCmp(
            pdecLeft,
            pdecRight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDecCmpR8(
    pdecLeft:  LPDECIMAL,
    dblRight:  f64    
) ->  HRESULT
{
    unsafe {
        return VarDecCmpR8(
            pdecLeft,
            dblRight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyAdd(
    cyLeft:  CY,
    cyRight:  CY,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyAdd(
            cyLeft,
            cyRight,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyMul(
    cyLeft:  CY,
    cyRight:  CY,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyMul(
            cyLeft,
            cyRight,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyMulI4(
    cyLeft:  CY,
    lRight:  LONG,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyMulI4(
            cyLeft,
            lRight,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyMulI8(
    cyLeft:  CY,
    lRight:  LONG64,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyMulI8(
            cyLeft,
            lRight,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCySub(
    cyLeft:  CY,
    cyRight:  CY,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCySub(
            cyLeft,
            cyRight,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyAbs(
    cyIn:  CY,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyAbs(
            cyIn,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyFix(
    cyIn:  CY,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyFix(
            cyIn,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyInt(
    cyIn:  CY,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyInt(
            cyIn,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyNeg(
    cyIn:  CY,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyNeg(
            cyIn,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyRound(
    cyIn:  CY,
    cDecimals:  c_int,
    pcyResult:  LPCY    
) ->  HRESULT
{
    unsafe {
        return VarCyRound(
            cyIn,
            cDecimals,
            pcyResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyCmp(
    cyLeft:  CY,
    cyRight:  CY    
) ->  HRESULT
{
    unsafe {
        return VarCyCmp(
            cyLeft,
            cyRight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarCyCmpR8(
    cyLeft:  CY,
    dblRight:  f64    
) ->  HRESULT
{
    unsafe {
        return VarCyCmpR8(
            cyLeft,
            dblRight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrCat(
    bstrLeft:  BSTR,
    bstrRight:  BSTR,
    pbstrResult:  LPBSTR    
) ->  HRESULT
{
    unsafe {
        return VarBstrCat(
            bstrLeft,
            bstrRight,
            pbstrResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarBstrCmp(
    bstrLeft:  BSTR,
    bstrRight:  BSTR,
    lcid:  LCID,
    dwFlags:  ULONG    
) ->  HRESULT
{
    unsafe {
        return VarBstrCmp(
            bstrLeft,
            bstrRight,
            lcid,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8Pow(
    dblLeft:  f64,
    dblRight:  f64,
    pdblResult: *mut f64    
) ->  HRESULT
{
    unsafe {
        return VarR8Pow(
            dblLeft,
            dblRight,
            pdblResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR4CmpR8(
    fltLeft:  f32,
    dblRight:  f64    
) ->  HRESULT
{
    unsafe {
        return VarR4CmpR8(
            fltLeft,
            dblRight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarR8Round(
    dblIn:  f64,
    cDecimals:  c_int,
    pdblResult: *mut f64    
) ->  HRESULT
{
    unsafe {
        return VarR8Round(
            dblIn,
            cDecimals,
            pdblResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromUdate(
    pudateIn: *mut UDATE,
    dwFlags:  ULONG,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromUdate(
            pudateIn,
            dwFlags,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarDateFromUdateEx(
    pudateIn: *mut UDATE,
    lcid:  LCID,
    dwFlags:  ULONG,
    pdateOut: *mut DATE    
) ->  HRESULT
{
    unsafe {
        return VarDateFromUdateEx(
            pudateIn,
            lcid,
            dwFlags,
            pdateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarUdateFromDate(
    dateIn:  DATE,
    dwFlags:  ULONG,
    pudateOut: *mut UDATE    
) ->  HRESULT
{
    unsafe {
        return VarUdateFromDate(
            dateIn,
            dwFlags,
            pudateOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAltMonthNames(
    lcid:  LCID,
    prgp: *mut *mut LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return GetAltMonthNames(
            lcid,
            prgp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarFormat(
    pvarIn:  LPVARIANT,
    pstrFormat:  LPOLESTR,
    iFirstDay:  c_int,
    iFirstWeek:  c_int,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarFormat(
            pvarIn,
            pstrFormat,
            iFirstDay,
            iFirstWeek,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarFormatDateTime(
    pvarIn:  LPVARIANT,
    iNamedFormat:  c_int,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarFormatDateTime(
            pvarIn,
            iNamedFormat,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarFormatNumber(
    pvarIn:  LPVARIANT,
    iNumDig:  c_int,
    iIncLead:  c_int,
    iUseParens:  c_int,
    iGroup:  c_int,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarFormatNumber(
            pvarIn,
            iNumDig,
            iIncLead,
            iUseParens,
            iGroup,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarFormatPercent(
    pvarIn:  LPVARIANT,
    iNumDig:  c_int,
    iIncLead:  c_int,
    iUseParens:  c_int,
    iGroup:  c_int,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarFormatPercent(
            pvarIn,
            iNumDig,
            iIncLead,
            iUseParens,
            iGroup,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarFormatCurrency(
    pvarIn:  LPVARIANT,
    iNumDig:  c_int,
    iIncLead:  c_int,
    iUseParens:  c_int,
    iGroup:  c_int,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarFormatCurrency(
            pvarIn,
            iNumDig,
            iIncLead,
            iUseParens,
            iGroup,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarWeekdayName(
    iWeekday:  c_int,
    fAbbrev:  c_int,
    iFirstDay:  c_int,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarWeekdayName(
            iWeekday,
            fAbbrev,
            iFirstDay,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarMonthName(
    iMonth:  c_int,
    fAbbrev:  c_int,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR    
) ->  HRESULT
{
    unsafe {
        return VarMonthName(
            iMonth,
            fAbbrev,
            dwFlags,
            pbstrOut
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarFormatFromTokens(
    pvarIn:  LPVARIANT,
    pstrFormat:  LPOLESTR,
    pbTokCur:  LPBYTE,
    dwFlags:  ULONG,
    pbstrOut: *mut BSTR,
    lcid:  LCID    
) ->  HRESULT
{
    unsafe {
        return VarFormatFromTokens(
            pvarIn,
            pstrFormat,
            pbTokCur,
            dwFlags,
            pbstrOut,
            lcid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_VarTokenizeFormatString(
    pstrFormat:  LPOLESTR,
    rgbTok:  LPBYTE,
    cbTok:  c_int,
    iFirstDay:  c_int,
    iFirstWeek:  c_int,
    lcid:  LCID,
    pcbActual: *mut c_int    
) ->  HRESULT
{
    unsafe {
        return VarTokenizeFormatString(
            pstrFormat,
            rgbTok,
            cbTok,
            iFirstDay,
            iFirstWeek,
            lcid,
            pcbActual
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LHashValOfNameSysA(
    syskind:  SYSKIND,
    lcid:  LCID,
    szName:  LPCSTR    
) ->  ULONG
{
    unsafe {
        return LHashValOfNameSysA(
            syskind,
            lcid,
            szName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LHashValOfNameSys(
    syskind:  SYSKIND,
    lcid:  LCID,
    szName: *const OLECHAR    
) ->  ULONG
{
    unsafe {
        return LHashValOfNameSys(
            syskind,
            lcid,
            szName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadTypeLib(
    szFile:  LPCOLESTR,
    pptlib: *mut *mut ITypeLib    
) ->  HRESULT
{
    unsafe {
        return LoadTypeLib(
            szFile,
            pptlib
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadTypeLibEx(
    szFile:  LPCOLESTR,
    regkind:  REGKIND,
    pptlib: *mut *mut ITypeLib    
) ->  HRESULT
{
    unsafe {
        return LoadTypeLibEx(
            szFile,
            regkind,
            pptlib
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LoadRegTypeLib(
    rguid: *const GUID,
    wVerMajor:  WORD,
    wVerMinor:  WORD,
    lcid:  LCID,
    pptlib: *mut *mut ITypeLib    
) ->  HRESULT
{
    unsafe {
        return LoadRegTypeLib(
            rguid,
            wVerMajor,
            wVerMinor,
            lcid,
            pptlib
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryPathOfRegTypeLib(
    guid: *const GUID,
    wMaj:  USHORT,
    wMin:  USHORT,
    lcid:  LCID,
    lpbstrPathName:  LPBSTR    
) ->  HRESULT
{
    unsafe {
        return QueryPathOfRegTypeLib(
            guid,
            wMaj,
            wMin,
            lcid,
            lpbstrPathName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterTypeLib(
    ptlib: *mut ITypeLib,
    szFullPath:  LPCOLESTR,
    szHelpDir:  LPCOLESTR    
) ->  HRESULT
{
    unsafe {
        return RegisterTypeLib(
            ptlib,
            szFullPath,
            szHelpDir
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnRegisterTypeLib(
    libID: *const GUID,
    wVerMajor:  WORD,
    wVerMinor:  WORD,
    lcid:  LCID,
    syskind:  SYSKIND    
) ->  HRESULT
{
    unsafe {
        return UnRegisterTypeLib(
            libID,
            wVerMajor,
            wVerMinor,
            lcid,
            syskind
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterTypeLibForUser(
    ptlib: *mut ITypeLib,
    szFullPath: *mut OLECHAR,
    szHelpDir: *mut OLECHAR    
) ->  HRESULT
{
    unsafe {
        return RegisterTypeLibForUser(
            ptlib,
            szFullPath,
            szHelpDir
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnRegisterTypeLibForUser(
    libID: *const GUID,
    wMajorVerNum:  WORD,
    wMinorVerNum:  WORD,
    lcid:  LCID,
    syskind:  SYSKIND    
) ->  HRESULT
{
    unsafe {
        return UnRegisterTypeLibForUser(
            libID,
            wMajorVerNum,
            wMinorVerNum,
            lcid,
            syskind
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateTypeLib(
    syskind:  SYSKIND,
    szFile:  LPCOLESTR,
    ppctlib: *mut *mut ICreateTypeLib    
) ->  HRESULT
{
    unsafe {
        return CreateTypeLib(
            syskind,
            szFile,
            ppctlib
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateTypeLib2(
    syskind:  SYSKIND,
    szFile:  LPCOLESTR,
    ppctlib: *mut *mut ICreateTypeLib2    
) ->  HRESULT
{
    unsafe {
        return CreateTypeLib2(
            syskind,
            szFile,
            ppctlib
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DispGetParam(
    pdispparams: *mut DISPPARAMS,
    position:  UINT,
    vtTarg:  VARTYPE,
    pvarResult: *mut VARIANT,
    puArgErr: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return DispGetParam(
            pdispparams,
            position,
            vtTarg,
            pvarResult,
            puArgErr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DispGetIDsOfNames(
    ptinfo: *mut ITypeInfo,
    rgszNames: *mut LPOLESTR,
    cNames:  UINT,
    rgdispid: *mut DISPID    
) ->  HRESULT
{
    unsafe {
        return DispGetIDsOfNames(
            ptinfo,
            rgszNames,
            cNames,
            rgdispid
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DispInvoke(
    _this: *mut c_void,
    ptinfo: *mut ITypeInfo,
    dispidMember:  DISPID,
    wFlags:  WORD,
    pparams: *mut DISPPARAMS,
    pvarResult: *mut VARIANT,
    pexcepinfo: *mut EXCEPINFO,
    puArgErr: *mut UINT    
) ->  HRESULT
{
    unsafe {
        return DispInvoke(
            _this,
            ptinfo,
            dispidMember,
            wFlags,
            pparams,
            pvarResult,
            pexcepinfo,
            puArgErr
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateDispTypeInfo(
    pidata: *mut INTERFACEDATA,
    lcid:  LCID,
    pptinfo: *mut *mut ITypeInfo    
) ->  HRESULT
{
    unsafe {
        return CreateDispTypeInfo(
            pidata,
            lcid,
            pptinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateStdDispatch(
    punkOuter: *mut IUnknown,
    pvThis: *mut c_void,
    ptinfo: *mut ITypeInfo,
    ppunkStdDisp: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return CreateStdDispatch(
            punkOuter,
            pvThis,
            ptinfo,
            ppunkStdDisp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DispCallFunc(
    pvInstance: *mut c_void,
    oVft:  ULONG_PTR,
    cc:  CALLCONV,
    vtReturn:  VARTYPE,
    cActuals:  UINT,
    prgvt: *mut VARTYPE,
    prgpvarg: *mut *mut VARIANTARG,
    pvargResult: *mut VARIANT    
) ->  HRESULT
{
    unsafe {
        return DispCallFunc(
            pvInstance,
            oVft,
            cc,
            vtReturn,
            cActuals,
            prgvt,
            prgpvarg,
            pvargResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterActiveObject(
    punk: *mut IUnknown,
    rclsid: *const IID,
    dwFlags:  DWORD,
    pdwRegister: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return RegisterActiveObject(
            punk,
            rclsid,
            dwFlags,
            pdwRegister
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RevokeActiveObject(
    dwRegister:  DWORD,
    pvReserved: *mut c_void    
) ->  HRESULT
{
    unsafe {
        return RevokeActiveObject(
            dwRegister,
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetActiveObject(
    rclsid: *const IID,
    pvReserved: *mut c_void,
    ppunk: *mut *mut IUnknown    
) ->  HRESULT
{
    unsafe {
        return GetActiveObject(
            rclsid,
            pvReserved,
            ppunk
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetErrorInfo(
    dwReserved:  ULONG,
    perrinfo: *mut IErrorInfo    
) ->  HRESULT
{
    unsafe {
        return SetErrorInfo(
            dwReserved,
            perrinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetErrorInfo(
    dwReserved:  ULONG,
    pperrinfo: *mut *mut IErrorInfo    
) ->  HRESULT
{
    unsafe {
        return GetErrorInfo(
            dwReserved,
            pperrinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateErrorInfo(
    pperrinfo: *mut *mut ICreateErrorInfo    
) ->  HRESULT
{
    unsafe {
        return CreateErrorInfo(
            pperrinfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRecordInfoFromTypeInfo(
    pTypeInfo: *mut ITypeInfo,
    ppRecInfo: *mut *mut IRecordInfo    
) ->  HRESULT
{
    unsafe {
        return GetRecordInfoFromTypeInfo(
            pTypeInfo,
            ppRecInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetRecordInfoFromGuids(
    rGuidTypeLib: *const GUID,
    uVerMajor:  ULONG,
    uVerMinor:  ULONG,
    lcid:  LCID,
    rGuidTypeInfo: *const GUID,
    ppRecInfo: *mut *mut IRecordInfo    
) ->  HRESULT
{
    unsafe {
        return GetRecordInfoFromGuids(
            rGuidTypeLib,
            uVerMajor,
            uVerMinor,
            lcid,
            rGuidTypeInfo,
            ppRecInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OaBuildVersion(
    
) ->  ULONG
{
    unsafe {
        return OaBuildVersion(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ClearCustData(
    pCustData:  LPCUSTDATA    
)
{
    unsafe {
        return ClearCustData(
            pCustData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OaEnablePerUserTLibRegistration(
    
)
{
    unsafe {
        return OaEnablePerUserTLibRegistration(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleBuildVersion(
    
) ->  DWORD
{
    unsafe {
        return OleBuildVersion(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WriteFmtUserTypeStg(
    pstg:  LPSTORAGE,
    cf:  CLIPFORMAT,
    lpszUserType:  LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return WriteFmtUserTypeStg(
            pstg,
            cf,
            lpszUserType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReadFmtUserTypeStg(
    pstg:  LPSTORAGE,
    pcf: *mut CLIPFORMAT,
    lplpszUserType: *mut LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return ReadFmtUserTypeStg(
            pstg,
            pcf,
            lplpszUserType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleInitialize(
    pvReserved:  LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleInitialize(
            pvReserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleUninitialize(
    
)
{
    unsafe {
        return OleUninitialize(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleQueryLinkFromData(
    pSrcDataObject:  LPDATAOBJECT    
) ->  HRESULT
{
    unsafe {
        return OleQueryLinkFromData(
            pSrcDataObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleQueryCreateFromData(
    pSrcDataObject:  LPDATAOBJECT    
) ->  HRESULT
{
    unsafe {
        return OleQueryCreateFromData(
            pSrcDataObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreate(
    rclsid: *const IID,
    riid: *const IID,
    renderopt:  DWORD,
    pFormatEtc:  LPFORMATETC,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreate(
            rclsid,
            riid,
            renderopt,
            pFormatEtc,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateEx(
    rclsid: *const IID,
    riid: *const IID,
    dwFlags:  DWORD,
    renderopt:  DWORD,
    cFormats:  ULONG,
    rgAdvf: *mut DWORD,
    rgFormatEtc:  LPFORMATETC,
    lpAdviseSink: *mut IAdviseSink,
    rgdwConnection: *mut DWORD,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateEx(
            rclsid,
            riid,
            dwFlags,
            renderopt,
            cFormats,
            rgAdvf,
            rgFormatEtc,
            lpAdviseSink,
            rgdwConnection,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateFromData(
    pSrcDataObj:  LPDATAOBJECT,
    riid: *const IID,
    renderopt:  DWORD,
    pFormatEtc:  LPFORMATETC,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateFromData(
            pSrcDataObj,
            riid,
            renderopt,
            pFormatEtc,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateFromDataEx(
    pSrcDataObj:  LPDATAOBJECT,
    riid: *const IID,
    dwFlags:  DWORD,
    renderopt:  DWORD,
    cFormats:  ULONG,
    rgAdvf: *mut DWORD,
    rgFormatEtc:  LPFORMATETC,
    lpAdviseSink: *mut IAdviseSink,
    rgdwConnection: *mut DWORD,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateFromDataEx(
            pSrcDataObj,
            riid,
            dwFlags,
            renderopt,
            cFormats,
            rgAdvf,
            rgFormatEtc,
            lpAdviseSink,
            rgdwConnection,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateLinkFromData(
    pSrcDataObj:  LPDATAOBJECT,
    riid: *const IID,
    renderopt:  DWORD,
    pFormatEtc:  LPFORMATETC,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateLinkFromData(
            pSrcDataObj,
            riid,
            renderopt,
            pFormatEtc,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateLinkFromDataEx(
    pSrcDataObj:  LPDATAOBJECT,
    riid: *const IID,
    dwFlags:  DWORD,
    renderopt:  DWORD,
    cFormats:  ULONG,
    rgAdvf: *mut DWORD,
    rgFormatEtc:  LPFORMATETC,
    lpAdviseSink: *mut IAdviseSink,
    rgdwConnection: *mut DWORD,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateLinkFromDataEx(
            pSrcDataObj,
            riid,
            dwFlags,
            renderopt,
            cFormats,
            rgAdvf,
            rgFormatEtc,
            lpAdviseSink,
            rgdwConnection,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateStaticFromData(
    pSrcDataObj:  LPDATAOBJECT,
    iid: *const IID,
    renderopt:  DWORD,
    pFormatEtc:  LPFORMATETC,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateStaticFromData(
            pSrcDataObj,
            iid,
            renderopt,
            pFormatEtc,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateLink(
    pmkLinkSrc:  LPMONIKER,
    riid: *const IID,
    renderopt:  DWORD,
    lpFormatEtc:  LPFORMATETC,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateLink(
            pmkLinkSrc,
            riid,
            renderopt,
            lpFormatEtc,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateLinkEx(
    pmkLinkSrc:  LPMONIKER,
    riid: *const IID,
    dwFlags:  DWORD,
    renderopt:  DWORD,
    cFormats:  ULONG,
    rgAdvf: *mut DWORD,
    rgFormatEtc:  LPFORMATETC,
    lpAdviseSink: *mut IAdviseSink,
    rgdwConnection: *mut DWORD,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateLinkEx(
            pmkLinkSrc,
            riid,
            dwFlags,
            renderopt,
            cFormats,
            rgAdvf,
            rgFormatEtc,
            lpAdviseSink,
            rgdwConnection,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateLinkToFile(
    lpszFileName:  LPCOLESTR,
    riid: *const IID,
    renderopt:  DWORD,
    lpFormatEtc:  LPFORMATETC,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateLinkToFile(
            lpszFileName,
            riid,
            renderopt,
            lpFormatEtc,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateLinkToFileEx(
    lpszFileName:  LPCOLESTR,
    riid: *const IID,
    dwFlags:  DWORD,
    renderopt:  DWORD,
    cFormats:  ULONG,
    rgAdvf: *mut DWORD,
    rgFormatEtc:  LPFORMATETC,
    lpAdviseSink: *mut IAdviseSink,
    rgdwConnection: *mut DWORD,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateLinkToFileEx(
            lpszFileName,
            riid,
            dwFlags,
            renderopt,
            cFormats,
            rgAdvf,
            rgFormatEtc,
            lpAdviseSink,
            rgdwConnection,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateFromFile(
    rclsid: *const IID,
    lpszFileName:  LPCOLESTR,
    riid: *const IID,
    renderopt:  DWORD,
    lpFormatEtc:  LPFORMATETC,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateFromFile(
            rclsid,
            lpszFileName,
            riid,
            renderopt,
            lpFormatEtc,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateFromFileEx(
    rclsid: *const IID,
    lpszFileName:  LPCOLESTR,
    riid: *const IID,
    dwFlags:  DWORD,
    renderopt:  DWORD,
    cFormats:  ULONG,
    rgAdvf: *mut DWORD,
    rgFormatEtc:  LPFORMATETC,
    lpAdviseSink: *mut IAdviseSink,
    rgdwConnection: *mut DWORD,
    pClientSite:  LPOLECLIENTSITE,
    pStg:  LPSTORAGE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateFromFileEx(
            rclsid,
            lpszFileName,
            riid,
            dwFlags,
            renderopt,
            cFormats,
            rgAdvf,
            rgFormatEtc,
            lpAdviseSink,
            rgdwConnection,
            pClientSite,
            pStg,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleLoad(
    pStg:  LPSTORAGE,
    riid: *const IID,
    pClientSite:  LPOLECLIENTSITE,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleLoad(
            pStg,
            riid,
            pClientSite,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleSave(
    pPS:  LPPERSISTSTORAGE,
    pStg:  LPSTORAGE,
    fSameAsLoad:  BOOL    
) ->  HRESULT
{
    unsafe {
        return OleSave(
            pPS,
            pStg,
            fSameAsLoad
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleLoadFromStream(
    pStm:  LPSTREAM,
    iidInterface: *const IID,
    ppvObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleLoadFromStream(
            pStm,
            iidInterface,
            ppvObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleSaveToStream(
    pPStm:  LPPERSISTSTREAM,
    pStm:  LPSTREAM    
) ->  HRESULT
{
    unsafe {
        return OleSaveToStream(
            pPStm,
            pStm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleSetContainedObject(
    pUnknown:  LPUNKNOWN,
    fContained:  BOOL    
) ->  HRESULT
{
    unsafe {
        return OleSetContainedObject(
            pUnknown,
            fContained
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleNoteObjectVisible(
    pUnknown:  LPUNKNOWN,
    fVisible:  BOOL    
) ->  HRESULT
{
    unsafe {
        return OleNoteObjectVisible(
            pUnknown,
            fVisible
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterDragDrop(
    hwnd:  HWND,
    pDropTarget:  LPDROPTARGET    
) ->  HRESULT
{
    unsafe {
        return RegisterDragDrop(
            hwnd,
            pDropTarget
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RevokeDragDrop(
    hwnd:  HWND    
) ->  HRESULT
{
    unsafe {
        return RevokeDragDrop(
            hwnd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DoDragDrop(
    pDataObj:  LPDATAOBJECT,
    pDropSource:  LPDROPSOURCE,
    dwOKEffects:  DWORD,
    pdwEffect:  LPDWORD    
) ->  HRESULT
{
    unsafe {
        return DoDragDrop(
            pDataObj,
            pDropSource,
            dwOKEffects,
            pdwEffect
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleSetClipboard(
    pDataObj:  LPDATAOBJECT    
) ->  HRESULT
{
    unsafe {
        return OleSetClipboard(
            pDataObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleGetClipboard(
    ppDataObj: *mut LPDATAOBJECT    
) ->  HRESULT
{
    unsafe {
        return OleGetClipboard(
            ppDataObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleGetClipboardWithEnterpriseInfo(
    dataObject: *mut *mut IDataObject,
    dataEnterpriseId: *mut PWSTR,
    sourceDescription: *mut PWSTR,
    targetDescription: *mut PWSTR,
    dataDescription: *mut PWSTR    
) ->  HRESULT
{
    unsafe {
        return OleGetClipboardWithEnterpriseInfo(
            dataObject,
            dataEnterpriseId,
            sourceDescription,
            targetDescription,
            dataDescription
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleFlushClipboard(
    
) ->  HRESULT
{
    unsafe {
        return OleFlushClipboard(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleIsCurrentClipboard(
    pDataObj:  LPDATAOBJECT    
) ->  HRESULT
{
    unsafe {
        return OleIsCurrentClipboard(
            pDataObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateMenuDescriptor(
    hmenuCombined:  HMENU,
    lpMenuWidths:  LPOLEMENUGROUPWIDTHS    
) ->  HOLEMENU
{
    unsafe {
        return OleCreateMenuDescriptor(
            hmenuCombined,
            lpMenuWidths
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleSetMenuDescriptor(
    holemenu:  HOLEMENU,
    hwndFrame:  HWND,
    hwndActiveObject:  HWND,
    lpFrame:  LPOLEINPLACEFRAME,
    lpActiveObj:  LPOLEINPLACEACTIVEOBJECT    
) ->  HRESULT
{
    unsafe {
        return OleSetMenuDescriptor(
            holemenu,
            hwndFrame,
            hwndActiveObject,
            lpFrame,
            lpActiveObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleDestroyMenuDescriptor(
    holemenu:  HOLEMENU    
) ->  HRESULT
{
    unsafe {
        return OleDestroyMenuDescriptor(
            holemenu
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleTranslateAccelerator(
    lpFrame:  LPOLEINPLACEFRAME,
    lpFrameInfo:  LPOLEINPLACEFRAMEINFO,
    lpmsg:  LPMSG    
) ->  HRESULT
{
    unsafe {
        return OleTranslateAccelerator(
            lpFrame,
            lpFrameInfo,
            lpmsg
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleDuplicateData(
    hSrc:  HANDLE,
    cfFormat:  CLIPFORMAT,
    uiFlags:  UINT    
) ->  HANDLE
{
    unsafe {
        return OleDuplicateData(
            hSrc,
            cfFormat,
            uiFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleDraw(
    pUnknown:  LPUNKNOWN,
    dwAspect:  DWORD,
    hdcDraw:  HDC,
    lprcBounds:  LPCRECT    
) ->  HRESULT
{
    unsafe {
        return OleDraw(
            pUnknown,
            dwAspect,
            hdcDraw,
            lprcBounds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleRun(
    pUnknown:  LPUNKNOWN    
) ->  HRESULT
{
    unsafe {
        return OleRun(
            pUnknown
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleIsRunning(
    pObject:  LPOLEOBJECT    
) ->  BOOL
{
    unsafe {
        return OleIsRunning(
            pObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleLockRunning(
    pUnknown:  LPUNKNOWN,
    fLock:  BOOL,
    fLastUnlockCloses:  BOOL    
) ->  HRESULT
{
    unsafe {
        return OleLockRunning(
            pUnknown,
            fLock,
            fLastUnlockCloses
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReleaseStgMedium(
    arg1:  LPSTGMEDIUM    
)
{
    unsafe {
        return ReleaseStgMedium(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateOleAdviseHolder(
    ppOAHolder: *mut LPOLEADVISEHOLDER    
) ->  HRESULT
{
    unsafe {
        return CreateOleAdviseHolder(
            ppOAHolder
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateDefaultHandler(
    clsid: *const IID,
    pUnkOuter:  LPUNKNOWN,
    riid: *const IID,
    lplpObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateDefaultHandler(
            clsid,
            pUnkOuter,
            riid,
            lplpObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleCreateEmbeddingHelper(
    clsid: *const IID,
    pUnkOuter:  LPUNKNOWN,
    flags:  DWORD,
    pCF:  LPCLASSFACTORY,
    riid: *const IID,
    lplpObj: *mut LPVOID    
) ->  HRESULT
{
    unsafe {
        return OleCreateEmbeddingHelper(
            clsid,
            pUnkOuter,
            flags,
            pCF,
            riid,
            lplpObj
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_IsAccelerator(
    hAccel:  HACCEL,
    cAccelEntries:  c_int,
    lpMsg:  LPMSG,
    lpwCmd: *mut WORD    
) ->  BOOL
{
    unsafe {
        return IsAccelerator(
            hAccel,
            cAccelEntries,
            lpMsg,
            lpwCmd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleGetIconOfFile(
    lpszPath:  LPOLESTR,
    fUseFileAsLabel:  BOOL    
) ->  HGLOBAL
{
    unsafe {
        return OleGetIconOfFile(
            lpszPath,
            fUseFileAsLabel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleGetIconOfClass(
    rclsid: *const IID,
    lpszLabel:  LPOLESTR,
    fUseTypeAsLabel:  BOOL    
) ->  HGLOBAL
{
    unsafe {
        return OleGetIconOfClass(
            rclsid,
            lpszLabel,
            fUseTypeAsLabel
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleMetafilePictFromIconAndLabel(
    hIcon:  HICON,
    lpszLabel:  LPOLESTR,
    lpszSourceFile:  LPOLESTR,
    iIconIndex:  UINT    
) ->  HGLOBAL
{
    unsafe {
        return OleMetafilePictFromIconAndLabel(
            hIcon,
            lpszLabel,
            lpszSourceFile,
            iIconIndex
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleRegGetUserType(
    clsid: *const IID,
    dwFormOfType:  DWORD,
    pszUserType: *mut LPOLESTR    
) ->  HRESULT
{
    unsafe {
        return OleRegGetUserType(
            clsid,
            dwFormOfType,
            pszUserType
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleRegGetMiscStatus(
    clsid: *const IID,
    dwAspect:  DWORD,
    pdwStatus: *mut DWORD    
) ->  HRESULT
{
    unsafe {
        return OleRegGetMiscStatus(
            clsid,
            dwAspect,
            pdwStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleRegEnumFormatEtc(
    clsid: *const IID,
    dwDirection:  DWORD,
    ppenum: *mut LPENUMFORMATETC    
) ->  HRESULT
{
    unsafe {
        return OleRegEnumFormatEtc(
            clsid,
            dwDirection,
            ppenum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleRegEnumVerbs(
    clsid: *const IID,
    ppenum: *mut LPENUMOLEVERB    
) ->  HRESULT
{
    unsafe {
        return OleRegEnumVerbs(
            clsid,
            ppenum
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleConvertOLESTREAMToIStorage(
    lpolestream:  LPOLESTREAM,
    pstg:  LPSTORAGE,
    ptd: *const DVTARGETDEVICE    
) ->  HRESULT
{
    unsafe {
        return OleConvertOLESTREAMToIStorage(
            lpolestream,
            pstg,
            ptd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleConvertIStorageToOLESTREAM(
    pstg:  LPSTORAGE,
    lpolestream:  LPOLESTREAM    
) ->  HRESULT
{
    unsafe {
        return OleConvertIStorageToOLESTREAM(
            pstg,
            lpolestream
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleDoAutoConvert(
    pStg:  LPSTORAGE,
    pClsidNew:  LPCLSID    
) ->  HRESULT
{
    unsafe {
        return OleDoAutoConvert(
            pStg,
            pClsidNew
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleGetAutoConvert(
    clsidOld: *const IID,
    pClsidNew:  LPCLSID    
) ->  HRESULT
{
    unsafe {
        return OleGetAutoConvert(
            clsidOld,
            pClsidNew
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleSetAutoConvert(
    clsidOld: *const IID,
    clsidNew: *const IID    
) ->  HRESULT
{
    unsafe {
        return OleSetAutoConvert(
            clsidOld,
            clsidNew
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetConvertStg(
    pStg:  LPSTORAGE,
    fConvert:  BOOL    
) ->  HRESULT
{
    unsafe {
        return SetConvertStg(
            pStg,
            fConvert
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleConvertIStorageToOLESTREAMEx(
    pstg:  LPSTORAGE,
    cfFormat:  CLIPFORMAT,
    lWidth:  LONG,
    lHeight:  LONG,
    dwSize:  DWORD,
    pmedium:  LPSTGMEDIUM,
    polestm:  LPOLESTREAM    
) ->  HRESULT
{
    unsafe {
        return OleConvertIStorageToOLESTREAMEx(
            pstg,
            cfFormat,
            lWidth,
            lHeight,
            dwSize,
            pmedium,
            polestm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OleConvertOLESTREAMToIStorageEx(
    polestm:  LPOLESTREAM,
    pstg:  LPSTORAGE,
    pcfFormat: *mut CLIPFORMAT,
    plwWidth: *mut LONG,
    plHeight: *mut LONG,
    pdwSize: *mut DWORD,
    pmedium:  LPSTGMEDIUM    
) ->  HRESULT
{
    unsafe {
        return OleConvertOLESTREAMToIStorageEx(
            polestm,
            pstg,
            pcfFormat,
            plwWidth,
            plHeight,
            pdwSize,
            pmedium
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOpenFileNameA(
    arg1:  LPOPENFILENAMEA    
) ->  BOOL
{
    unsafe {
        return GetOpenFileNameA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetOpenFileNameW(
    arg1:  LPOPENFILENAMEW    
) ->  BOOL
{
    unsafe {
        return GetOpenFileNameW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSaveFileNameA(
    arg1:  LPOPENFILENAMEA    
) ->  BOOL
{
    unsafe {
        return GetSaveFileNameA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetSaveFileNameW(
    arg1:  LPOPENFILENAMEW    
) ->  BOOL
{
    unsafe {
        return GetSaveFileNameW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileTitleA(
    arg1:  LPCSTR,
    Buf:  LPSTR,
    cchSize:  WORD    
) ->  c_short
{
    unsafe {
        return GetFileTitleA(
            arg1,
            Buf,
            cchSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetFileTitleW(
    arg1:  LPCWSTR,
    Buf:  LPWSTR,
    cchSize:  WORD    
) ->  c_short
{
    unsafe {
        return GetFileTitleW(
            arg1,
            Buf,
            cchSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChooseColorA(
    arg1:  LPCHOOSECOLORA    
) ->  BOOL
{
    unsafe {
        return ChooseColorA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChooseColorW(
    arg1:  LPCHOOSECOLORW    
) ->  BOOL
{
    unsafe {
        return ChooseColorW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindTextA(
    arg1:  LPFINDREPLACEA    
) ->  HWND
{
    unsafe {
        return FindTextA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FindTextW(
    arg1:  LPFINDREPLACEW    
) ->  HWND
{
    unsafe {
        return FindTextW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReplaceTextA(
    arg1:  LPFINDREPLACEA    
) ->  HWND
{
    unsafe {
        return ReplaceTextA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ReplaceTextW(
    arg1:  LPFINDREPLACEW    
) ->  HWND
{
    unsafe {
        return ReplaceTextW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChooseFontA(
    arg1:  LPCHOOSEFONTA    
) ->  BOOL
{
    unsafe {
        return ChooseFontA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChooseFontW(
    arg1:  LPCHOOSEFONTW    
) ->  BOOL
{
    unsafe {
        return ChooseFontW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrintDlgA(
    pPD:  LPPRINTDLGA    
) ->  BOOL
{
    unsafe {
        return PrintDlgA(
            pPD
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrintDlgW(
    pPD:  LPPRINTDLGW    
) ->  BOOL
{
    unsafe {
        return PrintDlgW(
            pPD
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrintDlgExA(
    pPD:  LPPRINTDLGEXA    
) ->  HRESULT
{
    unsafe {
        return PrintDlgExA(
            pPD
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PrintDlgExW(
    pPD:  LPPRINTDLGEXW    
) ->  HRESULT
{
    unsafe {
        return PrintDlgExW(
            pPD
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CommDlgExtendedError(
    
) ->  DWORD
{
    unsafe {
        return CommDlgExtendedError(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PageSetupDlgA(
    arg1:  LPPAGESETUPDLGA    
) ->  BOOL
{
    unsafe {
        return PageSetupDlgA(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_PageSetupDlgW(
    arg1:  LPPAGESETUPDLGW    
) ->  BOOL
{
    unsafe {
        return PageSetupDlgW(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_CharUpperW(
    String:  LPUWSTR    
) ->  LPUWSTR
{
    unsafe {
        return uaw_CharUpperW(
            String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_lstrcmpW(
    String1:  PCUWSTR,
    String2:  PCUWSTR    
) ->  c_int
{
    unsafe {
        return uaw_lstrcmpW(
            String1,
            String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_lstrcmpiW(
    String1:  PCUWSTR,
    String2:  PCUWSTR    
) ->  c_int
{
    unsafe {
        return uaw_lstrcmpiW(
            String1,
            String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_lstrlenW(
    String:  LPCUWSTR    
) ->  c_int
{
    unsafe {
        return uaw_lstrlenW(
            String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_wcschr(
    String:  PCUWSTR,
    Character:  WCHAR    
) ->  PUWSTR
{
    unsafe {
        return uaw_wcschr(
            String,
            Character
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_wcscpy(
    Destination:  PUWSTR,
    Source:  PCUWSTR    
) ->  PUWSTR
{
    unsafe {
        return uaw_wcscpy(
            Destination,
            Source
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_wcsicmp(
    String1:  PCUWSTR,
    String2:  PCUWSTR    
) ->  c_int
{
    unsafe {
        return uaw_wcsicmp(
            String1,
            String2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_wcslen(
    String:  PCUWSTR    
) ->  usize
{
    unsafe {
        return uaw_wcslen(
            String
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_uaw_wcsrchr(
    String:  PCUWSTR,
    Character:  WCHAR    
) ->  PUWSTR
{
    unsafe {
        return uaw_wcsrchr(
            String,
            Character
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeServiceConfigA(
    hService:  SC_HANDLE,
    dwServiceType:  DWORD,
    dwStartType:  DWORD,
    dwErrorControl:  DWORD,
    lpBinaryPathName:  LPCSTR,
    lpLoadOrderGroup:  LPCSTR,
    lpdwTagId:  LPDWORD,
    lpDependencies:  LPCSTR,
    lpServiceStartName:  LPCSTR,
    lpPassword:  LPCSTR,
    lpDisplayName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return ChangeServiceConfigA(
            hService,
            dwServiceType,
            dwStartType,
            dwErrorControl,
            lpBinaryPathName,
            lpLoadOrderGroup,
            lpdwTagId,
            lpDependencies,
            lpServiceStartName,
            lpPassword,
            lpDisplayName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeServiceConfigW(
    hService:  SC_HANDLE,
    dwServiceType:  DWORD,
    dwStartType:  DWORD,
    dwErrorControl:  DWORD,
    lpBinaryPathName:  LPCWSTR,
    lpLoadOrderGroup:  LPCWSTR,
    lpdwTagId:  LPDWORD,
    lpDependencies:  LPCWSTR,
    lpServiceStartName:  LPCWSTR,
    lpPassword:  LPCWSTR,
    lpDisplayName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return ChangeServiceConfigW(
            hService,
            dwServiceType,
            dwStartType,
            dwErrorControl,
            lpBinaryPathName,
            lpLoadOrderGroup,
            lpdwTagId,
            lpDependencies,
            lpServiceStartName,
            lpPassword,
            lpDisplayName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeServiceConfig2A(
    hService:  SC_HANDLE,
    dwInfoLevel:  DWORD,
    lpInfo:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ChangeServiceConfig2A(
            hService,
            dwInfoLevel,
            lpInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ChangeServiceConfig2W(
    hService:  SC_HANDLE,
    dwInfoLevel:  DWORD,
    lpInfo:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ChangeServiceConfig2W(
            hService,
            dwInfoLevel,
            lpInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CloseServiceHandle(
    hSCObject:  SC_HANDLE    
) ->  BOOL
{
    unsafe {
        return CloseServiceHandle(
            hSCObject
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ControlService(
    hService:  SC_HANDLE,
    dwControl:  DWORD,
    lpServiceStatus:  LPSERVICE_STATUS    
) ->  BOOL
{
    unsafe {
        return ControlService(
            hService,
            dwControl,
            lpServiceStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateServiceA(
    hSCManager:  SC_HANDLE,
    lpServiceName:  LPCSTR,
    lpDisplayName:  LPCSTR,
    dwDesiredAccess:  DWORD,
    dwServiceType:  DWORD,
    dwStartType:  DWORD,
    dwErrorControl:  DWORD,
    lpBinaryPathName:  LPCSTR,
    lpLoadOrderGroup:  LPCSTR,
    lpdwTagId:  LPDWORD,
    lpDependencies:  LPCSTR,
    lpServiceStartName:  LPCSTR,
    lpPassword:  LPCSTR    
) ->  SC_HANDLE
{
    unsafe {
        return CreateServiceA(
            hSCManager,
            lpServiceName,
            lpDisplayName,
            dwDesiredAccess,
            dwServiceType,
            dwStartType,
            dwErrorControl,
            lpBinaryPathName,
            lpLoadOrderGroup,
            lpdwTagId,
            lpDependencies,
            lpServiceStartName,
            lpPassword
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_CreateServiceW(
    hSCManager:  SC_HANDLE,
    lpServiceName:  LPCWSTR,
    lpDisplayName:  LPCWSTR,
    dwDesiredAccess:  DWORD,
    dwServiceType:  DWORD,
    dwStartType:  DWORD,
    dwErrorControl:  DWORD,
    lpBinaryPathName:  LPCWSTR,
    lpLoadOrderGroup:  LPCWSTR,
    lpdwTagId:  LPDWORD,
    lpDependencies:  LPCWSTR,
    lpServiceStartName:  LPCWSTR,
    lpPassword:  LPCWSTR    
) ->  SC_HANDLE
{
    unsafe {
        return CreateServiceW(
            hSCManager,
            lpServiceName,
            lpDisplayName,
            dwDesiredAccess,
            dwServiceType,
            dwStartType,
            dwErrorControl,
            lpBinaryPathName,
            lpLoadOrderGroup,
            lpdwTagId,
            lpDependencies,
            lpServiceStartName,
            lpPassword
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_DeleteService(
    hService:  SC_HANDLE    
) ->  BOOL
{
    unsafe {
        return DeleteService(
            hService
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDependentServicesA(
    hService:  SC_HANDLE,
    dwServiceState:  DWORD,
    lpServices:  LPENUM_SERVICE_STATUSA,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD,
    lpServicesReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumDependentServicesA(
            hService,
            dwServiceState,
            lpServices,
            cbBufSize,
            pcbBytesNeeded,
            lpServicesReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumDependentServicesW(
    hService:  SC_HANDLE,
    dwServiceState:  DWORD,
    lpServices:  LPENUM_SERVICE_STATUSW,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD,
    lpServicesReturned:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumDependentServicesW(
            hService,
            dwServiceState,
            lpServices,
            cbBufSize,
            pcbBytesNeeded,
            lpServicesReturned
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumServicesStatusA(
    hSCManager:  SC_HANDLE,
    dwServiceType:  DWORD,
    dwServiceState:  DWORD,
    lpServices:  LPENUM_SERVICE_STATUSA,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD,
    lpServicesReturned:  LPDWORD,
    lpResumeHandle:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumServicesStatusA(
            hSCManager,
            dwServiceType,
            dwServiceState,
            lpServices,
            cbBufSize,
            pcbBytesNeeded,
            lpServicesReturned,
            lpResumeHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumServicesStatusW(
    hSCManager:  SC_HANDLE,
    dwServiceType:  DWORD,
    dwServiceState:  DWORD,
    lpServices:  LPENUM_SERVICE_STATUSW,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD,
    lpServicesReturned:  LPDWORD,
    lpResumeHandle:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return EnumServicesStatusW(
            hSCManager,
            dwServiceType,
            dwServiceState,
            lpServices,
            cbBufSize,
            pcbBytesNeeded,
            lpServicesReturned,
            lpResumeHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumServicesStatusExA(
    hSCManager:  SC_HANDLE,
    InfoLevel:  SC_ENUM_TYPE,
    dwServiceType:  DWORD,
    dwServiceState:  DWORD,
    lpServices:  LPBYTE,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD,
    lpServicesReturned:  LPDWORD,
    lpResumeHandle:  LPDWORD,
    pszGroupName:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return EnumServicesStatusExA(
            hSCManager,
            InfoLevel,
            dwServiceType,
            dwServiceState,
            lpServices,
            cbBufSize,
            pcbBytesNeeded,
            lpServicesReturned,
            lpResumeHandle,
            pszGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_EnumServicesStatusExW(
    hSCManager:  SC_HANDLE,
    InfoLevel:  SC_ENUM_TYPE,
    dwServiceType:  DWORD,
    dwServiceState:  DWORD,
    lpServices:  LPBYTE,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD,
    lpServicesReturned:  LPDWORD,
    lpResumeHandle:  LPDWORD,
    pszGroupName:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return EnumServicesStatusExW(
            hSCManager,
            InfoLevel,
            dwServiceType,
            dwServiceState,
            lpServices,
            cbBufSize,
            pcbBytesNeeded,
            lpServicesReturned,
            lpResumeHandle,
            pszGroupName
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetServiceKeyNameA(
    hSCManager:  SC_HANDLE,
    lpDisplayName:  LPCSTR,
    lpServiceName:  LPSTR,
    lpcchBuffer:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetServiceKeyNameA(
            hSCManager,
            lpDisplayName,
            lpServiceName,
            lpcchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetServiceKeyNameW(
    hSCManager:  SC_HANDLE,
    lpDisplayName:  LPCWSTR,
    lpServiceName:  LPWSTR,
    lpcchBuffer:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetServiceKeyNameW(
            hSCManager,
            lpDisplayName,
            lpServiceName,
            lpcchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetServiceDisplayNameA(
    hSCManager:  SC_HANDLE,
    lpServiceName:  LPCSTR,
    lpDisplayName:  LPSTR,
    lpcchBuffer:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetServiceDisplayNameA(
            hSCManager,
            lpServiceName,
            lpDisplayName,
            lpcchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetServiceDisplayNameW(
    hSCManager:  SC_HANDLE,
    lpServiceName:  LPCWSTR,
    lpDisplayName:  LPWSTR,
    lpcchBuffer:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return GetServiceDisplayNameW(
            hSCManager,
            lpServiceName,
            lpDisplayName,
            lpcchBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_LockServiceDatabase(
    hSCManager:  SC_HANDLE    
) ->  SC_LOCK
{
    unsafe {
        return LockServiceDatabase(
            hSCManager
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NotifyBootConfigStatus(
    BootAcceptable:  BOOL    
) ->  BOOL
{
    unsafe {
        return NotifyBootConfigStatus(
            BootAcceptable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenSCManagerA(
    lpMachineName:  LPCSTR,
    lpDatabaseName:  LPCSTR,
    dwDesiredAccess:  DWORD    
) ->  SC_HANDLE
{
    unsafe {
        return OpenSCManagerA(
            lpMachineName,
            lpDatabaseName,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenSCManagerW(
    lpMachineName:  LPCWSTR,
    lpDatabaseName:  LPCWSTR,
    dwDesiredAccess:  DWORD    
) ->  SC_HANDLE
{
    unsafe {
        return OpenSCManagerW(
            lpMachineName,
            lpDatabaseName,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenServiceA(
    hSCManager:  SC_HANDLE,
    lpServiceName:  LPCSTR,
    dwDesiredAccess:  DWORD    
) ->  SC_HANDLE
{
    unsafe {
        return OpenServiceA(
            hSCManager,
            lpServiceName,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_OpenServiceW(
    hSCManager:  SC_HANDLE,
    lpServiceName:  LPCWSTR,
    dwDesiredAccess:  DWORD    
) ->  SC_HANDLE
{
    unsafe {
        return OpenServiceW(
            hSCManager,
            lpServiceName,
            dwDesiredAccess
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceConfigA(
    hService:  SC_HANDLE,
    lpServiceConfig:  LPQUERY_SERVICE_CONFIGA,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryServiceConfigA(
            hService,
            lpServiceConfig,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceConfigW(
    hService:  SC_HANDLE,
    lpServiceConfig:  LPQUERY_SERVICE_CONFIGW,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryServiceConfigW(
            hService,
            lpServiceConfig,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceConfig2A(
    hService:  SC_HANDLE,
    dwInfoLevel:  DWORD,
    lpBuffer:  LPBYTE,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryServiceConfig2A(
            hService,
            dwInfoLevel,
            lpBuffer,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceConfig2W(
    hService:  SC_HANDLE,
    dwInfoLevel:  DWORD,
    lpBuffer:  LPBYTE,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryServiceConfig2W(
            hService,
            dwInfoLevel,
            lpBuffer,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceLockStatusA(
    hSCManager:  SC_HANDLE,
    lpLockStatus:  LPQUERY_SERVICE_LOCK_STATUSA,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryServiceLockStatusA(
            hSCManager,
            lpLockStatus,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceLockStatusW(
    hSCManager:  SC_HANDLE,
    lpLockStatus:  LPQUERY_SERVICE_LOCK_STATUSW,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryServiceLockStatusW(
            hSCManager,
            lpLockStatus,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceObjectSecurity(
    hService:  SC_HANDLE,
    dwSecurityInformation:  SECURITY_INFORMATION,
    lpSecurityDescriptor:  PSECURITY_DESCRIPTOR,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryServiceObjectSecurity(
            hService,
            dwSecurityInformation,
            lpSecurityDescriptor,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceStatus(
    hService:  SC_HANDLE,
    lpServiceStatus:  LPSERVICE_STATUS    
) ->  BOOL
{
    unsafe {
        return QueryServiceStatus(
            hService,
            lpServiceStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceStatusEx(
    hService:  SC_HANDLE,
    InfoLevel:  SC_STATUS_TYPE,
    lpBuffer:  LPBYTE,
    cbBufSize:  DWORD,
    pcbBytesNeeded:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return QueryServiceStatusEx(
            hService,
            InfoLevel,
            lpBuffer,
            cbBufSize,
            pcbBytesNeeded
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterServiceCtrlHandlerA(
    lpServiceName:  LPCSTR,
    lpHandlerProc:  LPHANDLER_FUNCTION    
) ->  SERVICE_STATUS_HANDLE
{
    unsafe {
        return RegisterServiceCtrlHandlerA(
            lpServiceName,
            lpHandlerProc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterServiceCtrlHandlerW(
    lpServiceName:  LPCWSTR,
    lpHandlerProc:  LPHANDLER_FUNCTION    
) ->  SERVICE_STATUS_HANDLE
{
    unsafe {
        return RegisterServiceCtrlHandlerW(
            lpServiceName,
            lpHandlerProc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterServiceCtrlHandlerExA(
    lpServiceName:  LPCSTR,
    lpHandlerProc:  LPHANDLER_FUNCTION_EX,
    lpContext:  LPVOID    
) ->  SERVICE_STATUS_HANDLE
{
    unsafe {
        return RegisterServiceCtrlHandlerExA(
            lpServiceName,
            lpHandlerProc,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_RegisterServiceCtrlHandlerExW(
    lpServiceName:  LPCWSTR,
    lpHandlerProc:  LPHANDLER_FUNCTION_EX,
    lpContext:  LPVOID    
) ->  SERVICE_STATUS_HANDLE
{
    unsafe {
        return RegisterServiceCtrlHandlerExW(
            lpServiceName,
            lpHandlerProc,
            lpContext
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetServiceObjectSecurity(
    hService:  SC_HANDLE,
    dwSecurityInformation:  SECURITY_INFORMATION,
    lpSecurityDescriptor:  PSECURITY_DESCRIPTOR    
) ->  BOOL
{
    unsafe {
        return SetServiceObjectSecurity(
            hService,
            dwSecurityInformation,
            lpSecurityDescriptor
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetServiceStatus(
    hServiceStatus:  SERVICE_STATUS_HANDLE,
    lpServiceStatus:  LPSERVICE_STATUS    
) ->  BOOL
{
    unsafe {
        return SetServiceStatus(
            hServiceStatus,
            lpServiceStatus
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartServiceCtrlDispatcherA(
    lpServiceStartTable: *const SERVICE_TABLE_ENTRYA    
) ->  BOOL
{
    unsafe {
        return StartServiceCtrlDispatcherA(
            lpServiceStartTable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartServiceCtrlDispatcherW(
    lpServiceStartTable: *const SERVICE_TABLE_ENTRYW    
) ->  BOOL
{
    unsafe {
        return StartServiceCtrlDispatcherW(
            lpServiceStartTable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartServiceA(
    hService:  SC_HANDLE,
    dwNumServiceArgs:  DWORD,
    lpServiceArgVectors: *mut LPCSTR    
) ->  BOOL
{
    unsafe {
        return StartServiceA(
            hService,
            dwNumServiceArgs,
            lpServiceArgVectors
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_StartServiceW(
    hService:  SC_HANDLE,
    dwNumServiceArgs:  DWORD,
    lpServiceArgVectors: *mut LPCWSTR    
) ->  BOOL
{
    unsafe {
        return StartServiceW(
            hService,
            dwNumServiceArgs,
            lpServiceArgVectors
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnlockServiceDatabase(
    ScLock:  SC_LOCK    
) ->  BOOL
{
    unsafe {
        return UnlockServiceDatabase(
            ScLock
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NotifyServiceStatusChangeA(
    hService:  SC_HANDLE,
    dwNotifyMask:  DWORD,
    pNotifyBuffer:  PSERVICE_NOTIFYA    
) ->  DWORD
{
    unsafe {
        return NotifyServiceStatusChangeA(
            hService,
            dwNotifyMask,
            pNotifyBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_NotifyServiceStatusChangeW(
    hService:  SC_HANDLE,
    dwNotifyMask:  DWORD,
    pNotifyBuffer:  PSERVICE_NOTIFYW    
) ->  DWORD
{
    unsafe {
        return NotifyServiceStatusChangeW(
            hService,
            dwNotifyMask,
            pNotifyBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ControlServiceExA(
    hService:  SC_HANDLE,
    dwControl:  DWORD,
    dwInfoLevel:  DWORD,
    pControlParams:  PVOID    
) ->  BOOL
{
    unsafe {
        return ControlServiceExA(
            hService,
            dwControl,
            dwInfoLevel,
            pControlParams
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ControlServiceExW(
    hService:  SC_HANDLE,
    dwControl:  DWORD,
    dwInfoLevel:  DWORD,
    pControlParams:  PVOID    
) ->  BOOL
{
    unsafe {
        return ControlServiceExW(
            hService,
            dwControl,
            dwInfoLevel,
            pControlParams
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_QueryServiceDynamicInformation(
    hServiceStatus:  SERVICE_STATUS_HANDLE,
    dwInfoLevel:  DWORD,
    ppDynamicInfo: *mut PVOID    
) ->  BOOL
{
    unsafe {
        return QueryServiceDynamicInformation(
            hServiceStatus,
            dwInfoLevel,
            ppDynamicInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SubscribeServiceChangeNotifications(
    hService:  SC_HANDLE,
    eEventType:  SC_EVENT_TYPE,
    pCallback:  PSC_NOTIFICATION_CALLBACK,
    pCallbackContext:  PVOID,
    pSubscription: *mut PSC_NOTIFICATION_REGISTRATION    
) ->  DWORD
{
    unsafe {
        return SubscribeServiceChangeNotifications(
            hService,
            eEventType,
            pCallback,
            pCallbackContext,
            pSubscription
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_UnsubscribeServiceChangeNotifications(
    pSubscription:  PSC_NOTIFICATION_REGISTRATION    
)
{
    unsafe {
        return UnsubscribeServiceChangeNotifications(
            pSubscription
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WaitServiceState(
    hService:  SC_HANDLE,
    dwNotify:  DWORD,
    dwTimeout:  DWORD,
    hCancelEvent:  HANDLE    
) ->  DWORD
{
    unsafe {
        return WaitServiceState(
            hService,
            dwNotify,
            dwTimeout,
            hCancelEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetServiceRegistryStateKey(
    ServiceStatusHandle:  SERVICE_STATUS_HANDLE,
    StateType:  SERVICE_REGISTRY_STATE_TYPE,
    AccessMask:  DWORD,
    ServiceStateKey: *mut HKEY    
) ->  DWORD
{
    unsafe {
        return GetServiceRegistryStateKey(
            ServiceStatusHandle,
            StateType,
            AccessMask,
            ServiceStateKey
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetServiceDirectory(
    hServiceStatus:  SERVICE_STATUS_HANDLE,
    eDirectoryType:  SERVICE_DIRECTORY_TYPE,
    lpPathBuffer:  PWCHAR,
    cchPathBufferLength:  DWORD,
    lpcchRequiredBufferLength: *mut DWORD    
) ->  DWORD
{
    unsafe {
        return GetServiceDirectory(
            hServiceStatus,
            eDirectoryType,
            lpPathBuffer,
            cchPathBufferLength,
            lpcchRequiredBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmInstallIMEA(
    lpszIMEFileName:  LPCSTR,
    lpszLayoutText:  LPCSTR    
) ->  HKL
{
    unsafe {
        return ImmInstallIMEA(
            lpszIMEFileName,
            lpszLayoutText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmInstallIMEW(
    lpszIMEFileName:  LPCWSTR,
    lpszLayoutText:  LPCWSTR    
) ->  HKL
{
    unsafe {
        return ImmInstallIMEW(
            lpszIMEFileName,
            lpszLayoutText
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetDefaultIMEWnd(
    arg1:  HWND    
) ->  HWND
{
    unsafe {
        return ImmGetDefaultIMEWnd(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetDescriptionA(
    arg1:  HKL,
    lpszDescription:  LPSTR,
    uBufLen:  UINT    
) ->  UINT
{
    unsafe {
        return ImmGetDescriptionA(
            arg1,
            lpszDescription,
            uBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetDescriptionW(
    arg1:  HKL,
    lpszDescription:  LPWSTR,
    uBufLen:  UINT    
) ->  UINT
{
    unsafe {
        return ImmGetDescriptionW(
            arg1,
            lpszDescription,
            uBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetIMEFileNameA(
    arg1:  HKL,
    lpszFileName:  LPSTR,
    uBufLen:  UINT    
) ->  UINT
{
    unsafe {
        return ImmGetIMEFileNameA(
            arg1,
            lpszFileName,
            uBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetIMEFileNameW(
    arg1:  HKL,
    lpszFileName:  LPWSTR,
    uBufLen:  UINT    
) ->  UINT
{
    unsafe {
        return ImmGetIMEFileNameW(
            arg1,
            lpszFileName,
            uBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetProperty(
    arg1:  HKL,
    arg2:  DWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetProperty(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmIsIME(
    arg1:  HKL    
) ->  BOOL
{
    unsafe {
        return ImmIsIME(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSimulateHotKey(
    arg1:  HWND,
    arg2:  DWORD    
) ->  BOOL
{
    unsafe {
        return ImmSimulateHotKey(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmCreateContext(
    
) ->  HIMC
{
    unsafe {
        return ImmCreateContext(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmDestroyContext(
    arg1:  HIMC    
) ->  BOOL
{
    unsafe {
        return ImmDestroyContext(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetContext(
    arg1:  HWND    
) ->  HIMC
{
    unsafe {
        return ImmGetContext(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmReleaseContext(
    arg1:  HWND,
    arg2:  HIMC    
) ->  BOOL
{
    unsafe {
        return ImmReleaseContext(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmAssociateContext(
    arg1:  HWND,
    arg2:  HIMC    
) ->  HIMC
{
    unsafe {
        return ImmAssociateContext(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmAssociateContextEx(
    arg1:  HWND,
    arg2:  HIMC,
    arg3:  DWORD    
) ->  BOOL
{
    unsafe {
        return ImmAssociateContextEx(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCompositionStringA(
    arg1:  HIMC,
    arg2:  DWORD,
    lpBuf:  LPVOID,
    dwBufLen:  DWORD    
) ->  LONG
{
    unsafe {
        return ImmGetCompositionStringA(
            arg1,
            arg2,
            lpBuf,
            dwBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCompositionStringW(
    arg1:  HIMC,
    arg2:  DWORD,
    lpBuf:  LPVOID,
    dwBufLen:  DWORD    
) ->  LONG
{
    unsafe {
        return ImmGetCompositionStringW(
            arg1,
            arg2,
            lpBuf,
            dwBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetCompositionStringA(
    arg1:  HIMC,
    dwIndex:  DWORD,
    lpComp:  LPVOID,
    dwCompLen:  DWORD,
    lpRead:  LPVOID,
    dwReadLen:  DWORD    
) ->  BOOL
{
    unsafe {
        return ImmSetCompositionStringA(
            arg1,
            dwIndex,
            lpComp,
            dwCompLen,
            lpRead,
            dwReadLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetCompositionStringW(
    arg1:  HIMC,
    dwIndex:  DWORD,
    lpComp:  LPVOID,
    dwCompLen:  DWORD,
    lpRead:  LPVOID,
    dwReadLen:  DWORD    
) ->  BOOL
{
    unsafe {
        return ImmSetCompositionStringW(
            arg1,
            dwIndex,
            lpComp,
            dwCompLen,
            lpRead,
            dwReadLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCandidateListCountA(
    arg1:  HIMC,
    lpdwListCount:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetCandidateListCountA(
            arg1,
            lpdwListCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCandidateListCountW(
    arg1:  HIMC,
    lpdwListCount:  LPDWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetCandidateListCountW(
            arg1,
            lpdwListCount
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCandidateListA(
    arg1:  HIMC,
    deIndex:  DWORD,
    lpCandList:  LPCANDIDATELIST,
    dwBufLen:  DWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetCandidateListA(
            arg1,
            deIndex,
            lpCandList,
            dwBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCandidateListW(
    arg1:  HIMC,
    deIndex:  DWORD,
    lpCandList:  LPCANDIDATELIST,
    dwBufLen:  DWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetCandidateListW(
            arg1,
            deIndex,
            lpCandList,
            dwBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetGuideLineA(
    arg1:  HIMC,
    dwIndex:  DWORD,
    lpBuf:  LPSTR,
    dwBufLen:  DWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetGuideLineA(
            arg1,
            dwIndex,
            lpBuf,
            dwBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetGuideLineW(
    arg1:  HIMC,
    dwIndex:  DWORD,
    lpBuf:  LPWSTR,
    dwBufLen:  DWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetGuideLineW(
            arg1,
            dwIndex,
            lpBuf,
            dwBufLen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetConversionStatus(
    arg1:  HIMC,
    lpfdwConversion:  LPDWORD,
    lpfdwSentence:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return ImmGetConversionStatus(
            arg1,
            lpfdwConversion,
            lpfdwSentence
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetConversionStatus(
    arg1:  HIMC,
    arg2:  DWORD,
    arg3:  DWORD    
) ->  BOOL
{
    unsafe {
        return ImmSetConversionStatus(
            arg1,
            arg2,
            arg3
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetOpenStatus(
    arg1:  HIMC    
) ->  BOOL
{
    unsafe {
        return ImmGetOpenStatus(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetOpenStatus(
    arg1:  HIMC,
    arg2:  BOOL    
) ->  BOOL
{
    unsafe {
        return ImmSetOpenStatus(
            arg1,
            arg2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCompositionFontA(
    arg1:  HIMC,
    lplf:  LPLOGFONTA    
) ->  BOOL
{
    unsafe {
        return ImmGetCompositionFontA(
            arg1,
            lplf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCompositionFontW(
    arg1:  HIMC,
    lplf:  LPLOGFONTW    
) ->  BOOL
{
    unsafe {
        return ImmGetCompositionFontW(
            arg1,
            lplf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetCompositionFontA(
    arg1:  HIMC,
    lplf:  LPLOGFONTA    
) ->  BOOL
{
    unsafe {
        return ImmSetCompositionFontA(
            arg1,
            lplf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetCompositionFontW(
    arg1:  HIMC,
    lplf:  LPLOGFONTW    
) ->  BOOL
{
    unsafe {
        return ImmSetCompositionFontW(
            arg1,
            lplf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmConfigureIMEA(
    arg1:  HKL,
    arg2:  HWND,
    arg3:  DWORD,
    arg4:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ImmConfigureIMEA(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmConfigureIMEW(
    arg1:  HKL,
    arg2:  HWND,
    arg3:  DWORD,
    arg4:  LPVOID    
) ->  BOOL
{
    unsafe {
        return ImmConfigureIMEW(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmEscapeA(
    arg1:  HKL,
    arg2:  HIMC,
    arg3:  UINT,
    arg4:  LPVOID    
) ->  LRESULT
{
    unsafe {
        return ImmEscapeA(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmEscapeW(
    arg1:  HKL,
    arg2:  HIMC,
    arg3:  UINT,
    arg4:  LPVOID    
) ->  LRESULT
{
    unsafe {
        return ImmEscapeW(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetConversionListA(
    arg1:  HKL,
    arg2:  HIMC,
    lpSrc:  LPCSTR,
    lpDst:  LPCANDIDATELIST,
    dwBufLen:  DWORD,
    uFlag:  UINT    
) ->  DWORD
{
    unsafe {
        return ImmGetConversionListA(
            arg1,
            arg2,
            lpSrc,
            lpDst,
            dwBufLen,
            uFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetConversionListW(
    arg1:  HKL,
    arg2:  HIMC,
    lpSrc:  LPCWSTR,
    lpDst:  LPCANDIDATELIST,
    dwBufLen:  DWORD,
    uFlag:  UINT    
) ->  DWORD
{
    unsafe {
        return ImmGetConversionListW(
            arg1,
            arg2,
            lpSrc,
            lpDst,
            dwBufLen,
            uFlag
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmNotifyIME(
    arg1:  HIMC,
    dwAction:  DWORD,
    dwIndex:  DWORD,
    dwValue:  DWORD    
) ->  BOOL
{
    unsafe {
        return ImmNotifyIME(
            arg1,
            dwAction,
            dwIndex,
            dwValue
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetStatusWindowPos(
    arg1:  HIMC,
    lpptPos:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return ImmGetStatusWindowPos(
            arg1,
            lpptPos
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetStatusWindowPos(
    arg1:  HIMC,
    lpptPos:  LPPOINT    
) ->  BOOL
{
    unsafe {
        return ImmSetStatusWindowPos(
            arg1,
            lpptPos
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCompositionWindow(
    arg1:  HIMC,
    lpCompForm:  LPCOMPOSITIONFORM    
) ->  BOOL
{
    unsafe {
        return ImmGetCompositionWindow(
            arg1,
            lpCompForm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetCompositionWindow(
    arg1:  HIMC,
    lpCompForm:  LPCOMPOSITIONFORM    
) ->  BOOL
{
    unsafe {
        return ImmSetCompositionWindow(
            arg1,
            lpCompForm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetCandidateWindow(
    arg1:  HIMC,
    arg2:  DWORD,
    lpCandidate:  LPCANDIDATEFORM    
) ->  BOOL
{
    unsafe {
        return ImmGetCandidateWindow(
            arg1,
            arg2,
            lpCandidate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmSetCandidateWindow(
    arg1:  HIMC,
    lpCandidate:  LPCANDIDATEFORM    
) ->  BOOL
{
    unsafe {
        return ImmSetCandidateWindow(
            arg1,
            lpCandidate
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmIsUIMessageA(
    arg1:  HWND,
    arg2:  UINT,
    arg3:  WPARAM,
    arg4:  LPARAM    
) ->  BOOL
{
    unsafe {
        return ImmIsUIMessageA(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmIsUIMessageW(
    arg1:  HWND,
    arg2:  UINT,
    arg3:  WPARAM,
    arg4:  LPARAM    
) ->  BOOL
{
    unsafe {
        return ImmIsUIMessageW(
            arg1,
            arg2,
            arg3,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetVirtualKey(
    arg1:  HWND    
) ->  UINT
{
    unsafe {
        return ImmGetVirtualKey(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmRegisterWordA(
    arg1:  HKL,
    lpszReading:  LPCSTR,
    arg2:  DWORD,
    lpszRegister:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return ImmRegisterWordA(
            arg1,
            lpszReading,
            arg2,
            lpszRegister
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmRegisterWordW(
    arg1:  HKL,
    lpszReading:  LPCWSTR,
    arg2:  DWORD,
    lpszRegister:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return ImmRegisterWordW(
            arg1,
            lpszReading,
            arg2,
            lpszRegister
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmUnregisterWordA(
    arg1:  HKL,
    lpszReading:  LPCSTR,
    arg2:  DWORD,
    lpszUnregister:  LPCSTR    
) ->  BOOL
{
    unsafe {
        return ImmUnregisterWordA(
            arg1,
            lpszReading,
            arg2,
            lpszUnregister
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmUnregisterWordW(
    arg1:  HKL,
    lpszReading:  LPCWSTR,
    arg2:  DWORD,
    lpszUnregister:  LPCWSTR    
) ->  BOOL
{
    unsafe {
        return ImmUnregisterWordW(
            arg1,
            lpszReading,
            arg2,
            lpszUnregister
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetRegisterWordStyleA(
    arg1:  HKL,
    nItem:  UINT,
    lpStyleBuf:  LPSTYLEBUFA    
) ->  UINT
{
    unsafe {
        return ImmGetRegisterWordStyleA(
            arg1,
            nItem,
            lpStyleBuf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetRegisterWordStyleW(
    arg1:  HKL,
    nItem:  UINT,
    lpStyleBuf:  LPSTYLEBUFW    
) ->  UINT
{
    unsafe {
        return ImmGetRegisterWordStyleW(
            arg1,
            nItem,
            lpStyleBuf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmEnumRegisterWordA(
    arg1:  HKL,
    arg2:  REGISTERWORDENUMPROCA,
    lpszReading:  LPCSTR,
    arg3:  DWORD,
    lpszRegister:  LPCSTR,
    arg4:  LPVOID    
) ->  UINT
{
    unsafe {
        return ImmEnumRegisterWordA(
            arg1,
            arg2,
            lpszReading,
            arg3,
            lpszRegister,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmEnumRegisterWordW(
    arg1:  HKL,
    arg2:  REGISTERWORDENUMPROCW,
    lpszReading:  LPCWSTR,
    arg3:  DWORD,
    lpszRegister:  LPCWSTR,
    arg4:  LPVOID    
) ->  UINT
{
    unsafe {
        return ImmEnumRegisterWordW(
            arg1,
            arg2,
            lpszReading,
            arg3,
            lpszRegister,
            arg4
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmDisableIME(
    arg1:  DWORD    
) ->  BOOL
{
    unsafe {
        return ImmDisableIME(
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmEnumInputContext(
    idThread:  DWORD,
    lpfn:  IMCENUMPROC,
    lParam:  LPARAM    
) ->  BOOL
{
    unsafe {
        return ImmEnumInputContext(
            idThread,
            lpfn,
            lParam
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetImeMenuItemsA(
    arg1:  HIMC,
    arg2:  DWORD,
    arg3:  DWORD,
    lpImeParentMenu:  LPIMEMENUITEMINFOA,
    lpImeMenu:  LPIMEMENUITEMINFOA,
    dwSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetImeMenuItemsA(
            arg1,
            arg2,
            arg3,
            lpImeParentMenu,
            lpImeMenu,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmGetImeMenuItemsW(
    arg1:  HIMC,
    arg2:  DWORD,
    arg3:  DWORD,
    lpImeParentMenu:  LPIMEMENUITEMINFOW,
    lpImeMenu:  LPIMEMENUITEMINFOW,
    dwSize:  DWORD    
) ->  DWORD
{
    unsafe {
        return ImmGetImeMenuItemsW(
            arg1,
            arg2,
            arg3,
            lpImeParentMenu,
            lpImeMenu,
            dwSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmDisableTextFrameService(
    idThread:  DWORD    
) ->  BOOL
{
    unsafe {
        return ImmDisableTextFrameService(
            idThread
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ImmDisableLegacyIME(
    
) ->  BOOL
{
    unsafe {
        return ImmDisableLegacyIME(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___WSAFDIsSet(
    fd:  SOCKET,
    arg1: *mut fd_set    
) ->  c_int
{
    unsafe {
        return __WSAFDIsSet(
            fd,
            arg1
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_accept(
    s:  SOCKET,
    addr: *mut sockaddr,
    addrlen: *mut c_int    
) ->  SOCKET
{
    unsafe {
        return accept(
            s,
            addr,
            addrlen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_bind(
    s:  SOCKET,
    name: *const sockaddr,
    namelen:  c_int    
) ->  c_int
{
    unsafe {
        return bind(
            s,
            name,
            namelen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_closesocket(
    s:  SOCKET    
) ->  c_int
{
    unsafe {
        return closesocket(
            s
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_connect(
    s:  SOCKET,
    name: *const sockaddr,
    namelen:  c_int    
) ->  c_int
{
    unsafe {
        return connect(
            s,
            name,
            namelen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ioctlsocket(
    s:  SOCKET,
    cmd:  c_long,
    argp: *mut u_long    
) ->  c_int
{
    unsafe {
        return ioctlsocket(
            s,
            cmd,
            argp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getpeername(
    s:  SOCKET,
    name: *mut sockaddr,
    namelen: *mut c_int    
) ->  c_int
{
    unsafe {
        return getpeername(
            s,
            name,
            namelen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getsockname(
    s:  SOCKET,
    name: *mut sockaddr,
    namelen: *mut c_int    
) ->  c_int
{
    unsafe {
        return getsockname(
            s,
            name,
            namelen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getsockopt(
    s:  SOCKET,
    level:  c_int,
    optname:  c_int,
    optval: *mut c_char,
    optlen: *mut c_int    
) ->  c_int
{
    unsafe {
        return getsockopt(
            s,
            level,
            optname,
            optval,
            optlen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_htonl(
    hostlong:  u_long    
) ->  u_long
{
    unsafe {
        return htonl(
            hostlong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_htons(
    hostshort:  u_short    
) ->  u_short
{
    unsafe {
        return htons(
            hostshort
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_inet_addr(
    cp: *const c_char    
) ->  c_ulong
{
    unsafe {
        return inet_addr(
            cp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_inet_ntoa(
    in_:  in_addr    
) -> *mut c_char
{
    unsafe {
        return inet_ntoa(
            in_
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_listen(
    s:  SOCKET,
    backlog:  c_int    
) ->  c_int
{
    unsafe {
        return listen(
            s,
            backlog
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ntohl(
    netlong:  u_long    
) ->  u_long
{
    unsafe {
        return ntohl(
            netlong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_ntohs(
    netshort:  u_short    
) ->  u_short
{
    unsafe {
        return ntohs(
            netshort
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_recv(
    s:  SOCKET,
    buf: *mut c_char,
    len:  c_int,
    flags:  c_int    
) ->  c_int
{
    unsafe {
        return recv(
            s,
            buf,
            len,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_recvfrom(
    s:  SOCKET,
    buf: *mut c_char,
    len:  c_int,
    flags:  c_int,
    from: *mut sockaddr,
    fromlen: *mut c_int    
) ->  c_int
{
    unsafe {
        return recvfrom(
            s,
            buf,
            len,
            flags,
            from,
            fromlen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_select(
    nfds:  c_int,
    readfds: *mut fd_set,
    writefds: *mut fd_set,
    exceptfds: *mut fd_set,
    timeout: *const timeval    
) ->  c_int
{
    unsafe {
        return select(
            nfds,
            readfds,
            writefds,
            exceptfds,
            timeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_send(
    s:  SOCKET,
    buf: *const c_char,
    len:  c_int,
    flags:  c_int    
) ->  c_int
{
    unsafe {
        return send(
            s,
            buf,
            len,
            flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_sendto(
    s:  SOCKET,
    buf: *const c_char,
    len:  c_int,
    flags:  c_int,
    to: *const sockaddr,
    tolen:  c_int    
) ->  c_int
{
    unsafe {
        return sendto(
            s,
            buf,
            len,
            flags,
            to,
            tolen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_setsockopt(
    s:  SOCKET,
    level:  c_int,
    optname:  c_int,
    optval: *const c_char,
    optlen:  c_int    
) ->  c_int
{
    unsafe {
        return setsockopt(
            s,
            level,
            optname,
            optval,
            optlen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_shutdown(
    s:  SOCKET,
    how:  c_int    
) ->  c_int
{
    unsafe {
        return shutdown(
            s,
            how
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_socket(
    af:  c_int,
    type_:  c_int,
    protocol:  c_int    
) ->  SOCKET
{
    unsafe {
        return socket(
            af,
            type_,
            protocol
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_gethostbyaddr(
    addr: *const c_char,
    len:  c_int,
    type_:  c_int    
) -> *mut hostent
{
    unsafe {
        return gethostbyaddr(
            addr,
            len,
            type_
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_gethostbyname(
    name: *const c_char    
) -> *mut hostent
{
    unsafe {
        return gethostbyname(
            name
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_gethostname(
    name: *mut c_char,
    namelen:  c_int    
) ->  c_int
{
    unsafe {
        return gethostname(
            name,
            namelen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetHostNameW(
    name:  PWSTR,
    namelen:  c_int    
) ->  c_int
{
    unsafe {
        return GetHostNameW(
            name,
            namelen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getservbyport(
    port:  c_int,
    proto: *const c_char    
) -> *mut servent
{
    unsafe {
        return getservbyport(
            port,
            proto
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getservbyname(
    name: *const c_char,
    proto: *const c_char    
) -> *mut servent
{
    unsafe {
        return getservbyname(
            name,
            proto
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getprotobynumber(
    number:  c_int    
) -> *mut protoent
{
    unsafe {
        return getprotobynumber(
            number
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getprotobyname(
    name: *const c_char    
) -> *mut protoent
{
    unsafe {
        return getprotobyname(
            name
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAStartup(
    wVersionRequested:  WORD,
    lpWSAData:  LPWSADATA    
) ->  c_int
{
    unsafe {
        return WSAStartup(
            wVersionRequested,
            lpWSAData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSACleanup(
    
) ->  c_int
{
    unsafe {
        return WSACleanup(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASetLastError(
    iError:  c_int    
)
{
    unsafe {
        return WSASetLastError(
            iError
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAGetLastError(
    
) ->  c_int
{
    unsafe {
        return WSAGetLastError(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAIsBlocking(
    
) ->  BOOL
{
    unsafe {
        return WSAIsBlocking(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAUnhookBlockingHook(
    
) ->  c_int
{
    unsafe {
        return WSAUnhookBlockingHook(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASetBlockingHook(
    lpBlockFunc:  FARPROC    
) ->  FARPROC
{
    unsafe {
        return WSASetBlockingHook(
            lpBlockFunc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSACancelBlockingCall(
    
) ->  c_int
{
    unsafe {
        return WSACancelBlockingCall(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAsyncGetServByName(
    hWnd:  HWND,
    wMsg:  u_int,
    name: *const c_char,
    proto: *const c_char,
    buf: *mut c_char,
    buflen:  c_int    
) ->  HANDLE
{
    unsafe {
        return WSAAsyncGetServByName(
            hWnd,
            wMsg,
            name,
            proto,
            buf,
            buflen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAsyncGetServByPort(
    hWnd:  HWND,
    wMsg:  u_int,
    port:  c_int,
    proto: *const c_char,
    buf: *mut c_char,
    buflen:  c_int    
) ->  HANDLE
{
    unsafe {
        return WSAAsyncGetServByPort(
            hWnd,
            wMsg,
            port,
            proto,
            buf,
            buflen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAsyncGetProtoByName(
    hWnd:  HWND,
    wMsg:  u_int,
    name: *const c_char,
    buf: *mut c_char,
    buflen:  c_int    
) ->  HANDLE
{
    unsafe {
        return WSAAsyncGetProtoByName(
            hWnd,
            wMsg,
            name,
            buf,
            buflen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAsyncGetProtoByNumber(
    hWnd:  HWND,
    wMsg:  u_int,
    number:  c_int,
    buf: *mut c_char,
    buflen:  c_int    
) ->  HANDLE
{
    unsafe {
        return WSAAsyncGetProtoByNumber(
            hWnd,
            wMsg,
            number,
            buf,
            buflen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAsyncGetHostByName(
    hWnd:  HWND,
    wMsg:  u_int,
    name: *const c_char,
    buf: *mut c_char,
    buflen:  c_int    
) ->  HANDLE
{
    unsafe {
        return WSAAsyncGetHostByName(
            hWnd,
            wMsg,
            name,
            buf,
            buflen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAsyncGetHostByAddr(
    hWnd:  HWND,
    wMsg:  u_int,
    addr: *const c_char,
    len:  c_int,
    type_:  c_int,
    buf: *mut c_char,
    buflen:  c_int    
) ->  HANDLE
{
    unsafe {
        return WSAAsyncGetHostByAddr(
            hWnd,
            wMsg,
            addr,
            len,
            type_,
            buf,
            buflen
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSACancelAsyncRequest(
    hAsyncTaskHandle:  HANDLE    
) ->  c_int
{
    unsafe {
        return WSACancelAsyncRequest(
            hAsyncTaskHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAsyncSelect(
    s:  SOCKET,
    hWnd:  HWND,
    wMsg:  u_int,
    lEvent:  c_long    
) ->  c_int
{
    unsafe {
        return WSAAsyncSelect(
            s,
            hWnd,
            wMsg,
            lEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAccept(
    s:  SOCKET,
    addr: *mut sockaddr,
    addrlen:  LPINT,
    lpfnCondition:  LPCONDITIONPROC,
    dwCallbackData:  DWORD_PTR    
) ->  SOCKET
{
    unsafe {
        return WSAAccept(
            s,
            addr,
            addrlen,
            lpfnCondition,
            dwCallbackData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSACloseEvent(
    hEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return WSACloseEvent(
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAConnect(
    s:  SOCKET,
    name: *const sockaddr,
    namelen:  c_int,
    lpCallerData:  LPWSABUF,
    lpCalleeData:  LPWSABUF,
    lpSQOS:  LPQOS,
    lpGQOS:  LPQOS    
) ->  c_int
{
    unsafe {
        return WSAConnect(
            s,
            name,
            namelen,
            lpCallerData,
            lpCalleeData,
            lpSQOS,
            lpGQOS
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAConnectByNameW(
    s:  SOCKET,
    nodename:  LPWSTR,
    servicename:  LPWSTR,
    LocalAddressLength:  LPDWORD,
    LocalAddress:  LPSOCKADDR,
    RemoteAddressLength:  LPDWORD,
    RemoteAddress:  LPSOCKADDR,
    timeout: *const timeval,
    Reserved:  LPWSAOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return WSAConnectByNameW(
            s,
            nodename,
            servicename,
            LocalAddressLength,
            LocalAddress,
            RemoteAddressLength,
            RemoteAddress,
            timeout,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAConnectByNameA(
    s:  SOCKET,
    nodename:  LPCSTR,
    servicename:  LPCSTR,
    LocalAddressLength:  LPDWORD,
    LocalAddress:  LPSOCKADDR,
    RemoteAddressLength:  LPDWORD,
    RemoteAddress:  LPSOCKADDR,
    timeout: *const timeval,
    Reserved:  LPWSAOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return WSAConnectByNameA(
            s,
            nodename,
            servicename,
            LocalAddressLength,
            LocalAddress,
            RemoteAddressLength,
            RemoteAddress,
            timeout,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAConnectByList(
    s:  SOCKET,
    SocketAddress:  PSOCKET_ADDRESS_LIST,
    LocalAddressLength:  LPDWORD,
    LocalAddress:  LPSOCKADDR,
    RemoteAddressLength:  LPDWORD,
    RemoteAddress:  LPSOCKADDR,
    timeout: *const timeval,
    Reserved:  LPWSAOVERLAPPED    
) ->  BOOL
{
    unsafe {
        return WSAConnectByList(
            s,
            SocketAddress,
            LocalAddressLength,
            LocalAddress,
            RemoteAddressLength,
            RemoteAddress,
            timeout,
            Reserved
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSACreateEvent(
    
) ->  HANDLE
{
    unsafe {
        return WSACreateEvent(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSADuplicateSocketA(
    s:  SOCKET,
    dwProcessId:  DWORD,
    lpProtocolInfo:  LPWSAPROTOCOL_INFOA    
) ->  c_int
{
    unsafe {
        return WSADuplicateSocketA(
            s,
            dwProcessId,
            lpProtocolInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSADuplicateSocketW(
    s:  SOCKET,
    dwProcessId:  DWORD,
    lpProtocolInfo:  LPWSAPROTOCOL_INFOW    
) ->  c_int
{
    unsafe {
        return WSADuplicateSocketW(
            s,
            dwProcessId,
            lpProtocolInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAEnumNetworkEvents(
    s:  SOCKET,
    hEventObject:  HANDLE,
    lpNetworkEvents:  LPWSANETWORKEVENTS    
) ->  c_int
{
    unsafe {
        return WSAEnumNetworkEvents(
            s,
            hEventObject,
            lpNetworkEvents
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAEnumProtocolsA(
    lpiProtocols:  LPINT,
    lpProtocolBuffer:  LPWSAPROTOCOL_INFOA,
    lpdwBufferLength:  LPDWORD    
) ->  c_int
{
    unsafe {
        return WSAEnumProtocolsA(
            lpiProtocols,
            lpProtocolBuffer,
            lpdwBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAEnumProtocolsW(
    lpiProtocols:  LPINT,
    lpProtocolBuffer:  LPWSAPROTOCOL_INFOW,
    lpdwBufferLength:  LPDWORD    
) ->  c_int
{
    unsafe {
        return WSAEnumProtocolsW(
            lpiProtocols,
            lpProtocolBuffer,
            lpdwBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAEventSelect(
    s:  SOCKET,
    hEventObject:  HANDLE,
    lNetworkEvents:  c_long    
) ->  c_int
{
    unsafe {
        return WSAEventSelect(
            s,
            hEventObject,
            lNetworkEvents
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAGetOverlappedResult(
    s:  SOCKET,
    lpOverlapped:  LPWSAOVERLAPPED,
    lpcbTransfer:  LPDWORD,
    fWait:  BOOL,
    lpdwFlags:  LPDWORD    
) ->  BOOL
{
    unsafe {
        return WSAGetOverlappedResult(
            s,
            lpOverlapped,
            lpcbTransfer,
            fWait,
            lpdwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAGetQOSByName(
    s:  SOCKET,
    lpQOSName:  LPWSABUF,
    lpQOS:  LPQOS    
) ->  BOOL
{
    unsafe {
        return WSAGetQOSByName(
            s,
            lpQOSName,
            lpQOS
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAHtonl(
    s:  SOCKET,
    hostlong:  u_long,
    lpnetlong: *mut u_long    
) ->  c_int
{
    unsafe {
        return WSAHtonl(
            s,
            hostlong,
            lpnetlong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAHtons(
    s:  SOCKET,
    hostshort:  u_short,
    lpnetshort: *mut u_short    
) ->  c_int
{
    unsafe {
        return WSAHtons(
            s,
            hostshort,
            lpnetshort
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAIoctl(
    s:  SOCKET,
    dwIoControlCode:  DWORD,
    lpvInBuffer:  LPVOID,
    cbInBuffer:  DWORD,
    lpvOutBuffer:  LPVOID,
    cbOutBuffer:  DWORD,
    lpcbBytesReturned:  LPDWORD,
    lpOverlapped:  LPWSAOVERLAPPED,
    lpCompletionRoutine:  LPWSAOVERLAPPED_COMPLETION_ROUTINE    
) ->  c_int
{
    unsafe {
        return WSAIoctl(
            s,
            dwIoControlCode,
            lpvInBuffer,
            cbInBuffer,
            lpvOutBuffer,
            cbOutBuffer,
            lpcbBytesReturned,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAJoinLeaf(
    s:  SOCKET,
    name: *const sockaddr,
    namelen:  c_int,
    lpCallerData:  LPWSABUF,
    lpCalleeData:  LPWSABUF,
    lpSQOS:  LPQOS,
    lpGQOS:  LPQOS,
    dwFlags:  DWORD    
) ->  SOCKET
{
    unsafe {
        return WSAJoinLeaf(
            s,
            name,
            namelen,
            lpCallerData,
            lpCalleeData,
            lpSQOS,
            lpGQOS,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSANtohl(
    s:  SOCKET,
    netlong:  u_long,
    lphostlong: *mut u_long    
) ->  c_int
{
    unsafe {
        return WSANtohl(
            s,
            netlong,
            lphostlong
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSANtohs(
    s:  SOCKET,
    netshort:  u_short,
    lphostshort: *mut u_short    
) ->  c_int
{
    unsafe {
        return WSANtohs(
            s,
            netshort,
            lphostshort
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSARecv(
    s:  SOCKET,
    lpBuffers:  LPWSABUF,
    dwBufferCount:  DWORD,
    lpNumberOfBytesRecvd:  LPDWORD,
    lpFlags:  LPDWORD,
    lpOverlapped:  LPWSAOVERLAPPED,
    lpCompletionRoutine:  LPWSAOVERLAPPED_COMPLETION_ROUTINE    
) ->  c_int
{
    unsafe {
        return WSARecv(
            s,
            lpBuffers,
            dwBufferCount,
            lpNumberOfBytesRecvd,
            lpFlags,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSARecvDisconnect(
    s:  SOCKET,
    lpInboundDisconnectData:  LPWSABUF    
) ->  c_int
{
    unsafe {
        return WSARecvDisconnect(
            s,
            lpInboundDisconnectData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSARecvFrom(
    s:  SOCKET,
    lpBuffers:  LPWSABUF,
    dwBufferCount:  DWORD,
    lpNumberOfBytesRecvd:  LPDWORD,
    lpFlags:  LPDWORD,
    lpFrom: *mut sockaddr,
    lpFromlen:  LPINT,
    lpOverlapped:  LPWSAOVERLAPPED,
    lpCompletionRoutine:  LPWSAOVERLAPPED_COMPLETION_ROUTINE    
) ->  c_int
{
    unsafe {
        return WSARecvFrom(
            s,
            lpBuffers,
            dwBufferCount,
            lpNumberOfBytesRecvd,
            lpFlags,
            lpFrom,
            lpFromlen,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAResetEvent(
    hEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return WSAResetEvent(
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASend(
    s:  SOCKET,
    lpBuffers:  LPWSABUF,
    dwBufferCount:  DWORD,
    lpNumberOfBytesSent:  LPDWORD,
    dwFlags:  DWORD,
    lpOverlapped:  LPWSAOVERLAPPED,
    lpCompletionRoutine:  LPWSAOVERLAPPED_COMPLETION_ROUTINE    
) ->  c_int
{
    unsafe {
        return WSASend(
            s,
            lpBuffers,
            dwBufferCount,
            lpNumberOfBytesSent,
            dwFlags,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASendMsg(
    Handle:  SOCKET,
    lpMsg:  LPWSAMSG,
    dwFlags:  DWORD,
    lpNumberOfBytesSent:  LPDWORD,
    lpOverlapped:  LPWSAOVERLAPPED,
    lpCompletionRoutine:  LPWSAOVERLAPPED_COMPLETION_ROUTINE    
) ->  c_int
{
    unsafe {
        return WSASendMsg(
            Handle,
            lpMsg,
            dwFlags,
            lpNumberOfBytesSent,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASendDisconnect(
    s:  SOCKET,
    lpOutboundDisconnectData:  LPWSABUF    
) ->  c_int
{
    unsafe {
        return WSASendDisconnect(
            s,
            lpOutboundDisconnectData
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASendTo(
    s:  SOCKET,
    lpBuffers:  LPWSABUF,
    dwBufferCount:  DWORD,
    lpNumberOfBytesSent:  LPDWORD,
    dwFlags:  DWORD,
    lpTo: *const sockaddr,
    iTolen:  c_int,
    lpOverlapped:  LPWSAOVERLAPPED,
    lpCompletionRoutine:  LPWSAOVERLAPPED_COMPLETION_ROUTINE    
) ->  c_int
{
    unsafe {
        return WSASendTo(
            s,
            lpBuffers,
            dwBufferCount,
            lpNumberOfBytesSent,
            dwFlags,
            lpTo,
            iTolen,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASetEvent(
    hEvent:  HANDLE    
) ->  BOOL
{
    unsafe {
        return WSASetEvent(
            hEvent
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASocketA(
    af:  c_int,
    type_:  c_int,
    protocol:  c_int,
    lpProtocolInfo:  LPWSAPROTOCOL_INFOA,
    g:  GROUP,
    dwFlags:  DWORD    
) ->  SOCKET
{
    unsafe {
        return WSASocketA(
            af,
            type_,
            protocol,
            lpProtocolInfo,
            g,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASocketW(
    af:  c_int,
    type_:  c_int,
    protocol:  c_int,
    lpProtocolInfo:  LPWSAPROTOCOL_INFOW,
    g:  GROUP,
    dwFlags:  DWORD    
) ->  SOCKET
{
    unsafe {
        return WSASocketW(
            af,
            type_,
            protocol,
            lpProtocolInfo,
            g,
            dwFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAWaitForMultipleEvents(
    cEvents:  DWORD,
    lphEvents: *const HANDLE,
    fWaitAll:  BOOL,
    dwTimeout:  DWORD,
    fAlertable:  BOOL    
) ->  DWORD
{
    unsafe {
        return WSAWaitForMultipleEvents(
            cEvents,
            lphEvents,
            fWaitAll,
            dwTimeout,
            fAlertable
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAddressToStringA(
    lpsaAddress:  LPSOCKADDR,
    dwAddressLength:  DWORD,
    lpProtocolInfo:  LPWSAPROTOCOL_INFOA,
    lpszAddressString:  LPSTR,
    lpdwAddressStringLength:  LPDWORD    
) ->  INT
{
    unsafe {
        return WSAAddressToStringA(
            lpsaAddress,
            dwAddressLength,
            lpProtocolInfo,
            lpszAddressString,
            lpdwAddressStringLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAAddressToStringW(
    lpsaAddress:  LPSOCKADDR,
    dwAddressLength:  DWORD,
    lpProtocolInfo:  LPWSAPROTOCOL_INFOW,
    lpszAddressString:  LPWSTR,
    lpdwAddressStringLength:  LPDWORD    
) ->  INT
{
    unsafe {
        return WSAAddressToStringW(
            lpsaAddress,
            dwAddressLength,
            lpProtocolInfo,
            lpszAddressString,
            lpdwAddressStringLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAStringToAddressA(
    AddressString:  LPSTR,
    AddressFamily:  INT,
    lpProtocolInfo:  LPWSAPROTOCOL_INFOA,
    lpAddress:  LPSOCKADDR,
    lpAddressLength:  LPINT    
) ->  INT
{
    unsafe {
        return WSAStringToAddressA(
            AddressString,
            AddressFamily,
            lpProtocolInfo,
            lpAddress,
            lpAddressLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAStringToAddressW(
    AddressString:  LPWSTR,
    AddressFamily:  INT,
    lpProtocolInfo:  LPWSAPROTOCOL_INFOW,
    lpAddress:  LPSOCKADDR,
    lpAddressLength:  LPINT    
) ->  INT
{
    unsafe {
        return WSAStringToAddressW(
            AddressString,
            AddressFamily,
            lpProtocolInfo,
            lpAddress,
            lpAddressLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSALookupServiceBeginA(
    lpqsRestrictions:  LPWSAQUERYSETA,
    dwControlFlags:  DWORD,
    lphLookup:  LPHANDLE    
) ->  INT
{
    unsafe {
        return WSALookupServiceBeginA(
            lpqsRestrictions,
            dwControlFlags,
            lphLookup
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSALookupServiceBeginW(
    lpqsRestrictions:  LPWSAQUERYSETW,
    dwControlFlags:  DWORD,
    lphLookup:  LPHANDLE    
) ->  INT
{
    unsafe {
        return WSALookupServiceBeginW(
            lpqsRestrictions,
            dwControlFlags,
            lphLookup
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSALookupServiceNextA(
    hLookup:  HANDLE,
    dwControlFlags:  DWORD,
    lpdwBufferLength:  LPDWORD,
    lpqsResults:  LPWSAQUERYSETA    
) ->  INT
{
    unsafe {
        return WSALookupServiceNextA(
            hLookup,
            dwControlFlags,
            lpdwBufferLength,
            lpqsResults
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSALookupServiceNextW(
    hLookup:  HANDLE,
    dwControlFlags:  DWORD,
    lpdwBufferLength:  LPDWORD,
    lpqsResults:  LPWSAQUERYSETW    
) ->  INT
{
    unsafe {
        return WSALookupServiceNextW(
            hLookup,
            dwControlFlags,
            lpdwBufferLength,
            lpqsResults
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSANSPIoctl(
    hLookup:  HANDLE,
    dwControlCode:  DWORD,
    lpvInBuffer:  LPVOID,
    cbInBuffer:  DWORD,
    lpvOutBuffer:  LPVOID,
    cbOutBuffer:  DWORD,
    lpcbBytesReturned:  LPDWORD,
    lpCompletion:  LPWSACOMPLETION    
) ->  INT
{
    unsafe {
        return WSANSPIoctl(
            hLookup,
            dwControlCode,
            lpvInBuffer,
            cbInBuffer,
            lpvOutBuffer,
            cbOutBuffer,
            lpcbBytesReturned,
            lpCompletion
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSALookupServiceEnd(
    hLookup:  HANDLE    
) ->  INT
{
    unsafe {
        return WSALookupServiceEnd(
            hLookup
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAInstallServiceClassA(
    lpServiceClassInfo:  LPWSASERVICECLASSINFOA    
) ->  INT
{
    unsafe {
        return WSAInstallServiceClassA(
            lpServiceClassInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAInstallServiceClassW(
    lpServiceClassInfo:  LPWSASERVICECLASSINFOW    
) ->  INT
{
    unsafe {
        return WSAInstallServiceClassW(
            lpServiceClassInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSARemoveServiceClass(
    lpServiceClassId:  LPGUID    
) ->  INT
{
    unsafe {
        return WSARemoveServiceClass(
            lpServiceClassId
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAGetServiceClassInfoA(
    lpProviderId:  LPGUID,
    lpServiceClassId:  LPGUID,
    lpdwBufSize:  LPDWORD,
    lpServiceClassInfo:  LPWSASERVICECLASSINFOA    
) ->  INT
{
    unsafe {
        return WSAGetServiceClassInfoA(
            lpProviderId,
            lpServiceClassId,
            lpdwBufSize,
            lpServiceClassInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAGetServiceClassInfoW(
    lpProviderId:  LPGUID,
    lpServiceClassId:  LPGUID,
    lpdwBufSize:  LPDWORD,
    lpServiceClassInfo:  LPWSASERVICECLASSINFOW    
) ->  INT
{
    unsafe {
        return WSAGetServiceClassInfoW(
            lpProviderId,
            lpServiceClassId,
            lpdwBufSize,
            lpServiceClassInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAEnumNameSpaceProvidersA(
    lpdwBufferLength:  LPDWORD,
    lpnspBuffer:  LPWSANAMESPACE_INFOA    
) ->  INT
{
    unsafe {
        return WSAEnumNameSpaceProvidersA(
            lpdwBufferLength,
            lpnspBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAEnumNameSpaceProvidersW(
    lpdwBufferLength:  LPDWORD,
    lpnspBuffer:  LPWSANAMESPACE_INFOW    
) ->  INT
{
    unsafe {
        return WSAEnumNameSpaceProvidersW(
            lpdwBufferLength,
            lpnspBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAEnumNameSpaceProvidersExA(
    lpdwBufferLength:  LPDWORD,
    lpnspBuffer:  LPWSANAMESPACE_INFOEXA    
) ->  INT
{
    unsafe {
        return WSAEnumNameSpaceProvidersExA(
            lpdwBufferLength,
            lpnspBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAEnumNameSpaceProvidersExW(
    lpdwBufferLength:  LPDWORD,
    lpnspBuffer:  LPWSANAMESPACE_INFOEXW    
) ->  INT
{
    unsafe {
        return WSAEnumNameSpaceProvidersExW(
            lpdwBufferLength,
            lpnspBuffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAGetServiceClassNameByClassIdA(
    lpServiceClassId:  LPGUID,
    lpszServiceClassName:  LPSTR,
    lpdwBufferLength:  LPDWORD    
) ->  INT
{
    unsafe {
        return WSAGetServiceClassNameByClassIdA(
            lpServiceClassId,
            lpszServiceClassName,
            lpdwBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAGetServiceClassNameByClassIdW(
    lpServiceClassId:  LPGUID,
    lpszServiceClassName:  LPWSTR,
    lpdwBufferLength:  LPDWORD    
) ->  INT
{
    unsafe {
        return WSAGetServiceClassNameByClassIdW(
            lpServiceClassId,
            lpszServiceClassName,
            lpdwBufferLength
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASetServiceA(
    lpqsRegInfo:  LPWSAQUERYSETA,
    essoperation:  WSAESETSERVICEOP,
    dwControlFlags:  DWORD    
) ->  INT
{
    unsafe {
        return WSASetServiceA(
            lpqsRegInfo,
            essoperation,
            dwControlFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSASetServiceW(
    lpqsRegInfo:  LPWSAQUERYSETW,
    essoperation:  WSAESETSERVICEOP,
    dwControlFlags:  DWORD    
) ->  INT
{
    unsafe {
        return WSASetServiceW(
            lpqsRegInfo,
            essoperation,
            dwControlFlags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAProviderConfigChange(
    lpNotificationHandle:  LPHANDLE,
    lpOverlapped:  LPWSAOVERLAPPED,
    lpCompletionRoutine:  LPWSAOVERLAPPED_COMPLETION_ROUTINE    
) ->  INT
{
    unsafe {
        return WSAProviderConfigChange(
            lpNotificationHandle,
            lpOverlapped,
            lpCompletionRoutine
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_WSAPoll(
    fdArray:  LPWSAPOLLFD,
    fds:  ULONG,
    timeout:  INT    
) ->  c_int
{
    unsafe {
        return WSAPoll(
            fdArray,
            fds,
            timeout
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getaddrinfo(
    pNodeName:  PCSTR,
    pServiceName:  PCSTR,
    pHints: *const ADDRINFOA,
    ppResult: *mut PADDRINFOA    
) ->  INT
{
    unsafe {
        return getaddrinfo(
            pNodeName,
            pServiceName,
            pHints,
            ppResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAddrInfoW(
    pNodeName:  PCWSTR,
    pServiceName:  PCWSTR,
    pHints: *const ADDRINFOW,
    ppResult: *mut PADDRINFOW    
) ->  INT
{
    unsafe {
        return GetAddrInfoW(
            pNodeName,
            pServiceName,
            pHints,
            ppResult
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAddrInfoExA(
    pName:  PCSTR,
    pServiceName:  PCSTR,
    dwNameSpace:  DWORD,
    lpNspId:  LPGUID,
    hints: *const ADDRINFOEXA,
    ppResult: *mut PADDRINFOEXA,
    timeout: *mut timeval,
    lpOverlapped:  LPOVERLAPPED,
    lpCompletionRoutine:  LPLOOKUPSERVICE_COMPLETION_ROUTINE,
    lpNameHandle:  LPHANDLE    
) ->  INT
{
    unsafe {
        return GetAddrInfoExA(
            pName,
            pServiceName,
            dwNameSpace,
            lpNspId,
            hints,
            ppResult,
            timeout,
            lpOverlapped,
            lpCompletionRoutine,
            lpNameHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAddrInfoExW(
    pName:  PCWSTR,
    pServiceName:  PCWSTR,
    dwNameSpace:  DWORD,
    lpNspId:  LPGUID,
    hints: *const ADDRINFOEXW,
    ppResult: *mut PADDRINFOEXW,
    timeout: *mut timeval,
    lpOverlapped:  LPOVERLAPPED,
    lpCompletionRoutine:  LPLOOKUPSERVICE_COMPLETION_ROUTINE,
    lpHandle:  LPHANDLE    
) ->  INT
{
    unsafe {
        return GetAddrInfoExW(
            pName,
            pServiceName,
            dwNameSpace,
            lpNspId,
            hints,
            ppResult,
            timeout,
            lpOverlapped,
            lpCompletionRoutine,
            lpHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAddrInfoExCancel(
    lpHandle:  LPHANDLE    
) ->  INT
{
    unsafe {
        return GetAddrInfoExCancel(
            lpHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetAddrInfoExOverlappedResult(
    lpOverlapped:  LPOVERLAPPED    
) ->  INT
{
    unsafe {
        return GetAddrInfoExOverlappedResult(
            lpOverlapped
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetAddrInfoExA(
    pName:  PCSTR,
    pServiceName:  PCSTR,
    pAddresses: *mut SOCKET_ADDRESS,
    dwAddressCount:  DWORD,
    lpBlob:  LPBLOB,
    dwFlags:  DWORD,
    dwNameSpace:  DWORD,
    lpNspId:  LPGUID,
    timeout: *mut timeval,
    lpOverlapped:  LPOVERLAPPED,
    lpCompletionRoutine:  LPLOOKUPSERVICE_COMPLETION_ROUTINE,
    lpNameHandle:  LPHANDLE    
) ->  INT
{
    unsafe {
        return SetAddrInfoExA(
            pName,
            pServiceName,
            pAddresses,
            dwAddressCount,
            lpBlob,
            dwFlags,
            dwNameSpace,
            lpNspId,
            timeout,
            lpOverlapped,
            lpCompletionRoutine,
            lpNameHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_SetAddrInfoExW(
    pName:  PCWSTR,
    pServiceName:  PCWSTR,
    pAddresses: *mut SOCKET_ADDRESS,
    dwAddressCount:  DWORD,
    lpBlob:  LPBLOB,
    dwFlags:  DWORD,
    dwNameSpace:  DWORD,
    lpNspId:  LPGUID,
    timeout: *mut timeval,
    lpOverlapped:  LPOVERLAPPED,
    lpCompletionRoutine:  LPLOOKUPSERVICE_COMPLETION_ROUTINE,
    lpNameHandle:  LPHANDLE    
) ->  INT
{
    unsafe {
        return SetAddrInfoExW(
            pName,
            pServiceName,
            pAddresses,
            dwAddressCount,
            lpBlob,
            dwFlags,
            dwNameSpace,
            lpNspId,
            timeout,
            lpOverlapped,
            lpCompletionRoutine,
            lpNameHandle
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_freeaddrinfo(
    pAddrInfo:  PADDRINFOA    
)
{
    unsafe {
        return freeaddrinfo(
            pAddrInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeAddrInfoW(
    pAddrInfo:  PADDRINFOW    
)
{
    unsafe {
        return FreeAddrInfoW(
            pAddrInfo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeAddrInfoEx(
    pAddrInfoEx:  PADDRINFOEXA    
)
{
    unsafe {
        return FreeAddrInfoEx(
            pAddrInfoEx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_FreeAddrInfoExW(
    pAddrInfoEx:  PADDRINFOEXW    
)
{
    unsafe {
        return FreeAddrInfoExW(
            pAddrInfoEx
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_getnameinfo(
    pSockaddr: *const SOCKADDR,
    SockaddrLength:  socklen_t,
    pNodeBuffer:  PCHAR,
    NodeBufferSize:  DWORD,
    pServiceBuffer:  PCHAR,
    ServiceBufferSize:  DWORD,
    Flags:  INT    
) ->  INT
{
    unsafe {
        return getnameinfo(
            pSockaddr,
            SockaddrLength,
            pNodeBuffer,
            NodeBufferSize,
            pServiceBuffer,
            ServiceBufferSize,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_GetNameInfoW(
    pSockaddr: *const SOCKADDR,
    SockaddrLength:  socklen_t,
    pNodeBuffer:  PWCHAR,
    NodeBufferSize:  DWORD,
    pServiceBuffer:  PWCHAR,
    ServiceBufferSize:  DWORD,
    Flags:  INT    
) ->  INT
{
    unsafe {
        return GetNameInfoW(
            pSockaddr,
            SockaddrLength,
            pNodeBuffer,
            NodeBufferSize,
            pServiceBuffer,
            ServiceBufferSize,
            Flags
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_inet_pton(
    Family:  INT,
    pszAddrString:  PCSTR,
    pAddrBuf:  PVOID    
) ->  INT
{
    unsafe {
        return inet_pton(
            Family,
            pszAddrString,
            pAddrBuf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InetPtonW(
    Family:  INT,
    pszAddrString:  PCWSTR,
    pAddrBuf:  PVOID    
) ->  INT
{
    unsafe {
        return InetPtonW(
            Family,
            pszAddrString,
            pAddrBuf
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_inet_ntop(
    Family:  INT,
    pAddr: *const c_void,
    pStringBuf:  PSTR,
    StringBufSize:  usize    
) ->  PCSTR
{
    unsafe {
        return inet_ntop(
            Family,
            pAddr,
            pStringBuf,
            StringBufSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_InetNtopW(
    Family:  INT,
    pAddr: *const c_void,
    pStringBuf:  PWSTR,
    StringBufSize:  usize    
) ->  PCWSTR
{
    unsafe {
        return InetNtopW(
            Family,
            pAddr,
            pStringBuf,
            StringBufSize
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wasctime(
    _Tm: *const tm    
) -> *mut wchar_t
{
    unsafe {
        return _wasctime(
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wasctime_s(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize,
    _Tm: *const tm    
) ->  errno_t
{
    unsafe {
        return _wasctime_s(
            _Buffer,
            _SizeInWords,
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_wcsftime(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize,
    _Format: *const wchar_t,
    _Tm: *const tm    
) ->  usize
{
    unsafe {
        return wcsftime(
            _Buffer,
            _SizeInWords,
            _Format,
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wcsftime_l(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize,
    _Format: *const wchar_t,
    _Tm: *const tm,
    _Locale:  _locale_t    
) ->  usize
{
    unsafe {
        return _wcsftime_l(
            _Buffer,
            _SizeInWords,
            _Format,
            _Tm,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wctime32(
    _Time: *const __time32_t    
) -> *mut wchar_t
{
    unsafe {
        return _wctime32(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wctime32_s(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize,
    _Time: *const __time32_t    
) ->  errno_t
{
    unsafe {
        return _wctime32_s(
            _Buffer,
            _SizeInWords,
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wctime64(
    _Time: *const __time64_t    
) -> *mut wchar_t
{
    unsafe {
        return _wctime64(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wctime64_s(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize,
    _Time: *const __time64_t    
) ->  errno_t
{
    unsafe {
        return _wctime64_s(
            _Buffer,
            _SizeInWords,
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wstrdate_s(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize    
) ->  errno_t
{
    unsafe {
        return _wstrdate_s(
            _Buffer,
            _SizeInWords
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wstrdate(
    _Buffer: *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return _wstrdate(
            _Buffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wstrtime_s(
    _Buffer: *mut wchar_t,
    _SizeInWords:  usize    
) ->  errno_t
{
    unsafe {
        return _wstrtime_s(
            _Buffer,
            _SizeInWords
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__wstrtime(
    _Buffer: *mut wchar_t    
) -> *mut wchar_t
{
    unsafe {
        return _wstrtime(
            _Buffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___daylight(
    
) -> *mut c_int
{
    unsafe {
        return __daylight(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___dstbias(
    
) -> *mut c_long
{
    unsafe {
        return __dstbias(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___timezone(
    
) -> *mut c_long
{
    unsafe {
        return __timezone(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche___tzname(
    
) -> *mut *mut c_char
{
    unsafe {
        return __tzname(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_daylight(
    _Daylight: *mut c_int    
) ->  errno_t
{
    unsafe {
        return _get_daylight(
            _Daylight
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_dstbias(
    _DaylightSavingsBias: *mut c_long    
) ->  errno_t
{
    unsafe {
        return _get_dstbias(
            _DaylightSavingsBias
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_timezone(
    _TimeZone: *mut c_long    
) ->  errno_t
{
    unsafe {
        return _get_timezone(
            _TimeZone
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__get_tzname(
    _ReturnValue: *mut usize,
    _Buffer: *mut c_char,
    _SizeInBytes:  usize,
    _Index:  c_int    
) ->  errno_t
{
    unsafe {
        return _get_tzname(
            _ReturnValue,
            _Buffer,
            _SizeInBytes,
            _Index
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_asctime(
    _Tm: *const tm    
) -> *mut c_char
{
    unsafe {
        return asctime(
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_asctime_s(
    _Buffer: *mut c_char,
    _SizeInBytes:  usize,
    _Tm: *const tm    
) ->  errno_t
{
    unsafe {
        return asctime_s(
            _Buffer,
            _SizeInBytes,
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_clock(
    
) ->  clock_t
{
    unsafe {
        return clock(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ctime32(
    _Time: *const __time32_t    
) -> *mut c_char
{
    unsafe {
        return _ctime32(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ctime32_s(
    _Buffer: *mut c_char,
    _SizeInBytes:  usize,
    _Time: *const __time32_t    
) ->  errno_t
{
    unsafe {
        return _ctime32_s(
            _Buffer,
            _SizeInBytes,
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ctime64(
    _Time: *const __time64_t    
) -> *mut c_char
{
    unsafe {
        return _ctime64(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__ctime64_s(
    _Buffer: *mut c_char,
    _SizeInBytes:  usize,
    _Time: *const __time64_t    
) ->  errno_t
{
    unsafe {
        return _ctime64_s(
            _Buffer,
            _SizeInBytes,
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__difftime32(
    _Time1:  __time32_t,
    _Time2:  __time32_t    
) ->  f64
{
    unsafe {
        return _difftime32(
            _Time1,
            _Time2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__difftime64(
    _Time1:  __time64_t,
    _Time2:  __time64_t    
) ->  f64
{
    unsafe {
        return _difftime64(
            _Time1,
            _Time2
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__gmtime32(
    _Time: *const __time32_t    
) -> *mut tm
{
    unsafe {
        return _gmtime32(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__gmtime32_s(
    _Tm: *mut tm,
    _Time: *const __time32_t    
) ->  errno_t
{
    unsafe {
        return _gmtime32_s(
            _Tm,
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__gmtime64(
    _Time: *const __time64_t    
) -> *mut tm
{
    unsafe {
        return _gmtime64(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__gmtime64_s(
    _Tm: *mut tm,
    _Time: *const __time64_t    
) ->  errno_t
{
    unsafe {
        return _gmtime64_s(
            _Tm,
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__localtime32(
    _Time: *const __time32_t    
) -> *mut tm
{
    unsafe {
        return _localtime32(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__localtime32_s(
    _Tm: *mut tm,
    _Time: *const __time32_t    
) ->  errno_t
{
    unsafe {
        return _localtime32_s(
            _Tm,
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__localtime64(
    _Time: *const __time64_t    
) -> *mut tm
{
    unsafe {
        return _localtime64(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__localtime64_s(
    _Tm: *mut tm,
    _Time: *const __time64_t    
) ->  errno_t
{
    unsafe {
        return _localtime64_s(
            _Tm,
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mkgmtime32(
    _Tm: *mut tm    
) ->  __time32_t
{
    unsafe {
        return _mkgmtime32(
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mkgmtime64(
    _Tm: *mut tm    
) ->  __time64_t
{
    unsafe {
        return _mkgmtime64(
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mktime32(
    _Tm: *mut tm    
) ->  __time32_t
{
    unsafe {
        return _mktime32(
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__mktime64(
    _Tm: *mut tm    
) ->  __time64_t
{
    unsafe {
        return _mktime64(
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_strftime(
    _Buffer: *mut c_char,
    _SizeInBytes:  usize,
    _Format: *const c_char,
    _Tm: *const tm    
) ->  usize
{
    unsafe {
        return strftime(
            _Buffer,
            _SizeInBytes,
            _Format,
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strftime_l(
    _Buffer: *mut c_char,
    _MaxSize:  usize,
    _Format: *const c_char,
    _Tm: *const tm,
    _Locale:  _locale_t    
) ->  usize
{
    unsafe {
        return _strftime_l(
            _Buffer,
            _MaxSize,
            _Format,
            _Tm,
            _Locale
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strdate_s(
    _Buffer: *mut c_char,
    _SizeInBytes:  usize    
) ->  errno_t
{
    unsafe {
        return _strdate_s(
            _Buffer,
            _SizeInBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strdate(
    _Buffer: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return _strdate(
            _Buffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtime_s(
    _Buffer: *mut c_char,
    _SizeInBytes:  usize    
) ->  errno_t
{
    unsafe {
        return _strtime_s(
            _Buffer,
            _SizeInBytes
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__strtime(
    _Buffer: *mut c_char    
) -> *mut c_char
{
    unsafe {
        return _strtime(
            _Buffer
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__time32(
    _Time: *mut __time32_t    
) ->  __time32_t
{
    unsafe {
        return _time32(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__time64(
    _Time: *mut __time64_t    
) ->  __time64_t
{
    unsafe {
        return _time64(
            _Time
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__timespec32_get(
    _Ts: *mut _timespec32,
    _Base:  c_int    
) ->  c_int
{
    unsafe {
        return _timespec32_get(
            _Ts,
            _Base
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__timespec64_get(
    _Ts: *mut _timespec64,
    _Base:  c_int    
) ->  c_int
{
    unsafe {
        return _timespec64_get(
            _Ts,
            _Base
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__tzset(
    
)
{
    unsafe {
        return _tzset(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__getsystime(
    _Tm: *mut tm    
) ->  c_uint
{
    unsafe {
        return _getsystime(
            _Tm
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche__setsystime(
    _Tm: *mut tm,
    _Milliseconds:  c_uint    
) ->  c_uint
{
    unsafe {
        return _setsystime(
            _Tm,
            _Milliseconds
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_tzset(
    
)
{
    unsafe {
        return tzset(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_version(
    
) -> *const c_char
{
    unsafe {
        return quiche_version(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_enable_debug_logging(
    cb:  Option,
    argp: *mut c_void    
) ->  c_int
{
    unsafe {
        return quiche_enable_debug_logging(
            cb,
            argp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_new(
    version:  u32    
) -> *mut quiche_config
{
    unsafe {
        return quiche_config_new(
            version
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_load_cert_chain_from_pem_file(
    config: *mut quiche_config,
    path: *const c_char    
) ->  c_int
{
    unsafe {
        return quiche_config_load_cert_chain_from_pem_file(
            config,
            path
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_load_priv_key_from_pem_file(
    config: *mut quiche_config,
    path: *const c_char    
) ->  c_int
{
    unsafe {
        return quiche_config_load_priv_key_from_pem_file(
            config,
            path
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_load_verify_locations_from_file(
    config: *mut quiche_config,
    path: *const c_char    
) ->  c_int
{
    unsafe {
        return quiche_config_load_verify_locations_from_file(
            config,
            path
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_load_verify_locations_from_directory(
    config: *mut quiche_config,
    path: *const c_char    
) ->  c_int
{
    unsafe {
        return quiche_config_load_verify_locations_from_directory(
            config,
            path
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_verify_peer(
    config: *mut quiche_config,
    v:  bool    
)
{
    unsafe {
        return quiche_config_verify_peer(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_grease(
    config: *mut quiche_config,
    v:  bool    
)
{
    unsafe {
        return quiche_config_grease(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_log_keys(
    config: *mut quiche_config    
)
{
    unsafe {
        return quiche_config_log_keys(
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_enable_early_data(
    config: *mut quiche_config    
)
{
    unsafe {
        return quiche_config_enable_early_data(
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_application_protos(
    config: *mut quiche_config,
    protos: *const u8,
    protos_len:  usize    
) ->  c_int
{
    unsafe {
        return quiche_config_set_application_protos(
            config,
            protos,
            protos_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_max_idle_timeout(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_max_idle_timeout(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_max_recv_udp_payload_size(
    config: *mut quiche_config,
    v:  usize    
)
{
    unsafe {
        return quiche_config_set_max_recv_udp_payload_size(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_max_send_udp_payload_size(
    config: *mut quiche_config,
    v:  usize    
)
{
    unsafe {
        return quiche_config_set_max_send_udp_payload_size(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_data(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_initial_max_data(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_stream_data_bidi_local(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_initial_max_stream_data_bidi_local(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_stream_data_bidi_remote(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_initial_max_stream_data_bidi_remote(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_stream_data_uni(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_initial_max_stream_data_uni(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_streams_bidi(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_initial_max_streams_bidi(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_streams_uni(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_initial_max_streams_uni(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_ack_delay_exponent(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_ack_delay_exponent(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_max_ack_delay(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_max_ack_delay(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_disable_active_migration(
    config: *mut quiche_config,
    v:  bool    
)
{
    unsafe {
        return quiche_config_set_disable_active_migration(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_cc_algorithm(
    config: *mut quiche_config,
    algo:  quiche_cc_algorithm    
)
{
    unsafe {
        return quiche_config_set_cc_algorithm(
            config,
            algo
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_enable_hystart(
    config: *mut quiche_config,
    v:  bool    
)
{
    unsafe {
        return quiche_config_enable_hystart(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_enable_pacing(
    config: *mut quiche_config,
    v:  bool    
)
{
    unsafe {
        return quiche_config_enable_pacing(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_enable_dgram(
    config: *mut quiche_config,
    enabled:  bool,
    recv_queue_len:  usize,
    send_queue_len:  usize    
)
{
    unsafe {
        return quiche_config_enable_dgram(
            config,
            enabled,
            recv_queue_len,
            send_queue_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_max_connection_window(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_max_connection_window(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_max_stream_window(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_max_stream_window(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_active_connection_id_limit(
    config: *mut quiche_config,
    v:  u64    
)
{
    unsafe {
        return quiche_config_set_active_connection_id_limit(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_set_stateless_reset_token(
    config: *mut quiche_config,
    v: *const u8    
)
{
    unsafe {
        return quiche_config_set_stateless_reset_token(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_config_free(
    config: *mut quiche_config    
)
{
    unsafe {
        return quiche_config_free(
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_header_info(
    buf: *const u8,
    buf_len:  usize,
    dcil:  usize,
    version: *mut u32,
    type_: *mut u8,
    scid: *mut u8,
    scid_len: *mut usize,
    dcid: *mut u8,
    dcid_len: *mut usize,
    token: *mut u8,
    token_len: *mut usize    
) ->  c_int
{
    unsafe {
        return quiche_header_info(
            buf,
            buf_len,
            dcil,
            version,
            type_,
            scid,
            scid_len,
            dcid,
            dcid_len,
            token,
            token_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_accept(
    scid: *const u8,
    scid_len:  usize,
    odcid: *const u8,
    odcid_len:  usize,
    local: *const sockaddr,
    local_len:  usize,
    peer: *const sockaddr,
    peer_len:  usize,
    config: *mut quiche_config    
) -> *mut quiche_conn
{
    unsafe {
        return quiche_accept(
            scid,
            scid_len,
            odcid,
            odcid_len,
            local,
            local_len,
            peer,
            peer_len,
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_connect(
    server_name: *const c_char,
    scid: *const u8,
    scid_len:  usize,
    local: *const sockaddr,
    local_len:  usize,
    peer: *const sockaddr,
    peer_len:  usize,
    config: *mut quiche_config    
) -> *mut quiche_conn
{
    unsafe {
        return quiche_connect(
            server_name,
            scid,
            scid_len,
            local,
            local_len,
            peer,
            peer_len,
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_negotiate_version(
    scid: *const u8,
    scid_len:  usize,
    dcid: *const u8,
    dcid_len:  usize,
    out: *mut u8,
    out_len:  usize    
) ->  SSIZE_T
{
    unsafe {
        return quiche_negotiate_version(
            scid,
            scid_len,
            dcid,
            dcid_len,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_retry(
    scid: *const u8,
    scid_len:  usize,
    dcid: *const u8,
    dcid_len:  usize,
    new_scid: *const u8,
    new_scid_len:  usize,
    token: *const u8,
    token_len:  usize,
    version:  u32,
    out: *mut u8,
    out_len:  usize    
) ->  SSIZE_T
{
    unsafe {
        return quiche_retry(
            scid,
            scid_len,
            dcid,
            dcid_len,
            new_scid,
            new_scid_len,
            token,
            token_len,
            version,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_version_is_supported(
    version:  u32    
) ->  bool
{
    unsafe {
        return quiche_version_is_supported(
            version
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_new_with_tls(
    scid: *const u8,
    scid_len:  usize,
    odcid: *const u8,
    odcid_len:  usize,
    local: *const sockaddr,
    local_len:  usize,
    peer: *const sockaddr,
    peer_len:  usize,
    config: *mut quiche_config,
    ssl: *mut c_void,
    is_server:  bool    
) -> *mut quiche_conn
{
    unsafe {
        return quiche_conn_new_with_tls(
            scid,
            scid_len,
            odcid,
            odcid_len,
            local,
            local_len,
            peer,
            peer_len,
            config,
            ssl,
            is_server
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_set_keylog_path(
    conn: *mut quiche_conn,
    path: *const c_char    
) ->  bool
{
    unsafe {
        return quiche_conn_set_keylog_path(
            conn,
            path
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_set_keylog_fd(
    conn: *mut quiche_conn,
    fd:  c_int    
)
{
    unsafe {
        return quiche_conn_set_keylog_fd(
            conn,
            fd
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_set_qlog_path(
    conn: *mut quiche_conn,
    path: *const c_char,
    log_title: *const c_char,
    log_desc: *const c_char    
) ->  bool
{
    unsafe {
        return quiche_conn_set_qlog_path(
            conn,
            path,
            log_title,
            log_desc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_set_qlog_fd(
    conn: *mut quiche_conn,
    fd:  c_int,
    log_title: *const c_char,
    log_desc: *const c_char    
)
{
    unsafe {
        return quiche_conn_set_qlog_fd(
            conn,
            fd,
            log_title,
            log_desc
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_set_session(
    conn: *mut quiche_conn,
    buf: *const u8,
    buf_len:  usize    
) ->  c_int
{
    unsafe {
        return quiche_conn_set_session(
            conn,
            buf,
            buf_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_recv(
    conn: *mut quiche_conn,
    buf: *mut u8,
    buf_len:  usize,
    info: *const quiche_recv_info    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_recv(
            conn,
            buf,
            buf_len,
            info
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_send(
    conn: *mut quiche_conn,
    out: *mut u8,
    out_len:  usize,
    out_info: *mut quiche_send_info    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_send(
            conn,
            out,
            out_len,
            out_info
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_send_quantum(
    conn: *const quiche_conn    
) ->  usize
{
    unsafe {
        return quiche_conn_send_quantum(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_recv(
    conn: *mut quiche_conn,
    stream_id:  u64,
    out: *mut u8,
    buf_len:  usize,
    fin: *mut bool    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_stream_recv(
            conn,
            stream_id,
            out,
            buf_len,
            fin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_send(
    conn: *mut quiche_conn,
    stream_id:  u64,
    buf: *const u8,
    buf_len:  usize,
    fin:  bool    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_stream_send(
            conn,
            stream_id,
            buf,
            buf_len,
            fin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_priority(
    conn: *mut quiche_conn,
    stream_id:  u64,
    urgency:  u8,
    incremental:  bool    
) ->  c_int
{
    unsafe {
        return quiche_conn_stream_priority(
            conn,
            stream_id,
            urgency,
            incremental
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_shutdown(
    conn: *mut quiche_conn,
    stream_id:  u64,
    direction:  quiche_shutdown,
    err:  u64    
) ->  c_int
{
    unsafe {
        return quiche_conn_stream_shutdown(
            conn,
            stream_id,
            direction,
            err
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_capacity(
    conn: *const quiche_conn,
    stream_id:  u64    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_stream_capacity(
            conn,
            stream_id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_readable(
    conn: *const quiche_conn,
    stream_id:  u64    
) ->  bool
{
    unsafe {
        return quiche_conn_stream_readable(
            conn,
            stream_id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_readable_next(
    conn: *mut quiche_conn    
) ->  i64
{
    unsafe {
        return quiche_conn_stream_readable_next(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_writable(
    conn: *mut quiche_conn,
    stream_id:  u64,
    len:  usize    
) ->  c_int
{
    unsafe {
        return quiche_conn_stream_writable(
            conn,
            stream_id,
            len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_writable_next(
    conn: *mut quiche_conn    
) ->  i64
{
    unsafe {
        return quiche_conn_stream_writable_next(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_finished(
    conn: *const quiche_conn,
    stream_id:  u64    
) ->  bool
{
    unsafe {
        return quiche_conn_stream_finished(
            conn,
            stream_id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_readable(
    conn: *const quiche_conn    
) -> *mut quiche_stream_iter
{
    unsafe {
        return quiche_conn_readable(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_writable(
    conn: *const quiche_conn    
) -> *mut quiche_stream_iter
{
    unsafe {
        return quiche_conn_writable(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_max_send_udp_payload_size(
    conn: *const quiche_conn    
) ->  usize
{
    unsafe {
        return quiche_conn_max_send_udp_payload_size(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_timeout_as_nanos(
    conn: *const quiche_conn    
) ->  u64
{
    unsafe {
        return quiche_conn_timeout_as_nanos(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_timeout_as_millis(
    conn: *const quiche_conn    
) ->  u64
{
    unsafe {
        return quiche_conn_timeout_as_millis(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_on_timeout(
    conn: *mut quiche_conn    
)
{
    unsafe {
        return quiche_conn_on_timeout(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_close(
    conn: *mut quiche_conn,
    app:  bool,
    err:  u64,
    reason: *const u8,
    reason_len:  usize    
) ->  c_int
{
    unsafe {
        return quiche_conn_close(
            conn,
            app,
            err,
            reason,
            reason_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_trace_id(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    unsafe {
        return quiche_conn_trace_id(
            conn,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_source_id(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    unsafe {
        return quiche_conn_source_id(
            conn,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_destination_id(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    unsafe {
        return quiche_conn_destination_id(
            conn,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_application_proto(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    unsafe {
        return quiche_conn_application_proto(
            conn,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_peer_cert(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    unsafe {
        return quiche_conn_peer_cert(
            conn,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_session(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    unsafe {
        return quiche_conn_session(
            conn,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_is_established(
    conn: *const quiche_conn    
) ->  bool
{
    unsafe {
        return quiche_conn_is_established(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_is_in_early_data(
    conn: *const quiche_conn    
) ->  bool
{
    unsafe {
        return quiche_conn_is_in_early_data(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_is_readable(
    conn: *const quiche_conn    
) ->  bool
{
    unsafe {
        return quiche_conn_is_readable(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_is_draining(
    conn: *const quiche_conn    
) ->  bool
{
    unsafe {
        return quiche_conn_is_draining(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_peer_streams_left_bidi(
    conn: *const quiche_conn    
) ->  u64
{
    unsafe {
        return quiche_conn_peer_streams_left_bidi(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_peer_streams_left_uni(
    conn: *const quiche_conn    
) ->  u64
{
    unsafe {
        return quiche_conn_peer_streams_left_uni(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_is_closed(
    conn: *const quiche_conn    
) ->  bool
{
    unsafe {
        return quiche_conn_is_closed(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_is_timed_out(
    conn: *const quiche_conn    
) ->  bool
{
    unsafe {
        return quiche_conn_is_timed_out(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_peer_error(
    conn: *const quiche_conn,
    is_app: *mut bool,
    error_code: *mut u64,
    reason: *mut *mut u8,
    reason_len: *mut usize    
) ->  bool
{
    unsafe {
        return quiche_conn_peer_error(
            conn,
            is_app,
            error_code,
            reason,
            reason_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_local_error(
    conn: *const quiche_conn,
    is_app: *mut bool,
    error_code: *mut u64,
    reason: *mut *mut u8,
    reason_len: *mut usize    
) ->  bool
{
    unsafe {
        return quiche_conn_local_error(
            conn,
            is_app,
            error_code,
            reason,
            reason_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_init_application_data(
    conn: *mut quiche_conn,
    stream_id:  u64,
    data: *mut c_void    
) ->  c_int
{
    unsafe {
        return quiche_conn_stream_init_application_data(
            conn,
            stream_id,
            data
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stream_application_data(
    conn: *mut quiche_conn,
    stream_id:  u64    
) -> *mut c_void
{
    unsafe {
        return quiche_conn_stream_application_data(
            conn,
            stream_id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_stream_iter_next(
    iter: *mut quiche_stream_iter,
    stream_id: *mut u64    
) ->  bool
{
    unsafe {
        return quiche_stream_iter_next(
            iter,
            stream_id
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_stream_iter_free(
    iter: *mut quiche_stream_iter    
)
{
    unsafe {
        return quiche_stream_iter_free(
            iter
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_stats(
    conn: *const quiche_conn,
    out: *mut quiche_stats    
)
{
    unsafe {
        return quiche_conn_stats(
            conn,
            out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_path_stats(
    conn: *const quiche_conn,
    idx:  usize,
    out: *mut quiche_path_stats    
) ->  c_int
{
    unsafe {
        return quiche_conn_path_stats(
            conn,
            idx,
            out
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_max_writable_len(
    conn: *const quiche_conn    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_dgram_max_writable_len(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_recv_front_len(
    conn: *const quiche_conn    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_dgram_recv_front_len(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_recv_queue_len(
    conn: *const quiche_conn    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_dgram_recv_queue_len(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_recv_queue_byte_size(
    conn: *const quiche_conn    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_dgram_recv_queue_byte_size(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_send_queue_len(
    conn: *const quiche_conn    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_dgram_send_queue_len(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_send_queue_byte_size(
    conn: *const quiche_conn    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_dgram_send_queue_byte_size(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_recv(
    conn: *mut quiche_conn,
    buf: *mut u8,
    buf_len:  usize    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_dgram_recv(
            conn,
            buf,
            buf_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_send(
    conn: *mut quiche_conn,
    buf: *const u8,
    buf_len:  usize    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_dgram_send(
            conn,
            buf,
            buf_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_dgram_purge_outgoing(
    conn: *mut quiche_conn,
    f:  Option    
)
{
    unsafe {
        return quiche_conn_dgram_purge_outgoing(
            conn,
            f
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_send_ack_eliciting(
    conn: *mut quiche_conn    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_send_ack_eliciting(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_send_ack_eliciting_on_path(
    conn: *mut quiche_conn,
    local: *const sockaddr,
    local_len:  usize,
    peer: *const sockaddr,
    peer_len:  usize    
) ->  SSIZE_T
{
    unsafe {
        return quiche_conn_send_ack_eliciting_on_path(
            conn,
            local,
            local_len,
            peer,
            peer_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_conn_free(
    conn: *mut quiche_conn    
)
{
    unsafe {
        return quiche_conn_free(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_config_new(
    
) -> *mut quiche_h3_config
{
    unsafe {
        return quiche_h3_config_new(

        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_config_set_max_field_section_size(
    config: *mut quiche_h3_config,
    v:  u64    
)
{
    unsafe {
        return quiche_h3_config_set_max_field_section_size(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_config_set_qpack_max_table_capacity(
    config: *mut quiche_h3_config,
    v:  u64    
)
{
    unsafe {
        return quiche_h3_config_set_qpack_max_table_capacity(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_config_set_qpack_blocked_streams(
    config: *mut quiche_h3_config,
    v:  u64    
)
{
    unsafe {
        return quiche_h3_config_set_qpack_blocked_streams(
            config,
            v
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_config_enable_extended_connect(
    config: *mut quiche_h3_config,
    enabled:  bool    
)
{
    unsafe {
        return quiche_h3_config_enable_extended_connect(
            config,
            enabled
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_config_free(
    config: *mut quiche_h3_config    
)
{
    unsafe {
        return quiche_h3_config_free(
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_accept(
    quiche_conn: *mut quiche_conn,
    config: *mut quiche_h3_config    
) -> *mut quiche_h3_conn
{
    unsafe {
        return quiche_h3_accept(
            quiche_conn,
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_conn_new_with_transport(
    quiche_conn: *mut quiche_conn,
    config: *mut quiche_h3_config    
) -> *mut quiche_h3_conn
{
    unsafe {
        return quiche_h3_conn_new_with_transport(
            quiche_conn,
            config
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_conn_poll(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    ev: *mut *mut quiche_h3_event    
) ->  i64
{
    unsafe {
        return quiche_h3_conn_poll(
            conn,
            quic_conn,
            ev
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_event_type(
    ev: *mut quiche_h3_event    
) ->  quiche_h3_event_type
{
    unsafe {
        return quiche_h3_event_type(
            ev
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_event_for_each_header(
    ev: *mut quiche_h3_event,
    cb:  Option,
    argp: *mut c_void    
) ->  c_int
{
    unsafe {
        return quiche_h3_event_for_each_header(
            ev,
            cb,
            argp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_for_each_setting(
    conn: *mut quiche_h3_conn,
    cb:  Option,
    argp: *mut c_void    
) ->  c_int
{
    unsafe {
        return quiche_h3_for_each_setting(
            conn,
            cb,
            argp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_event_headers_has_body(
    ev: *mut quiche_h3_event    
) ->  bool
{
    unsafe {
        return quiche_h3_event_headers_has_body(
            ev
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_extended_connect_enabled_by_peer(
    conn: *mut quiche_h3_conn    
) ->  bool
{
    unsafe {
        return quiche_h3_extended_connect_enabled_by_peer(
            conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_event_free(
    ev: *mut quiche_h3_event    
)
{
    unsafe {
        return quiche_h3_event_free(
            ev
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_send_request(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    headers: *mut quiche_h3_header,
    headers_len:  usize,
    fin:  bool    
) ->  i64
{
    unsafe {
        return quiche_h3_send_request(
            conn,
            quic_conn,
            headers,
            headers_len,
            fin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_send_response(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id:  u64,
    headers: *mut quiche_h3_header,
    headers_len:  usize,
    fin:  bool    
) ->  c_int
{
    unsafe {
        return quiche_h3_send_response(
            conn,
            quic_conn,
            stream_id,
            headers,
            headers_len,
            fin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_send_response_with_priority(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id:  u64,
    headers: *mut quiche_h3_header,
    headers_len:  usize,
    priority: *mut quiche_h3_priority,
    fin:  bool    
) ->  c_int
{
    unsafe {
        return quiche_h3_send_response_with_priority(
            conn,
            quic_conn,
            stream_id,
            headers,
            headers_len,
            priority,
            fin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_send_body(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id:  u64,
    body: *mut u8,
    body_len:  usize,
    fin:  bool    
) ->  SSIZE_T
{
    unsafe {
        return quiche_h3_send_body(
            conn,
            quic_conn,
            stream_id,
            body,
            body_len,
            fin
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_recv_body(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id:  u64,
    out: *mut u8,
    out_len:  usize    
) ->  SSIZE_T
{
    unsafe {
        return quiche_h3_recv_body(
            conn,
            quic_conn,
            stream_id,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_parse_extensible_priority(
    priority: *mut u8,
    priority_len:  usize,
    parsed: *mut quiche_h3_priority    
) ->  c_int
{
    unsafe {
        return quiche_h3_parse_extensible_priority(
            priority,
            priority_len,
            parsed
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_send_priority_update_for_request(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id:  u64,
    priority: *mut quiche_h3_priority    
) ->  c_int
{
    unsafe {
        return quiche_h3_send_priority_update_for_request(
            conn,
            quic_conn,
            stream_id,
            priority
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_take_last_priority_update(
    conn: *mut quiche_h3_conn,
    prioritized_element_id:  u64,
    cb:  Option,
    argp: *mut c_void    
) ->  c_int
{
    unsafe {
        return quiche_h3_take_last_priority_update(
            conn,
            prioritized_element_id,
            cb,
            argp
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_dgram_enabled_by_peer(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn    
) ->  bool
{
    unsafe {
        return quiche_h3_dgram_enabled_by_peer(
            conn,
            quic_conn
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_send_dgram(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    flow_id:  u64,
    data: *mut u8,
    data_len:  usize    
) ->  SSIZE_T
{
    unsafe {
        return quiche_h3_send_dgram(
            conn,
            quic_conn,
            flow_id,
            data,
            data_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_recv_dgram(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    flow_id: *mut u64,
    flow_id_len: *mut usize,
    out: *mut u8,
    out_len:  usize    
) ->  SSIZE_T
{
    unsafe {
        return quiche_h3_recv_dgram(
            conn,
            quic_conn,
            flow_id,
            flow_id_len,
            out,
            out_len
        )
    }
}

#[no_mangle]
pub extern "C" fn csbindgen_quiche_quiche_h3_conn_free(
    conn: *mut quiche_h3_conn    
)
{
    unsafe {
        return quiche_h3_conn_free(
            conn
        )
    }
}

    