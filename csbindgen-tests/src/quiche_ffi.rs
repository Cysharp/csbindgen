/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;




#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_version(
    
) -> *const c_char
{
    quiche_version(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_enable_debug_logging(
    cb: Option<extern "C" fn(line: *const c_char, argp: *mut c_void)>,
    argp: *mut c_void    
) -> c_int
{
    quiche_enable_debug_logging(
        cb,
        argp
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_new(
    version: u32    
) -> *mut quiche_config
{
    quiche_config_new(
        version
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_load_cert_chain_from_pem_file(
    config: *mut quiche_config,
    path: *const c_char    
) -> c_int
{
    quiche_config_load_cert_chain_from_pem_file(
        config,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_load_priv_key_from_pem_file(
    config: *mut quiche_config,
    path: *const c_char    
) -> c_int
{
    quiche_config_load_priv_key_from_pem_file(
        config,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_load_verify_locations_from_file(
    config: *mut quiche_config,
    path: *const c_char    
) -> c_int
{
    quiche_config_load_verify_locations_from_file(
        config,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_load_verify_locations_from_directory(
    config: *mut quiche_config,
    path: *const c_char    
) -> c_int
{
    quiche_config_load_verify_locations_from_directory(
        config,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_verify_peer(
    config: *mut quiche_config,
    v: bool    
)
{
    quiche_config_verify_peer(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_grease(
    config: *mut quiche_config,
    v: bool    
)
{
    quiche_config_grease(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_log_keys(
    config: *mut quiche_config    
)
{
    quiche_config_log_keys(
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_enable_early_data(
    config: *mut quiche_config    
)
{
    quiche_config_enable_early_data(
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_application_protos(
    config: *mut quiche_config,
    protos: *const u8,
    protos_len: usize    
) -> c_int
{
    quiche_config_set_application_protos(
        config,
        protos,
        protos_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_max_idle_timeout(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_max_idle_timeout(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_max_recv_udp_payload_size(
    config: *mut quiche_config,
    v: usize    
)
{
    quiche_config_set_max_recv_udp_payload_size(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_max_send_udp_payload_size(
    config: *mut quiche_config,
    v: usize    
)
{
    quiche_config_set_max_send_udp_payload_size(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_data(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_initial_max_data(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_stream_data_bidi_local(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_initial_max_stream_data_bidi_local(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_stream_data_bidi_remote(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_initial_max_stream_data_bidi_remote(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_stream_data_uni(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_initial_max_stream_data_uni(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_streams_bidi(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_initial_max_streams_bidi(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_initial_max_streams_uni(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_initial_max_streams_uni(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_ack_delay_exponent(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_ack_delay_exponent(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_max_ack_delay(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_max_ack_delay(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_disable_active_migration(
    config: *mut quiche_config,
    v: bool    
)
{
    quiche_config_set_disable_active_migration(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_cc_algorithm(
    config: *mut quiche_config,
    algo: quiche_cc_algorithm    
)
{
    quiche_config_set_cc_algorithm(
        config,
        algo
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_enable_hystart(
    config: *mut quiche_config,
    v: bool    
)
{
    quiche_config_enable_hystart(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_enable_pacing(
    config: *mut quiche_config,
    v: bool    
)
{
    quiche_config_enable_pacing(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_enable_dgram(
    config: *mut quiche_config,
    enabled: bool,
    recv_queue_len: usize,
    send_queue_len: usize    
)
{
    quiche_config_enable_dgram(
        config,
        enabled,
        recv_queue_len,
        send_queue_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_max_connection_window(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_max_connection_window(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_max_stream_window(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_max_stream_window(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_active_connection_id_limit(
    config: *mut quiche_config,
    v: u64    
)
{
    quiche_config_set_active_connection_id_limit(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_set_stateless_reset_token(
    config: *mut quiche_config,
    v: *const u8    
)
{
    quiche_config_set_stateless_reset_token(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_config_free(
    config: *mut quiche_config    
)
{
    quiche_config_free(
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_header_info(
    buf: *const u8,
    buf_len: usize,
    dcil: usize,
    version: *mut u32,
    type_: *mut u8,
    scid: *mut u8,
    scid_len: *mut usize,
    dcid: *mut u8,
    dcid_len: *mut usize,
    token: *mut u8,
    token_len: *mut usize    
) -> c_int
{
    quiche_header_info(
        buf,
        buf_len,
        dcil,
        version,
        type_,
        scid,
        scid_len,
        dcid,
        dcid_len,
        token,
        token_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_accept(
    scid: *const u8,
    scid_len: usize,
    odcid: *const u8,
    odcid_len: usize,
    local: *const sockaddr,
    local_len: usize,
    peer: *const sockaddr,
    peer_len: usize,
    config: *mut quiche_config    
) -> *mut quiche_conn
{
    quiche_accept(
        scid,
        scid_len,
        odcid,
        odcid_len,
        local,
        local_len,
        peer,
        peer_len,
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_connect(
    server_name: *const c_char,
    scid: *const u8,
    scid_len: usize,
    local: *const sockaddr,
    local_len: usize,
    peer: *const sockaddr,
    peer_len: usize,
    config: *mut quiche_config    
) -> *mut quiche_conn
{
    quiche_connect(
        server_name,
        scid,
        scid_len,
        local,
        local_len,
        peer,
        peer_len,
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_negotiate_version(
    scid: *const u8,
    scid_len: usize,
    dcid: *const u8,
    dcid_len: usize,
    out: *mut u8,
    out_len: usize    
) -> SSIZE_T
{
    quiche_negotiate_version(
        scid,
        scid_len,
        dcid,
        dcid_len,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_retry(
    scid: *const u8,
    scid_len: usize,
    dcid: *const u8,
    dcid_len: usize,
    new_scid: *const u8,
    new_scid_len: usize,
    token: *const u8,
    token_len: usize,
    version: u32,
    out: *mut u8,
    out_len: usize    
) -> SSIZE_T
{
    quiche_retry(
        scid,
        scid_len,
        dcid,
        dcid_len,
        new_scid,
        new_scid_len,
        token,
        token_len,
        version,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_version_is_supported(
    version: u32    
) -> bool
{
    quiche_version_is_supported(
        version
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_new_with_tls(
    scid: *const u8,
    scid_len: usize,
    odcid: *const u8,
    odcid_len: usize,
    local: *const sockaddr,
    local_len: usize,
    peer: *const sockaddr,
    peer_len: usize,
    config: *mut quiche_config,
    ssl: *mut c_void,
    is_server: bool    
) -> *mut quiche_conn
{
    quiche_conn_new_with_tls(
        scid,
        scid_len,
        odcid,
        odcid_len,
        local,
        local_len,
        peer,
        peer_len,
        config,
        ssl,
        is_server
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_set_keylog_path(
    conn: *mut quiche_conn,
    path: *const c_char    
) -> bool
{
    quiche_conn_set_keylog_path(
        conn,
        path
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_set_keylog_fd(
    conn: *mut quiche_conn,
    fd: c_int    
)
{
    quiche_conn_set_keylog_fd(
        conn,
        fd
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_set_qlog_path(
    conn: *mut quiche_conn,
    path: *const c_char,
    log_title: *const c_char,
    log_desc: *const c_char    
) -> bool
{
    quiche_conn_set_qlog_path(
        conn,
        path,
        log_title,
        log_desc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_set_qlog_fd(
    conn: *mut quiche_conn,
    fd: c_int,
    log_title: *const c_char,
    log_desc: *const c_char    
)
{
    quiche_conn_set_qlog_fd(
        conn,
        fd,
        log_title,
        log_desc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_set_session(
    conn: *mut quiche_conn,
    buf: *const u8,
    buf_len: usize    
) -> c_int
{
    quiche_conn_set_session(
        conn,
        buf,
        buf_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_recv(
    conn: *mut quiche_conn,
    buf: *mut u8,
    buf_len: usize,
    info: *const quiche_recv_info    
) -> SSIZE_T
{
    quiche_conn_recv(
        conn,
        buf,
        buf_len,
        info
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_send(
    conn: *mut quiche_conn,
    out: *mut u8,
    out_len: usize,
    out_info: *mut quiche_send_info    
) -> SSIZE_T
{
    quiche_conn_send(
        conn,
        out,
        out_len,
        out_info
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_send_quantum(
    conn: *const quiche_conn    
) -> usize
{
    quiche_conn_send_quantum(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_recv(
    conn: *mut quiche_conn,
    stream_id: u64,
    out: *mut u8,
    buf_len: usize,
    fin: *mut bool    
) -> SSIZE_T
{
    quiche_conn_stream_recv(
        conn,
        stream_id,
        out,
        buf_len,
        fin
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_send(
    conn: *mut quiche_conn,
    stream_id: u64,
    buf: *const u8,
    buf_len: usize,
    fin: bool    
) -> SSIZE_T
{
    quiche_conn_stream_send(
        conn,
        stream_id,
        buf,
        buf_len,
        fin
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_priority(
    conn: *mut quiche_conn,
    stream_id: u64,
    urgency: u8,
    incremental: bool    
) -> c_int
{
    quiche_conn_stream_priority(
        conn,
        stream_id,
        urgency,
        incremental
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_shutdown(
    conn: *mut quiche_conn,
    stream_id: u64,
    direction: quiche_shutdown,
    err: u64    
) -> c_int
{
    quiche_conn_stream_shutdown(
        conn,
        stream_id,
        direction,
        err
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_capacity(
    conn: *const quiche_conn,
    stream_id: u64    
) -> SSIZE_T
{
    quiche_conn_stream_capacity(
        conn,
        stream_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_readable(
    conn: *const quiche_conn,
    stream_id: u64    
) -> bool
{
    quiche_conn_stream_readable(
        conn,
        stream_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_readable_next(
    conn: *mut quiche_conn    
) -> i64
{
    quiche_conn_stream_readable_next(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_writable(
    conn: *mut quiche_conn,
    stream_id: u64,
    len: usize    
) -> c_int
{
    quiche_conn_stream_writable(
        conn,
        stream_id,
        len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_writable_next(
    conn: *mut quiche_conn    
) -> i64
{
    quiche_conn_stream_writable_next(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_finished(
    conn: *const quiche_conn,
    stream_id: u64    
) -> bool
{
    quiche_conn_stream_finished(
        conn,
        stream_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_readable(
    conn: *const quiche_conn    
) -> *mut quiche_stream_iter
{
    quiche_conn_readable(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_writable(
    conn: *const quiche_conn    
) -> *mut quiche_stream_iter
{
    quiche_conn_writable(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_max_send_udp_payload_size(
    conn: *const quiche_conn    
) -> usize
{
    quiche_conn_max_send_udp_payload_size(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_timeout_as_nanos(
    conn: *const quiche_conn    
) -> u64
{
    quiche_conn_timeout_as_nanos(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_timeout_as_millis(
    conn: *const quiche_conn    
) -> u64
{
    quiche_conn_timeout_as_millis(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_on_timeout(
    conn: *mut quiche_conn    
)
{
    quiche_conn_on_timeout(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_close(
    conn: *mut quiche_conn,
    app: bool,
    err: u64,
    reason: *const u8,
    reason_len: usize    
) -> c_int
{
    quiche_conn_close(
        conn,
        app,
        err,
        reason,
        reason_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_trace_id(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    quiche_conn_trace_id(
        conn,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_source_id(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    quiche_conn_source_id(
        conn,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_destination_id(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    quiche_conn_destination_id(
        conn,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_application_proto(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    quiche_conn_application_proto(
        conn,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_peer_cert(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    quiche_conn_peer_cert(
        conn,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_session(
    conn: *const quiche_conn,
    out: *mut *mut u8,
    out_len: *mut usize    
)
{
    quiche_conn_session(
        conn,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_is_established(
    conn: *const quiche_conn    
) -> bool
{
    quiche_conn_is_established(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_is_in_early_data(
    conn: *const quiche_conn    
) -> bool
{
    quiche_conn_is_in_early_data(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_is_readable(
    conn: *const quiche_conn    
) -> bool
{
    quiche_conn_is_readable(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_is_draining(
    conn: *const quiche_conn    
) -> bool
{
    quiche_conn_is_draining(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_peer_streams_left_bidi(
    conn: *const quiche_conn    
) -> u64
{
    quiche_conn_peer_streams_left_bidi(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_peer_streams_left_uni(
    conn: *const quiche_conn    
) -> u64
{
    quiche_conn_peer_streams_left_uni(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_is_closed(
    conn: *const quiche_conn    
) -> bool
{
    quiche_conn_is_closed(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_is_timed_out(
    conn: *const quiche_conn    
) -> bool
{
    quiche_conn_is_timed_out(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_peer_error(
    conn: *const quiche_conn,
    is_app: *mut bool,
    error_code: *mut u64,
    reason: *mut *mut u8,
    reason_len: *mut usize    
) -> bool
{
    quiche_conn_peer_error(
        conn,
        is_app,
        error_code,
        reason,
        reason_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_local_error(
    conn: *const quiche_conn,
    is_app: *mut bool,
    error_code: *mut u64,
    reason: *mut *mut u8,
    reason_len: *mut usize    
) -> bool
{
    quiche_conn_local_error(
        conn,
        is_app,
        error_code,
        reason,
        reason_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_init_application_data(
    conn: *mut quiche_conn,
    stream_id: u64,
    data: *mut c_void    
) -> c_int
{
    quiche_conn_stream_init_application_data(
        conn,
        stream_id,
        data
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stream_application_data(
    conn: *mut quiche_conn,
    stream_id: u64    
) -> *mut c_void
{
    quiche_conn_stream_application_data(
        conn,
        stream_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_stream_iter_next(
    iter: *mut quiche_stream_iter,
    stream_id: *mut u64    
) -> bool
{
    quiche_stream_iter_next(
        iter,
        stream_id
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_stream_iter_free(
    iter: *mut quiche_stream_iter    
)
{
    quiche_stream_iter_free(
        iter
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_stats(
    conn: *const quiche_conn,
    out: *mut quiche_stats    
)
{
    quiche_conn_stats(
        conn,
        out
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_path_stats(
    conn: *const quiche_conn,
    idx: usize,
    out: *mut quiche_path_stats    
) -> c_int
{
    quiche_conn_path_stats(
        conn,
        idx,
        out
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_max_writable_len(
    conn: *const quiche_conn    
) -> SSIZE_T
{
    quiche_conn_dgram_max_writable_len(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_recv_front_len(
    conn: *const quiche_conn    
) -> SSIZE_T
{
    quiche_conn_dgram_recv_front_len(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_recv_queue_len(
    conn: *const quiche_conn    
) -> SSIZE_T
{
    quiche_conn_dgram_recv_queue_len(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_recv_queue_byte_size(
    conn: *const quiche_conn    
) -> SSIZE_T
{
    quiche_conn_dgram_recv_queue_byte_size(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_send_queue_len(
    conn: *const quiche_conn    
) -> SSIZE_T
{
    quiche_conn_dgram_send_queue_len(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_send_queue_byte_size(
    conn: *const quiche_conn    
) -> SSIZE_T
{
    quiche_conn_dgram_send_queue_byte_size(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_recv(
    conn: *mut quiche_conn,
    buf: *mut u8,
    buf_len: usize    
) -> SSIZE_T
{
    quiche_conn_dgram_recv(
        conn,
        buf,
        buf_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_send(
    conn: *mut quiche_conn,
    buf: *const u8,
    buf_len: usize    
) -> SSIZE_T
{
    quiche_conn_dgram_send(
        conn,
        buf,
        buf_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_dgram_purge_outgoing(
    conn: *mut quiche_conn,
    f: Option<extern "C" fn(arg1: *mut u8, arg2: usize) -> bool>    
)
{
    quiche_conn_dgram_purge_outgoing(
        conn,
        f
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_send_ack_eliciting(
    conn: *mut quiche_conn    
) -> SSIZE_T
{
    quiche_conn_send_ack_eliciting(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_send_ack_eliciting_on_path(
    conn: *mut quiche_conn,
    local: *const sockaddr,
    local_len: usize,
    peer: *const sockaddr,
    peer_len: usize    
) -> SSIZE_T
{
    quiche_conn_send_ack_eliciting_on_path(
        conn,
        local,
        local_len,
        peer,
        peer_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_conn_free(
    conn: *mut quiche_conn    
)
{
    quiche_conn_free(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_config_new(
    
) -> *mut quiche_h3_config
{
    quiche_h3_config_new(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_config_set_max_field_section_size(
    config: *mut quiche_h3_config,
    v: u64    
)
{
    quiche_h3_config_set_max_field_section_size(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_config_set_qpack_max_table_capacity(
    config: *mut quiche_h3_config,
    v: u64    
)
{
    quiche_h3_config_set_qpack_max_table_capacity(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_config_set_qpack_blocked_streams(
    config: *mut quiche_h3_config,
    v: u64    
)
{
    quiche_h3_config_set_qpack_blocked_streams(
        config,
        v
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_config_enable_extended_connect(
    config: *mut quiche_h3_config,
    enabled: bool    
)
{
    quiche_h3_config_enable_extended_connect(
        config,
        enabled
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_config_free(
    config: *mut quiche_h3_config    
)
{
    quiche_h3_config_free(
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_accept(
    quiche_conn: *mut quiche_conn,
    config: *mut quiche_h3_config    
) -> *mut quiche_h3_conn
{
    quiche_h3_accept(
        quiche_conn,
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_conn_new_with_transport(
    quiche_conn: *mut quiche_conn,
    config: *mut quiche_h3_config    
) -> *mut quiche_h3_conn
{
    quiche_h3_conn_new_with_transport(
        quiche_conn,
        config
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_conn_poll(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    ev: *mut *mut quiche_h3_event    
) -> i64
{
    quiche_h3_conn_poll(
        conn,
        quic_conn,
        ev
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_event_type(
    ev: *mut quiche_h3_event    
) -> quiche_h3_event_type
{
    quiche_h3_event_type(
        ev
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_event_for_each_header(
    ev: *mut quiche_h3_event,
    cb: Option<extern "C" fn(name: *mut u8, name_len: usize, value: *mut u8, value_len: usize, argp: *mut c_void) -> c_int>,
    argp: *mut c_void    
) -> c_int
{
    quiche_h3_event_for_each_header(
        ev,
        cb,
        argp
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_for_each_setting(
    conn: *mut quiche_h3_conn,
    cb: Option<extern "C" fn(identifier: u64, value: u64, argp: *mut c_void) -> c_int>,
    argp: *mut c_void    
) -> c_int
{
    quiche_h3_for_each_setting(
        conn,
        cb,
        argp
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_event_headers_has_body(
    ev: *mut quiche_h3_event    
) -> bool
{
    quiche_h3_event_headers_has_body(
        ev
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_extended_connect_enabled_by_peer(
    conn: *mut quiche_h3_conn    
) -> bool
{
    quiche_h3_extended_connect_enabled_by_peer(
        conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_event_free(
    ev: *mut quiche_h3_event    
)
{
    quiche_h3_event_free(
        ev
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_send_request(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    headers: *mut quiche_h3_header,
    headers_len: usize,
    fin: bool    
) -> i64
{
    quiche_h3_send_request(
        conn,
        quic_conn,
        headers,
        headers_len,
        fin
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_send_response(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id: u64,
    headers: *mut quiche_h3_header,
    headers_len: usize,
    fin: bool    
) -> c_int
{
    quiche_h3_send_response(
        conn,
        quic_conn,
        stream_id,
        headers,
        headers_len,
        fin
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_send_response_with_priority(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id: u64,
    headers: *mut quiche_h3_header,
    headers_len: usize,
    priority: *mut quiche_h3_priority,
    fin: bool    
) -> c_int
{
    quiche_h3_send_response_with_priority(
        conn,
        quic_conn,
        stream_id,
        headers,
        headers_len,
        priority,
        fin
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_send_body(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id: u64,
    body: *mut u8,
    body_len: usize,
    fin: bool    
) -> SSIZE_T
{
    quiche_h3_send_body(
        conn,
        quic_conn,
        stream_id,
        body,
        body_len,
        fin
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_recv_body(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id: u64,
    out: *mut u8,
    out_len: usize    
) -> SSIZE_T
{
    quiche_h3_recv_body(
        conn,
        quic_conn,
        stream_id,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_parse_extensible_priority(
    priority: *mut u8,
    priority_len: usize,
    parsed: *mut quiche_h3_priority    
) -> c_int
{
    quiche_h3_parse_extensible_priority(
        priority,
        priority_len,
        parsed
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_send_priority_update_for_request(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    stream_id: u64,
    priority: *mut quiche_h3_priority    
) -> c_int
{
    quiche_h3_send_priority_update_for_request(
        conn,
        quic_conn,
        stream_id,
        priority
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_take_last_priority_update(
    conn: *mut quiche_h3_conn,
    prioritized_element_id: u64,
    cb: Option<extern "C" fn(priority_field_value: *mut u8, priority_field_value_len: u64, argp: *mut c_void) -> c_int>,
    argp: *mut c_void    
) -> c_int
{
    quiche_h3_take_last_priority_update(
        conn,
        prioritized_element_id,
        cb,
        argp
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_dgram_enabled_by_peer(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn    
) -> bool
{
    quiche_h3_dgram_enabled_by_peer(
        conn,
        quic_conn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_send_dgram(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    flow_id: u64,
    data: *mut u8,
    data_len: usize    
) -> SSIZE_T
{
    quiche_h3_send_dgram(
        conn,
        quic_conn,
        flow_id,
        data,
        data_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_recv_dgram(
    conn: *mut quiche_h3_conn,
    quic_conn: *mut quiche_conn,
    flow_id: *mut u64,
    flow_id_len: *mut usize,
    out: *mut u8,
    out_len: usize    
) -> SSIZE_T
{
    quiche_h3_recv_dgram(
        conn,
        quic_conn,
        flow_id,
        flow_id_len,
        out,
        out_len
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_quiche_quiche_h3_conn_free(
    conn: *mut quiche_h3_conn    
)
{
    quiche_h3_conn_free(
        conn
    )
}

    