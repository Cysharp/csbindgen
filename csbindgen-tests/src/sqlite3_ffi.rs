/* automatically generated by csbindgen */

#[allow(unused)]
use ::std::os::raw::*;

use super::sqlite3::*;


#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_libversion(
    
) -> *const c_char
{
    sqlite3_libversion(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_sourceid(
    
) -> *const c_char
{
    sqlite3_sourceid(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_libversion_number(
    
) -> c_int
{
    sqlite3_libversion_number(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_compileoption_used(
    zOptName: *const c_char    
) -> c_int
{
    sqlite3_compileoption_used(
        zOptName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_compileoption_get(
    N: c_int    
) -> *const c_char
{
    sqlite3_compileoption_get(
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_threadsafe(
    
) -> c_int
{
    sqlite3_threadsafe(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_close(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_close(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_close_v2(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_close_v2(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_exec(
    arg1: *mut sqlite3,
    sql: *const c_char,
    callback: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: c_int, arg3: *mut *mut c_char, arg4: *mut *mut c_char) -> c_int>,
    arg2: *mut c_void,
    errmsg: *mut *mut c_char    
) -> c_int
{
    sqlite3_exec(
        arg1,
        sql,
        callback,
        arg2,
        errmsg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_initialize(
    
) -> c_int
{
    sqlite3_initialize(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_shutdown(
    
) -> c_int
{
    sqlite3_shutdown(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_os_init(
    
) -> c_int
{
    sqlite3_os_init(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_os_end(
    
) -> c_int
{
    sqlite3_os_end(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_config(
    arg1: c_int    
) -> c_int
{
    sqlite3_config(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_config(
    arg1: *mut sqlite3,
    op: c_int    
) -> c_int
{
    sqlite3_db_config(
        arg1,
        op
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_extended_result_codes(
    arg1: *mut sqlite3,
    onoff: c_int    
) -> c_int
{
    sqlite3_extended_result_codes(
        arg1,
        onoff
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_last_insert_rowid(
    arg1: *mut sqlite3    
) -> sqlite3_int64
{
    sqlite3_last_insert_rowid(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_set_last_insert_rowid(
    arg1: *mut sqlite3,
    arg2: sqlite3_int64    
)
{
    sqlite3_set_last_insert_rowid(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_changes(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_changes(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_changes64(
    arg1: *mut sqlite3    
) -> sqlite3_int64
{
    sqlite3_changes64(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_total_changes(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_total_changes(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_total_changes64(
    arg1: *mut sqlite3    
) -> sqlite3_int64
{
    sqlite3_total_changes64(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_interrupt(
    arg1: *mut sqlite3    
)
{
    sqlite3_interrupt(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_is_interrupted(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_is_interrupted(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_complete(
    sql: *const c_char    
) -> c_int
{
    sqlite3_complete(
        sql
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_complete16(
    sql: *const c_void    
) -> c_int
{
    sqlite3_complete16(
        sql
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_busy_handler(
    arg1: *mut sqlite3,
    arg2: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: c_int) -> c_int>,
    arg3: *mut c_void    
) -> c_int
{
    sqlite3_busy_handler(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_busy_timeout(
    arg1: *mut sqlite3,
    ms: c_int    
) -> c_int
{
    sqlite3_busy_timeout(
        arg1,
        ms
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_free_table(
    result: *mut *mut c_char    
)
{
    sqlite3_free_table(
        result
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_mprintf(
    arg1: *const c_char    
) -> *mut c_char
{
    sqlite3_mprintf(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vmprintf(
    arg1: *const c_char,
    arg2: va_list    
) -> *mut c_char
{
    sqlite3_vmprintf(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_snprintf(
    arg1: c_int,
    arg2: *mut c_char,
    arg3: *const c_char    
) -> *mut c_char
{
    sqlite3_snprintf(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vsnprintf(
    arg1: c_int,
    arg2: *mut c_char,
    arg3: *const c_char,
    arg4: va_list    
) -> *mut c_char
{
    sqlite3_vsnprintf(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_malloc(
    arg1: c_int    
) -> *mut c_void
{
    sqlite3_malloc(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_malloc64(
    arg1: sqlite3_uint64    
) -> *mut c_void
{
    sqlite3_malloc64(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_realloc(
    arg1: *mut c_void,
    arg2: c_int    
) -> *mut c_void
{
    sqlite3_realloc(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_realloc64(
    arg1: *mut c_void,
    arg2: sqlite3_uint64    
) -> *mut c_void
{
    sqlite3_realloc64(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_free(
    arg1: *mut c_void    
)
{
    sqlite3_free(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_msize(
    arg1: *mut c_void    
) -> sqlite3_uint64
{
    sqlite3_msize(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_memory_used(
    
) -> sqlite3_int64
{
    sqlite3_memory_used(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_memory_highwater(
    resetFlag: c_int    
) -> sqlite3_int64
{
    sqlite3_memory_highwater(
        resetFlag
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_randomness(
    N: c_int,
    P: *mut c_void    
)
{
    sqlite3_randomness(
        N,
        P
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_set_authorizer(
    arg1: *mut sqlite3,
    xAuth: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: c_int, arg3: *const c_char, arg4: *const c_char, arg5: *const c_char, arg6: *const c_char) -> c_int>,
    pUserData: *mut c_void    
) -> c_int
{
    sqlite3_set_authorizer(
        arg1,
        xAuth,
        pUserData
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_trace(
    arg1: *mut sqlite3,
    xTrace: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: *const c_char)>,
    arg2: *mut c_void    
) -> *mut c_void
{
    sqlite3_trace(
        arg1,
        xTrace,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_profile(
    arg1: *mut sqlite3,
    xProfile: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: *const c_char, arg3: sqlite3_uint64)>,
    arg2: *mut c_void    
) -> *mut c_void
{
    sqlite3_profile(
        arg1,
        xProfile,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_trace_v2(
    arg1: *mut sqlite3,
    uMask: c_uint,
    xCallback: Option<unsafe extern "C" fn(arg1: c_uint, arg2: *mut c_void, arg3: *mut c_void, arg4: *mut c_void) -> c_int>,
    pCtx: *mut c_void    
) -> c_int
{
    sqlite3_trace_v2(
        arg1,
        uMask,
        xCallback,
        pCtx
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_progress_handler(
    arg1: *mut sqlite3,
    arg2: c_int,
    arg3: Option<unsafe extern "C" fn(arg1: *mut c_void) -> c_int>,
    arg4: *mut c_void    
)
{
    sqlite3_progress_handler(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_open(
    filename: *const c_char,
    ppDb: *mut *mut sqlite3    
) -> c_int
{
    sqlite3_open(
        filename,
        ppDb
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_open16(
    filename: *const c_void,
    ppDb: *mut *mut sqlite3    
) -> c_int
{
    sqlite3_open16(
        filename,
        ppDb
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_open_v2(
    filename: *const c_char,
    ppDb: *mut *mut sqlite3,
    flags: c_int,
    zVfs: *const c_char    
) -> c_int
{
    sqlite3_open_v2(
        filename,
        ppDb,
        flags,
        zVfs
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_uri_parameter(
    z: sqlite3_filename,
    zParam: *const c_char    
) -> *const c_char
{
    sqlite3_uri_parameter(
        z,
        zParam
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_uri_boolean(
    z: sqlite3_filename,
    zParam: *const c_char,
    bDefault: c_int    
) -> c_int
{
    sqlite3_uri_boolean(
        z,
        zParam,
        bDefault
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_uri_int64(
    arg1: sqlite3_filename,
    arg2: *const c_char,
    arg3: sqlite3_int64    
) -> sqlite3_int64
{
    sqlite3_uri_int64(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_uri_key(
    z: sqlite3_filename,
    N: c_int    
) -> *const c_char
{
    sqlite3_uri_key(
        z,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_filename_database(
    arg1: sqlite3_filename    
) -> *const c_char
{
    sqlite3_filename_database(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_filename_journal(
    arg1: sqlite3_filename    
) -> *const c_char
{
    sqlite3_filename_journal(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_filename_wal(
    arg1: sqlite3_filename    
) -> *const c_char
{
    sqlite3_filename_wal(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_database_file_object(
    arg1: *const c_char    
) -> *mut sqlite3_file
{
    sqlite3_database_file_object(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_filename(
    zDatabase: *const c_char,
    zJournal: *const c_char,
    zWal: *const c_char,
    nParam: c_int,
    azParam: *mut *const c_char    
) -> sqlite3_filename
{
    sqlite3_create_filename(
        zDatabase,
        zJournal,
        zWal,
        nParam,
        azParam
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_free_filename(
    arg1: sqlite3_filename    
)
{
    sqlite3_free_filename(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_errcode(
    db: *mut sqlite3    
) -> c_int
{
    sqlite3_errcode(
        db
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_extended_errcode(
    db: *mut sqlite3    
) -> c_int
{
    sqlite3_extended_errcode(
        db
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_errmsg(
    arg1: *mut sqlite3    
) -> *const c_char
{
    sqlite3_errmsg(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_errmsg16(
    arg1: *mut sqlite3    
) -> *const c_void
{
    sqlite3_errmsg16(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_errstr(
    arg1: c_int    
) -> *const c_char
{
    sqlite3_errstr(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_error_offset(
    db: *mut sqlite3    
) -> c_int
{
    sqlite3_error_offset(
        db
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_limit(
    arg1: *mut sqlite3,
    id: c_int,
    newVal: c_int    
) -> c_int
{
    sqlite3_limit(
        arg1,
        id,
        newVal
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_prepare(
    db: *mut sqlite3,
    zSql: *const c_char,
    nByte: c_int,
    ppStmt: *mut *mut sqlite3_stmt,
    pzTail: *mut *const c_char    
) -> c_int
{
    sqlite3_prepare(
        db,
        zSql,
        nByte,
        ppStmt,
        pzTail
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_prepare_v2(
    db: *mut sqlite3,
    zSql: *const c_char,
    nByte: c_int,
    ppStmt: *mut *mut sqlite3_stmt,
    pzTail: *mut *const c_char    
) -> c_int
{
    sqlite3_prepare_v2(
        db,
        zSql,
        nByte,
        ppStmt,
        pzTail
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_prepare_v3(
    db: *mut sqlite3,
    zSql: *const c_char,
    nByte: c_int,
    prepFlags: c_uint,
    ppStmt: *mut *mut sqlite3_stmt,
    pzTail: *mut *const c_char    
) -> c_int
{
    sqlite3_prepare_v3(
        db,
        zSql,
        nByte,
        prepFlags,
        ppStmt,
        pzTail
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_prepare16(
    db: *mut sqlite3,
    zSql: *const c_void,
    nByte: c_int,
    ppStmt: *mut *mut sqlite3_stmt,
    pzTail: *mut *const c_void    
) -> c_int
{
    sqlite3_prepare16(
        db,
        zSql,
        nByte,
        ppStmt,
        pzTail
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_prepare16_v2(
    db: *mut sqlite3,
    zSql: *const c_void,
    nByte: c_int,
    ppStmt: *mut *mut sqlite3_stmt,
    pzTail: *mut *const c_void    
) -> c_int
{
    sqlite3_prepare16_v2(
        db,
        zSql,
        nByte,
        ppStmt,
        pzTail
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_prepare16_v3(
    db: *mut sqlite3,
    zSql: *const c_void,
    nByte: c_int,
    prepFlags: c_uint,
    ppStmt: *mut *mut sqlite3_stmt,
    pzTail: *mut *const c_void    
) -> c_int
{
    sqlite3_prepare16_v3(
        db,
        zSql,
        nByte,
        prepFlags,
        ppStmt,
        pzTail
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_sql(
    pStmt: *mut sqlite3_stmt    
) -> *const c_char
{
    sqlite3_sql(
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_expanded_sql(
    pStmt: *mut sqlite3_stmt    
) -> *mut c_char
{
    sqlite3_expanded_sql(
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_stmt_readonly(
    pStmt: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_stmt_readonly(
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_stmt_isexplain(
    pStmt: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_stmt_isexplain(
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_stmt_busy(
    arg1: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_stmt_busy(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_blob(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: *const c_void,
    n: c_int,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_bind_blob(
        arg1,
        arg2,
        arg3,
        n,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_blob64(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: *const c_void,
    arg4: sqlite3_uint64,
    arg5: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_bind_blob64(
        arg1,
        arg2,
        arg3,
        arg4,
        arg5
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_double(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: f64    
) -> c_int
{
    sqlite3_bind_double(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_int(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: c_int    
) -> c_int
{
    sqlite3_bind_int(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_int64(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: sqlite3_int64    
) -> c_int
{
    sqlite3_bind_int64(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_null(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> c_int
{
    sqlite3_bind_null(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_text(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: *const c_char,
    arg4: c_int,
    arg5: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_bind_text(
        arg1,
        arg2,
        arg3,
        arg4,
        arg5
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_text16(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: *const c_void,
    arg4: c_int,
    arg5: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_bind_text16(
        arg1,
        arg2,
        arg3,
        arg4,
        arg5
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_text64(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: *const c_char,
    arg4: sqlite3_uint64,
    arg5: Option<unsafe extern "C" fn(arg1: *mut c_void)>,
    encoding: c_uchar    
) -> c_int
{
    sqlite3_bind_text64(
        arg1,
        arg2,
        arg3,
        arg4,
        arg5,
        encoding
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_value(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: *const sqlite3_value    
) -> c_int
{
    sqlite3_bind_value(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_pointer(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: *mut c_void,
    arg4: *const c_char,
    arg5: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_bind_pointer(
        arg1,
        arg2,
        arg3,
        arg4,
        arg5
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_zeroblob(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    n: c_int    
) -> c_int
{
    sqlite3_bind_zeroblob(
        arg1,
        arg2,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_zeroblob64(
    arg1: *mut sqlite3_stmt,
    arg2: c_int,
    arg3: sqlite3_uint64    
) -> c_int
{
    sqlite3_bind_zeroblob64(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_parameter_count(
    arg1: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_bind_parameter_count(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_parameter_name(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_char
{
    sqlite3_bind_parameter_name(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_bind_parameter_index(
    arg1: *mut sqlite3_stmt,
    zName: *const c_char    
) -> c_int
{
    sqlite3_bind_parameter_index(
        arg1,
        zName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_clear_bindings(
    arg1: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_clear_bindings(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_count(
    pStmt: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_column_count(
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_name(
    arg1: *mut sqlite3_stmt,
    N: c_int    
) -> *const c_char
{
    sqlite3_column_name(
        arg1,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_name16(
    arg1: *mut sqlite3_stmt,
    N: c_int    
) -> *const c_void
{
    sqlite3_column_name16(
        arg1,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_database_name(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_char
{
    sqlite3_column_database_name(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_database_name16(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_void
{
    sqlite3_column_database_name16(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_table_name(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_char
{
    sqlite3_column_table_name(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_table_name16(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_void
{
    sqlite3_column_table_name16(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_origin_name(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_char
{
    sqlite3_column_origin_name(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_origin_name16(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_void
{
    sqlite3_column_origin_name16(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_decltype(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_char
{
    sqlite3_column_decltype(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_decltype16(
    arg1: *mut sqlite3_stmt,
    arg2: c_int    
) -> *const c_void
{
    sqlite3_column_decltype16(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_step(
    arg1: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_step(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_data_count(
    pStmt: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_data_count(
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_blob(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> *const c_void
{
    sqlite3_column_blob(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_double(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> f64
{
    sqlite3_column_double(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_int(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> c_int
{
    sqlite3_column_int(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_int64(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> sqlite3_int64
{
    sqlite3_column_int64(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_text(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> *const c_uchar
{
    sqlite3_column_text(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_text16(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> *const c_void
{
    sqlite3_column_text16(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_value(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> *mut sqlite3_value
{
    sqlite3_column_value(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_bytes(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> c_int
{
    sqlite3_column_bytes(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_bytes16(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> c_int
{
    sqlite3_column_bytes16(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_column_type(
    arg1: *mut sqlite3_stmt,
    iCol: c_int    
) -> c_int
{
    sqlite3_column_type(
        arg1,
        iCol
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_finalize(
    pStmt: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_finalize(
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_reset(
    pStmt: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_reset(
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_function(
    db: *mut sqlite3,
    zFunctionName: *const c_char,
    nArg: c_int,
    eTextRep: c_int,
    pApp: *mut c_void,
    xFunc: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: c_int, arg3: *mut *mut sqlite3_value)>,
    xStep: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: c_int, arg3: *mut *mut sqlite3_value)>,
    xFinal: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>    
) -> c_int
{
    sqlite3_create_function(
        db,
        zFunctionName,
        nArg,
        eTextRep,
        pApp,
        xFunc,
        xStep,
        xFinal
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_function16(
    db: *mut sqlite3,
    zFunctionName: *const c_void,
    nArg: c_int,
    eTextRep: c_int,
    pApp: *mut c_void,
    xFunc: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: c_int, arg3: *mut *mut sqlite3_value)>,
    xStep: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: c_int, arg3: *mut *mut sqlite3_value)>,
    xFinal: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>    
) -> c_int
{
    sqlite3_create_function16(
        db,
        zFunctionName,
        nArg,
        eTextRep,
        pApp,
        xFunc,
        xStep,
        xFinal
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_function_v2(
    db: *mut sqlite3,
    zFunctionName: *const c_char,
    nArg: c_int,
    eTextRep: c_int,
    pApp: *mut c_void,
    xFunc: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: c_int, arg3: *mut *mut sqlite3_value)>,
    xStep: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: c_int, arg3: *mut *mut sqlite3_value)>,
    xFinal: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
    xDestroy: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_create_function_v2(
        db,
        zFunctionName,
        nArg,
        eTextRep,
        pApp,
        xFunc,
        xStep,
        xFinal,
        xDestroy
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_window_function(
    db: *mut sqlite3,
    zFunctionName: *const c_char,
    nArg: c_int,
    eTextRep: c_int,
    pApp: *mut c_void,
    xStep: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: c_int, arg3: *mut *mut sqlite3_value)>,
    xFinal: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
    xValue: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context)>,
    xInverse: Option<unsafe extern "C" fn(arg1: *mut sqlite3_context, arg2: c_int, arg3: *mut *mut sqlite3_value)>,
    xDestroy: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_create_window_function(
        db,
        zFunctionName,
        nArg,
        eTextRep,
        pApp,
        xStep,
        xFinal,
        xValue,
        xInverse,
        xDestroy
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_aggregate_count(
    arg1: *mut sqlite3_context    
) -> c_int
{
    sqlite3_aggregate_count(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_expired(
    arg1: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_expired(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_transfer_bindings(
    arg1: *mut sqlite3_stmt,
    arg2: *mut sqlite3_stmt    
) -> c_int
{
    sqlite3_transfer_bindings(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_global_recover(
    
) -> c_int
{
    sqlite3_global_recover(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_thread_cleanup(
    
)
{
    sqlite3_thread_cleanup(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_memory_alarm(
    arg1: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: sqlite3_int64, arg3: c_int)>,
    arg2: *mut c_void,
    arg3: sqlite3_int64    
) -> c_int
{
    sqlite3_memory_alarm(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_blob(
    arg1: *mut sqlite3_value    
) -> *const c_void
{
    sqlite3_value_blob(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_double(
    arg1: *mut sqlite3_value    
) -> f64
{
    sqlite3_value_double(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_int(
    arg1: *mut sqlite3_value    
) -> c_int
{
    sqlite3_value_int(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_int64(
    arg1: *mut sqlite3_value    
) -> sqlite3_int64
{
    sqlite3_value_int64(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_pointer(
    arg1: *mut sqlite3_value,
    arg2: *const c_char    
) -> *mut c_void
{
    sqlite3_value_pointer(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_text(
    arg1: *mut sqlite3_value    
) -> *const c_uchar
{
    sqlite3_value_text(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_text16(
    arg1: *mut sqlite3_value    
) -> *const c_void
{
    sqlite3_value_text16(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_text16le(
    arg1: *mut sqlite3_value    
) -> *const c_void
{
    sqlite3_value_text16le(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_text16be(
    arg1: *mut sqlite3_value    
) -> *const c_void
{
    sqlite3_value_text16be(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_bytes(
    arg1: *mut sqlite3_value    
) -> c_int
{
    sqlite3_value_bytes(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_bytes16(
    arg1: *mut sqlite3_value    
) -> c_int
{
    sqlite3_value_bytes16(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_type(
    arg1: *mut sqlite3_value    
) -> c_int
{
    sqlite3_value_type(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_numeric_type(
    arg1: *mut sqlite3_value    
) -> c_int
{
    sqlite3_value_numeric_type(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_nochange(
    arg1: *mut sqlite3_value    
) -> c_int
{
    sqlite3_value_nochange(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_frombind(
    arg1: *mut sqlite3_value    
) -> c_int
{
    sqlite3_value_frombind(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_encoding(
    arg1: *mut sqlite3_value    
) -> c_int
{
    sqlite3_value_encoding(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_subtype(
    arg1: *mut sqlite3_value    
) -> c_uint
{
    sqlite3_value_subtype(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_dup(
    arg1: *const sqlite3_value    
) -> *mut sqlite3_value
{
    sqlite3_value_dup(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_value_free(
    arg1: *mut sqlite3_value    
)
{
    sqlite3_value_free(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_aggregate_context(
    arg1: *mut sqlite3_context,
    nBytes: c_int    
) -> *mut c_void
{
    sqlite3_aggregate_context(
        arg1,
        nBytes
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_user_data(
    arg1: *mut sqlite3_context    
) -> *mut c_void
{
    sqlite3_user_data(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_context_db_handle(
    arg1: *mut sqlite3_context    
) -> *mut sqlite3
{
    sqlite3_context_db_handle(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_get_auxdata(
    arg1: *mut sqlite3_context,
    N: c_int    
) -> *mut c_void
{
    sqlite3_get_auxdata(
        arg1,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_set_auxdata(
    arg1: *mut sqlite3_context,
    N: c_int,
    arg2: *mut c_void,
    arg3: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
)
{
    sqlite3_set_auxdata(
        arg1,
        N,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_blob(
    arg1: *mut sqlite3_context,
    arg2: *const c_void,
    arg3: c_int,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
)
{
    sqlite3_result_blob(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_blob64(
    arg1: *mut sqlite3_context,
    arg2: *const c_void,
    arg3: sqlite3_uint64,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
)
{
    sqlite3_result_blob64(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_double(
    arg1: *mut sqlite3_context,
    arg2: f64    
)
{
    sqlite3_result_double(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_error(
    arg1: *mut sqlite3_context,
    arg2: *const c_char,
    arg3: c_int    
)
{
    sqlite3_result_error(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_error16(
    arg1: *mut sqlite3_context,
    arg2: *const c_void,
    arg3: c_int    
)
{
    sqlite3_result_error16(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_error_toobig(
    arg1: *mut sqlite3_context    
)
{
    sqlite3_result_error_toobig(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_error_nomem(
    arg1: *mut sqlite3_context    
)
{
    sqlite3_result_error_nomem(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_error_code(
    arg1: *mut sqlite3_context,
    arg2: c_int    
)
{
    sqlite3_result_error_code(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_int(
    arg1: *mut sqlite3_context,
    arg2: c_int    
)
{
    sqlite3_result_int(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_int64(
    arg1: *mut sqlite3_context,
    arg2: sqlite3_int64    
)
{
    sqlite3_result_int64(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_null(
    arg1: *mut sqlite3_context    
)
{
    sqlite3_result_null(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_text(
    arg1: *mut sqlite3_context,
    arg2: *const c_char,
    arg3: c_int,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
)
{
    sqlite3_result_text(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_text64(
    arg1: *mut sqlite3_context,
    arg2: *const c_char,
    arg3: sqlite3_uint64,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>,
    encoding: c_uchar    
)
{
    sqlite3_result_text64(
        arg1,
        arg2,
        arg3,
        arg4,
        encoding
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_text16(
    arg1: *mut sqlite3_context,
    arg2: *const c_void,
    arg3: c_int,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
)
{
    sqlite3_result_text16(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_text16le(
    arg1: *mut sqlite3_context,
    arg2: *const c_void,
    arg3: c_int,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
)
{
    sqlite3_result_text16le(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_text16be(
    arg1: *mut sqlite3_context,
    arg2: *const c_void,
    arg3: c_int,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
)
{
    sqlite3_result_text16be(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_value(
    arg1: *mut sqlite3_context,
    arg2: *mut sqlite3_value    
)
{
    sqlite3_result_value(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_pointer(
    arg1: *mut sqlite3_context,
    arg2: *mut c_void,
    arg3: *const c_char,
    arg4: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
)
{
    sqlite3_result_pointer(
        arg1,
        arg2,
        arg3,
        arg4
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_zeroblob(
    arg1: *mut sqlite3_context,
    n: c_int    
)
{
    sqlite3_result_zeroblob(
        arg1,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_zeroblob64(
    arg1: *mut sqlite3_context,
    n: sqlite3_uint64    
) -> c_int
{
    sqlite3_result_zeroblob64(
        arg1,
        n
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_result_subtype(
    arg1: *mut sqlite3_context,
    arg2: c_uint    
)
{
    sqlite3_result_subtype(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_collation(
    arg1: *mut sqlite3,
    zName: *const c_char,
    eTextRep: c_int,
    pArg: *mut c_void,
    xCompare: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: c_int, arg3: *const c_void, arg4: c_int, arg5: *const c_void) -> c_int>    
) -> c_int
{
    sqlite3_create_collation(
        arg1,
        zName,
        eTextRep,
        pArg,
        xCompare
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_collation_v2(
    arg1: *mut sqlite3,
    zName: *const c_char,
    eTextRep: c_int,
    pArg: *mut c_void,
    xCompare: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: c_int, arg3: *const c_void, arg4: c_int, arg5: *const c_void) -> c_int>,
    xDestroy: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_create_collation_v2(
        arg1,
        zName,
        eTextRep,
        pArg,
        xCompare,
        xDestroy
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_collation16(
    arg1: *mut sqlite3,
    zName: *const c_void,
    eTextRep: c_int,
    pArg: *mut c_void,
    xCompare: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: c_int, arg3: *const c_void, arg4: c_int, arg5: *const c_void) -> c_int>    
) -> c_int
{
    sqlite3_create_collation16(
        arg1,
        zName,
        eTextRep,
        pArg,
        xCompare
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_collation_needed(
    arg1: *mut sqlite3,
    arg2: *mut c_void,
    arg3: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: *mut sqlite3, eTextRep: c_int, arg3: *const c_char)>    
) -> c_int
{
    sqlite3_collation_needed(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_collation_needed16(
    arg1: *mut sqlite3,
    arg2: *mut c_void,
    arg3: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: *mut sqlite3, eTextRep: c_int, arg3: *const c_void)>    
) -> c_int
{
    sqlite3_collation_needed16(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_sleep(
    arg1: c_int    
) -> c_int
{
    sqlite3_sleep(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_win32_set_directory(
    type_: c_ulong,
    zValue: *mut c_void    
) -> c_int
{
    sqlite3_win32_set_directory(
        type_,
        zValue
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_win32_set_directory8(
    type_: c_ulong,
    zValue: *const c_char    
) -> c_int
{
    sqlite3_win32_set_directory8(
        type_,
        zValue
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_win32_set_directory16(
    type_: c_ulong,
    zValue: *const c_void    
) -> c_int
{
    sqlite3_win32_set_directory16(
        type_,
        zValue
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_get_autocommit(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_get_autocommit(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_handle(
    arg1: *mut sqlite3_stmt    
) -> *mut sqlite3
{
    sqlite3_db_handle(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_name(
    db: *mut sqlite3,
    N: c_int    
) -> *const c_char
{
    sqlite3_db_name(
        db,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_filename(
    db: *mut sqlite3,
    zDbName: *const c_char    
) -> sqlite3_filename
{
    sqlite3_db_filename(
        db,
        zDbName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_readonly(
    db: *mut sqlite3,
    zDbName: *const c_char    
) -> c_int
{
    sqlite3_db_readonly(
        db,
        zDbName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_txn_state(
    arg1: *mut sqlite3,
    zSchema: *const c_char    
) -> c_int
{
    sqlite3_txn_state(
        arg1,
        zSchema
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_next_stmt(
    pDb: *mut sqlite3,
    pStmt: *mut sqlite3_stmt    
) -> *mut sqlite3_stmt
{
    sqlite3_next_stmt(
        pDb,
        pStmt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_commit_hook(
    arg1: *mut sqlite3,
    arg2: Option<unsafe extern "C" fn(arg1: *mut c_void) -> c_int>,
    arg3: *mut c_void    
) -> *mut c_void
{
    sqlite3_commit_hook(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_rollback_hook(
    arg1: *mut sqlite3,
    arg2: Option<unsafe extern "C" fn(arg1: *mut c_void)>,
    arg3: *mut c_void    
) -> *mut c_void
{
    sqlite3_rollback_hook(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_autovacuum_pages(
    db: *mut sqlite3,
    arg1: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: *const c_char, arg3: c_uint, arg4: c_uint, arg5: c_uint) -> c_uint>,
    arg2: *mut c_void,
    arg3: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_autovacuum_pages(
        db,
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_update_hook(
    arg1: *mut sqlite3,
    arg2: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: c_int, arg3: *const c_char, arg4: *const c_char, arg5: sqlite3_int64)>,
    arg3: *mut c_void    
) -> *mut c_void
{
    sqlite3_update_hook(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_enable_shared_cache(
    arg1: c_int    
) -> c_int
{
    sqlite3_enable_shared_cache(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_release_memory(
    arg1: c_int    
) -> c_int
{
    sqlite3_release_memory(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_release_memory(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_db_release_memory(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_soft_heap_limit64(
    N: sqlite3_int64    
) -> sqlite3_int64
{
    sqlite3_soft_heap_limit64(
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_hard_heap_limit64(
    N: sqlite3_int64    
) -> sqlite3_int64
{
    sqlite3_hard_heap_limit64(
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_soft_heap_limit(
    N: c_int    
)
{
    sqlite3_soft_heap_limit(
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_table_column_metadata(
    db: *mut sqlite3,
    zDbName: *const c_char,
    zTableName: *const c_char,
    zColumnName: *const c_char,
    pzDataType: *mut *const c_char,
    pzCollSeq: *mut *const c_char,
    pNotNull: *mut c_int,
    pPrimaryKey: *mut c_int,
    pAutoinc: *mut c_int    
) -> c_int
{
    sqlite3_table_column_metadata(
        db,
        zDbName,
        zTableName,
        zColumnName,
        pzDataType,
        pzCollSeq,
        pNotNull,
        pPrimaryKey,
        pAutoinc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_load_extension(
    db: *mut sqlite3,
    zFile: *const c_char,
    zProc: *const c_char,
    pzErrMsg: *mut *mut c_char    
) -> c_int
{
    sqlite3_load_extension(
        db,
        zFile,
        zProc,
        pzErrMsg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_enable_load_extension(
    db: *mut sqlite3,
    onoff: c_int    
) -> c_int
{
    sqlite3_enable_load_extension(
        db,
        onoff
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_auto_extension(
    xEntryPoint: Option<unsafe extern "C" fn()>    
) -> c_int
{
    sqlite3_auto_extension(
        xEntryPoint
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_cancel_auto_extension(
    xEntryPoint: Option<unsafe extern "C" fn()>    
) -> c_int
{
    sqlite3_cancel_auto_extension(
        xEntryPoint
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_reset_auto_extension(
    
)
{
    sqlite3_reset_auto_extension(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_module(
    db: *mut sqlite3,
    zName: *const c_char,
    p: *const sqlite3_module,
    pClientData: *mut c_void    
) -> c_int
{
    sqlite3_create_module(
        db,
        zName,
        p,
        pClientData
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_create_module_v2(
    db: *mut sqlite3,
    zName: *const c_char,
    p: *const sqlite3_module,
    pClientData: *mut c_void,
    xDestroy: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_create_module_v2(
        db,
        zName,
        p,
        pClientData,
        xDestroy
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_drop_modules(
    db: *mut sqlite3,
    azKeep: *mut *const c_char    
) -> c_int
{
    sqlite3_drop_modules(
        db,
        azKeep
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_declare_vtab(
    arg1: *mut sqlite3,
    zSQL: *const c_char    
) -> c_int
{
    sqlite3_declare_vtab(
        arg1,
        zSQL
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_overload_function(
    arg1: *mut sqlite3,
    zFuncName: *const c_char,
    nArg: c_int    
) -> c_int
{
    sqlite3_overload_function(
        arg1,
        zFuncName,
        nArg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_blob_open(
    arg1: *mut sqlite3,
    zDb: *const c_char,
    zTable: *const c_char,
    zColumn: *const c_char,
    iRow: sqlite3_int64,
    flags: c_int,
    ppBlob: *mut *mut sqlite3_blob    
) -> c_int
{
    sqlite3_blob_open(
        arg1,
        zDb,
        zTable,
        zColumn,
        iRow,
        flags,
        ppBlob
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_blob_reopen(
    arg1: *mut sqlite3_blob,
    arg2: sqlite3_int64    
) -> c_int
{
    sqlite3_blob_reopen(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_blob_close(
    arg1: *mut sqlite3_blob    
) -> c_int
{
    sqlite3_blob_close(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_blob_bytes(
    arg1: *mut sqlite3_blob    
) -> c_int
{
    sqlite3_blob_bytes(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_blob_read(
    arg1: *mut sqlite3_blob,
    Z: *mut c_void,
    N: c_int,
    iOffset: c_int    
) -> c_int
{
    sqlite3_blob_read(
        arg1,
        Z,
        N,
        iOffset
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_blob_write(
    arg1: *mut sqlite3_blob,
    z: *const c_void,
    n: c_int,
    iOffset: c_int    
) -> c_int
{
    sqlite3_blob_write(
        arg1,
        z,
        n,
        iOffset
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vfs_find(
    zVfsName: *const c_char    
) -> *mut sqlite3_vfs
{
    sqlite3_vfs_find(
        zVfsName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vfs_register(
    arg1: *mut sqlite3_vfs,
    makeDflt: c_int    
) -> c_int
{
    sqlite3_vfs_register(
        arg1,
        makeDflt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vfs_unregister(
    arg1: *mut sqlite3_vfs    
) -> c_int
{
    sqlite3_vfs_unregister(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_mutex_alloc(
    arg1: c_int    
) -> *mut sqlite3_mutex
{
    sqlite3_mutex_alloc(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_mutex_free(
    arg1: *mut sqlite3_mutex    
)
{
    sqlite3_mutex_free(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_mutex_enter(
    arg1: *mut sqlite3_mutex    
)
{
    sqlite3_mutex_enter(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_mutex_try(
    arg1: *mut sqlite3_mutex    
) -> c_int
{
    sqlite3_mutex_try(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_mutex_leave(
    arg1: *mut sqlite3_mutex    
)
{
    sqlite3_mutex_leave(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_mutex_held(
    arg1: *mut sqlite3_mutex    
) -> c_int
{
    sqlite3_mutex_held(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_mutex_notheld(
    arg1: *mut sqlite3_mutex    
) -> c_int
{
    sqlite3_mutex_notheld(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_mutex(
    arg1: *mut sqlite3    
) -> *mut sqlite3_mutex
{
    sqlite3_db_mutex(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_file_control(
    arg1: *mut sqlite3,
    zDbName: *const c_char,
    op: c_int,
    arg2: *mut c_void    
) -> c_int
{
    sqlite3_file_control(
        arg1,
        zDbName,
        op,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_test_control(
    op: c_int    
) -> c_int
{
    sqlite3_test_control(
        op
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_keyword_count(
    
) -> c_int
{
    sqlite3_keyword_count(

    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_keyword_name(
    arg1: c_int,
    arg2: *mut *const c_char,
    arg3: *mut c_int    
) -> c_int
{
    sqlite3_keyword_name(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_keyword_check(
    arg1: *const c_char,
    arg2: c_int    
) -> c_int
{
    sqlite3_keyword_check(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_new(
    arg1: *mut sqlite3    
) -> *mut sqlite3_str
{
    sqlite3_str_new(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_finish(
    arg1: *mut sqlite3_str    
) -> *mut c_char
{
    sqlite3_str_finish(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_appendf(
    arg1: *mut sqlite3_str,
    zFormat: *const c_char    
)
{
    sqlite3_str_appendf(
        arg1,
        zFormat
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_vappendf(
    arg1: *mut sqlite3_str,
    zFormat: *const c_char,
    arg2: va_list    
)
{
    sqlite3_str_vappendf(
        arg1,
        zFormat,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_append(
    arg1: *mut sqlite3_str,
    zIn: *const c_char,
    N: c_int    
)
{
    sqlite3_str_append(
        arg1,
        zIn,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_appendall(
    arg1: *mut sqlite3_str,
    zIn: *const c_char    
)
{
    sqlite3_str_appendall(
        arg1,
        zIn
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_appendchar(
    arg1: *mut sqlite3_str,
    N: c_int,
    C: c_char    
)
{
    sqlite3_str_appendchar(
        arg1,
        N,
        C
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_reset(
    arg1: *mut sqlite3_str    
)
{
    sqlite3_str_reset(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_errcode(
    arg1: *mut sqlite3_str    
) -> c_int
{
    sqlite3_str_errcode(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_length(
    arg1: *mut sqlite3_str    
) -> c_int
{
    sqlite3_str_length(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_str_value(
    arg1: *mut sqlite3_str    
) -> *mut c_char
{
    sqlite3_str_value(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_status(
    op: c_int,
    pCurrent: *mut c_int,
    pHighwater: *mut c_int,
    resetFlag: c_int    
) -> c_int
{
    sqlite3_status(
        op,
        pCurrent,
        pHighwater,
        resetFlag
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_status64(
    op: c_int,
    pCurrent: *mut sqlite3_int64,
    pHighwater: *mut sqlite3_int64,
    resetFlag: c_int    
) -> c_int
{
    sqlite3_status64(
        op,
        pCurrent,
        pHighwater,
        resetFlag
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_status(
    arg1: *mut sqlite3,
    op: c_int,
    pCur: *mut c_int,
    pHiwtr: *mut c_int,
    resetFlg: c_int    
) -> c_int
{
    sqlite3_db_status(
        arg1,
        op,
        pCur,
        pHiwtr,
        resetFlg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_stmt_status(
    arg1: *mut sqlite3_stmt,
    op: c_int,
    resetFlg: c_int    
) -> c_int
{
    sqlite3_stmt_status(
        arg1,
        op,
        resetFlg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_backup_init(
    pDest: *mut sqlite3,
    zDestName: *const c_char,
    pSource: *mut sqlite3,
    zSourceName: *const c_char    
) -> *mut sqlite3_backup
{
    sqlite3_backup_init(
        pDest,
        zDestName,
        pSource,
        zSourceName
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_backup_step(
    p: *mut sqlite3_backup,
    nPage: c_int    
) -> c_int
{
    sqlite3_backup_step(
        p,
        nPage
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_backup_finish(
    p: *mut sqlite3_backup    
) -> c_int
{
    sqlite3_backup_finish(
        p
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_backup_remaining(
    p: *mut sqlite3_backup    
) -> c_int
{
    sqlite3_backup_remaining(
        p
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_backup_pagecount(
    p: *mut sqlite3_backup    
) -> c_int
{
    sqlite3_backup_pagecount(
        p
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_unlock_notify(
    pBlocked: *mut sqlite3,
    xNotify: Option<unsafe extern "C" fn(apArg: *mut *mut c_void, nArg: c_int)>,
    pNotifyArg: *mut c_void    
) -> c_int
{
    sqlite3_unlock_notify(
        pBlocked,
        xNotify,
        pNotifyArg
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_stricmp(
    arg1: *const c_char,
    arg2: *const c_char    
) -> c_int
{
    sqlite3_stricmp(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_strnicmp(
    arg1: *const c_char,
    arg2: *const c_char,
    arg3: c_int    
) -> c_int
{
    sqlite3_strnicmp(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_strglob(
    zGlob: *const c_char,
    zStr: *const c_char    
) -> c_int
{
    sqlite3_strglob(
        zGlob,
        zStr
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_strlike(
    zGlob: *const c_char,
    zStr: *const c_char,
    cEsc: c_uint    
) -> c_int
{
    sqlite3_strlike(
        zGlob,
        zStr,
        cEsc
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_log(
    iErrCode: c_int,
    zFormat: *const c_char    
)
{
    sqlite3_log(
        iErrCode,
        zFormat
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_wal_hook(
    arg1: *mut sqlite3,
    arg2: Option<unsafe extern "C" fn(arg1: *mut c_void, arg2: *mut sqlite3, arg3: *const c_char, arg4: c_int) -> c_int>,
    arg3: *mut c_void    
) -> *mut c_void
{
    sqlite3_wal_hook(
        arg1,
        arg2,
        arg3
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_wal_autocheckpoint(
    db: *mut sqlite3,
    N: c_int    
) -> c_int
{
    sqlite3_wal_autocheckpoint(
        db,
        N
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_wal_checkpoint(
    db: *mut sqlite3,
    zDb: *const c_char    
) -> c_int
{
    sqlite3_wal_checkpoint(
        db,
        zDb
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_wal_checkpoint_v2(
    db: *mut sqlite3,
    zDb: *const c_char,
    eMode: c_int,
    pnLog: *mut c_int,
    pnCkpt: *mut c_int    
) -> c_int
{
    sqlite3_wal_checkpoint_v2(
        db,
        zDb,
        eMode,
        pnLog,
        pnCkpt
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_config(
    arg1: *mut sqlite3,
    op: c_int    
) -> c_int
{
    sqlite3_vtab_config(
        arg1,
        op
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_on_conflict(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_vtab_on_conflict(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_nochange(
    arg1: *mut sqlite3_context    
) -> c_int
{
    sqlite3_vtab_nochange(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_collation(
    arg1: *mut sqlite3_index_info,
    arg2: c_int    
) -> *const c_char
{
    sqlite3_vtab_collation(
        arg1,
        arg2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_distinct(
    arg1: *mut sqlite3_index_info    
) -> c_int
{
    sqlite3_vtab_distinct(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_in(
    arg1: *mut sqlite3_index_info,
    iCons: c_int,
    bHandle: c_int    
) -> c_int
{
    sqlite3_vtab_in(
        arg1,
        iCons,
        bHandle
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_in_first(
    pVal: *mut sqlite3_value,
    ppOut: *mut *mut sqlite3_value    
) -> c_int
{
    sqlite3_vtab_in_first(
        pVal,
        ppOut
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_in_next(
    pVal: *mut sqlite3_value,
    ppOut: *mut *mut sqlite3_value    
) -> c_int
{
    sqlite3_vtab_in_next(
        pVal,
        ppOut
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_vtab_rhs_value(
    arg1: *mut sqlite3_index_info,
    arg2: c_int,
    ppVal: *mut *mut sqlite3_value    
) -> c_int
{
    sqlite3_vtab_rhs_value(
        arg1,
        arg2,
        ppVal
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_stmt_scanstatus(
    pStmt: *mut sqlite3_stmt,
    idx: c_int,
    iScanStatusOp: c_int,
    pOut: *mut c_void    
) -> c_int
{
    sqlite3_stmt_scanstatus(
        pStmt,
        idx,
        iScanStatusOp,
        pOut
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_stmt_scanstatus_v2(
    pStmt: *mut sqlite3_stmt,
    idx: c_int,
    iScanStatusOp: c_int,
    flags: c_int,
    pOut: *mut c_void    
) -> c_int
{
    sqlite3_stmt_scanstatus_v2(
        pStmt,
        idx,
        iScanStatusOp,
        flags,
        pOut
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_stmt_scanstatus_reset(
    arg1: *mut sqlite3_stmt    
)
{
    sqlite3_stmt_scanstatus_reset(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_db_cacheflush(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_db_cacheflush(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_system_errno(
    arg1: *mut sqlite3    
) -> c_int
{
    sqlite3_system_errno(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_snapshot_get(
    db: *mut sqlite3,
    zSchema: *const c_char,
    ppSnapshot: *mut *mut sqlite3_snapshot    
) -> c_int
{
    sqlite3_snapshot_get(
        db,
        zSchema,
        ppSnapshot
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_snapshot_open(
    db: *mut sqlite3,
    zSchema: *const c_char,
    pSnapshot: *mut sqlite3_snapshot    
) -> c_int
{
    sqlite3_snapshot_open(
        db,
        zSchema,
        pSnapshot
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_snapshot_free(
    arg1: *mut sqlite3_snapshot    
)
{
    sqlite3_snapshot_free(
        arg1
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_snapshot_cmp(
    p1: *mut sqlite3_snapshot,
    p2: *mut sqlite3_snapshot    
) -> c_int
{
    sqlite3_snapshot_cmp(
        p1,
        p2
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_snapshot_recover(
    db: *mut sqlite3,
    zDb: *const c_char    
) -> c_int
{
    sqlite3_snapshot_recover(
        db,
        zDb
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_serialize(
    db: *mut sqlite3,
    zSchema: *const c_char,
    piSize: *mut sqlite3_int64,
    mFlags: c_uint    
) -> *mut c_uchar
{
    sqlite3_serialize(
        db,
        zSchema,
        piSize,
        mFlags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_deserialize(
    db: *mut sqlite3,
    zSchema: *const c_char,
    pData: *mut c_uchar,
    szDb: sqlite3_int64,
    szBuf: sqlite3_int64,
    mFlags: c_uint    
) -> c_int
{
    sqlite3_deserialize(
        db,
        zSchema,
        pData,
        szDb,
        szBuf,
        mFlags
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_rtree_geometry_callback(
    db: *mut sqlite3,
    zGeom: *const c_char,
    xGeom: Option<unsafe extern "C" fn(arg1: *mut sqlite3_rtree_geometry, arg2: c_int, arg3: *mut sqlite3_rtree_dbl, arg4: *mut c_int) -> c_int>,
    pContext: *mut c_void    
) -> c_int
{
    sqlite3_rtree_geometry_callback(
        db,
        zGeom,
        xGeom,
        pContext
    )
}

#[no_mangle]
pub unsafe extern "C" fn csbindgen_sqlite3_rtree_query_callback(
    db: *mut sqlite3,
    zQueryFunc: *const c_char,
    xQueryFunc: Option<unsafe extern "C" fn(arg1: *mut sqlite3_rtree_query_info) -> c_int>,
    pContext: *mut c_void,
    xDestructor: Option<unsafe extern "C" fn(arg1: *mut c_void)>    
) -> c_int
{
    sqlite3_rtree_query_callback(
        db,
        zQueryFunc,
        xQueryFunc,
        pContext,
        xDestructor
    )
}

    