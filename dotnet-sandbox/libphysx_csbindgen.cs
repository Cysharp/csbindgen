#if !FALSE
// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace Physx
{
    internal static unsafe partial class LibPhysx
    {
        const string __DllName = "libphys";



        [DllImport(__DllName, EntryPoint = "physx_create_foundation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFoundation* physx_create_foundation();

        [DllImport(__DllName, EntryPoint = "physx_create_foundation_with_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFoundation* physx_create_foundation_with_alloc(PxDefaultAllocator* allocator);

        [DllImport(__DllName, EntryPoint = "physx_create_physics", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPhysics* physx_create_physics(PxFoundation* foundation);

        [DllImport(__DllName, EntryPoint = "get_default_allocator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDefaultAllocator* get_default_allocator();

        [DllImport(__DllName, EntryPoint = "get_default_error_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDefaultErrorCallback* get_default_error_callback();

        /// <summary>
        ///  Destroy the returned callback object using PxQueryFilterCallback_delete.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "create_raycast_filter_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryFilterCallback* create_raycast_filter_callback(PxRigidActor* actor_to_ignore);

        /// <summary>
        ///  Destroy the returned callback object using PxQueryFilterCallback_delete.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "create_raycast_filter_callback_func", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryFilterCallback* create_raycast_filter_callback_func(delegate* unmanaged[Cdecl]<PxRigidActor*, PxFilterData*, PxShape*, uint, void*, PxQueryHitType> callback, void* userdata);

        [DllImport(__DllName, EntryPoint = "create_raycast_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRaycastCallback* create_raycast_buffer();

        [DllImport(__DllName, EntryPoint = "create_sweep_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSweepCallback* create_sweep_buffer();

        [DllImport(__DllName, EntryPoint = "create_overlap_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxOverlapCallback* create_overlap_buffer();

        [DllImport(__DllName, EntryPoint = "create_raycast_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRaycastCallback* create_raycast_callback(delegate* unmanaged[Cdecl]<PxRaycastHit*, uint, void*, bool> process_touches_callback, delegate* unmanaged[Cdecl]<void*, void> finalize_query_callback, PxRaycastHit* touches_buffer, uint num_touches, void* userdata);

        [DllImport(__DllName, EntryPoint = "create_sweep_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSweepCallback* create_sweep_callback(delegate* unmanaged[Cdecl]<PxSweepHit*, uint, void*, bool> process_touches_callback, delegate* unmanaged[Cdecl]<void*, void> finalize_query_callback, PxSweepHit* touches_buffer, uint num_touches, void* userdata);

        [DllImport(__DllName, EntryPoint = "create_overlap_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxOverlapCallback* create_overlap_callback(delegate* unmanaged[Cdecl]<PxOverlapHit*, uint, void*, bool> process_touches_callback, delegate* unmanaged[Cdecl]<void*, void> finalize_query_callback, PxOverlapHit* touches_buffer, uint num_touches, void* userdata);

        [DllImport(__DllName, EntryPoint = "delete_raycast_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void delete_raycast_callback(PxRaycastCallback* callback);

        [DllImport(__DllName, EntryPoint = "delete_sweep_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void delete_sweep_callback(PxSweepCallback* callback);

        [DllImport(__DllName, EntryPoint = "delete_overlap_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void delete_overlap_callback(PxOverlapCallback* callback);

        [DllImport(__DllName, EntryPoint = "create_alloc_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAllocatorCallback* create_alloc_callback(delegate* unmanaged[Cdecl]<ulong, void*, void*, uint, void*, void*> alloc_callback, delegate* unmanaged[Cdecl]<void*, void*, void> dealloc_callback, void* userdata);

        [DllImport(__DllName, EntryPoint = "create_profiler_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxProfilerCallback* create_profiler_callback(delegate* unmanaged[Cdecl]<sbyte*, bool, ulong, void*, void*> zone_start_callback, delegate* unmanaged[Cdecl]<void*, sbyte*, bool, ulong, void*, void> zone_end_callback, void* userdata);

        [DllImport(__DllName, EntryPoint = "get_alloc_callback_user_data", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* get_alloc_callback_user_data(PxAllocatorCallback* alloc_callback);

        [DllImport(__DllName, EntryPoint = "create_error_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxErrorCallback* create_error_callback(delegate* unmanaged[Cdecl]<PxErrorCode, sbyte*, sbyte*, uint, void*, void> error_callback, void* userdata);

        [DllImport(__DllName, EntryPoint = "create_assert_handler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAssertHandler* create_assert_handler(delegate* unmanaged[Cdecl]<sbyte*, sbyte*, uint, bool*, void*, void> error_callback, void* userdata);

        [DllImport(__DllName, EntryPoint = "get_default_simulation_filter_shader", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* get_default_simulation_filter_shader();

        /// <summary>
        ///  Create a C++ proxy callback which will forward contact events to `Callback`.
        ///  The returned pointer must be freed by calling `destroy_contact_callback` when done using.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "create_contact_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSimulationEventCallback* create_contact_callback(delegate* unmanaged[Cdecl]<void*, PxContactPairHeader*, PxContactPair*, uint, void> callback, void* userdata);

        /// <summary>
        ///  Deallocates the PxSimulationEventCallback that has previously been created
        /// </summary>
        [DllImport(__DllName, EntryPoint = "destroy_contact_callback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void destroy_contact_callback(PxSimulationEventCallback* callback);

        /// <summary>
        ///  New interface to handle simulation events, replacing create_contact_callback.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "create_simulation_event_callbacks", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSimulationEventCallback* create_simulation_event_callbacks(SimulationEventCallbackInfo* callbacks);

        [DllImport(__DllName, EntryPoint = "get_simulation_event_info", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern SimulationEventCallbackInfo* get_simulation_event_info(PxSimulationEventCallback* callback);

        [DllImport(__DllName, EntryPoint = "destroy_simulation_event_callbacks", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void destroy_simulation_event_callbacks(PxSimulationEventCallback* callback);

        /// <summary>
        ///  Override the default filter shader in the scene with a custom function.
        ///  If call_default_filter_shader_first is set to true, this will first call the
        ///  built-in PhysX filter (that matches Physx 2.8 behavior) before your callback.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "enable_custom_filter_shader", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void enable_custom_filter_shader(PxSceneDesc* scene_desc, delegate* unmanaged[Cdecl]<FilterShaderCallbackInfo*, PxFilterFlags> shader, uint call_default_filter_shader_first);

        /// <summary>
        ///  Should only be used in testing etc! This isn't generated as we don't generate op functions.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAssertHandler_opCall_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAssertHandler_opCall_mut(PxAssertHandler* self_, sbyte* expr, sbyte* file, int line, bool* ignore);

        [DllImport(__DllName, EntryPoint = "PxAllocatorCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAllocatorCallback_delete(PxAllocatorCallback* self_);

        /// <summary>
        ///  Allocates size bytes of memory, which must be 16-byte aligned.
        ///
        ///  This method should never return NULL.  If you run out of memory, then
        ///  you should terminate the app or take some other appropriate action.
        ///
        ///  Threading:
        ///  This function should be thread safe as it can be called in the context of the user thread
        ///  and physics processing thread(s).
        ///
        ///  The allocated block of memory.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAllocatorCallback_allocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxAllocatorCallback_allocate_mut(PxAllocatorCallback* self_, nuint size, byte* typeName, byte* filename, int line);

        /// <summary>
        ///  Frees memory previously allocated by allocate().
        ///
        ///  Threading:
        ///  This function should be thread safe as it can be called in the context of the user thread
        ///  and physics processing thread(s).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAllocatorCallback_deallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAllocatorCallback_deallocate_mut(PxAllocatorCallback* self_, void* ptr);

        [DllImport(__DllName, EntryPoint = "PxAssertHandler_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAssertHandler_delete(PxAssertHandler* self_);

        [DllImport(__DllName, EntryPoint = "phys_PxGetAssertHandler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAssertHandler* phys_PxGetAssertHandler();

        [DllImport(__DllName, EntryPoint = "phys_PxSetAssertHandler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetAssertHandler(PxAssertHandler* handler);

        /// <summary>
        ///  Destroys the instance it is called on.
        ///
        ///  The operation will fail, if there are still modules referencing the foundation object. Release all dependent modules
        ///  prior to calling this method.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFoundation_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFoundation_release_mut(PxFoundation* self_);

        /// <summary>
        ///  retrieves error callback
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFoundation_getErrorCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxErrorCallback* PxFoundation_getErrorCallback_mut(PxFoundation* self_);

        /// <summary>
        ///  Sets mask of errors to report.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFoundation_setErrorLevel_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFoundation_setErrorLevel_mut(PxFoundation* self_, uint mask);

        /// <summary>
        ///  Retrieves mask of errors to be reported.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFoundation_getErrorLevel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxFoundation_getErrorLevel(PxFoundation* self_);

        /// <summary>
        ///  Retrieves the allocator this object was created with.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFoundation_getAllocatorCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAllocatorCallback* PxFoundation_getAllocatorCallback_mut(PxFoundation* self_);

        /// <summary>
        ///  Retrieves if allocation names are being passed to allocator callback.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFoundation_getReportAllocationNames", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxFoundation_getReportAllocationNames(PxFoundation* self_);

        /// <summary>
        ///  Set if allocation names are being passed to allocator callback.
        ///
        ///  Enabled by default in debug and checked build, disabled by default in profile and release build.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFoundation_setReportAllocationNames_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFoundation_setReportAllocationNames_mut(PxFoundation* self_, [MarshalAs(UnmanagedType.U1)] bool value);

        [DllImport(__DllName, EntryPoint = "PxFoundation_registerAllocationListener_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFoundation_registerAllocationListener_mut(PxFoundation* self_, PxAllocationListener* listener);

        [DllImport(__DllName, EntryPoint = "PxFoundation_deregisterAllocationListener_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFoundation_deregisterAllocationListener_mut(PxFoundation* self_, PxAllocationListener* listener);

        [DllImport(__DllName, EntryPoint = "PxFoundation_registerErrorCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFoundation_registerErrorCallback_mut(PxFoundation* self_, PxErrorCallback* callback);

        [DllImport(__DllName, EntryPoint = "PxFoundation_deregisterErrorCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFoundation_deregisterErrorCallback_mut(PxFoundation* self_, PxErrorCallback* callback);

        /// <summary>
        ///  Creates an instance of the foundation class
        ///
        ///  The foundation class is needed to initialize higher level SDKs. There may be only one instance per process.
        ///  Calling this method after an instance has been created already will result in an error message and NULL will be
        ///  returned.
        ///
        ///  Foundation instance on success, NULL if operation failed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateFoundation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFoundation* phys_PxCreateFoundation(uint version, PxAllocatorCallback* allocator, PxErrorCallback* errorCallback);

        [DllImport(__DllName, EntryPoint = "phys_PxSetFoundationInstance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetFoundationInstance(PxFoundation* foundation);

        [DllImport(__DllName, EntryPoint = "phys_PxGetFoundation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFoundation* phys_PxGetFoundation();

        /// <summary>
        ///  Get the callback that will be used for all profiling.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetProfilerCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxProfilerCallback* phys_PxGetProfilerCallback();

        /// <summary>
        ///  Set the callback that will be used for all profiling.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSetProfilerCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetProfilerCallback(PxProfilerCallback* profiler);

        /// <summary>
        ///  Get the allocator callback
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetAllocatorCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAllocatorCallback* phys_PxGetAllocatorCallback();

        /// <summary>
        ///  Get the broadcasting allocator callback
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetBroadcastAllocator", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAllocatorCallback* phys_PxGetBroadcastAllocator();

        /// <summary>
        ///  Get the error callback
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetErrorCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxErrorCallback* phys_PxGetErrorCallback();

        /// <summary>
        ///  Get the broadcasting error callback
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetBroadcastError", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxErrorCallback* phys_PxGetBroadcastError();

        /// <summary>
        ///  Get the warn once timestamp
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetWarnOnceTimeStamp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxGetWarnOnceTimeStamp();

        /// <summary>
        ///  Decrement the ref count of PxFoundation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxDecFoundationRefCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxDecFoundationRefCount();

        /// <summary>
        ///  Increment the ref count of PxFoundation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxIncFoundationRefCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxIncFoundationRefCount();

        [DllImport(__DllName, EntryPoint = "PxAllocator_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAllocator PxAllocator_new(byte* anon_param0);

        [DllImport(__DllName, EntryPoint = "PxAllocator_allocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxAllocator_allocate_mut(PxAllocator* self_, nuint size, byte* file, int line);

        [DllImport(__DllName, EntryPoint = "PxAllocator_deallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAllocator_deallocate_mut(PxAllocator* self_, void* ptr);

        [DllImport(__DllName, EntryPoint = "PxRawAllocator_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRawAllocator PxRawAllocator_new(byte* anon_param0);

        [DllImport(__DllName, EntryPoint = "PxRawAllocator_allocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxRawAllocator_allocate_mut(PxRawAllocator* self_, nuint size, byte* anon_param1, int anon_param2);

        [DllImport(__DllName, EntryPoint = "PxRawAllocator_deallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRawAllocator_deallocate_mut(PxRawAllocator* self_, void* ptr);

        [DllImport(__DllName, EntryPoint = "PxVirtualAllocatorCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxVirtualAllocatorCallback_delete(PxVirtualAllocatorCallback* self_);

        [DllImport(__DllName, EntryPoint = "PxVirtualAllocatorCallback_allocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxVirtualAllocatorCallback_allocate_mut(PxVirtualAllocatorCallback* self_, nuint size, int group, byte* file, int line);

        [DllImport(__DllName, EntryPoint = "PxVirtualAllocatorCallback_deallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxVirtualAllocatorCallback_deallocate_mut(PxVirtualAllocatorCallback* self_, void* ptr);

        [DllImport(__DllName, EntryPoint = "PxVirtualAllocator_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVirtualAllocator PxVirtualAllocator_new(PxVirtualAllocatorCallback* callback, int group);

        [DllImport(__DllName, EntryPoint = "PxVirtualAllocator_allocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxVirtualAllocator_allocate_mut(PxVirtualAllocator* self_, nuint size, byte* file, int line);

        [DllImport(__DllName, EntryPoint = "PxVirtualAllocator_deallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxVirtualAllocator_deallocate_mut(PxVirtualAllocator* self_, void* ptr);

        [DllImport(__DllName, EntryPoint = "PxTempAllocatorChunk_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTempAllocatorChunk PxTempAllocatorChunk_new();

        [DllImport(__DllName, EntryPoint = "PxTempAllocator_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTempAllocator PxTempAllocator_new(byte* anon_param0);

        [DllImport(__DllName, EntryPoint = "PxTempAllocator_allocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxTempAllocator_allocate_mut(PxTempAllocator* self_, nuint size, byte* file, int line);

        [DllImport(__DllName, EntryPoint = "PxTempAllocator_deallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTempAllocator_deallocate_mut(PxTempAllocator* self_, void* ptr);

        /// <summary>
        ///  Sets the bytes of the provided buffer to zero.
        ///
        ///  Pointer to memory block (same as input)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxMemZero", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* phys_PxMemZero(void* dest, uint count);

        /// <summary>
        ///  Sets the bytes of the provided buffer to the specified value.
        ///
        ///  Pointer to memory block (same as input)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxMemSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* phys_PxMemSet(void* dest, int c, uint count);

        /// <summary>
        ///  Copies the bytes of one memory block to another. The memory blocks must not overlap.
        ///
        ///  Use [`PxMemMove`] if memory blocks overlap.
        ///
        ///  Pointer to destination memory block
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxMemCopy", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* phys_PxMemCopy(void* dest, void* src, uint count);

        /// <summary>
        ///  Copies the bytes of one memory block to another. The memory blocks can overlap.
        ///
        ///  Use [`PxMemCopy`] if memory blocks do not overlap.
        ///
        ///  Pointer to destination memory block
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxMemMove", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* phys_PxMemMove(void* dest, void* src, uint count);

        /// <summary>
        ///  Mark a specified amount of memory with 0xcd pattern. This is used to check that the meta data
        ///  definition for serialized classes is complete in checked builds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxMarkSerializedMemory", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxMarkSerializedMemory(void* ptr, uint byteSize);

        [DllImport(__DllName, EntryPoint = "phys_PxMemoryBarrier", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxMemoryBarrier();

        /// <summary>
        ///  Return the index of the highest set bit. Undefined for zero arg.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxHighestSetBitUnsafe", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxHighestSetBitUnsafe(uint v);

        /// <summary>
        ///  Return the index of the highest set bit. Undefined for zero arg.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxLowestSetBitUnsafe", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxLowestSetBitUnsafe(uint v);

        /// <summary>
        ///  Returns the index of the highest set bit. Returns 32 for v=0.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCountLeadingZeros", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxCountLeadingZeros(uint v);

        /// <summary>
        ///  Prefetch aligned 64B x86, 32b ARM around
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxPrefetchLine", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxPrefetchLine(void* ptr, uint offset);

        /// <summary>
        ///  Prefetch
        ///  bytes starting at
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxPrefetch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxPrefetch(void* ptr, uint count);

        [DllImport(__DllName, EntryPoint = "phys_PxBitCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxBitCount(uint v);

        [DllImport(__DllName, EntryPoint = "phys_PxIsPowerOfTwo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxIsPowerOfTwo(uint x);

        [DllImport(__DllName, EntryPoint = "phys_PxNextPowerOfTwo", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxNextPowerOfTwo(uint x);

        /// <summary>
        ///  Return the index of the highest set bit. Not valid for zero arg.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxLowestSetBit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxLowestSetBit(uint x);

        /// <summary>
        ///  Return the index of the highest set bit. Not valid for zero arg.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxHighestSetBit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxHighestSetBit(uint x);

        [DllImport(__DllName, EntryPoint = "phys_PxILog2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxILog2(uint num);

        /// <summary>
        ///  default constructor leaves data uninitialized.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_new();

        /// <summary>
        ///  zero constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_new_1(PxZERO anon_param0);

        /// <summary>
        ///  Assigns scalar parameter to all elements.
        ///
        ///  Useful to initialize to zero or one.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_new_2(float a);

        /// <summary>
        ///  Initializes from 3 scalar parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_new_3(float nx, float ny, float nz);

        /// <summary>
        ///  tests for exact zero vector
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_isZero", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec3_isZero(PxVec3* self_);

        /// <summary>
        ///  returns true if all 3 elems of the vector are finite (not NAN or INF, etc.)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_isFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec3_isFinite(PxVec3* self_);

        /// <summary>
        ///  is normalized - used by API parameter validation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_isNormalized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec3_isNormalized(PxVec3* self_);

        /// <summary>
        ///  returns the squared magnitude
        ///
        ///  Avoids calling PxSqrt()!
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_magnitudeSquared", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec3_magnitudeSquared(PxVec3* self_);

        /// <summary>
        ///  returns the magnitude
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_magnitude", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec3_magnitude(PxVec3* self_);

        /// <summary>
        ///  returns the scalar product of this and other.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_dot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec3_dot(PxVec3* self_, PxVec3* v);

        /// <summary>
        ///  cross product
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_cross", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_cross(PxVec3* self_, PxVec3* v);

        /// <summary>
        ///  returns a unit vector
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_getNormalized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_getNormalized(PxVec3* self_);

        /// <summary>
        ///  normalizes the vector in place
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_normalize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec3_normalize_mut(PxVec3* self_);

        /// <summary>
        ///  normalizes the vector in place. Does nothing if vector magnitude is under PX_NORMALIZATION_EPSILON.
        ///  Returns vector magnitude if &gt;= PX_NORMALIZATION_EPSILON and 0.0f otherwise.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_normalizeSafe_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec3_normalizeSafe_mut(PxVec3* self_);

        /// <summary>
        ///  normalizes the vector in place. Asserts if vector magnitude is under PX_NORMALIZATION_EPSILON.
        ///  returns vector magnitude.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_normalizeFast_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec3_normalizeFast_mut(PxVec3* self_);

        /// <summary>
        ///  a[i] * b[i], for all i.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_multiply", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_multiply(PxVec3* self_, PxVec3* a);

        /// <summary>
        ///  element-wise minimum
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_minimum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_minimum(PxVec3* self_, PxVec3* v);

        /// <summary>
        ///  returns MIN(x, y, z);
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_minElement", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec3_minElement(PxVec3* self_);

        /// <summary>
        ///  element-wise maximum
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_maximum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_maximum(PxVec3* self_, PxVec3* v);

        /// <summary>
        ///  returns MAX(x, y, z);
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_maxElement", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec3_maxElement(PxVec3* self_);

        /// <summary>
        ///  returns absolute values of components;
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec3_abs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec3_abs(PxVec3* self_);

        [DllImport(__DllName, EntryPoint = "PxVec3Padded_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3Padded* PxVec3Padded_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxVec3Padded_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxVec3Padded_delete(PxVec3Padded* self_);

        [DllImport(__DllName, EntryPoint = "PxVec3Padded_new_alloc_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3Padded* PxVec3Padded_new_alloc_1(PxVec3* p);

        [DllImport(__DllName, EntryPoint = "PxVec3Padded_new_alloc_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3Padded* PxVec3Padded_new_alloc_2(float f);

        /// <summary>
        ///  Default constructor, does not do any initialization.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat PxQuat_new();

        /// <summary>
        ///  identity constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat PxQuat_new_1(PxIDENTITY anon_param0);

        /// <summary>
        ///  Constructor from a scalar: sets the real part w to the scalar value, and the imaginary parts (x,y,z) to zero
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat PxQuat_new_2(float r);

        /// <summary>
        ///  Constructor. Take note of the order of the elements!
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat PxQuat_new_3(float nx, float ny, float nz, float nw);

        /// <summary>
        ///  Creates from angle-axis representation.
        ///
        ///  Axis must be normalized!
        ///
        ///  Angle is in radians!
        ///
        ///  Unit:
        ///  Radians
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_new_4", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat PxQuat_new_4(float angleRadians, PxVec3* unitAxis);

        /// <summary>
        ///  Creates from orientation matrix.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_new_5", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat PxQuat_new_5(PxMat33* m);

        /// <summary>
        ///  returns true if quat is identity
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_isIdentity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxQuat_isIdentity(PxQuat* self_);

        /// <summary>
        ///  returns true if all elements are finite (not NAN or INF, etc.)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_isFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxQuat_isFinite(PxQuat* self_);

        /// <summary>
        ///  returns true if finite and magnitude is close to unit
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_isUnit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxQuat_isUnit(PxQuat* self_);

        /// <summary>
        ///  returns true if finite and magnitude is reasonably close to unit to allow for some accumulation of error vs
        ///  isValid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_isSane", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxQuat_isSane(PxQuat* self_);

        /// <summary>
        ///  converts this quaternion to angle-axis representation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_toRadiansAndUnitAxis", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxQuat_toRadiansAndUnitAxis(PxQuat* self_, float* angle, PxVec3* axis);

        /// <summary>
        ///  Gets the angle between this quat and the identity quaternion.
        ///
        ///  Unit:
        ///  Radians
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_getAngle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxQuat_getAngle(PxQuat* self_);

        /// <summary>
        ///  Gets the angle between this quat and the argument
        ///
        ///  Unit:
        ///  Radians
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_getAngle_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxQuat_getAngle_1(PxQuat* self_, PxQuat* q);

        /// <summary>
        ///  This is the squared 4D vector length, should be 1 for unit quaternions.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_magnitudeSquared", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxQuat_magnitudeSquared(PxQuat* self_);

        /// <summary>
        ///  returns the scalar product of this and other.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_dot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxQuat_dot(PxQuat* self_, PxQuat* v);

        [DllImport(__DllName, EntryPoint = "PxQuat_getNormalized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat PxQuat_getNormalized(PxQuat* self_);

        [DllImport(__DllName, EntryPoint = "PxQuat_magnitude", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxQuat_magnitude(PxQuat* self_);

        /// <summary>
        ///  maps to the closest unit quaternion.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_normalize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxQuat_normalize_mut(PxQuat* self_);

        [DllImport(__DllName, EntryPoint = "PxQuat_getConjugate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat PxQuat_getConjugate(PxQuat* self_);

        [DllImport(__DllName, EntryPoint = "PxQuat_getImaginaryPart", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxQuat_getImaginaryPart(PxQuat* self_);

        /// <summary>
        ///  brief computes rotation of x-axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_getBasisVector0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxQuat_getBasisVector0(PxQuat* self_);

        /// <summary>
        ///  brief computes rotation of y-axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_getBasisVector1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxQuat_getBasisVector1(PxQuat* self_);

        /// <summary>
        ///  brief computes rotation of z-axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_getBasisVector2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxQuat_getBasisVector2(PxQuat* self_);

        /// <summary>
        ///  rotates passed vec by this (assumed unitary)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_rotate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxQuat_rotate(PxQuat* self_, PxVec3* v);

        /// <summary>
        ///  inverse rotates passed vec by this (assumed unitary)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQuat_rotateInv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxQuat_rotateInv(PxQuat* self_, PxVec3* v);

        [DllImport(__DllName, EntryPoint = "PxTransform_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_new();

        [DllImport(__DllName, EntryPoint = "PxTransform_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_new_1(PxVec3* position);

        [DllImport(__DllName, EntryPoint = "PxTransform_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_new_2(PxIDENTITY anon_param0);

        [DllImport(__DllName, EntryPoint = "PxTransform_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_new_3(PxQuat* orientation);

        [DllImport(__DllName, EntryPoint = "PxTransform_new_4", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_new_4(float x, float y, float z, PxQuat aQ);

        [DllImport(__DllName, EntryPoint = "PxTransform_new_5", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_new_5(PxVec3* p0, PxQuat* q0);

        [DllImport(__DllName, EntryPoint = "PxTransform_new_6", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_new_6(PxMat44* m);

        [DllImport(__DllName, EntryPoint = "PxTransform_getInverse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_getInverse(PxTransform* self_);

        [DllImport(__DllName, EntryPoint = "PxTransform_transform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxTransform_transform(PxTransform* self_, PxVec3* input);

        [DllImport(__DllName, EntryPoint = "PxTransform_transformInv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxTransform_transformInv(PxTransform* self_, PxVec3* input);

        [DllImport(__DllName, EntryPoint = "PxTransform_rotate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxTransform_rotate(PxTransform* self_, PxVec3* input);

        [DllImport(__DllName, EntryPoint = "PxTransform_rotateInv", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxTransform_rotateInv(PxTransform* self_, PxVec3* input);

        /// <summary>
        ///  Transform transform to parent (returns compound transform: first src, then *this)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTransform_transform_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_transform_1(PxTransform* self_, PxTransform* src);

        /// <summary>
        ///  returns true if finite and q is a unit quaternion
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTransform_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTransform_isValid(PxTransform* self_);

        /// <summary>
        ///  returns true if finite and quat magnitude is reasonably close to unit to allow for some accumulation of error
        ///  vs isValid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTransform_isSane", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTransform_isSane(PxTransform* self_);

        /// <summary>
        ///  returns true if all elems are finite (not NAN or INF, etc.)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTransform_isFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTransform_isFinite(PxTransform* self_);

        /// <summary>
        ///  Transform transform from parent (returns compound transform: first src, then this-&gt;inverse)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTransform_transformInv_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_transformInv_1(PxTransform* self_, PxTransform* src);

        /// <summary>
        ///  return a normalized transform (i.e. one in which the quaternion has unit magnitude)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTransform_getNormalized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxTransform_getNormalized(PxTransform* self_);

        /// <summary>
        ///  Default constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_new();

        /// <summary>
        ///  identity constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_new_1(PxIDENTITY anon_param0);

        /// <summary>
        ///  zero constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_new_2(PxZERO anon_param0);

        /// <summary>
        ///  Construct from three base vectors
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_new_3(PxVec3* col0, PxVec3* col1, PxVec3* col2);

        /// <summary>
        ///  constructor from a scalar, which generates a multiple of the identity matrix
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_new_4", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_new_4(float r);

        /// <summary>
        ///  Construct from float[9]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_new_5", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_new_5(float* values);

        /// <summary>
        ///  Construct from a quaternion
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_new_6", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_new_6(PxQuat* q);

        /// <summary>
        ///  Construct from diagonal, off-diagonals are zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_createDiagonal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_createDiagonal(PxVec3* d);

        /// <summary>
        ///  Computes the outer product of two vectors
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_outer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_outer(PxVec3* a, PxVec3* b);

        /// <summary>
        ///  Get transposed matrix
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_getTranspose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_getTranspose(PxMat33* self_);

        /// <summary>
        ///  Get the real inverse
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_getInverse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMat33_getInverse(PxMat33* self_);

        /// <summary>
        ///  Get determinant
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_getDeterminant", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxMat33_getDeterminant(PxMat33* self_);

        /// <summary>
        ///  Transform vector by matrix, equal to v' = M*v
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_transform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxMat33_transform(PxMat33* self_, PxVec3* other);

        /// <summary>
        ///  Transform vector by matrix transpose, v' = M^t*v
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat33_transformTranspose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxMat33_transformTranspose(PxMat33* self_, PxVec3* other);

        [DllImport(__DllName, EntryPoint = "PxMat33_front", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float* PxMat33_front(PxMat33* self_);

        /// <summary>
        ///  Default constructor, not performing any initialization for performance reason.
        ///
        ///  Use empty() function below to construct empty bounds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_new();

        /// <summary>
        ///  Construct from two bounding points
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_new_1(PxVec3* minimum, PxVec3* maximum);

        /// <summary>
        ///  Return empty bounds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_empty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_empty();

        /// <summary>
        ///  returns the AABB containing v0 and v1.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_boundsOfPoints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_boundsOfPoints(PxVec3* v0, PxVec3* v1);

        /// <summary>
        ///  returns the AABB from center and extents vectors.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_centerExtents", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_centerExtents(PxVec3* center, PxVec3* extent);

        /// <summary>
        ///  Construct from center, extent, and (not necessarily orthogonal) basis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_basisExtent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_basisExtent(PxVec3* center, PxMat33* basis, PxVec3* extent);

        /// <summary>
        ///  Construct from pose and extent
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_poseExtent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_poseExtent(PxTransform* pose, PxVec3* extent);

        /// <summary>
        ///  gets the transformed bounds of the passed AABB (resulting in a bigger AABB).
        ///
        ///  This version is safe to call for empty bounds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_transformSafe", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_transformSafe(PxMat33* matrix, PxBounds3* bounds);

        /// <summary>
        ///  gets the transformed bounds of the passed AABB (resulting in a bigger AABB).
        ///
        ///  Calling this method for empty bounds leads to undefined behavior. Use [`transformSafe`]() instead.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_transformFast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_transformFast(PxMat33* matrix, PxBounds3* bounds);

        /// <summary>
        ///  gets the transformed bounds of the passed AABB (resulting in a bigger AABB).
        ///
        ///  This version is safe to call for empty bounds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_transformSafe_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_transformSafe_1(PxTransform* transform, PxBounds3* bounds);

        /// <summary>
        ///  gets the transformed bounds of the passed AABB (resulting in a bigger AABB).
        ///
        ///  Calling this method for empty bounds leads to undefined behavior. Use [`transformSafe`]() instead.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_transformFast_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxBounds3_transformFast_1(PxTransform* transform, PxBounds3* bounds);

        /// <summary>
        ///  Sets empty to true
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_setEmpty_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBounds3_setEmpty_mut(PxBounds3* self_);

        /// <summary>
        ///  Sets the bounds to maximum size [-PX_MAX_BOUNDS_EXTENTS, PX_MAX_BOUNDS_EXTENTS].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_setMaximal_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBounds3_setMaximal_mut(PxBounds3* self_);

        /// <summary>
        ///  expands the volume to include v
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_include_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBounds3_include_mut(PxBounds3* self_, PxVec3* v);

        /// <summary>
        ///  expands the volume to include b.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_include_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBounds3_include_mut_1(PxBounds3* self_, PxBounds3* b);

        [DllImport(__DllName, EntryPoint = "PxBounds3_isEmpty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBounds3_isEmpty(PxBounds3* self_);

        /// <summary>
        ///  indicates whether the intersection of this and b is empty or not.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_intersects", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBounds3_intersects(PxBounds3* self_, PxBounds3* b);

        /// <summary>
        ///  computes the 1D-intersection between two AABBs, on a given axis.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_intersects1D", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBounds3_intersects1D(PxBounds3* self_, PxBounds3* a, uint axis);

        /// <summary>
        ///  indicates if these bounds contain v.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_contains", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBounds3_contains(PxBounds3* self_, PxVec3* v);

        /// <summary>
        ///  checks a box is inside another box.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_isInside", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBounds3_isInside(PxBounds3* self_, PxBounds3* box_);

        /// <summary>
        ///  returns the center of this axis aligned box.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_getCenter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxBounds3_getCenter(PxBounds3* self_);

        /// <summary>
        ///  get component of the box's center along a given axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_getCenter_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxBounds3_getCenter_1(PxBounds3* self_, uint axis);

        /// <summary>
        ///  get component of the box's extents along a given axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_getExtents", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxBounds3_getExtents(PxBounds3* self_, uint axis);

        /// <summary>
        ///  returns the dimensions (width/height/depth) of this axis aligned box.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_getDimensions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxBounds3_getDimensions(PxBounds3* self_);

        /// <summary>
        ///  returns the extents, which are half of the width/height/depth.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_getExtents_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxBounds3_getExtents_1(PxBounds3* self_);

        /// <summary>
        ///  scales the AABB.
        ///
        ///  This version is safe to call for empty bounds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_scaleSafe_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBounds3_scaleSafe_mut(PxBounds3* self_, float scale);

        /// <summary>
        ///  scales the AABB.
        ///
        ///  Calling this method for empty bounds leads to undefined behavior. Use [`scaleSafe`]() instead.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_scaleFast_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBounds3_scaleFast_mut(PxBounds3* self_, float scale);

        /// <summary>
        ///  fattens the AABB in all 3 dimensions by the given distance.
        ///
        ///  This version is safe to call for empty bounds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_fattenSafe_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBounds3_fattenSafe_mut(PxBounds3* self_, float distance);

        /// <summary>
        ///  fattens the AABB in all 3 dimensions by the given distance.
        ///
        ///  Calling this method for empty bounds leads to undefined behavior. Use [`fattenSafe`]() instead.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_fattenFast_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBounds3_fattenFast_mut(PxBounds3* self_, float distance);

        /// <summary>
        ///  checks that the AABB values are not NaN
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_isFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBounds3_isFinite(PxBounds3* self_);

        /// <summary>
        ///  checks that the AABB values describe a valid configuration.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBounds3_isValid(PxBounds3* self_);

        /// <summary>
        ///  Finds the closest point in the box to the point p. If p is contained, this will be p, otherwise it
        ///  will be the closest point on the surface of the box.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBounds3_closestPoint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxBounds3_closestPoint(PxBounds3* self_, PxVec3* p);

        [DllImport(__DllName, EntryPoint = "PxErrorCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxErrorCallback_delete(PxErrorCallback* self_);

        /// <summary>
        ///  Reports an error code.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxErrorCallback_reportError_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxErrorCallback_reportError_mut(PxErrorCallback* self_, PxErrorCode code, byte* message, byte* file, int line);

        /// <summary>
        ///  callback when memory is allocated.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAllocationListener_onAllocation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAllocationListener_onAllocation_mut(PxAllocationListener* self_, nuint size, byte* typeName, byte* filename, int line, void* allocatedMemory);

        /// <summary>
        ///  callback when memory is deallocated.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAllocationListener_onDeallocation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAllocationListener_onDeallocation_mut(PxAllocationListener* self_, void* allocatedMemory);

        /// <summary>
        ///  The default constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadcastingAllocator_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadcastingAllocator* PxBroadcastingAllocator_new_alloc(PxAllocatorCallback* allocator, PxErrorCallback* error);

        /// <summary>
        ///  The default constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadcastingAllocator_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadcastingAllocator_delete(PxBroadcastingAllocator* self_);

        /// <summary>
        ///  Allocates size bytes of memory, which must be 16-byte aligned.
        ///
        ///  This method should never return NULL.  If you run out of memory, then
        ///  you should terminate the app or take some other appropriate action.
        ///
        ///  Threading:
        ///  This function should be thread safe as it can be called in the context of the user thread
        ///  and physics processing thread(s).
        ///
        ///  The allocated block of memory.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadcastingAllocator_allocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxBroadcastingAllocator_allocate_mut(PxBroadcastingAllocator* self_, nuint size, byte* typeName, byte* filename, int line);

        /// <summary>
        ///  Frees memory previously allocated by allocate().
        ///
        ///  Threading:
        ///  This function should be thread safe as it can be called in the context of the user thread
        ///  and physics processing thread(s).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadcastingAllocator_deallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadcastingAllocator_deallocate_mut(PxBroadcastingAllocator* self_, void* ptr);

        /// <summary>
        ///  The default constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadcastingErrorCallback_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadcastingErrorCallback* PxBroadcastingErrorCallback_new_alloc(PxErrorCallback* errorCallback);

        /// <summary>
        ///  The default destructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadcastingErrorCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadcastingErrorCallback_delete(PxBroadcastingErrorCallback* self_);

        /// <summary>
        ///  Reports an error code.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadcastingErrorCallback_reportError_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadcastingErrorCallback_reportError_mut(PxBroadcastingErrorCallback* self_, PxErrorCode code, byte* message, byte* file, int line);

        /// <summary>
        ///  Enables floating point exceptions for the scalar and SIMD unit
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxEnableFPExceptions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxEnableFPExceptions();

        /// <summary>
        ///  Disables floating point exceptions for the scalar and SIMD unit
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxDisableFPExceptions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxDisableFPExceptions();

        /// <summary>
        ///  read from the stream. The number of bytes read may be less than the number requested.
        ///
        ///  the number of bytes read from the stream.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxInputStream_read_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxInputStream_read_mut(PxInputStream* self_, void* dest, uint count);

        [DllImport(__DllName, EntryPoint = "PxInputStream_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxInputStream_delete(PxInputStream* self_);

        /// <summary>
        ///  return the length of the input data
        ///
        ///  size in bytes of the input data
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxInputData_getLength", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxInputData_getLength(PxInputData* self_);

        /// <summary>
        ///  seek to the given offset from the start of the data.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxInputData_seek_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxInputData_seek_mut(PxInputData* self_, uint offset);

        /// <summary>
        ///  return the current offset from the start of the data
        ///
        ///  the offset to seek to.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxInputData_tell", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxInputData_tell(PxInputData* self_);

        [DllImport(__DllName, EntryPoint = "PxInputData_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxInputData_delete(PxInputData* self_);

        /// <summary>
        ///  write to the stream. The number of bytes written may be less than the number sent.
        ///
        ///  the number of bytes written to the stream by this call.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxOutputStream_write_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxOutputStream_write_mut(PxOutputStream* self_, void* src, uint count);

        [DllImport(__DllName, EntryPoint = "PxOutputStream_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxOutputStream_delete(PxOutputStream* self_);

        /// <summary>
        ///  default constructor leaves data uninitialized.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_new();

        /// <summary>
        ///  zero constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_new_1(PxZERO anon_param0);

        /// <summary>
        ///  Assigns scalar parameter to all elements.
        ///
        ///  Useful to initialize to zero or one.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_new_2(float a);

        /// <summary>
        ///  Initializes from 3 scalar parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_new_3(float nx, float ny, float nz, float nw);

        /// <summary>
        ///  Initializes from 3 scalar parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_new_4", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_new_4(PxVec3* v, float nw);

        /// <summary>
        ///  Initializes from an array of scalar parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_new_5", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_new_5(float* v);

        /// <summary>
        ///  tests for exact zero vector
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_isZero", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec4_isZero(PxVec4* self_);

        /// <summary>
        ///  returns true if all 3 elems of the vector are finite (not NAN or INF, etc.)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_isFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec4_isFinite(PxVec4* self_);

        /// <summary>
        ///  is normalized - used by API parameter validation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_isNormalized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec4_isNormalized(PxVec4* self_);

        /// <summary>
        ///  returns the squared magnitude
        ///
        ///  Avoids calling PxSqrt()!
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_magnitudeSquared", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec4_magnitudeSquared(PxVec4* self_);

        /// <summary>
        ///  returns the magnitude
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_magnitude", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec4_magnitude(PxVec4* self_);

        /// <summary>
        ///  returns the scalar product of this and other.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_dot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec4_dot(PxVec4* self_, PxVec4* v);

        /// <summary>
        ///  returns a unit vector
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_getNormalized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_getNormalized(PxVec4* self_);

        /// <summary>
        ///  normalizes the vector in place
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_normalize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec4_normalize_mut(PxVec4* self_);

        /// <summary>
        ///  a[i] * b[i], for all i.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_multiply", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_multiply(PxVec4* self_, PxVec4* a);

        /// <summary>
        ///  element-wise minimum
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_minimum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_minimum(PxVec4* self_, PxVec4* v);

        /// <summary>
        ///  element-wise maximum
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec4_maximum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxVec4_maximum(PxVec4* self_, PxVec4* v);

        [DllImport(__DllName, EntryPoint = "PxVec4_getXYZ", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxVec4_getXYZ(PxVec4* self_);

        /// <summary>
        ///  Default constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new();

        /// <summary>
        ///  identity constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_1(PxIDENTITY anon_param0);

        /// <summary>
        ///  zero constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_2(PxZERO anon_param0);

        /// <summary>
        ///  Construct from four 4-vectors
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_3(PxVec4* col0, PxVec4* col1, PxVec4* col2, PxVec4* col3);

        /// <summary>
        ///  constructor that generates a multiple of the identity matrix
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_4", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_4(float r);

        /// <summary>
        ///  Construct from three base vectors and a translation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_5", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_5(PxVec3* col0, PxVec3* col1, PxVec3* col2, PxVec3* col3);

        /// <summary>
        ///  Construct from float[16]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_6", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_6(float* values);

        /// <summary>
        ///  Construct from a quaternion
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_7", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_7(PxQuat* q);

        /// <summary>
        ///  Construct from a diagonal vector
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_8", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_8(PxVec4* diagonal);

        /// <summary>
        ///  Construct from Mat33 and a translation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_new_9", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_9(PxMat33* axes, PxVec3* position);

        [DllImport(__DllName, EntryPoint = "PxMat44_new_10", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_new_10(PxTransform* t);

        /// <summary>
        ///  Get transposed matrix
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_getTranspose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_getTranspose(PxMat44* self_);

        /// <summary>
        ///  Transform vector by matrix, equal to v' = M*v
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_transform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxMat44_transform(PxMat44* self_, PxVec4* other);

        /// <summary>
        ///  Transform vector by matrix, equal to v' = M*v
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_transform_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxMat44_transform_1(PxMat44* self_, PxVec3* other);

        /// <summary>
        ///  Rotate vector by matrix, equal to v' = M*v
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_rotate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec4 PxMat44_rotate(PxMat44* self_, PxVec4* other);

        /// <summary>
        ///  Rotate vector by matrix, equal to v' = M*v
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMat44_rotate_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxMat44_rotate_1(PxMat44* self_, PxVec3* other);

        [DllImport(__DllName, EntryPoint = "PxMat44_getBasis", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxMat44_getBasis(PxMat44* self_, uint num);

        [DllImport(__DllName, EntryPoint = "PxMat44_getPosition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxMat44_getPosition(PxMat44* self_);

        [DllImport(__DllName, EntryPoint = "PxMat44_setPosition_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMat44_setPosition_mut(PxMat44* self_, PxVec3* position);

        [DllImport(__DllName, EntryPoint = "PxMat44_front", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float* PxMat44_front(PxMat44* self_);

        [DllImport(__DllName, EntryPoint = "PxMat44_scale_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMat44_scale_mut(PxMat44* self_, PxVec4* p);

        [DllImport(__DllName, EntryPoint = "PxMat44_inverseRT", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat44 PxMat44_inverseRT(PxMat44* self_);

        [DllImport(__DllName, EntryPoint = "PxMat44_isFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxMat44_isFinite(PxMat44* self_);

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlane PxPlane_new();

        /// <summary>
        ///  Constructor from a normal and a distance
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlane PxPlane_new_1(float nx, float ny, float nz, float distance);

        /// <summary>
        ///  Constructor from a normal and a distance
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlane PxPlane_new_2(PxVec3* normal, float distance);

        /// <summary>
        ///  Constructor from a point on the plane and a normal
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlane PxPlane_new_3(PxVec3* point, PxVec3* normal);

        /// <summary>
        ///  Constructor from three points
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_new_4", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlane PxPlane_new_4(PxVec3* p0, PxVec3* p1, PxVec3* p2);

        [DllImport(__DllName, EntryPoint = "PxPlane_distance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxPlane_distance(PxPlane* self_, PxVec3* p);

        [DllImport(__DllName, EntryPoint = "PxPlane_contains", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxPlane_contains(PxPlane* self_, PxVec3* p);

        /// <summary>
        ///  projects p into the plane
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_project", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxPlane_project(PxPlane* self_, PxVec3* p);

        /// <summary>
        ///  find an arbitrary point in the plane
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_pointInPlane", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxPlane_pointInPlane(PxPlane* self_);

        /// <summary>
        ///  equivalent plane with unit normal
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_normalize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPlane_normalize_mut(PxPlane* self_);

        /// <summary>
        ///  transform plane
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_transform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlane PxPlane_transform(PxPlane* self_, PxTransform* pose);

        /// <summary>
        ///  inverse-transform plane
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlane_inverseTransform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlane PxPlane_inverseTransform(PxPlane* self_, PxTransform* pose);

        /// <summary>
        ///  finds the shortest rotation between two vectors.
        ///
        ///  a rotation about an axis normal to the two vectors which takes one to the other via the shortest path
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxShortestRotation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat phys_PxShortestRotation(PxVec3* from, PxVec3* target);

        [DllImport(__DllName, EntryPoint = "phys_PxDiagonalize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 phys_PxDiagonalize(PxMat33* m, PxQuat* axes);

        /// <summary>
        ///  creates a transform from the endpoints of a segment, suitable for an actor transform for a PxCapsuleGeometry
        ///
        ///  A PxTransform which will transform the vector (1,0,0) to the capsule axis shrunk by the halfHeight
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxTransformFromSegment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform phys_PxTransformFromSegment(PxVec3* p0, PxVec3* p1, float* halfHeight);

        /// <summary>
        ///  creates a transform from a plane equation, suitable for an actor transform for a PxPlaneGeometry
        ///
        ///  a PxTransform which will transform the plane PxPlane(1,0,0,0) to the specified plane
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxTransformFromPlaneEquation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform phys_PxTransformFromPlaneEquation(PxPlane* plane);

        /// <summary>
        ///  creates a plane equation from a transform, such as the actor transform for a PxPlaneGeometry
        ///
        ///  the plane
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxPlaneEquationFromTransform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlane phys_PxPlaneEquationFromTransform(PxTransform* pose);

        /// <summary>
        ///  Spherical linear interpolation of two quaternions.
        ///
        ///  Returns left when t=0, right when t=1 and a linear interpolation of left and right when 0
        ///  &lt;
        ///  t
        ///  &lt;
        ///  1.
        ///  Returns angle between -PI and PI in radians
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSlerp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat phys_PxSlerp(float t, PxQuat* left, PxQuat* right);

        /// <summary>
        ///  integrate transform.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxIntegrateTransform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxIntegrateTransform(PxTransform* curTrans, PxVec3* linvel, PxVec3* angvel, float timeStep, PxTransform* result);

        /// <summary>
        ///  Compute the exponent of a PxVec3
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxExp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQuat phys_PxExp(PxVec3* v);

        /// <summary>
        ///  computes a oriented bounding box around the scaled basis.
        ///
        ///  Bounding box extent.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxOptimizeBoundingBox", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 phys_PxOptimizeBoundingBox(PxMat33* basis);

        /// <summary>
        ///  return Returns the log of a PxQuat
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxLog", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 phys_PxLog(PxQuat* q);

        /// <summary>
        ///  return Returns 0 if v.x is largest element of v, 1 if v.y is largest element, 2 if v.z is largest element.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxLargestAxis", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxLargestAxis(PxVec3* v);

        /// <summary>
        ///  Compute tan(theta/2) given sin(theta) and cos(theta) as inputs.
        ///
        ///  Returns tan(theta/2)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxTanHalf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float phys_PxTanHalf(float sin, float cos);

        /// <summary>
        ///  Compute the closest point on an 2d ellipse to a given 2d point.
        ///
        ///  Returns the 2d position on the surface of the ellipse that is closest to point.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxEllipseClamp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 phys_PxEllipseClamp(PxVec3* point, PxVec3* radii);

        /// <summary>
        ///  Compute from an input quaternion q a pair of quaternions (swing, twist) such that
        ///  q = swing * twist
        ///  with the caveats that swing.x = twist.y = twist.z = 0.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSeparateSwingTwist", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSeparateSwingTwist(PxQuat* q, PxQuat* swing, PxQuat* twist);

        /// <summary>
        ///  Compute the angle between two non-unit vectors
        ///
        ///  Returns the angle (in radians) between the two vector v0 and v1.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxComputeAngle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float phys_PxComputeAngle(PxVec3* v0, PxVec3* v1);

        /// <summary>
        ///  Compute two normalized vectors (right and up) that are perpendicular to an input normalized vector (dir).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxComputeBasisVectors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxComputeBasisVectors(PxVec3* dir, PxVec3* right, PxVec3* up);

        /// <summary>
        ///  Compute three normalized vectors (dir, right and up) that are parallel to (dir) and perpendicular to (right, up) the
        ///  normalized direction vector (p1 - p0)/||p1 - p0||.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxComputeBasisVectors_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxComputeBasisVectors_1(PxVec3* p0, PxVec3* p1, PxVec3* dir, PxVec3* right, PxVec3* up);

        /// <summary>
        ///  Compute (i+1)%3
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetNextIndex3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxGetNextIndex3(uint i);

        [DllImport(__DllName, EntryPoint = "phys_computeBarycentric", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_computeBarycentric(PxVec3* a, PxVec3* b, PxVec3* c, PxVec3* d, PxVec3* p, PxVec4* bary);

        [DllImport(__DllName, EntryPoint = "phys_computeBarycentric_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_computeBarycentric_1(PxVec3* a, PxVec3* b, PxVec3* c, PxVec3* p, PxVec4* bary);

        [DllImport(__DllName, EntryPoint = "Interpolation_PxLerp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float Interpolation_PxLerp(float a, float b, float t);

        [DllImport(__DllName, EntryPoint = "Interpolation_PxBiLerp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float Interpolation_PxBiLerp(float f00, float f10, float f01, float f11, float tx, float ty);

        [DllImport(__DllName, EntryPoint = "Interpolation_PxTriLerp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float Interpolation_PxTriLerp(float f000, float f100, float f010, float f110, float f001, float f101, float f011, float f111, float tx, float ty, float tz);

        [DllImport(__DllName, EntryPoint = "Interpolation_PxSDFIdx", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint Interpolation_PxSDFIdx(uint i, uint j, uint k, uint nbX, uint nbY);

        [DllImport(__DllName, EntryPoint = "Interpolation_PxSDFSampleImpl", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float Interpolation_PxSDFSampleImpl(float* sdf, PxVec3* localPos, PxVec3* sdfBoxLower, PxVec3* sdfBoxHigher, float sdfDx, float invSdfDx, uint dimX, uint dimY, uint dimZ, float tolerance);

        [DllImport(__DllName, EntryPoint = "phys_PxSdfSample", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float phys_PxSdfSample(float* sdf, PxVec3* localPos, PxVec3* sdfBoxLower, PxVec3* sdfBoxHigher, float sdfDx, float invSdfDx, uint dimX, uint dimY, uint dimZ, PxVec3* gradient, float tolerance);

        /// <summary>
        ///  The constructor for Mutex creates a mutex. It is initially unlocked.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMutexImpl_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMutexImpl* PxMutexImpl_new_alloc();

        /// <summary>
        ///  The destructor for Mutex deletes the mutex.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMutexImpl_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMutexImpl_delete(PxMutexImpl* self_);

        /// <summary>
        ///  Acquire (lock) the mutex. If the mutex is already locked
        ///  by another thread, this method blocks until the mutex is
        ///  unlocked.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMutexImpl_lock_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMutexImpl_lock_mut(PxMutexImpl* self_);

        /// <summary>
        ///  Acquire (lock) the mutex. If the mutex is already locked
        ///  by another thread, this method returns false without blocking.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMutexImpl_trylock_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxMutexImpl_trylock_mut(PxMutexImpl* self_);

        /// <summary>
        ///  Release (unlock) the mutex.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMutexImpl_unlock_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMutexImpl_unlock_mut(PxMutexImpl* self_);

        /// <summary>
        ///  Size of this class.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMutexImpl_getSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxMutexImpl_getSize();

        [DllImport(__DllName, EntryPoint = "PxReadWriteLock_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxReadWriteLock* PxReadWriteLock_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxReadWriteLock_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxReadWriteLock_delete(PxReadWriteLock* self_);

        [DllImport(__DllName, EntryPoint = "PxReadWriteLock_lockReader_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxReadWriteLock_lockReader_mut(PxReadWriteLock* self_, [MarshalAs(UnmanagedType.U1)] bool takeLock);

        [DllImport(__DllName, EntryPoint = "PxReadWriteLock_lockWriter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxReadWriteLock_lockWriter_mut(PxReadWriteLock* self_);

        [DllImport(__DllName, EntryPoint = "PxReadWriteLock_unlockReader_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxReadWriteLock_unlockReader_mut(PxReadWriteLock* self_);

        [DllImport(__DllName, EntryPoint = "PxReadWriteLock_unlockWriter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxReadWriteLock_unlockWriter_mut(PxReadWriteLock* self_);

        /// <summary>
        ///  Mark the beginning of a nested profile block
        ///
        ///  Returns implementation-specific profiler data for this event
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxProfilerCallback_zoneStart_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxProfilerCallback_zoneStart_mut(PxProfilerCallback* self_, byte* eventName, [MarshalAs(UnmanagedType.U1)] bool detached, ulong contextId);

        /// <summary>
        ///  Mark the end of a nested profile block
        ///
        ///  eventName plus contextId can be used to uniquely match up start and end of a zone.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxProfilerCallback_zoneEnd_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxProfilerCallback_zoneEnd_mut(PxProfilerCallback* self_, void* profilerData, byte* eventName, [MarshalAs(UnmanagedType.U1)] bool detached, ulong contextId);

        [DllImport(__DllName, EntryPoint = "PxProfileScoped_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxProfileScoped* PxProfileScoped_new_alloc(PxProfilerCallback* callback, byte* eventName, [MarshalAs(UnmanagedType.U1)] bool detached, ulong contextId);

        [DllImport(__DllName, EntryPoint = "PxProfileScoped_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxProfileScoped_delete(PxProfileScoped* self_);

        [DllImport(__DllName, EntryPoint = "PxSListEntry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSListEntry PxSListEntry_new();

        [DllImport(__DllName, EntryPoint = "PxSListEntry_next_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSListEntry* PxSListEntry_next_mut(PxSListEntry* self_);

        [DllImport(__DllName, EntryPoint = "PxSListImpl_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSListImpl* PxSListImpl_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxSListImpl_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSListImpl_delete(PxSListImpl* self_);

        [DllImport(__DllName, EntryPoint = "PxSListImpl_push_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSListImpl_push_mut(PxSListImpl* self_, PxSListEntry* entry);

        [DllImport(__DllName, EntryPoint = "PxSListImpl_pop_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSListEntry* PxSListImpl_pop_mut(PxSListImpl* self_);

        [DllImport(__DllName, EntryPoint = "PxSListImpl_flush_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSListEntry* PxSListImpl_flush_mut(PxSListImpl* self_);

        [DllImport(__DllName, EntryPoint = "PxSListImpl_getSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSListImpl_getSize();

        [DllImport(__DllName, EntryPoint = "PxSyncImpl_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSyncImpl* PxSyncImpl_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxSyncImpl_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSyncImpl_delete(PxSyncImpl* self_);

        /// <summary>
        ///  Wait on the object for at most the given number of ms. Returns
        ///  true if the object is signaled. Sync::waitForever will block forever
        ///  or until the object is signaled.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSyncImpl_wait_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSyncImpl_wait_mut(PxSyncImpl* self_, uint milliseconds);

        /// <summary>
        ///  Signal the synchronization object, waking all threads waiting on it
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSyncImpl_set_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSyncImpl_set_mut(PxSyncImpl* self_);

        /// <summary>
        ///  Reset the synchronization object
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSyncImpl_reset_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSyncImpl_reset_mut(PxSyncImpl* self_);

        /// <summary>
        ///  Size of this class.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSyncImpl_getSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSyncImpl_getSize();

        [DllImport(__DllName, EntryPoint = "PxRunnable_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRunnable* PxRunnable_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxRunnable_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRunnable_delete(PxRunnable* self_);

        [DllImport(__DllName, EntryPoint = "PxRunnable_execute_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRunnable_execute_mut(PxRunnable* self_);

        [DllImport(__DllName, EntryPoint = "phys_PxTlsAlloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxTlsAlloc();

        [DllImport(__DllName, EntryPoint = "phys_PxTlsFree", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxTlsFree(uint index);

        [DllImport(__DllName, EntryPoint = "phys_PxTlsGet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* phys_PxTlsGet(uint index);

        [DllImport(__DllName, EntryPoint = "phys_PxTlsGetValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint phys_PxTlsGetValue(uint index);

        [DllImport(__DllName, EntryPoint = "phys_PxTlsSet", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxTlsSet(uint index, void* value);

        [DllImport(__DllName, EntryPoint = "phys_PxTlsSetValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxTlsSetValue(uint index, nuint value);

        [DllImport(__DllName, EntryPoint = "PxCounterFrequencyToTensOfNanos_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCounterFrequencyToTensOfNanos PxCounterFrequencyToTensOfNanos_new(ulong inNum, ulong inDenom);

        [DllImport(__DllName, EntryPoint = "PxCounterFrequencyToTensOfNanos_toTensOfNanos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong PxCounterFrequencyToTensOfNanos_toTensOfNanos(PxCounterFrequencyToTensOfNanos* self_, ulong inCounter);

        [DllImport(__DllName, EntryPoint = "PxTime_getBootCounterFrequency", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCounterFrequencyToTensOfNanos* PxTime_getBootCounterFrequency();

        [DllImport(__DllName, EntryPoint = "PxTime_getCounterFrequency", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCounterFrequencyToTensOfNanos PxTime_getCounterFrequency();

        [DllImport(__DllName, EntryPoint = "PxTime_getCurrentCounterValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong PxTime_getCurrentCounterValue();

        [DllImport(__DllName, EntryPoint = "PxTime_getCurrentTimeInTensOfNanoSeconds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong PxTime_getCurrentTimeInTensOfNanoSeconds();

        [DllImport(__DllName, EntryPoint = "PxTime_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTime PxTime_new();

        [DllImport(__DllName, EntryPoint = "PxTime_getElapsedSeconds_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double PxTime_getElapsedSeconds_mut(PxTime* self_);

        [DllImport(__DllName, EntryPoint = "PxTime_peekElapsedSeconds_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double PxTime_peekElapsedSeconds_mut(PxTime* self_);

        [DllImport(__DllName, EntryPoint = "PxTime_getLastTime", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double PxTime_getLastTime(PxTime* self_);

        /// <summary>
        ///  default constructor leaves data uninitialized.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec2 PxVec2_new();

        /// <summary>
        ///  zero constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec2 PxVec2_new_1(PxZERO anon_param0);

        /// <summary>
        ///  Assigns scalar parameter to all elements.
        ///
        ///  Useful to initialize to zero or one.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec2 PxVec2_new_2(float a);

        /// <summary>
        ///  Initializes from 2 scalar parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec2 PxVec2_new_3(float nx, float ny);

        /// <summary>
        ///  tests for exact zero vector
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_isZero", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec2_isZero(PxVec2* self_);

        /// <summary>
        ///  returns true if all 2 elems of the vector are finite (not NAN or INF, etc.)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_isFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec2_isFinite(PxVec2* self_);

        /// <summary>
        ///  is normalized - used by API parameter validation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_isNormalized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxVec2_isNormalized(PxVec2* self_);

        /// <summary>
        ///  returns the squared magnitude
        ///
        ///  Avoids calling PxSqrt()!
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_magnitudeSquared", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec2_magnitudeSquared(PxVec2* self_);

        /// <summary>
        ///  returns the magnitude
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_magnitude", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec2_magnitude(PxVec2* self_);

        /// <summary>
        ///  returns the scalar product of this and other.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_dot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec2_dot(PxVec2* self_, PxVec2* v);

        /// <summary>
        ///  returns a unit vector
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_getNormalized", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec2 PxVec2_getNormalized(PxVec2* self_);

        /// <summary>
        ///  normalizes the vector in place
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_normalize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec2_normalize_mut(PxVec2* self_);

        /// <summary>
        ///  a[i] * b[i], for all i.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_multiply", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec2 PxVec2_multiply(PxVec2* self_, PxVec2* a);

        /// <summary>
        ///  element-wise minimum
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_minimum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec2 PxVec2_minimum(PxVec2* self_, PxVec2* v);

        /// <summary>
        ///  returns MIN(x, y);
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_minElement", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec2_minElement(PxVec2* self_);

        /// <summary>
        ///  element-wise maximum
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_maximum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec2 PxVec2_maximum(PxVec2* self_, PxVec2* v);

        /// <summary>
        ///  returns MAX(x, y);
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxVec2_maxElement", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxVec2_maxElement(PxVec2* self_);

        [DllImport(__DllName, EntryPoint = "PxStridedData_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxStridedData PxStridedData_new();

        [DllImport(__DllName, EntryPoint = "PxBoundedData_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBoundedData PxBoundedData_new();

        [DllImport(__DllName, EntryPoint = "PxDebugPoint_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugPoint PxDebugPoint_new(PxVec3* p, uint* c);

        [DllImport(__DllName, EntryPoint = "PxDebugLine_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugLine PxDebugLine_new(PxVec3* p0, PxVec3* p1, uint* c);

        [DllImport(__DllName, EntryPoint = "PxDebugTriangle_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugTriangle PxDebugTriangle_new(PxVec3* p0, PxVec3* p1, PxVec3* p2, uint* c);

        [DllImport(__DllName, EntryPoint = "PxDebugText_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugText PxDebugText_new();

        [DllImport(__DllName, EntryPoint = "PxDebugText_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugText PxDebugText_new_1(PxVec3* pos, float* sz, uint* clr, byte* str);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRenderBuffer_delete(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_getNbPoints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRenderBuffer_getNbPoints(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_getPoints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugPoint* PxRenderBuffer_getPoints(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_addPoint_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRenderBuffer_addPoint_mut(PxRenderBuffer* self_, PxDebugPoint* point);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_getNbLines", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRenderBuffer_getNbLines(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_getLines", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugLine* PxRenderBuffer_getLines(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_addLine_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRenderBuffer_addLine_mut(PxRenderBuffer* self_, PxDebugLine* line);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_reserveLines_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugLine* PxRenderBuffer_reserveLines_mut(PxRenderBuffer* self_, uint nbLines);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_reservePoints_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugPoint* PxRenderBuffer_reservePoints_mut(PxRenderBuffer* self_, uint nbLines);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_getNbTriangles", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRenderBuffer_getNbTriangles(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_getTriangles", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDebugTriangle* PxRenderBuffer_getTriangles(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_addTriangle_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRenderBuffer_addTriangle_mut(PxRenderBuffer* self_, PxDebugTriangle* triangle);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_append_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRenderBuffer_append_mut(PxRenderBuffer* self_, PxRenderBuffer* other);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_clear_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRenderBuffer_clear_mut(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_shift_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRenderBuffer_shift_mut(PxRenderBuffer* self_, PxVec3* delta);

        [DllImport(__DllName, EntryPoint = "PxRenderBuffer_empty", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRenderBuffer_empty(PxRenderBuffer* self_);

        [DllImport(__DllName, EntryPoint = "PxProcessPxBaseCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxProcessPxBaseCallback_delete(PxProcessPxBaseCallback* self_);

        [DllImport(__DllName, EntryPoint = "PxProcessPxBaseCallback_process_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxProcessPxBaseCallback_process_mut(PxProcessPxBaseCallback* self_, PxBase* anon_param0);

        /// <summary>
        ///  Registers a reference value corresponding to a PxBase object.
        ///
        ///  This method is assumed to be called in the implementation of PxSerializer::registerReferences for serialized
        ///  references that need to be resolved on deserialization.
        ///
        ///  A reference needs to be associated with exactly one PxBase object in either the collection or the
        ///  external references collection.
        ///
        ///  Different kinds of references are supported and need to be specified. In the most common case
        ///  (PX_SERIAL_REF_KIND_PXBASE) the PxBase object matches the reference value (which is the pointer
        ///  to the PxBase object). Integer references maybe registered as well (used for internal material
        ///  indices with PX_SERIAL_REF_KIND_MATERIAL_IDX). Other kinds could be added with the restriction that
        ///  for pointer types the kind value needs to be marked with the PX_SERIAL_REF_KIND_PTR_TYPE_BIT.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationContext_registerReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializationContext_registerReference_mut(PxSerializationContext* self_, PxBase* @base, uint kind, nuint reference);

        /// <summary>
        ///  Returns the collection that is being serialized.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationContext_getCollection", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCollection* PxSerializationContext_getCollection(PxSerializationContext* self_);

        /// <summary>
        ///  Serializes object data and object extra data.
        ///
        ///  This function is assumed to be called within the implementation of PxSerializer::exportData and PxSerializer::exportExtraData.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationContext_writeData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializationContext_writeData_mut(PxSerializationContext* self_, void* data, uint size);

        /// <summary>
        ///  Aligns the serialized data.
        ///
        ///  This function is assumed to be called within the implementation of PxSerializer::exportData and PxSerializer::exportExtraData.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationContext_alignData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializationContext_alignData_mut(PxSerializationContext* self_, uint alignment);

        /// <summary>
        ///  Helper function to write a name to the extraData if serialization is configured to save names.
        ///
        ///  This function is assumed to be called within the implementation of PxSerializer::exportExtraData.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationContext_writeName_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializationContext_writeName_mut(PxSerializationContext* self_, byte* name);

        /// <summary>
        ///  Retrieves a pointer to a deserialized PxBase object given a corresponding deserialized reference value
        ///
        ///  This method is assumed to be called in the implementation of PxSerializer::createObject in order
        ///  to update reference values on deserialization.
        ///
        ///  To update a PxBase reference the corresponding deserialized pointer value needs to be provided in order to retrieve
        ///  the location of the corresponding deserialized PxBase object. (PxDeserializationContext::translatePxBase simplifies
        ///  this common case).
        ///
        ///  For other kinds of references the reverence values need to be updated by deduction given the corresponding PxBase instance.
        ///
        ///  PxBase object associated with the reference value
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDeserializationContext_resolveReference", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBase* PxDeserializationContext_resolveReference(PxDeserializationContext* self_, uint kind, nuint reference);

        /// <summary>
        ///  Helper function to read a name from the extra data during deserialization.
        ///
        ///  This function is assumed to be called within the implementation of PxSerializer::createObject.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDeserializationContext_readName_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDeserializationContext_readName_mut(PxDeserializationContext* self_, byte** name);

        /// <summary>
        ///  Function to align the extra data stream to a power of 2 alignment
        ///
        ///  This function is assumed to be called within the implementation of PxSerializer::createObject.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDeserializationContext_alignExtraData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDeserializationContext_alignExtraData_mut(PxDeserializationContext* self_, uint alignment);

        /// <summary>
        ///  Register a serializer for a concrete type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationRegistry_registerSerializer_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializationRegistry_registerSerializer_mut(PxSerializationRegistry* self_, ushort type_, PxSerializer* serializer);

        /// <summary>
        ///  Unregister a serializer for a concrete type, and retrieves the corresponding serializer object.
        ///
        ///  Unregistered serializer corresponding to type, NULL for types for which no serializer has been registered.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationRegistry_unregisterSerializer_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSerializer* PxSerializationRegistry_unregisterSerializer_mut(PxSerializationRegistry* self_, ushort type_);

        /// <summary>
        ///  Returns PxSerializer corresponding to type
        ///
        ///  Registered PxSerializer object corresponding to type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationRegistry_getSerializer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSerializer* PxSerializationRegistry_getSerializer(PxSerializationRegistry* self_, ushort type_);

        /// <summary>
        ///  Register a RepX serializer for a concrete type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationRegistry_registerRepXSerializer_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializationRegistry_registerRepXSerializer_mut(PxSerializationRegistry* self_, ushort type_, PxRepXSerializer* serializer);

        /// <summary>
        ///  Unregister a RepX serializer for a concrete type, and retrieves the corresponding serializer object.
        ///
        ///  Unregistered PxRepxSerializer corresponding to type, NULL for types for which no RepX serializer has been registered.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationRegistry_unregisterRepXSerializer_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRepXSerializer* PxSerializationRegistry_unregisterRepXSerializer_mut(PxSerializationRegistry* self_, ushort type_);

        /// <summary>
        ///  Returns RepX serializer given the corresponding type name
        ///
        ///  Registered PxRepXSerializer object corresponding to type name
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationRegistry_getRepXSerializer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRepXSerializer* PxSerializationRegistry_getRepXSerializer(PxSerializationRegistry* self_, byte* typeName);

        /// <summary>
        ///  Releases PxSerializationRegistry instance.
        ///
        ///  This unregisters all PhysX and PhysXExtension serializers. Make sure to unregister all custom type
        ///  serializers before releasing the PxSerializationRegistry.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializationRegistry_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializationRegistry_release_mut(PxSerializationRegistry* self_);

        /// <summary>
        ///  Adds a PxBase object to the collection.
        ///
        ///  Adds a PxBase object to the collection. Optionally a PxSerialObjectId can be provided
        ///  in order to resolve dependencies between collections. A PxSerialObjectId value of PX_SERIAL_OBJECT_ID_INVALID
        ///  means the object remains without id. Objects can be added regardless of other objects they require. If the object
        ///  is already in the collection, the ID will be set if it was PX_SERIAL_OBJECT_ID_INVALID previously, otherwise the
        ///  operation fails.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_add_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollection_add_mut(PxCollection* self_, PxBase* @object, ulong id);

        /// <summary>
        ///  Removes a PxBase member object from the collection.
        ///
        ///  Object needs to be contained by the collection.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_remove_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollection_remove_mut(PxCollection* self_, PxBase* @object);

        /// <summary>
        ///  Returns whether the collection contains a certain PxBase object.
        ///
        ///  Whether object is contained.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_contains", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCollection_contains(PxCollection* self_, PxBase* @object);

        /// <summary>
        ///  Adds an id to a member PxBase object.
        ///
        ///  If the object is already associated with an id within the collection, the id is replaced.
        ///  May only be called for objects that are members of the collection. The id needs to be unique
        ///  within the collection.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_addId_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollection_addId_mut(PxCollection* self_, PxBase* @object, ulong id);

        /// <summary>
        ///  Removes id from a contained PxBase object.
        ///
        ///  May only be called for ids that are associated with an object in the collection.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_removeId_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollection_removeId_mut(PxCollection* self_, ulong id);

        /// <summary>
        ///  Adds all PxBase objects and their ids of collection to this collection.
        ///
        ///  PxBase objects already in this collection are ignored. Object ids need to be conflict
        ///  free, i.e. the same object may not have two different ids within the two collections.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_add_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollection_add_mut_1(PxCollection* self_, PxCollection* collection);

        /// <summary>
        ///  Removes all PxBase objects of collection from this collection.
        ///
        ///  PxBase objects not present in this collection are ignored. Ids of objects
        ///  which are removed are also removed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_remove_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollection_remove_mut_1(PxCollection* self_, PxCollection* collection);

        /// <summary>
        ///  Gets number of PxBase objects in this collection.
        ///
        ///  Number of objects in this collection
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_getNbObjects", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCollection_getNbObjects(PxCollection* self_);

        /// <summary>
        ///  Gets the PxBase object of this collection given its index.
        ///
        ///  PxBase object at index index
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_getObject", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBase* PxCollection_getObject(PxCollection* self_, uint index);

        /// <summary>
        ///  Copies member PxBase pointers to a user specified buffer.
        ///
        ///  number of members PxBase objects that have been written to the userBuffer
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_getObjects", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCollection_getObjects(PxCollection* self_, PxBase** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Looks for a PxBase object given a PxSerialObjectId value.
        ///
        ///  If there is no PxBase object in the collection with the given id, NULL is returned.
        ///
        ///  PxBase object with the given id value or NULL
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_find", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBase* PxCollection_find(PxCollection* self_, ulong id);

        /// <summary>
        ///  Gets number of PxSerialObjectId names in this collection.
        ///
        ///  Number of PxSerialObjectId names in this collection
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_getNbIds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCollection_getNbIds(PxCollection* self_);

        /// <summary>
        ///  Copies member PxSerialObjectId values to a user specified buffer.
        ///
        ///  number of members PxSerialObjectId values that have been written to the userBuffer
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_getIds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCollection_getIds(PxCollection* self_, ulong* userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Gets the PxSerialObjectId name of a PxBase object within the collection.
        ///
        ///  The PxBase object needs to be a member of the collection.
        ///
        ///  PxSerialObjectId name of the object or PX_SERIAL_OBJECT_ID_INVALID if the object is unnamed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_getId", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong PxCollection_getId(PxCollection* self_, PxBase* @object);

        /// <summary>
        ///  Deletes a collection object.
        ///
        ///  This function only deletes the collection object, i.e. the container class. It doesn't delete objects
        ///  that are part of the collection.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCollection_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollection_release_mut(PxCollection* self_);

        /// <summary>
        ///  Creates a collection object.
        ///
        ///  Objects can only be serialized or deserialized through a collection.
        ///  For serialization, users must add objects to the collection and serialize the collection as a whole.
        ///  For deserialization, the system gives back a collection of deserialized objects to users.
        ///
        ///  The new collection object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateCollection", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCollection* phys_PxCreateCollection();

        /// <summary>
        ///  Releases the PxBase instance, please check documentation of release in derived class.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBase_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBase_release_mut(PxBase* self_);

        /// <summary>
        ///  Returns string name of dynamic type.
        ///
        ///  Class name of most derived type of this object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBase_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxBase_getConcreteTypeName(PxBase* self_);

        /// <summary>
        ///  Returns concrete type of object.
        ///
        ///  PxConcreteType::Enum of serialized object
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBase_getConcreteType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort PxBase_getConcreteType(PxBase* self_);

        /// <summary>
        ///  Set PxBaseFlag
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBase_setBaseFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBase_setBaseFlag_mut(PxBase* self_, PxBaseFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Set PxBaseFlags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBase_setBaseFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBase_setBaseFlags_mut(PxBase* self_, PxBaseFlags inFlags);

        /// <summary>
        ///  Returns PxBaseFlags
        ///
        ///  PxBaseFlags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBase_getBaseFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBaseFlags PxBase_getBaseFlags(PxBase* self_);

        /// <summary>
        ///  Whether the object is subordinate.
        ///
        ///  A class is subordinate, if it can only be instantiated in the context of another class.
        ///
        ///  Whether the class is subordinate
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBase_isReleasable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBase_isReleasable(PxBase* self_);

        /// <summary>
        ///  Decrements the reference count of the object and releases it if the new reference count is zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRefCounted_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRefCounted_release_mut(PxRefCounted* self_);

        /// <summary>
        ///  Returns the reference count of the object.
        ///
        ///  At creation, the reference count of the object is 1. Every other object referencing this object increments the
        ///  count by 1. When the reference count reaches 0, and only then, the object gets destroyed automatically.
        ///
        ///  the current reference count.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRefCounted_getReferenceCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRefCounted_getReferenceCount(PxRefCounted* self_);

        /// <summary>
        ///  Acquires a counted reference to this object.
        ///
        ///  This method increases the reference count of the object by 1. Decrement the reference count by calling release()
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRefCounted_acquireReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRefCounted_acquireReference_mut(PxRefCounted* self_);

        /// <summary>
        ///  constructor sets to default
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTolerancesScale_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTolerancesScale PxTolerancesScale_new(float defaultLength, float defaultSpeed);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid (returns always true).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTolerancesScale_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTolerancesScale_isValid(PxTolerancesScale* self_);

        /// <summary>
        ///  Allocate a new string.
        ///
        ///  *Always* a valid null terminated string.  "" is returned if "" or null is passed in.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxStringTable_allocateStr_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxStringTable_allocateStr_mut(PxStringTable* self_, byte* inSrc);

        /// <summary>
        ///  Release the string table and all the strings associated with it.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxStringTable_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxStringTable_release_mut(PxStringTable* self_);

        /// <summary>
        ///  Returns string name of dynamic type.
        ///
        ///  Class name of most derived type of this object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxSerializer_getConcreteTypeName(PxSerializer* self_);

        /// <summary>
        ///  Adds required objects to the collection.
        ///
        ///  This method does not add the required objects recursively, e.g. objects required by required objects.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_requiresObjects", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializer_requiresObjects(PxSerializer* self_, PxBase* anon_param0, PxProcessPxBaseCallback* anon_param1);

        /// <summary>
        ///  Whether the object is subordinate.
        ///
        ///  A class is subordinate, if it can only be instantiated in the context of another class.
        ///
        ///  Whether the class is subordinate
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_isSubordinate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSerializer_isSubordinate(PxSerializer* self_);

        /// <summary>
        ///  Exports object's extra data to stream.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_exportExtraData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializer_exportExtraData(PxSerializer* self_, PxBase* anon_param0, PxSerializationContext* anon_param1);

        /// <summary>
        ///  Exports object's data to stream.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_exportData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializer_exportData(PxSerializer* self_, PxBase* anon_param0, PxSerializationContext* anon_param1);

        /// <summary>
        ///  Register references that the object maintains to other objects.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_registerReferences", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializer_registerReferences(PxSerializer* self_, PxBase* obj, PxSerializationContext* s);

        /// <summary>
        ///  Returns size needed to create the class instance.
        ///
        ///  sizeof class instance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_getClassSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint PxSerializer_getClassSize(PxSerializer* self_);

        /// <summary>
        ///  Create object at a given address, resolve references and import extra data.
        ///
        ///  Created PxBase pointer (needs to be identical to address before increment).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_createObject", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBase* PxSerializer_createObject(PxSerializer* self_, byte** address, PxDeserializationContext* context);

        /// <summary>
        ///  *******************************************************************************************************************
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerializer_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerializer_delete(PxSerializer* self_);

        /// <summary>
        ///  Builds object (TriangleMesh, Heightfield, ConvexMesh or BVH) from given data in PxPhysics.
        ///
        ///  PxBase Created object in PxPhysics.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxInsertionCallback_buildObjectFromData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBase* PxInsertionCallback_buildObjectFromData_mut(PxInsertionCallback* self_, PxConcreteType type_, void* data);

        /// <summary>
        ///  Set the user-provided dispatcher object for CPU tasks
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_setCpuDispatcher_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTaskManager_setCpuDispatcher_mut(PxTaskManager* self_, PxCpuDispatcher* ref_);

        /// <summary>
        ///  Get the user-provided dispatcher object for CPU tasks
        ///
        ///  The CPU dispatcher object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_getCpuDispatcher", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCpuDispatcher* PxTaskManager_getCpuDispatcher(PxTaskManager* self_);

        /// <summary>
        ///  Reset any dependencies between Tasks
        ///
        ///  Will be called at the start of every frame before tasks are submitted.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_resetDependencies_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTaskManager_resetDependencies_mut(PxTaskManager* self_);

        /// <summary>
        ///  Called by the owning scene to start the task graph.
        ///
        ///  All tasks with ref count of 1 will be dispatched.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_startSimulation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTaskManager_startSimulation_mut(PxTaskManager* self_);

        /// <summary>
        ///  Called by the owning scene at the end of a simulation step.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_stopSimulation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTaskManager_stopSimulation_mut(PxTaskManager* self_);

        /// <summary>
        ///  Called by the worker threads to inform the PxTaskManager that a task has completed processing.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_taskCompleted_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTaskManager_taskCompleted_mut(PxTaskManager* self_, PxTask* task);

        /// <summary>
        ///  Retrieve a task by name
        ///
        ///  The ID of the task with that name, or eNOT_PRESENT if not found
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_getNamedTask_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxTaskManager_getNamedTask_mut(PxTaskManager* self_, byte* name);

        /// <summary>
        ///  Submit a task with a unique name.
        ///
        ///  The ID of the task with that name, or eNOT_PRESENT if not found
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_submitNamedTask_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxTaskManager_submitNamedTask_mut(PxTaskManager* self_, PxTask* task, byte* name, PxTaskType type_);

        /// <summary>
        ///  Submit an unnamed task.
        ///
        ///  The ID of the task with that name, or eNOT_PRESENT if not found
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_submitUnnamedTask_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxTaskManager_submitUnnamedTask_mut(PxTaskManager* self_, PxTask* task, PxTaskType type_);

        /// <summary>
        ///  Retrieve a task given a task ID
        ///
        ///  The task associated with the ID
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_getTaskFromID_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTask* PxTaskManager_getTaskFromID_mut(PxTaskManager* self_, uint id);

        /// <summary>
        ///  Release the PxTaskManager object, referenced dispatchers will not be released
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTaskManager_release_mut(PxTaskManager* self_);

        /// <summary>
        ///  Construct a new PxTaskManager instance with the given [optional] dispatchers
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTaskManager_createTaskManager", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTaskManager* PxTaskManager_createTaskManager(PxErrorCallback* errorCallback, PxCpuDispatcher* anon_param1);

        /// <summary>
        ///  Called by the TaskManager when a task is to be queued for execution.
        ///
        ///  Upon receiving a task, the dispatcher should schedule the task to run.
        ///  After the task has been run, it should call the release() method and
        ///  discard its pointer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCpuDispatcher_submitTask_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCpuDispatcher_submitTask_mut(PxCpuDispatcher* self_, PxBaseTask* task);

        /// <summary>
        ///  Returns the number of available worker threads for this dispatcher.
        ///
        ///  The SDK will use this count to control how many tasks are submitted. By
        ///  matching the number of tasks with the number of execution units task
        ///  overhead can be reduced.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCpuDispatcher_getWorkerCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCpuDispatcher_getWorkerCount(PxCpuDispatcher* self_);

        [DllImport(__DllName, EntryPoint = "PxCpuDispatcher_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCpuDispatcher_delete(PxCpuDispatcher* self_);

        /// <summary>
        ///  The user-implemented run method where the task's work should be performed
        ///
        ///  run() methods must be thread safe, stack friendly (no alloca, etc), and
        ///  must never block.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBaseTask_run_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBaseTask_run_mut(PxBaseTask* self_);

        /// <summary>
        ///  Return a user-provided task name for profiling purposes.
        ///
        ///  It does not have to be unique, but unique names are helpful.
        ///
        ///  The name of this task
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBaseTask_getName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxBaseTask_getName(PxBaseTask* self_);

        /// <summary>
        ///  Implemented by derived implementation classes
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBaseTask_addReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBaseTask_addReference_mut(PxBaseTask* self_);

        /// <summary>
        ///  Implemented by derived implementation classes
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBaseTask_removeReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBaseTask_removeReference_mut(PxBaseTask* self_);

        /// <summary>
        ///  Implemented by derived implementation classes
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBaseTask_getReference", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int PxBaseTask_getReference(PxBaseTask* self_);

        /// <summary>
        ///  Implemented by derived implementation classes
        ///
        ///  A task may assume in its release() method that the task system no longer holds
        ///  references to it - so it may safely run its destructor, recycle itself, etc.
        ///  provided no additional user references to the task exist
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBaseTask_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBaseTask_release_mut(PxBaseTask* self_);

        /// <summary>
        ///  Return PxTaskManager to which this task was submitted
        ///
        ///  Note, can return NULL if task was not submitted, or has been
        ///  completed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBaseTask_getTaskManager", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTaskManager* PxBaseTask_getTaskManager(PxBaseTask* self_);

        [DllImport(__DllName, EntryPoint = "PxBaseTask_setContextId_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBaseTask_setContextId_mut(PxBaseTask* self_, ulong id);

        [DllImport(__DllName, EntryPoint = "PxBaseTask_getContextId", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong PxBaseTask_getContextId(PxBaseTask* self_);

        /// <summary>
        ///  Release method implementation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTask_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTask_release_mut(PxTask* self_);

        /// <summary>
        ///  Inform the PxTaskManager this task must finish before the given
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTask_finishBefore_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTask_finishBefore_mut(PxTask* self_, uint taskID);

        /// <summary>
        ///  Inform the PxTaskManager this task cannot start until the given
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTask_startAfter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTask_startAfter_mut(PxTask* self_, uint taskID);

        /// <summary>
        ///  Manually increment this task's reference count. The task will
        ///  not be allowed to run until removeReference() is called.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTask_addReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTask_addReference_mut(PxTask* self_);

        /// <summary>
        ///  Manually decrement this task's reference count. If the reference
        ///  count reaches zero, the task will be dispatched.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTask_removeReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTask_removeReference_mut(PxTask* self_);

        /// <summary>
        ///  Return the ref-count for this task
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTask_getReference", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int PxTask_getReference(PxTask* self_);

        /// <summary>
        ///  Return the unique ID for this task
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTask_getTaskID", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxTask_getTaskID(PxTask* self_);

        /// <summary>
        ///  Called by PxTaskManager at submission time for initialization
        ///
        ///  Perform simulation step initialization here.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTask_submitted_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTask_submitted_mut(PxTask* self_);

        /// <summary>
        ///  Initialize this task and specify the task that will have its ref count decremented on completion.
        ///
        ///  Submission is deferred until the task's mRefCount is decremented to zero.
        ///  Note that we only use the PxTaskManager to query the appropriate dispatcher.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLightCpuTask_setContinuation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxLightCpuTask_setContinuation_mut(PxLightCpuTask* self_, PxTaskManager* tm, PxBaseTask* c);

        /// <summary>
        ///  Initialize this task and specify the task that will have its ref count decremented on completion.
        ///
        ///  This overload of setContinuation() queries the PxTaskManager from the continuation
        ///  task, which cannot be NULL.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLightCpuTask_setContinuation_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxLightCpuTask_setContinuation_mut_1(PxLightCpuTask* self_, PxBaseTask* c);

        /// <summary>
        ///  Retrieves continuation task
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLightCpuTask_getContinuation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBaseTask* PxLightCpuTask_getContinuation(PxLightCpuTask* self_);

        /// <summary>
        ///  Manually decrement this task's reference count. If the reference
        ///  count reaches zero, the task will be dispatched.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLightCpuTask_removeReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxLightCpuTask_removeReference_mut(PxLightCpuTask* self_);

        /// <summary>
        ///  Return the ref-count for this task
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLightCpuTask_getReference", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int PxLightCpuTask_getReference(PxLightCpuTask* self_);

        /// <summary>
        ///  Manually increment this task's reference count. The task will
        ///  not be allowed to run until removeReference() is called.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLightCpuTask_addReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxLightCpuTask_addReference_mut(PxLightCpuTask* self_);

        /// <summary>
        ///  called by CpuDispatcher after run method has completed
        ///
        ///  Decrements the continuation task's reference count, if specified.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLightCpuTask_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxLightCpuTask_release_mut(PxLightCpuTask* self_);

        /// <summary>
        ///  Returns the type of the geometry.
        ///
        ///  The type of the object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGeometry_getType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeometryType PxGeometry_getType(PxGeometry* self_);

        /// <summary>
        ///  Constructor to initialize half extents from scalar parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBoxGeometry PxBoxGeometry_new(float hx, float hy, float hz);

        /// <summary>
        ///  Constructor to initialize half extents from vector parameter.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxGeometry_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBoxGeometry PxBoxGeometry_new_1(PxVec3 halfExtents_);

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid
        ///
        ///  A valid box has a positive extent in each direction (halfExtents.x &gt; 0, halfExtents.y &gt; 0, halfExtents.z &gt; 0).
        ///  It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a box that has zero extent in any direction.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBoxGeometry_isValid(PxBoxGeometry* self_);

        [DllImport(__DllName, EntryPoint = "PxBVHRaycastCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBVHRaycastCallback_delete(PxBVHRaycastCallback* self_);

        [DllImport(__DllName, EntryPoint = "PxBVHRaycastCallback_reportHit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVHRaycastCallback_reportHit_mut(PxBVHRaycastCallback* self_, uint boundsIndex, float* distance);

        [DllImport(__DllName, EntryPoint = "PxBVHOverlapCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBVHOverlapCallback_delete(PxBVHOverlapCallback* self_);

        [DllImport(__DllName, EntryPoint = "PxBVHOverlapCallback_reportHit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVHOverlapCallback_reportHit_mut(PxBVHOverlapCallback* self_, uint boundsIndex);

        [DllImport(__DllName, EntryPoint = "PxBVHTraversalCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBVHTraversalCallback_delete(PxBVHTraversalCallback* self_);

        [DllImport(__DllName, EntryPoint = "PxBVHTraversalCallback_visitNode_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVHTraversalCallback_visitNode_mut(PxBVHTraversalCallback* self_, PxBounds3* bounds);

        [DllImport(__DllName, EntryPoint = "PxBVHTraversalCallback_reportLeaf_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVHTraversalCallback_reportLeaf_mut(PxBVHTraversalCallback* self_, uint nbPrims, uint* prims);

        /// <summary>
        ///  Raycast test against a BVH.
        ///
        ///  false if query has been aborted
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_raycast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVH_raycast(PxBVH* self_, PxVec3* origin, PxVec3* unitDir, float maxDist, PxBVHRaycastCallback* cb, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Sweep test against a BVH.
        ///
        ///  false if query has been aborted
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_sweep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVH_sweep(PxBVH* self_, PxGeometry* geom, PxTransform* pose, PxVec3* unitDir, float maxDist, PxBVHRaycastCallback* cb, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Overlap test against a BVH.
        ///
        ///  false if query has been aborted
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_overlap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVH_overlap(PxBVH* self_, PxGeometry* geom, PxTransform* pose, PxBVHOverlapCallback* cb, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Frustum culling test against a BVH.
        ///
        ///  This is similar in spirit to an overlap query using a convex object around the frustum.
        ///  However this specialized query has better performance, and can support more than the 6 planes
        ///  of a frustum, which can be useful in portal-based engines.
        ///
        ///  On the other hand this test only returns a conservative number of bounds, i.e. some of the returned
        ///  bounds may actually be outside the frustum volume, close to it but not touching it. This is usually
        ///  an ok performance trade-off when the function is used for view-frustum culling.
        ///
        ///  false if query has been aborted
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_cull", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVH_cull(PxBVH* self_, uint nbPlanes, PxPlane* planes, PxBVHOverlapCallback* cb, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Returns the number of bounds in the BVH.
        ///
        ///  You can use [`getBounds`]() to retrieve the bounds.
        ///
        ///  These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node.
        ///
        ///  Number of bounds in the BVH.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_getNbBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxBVH_getNbBounds(PxBVH* self_);

        /// <summary>
        ///  Retrieve the read-only bounds in the BVH.
        ///
        ///  These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_getBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3* PxBVH_getBounds(PxBVH* self_);

        /// <summary>
        ///  Retrieve the bounds in the BVH.
        ///
        ///  These bounds can be modified. Call refit() after modifications are done.
        ///
        ///  These are the user-defined bounds passed to the BVH builder, not the internal bounds around each BVH node.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_getBoundsForModification_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3* PxBVH_getBoundsForModification_mut(PxBVH* self_);

        /// <summary>
        ///  Refit the BVH.
        ///
        ///  This function "refits" the tree, i.e. takes the new (leaf) bounding boxes into account and
        ///  recomputes all the BVH bounds accordingly. This is an O(n) operation with n = number of bounds in the BVH.
        ///
        ///  This works best with minor bounds modifications, i.e. when the bounds remain close to their initial values.
        ///  With large modifications the tree quality degrades more and more, and subsequent query performance suffers.
        ///  It might be a better strategy to create a brand new BVH if bounds change drastically.
        ///
        ///  This function refits the whole tree after an arbitrary number of bounds have potentially been modified by
        ///  users (via getBoundsForModification()). If you only have a small number of bounds to update, it might be
        ///  more efficient to use setBounds() and partialRefit() instead.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_refit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBVH_refit_mut(PxBVH* self_);

        /// <summary>
        ///  Update single bounds.
        ///
        ///  This is an alternative to getBoundsForModification() / refit(). If you only have a small set of bounds to
        ///  update, it can be inefficient to call the refit() function, because it refits the whole BVH.
        ///
        ///  Instead, one can update individual bounds with this updateBounds() function. It sets the new bounds and
        ///  marks the corresponding BVH nodes for partial refit. Once all the individual bounds have been updated,
        ///  call partialRefit() to only refit the subset of marked nodes.
        ///
        ///  true if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_updateBounds_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVH_updateBounds_mut(PxBVH* self_, uint boundsIndex, PxBounds3* newBounds);

        /// <summary>
        ///  Refits subset of marked nodes.
        ///
        ///  This is an alternative to the refit() function, to be called after updateBounds() calls.
        ///  See updateBounds() for details.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_partialRefit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBVH_partialRefit_mut(PxBVH* self_);

        /// <summary>
        ///  Generic BVH traversal function.
        ///
        ///  This can be used to implement custom BVH traversal functions if provided ones are not enough.
        ///  In particular this can be used to visualize the tree's bounds.
        ///
        ///  false if query has been aborted
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH_traverse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVH_traverse(PxBVH* self_, PxBVHTraversalCallback* cb);

        [DllImport(__DllName, EntryPoint = "PxBVH_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxBVH_getConcreteTypeName(PxBVH* self_);

        /// <summary>
        ///  Constructor, initializes to a capsule with passed radius and half height.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCapsuleGeometry PxCapsuleGeometry_new(float radius_, float halfHeight_);

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid.
        ///
        ///  A valid capsule has radius &gt; 0, halfHeight &gt;= 0.
        ///  It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a capsule that has zero radius or height.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCapsuleGeometry_isValid(PxCapsuleGeometry* self_);

        /// <summary>
        ///  Returns the number of vertices.
        ///
        ///  Number of vertices.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getNbVertices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxConvexMesh_getNbVertices(PxConvexMesh* self_);

        /// <summary>
        ///  Returns the vertices.
        ///
        ///  Array of vertices.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getVertices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxConvexMesh_getVertices(PxConvexMesh* self_);

        /// <summary>
        ///  Returns the index buffer.
        ///
        ///  Index buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getIndexBuffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxConvexMesh_getIndexBuffer(PxConvexMesh* self_);

        /// <summary>
        ///  Returns the number of polygons.
        ///
        ///  Number of polygons.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getNbPolygons", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxConvexMesh_getNbPolygons(PxConvexMesh* self_);

        /// <summary>
        ///  Returns the polygon data.
        ///
        ///  True if success.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getPolygonData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxConvexMesh_getPolygonData(PxConvexMesh* self_, uint index, PxHullPolygon* data);

        /// <summary>
        ///  Decrements the reference count of a convex mesh and releases it if the new reference count is zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConvexMesh_release_mut(PxConvexMesh* self_);

        /// <summary>
        ///  Returns the mass properties of the mesh assuming unit density.
        ///
        ///  The following relationship holds between mass and volume:
        ///
        ///  mass = volume * density
        ///
        ///  The mass of a unit density mesh is equal to its volume, so this function returns the volume of the mesh.
        ///
        ///  Similarly, to obtain the localInertia of an identically shaped object with a uniform density of d, simply multiply the
        ///  localInertia of the unit density mesh by d.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getMassInformation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConvexMesh_getMassInformation(PxConvexMesh* self_, float* mass, PxMat33* localInertia, PxVec3* localCenterOfMass);

        /// <summary>
        ///  Returns the local-space (vertex space) AABB from the convex mesh.
        ///
        ///  local-space bounds
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getLocalBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxConvexMesh_getLocalBounds(PxConvexMesh* self_);

        /// <summary>
        ///  Returns the local-space Signed Distance Field for this mesh if it has one.
        ///
        ///  local-space SDF.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getSDF", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float* PxConvexMesh_getSDF(PxConvexMesh* self_);

        [DllImport(__DllName, EntryPoint = "PxConvexMesh_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxConvexMesh_getConcreteTypeName(PxConvexMesh* self_);

        /// <summary>
        ///  This method decides whether a convex mesh is gpu compatible. If the total number of vertices are more than 64 or any number of vertices in a polygon is more than 32, or
        ///  convex hull data was not cooked with GPU data enabled during cooking or was loaded from a serialized collection, the convex hull is incompatible with GPU collision detection. Otherwise
        ///  it is compatible.
        ///
        ///  True if the convex hull is gpu compatible
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMesh_isGpuCompatible", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxConvexMesh_isGpuCompatible(PxConvexMesh* self_);

        /// <summary>
        ///  Constructor initializes to identity scale.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshScale_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMeshScale PxMeshScale_new();

        /// <summary>
        ///  Constructor from scalar.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshScale_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMeshScale PxMeshScale_new_1(float r);

        /// <summary>
        ///  Constructor to initialize to arbitrary scale and identity scale rotation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshScale_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMeshScale PxMeshScale_new_2(PxVec3* s);

        /// <summary>
        ///  Constructor to initialize to arbitrary scaling.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshScale_new_3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMeshScale PxMeshScale_new_3(PxVec3* s, PxQuat* r);

        /// <summary>
        ///  Returns true if the scaling is an identity transformation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshScale_isIdentity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxMeshScale_isIdentity(PxMeshScale* self_);

        /// <summary>
        ///  Returns the inverse of this scaling transformation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshScale_getInverse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMeshScale PxMeshScale_getInverse(PxMeshScale* self_);

        /// <summary>
        ///  Converts this transformation to a 3x3 matrix representation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshScale_toMat33", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMeshScale_toMat33(PxMeshScale* self_);

        /// <summary>
        ///  Returns true if combination of negative scale components will cause the triangle normal to flip. The SDK will flip the normals internally.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshScale_hasNegativeDeterminant", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxMeshScale_hasNegativeDeterminant(PxMeshScale* self_);

        [DllImport(__DllName, EntryPoint = "PxMeshScale_transform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxMeshScale_transform(PxMeshScale* self_, PxVec3* v);

        [DllImport(__DllName, EntryPoint = "PxMeshScale_isValidForTriangleMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxMeshScale_isValidForTriangleMesh(PxMeshScale* self_);

        [DllImport(__DllName, EntryPoint = "PxMeshScale_isValidForConvexMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxMeshScale_isValidForConvexMesh(PxMeshScale* self_);

        /// <summary>
        ///  Constructor. By default creates an empty object with a NULL mesh and identity scale.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMeshGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConvexMeshGeometry PxConvexMeshGeometry_new(PxConvexMesh* mesh, PxMeshScale* scaling, PxConvexMeshGeometryFlags flags);

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid for shape creation.
        ///
        ///  A valid convex mesh has a positive scale value in each direction (scale.x &gt; 0, scale.y &gt; 0, scale.z &gt; 0).
        ///  It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a convex that has zero extent in any direction.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMeshGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxConvexMeshGeometry_isValid(PxConvexMeshGeometry* self_);

        /// <summary>
        ///  Constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphereGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSphereGeometry PxSphereGeometry_new(float ir);

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid
        ///
        ///  A valid sphere has radius &gt; 0.
        ///  It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a sphere that has zero radius.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphereGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSphereGeometry_isValid(PxSphereGeometry* self_);

        /// <summary>
        ///  Constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlaneGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlaneGeometry PxPlaneGeometry_new();

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPlaneGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxPlaneGeometry_isValid(PxPlaneGeometry* self_);

        /// <summary>
        ///  Constructor. By default creates an empty object with a NULL mesh and identity scale.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMeshGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangleMeshGeometry PxTriangleMeshGeometry_new(PxTriangleMesh* mesh, PxMeshScale* scaling, PxMeshGeometryFlags flags);

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid for shape creation.
        ///
        ///  A valid triangle mesh has a positive scale value in each direction (scale.scale.x &gt; 0, scale.scale.y &gt; 0, scale.scale.z &gt; 0).
        ///  It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a triangle mesh that has zero extents in any direction.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMeshGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTriangleMeshGeometry_isValid(PxTriangleMeshGeometry* self_);

        /// <summary>
        ///  Constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightFieldGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightFieldGeometry PxHeightFieldGeometry_new(PxHeightField* hf, PxMeshGeometryFlags flags, float heightScale_, float rowScale_, float columnScale_);

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid
        ///
        ///  A valid height field has a positive scale value in each direction (heightScale &gt; 0, rowScale &gt; 0, columnScale &gt; 0).
        ///  It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a height field that has zero extents in any direction.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightFieldGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxHeightFieldGeometry_isValid(PxHeightFieldGeometry* self_);

        /// <summary>
        ///  Default constructor.
        ///
        ///  Creates an empty object with no particles.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleSystemGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxParticleSystemGeometry PxParticleSystemGeometry_new();

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid for shape creation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleSystemGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxParticleSystemGeometry_isValid(PxParticleSystemGeometry* self_);

        /// <summary>
        ///  Default constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHairSystemGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHairSystemGeometry PxHairSystemGeometry_new();

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid for shape creation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHairSystemGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxHairSystemGeometry_isValid(PxHairSystemGeometry* self_);

        /// <summary>
        ///  Constructor. By default creates an empty object with a NULL mesh and identity scale.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMeshGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMeshGeometry PxTetrahedronMeshGeometry_new(PxTetrahedronMesh* mesh);

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid for shape creation.
        ///
        ///  A valid tetrahedron mesh has a positive scale value in each direction (scale.scale.x &gt; 0, scale.scale.y &gt; 0, scale.scale.z &gt; 0).
        ///  It is illegal to call PxRigidActor::createShape and PxPhysics::createShape with a tetrahedron mesh that has zero extents in any direction.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMeshGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTetrahedronMeshGeometry_isValid(PxTetrahedronMeshGeometry* self_);

        [DllImport(__DllName, EntryPoint = "PxQueryHit_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryHit PxQueryHit_new();

        [DllImport(__DllName, EntryPoint = "PxLocationHit_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxLocationHit PxLocationHit_new();

        /// <summary>
        ///  For raycast hits: true for shapes overlapping with raycast origin.
        ///
        ///  For sweep hits: true for shapes overlapping at zero sweep distance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLocationHit_hadInitialOverlap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxLocationHit_hadInitialOverlap(PxLocationHit* self_);

        [DllImport(__DllName, EntryPoint = "PxGeomRaycastHit_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeomRaycastHit PxGeomRaycastHit_new();

        [DllImport(__DllName, EntryPoint = "PxGeomOverlapHit_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeomOverlapHit PxGeomOverlapHit_new();

        [DllImport(__DllName, EntryPoint = "PxGeomSweepHit_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeomSweepHit PxGeomSweepHit_new();

        [DllImport(__DllName, EntryPoint = "PxGeomIndexPair_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeomIndexPair PxGeomIndexPair_new();

        [DllImport(__DllName, EntryPoint = "PxGeomIndexPair_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeomIndexPair PxGeomIndexPair_new_1(uint _id0, uint _id1);

        /// <summary>
        ///  For internal use
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCustomGeometry_getUniqueID", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxCustomGeometry_getUniqueID();

        /// <summary>
        ///  Default constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryType_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomGeometryType PxCustomGeometryType_new();

        /// <summary>
        ///  Invalid type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryType_INVALID", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomGeometryType PxCustomGeometryType_INVALID();

        /// <summary>
        ///  Return custom type. The type purpose is for user to differentiate custom geometries. Not used by PhysX.
        ///
        ///  Unique ID of a custom geometry type.
        ///
        ///  User should use DECLARE_CUSTOM_GEOMETRY_TYPE and IMPLEMENT_CUSTOM_GEOMETRY_TYPE intead of overwriting this function.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryCallbacks_getCustomType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomGeometryType PxCustomGeometryCallbacks_getCustomType(PxCustomGeometryCallbacks* self_);

        /// <summary>
        ///  Return local bounds.
        ///
        ///  Bounding box in the geometry local space.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryCallbacks_getLocalBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxCustomGeometryCallbacks_getLocalBounds(PxCustomGeometryCallbacks* self_, PxGeometry* geometry);

        /// <summary>
        ///  Raycast. Cast a ray against the geometry in given pose.
        ///
        ///  Number of hits.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryCallbacks_raycast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCustomGeometryCallbacks_raycast(PxCustomGeometryCallbacks* self_, PxVec3* origin, PxVec3* unitDir, PxGeometry* geom, PxTransform* pose, float maxDist, PxHitFlags hitFlags, uint maxHits, PxGeomRaycastHit* rayHits, uint stride, PxQueryThreadContext* threadContext);

        /// <summary>
        ///  Overlap. Test if geometries overlap.
        ///
        ///  True if there is overlap. False otherwise.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryCallbacks_overlap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCustomGeometryCallbacks_overlap(PxCustomGeometryCallbacks* self_, PxGeometry* geom0, PxTransform* pose0, PxGeometry* geom1, PxTransform* pose1, PxQueryThreadContext* threadContext);

        /// <summary>
        ///  Sweep. Sweep one geometry against the other.
        ///
        ///  True if there is hit. False otherwise.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryCallbacks_sweep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCustomGeometryCallbacks_sweep(PxCustomGeometryCallbacks* self_, PxVec3* unitDir, float maxDist, PxGeometry* geom0, PxTransform* pose0, PxGeometry* geom1, PxTransform* pose1, PxGeomSweepHit* sweepHit, PxHitFlags hitFlags, float inflation, PxQueryThreadContext* threadContext);

        /// <summary>
        ///  Compute custom geometry mass properties. For geometries usable with dynamic rigidbodies.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryCallbacks_computeMassProperties", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCustomGeometryCallbacks_computeMassProperties(PxCustomGeometryCallbacks* self_, PxGeometry* geometry, PxMassProperties* massProperties);

        /// <summary>
        ///  Compatible with PhysX's PCM feature. Allows to optimize contact generation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometryCallbacks_usePersistentContactManifold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCustomGeometryCallbacks_usePersistentContactManifold(PxCustomGeometryCallbacks* self_, PxGeometry* geometry, float* breakingThreshold);

        [DllImport(__DllName, EntryPoint = "PxCustomGeometryCallbacks_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCustomGeometryCallbacks_delete(PxCustomGeometryCallbacks* self_);

        /// <summary>
        ///  Default constructor.
        ///
        ///  Creates an empty object with a NULL callbacks pointer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometry_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomGeometry PxCustomGeometry_new();

        /// <summary>
        ///  Constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometry_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomGeometry PxCustomGeometry_new_1(PxCustomGeometryCallbacks* _callbacks);

        /// <summary>
        ///  Returns true if the geometry is valid.
        ///
        ///  True if the current settings are valid for shape creation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometry_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCustomGeometry_isValid(PxCustomGeometry* self_);

        /// <summary>
        ///  Returns the custom type of the custom geometry.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomGeometry_getCustomType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomGeometryType PxCustomGeometry_getCustomType(PxCustomGeometry* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_getType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeometryType PxGeometryHolder_getType(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_any_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeometry* PxGeometryHolder_any_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_any", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeometry* PxGeometryHolder_any(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_sphere_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSphereGeometry* PxGeometryHolder_sphere_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_sphere", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSphereGeometry* PxGeometryHolder_sphere(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_plane_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlaneGeometry* PxGeometryHolder_plane_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_plane", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPlaneGeometry* PxGeometryHolder_plane(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_capsule_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCapsuleGeometry* PxGeometryHolder_capsule_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_capsule", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCapsuleGeometry* PxGeometryHolder_capsule(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_box_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBoxGeometry* PxGeometryHolder_box_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_box", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBoxGeometry* PxGeometryHolder_box(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_convexMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConvexMeshGeometry* PxGeometryHolder_convexMesh_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_convexMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConvexMeshGeometry* PxGeometryHolder_convexMesh(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_tetMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMeshGeometry* PxGeometryHolder_tetMesh_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_tetMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMeshGeometry* PxGeometryHolder_tetMesh(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_triangleMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangleMeshGeometry* PxGeometryHolder_triangleMesh_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_triangleMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangleMeshGeometry* PxGeometryHolder_triangleMesh(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_heightField_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightFieldGeometry* PxGeometryHolder_heightField_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_heightField", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightFieldGeometry* PxGeometryHolder_heightField(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_particleSystem_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxParticleSystemGeometry* PxGeometryHolder_particleSystem_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_particleSystem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxParticleSystemGeometry* PxGeometryHolder_particleSystem(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_hairSystem_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHairSystemGeometry* PxGeometryHolder_hairSystem_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_hairSystem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHairSystemGeometry* PxGeometryHolder_hairSystem(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_custom_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomGeometry* PxGeometryHolder_custom_mut(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_custom", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomGeometry* PxGeometryHolder_custom(PxGeometryHolder* self_);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_storeAny_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxGeometryHolder_storeAny_mut(PxGeometryHolder* self_, PxGeometry* geometry);

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeometryHolder PxGeometryHolder_new();

        [DllImport(__DllName, EntryPoint = "PxGeometryHolder_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeometryHolder PxGeometryHolder_new_1(PxGeometry* geometry);

        /// <summary>
        ///  Raycast test against a geometry object.
        ///
        ///  All geometry types are supported except PxParticleSystemGeometry, PxTetrahedronMeshGeometry and PxHairSystemGeometry.
        ///
        ///  Number of hits between the ray and the geometry object
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGeometryQuery_raycast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxGeometryQuery_raycast(PxVec3* origin, PxVec3* unitDir, PxGeometry* geom, PxTransform* pose, float maxDist, PxHitFlags hitFlags, uint maxHits, PxGeomRaycastHit* rayHits, uint stride, PxGeometryQueryFlags queryFlags, PxQueryThreadContext* threadContext);

        /// <summary>
        ///  Overlap test for two geometry objects.
        ///
        ///  All combinations are supported except:
        ///
        ///  PxPlaneGeometry vs. {PxPlaneGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
        ///
        ///  PxTriangleMeshGeometry vs. PxHeightFieldGeometry
        ///
        ///  PxHeightFieldGeometry vs. PxHeightFieldGeometry
        ///
        ///  Anything involving PxParticleSystemGeometry, PxTetrahedronMeshGeometry or PxHairSystemGeometry.
        ///
        ///  True if the two geometry objects overlap
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGeometryQuery_overlap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxGeometryQuery_overlap(PxGeometry* geom0, PxTransform* pose0, PxGeometry* geom1, PxTransform* pose1, PxGeometryQueryFlags queryFlags, PxQueryThreadContext* threadContext);

        /// <summary>
        ///  Sweep a specified geometry object in space and test for collision with a given object.
        ///
        ///  The following combinations are supported.
        ///
        ///  PxSphereGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
        ///
        ///  PxCapsuleGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
        ///
        ///  PxBoxGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
        ///
        ///  PxConvexMeshGeometry vs. {PxSphereGeometry, PxPlaneGeometry, PxCapsuleGeometry, PxBoxGeometry, PxConvexMeshGeometry, PxTriangleMeshGeometry, PxHeightFieldGeometry}
        ///
        ///  True if the swept geometry object geom0 hits the object geom1
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGeometryQuery_sweep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxGeometryQuery_sweep(PxVec3* unitDir, float maxDist, PxGeometry* geom0, PxTransform* pose0, PxGeometry* geom1, PxTransform* pose1, PxGeomSweepHit* sweepHit, PxHitFlags hitFlags, float inflation, PxGeometryQueryFlags queryFlags, PxQueryThreadContext* threadContext);

        /// <summary>
        ///  Compute minimum translational distance (MTD) between two geometry objects.
        ///
        ///  All combinations of geom objects are supported except:
        ///  - plane/plane
        ///  - plane/mesh
        ///  - plane/heightfield
        ///  - mesh/mesh
        ///  - mesh/heightfield
        ///  - heightfield/heightfield
        ///  - anything involving PxParticleSystemGeometry, PxTetrahedronMeshGeometry or PxHairSystemGeometry
        ///
        ///  The function returns a unit vector ('direction') and a penetration depth ('depth').
        ///
        ///  The depenetration vector D = direction * depth should be applied to the first object, to
        ///  get out of the second object.
        ///
        ///  Returned depth should always be positive or null.
        ///
        ///  If objects do not overlap, the function can not compute the MTD and returns false.
        ///
        ///  True if the MTD has successfully been computed, i.e. if objects do overlap.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGeometryQuery_computePenetration", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxGeometryQuery_computePenetration(PxVec3* direction, float* depth, PxGeometry* geom0, PxTransform* pose0, PxGeometry* geom1, PxTransform* pose1, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Computes distance between a point and a geometry object.
        ///
        ///  Currently supported geometry objects: box, sphere, capsule, convex, mesh.
        ///
        ///  For meshes, only the BVH34 midphase data-structure is supported.
        ///
        ///  Square distance between the point and the geom object, or 0.0 if the point is inside the object, or -1.0 if an error occured (geometry type is not supported, or invalid pose)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGeometryQuery_pointDistance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxGeometryQuery_pointDistance(PxVec3* point, PxGeometry* geom, PxTransform* pose, PxVec3* closestPoint, uint* closestIndex, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  computes the bounds for a geometry object
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGeometryQuery_computeGeomBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxGeometryQuery_computeGeomBounds(PxBounds3* bounds, PxGeometry* geom, PxTransform* pose, float offset, float inflation, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Checks if provided geometry is valid.
        ///
        ///  True if geometry is valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGeometryQuery_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxGeometryQuery_isValid(PxGeometry* geom);

        [DllImport(__DllName, EntryPoint = "PxHeightFieldSample_tessFlag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte PxHeightFieldSample_tessFlag(PxHeightFieldSample* self_);

        [DllImport(__DllName, EntryPoint = "PxHeightFieldSample_setTessFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxHeightFieldSample_setTessFlag_mut(PxHeightFieldSample* self_);

        [DllImport(__DllName, EntryPoint = "PxHeightFieldSample_clearTessFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxHeightFieldSample_clearTessFlag_mut(PxHeightFieldSample* self_);

        /// <summary>
        ///  Decrements the reference count of a height field and releases it if the new reference count is zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxHeightField_release_mut(PxHeightField* self_);

        /// <summary>
        ///  Writes out the sample data array.
        ///
        ///  The user provides destBufferSize bytes storage at destBuffer.
        ///  The data is formatted and arranged as PxHeightFieldDesc.samples.
        ///
        ///  The number of bytes written.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_saveCells", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxHeightField_saveCells(PxHeightField* self_, void* destBuffer, uint destBufferSize);

        /// <summary>
        ///  Replaces a rectangular subfield in the sample data array.
        ///
        ///  The user provides the description of a rectangular subfield in subfieldDesc.
        ///  The data is formatted and arranged as PxHeightFieldDesc.samples.
        ///
        ///  True on success, false on failure. Failure can occur due to format mismatch.
        ///
        ///  Modified samples are constrained to the same height quantization range as the original heightfield.
        ///  Source samples that are out of range of target heightfield will be clipped with no error.
        ///  PhysX does not keep a mapping from the heightfield to heightfield shapes that reference it.
        ///  Call PxShape::setGeometry on each shape which references the height field, to ensure that internal data structures are updated to reflect the new geometry.
        ///  Please note that PxShape::setGeometry does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_modifySamples_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxHeightField_modifySamples_mut(PxHeightField* self_, int startCol, int startRow, PxHeightFieldDesc* subfieldDesc, [MarshalAs(UnmanagedType.U1)] bool shrinkBounds);

        /// <summary>
        ///  Retrieves the number of sample rows in the samples array.
        ///
        ///  The number of sample rows in the samples array.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getNbRows", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxHeightField_getNbRows(PxHeightField* self_);

        /// <summary>
        ///  Retrieves the number of sample columns in the samples array.
        ///
        ///  The number of sample columns in the samples array.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getNbColumns", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxHeightField_getNbColumns(PxHeightField* self_);

        /// <summary>
        ///  Retrieves the format of the sample data.
        ///
        ///  The format of the sample data.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getFormat", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightFieldFormat PxHeightField_getFormat(PxHeightField* self_);

        /// <summary>
        ///  Retrieves the offset in bytes between consecutive samples in the array.
        ///
        ///  The offset in bytes between consecutive samples in the array.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getSampleStride", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxHeightField_getSampleStride(PxHeightField* self_);

        /// <summary>
        ///  Retrieves the convex edge threshold.
        ///
        ///  The convex edge threshold.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getConvexEdgeThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxHeightField_getConvexEdgeThreshold(PxHeightField* self_);

        /// <summary>
        ///  Retrieves the flags bits, combined from values of the enum ::PxHeightFieldFlag.
        ///
        ///  The flags bits, combined from values of the enum ::PxHeightFieldFlag.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightFieldFlags PxHeightField_getFlags(PxHeightField* self_);

        /// <summary>
        ///  Retrieves the height at the given coordinates in grid space.
        ///
        ///  The height at the given coordinates or 0 if the coordinates are out of range.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getHeight", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxHeightField_getHeight(PxHeightField* self_, float x, float z);

        /// <summary>
        ///  Returns material table index of given triangle
        ///
        ///  This function takes a post cooking triangle index.
        ///
        ///  Material table index, or 0xffff if no per-triangle materials are used
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getTriangleMaterialIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort PxHeightField_getTriangleMaterialIndex(PxHeightField* self_, uint triangleIndex);

        /// <summary>
        ///  Returns a triangle face normal for a given triangle index
        ///
        ///  This function takes a post cooking triangle index.
        ///
        ///  Triangle normal for a given triangle index
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getTriangleNormal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxHeightField_getTriangleNormal(PxHeightField* self_, uint triangleIndex);

        /// <summary>
        ///  Returns heightfield sample of given row and column
        ///
        ///  Heightfield sample
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getSample", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightFieldSample* PxHeightField_getSample(PxHeightField* self_, uint row, uint column);

        /// <summary>
        ///  Returns the number of times the heightfield data has been modified
        ///
        ///  This method returns the number of times modifySamples has been called on this heightfield, so that code that has
        ///  retained state that depends on the heightfield can efficiently determine whether it has been modified.
        ///
        ///  the number of times the heightfield sample data has been modified.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightField_getTimestamp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxHeightField_getTimestamp(PxHeightField* self_);

        [DllImport(__DllName, EntryPoint = "PxHeightField_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxHeightField_getConcreteTypeName(PxHeightField* self_);

        /// <summary>
        ///  Constructor sets to default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightFieldDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightFieldDesc PxHeightFieldDesc_new();

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightFieldDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxHeightFieldDesc_setToDefault_mut(PxHeightFieldDesc* self_);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  True if the current settings are valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxHeightFieldDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxHeightFieldDesc_isValid(PxHeightFieldDesc* self_);

        /// <summary>
        ///  Retrieves triangle data from a triangle ID.
        ///
        ///  This function can be used together with [`findOverlapTriangleMesh`]() to retrieve triangle properties.
        ///
        ///  This function will flip the triangle normal whenever triGeom.scale.hasNegativeDeterminant() is true.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshQuery_getTriangle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMeshQuery_getTriangle(PxTriangleMeshGeometry* triGeom, PxTransform* transform, uint triangleIndex, PxTriangle* triangle, uint* vertexIndices, uint* adjacencyIndices);

        /// <summary>
        ///  Retrieves triangle data from a triangle ID.
        ///
        ///  This function can be used together with [`findOverlapHeightField`]() to retrieve triangle properties.
        ///
        ///  This function will flip the triangle normal whenever triGeom.scale.hasNegativeDeterminant() is true.
        ///
        ///  TriangleIndex is an index used in internal format, which does have an index out of the bounds in last row.
        ///  To traverse all tri indices in the HF, the following code can be applied:
        ///  for (PxU32 row = 0; row
        ///  &lt;
        ///  (nbRows - 1); row++)
        ///  {
        ///  for (PxU32 col = 0; col
        ///  &lt;
        ///  (nbCols - 1); col++)
        ///  {
        ///  for (PxU32 k = 0; k
        ///  &lt;
        ///  2; k++)
        ///  {
        ///  const PxU32 triIndex = 2 * (row*nbCols + col) + k;
        ///  ....
        ///  }
        ///  }
        ///  }
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshQuery_getTriangle_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMeshQuery_getTriangle_1(PxHeightFieldGeometry* hfGeom, PxTransform* transform, uint triangleIndex, PxTriangle* triangle, uint* vertexIndices, uint* adjacencyIndices);

        /// <summary>
        ///  Find the mesh triangles which touch the specified geometry object.
        ///
        ///  For mesh-vs-mesh overlap tests, please use the specialized function below.
        ///
        ///  Returned triangle indices can be used with [`getTriangle`]() to retrieve the triangle properties.
        ///
        ///  Number of overlaps found, i.e. number of elements written to the results buffer
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshQuery_findOverlapTriangleMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxMeshQuery_findOverlapTriangleMesh(PxGeometry* geom, PxTransform* geomPose, PxTriangleMeshGeometry* meshGeom, PxTransform* meshPose, uint* results, uint maxResults, uint startIndex, bool* overflow, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Find the height field triangles which touch the specified geometry object.
        ///
        ///  Returned triangle indices can be used with [`getTriangle`]() to retrieve the triangle properties.
        ///
        ///  Number of overlaps found, i.e. number of elements written to the results buffer
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshQuery_findOverlapHeightField", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxMeshQuery_findOverlapHeightField(PxGeometry* geom, PxTransform* geomPose, PxHeightFieldGeometry* hfGeom, PxTransform* hfPose, uint* results, uint maxResults, uint startIndex, bool* overflow, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Sweep a specified geometry object in space and test for collision with a set of given triangles.
        ///
        ///  This function simply sweeps input geometry against each input triangle, in the order they are given.
        ///  This is an O(N) operation with N = number of input triangles. It does not use any particular acceleration structure.
        ///
        ///  True if the swept geometry object hits the specified triangles
        ///
        ///  Only the following geometry types are currently supported: PxSphereGeometry, PxCapsuleGeometry, PxBoxGeometry
        ///
        ///  If a shape from the scene is already overlapping with the query shape in its starting position, the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.
        ///
        ///  This function returns a single closest hit across all the input triangles. Multiple hits are not supported.
        ///
        ///  Supported hitFlags are PxHitFlag::eDEFAULT, PxHitFlag::eASSUME_NO_INITIAL_OVERLAP, PxHitFlag::ePRECISE_SWEEP, PxHitFlag::eMESH_BOTH_SIDES, PxHitFlag::eMESH_ANY.
        ///
        ///  ePOSITION is only defined when there is no initial overlap (sweepHit.hadInitialOverlap() == false)
        ///
        ///  The returned normal for initially overlapping sweeps is set to -unitDir.
        ///
        ///  Otherwise the returned normal is the front normal of the triangle even if PxHitFlag::eMESH_BOTH_SIDES is set.
        ///
        ///  The returned PxGeomSweepHit::faceIndex parameter will hold the index of the hit triangle in input array, i.e. the range is [0; triangleCount). For initially overlapping sweeps, this is the index of overlapping triangle.
        ///
        ///  The inflation parameter is not compatible with PxHitFlag::ePRECISE_SWEEP.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshQuery_sweep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxMeshQuery_sweep(PxVec3* unitDir, float distance, PxGeometry* geom, PxTransform* pose, uint triangleCount, PxTriangle* triangles, PxGeomSweepHit* sweepHit, PxHitFlags hitFlags, uint* cachedIndex, float inflation, [MarshalAs(UnmanagedType.U1)] bool doubleSided, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  constructor sets to default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimpleTriangleMesh_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSimpleTriangleMesh PxSimpleTriangleMesh_new();

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimpleTriangleMesh_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimpleTriangleMesh_setToDefault_mut(PxSimpleTriangleMesh* self_);

        /// <summary>
        ///  returns true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimpleTriangleMesh_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSimpleTriangleMesh_isValid(PxSimpleTriangleMesh* self_);

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangle_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangle* PxTriangle_new_alloc();

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangle_new_alloc_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangle* PxTriangle_new_alloc_1(PxVec3* p0, PxVec3* p1, PxVec3* p2);

        /// <summary>
        ///  Destructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangle_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangle_delete(PxTriangle* self_);

        /// <summary>
        ///  Compute the normal of the Triangle.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangle_normal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangle_normal(PxTriangle* self_, PxVec3* _normal);

        /// <summary>
        ///  Compute the unnormalized normal of the triangle.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangle_denormalizedNormal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangle_denormalizedNormal(PxTriangle* self_, PxVec3* _normal);

        /// <summary>
        ///  Compute the area of the triangle.
        ///
        ///  Area of the triangle.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangle_area", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxTriangle_area(PxTriangle* self_);

        /// <summary>
        ///  Computes a point on the triangle from u and v barycentric coordinates.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangle_pointFromUV", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxTriangle_pointFromUV(PxTriangle* self_, float u, float v);

        [DllImport(__DllName, EntryPoint = "PxTrianglePadded_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTrianglePadded* PxTrianglePadded_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxTrianglePadded_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTrianglePadded_delete(PxTrianglePadded* self_);

        /// <summary>
        ///  Returns the number of vertices.
        ///
        ///  number of vertices
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getNbVertices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxTriangleMesh_getNbVertices(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns the vertices.
        ///
        ///  array of vertices
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getVertices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxTriangleMesh_getVertices(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns all mesh vertices for modification.
        ///
        ///  This function will return the vertices of the mesh so that their positions can be changed in place.
        ///  After modifying the vertices you must call refitBVH for the refitting to actually take place.
        ///  This function maintains the old mesh topology (triangle indices).
        ///
        ///  inplace vertex coordinates for each existing mesh vertex.
        ///
        ///  It is recommended to use this feature for scene queries only.
        ///
        ///  Size of array returned is equal to the number returned by getNbVertices().
        ///
        ///  This function operates on cooked vertex indices.
        ///
        ///  This means the index mapping and vertex count can be different from what was provided as an input to the cooking routine.
        ///
        ///  To achieve unchanged 1-to-1 index mapping with orignal mesh data (before cooking) please use the following cooking flags:
        ///
        ///  eWELD_VERTICES = 0, eDISABLE_CLEAN_MESH = 1.
        ///
        ///  It is also recommended to make sure that a call to validateTriangleMesh returns true if mesh cleaning is disabled.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getVerticesForModification_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxTriangleMesh_getVerticesForModification_mut(PxTriangleMesh* self_);

        /// <summary>
        ///  Refits BVH for mesh vertices.
        ///
        ///  This function will refit the mesh BVH to correctly enclose the new positions updated by getVerticesForModification.
        ///  Mesh BVH will not be reoptimized by this function so significantly different new positions will cause significantly reduced performance.
        ///
        ///  New bounds for the entire mesh.
        ///
        ///  For PxMeshMidPhase::eBVH34 trees the refit operation is only available on non-quantized trees (see PxBVH34MidphaseDesc::quantized)
        ///
        ///  PhysX does not keep a mapping from the mesh to mesh shapes that reference it.
        ///
        ///  Call PxShape::setGeometry on each shape which references the mesh, to ensure that internal data structures are updated to reflect the new geometry.
        ///
        ///  PxShape::setGeometry does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.
        ///
        ///  It is also recommended to make sure that a call to validateTriangleMesh returns true if mesh cleaning is disabled.
        ///
        ///  Active edges information will be lost during refit, the rigid body mesh contact generation might not perform as expected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_refitBVH_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxTriangleMesh_refitBVH_mut(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns the number of triangles.
        ///
        ///  number of triangles
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getNbTriangles", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxTriangleMesh_getNbTriangles(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns the triangle indices.
        ///
        ///  The indices can be 16 or 32bit depending on the number of triangles in the mesh.
        ///  Call getTriangleMeshFlags() to know if the indices are 16 or 32 bits.
        ///
        ///  The number of indices is the number of triangles * 3.
        ///
        ///  array of triangles
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getTriangles", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxTriangleMesh_getTriangles(PxTriangleMesh* self_);

        /// <summary>
        ///  Reads the PxTriangleMesh flags.
        ///
        ///  See the list of flags [`PxTriangleMeshFlag`]
        ///
        ///  The values of the PxTriangleMesh flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getTriangleMeshFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangleMeshFlags PxTriangleMesh_getTriangleMeshFlags(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns the triangle remapping table.
        ///
        ///  The triangles are internally sorted according to various criteria. Hence the internal triangle order
        ///  does not always match the original (user-defined) order. The remapping table helps finding the old
        ///  indices knowing the new ones:
        ///
        ///  remapTable[ internalTriangleIndex ] = originalTriangleIndex
        ///
        ///  the remapping table (or NULL if 'PxCookingParams::suppressTriangleMeshRemapTable' has been used)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getTrianglesRemap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint* PxTriangleMesh_getTrianglesRemap(PxTriangleMesh* self_);

        /// <summary>
        ///  Decrements the reference count of a triangle mesh and releases it if the new reference count is zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangleMesh_release_mut(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns material table index of given triangle
        ///
        ///  This function takes a post cooking triangle index.
        ///
        ///  Material table index, or 0xffff if no per-triangle materials are used
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getTriangleMaterialIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort PxTriangleMesh_getTriangleMaterialIndex(PxTriangleMesh* self_, uint triangleIndex);

        /// <summary>
        ///  Returns the local-space (vertex space) AABB from the triangle mesh.
        ///
        ///  local-space bounds
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getLocalBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxTriangleMesh_getLocalBounds(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns the local-space Signed Distance Field for this mesh if it has one.
        ///
        ///  local-space SDF.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getSDF", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float* PxTriangleMesh_getSDF(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns the resolution of the local-space dense SDF.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getSDFDimensions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangleMesh_getSDFDimensions(PxTriangleMesh* self_, uint* numX, uint* numY, uint* numZ);

        /// <summary>
        ///  Sets whether this mesh should be preferred for SDF projection.
        ///
        ///  By default, meshes are flagged as preferring projection and the decisions on which mesh to project is based on the triangle and vertex
        ///  count. The model with the fewer triangles is projected onto the SDF of the more detailed mesh.
        ///  If one of the meshes is set to prefer SDF projection (default) and the other is set to not prefer SDF projection, model flagged as
        ///  preferring SDF projection will be projected onto the model flagged as not preferring, regardless of the detail of the respective meshes.
        ///  Where both models are flagged as preferring no projection, the less detailed model will be projected as before.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_setPreferSDFProjection_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangleMesh_setPreferSDFProjection_mut(PxTriangleMesh* self_, [MarshalAs(UnmanagedType.U1)] bool preferProjection);

        /// <summary>
        ///  Returns whether this mesh prefers SDF projection.
        ///
        ///  whether this mesh prefers SDF projection.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getPreferSDFProjection", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTriangleMesh_getPreferSDFProjection(PxTriangleMesh* self_);

        /// <summary>
        ///  Returns the mass properties of the mesh assuming unit density.
        ///
        ///  The following relationship holds between mass and volume:
        ///
        ///  mass = volume * density
        ///
        ///  The mass of a unit density mesh is equal to its volume, so this function returns the volume of the mesh.
        ///
        ///  Similarly, to obtain the localInertia of an identically shaped object with a uniform density of d, simply multiply the
        ///  localInertia of the unit density mesh by d.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMesh_getMassInformation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangleMesh_getMassInformation(PxTriangleMesh* self_, float* mass, PxMat33* localInertia, PxVec3* localCenterOfMass);

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedron_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedron* PxTetrahedron_new_alloc();

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedron_new_alloc_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedron* PxTetrahedron_new_alloc_1(PxVec3* p0, PxVec3* p1, PxVec3* p2, PxVec3* p3);

        /// <summary>
        ///  Destructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedron_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTetrahedron_delete(PxTetrahedron* self_);

        /// <summary>
        ///  Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodyAuxData_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSoftBodyAuxData_release_mut(PxSoftBodyAuxData* self_);

        /// <summary>
        ///  Returns the number of vertices.
        ///
        ///  number of vertices
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMesh_getNbVertices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxTetrahedronMesh_getNbVertices(PxTetrahedronMesh* self_);

        /// <summary>
        ///  Returns the vertices
        ///
        ///  array of vertices
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMesh_getVertices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxTetrahedronMesh_getVertices(PxTetrahedronMesh* self_);

        /// <summary>
        ///  Returns the number of tetrahedrons.
        ///
        ///  number of tetrahedrons
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMesh_getNbTetrahedrons", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxTetrahedronMesh_getNbTetrahedrons(PxTetrahedronMesh* self_);

        /// <summary>
        ///  Returns the tetrahedron indices.
        ///
        ///  The indices can be 16 or 32bit depending on the number of tetrahedrons in the mesh.
        ///  Call getTetrahedronMeshFlags() to know if the indices are 16 or 32 bits.
        ///
        ///  The number of indices is the number of tetrahedrons * 4.
        ///
        ///  array of tetrahedrons
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMesh_getTetrahedrons", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxTetrahedronMesh_getTetrahedrons(PxTetrahedronMesh* self_);

        /// <summary>
        ///  Reads the PxTetrahedronMesh flags.
        ///
        ///  See the list of flags [`PxTetrahedronMeshFlags`]
        ///
        ///  The values of the PxTetrahedronMesh flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMesh_getTetrahedronMeshFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMeshFlags PxTetrahedronMesh_getTetrahedronMeshFlags(PxTetrahedronMesh* self_);

        /// <summary>
        ///  Returns the tetrahedra remapping table.
        ///
        ///  The tetrahedra are internally sorted according to various criteria. Hence the internal tetrahedron order
        ///  does not always match the original (user-defined) order. The remapping table helps finding the old
        ///  indices knowing the new ones:
        ///
        ///  remapTable[ internalTetrahedronIndex ] = originalTetrahedronIndex
        ///
        ///  the remapping table (or NULL if 'PxCookingParams::suppressTriangleMeshRemapTable' has been used)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMesh_getTetrahedraRemap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint* PxTetrahedronMesh_getTetrahedraRemap(PxTetrahedronMesh* self_);

        /// <summary>
        ///  Returns the local-space (vertex space) AABB from the tetrahedron mesh.
        ///
        ///  local-space bounds
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMesh_getLocalBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxTetrahedronMesh_getLocalBounds(PxTetrahedronMesh* self_);

        /// <summary>
        ///  Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMesh_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTetrahedronMesh_release_mut(PxTetrahedronMesh* self_);

        /// <summary>
        ///  Const accecssor to the softbody's collision mesh.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodyMesh_getCollisionMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMesh* PxSoftBodyMesh_getCollisionMesh(PxSoftBodyMesh* self_);

        /// <summary>
        ///  Accecssor to the softbody's collision mesh.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodyMesh_getCollisionMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMesh* PxSoftBodyMesh_getCollisionMesh_mut(PxSoftBodyMesh* self_);

        /// <summary>
        ///  Const accessor to the softbody's simulation mesh.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodyMesh_getSimulationMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMesh* PxSoftBodyMesh_getSimulationMesh(PxSoftBodyMesh* self_);

        /// <summary>
        ///  Accecssor to the softbody's simulation mesh.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodyMesh_getSimulationMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMesh* PxSoftBodyMesh_getSimulationMesh_mut(PxSoftBodyMesh* self_);

        /// <summary>
        ///  Const accessor to the softbodies simulation state.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodyMesh_getSoftBodyAuxData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSoftBodyAuxData* PxSoftBodyMesh_getSoftBodyAuxData(PxSoftBodyMesh* self_);

        /// <summary>
        ///  Accessor to the softbody's auxilary data like mass and rest pose information
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodyMesh_getSoftBodyAuxData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSoftBodyAuxData* PxSoftBodyMesh_getSoftBodyAuxData_mut(PxSoftBodyMesh* self_);

        /// <summary>
        ///  Decrements the reference count of a tetrahedron mesh and releases it if the new reference count is zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodyMesh_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSoftBodyMesh_release_mut(PxSoftBodyMesh* self_);

        [DllImport(__DllName, EntryPoint = "PxCollisionMeshMappingData_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollisionMeshMappingData_release_mut(PxCollisionMeshMappingData* self_);

        [DllImport(__DllName, EntryPoint = "PxCollisionTetrahedronMeshData_getMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMeshData* PxCollisionTetrahedronMeshData_getMesh(PxCollisionTetrahedronMeshData* self_);

        [DllImport(__DllName, EntryPoint = "PxCollisionTetrahedronMeshData_getMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMeshData* PxCollisionTetrahedronMeshData_getMesh_mut(PxCollisionTetrahedronMeshData* self_);

        [DllImport(__DllName, EntryPoint = "PxCollisionTetrahedronMeshData_getData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSoftBodyCollisionData* PxCollisionTetrahedronMeshData_getData(PxCollisionTetrahedronMeshData* self_);

        [DllImport(__DllName, EntryPoint = "PxCollisionTetrahedronMeshData_getData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSoftBodyCollisionData* PxCollisionTetrahedronMeshData_getData_mut(PxCollisionTetrahedronMeshData* self_);

        [DllImport(__DllName, EntryPoint = "PxCollisionTetrahedronMeshData_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCollisionTetrahedronMeshData_release_mut(PxCollisionTetrahedronMeshData* self_);

        [DllImport(__DllName, EntryPoint = "PxSimulationTetrahedronMeshData_getMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMeshData* PxSimulationTetrahedronMeshData_getMesh_mut(PxSimulationTetrahedronMeshData* self_);

        [DllImport(__DllName, EntryPoint = "PxSimulationTetrahedronMeshData_getData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSoftBodySimulationData* PxSimulationTetrahedronMeshData_getData_mut(PxSimulationTetrahedronMeshData* self_);

        [DllImport(__DllName, EntryPoint = "PxSimulationTetrahedronMeshData_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationTetrahedronMeshData_release_mut(PxSimulationTetrahedronMeshData* self_);

        /// <summary>
        ///  Deletes the actor.
        ///
        ///  Do not keep a reference to the deleted instance.
        ///
        ///  If the actor belongs to a [`PxAggregate`] object, it is automatically removed from the aggregate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxActor_release_mut(PxActor* self_);

        /// <summary>
        ///  Retrieves the type of actor.
        ///
        ///  The actor type of the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_getType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxActorType PxActor_getType(PxActor* self_);

        /// <summary>
        ///  Retrieves the scene which this actor belongs to.
        ///
        ///  Owner Scene. NULL if not part of a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_getScene", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxScene* PxActor_getScene(PxActor* self_);

        /// <summary>
        ///  Sets a name string for the object that can be retrieved with getName().
        ///
        ///  This is for debugging and is not used by the SDK. The string is not copied by the SDK,
        ///  only the pointer is stored.
        ///
        ///  Default:
        ///  NULL
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_setName_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxActor_setName_mut(PxActor* self_, byte* name);

        /// <summary>
        ///  Retrieves the name string set with setName().
        ///
        ///  Name string associated with object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_getName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxActor_getName(PxActor* self_);

        /// <summary>
        ///  Retrieves the axis aligned bounding box enclosing the actor.
        ///
        ///  It is not allowed to use this method while the simulation is running (except during PxScene::collide(),
        ///  in PxContactModifyCallback or in contact report callbacks).
        ///
        ///  The actor's bounding box.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_getWorldBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxActor_getWorldBounds(PxActor* self_, float inflation);

        /// <summary>
        ///  Raises or clears a particular actor flag.
        ///
        ///  See the list of flags [`PxActorFlag`]
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_setActorFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxActor_setActorFlag_mut(PxActor* self_, PxActorFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Sets the actor flags.
        ///
        ///  See the list of flags [`PxActorFlag`]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_setActorFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxActor_setActorFlags_mut(PxActor* self_, PxActorFlags inFlags);

        /// <summary>
        ///  Reads the PxActor flags.
        ///
        ///  See the list of flags [`PxActorFlag`]
        ///
        ///  The values of the PxActor flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_getActorFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxActorFlags PxActor_getActorFlags(PxActor* self_);

        /// <summary>
        ///  Assigns dynamic actors a dominance group identifier.
        ///
        ///  PxDominanceGroup is a 5 bit group identifier (legal range from 0 to 31).
        ///
        ///  The PxScene::setDominanceGroupPair() lets you set certain behaviors for pairs of dominance groups.
        ///  By default every dynamic actor is created in group 0.
        ///
        ///  Default:
        ///  0
        ///
        ///  Sleeping:
        ///  Changing the dominance group does
        ///  NOT
        ///  wake the actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_setDominanceGroup_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxActor_setDominanceGroup_mut(PxActor* self_, byte dominanceGroup);

        /// <summary>
        ///  Retrieves the value set with setDominanceGroup().
        ///
        ///  The dominance group of this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_getDominanceGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte PxActor_getDominanceGroup(PxActor* self_);

        /// <summary>
        ///  Sets the owner client of an actor.
        ///
        ///  This cannot be done once the actor has been placed into a scene.
        ///
        ///  Default:
        ///  PX_DEFAULT_CLIENT
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_setOwnerClient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxActor_setOwnerClient_mut(PxActor* self_, byte inClient);

        /// <summary>
        ///  Returns the owner client that was specified at creation time.
        ///
        ///  This value cannot be changed once the object is placed into the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_getOwnerClient", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte PxActor_getOwnerClient(PxActor* self_);

        /// <summary>
        ///  Retrieves the aggregate the actor might be a part of.
        ///
        ///  The aggregate the actor is a part of, or NULL if the actor does not belong to an aggregate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxActor_getAggregate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAggregate* PxActor_getAggregate(PxActor* self_);

        [DllImport(__DllName, EntryPoint = "phys_PxGetAggregateFilterHint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxGetAggregateFilterHint(PxAggregateType type_, [MarshalAs(UnmanagedType.U1)] bool enableSelfCollision);

        [DllImport(__DllName, EntryPoint = "phys_PxGetAggregateSelfCollisionBit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxGetAggregateSelfCollisionBit(uint hint);

        [DllImport(__DllName, EntryPoint = "phys_PxGetAggregateType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAggregateType phys_PxGetAggregateType(uint hint);

        /// <summary>
        ///  Deletes the aggregate object.
        ///
        ///  Deleting the PxAggregate object does not delete the aggregated actors. If the PxAggregate object
        ///  belongs to a scene, the aggregated actors are automatically re-inserted in that scene. If you intend
        ///  to delete both the PxAggregate and its actors, it is best to release the actors first, then release
        ///  the PxAggregate when it is empty.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAggregate_release_mut(PxAggregate* self_);

        /// <summary>
        ///  Adds an actor to the aggregate object.
        ///
        ///  A warning is output if the total number of actors is reached, or if the incoming actor already belongs
        ///  to an aggregate.
        ///
        ///  If the aggregate belongs to a scene, adding an actor to the aggregate also adds the actor to that scene.
        ///
        ///  If the actor already belongs to a scene, a warning is output and the call is ignored. You need to remove
        ///  the actor from the scene first, before adding it to the aggregate.
        ///
        ///  When a BVH is provided the actor shapes are grouped together.
        ///  The scene query pruning structure inside PhysX SDK will store/update one
        ///  bound per actor. The scene queries against such an actor will query actor
        ///  bounds and then make a local space query against the provided BVH, which is in actor's local space.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_addActor_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxAggregate_addActor_mut(PxAggregate* self_, PxActor* actor, PxBVH* bvh);

        /// <summary>
        ///  Removes an actor from the aggregate object.
        ///
        ///  A warning is output if the incoming actor does not belong to the aggregate. Otherwise the actor is
        ///  removed from the aggregate. If the aggregate belongs to a scene, the actor is reinserted in that
        ///  scene. If you intend to delete the actor, it is best to call [`PxActor::release`]() directly. That way
        ///  the actor will be automatically removed from its aggregate (if any) and not reinserted in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_removeActor_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxAggregate_removeActor_mut(PxAggregate* self_, PxActor* actor);

        /// <summary>
        ///  Adds an articulation to the aggregate object.
        ///
        ///  A warning is output if the total number of actors is reached (every articulation link counts as an actor),
        ///  or if the incoming articulation already belongs to an aggregate.
        ///
        ///  If the aggregate belongs to a scene, adding an articulation to the aggregate also adds the articulation to that scene.
        ///
        ///  If the articulation already belongs to a scene, a warning is output and the call is ignored. You need to remove
        ///  the articulation from the scene first, before adding it to the aggregate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_addArticulation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxAggregate_addArticulation_mut(PxAggregate* self_, PxArticulationReducedCoordinate* articulation);

        /// <summary>
        ///  Removes an articulation from the aggregate object.
        ///
        ///  A warning is output if the incoming articulation does not belong to the aggregate. Otherwise the articulation is
        ///  removed from the aggregate. If the aggregate belongs to a scene, the articulation is reinserted in that
        ///  scene. If you intend to delete the articulation, it is best to call [`PxArticulationReducedCoordinate::release`]() directly. That way
        ///  the articulation will be automatically removed from its aggregate (if any) and not reinserted in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_removeArticulation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxAggregate_removeArticulation_mut(PxAggregate* self_, PxArticulationReducedCoordinate* articulation);

        /// <summary>
        ///  Returns the number of actors contained in the aggregate.
        ///
        ///  You can use [`getActors`]() to retrieve the actor pointers.
        ///
        ///  Number of actors contained in the aggregate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_getNbActors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxAggregate_getNbActors(PxAggregate* self_);

        /// <summary>
        ///  Retrieves max amount of shapes that can be contained in the aggregate.
        ///
        ///  Max shape size.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_getMaxNbShapes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxAggregate_getMaxNbShapes(PxAggregate* self_);

        /// <summary>
        ///  Retrieve all actors contained in the aggregate.
        ///
        ///  You can retrieve the number of actor pointers by calling [`getNbActors`]()
        ///
        ///  Number of actor pointers written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_getActors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxAggregate_getActors(PxAggregate* self_, PxActor** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Retrieves the scene which this aggregate belongs to.
        ///
        ///  Owner Scene. NULL if not part of a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_getScene_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxScene* PxAggregate_getScene_mut(PxAggregate* self_);

        /// <summary>
        ///  Retrieves aggregate's self-collision flag.
        ///
        ///  self-collision flag
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAggregate_getSelfCollision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxAggregate_getSelfCollision(PxAggregate* self_);

        [DllImport(__DllName, EntryPoint = "PxAggregate_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxAggregate_getConcreteTypeName(PxAggregate* self_);

        [DllImport(__DllName, EntryPoint = "PxConstraintInvMassScale_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConstraintInvMassScale PxConstraintInvMassScale_new();

        [DllImport(__DllName, EntryPoint = "PxConstraintInvMassScale_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConstraintInvMassScale PxConstraintInvMassScale_new_1(float lin0, float ang0, float lin1, float ang1);

        /// <summary>
        ///  Visualize joint frames
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintVisualizer_visualizeJointFrames_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintVisualizer_visualizeJointFrames_mut(PxConstraintVisualizer* self_, PxTransform* parent, PxTransform* child);

        /// <summary>
        ///  Visualize joint linear limit
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintVisualizer_visualizeLinearLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintVisualizer_visualizeLinearLimit_mut(PxConstraintVisualizer* self_, PxTransform* t0, PxTransform* t1, float value, [MarshalAs(UnmanagedType.U1)] bool active);

        /// <summary>
        ///  Visualize joint angular limit
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintVisualizer_visualizeAngularLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintVisualizer_visualizeAngularLimit_mut(PxConstraintVisualizer* self_, PxTransform* t0, float lower, float upper, [MarshalAs(UnmanagedType.U1)] bool active);

        /// <summary>
        ///  Visualize limit cone
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintVisualizer_visualizeLimitCone_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintVisualizer_visualizeLimitCone_mut(PxConstraintVisualizer* self_, PxTransform* t, float tanQSwingY, float tanQSwingZ, [MarshalAs(UnmanagedType.U1)] bool active);

        /// <summary>
        ///  Visualize joint double cone
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintVisualizer_visualizeDoubleCone_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintVisualizer_visualizeDoubleCone_mut(PxConstraintVisualizer* self_, PxTransform* t, float angle, [MarshalAs(UnmanagedType.U1)] bool active);

        /// <summary>
        ///  Visualize line
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintVisualizer_visualizeLine_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintVisualizer_visualizeLine_mut(PxConstraintVisualizer* self_, PxVec3* p0, PxVec3* p1, uint color);

        /// <summary>
        ///  Pre-simulation data preparation
        ///  when the constraint is marked dirty, this function is called at the start of the simulation
        ///  step for the SDK to copy the constraint data block.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintConnector_prepareData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxConstraintConnector_prepareData_mut(PxConstraintConnector* self_);

        /// <summary>
        ///  Constraint release callback
        ///
        ///  When the SDK deletes a PxConstraint object this function is called by the SDK. In general
        ///  custom constraints should not be deleted directly by applications: rather, the constraint
        ///  should respond to a release() request by calling PxConstraint::release(), then wait for
        ///  this call to release its own resources.
        ///
        ///  This function is also called when a PxConstraint object is deleted on cleanup due to
        ///  destruction of the PxPhysics object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintConnector_onConstraintRelease_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintConnector_onConstraintRelease_mut(PxConstraintConnector* self_);

        /// <summary>
        ///  Center-of-mass shift callback
        ///
        ///  This function is called by the SDK when the CoM of one of the actors is moved. Since the
        ///  API specifies constraint positions relative to actors, and the constraint shader functions
        ///  are supplied with coordinates relative to bodies, some synchronization is usually required
        ///  when the application moves an object's center of mass.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintConnector_onComShift_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintConnector_onComShift_mut(PxConstraintConnector* self_, uint actor);

        /// <summary>
        ///  Origin shift callback
        ///
        ///  This function is called by the SDK when the scene origin gets shifted and allows to adjust
        ///  custom data which contains world space transforms.
        ///
        ///  If the adjustments affect constraint shader data, it is necessary to call PxConstraint::markDirty()
        ///  to make sure that the data gets synced at the beginning of the next simulation step.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintConnector_onOriginShift_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintConnector_onOriginShift_mut(PxConstraintConnector* self_, PxVec3* shift);

        /// <summary>
        ///  Obtain a reference to a PxBase interface if the constraint has one.
        ///
        ///  If the constraint does not implement the PxBase interface, it should return NULL.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintConnector_getSerializable_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBase* PxConstraintConnector_getSerializable_mut(PxConstraintConnector* self_);

        /// <summary>
        ///  Obtain the pointer to the constraint's constant data
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintConnector_getConstantBlock", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxConstraintConnector_getConstantBlock(PxConstraintConnector* self_);

        /// <summary>
        ///  Let the connector know it has been connected to a constraint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintConnector_connectToConstraint_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintConnector_connectToConstraint_mut(PxConstraintConnector* self_, PxConstraint* anon_param0);

        /// <summary>
        ///  virtual destructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintConnector_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintConnector_delete(PxConstraintConnector* self_);

        [DllImport(__DllName, EntryPoint = "PxSolverBody_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSolverBody PxSolverBody_new();

        [DllImport(__DllName, EntryPoint = "PxSolverBodyData_projectVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxSolverBodyData_projectVelocity(PxSolverBodyData* self_, PxVec3* lin, PxVec3* ang);

        [DllImport(__DllName, EntryPoint = "PxSolverConstraintPrepDesc_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSolverConstraintPrepDesc_delete(PxSolverConstraintPrepDesc* self_);

        /// <summary>
        ///  Allocates constraint data. It is the application's responsibility to release this memory after PxSolveConstraints has completed.
        ///
        ///  The allocated memory. This address must be 16-byte aligned.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintAllocator_reserveConstraintData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxConstraintAllocator_reserveConstraintData_mut(PxConstraintAllocator* self_, uint byteSize);

        /// <summary>
        ///  Allocates friction data. Friction data can be retained by the application for a given pair and provided as an input to PxSolverContactDesc to improve simulation stability.
        ///  It is the application's responsibility to release this memory. If this memory is released, the application should ensure it does not pass pointers to this memory to PxSolverContactDesc.
        ///
        ///  The allocated memory. This address must be 4-byte aligned.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraintAllocator_reserveFrictionData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxConstraintAllocator_reserveFrictionData_mut(PxConstraintAllocator* self_, uint byteSize);

        [DllImport(__DllName, EntryPoint = "PxConstraintAllocator_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraintAllocator_delete(PxConstraintAllocator* self_);

        [DllImport(__DllName, EntryPoint = "PxArticulationLimit_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLimit PxArticulationLimit_new();

        [DllImport(__DllName, EntryPoint = "PxArticulationLimit_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLimit PxArticulationLimit_new_1(float low_, float high_);

        [DllImport(__DllName, EntryPoint = "PxArticulationDrive_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationDrive PxArticulationDrive_new();

        [DllImport(__DllName, EntryPoint = "PxArticulationDrive_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationDrive PxArticulationDrive_new_1(float stiffness_, float damping_, float maxForce_, PxArticulationDriveType driveType_);

        [DllImport(__DllName, EntryPoint = "PxTGSSolverBodyVel_projectVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxTGSSolverBodyVel_projectVelocity(PxTGSSolverBodyVel* self_, PxVec3* lin, PxVec3* ang);

        [DllImport(__DllName, EntryPoint = "PxTGSSolverBodyData_projectVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxTGSSolverBodyData_projectVelocity(PxTGSSolverBodyData* self_, PxVec3* linear, PxVec3* angular);

        [DllImport(__DllName, EntryPoint = "PxTGSSolverConstraintPrepDesc_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTGSSolverConstraintPrepDesc_delete(PxTGSSolverConstraintPrepDesc* self_);

        /// <summary>
        ///  Sets the spring rest length for the sub-tendon from the root to this leaf attachment.
        ///
        ///  Setting this on non-leaf attachments has no effect.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_setRestLength_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationAttachment_setRestLength_mut(PxArticulationAttachment* self_, float restLength);

        /// <summary>
        ///  Gets the spring rest length for the sub-tendon from the root to this leaf attachment.
        ///
        ///  The rest length.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_getRestLength", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationAttachment_getRestLength(PxArticulationAttachment* self_);

        /// <summary>
        ///  Sets the low and high limit on the length of the sub-tendon from the root to this leaf attachment.
        ///
        ///  Setting this on non-leaf attachments has no effect.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_setLimitParameters_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationAttachment_setLimitParameters_mut(PxArticulationAttachment* self_, PxArticulationTendonLimit* parameters);

        /// <summary>
        ///  Gets the low and high limit on the length of the sub-tendon from the root to this leaf attachment.
        ///
        ///  Struct with the low and high limit.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_getLimitParameters", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationTendonLimit PxArticulationAttachment_getLimitParameters(PxArticulationAttachment* self_);

        /// <summary>
        ///  Sets the attachment's relative offset in the link actor frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_setRelativeOffset_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationAttachment_setRelativeOffset_mut(PxArticulationAttachment* self_, PxVec3* offset);

        /// <summary>
        ///  Gets the attachment's relative offset in the link actor frame.
        ///
        ///  The relative offset in the link actor frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_getRelativeOffset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxArticulationAttachment_getRelativeOffset(PxArticulationAttachment* self_);

        /// <summary>
        ///  Sets the attachment coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_setCoefficient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationAttachment_setCoefficient_mut(PxArticulationAttachment* self_, float coefficient);

        /// <summary>
        ///  Gets the attachment coefficient.
        ///
        ///  The scale that the distance between this attachment and its parent is multiplied by when summing up the spatial tendon's length.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_getCoefficient", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationAttachment_getCoefficient(PxArticulationAttachment* self_);

        /// <summary>
        ///  Gets the articulation link.
        ///
        ///  The articulation link that this attachment is attached to.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_getLink", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLink* PxArticulationAttachment_getLink(PxArticulationAttachment* self_);

        /// <summary>
        ///  Gets the parent attachment.
        ///
        ///  The parent attachment.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_getParent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationAttachment* PxArticulationAttachment_getParent(PxArticulationAttachment* self_);

        /// <summary>
        ///  Indicates that this attachment is a leaf, and thus defines a sub-tendon from the root to this attachment.
        ///
        ///  True: This attachment is a leaf and has zero children; False: Not a leaf.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_isLeaf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxArticulationAttachment_isLeaf(PxArticulationAttachment* self_);

        /// <summary>
        ///  Gets the spatial tendon that the attachment is a part of.
        ///
        ///  The tendon.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_getTendon", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationSpatialTendon* PxArticulationAttachment_getTendon(PxArticulationAttachment* self_);

        /// <summary>
        ///  Releases the attachment.
        ///
        ///  Releasing the attachment is not allowed while the articulation is in a scene. In order to
        ///  release the attachment, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationAttachment_release_mut(PxArticulationAttachment* self_);

        /// <summary>
        ///  Returns the string name of the dynamic type.
        ///
        ///  The string name.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationAttachment_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxArticulationAttachment_getConcreteTypeName(PxArticulationAttachment* self_);

        /// <summary>
        ///  Sets the tendon joint coefficient.
        ///
        ///  RecipCoefficient is commonly expected to be 1/coefficient, but it can be set to different values to tune behavior; for example, zero can be used to
        ///  have a joint axis only participate in the length computation of the tendon, but not have any tendon force applied to it.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendonJoint_setCoefficient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationTendonJoint_setCoefficient_mut(PxArticulationTendonJoint* self_, PxArticulationAxis axis, float coefficient, float recipCoefficient);

        /// <summary>
        ///  Gets the tendon joint coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendonJoint_getCoefficient", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationTendonJoint_getCoefficient(PxArticulationTendonJoint* self_, PxArticulationAxis* axis, float* coefficient, float* recipCoefficient);

        /// <summary>
        ///  Gets the articulation link.
        ///
        ///  The articulation link (and its incoming joint in particular) that this tendon joint is associated with.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendonJoint_getLink", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLink* PxArticulationTendonJoint_getLink(PxArticulationTendonJoint* self_);

        /// <summary>
        ///  Gets the parent tendon joint.
        ///
        ///  The parent tendon joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendonJoint_getParent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationTendonJoint* PxArticulationTendonJoint_getParent(PxArticulationTendonJoint* self_);

        /// <summary>
        ///  Gets the tendon that the joint is a part of.
        ///
        ///  The tendon.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendonJoint_getTendon", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationFixedTendon* PxArticulationTendonJoint_getTendon(PxArticulationTendonJoint* self_);

        /// <summary>
        ///  Releases a tendon joint.
        ///
        ///  Releasing a tendon joint is not allowed while the articulation is in a scene. In order to
        ///  release the joint, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendonJoint_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationTendonJoint_release_mut(PxArticulationTendonJoint* self_);

        /// <summary>
        ///  Returns the string name of the dynamic type.
        ///
        ///  The string name.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendonJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxArticulationTendonJoint_getConcreteTypeName(PxArticulationTendonJoint* self_);

        /// <summary>
        ///  Sets the spring stiffness term acting on the tendon length.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_setStiffness_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationTendon_setStiffness_mut(PxArticulationTendon* self_, float stiffness);

        /// <summary>
        ///  Gets the spring stiffness of the tendon.
        ///
        ///  The spring stiffness.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_getStiffness", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationTendon_getStiffness(PxArticulationTendon* self_);

        /// <summary>
        ///  Sets the damping term acting both on the tendon length and tendon-length limits.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_setDamping_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationTendon_setDamping_mut(PxArticulationTendon* self_, float damping);

        /// <summary>
        ///  Gets the damping term acting both on the tendon length and tendon-length limits.
        ///
        ///  The damping term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_getDamping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationTendon_getDamping(PxArticulationTendon* self_);

        /// <summary>
        ///  Sets the limit stiffness term acting on the tendon's length limits.
        ///
        ///  For spatial tendons, this parameter applies to all its leaf attachments / sub-tendons.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_setLimitStiffness_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationTendon_setLimitStiffness_mut(PxArticulationTendon* self_, float stiffness);

        /// <summary>
        ///  Gets the limit stiffness term acting on the tendon's length limits.
        ///
        ///  For spatial tendons, this parameter applies to all its leaf attachments / sub-tendons.
        ///
        ///  The limit stiffness term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_getLimitStiffness", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationTendon_getLimitStiffness(PxArticulationTendon* self_);

        /// <summary>
        ///  Sets the length offset term for the tendon.
        ///
        ///  An offset defines an amount to be added to the accumulated length computed for the tendon. It allows the
        ///  application to actuate the tendon by shortening or lengthening it.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_setOffset_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationTendon_setOffset_mut(PxArticulationTendon* self_, float offset, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Gets the length offset term for the tendon.
        ///
        ///  The offset term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_getOffset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationTendon_getOffset(PxArticulationTendon* self_);

        /// <summary>
        ///  Gets the articulation that the tendon is a part of.
        ///
        ///  The articulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_getArticulation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationReducedCoordinate* PxArticulationTendon_getArticulation(PxArticulationTendon* self_);

        /// <summary>
        ///  Releases a tendon to remove it from the articulation and free its associated memory.
        ///
        ///  When an articulation is released, its attached tendons are automatically released.
        ///
        ///  Releasing a tendon is not allowed while the articulation is in a scene. In order to
        ///  release the tendon, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationTendon_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationTendon_release_mut(PxArticulationTendon* self_);

        /// <summary>
        ///  Creates an articulation attachment and adds it to the list of children in the parent attachment.
        ///
        ///  Creating an attachment is not allowed while the articulation is in a scene. In order to
        ///  add the attachment, remove and then re-add the articulation to the scene.
        ///
        ///  The newly-created attachment if creation was successful, otherwise a null pointer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSpatialTendon_createAttachment_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationAttachment* PxArticulationSpatialTendon_createAttachment_mut(PxArticulationSpatialTendon* self_, PxArticulationAttachment* parent, float coefficient, PxVec3 relativeOffset, PxArticulationLink* link);

        /// <summary>
        ///  Fills a user-provided buffer of attachment pointers with the set of attachments.
        ///
        ///  The number of attachments that were filled into the user buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSpatialTendon_getAttachments", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationSpatialTendon_getAttachments(PxArticulationSpatialTendon* self_, PxArticulationAttachment** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of attachments in the tendon.
        ///
        ///  The number of attachments.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSpatialTendon_getNbAttachments", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationSpatialTendon_getNbAttachments(PxArticulationSpatialTendon* self_);

        /// <summary>
        ///  Returns the string name of the dynamic type.
        ///
        ///  The string name.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSpatialTendon_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxArticulationSpatialTendon_getConcreteTypeName(PxArticulationSpatialTendon* self_);

        /// <summary>
        ///  Creates an articulation tendon joint and adds it to the list of children in the parent tendon joint.
        ///
        ///  Creating a tendon joint is not allowed while the articulation is in a scene. In order to
        ///  add the joint, remove and then re-add the articulation to the scene.
        ///
        ///  The newly-created tendon joint if creation was successful, otherwise a null pointer.
        ///
        ///  - The axis motion must not be configured as PxArticulationMotion::eLOCKED.
        ///  - The axis cannot be part of a fixed joint, i.e. joint configured as PxArticulationJointType::eFIX.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationFixedTendon_createTendonJoint_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationTendonJoint* PxArticulationFixedTendon_createTendonJoint_mut(PxArticulationFixedTendon* self_, PxArticulationTendonJoint* parent, PxArticulationAxis axis, float coefficient, float recipCoefficient, PxArticulationLink* link);

        /// <summary>
        ///  Fills a user-provided buffer of tendon-joint pointers with the set of tendon joints.
        ///
        ///  The number of tendon joints filled into the user buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationFixedTendon_getTendonJoints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationFixedTendon_getTendonJoints(PxArticulationFixedTendon* self_, PxArticulationTendonJoint** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of tendon joints in the tendon.
        ///
        ///  The number of tendon joints.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationFixedTendon_getNbTendonJoints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationFixedTendon_getNbTendonJoints(PxArticulationFixedTendon* self_);

        /// <summary>
        ///  Sets the spring rest length of the tendon.
        ///
        ///  The accumulated "length" of a fixed tendon is a linear combination of the joint axis positions that the tendon is
        ///  associated with, scaled by the respective tendon joints' coefficients. As such, when the joint positions of all
        ///  joints are zero, the accumulated length of a fixed tendon is zero.
        ///
        ///  The spring of the tendon is not exerting any force on the articulation when the rest length is equal to the
        ///  tendon's accumulated length plus the tendon offset.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationFixedTendon_setRestLength_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationFixedTendon_setRestLength_mut(PxArticulationFixedTendon* self_, float restLength);

        /// <summary>
        ///  Gets the spring rest length of the tendon.
        ///
        ///  The spring rest length of the tendon.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationFixedTendon_getRestLength", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationFixedTendon_getRestLength(PxArticulationFixedTendon* self_);

        /// <summary>
        ///  Sets the low and high limit on the length of the tendon.
        ///
        ///  The limits, together with the damping and limit stiffness parameters, act on the accumulated length of the tendon.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationFixedTendon_setLimitParameters_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationFixedTendon_setLimitParameters_mut(PxArticulationFixedTendon* self_, PxArticulationTendonLimit* parameter);

        /// <summary>
        ///  Gets the low and high limit on the length of the tendon.
        ///
        ///  Struct with the low and high limit.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationFixedTendon_getLimitParameters", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationTendonLimit PxArticulationFixedTendon_getLimitParameters(PxArticulationFixedTendon* self_);

        /// <summary>
        ///  Returns the string name of the dynamic type.
        ///
        ///  The string name.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationFixedTendon_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxArticulationFixedTendon_getConcreteTypeName(PxArticulationFixedTendon* self_);

        [DllImport(__DllName, EntryPoint = "PxArticulationCache_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationCache PxArticulationCache_new();

        /// <summary>
        ///  Releases an articulation cache.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationCache_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationCache_release_mut(PxArticulationCache* self_);

        /// <summary>
        ///  Releases the sensor.
        ///
        ///  Releasing a sensor is not allowed while the articulation is in a scene. In order to
        ///  release a sensor, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationSensor_release_mut(PxArticulationSensor* self_);

        /// <summary>
        ///  Returns the spatial force in the local frame of the sensor.
        ///
        ///  The spatial force.
        ///
        ///  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(),
        ///  and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_getForces", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSpatialForce PxArticulationSensor_getForces(PxArticulationSensor* self_);

        /// <summary>
        ///  Returns the relative pose between this sensor and the body frame of the link that the sensor is attached to.
        ///
        ///  The link body frame is at the center of mass and aligned with the principal axes of inertia, see PxRigidBody::getCMassLocalPose.
        ///
        ///  The transform link body frame -&gt; sensor frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_getRelativePose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxArticulationSensor_getRelativePose(PxArticulationSensor* self_);

        /// <summary>
        ///  Sets the relative pose between this sensor and the body frame of the link that the sensor is attached to.
        ///
        ///  The link body frame is at the center of mass and aligned with the principal axes of inertia, see PxRigidBody::getCMassLocalPose.
        ///
        ///  Setting the sensor relative pose is not allowed while the articulation is in a scene. In order to
        ///  set the pose, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_setRelativePose_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationSensor_setRelativePose_mut(PxArticulationSensor* self_, PxTransform* pose);

        /// <summary>
        ///  Returns the link that this sensor is attached to.
        ///
        ///  A pointer to the link.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_getLink", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLink* PxArticulationSensor_getLink(PxArticulationSensor* self_);

        /// <summary>
        ///  Returns the index of this sensor inside the articulation.
        ///
        ///  The return value is only valid for sensors attached to articulations that are in a scene.
        ///
        ///  The low-level index, or 0xFFFFFFFF if the articulation is not in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_getIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationSensor_getIndex(PxArticulationSensor* self_);

        /// <summary>
        ///  Returns the articulation that this sensor is part of.
        ///
        ///  A pointer to the articulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_getArticulation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationReducedCoordinate* PxArticulationSensor_getArticulation(PxArticulationSensor* self_);

        /// <summary>
        ///  Returns the sensor's flags.
        ///
        ///  The current set of flags of the sensor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_getFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationSensorFlags PxArticulationSensor_getFlags(PxArticulationSensor* self_);

        /// <summary>
        ///  Sets a flag of the sensor.
        ///
        ///  Setting the sensor flags is not allowed while the articulation is in a scene. In order to
        ///  set the flags, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_setFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationSensor_setFlag_mut(PxArticulationSensor* self_, PxArticulationSensorFlag flag, [MarshalAs(UnmanagedType.U1)] bool enabled);

        /// <summary>
        ///  Returns the string name of the dynamic type.
        ///
        ///  The string name.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationSensor_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxArticulationSensor_getConcreteTypeName(PxArticulationSensor* self_);

        /// <summary>
        ///  Returns the scene which this articulation belongs to.
        ///
        ///  Owner Scene. NULL if not part of a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getScene", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxScene* PxArticulationReducedCoordinate_getScene(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the solver iteration counts for the articulation.
        ///
        ///  The solver iteration count determines how accurately contacts, drives, and limits are resolved.
        ///  Setting a higher position iteration count may therefore help in scenarios where the articulation
        ///  is subject to many constraints; for example, a manipulator articulation with drives and joint limits
        ///  that is grasping objects, or several such articulations interacting through contacts. Other situations
        ///  where higher position iterations may improve simulation fidelity are: large mass ratios within the
        ///  articulation or between the articulation and an object in contact with it; or strong drives in the
        ///  articulation being used to manipulate a light object.
        ///
        ///  If intersecting bodies are being depenetrated too violently, increase the number of velocity
        ///  iterations. More velocity iterations will drive the relative exit velocity of the intersecting
        ///  objects closer to the correct value given the restitution.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setSolverIterationCounts_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setSolverIterationCounts_mut(PxArticulationReducedCoordinate* self_, uint minPositionIters, uint minVelocityIters);

        /// <summary>
        ///  Returns the solver iteration counts.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getSolverIterationCounts", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_getSolverIterationCounts(PxArticulationReducedCoordinate* self_, uint* minPositionIters, uint* minVelocityIters);

        /// <summary>
        ///  Returns true if this articulation is sleeping.
        ///
        ///  When an actor does not move for a period of time, it is no longer simulated in order to save time. This state
        ///  is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object,
        ///  or a sleep-affecting property is changed by the user, the entire sleep mechanism should be transparent to the user.
        ///
        ///  An articulation can only go to sleep if all links are ready for sleeping. An articulation is guaranteed to be awake
        ///  if at least one of the following holds:
        ///
        ///  The wake counter is positive (see [`setWakeCounter`]()).
        ///
        ///  The linear or angular velocity of any link is non-zero.
        ///
        ///  A non-zero force or torque has been applied to the articulation or any of its links.
        ///
        ///  If an articulation is sleeping, the following state is guaranteed:
        ///
        ///  The wake counter is zero.
        ///
        ///  The linear and angular velocity of all links is zero.
        ///
        ///  There is no force update pending.
        ///
        ///  When an articulation gets inserted into a scene, it will be considered asleep if all the points above hold, else it will
        ///  be treated as awake.
        ///
        ///  If an articulation is asleep after the call to [`PxScene::fetchResults`]() returns, it is guaranteed that the poses of the
        ///  links were not changed. You can use this information to avoid updating the transforms of associated objects.
        ///
        ///  True if the articulation is sleeping.
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation,
        ///  except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_isSleeping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxArticulationReducedCoordinate_isSleeping(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the mass-normalized energy threshold below which the articulation may go to sleep.
        ///
        ///  The articulation will sleep if the energy of each link is below this threshold.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setSleepThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setSleepThreshold_mut(PxArticulationReducedCoordinate* self_, float threshold);

        /// <summary>
        ///  Returns the mass-normalized energy below which the articulation may go to sleep.
        ///
        ///  The energy threshold for sleeping.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getSleepThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationReducedCoordinate_getSleepThreshold(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the mass-normalized kinetic energy threshold below which the articulation may participate in stabilization.
        ///
        ///  Articulations whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.
        ///
        ///  This value has no effect if PxSceneFlag::eENABLE_STABILIZATION was not enabled on the PxSceneDesc.
        ///
        ///  Default:
        ///  0.01 * PxTolerancesScale::speed * PxTolerancesScale::speed
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setStabilizationThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setStabilizationThreshold_mut(PxArticulationReducedCoordinate* self_, float threshold);

        /// <summary>
        ///  Returns the mass-normalized kinetic energy below which the articulation may participate in stabilization.
        ///
        ///  Articulations whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.
        ///
        ///  The energy threshold for participating in stabilization.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getStabilizationThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationReducedCoordinate_getStabilizationThreshold(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the wake counter for the articulation in seconds.
        ///
        ///  - The wake counter value determines the minimum amount of time until the articulation can be put to sleep.
        ///  - An articulation will not be put to sleep if the energy is above the specified threshold (see [`setSleepThreshold`]())
        ///  or if other awake objects are touching it.
        ///  - Passing in a positive value will wake up the articulation automatically.
        ///
        ///  Default:
        ///  0.4s (which corresponds to 20 frames for a time step of 0.02s)
        ///
        ///  This call may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setWakeCounter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setWakeCounter_mut(PxArticulationReducedCoordinate* self_, float wakeCounterValue);

        /// <summary>
        ///  Returns the wake counter of the articulation in seconds.
        ///
        ///  The wake counter of the articulation in seconds.
        ///
        ///  This call may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getWakeCounter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationReducedCoordinate_getWakeCounter(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Wakes up the articulation if it is sleeping.
        ///
        ///  - The articulation will get woken up and might cause other touching objects to wake up as well during the next simulation step.
        ///  - This will set the wake counter of the articulation to the value specified in [`PxSceneDesc::wakeCounterResetValue`].
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation,
        ///  except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_wakeUp_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_wakeUp_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Forces the articulation to sleep.
        ///
        ///  - The articulation will stay asleep during the next simulation step if not touched by another non-sleeping actor.
        ///  - This will set any applied force, the velocity, and the wake counter of all bodies in the articulation to zero.
        ///
        ///  This call may not be made during simulation, and may only be made on articulations that are in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_putToSleep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_putToSleep_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the limit on the magnitude of the linear velocity of the articulation's center of mass.
        ///
        ///  - The limit acts on the linear velocity of the entire articulation. The velocity is calculated from the total momentum
        ///  and the spatial inertia of the articulation.
        ///  - The limit only applies to floating-base articulations.
        ///  - A benefit of the COM velocity limit is that it is evenly applied to the whole articulation, which results in fewer visual
        ///  artifacts compared to link rigid-body damping or joint-velocity limits. However, these per-link or per-degree-of-freedom
        ///  limits may still help avoid numerical issues.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setMaxCOMLinearVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setMaxCOMLinearVelocity_mut(PxArticulationReducedCoordinate* self_, float maxLinearVelocity);

        /// <summary>
        ///  Gets the limit on the magnitude of the linear velocity of the articulation's center of mass.
        ///
        ///  The maximal linear velocity magnitude.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getMaxCOMLinearVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationReducedCoordinate_getMaxCOMLinearVelocity(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the limit on the magnitude of the angular velocity at the articulation's center of mass.
        ///
        ///  - The limit acts on the angular velocity of the entire articulation. The velocity is calculated from the total momentum
        ///  and the spatial inertia of the articulation.
        ///  - The limit only applies to floating-base articulations.
        ///  - A benefit of the COM velocity limit is that it is evenly applied to the whole articulation, which results in fewer visual
        ///  artifacts compared to link rigid-body damping or joint-velocity limits. However, these per-link or per-degree-of-freedom
        ///  limits may still help avoid numerical issues.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setMaxCOMAngularVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setMaxCOMAngularVelocity_mut(PxArticulationReducedCoordinate* self_, float maxAngularVelocity);

        /// <summary>
        ///  Gets the limit on the magnitude of the angular velocity at the articulation's center of mass.
        ///
        ///  The maximal angular velocity magnitude.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getMaxCOMAngularVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationReducedCoordinate_getMaxCOMAngularVelocity(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Adds a link to the articulation with default attribute values.
        ///
        ///  The new link, or NULL if the link cannot be created.
        ///
        ///  Creating a link is not allowed while the articulation is in a scene. In order to add a link,
        ///  remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_createLink_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLink* PxArticulationReducedCoordinate_createLink_mut(PxArticulationReducedCoordinate* self_, PxArticulationLink* parent, PxTransform* pose);

        /// <summary>
        ///  Releases the articulation, and all its links and corresponding joints.
        ///
        ///  Attached sensors and tendons are released automatically when the articulation is released.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_release_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the number of links in the articulation.
        ///
        ///  The number of links.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getNbLinks", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getNbLinks(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the set of links in the articulation in the order that they were added to the articulation using createLink.
        ///
        ///  The number of links written into the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getLinks", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getLinks(PxArticulationReducedCoordinate* self_, PxArticulationLink** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of shapes in the articulation.
        ///
        ///  The number of shapes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getNbShapes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getNbShapes(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets a name string for the articulation that can be retrieved with getName().
        ///
        ///  This is for debugging and is not used by the SDK. The string is not copied by the SDK,
        ///  only the pointer is stored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setName_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setName_mut(PxArticulationReducedCoordinate* self_, byte* name);

        /// <summary>
        ///  Returns the name string set with setName().
        ///
        ///  Name string associated with the articulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxArticulationReducedCoordinate_getName(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the axis-aligned bounding box enclosing the articulation.
        ///
        ///  The articulation's bounding box.
        ///
        ///  It is not allowed to use this method while the simulation is running, except in a split simulation
        ///  during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getWorldBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxArticulationReducedCoordinate_getWorldBounds(PxArticulationReducedCoordinate* self_, float inflation);

        /// <summary>
        ///  Returns the aggregate the articulation might be a part of.
        ///
        ///  The aggregate the articulation is a part of, or NULL if the articulation does not belong to an aggregate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getAggregate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAggregate* PxArticulationReducedCoordinate_getAggregate(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets flags on the articulation.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setArticulationFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setArticulationFlags_mut(PxArticulationReducedCoordinate* self_, PxArticulationFlags flags);

        /// <summary>
        ///  Raises or clears a flag on the articulation.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setArticulationFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setArticulationFlag_mut(PxArticulationReducedCoordinate* self_, PxArticulationFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Returns the articulation's flags.
        ///
        ///  The flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getArticulationFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationFlags PxArticulationReducedCoordinate_getArticulationFlags(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the total number of joint degrees-of-freedom (DOFs) of the articulation.
        ///
        ///  - The six DOFs of the base of a floating-base articulation are not included in this count.
        ///  - Example: Both a fixed-base and a floating-base double-pendulum with two revolute joints will have getDofs() == 2.
        ///  - The return value is only valid for articulations that are in a scene.
        ///
        ///  The number of joint DOFs, or 0xFFFFFFFF if the articulation is not in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getDofs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getDofs(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Creates an articulation cache that can be used to read and write internal articulation data.
        ///
        ///  - When the structure of the articulation changes (e.g. adding a link or sensor) after the cache was created,
        ///  the cache needs to be released and recreated.
        ///  - Free the memory allocated for the cache by calling the release() method on the cache.
        ///  - Caches can only be created by articulations that are in a scene.
        ///
        ///  The cache, or NULL if the articulation is not in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_createCache", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationCache* PxArticulationReducedCoordinate_createCache(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the size of the articulation cache in bytes.
        ///
        ///  - The size does not include: the user-allocated memory for the coefficient matrix or lambda values;
        ///  the scratch-related memory/members; and the cache version. See comment in [`PxArticulationCache`].
        ///  - The return value is only valid for articulations that are in a scene.
        ///
        ///  The byte size of the cache, or 0xFFFFFFFF if the articulation is not in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getCacheDataSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getCacheDataSize(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Zeroes all data in the articulation cache, except user-provided and scratch memory, and cache version.
        ///
        ///  This call may only be made on articulations that are in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_zeroCache", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_zeroCache(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache);

        /// <summary>
        ///  Applies the data in the cache to the articulation.
        ///
        ///  This call wakes the articulation if it is sleeping, and the autowake parameter is true (default) or:
        ///  - a nonzero joint velocity is applied or
        ///  - a nonzero joint force is applied or
        ///  - a nonzero root velocity is applied
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_applyCache_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_applyCache_mut(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache, PxArticulationCacheFlags flags, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Copies internal data of the articulation to the cache.
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_copyInternalStateToCache", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_copyInternalStateToCache(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache, PxArticulationCacheFlags flags);

        /// <summary>
        ///  Converts maximal-coordinate joint DOF data to reduced coordinates.
        ///
        ///  - Indexing into the maximal joint DOF data is via the link's low-level index minus 1 (the root link is not included).
        ///  - The reduced-coordinate data follows the cache indexing convention, see PxArticulationCache::jointVelocity.
        ///
        ///  The articulation must be in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_packJointData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_packJointData(PxArticulationReducedCoordinate* self_, float* maximum, float* reduced);

        /// <summary>
        ///  Converts reduced-coordinate joint DOF data to maximal coordinates.
        ///
        ///  - Indexing into the maximal joint DOF data is via the link's low-level index minus 1 (the root link is not included).
        ///  - The reduced-coordinate data follows the cache indexing convention, see PxArticulationCache::jointVelocity.
        ///
        ///  The articulation must be in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_unpackJointData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_unpackJointData(PxArticulationReducedCoordinate* self_, float* reduced, float* maximum);

        /// <summary>
        ///  Prepares common articulation data based on articulation pose for inverse dynamics calculations.
        ///
        ///  Usage:
        ///  1. Set articulation pose (joint positions and base transform) via articulation cache and applyCache().
        ///  1. Call commonInit.
        ///  1. Call inverse dynamics computation method.
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_commonInit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_commonInit(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Computes the joint DOF forces required to counteract gravitational forces for the given articulation pose.
        ///
        ///  - Inputs - Articulation pose (joint positions + base transform).
        ///  - Outputs - Joint forces to counteract gravity (in cache).
        ///
        ///  - The joint forces returned are determined purely by gravity for the articulation in the current joint and base pose, and joints at rest;
        ///  i.e. external forces, joint velocities, and joint accelerations are set to zero. Joint drives are also not considered in the computation.
        ///  - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeGeneralizedGravityForce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_computeGeneralizedGravityForce(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache);

        /// <summary>
        ///  Computes the joint DOF forces required to counteract Coriolis and centrifugal forces for the given articulation state.
        ///
        ///  - Inputs - Articulation state (joint positions and velocities (in cache), and base transform and spatial velocity).
        ///  - Outputs - Joint forces to counteract Coriolis and centrifugal forces (in cache).
        ///
        ///  - The joint forces returned are determined purely by the articulation's state; i.e. external forces, gravity, and joint accelerations are set to zero.
        ///  Joint drives and potential damping terms, such as link angular or linear damping, or joint friction, are also not considered in the computation.
        ///  - Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache().
        ///  - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_computeCoriolisAndCentrifugalForce(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache);

        /// <summary>
        ///  Computes the joint DOF forces required to counteract external spatial forces applied to articulation links.
        ///
        ///  - Inputs - External forces on links (in cache), articulation pose (joint positions + base transform).
        ///  - Outputs - Joint forces to counteract the external forces (in cache).
        ///
        ///  - Only the external spatial forces provided in the cache and the articulation pose are considered in the computation.
        ///  - The external spatial forces are with respect to the links' centers of mass, and not the actor's origin.
        ///  - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeGeneralizedExternalForce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_computeGeneralizedExternalForce(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache);

        /// <summary>
        ///  Computes the joint accelerations for the given articulation state and joint forces.
        ///
        ///  - Inputs - Joint forces (in cache) and articulation state (joint positions and velocities (in cache), and base transform and spatial velocity).
        ///  - Outputs - Joint accelerations (in cache).
        ///
        ///  - The computation includes Coriolis terms and gravity. However, joint drives and potential damping terms are not considered in the computation
        ///  (for example, linear link damping or joint friction).
        ///  - Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache().
        ///  - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeJointAcceleration", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_computeJointAcceleration(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache);

        /// <summary>
        ///  Computes the joint forces for the given articulation state and joint accelerations, not considering gravity.
        ///
        ///  - Inputs - Joint accelerations (in cache) and articulation state (joint positions and velocities (in cache), and base transform and spatial velocity).
        ///  - Outputs - Joint forces (in cache).
        ///
        ///  - The computation includes Coriolis terms. However, joint drives and potential damping terms are not considered in the computation
        ///  (for example, linear link damping or joint friction).
        ///  - Prior to the computation, update/set the base spatial velocity with PxArticulationCache::rootLinkData and applyCache().
        ///  - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeJointForce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_computeJointForce(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache);

        /// <summary>
        ///  Compute the dense Jacobian for the articulation in world space, including the DOFs of a potentially floating base.
        ///
        ///  This computes the dense representation of an inherently sparse matrix. Multiplication with this matrix maps
        ///  joint space velocities to world-space linear and angular (i.e. spatial) velocities of the centers of mass of the links.
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeDenseJacobian", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_computeDenseJacobian(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache, uint* nRows, uint* nCols);

        /// <summary>
        ///  Computes the coefficient matrix for contact forces.
        ///
        ///  - The matrix dimension is getCoefficientMatrixSize() = getDofs() * getNbLoopJoints(), and the DOF (column) indexing follows the internal DOF order, see PxArticulationCache::jointVelocity.
        ///  - Each column in the matrix is the joint forces effected by a contact based on impulse strength 1.
        ///  - The user must allocate memory for PxArticulationCache::coefficientMatrix where the required size of the PxReal array is equal to getCoefficientMatrixSize().
        ///  - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeCoefficientMatrix", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_computeCoefficientMatrix(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache);

        /// <summary>
        ///  Computes the lambda values when the test impulse is 1.
        ///
        ///  - The user must allocate memory for PxArticulationCache::lambda where the required size of the PxReal array is equal to getNbLoopJoints().
        ///  - commonInit() must be called before the computation, and after setting the articulation pose via applyCache().
        ///
        ///  True if convergence was achieved within maxIter; False if convergence was not achieved or the operation failed otherwise.
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeLambda", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxArticulationReducedCoordinate_computeLambda(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache, PxArticulationCache* initialState, float* jointTorque, uint maxIter);

        /// <summary>
        ///  Compute the joint-space inertia matrix that maps joint accelerations to joint forces: forces = M * accelerations.
        ///
        ///  - Inputs - Articulation pose (joint positions and base transform).
        ///  - Outputs - Mass matrix (in cache).
        ///
        ///  commonInit() must be called before the computation, and after setting the articulation pose via applyCache().
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_computeGeneralizedMassMatrix", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_computeGeneralizedMassMatrix(PxArticulationReducedCoordinate* self_, PxArticulationCache* cache);

        /// <summary>
        ///  Adds a loop joint to the articulation system for inverse dynamics.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_addLoopJoint_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_addLoopJoint_mut(PxArticulationReducedCoordinate* self_, PxConstraint* joint);

        /// <summary>
        ///  Removes a loop joint from the articulation for inverse dynamics.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_removeLoopJoint_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_removeLoopJoint_mut(PxArticulationReducedCoordinate* self_, PxConstraint* joint);

        /// <summary>
        ///  Returns the number of loop joints in the articulation for inverse dynamics.
        ///
        ///  The number of loop joints.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getNbLoopJoints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getNbLoopJoints(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the set of loop constraints (i.e. joints) in the articulation.
        ///
        ///  The number of constraints written into the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getLoopJoints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getLoopJoints(PxArticulationReducedCoordinate* self_, PxConstraint** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the required size of the coefficient matrix in the articulation.
        ///
        ///  Size of the coefficient matrix (equal to getDofs() * getNbLoopJoints()).
        ///
        ///  This call may only be made on articulations that are in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getCoefficientMatrixSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getCoefficientMatrixSize(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the root link transform (world to actor frame).
        ///
        ///  - For performance, prefer PxArticulationCache::rootLinkData to set the root link transform in a batch articulation state update.
        ///  - Use updateKinematic() after all state updates to the articulation via non-cache API such as this method,
        ///  in order to update link states for the next simulation frame or querying.
        ///
        ///  This call may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setRootGlobalPose_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setRootGlobalPose_mut(PxArticulationReducedCoordinate* self_, PxTransform* pose, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Returns the root link transform (world to actor frame).
        ///
        ///  For performance, prefer PxArticulationCache::rootLinkData to get the root link transform in a batch query.
        ///
        ///  The root link transform.
        ///
        ///  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(),
        ///  and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getRootGlobalPose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxArticulationReducedCoordinate_getRootGlobalPose(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the root link linear center-of-mass velocity.
        ///
        ///  - The linear velocity is with respect to the link's center of mass and not the actor frame origin.
        ///  - For performance, prefer PxArticulationCache::rootLinkData to set the root link velocity in a batch articulation state update.
        ///  - The articulation is woken up if the input velocity is nonzero (ignoring autowake) and the articulation is in a scene.
        ///  - Use updateKinematic() after all state updates to the articulation via non-cache API such as this method,
        ///  in order to update link states for the next simulation frame or querying.
        ///
        ///  This call may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setRootLinearVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setRootLinearVelocity_mut(PxArticulationReducedCoordinate* self_, PxVec3* linearVelocity, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Gets the root link center-of-mass linear velocity.
        ///
        ///  - The linear velocity is with respect to the link's center of mass and not the actor frame origin.
        ///  - For performance, prefer PxArticulationCache::rootLinkData to get the root link velocity in a batch query.
        ///
        ///  The root link center-of-mass linear velocity.
        ///
        ///  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(),
        ///  and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getRootLinearVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxArticulationReducedCoordinate_getRootLinearVelocity(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Sets the root link angular velocity.
        ///
        ///  - For performance, prefer PxArticulationCache::rootLinkData to set the root link velocity in a batch articulation state update.
        ///  - The articulation is woken up if the input velocity is nonzero (ignoring autowake) and the articulation is in a scene.
        ///  - Use updateKinematic() after all state updates to the articulation via non-cache API such as this method,
        ///  in order to update link states for the next simulation frame or querying.
        ///
        ///  This call may not be made during simulation, except in a split simulation in-between [`PxScene::fetchCollision`] and #PxScene::advance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_setRootAngularVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_setRootAngularVelocity_mut(PxArticulationReducedCoordinate* self_, PxVec3* angularVelocity, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Gets the root link angular velocity.
        ///
        ///  For performance, prefer PxArticulationCache::rootLinkData to get the root link velocity in a batch query.
        ///
        ///  The root link angular velocity.
        ///
        ///  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(),
        ///  and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getRootAngularVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxArticulationReducedCoordinate_getRootAngularVelocity(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the (classical) link acceleration in world space for the given low-level link index.
        ///
        ///  - The returned acceleration is not a spatial, but a classical, i.e. body-fixed acceleration (https://en.wikipedia.org/wiki/Spatial_acceleration).
        ///  - The (linear) acceleration is with respect to the link's center of mass and not the actor frame origin.
        ///
        ///  The link's center-of-mass classical acceleration, or 0 if the call is made before the articulation participated in a first simulation step.
        ///
        ///  This call may only be made on articulations that are in a scene, and it is not allowed to use this method while the simulation
        ///  is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(), and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getLinkAcceleration_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSpatialVelocity PxArticulationReducedCoordinate_getLinkAcceleration_mut(PxArticulationReducedCoordinate* self_, uint linkId);

        /// <summary>
        ///  Returns the GPU articulation index.
        ///
        ///  The GPU index, or 0xFFFFFFFF if the articulation is not in a scene or PxSceneFlag::eSUPPRESS_READBACK is not set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getGpuArticulationIndex_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getGpuArticulationIndex_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Creates a spatial tendon to attach to the articulation with default attribute values.
        ///
        ///  The new spatial tendon.
        ///
        ///  Creating a spatial tendon is not allowed while the articulation is in a scene. In order to
        ///  add the tendon, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_createSpatialTendon_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationSpatialTendon* PxArticulationReducedCoordinate_createSpatialTendon_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Creates a fixed tendon to attach to the articulation with default attribute values.
        ///
        ///  The new fixed tendon.
        ///
        ///  Creating a fixed tendon is not allowed while the articulation is in a scene. In order to
        ///  add the tendon, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_createFixedTendon_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationFixedTendon* PxArticulationReducedCoordinate_createFixedTendon_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Creates a force sensor attached to a link of the articulation.
        ///
        ///  The new sensor.
        ///
        ///  Creating a sensor is not allowed while the articulation is in a scene. In order to
        ///  add the sensor, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_createSensor_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationSensor* PxArticulationReducedCoordinate_createSensor_mut(PxArticulationReducedCoordinate* self_, PxArticulationLink* link, PxTransform* relativePose);

        /// <summary>
        ///  Returns the spatial tendons attached to the articulation.
        ///
        ///  The order of the tendons in the buffer is not necessarily identical to the order in which the tendons were added to the articulation.
        ///
        ///  The number of tendons written into the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getSpatialTendons", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getSpatialTendons(PxArticulationReducedCoordinate* self_, PxArticulationSpatialTendon** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of spatial tendons in the articulation.
        ///
        ///  The number of tendons.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getNbSpatialTendons_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getNbSpatialTendons_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the fixed tendons attached to the articulation.
        ///
        ///  The order of the tendons in the buffer is not necessarily identical to the order in which the tendons were added to the articulation.
        ///
        ///  The number of tendons written into the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getFixedTendons", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getFixedTendons(PxArticulationReducedCoordinate* self_, PxArticulationFixedTendon** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of fixed tendons in the articulation.
        ///
        ///  The number of tendons.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getNbFixedTendons_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getNbFixedTendons_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Returns the sensors attached to the articulation.
        ///
        ///  The order of the sensors in the buffer is not necessarily identical to the order in which the sensors were added to the articulation.
        ///
        ///  The number of sensors written into the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getSensors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getSensors(PxArticulationReducedCoordinate* self_, PxArticulationSensor** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of sensors in the articulation.
        ///
        ///  The number of sensors.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_getNbSensors_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationReducedCoordinate_getNbSensors_mut(PxArticulationReducedCoordinate* self_);

        /// <summary>
        ///  Update link velocities and/or positions in the articulation.
        ///
        ///  For performance, prefer the PxArticulationCache API that performs batch articulation state updates.
        ///
        ///  If the application updates the root state (position and velocity) or joint state via any combination of
        ///  the non-cache API calls
        ///
        ///  - setRootGlobalPose(), setRootLinearVelocity(), setRootAngularVelocity()
        ///  - PxArticulationJointReducedCoordinate::setJointPosition(), PxArticulationJointReducedCoordinate::setJointVelocity()
        ///
        ///  the application needs to call this method after the state setting in order to update the link states for
        ///  the next simulation frame or querying.
        ///
        ///  Use
        ///  - PxArticulationKinematicFlag::ePOSITION after any changes to the articulation root or joint positions using non-cache API calls. Updates links' positions and velocities.
        ///  - PxArticulationKinematicFlag::eVELOCITY after velocity-only changes to the articulation root or joints using non-cache API calls. Updates links' velocities only.
        ///
        ///  This call may only be made on articulations that are in a scene, and may not be made during simulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationReducedCoordinate_updateKinematic_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationReducedCoordinate_updateKinematic_mut(PxArticulationReducedCoordinate* self_, PxArticulationKinematicFlags flags);

        /// <summary>
        ///  Gets the parent articulation link of this joint.
        ///
        ///  The parent link.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getParentArticulationLink", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLink* PxArticulationJointReducedCoordinate_getParentArticulationLink(PxArticulationJointReducedCoordinate* self_);

        /// <summary>
        ///  Sets the joint pose in the parent link actor frame.
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setParentPose_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setParentPose_mut(PxArticulationJointReducedCoordinate* self_, PxTransform* pose);

        /// <summary>
        ///  Gets the joint pose in the parent link actor frame.
        ///
        ///  The joint pose.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getParentPose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxArticulationJointReducedCoordinate_getParentPose(PxArticulationJointReducedCoordinate* self_);

        /// <summary>
        ///  Gets the child articulation link of this joint.
        ///
        ///  The child link.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getChildArticulationLink", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLink* PxArticulationJointReducedCoordinate_getChildArticulationLink(PxArticulationJointReducedCoordinate* self_);

        /// <summary>
        ///  Sets the joint pose in the child link actor frame.
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setChildPose_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setChildPose_mut(PxArticulationJointReducedCoordinate* self_, PxTransform* pose);

        /// <summary>
        ///  Gets the joint pose in the child link actor frame.
        ///
        ///  The joint pose.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getChildPose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxArticulationJointReducedCoordinate_getChildPose(PxArticulationJointReducedCoordinate* self_);

        /// <summary>
        ///  Sets the joint type (e.g. revolute).
        ///
        ///  Setting the joint type is not allowed while the articulation is in a scene.
        ///  In order to set the joint type, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setJointType_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setJointType_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationJointType jointType);

        /// <summary>
        ///  Gets the joint type.
        ///
        ///  The joint type.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getJointType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationJointType PxArticulationJointReducedCoordinate_getJointType(PxArticulationJointReducedCoordinate* self_);

        /// <summary>
        ///  Sets the joint motion for a given axis.
        ///
        ///  Setting the motion of joint axes is not allowed while the articulation is in a scene.
        ///  In order to set the motion, remove and then re-add the articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setMotion_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setMotion_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis, PxArticulationMotion motion);

        /// <summary>
        ///  Returns the joint motion for the given axis.
        ///
        ///  The joint motion of the given axis.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getMotion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationMotion PxArticulationJointReducedCoordinate_getMotion(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis);

        /// <summary>
        ///  Sets the joint limits for a given axis.
        ///
        ///  - The motion of the corresponding axis should be set to PxArticulationMotion::eLIMITED in order for the limits to be enforced.
        ///  - The lower limit should be strictly smaller than the higher limit. If the limits should be equal, use PxArticulationMotion::eLOCKED
        ///  and an appropriate offset in the parent/child joint frames.
        ///
        ///  This call is not allowed while the simulation is running.
        ///
        ///  For spherical joints, limit.min and limit.max must both be in range [-Pi, Pi].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setLimitParams_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setLimitParams_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis, PxArticulationLimit* limit);

        /// <summary>
        ///  Returns the joint limits for a given axis.
        ///
        ///  The joint limits.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getLimitParams", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationLimit PxArticulationJointReducedCoordinate_getLimitParams(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis);

        /// <summary>
        ///  Configures a joint drive for the given axis.
        ///
        ///  See PxArticulationDrive for parameter details; and the manual for further information, and the drives' implicit spring-damper (i.e. PD control) implementation in particular.
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setDriveParams_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setDriveParams_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis, PxArticulationDrive* drive);

        /// <summary>
        ///  Gets the joint drive configuration for the given axis.
        ///
        ///  The drive parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getDriveParams", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationDrive PxArticulationJointReducedCoordinate_getDriveParams(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis);

        /// <summary>
        ///  Sets the joint drive position target for the given axis.
        ///
        ///  The target units are linear units (equivalent to scene units) for a translational axis, or rad for a rotational axis.
        ///
        ///  This call is not allowed while the simulation is running.
        ///
        ///  For spherical joints, target must be in range [-Pi, Pi].
        ///
        ///  The target is specified in the parent frame of the joint. If Gp, Gc are the parent and child actor poses in the world frame and Lp, Lc are the parent and child joint frames expressed in the parent and child actor frames then the joint will drive the parent and child links to poses that obey Gp * Lp * J = Gc * Lc. For joints restricted to angular motion, J has the form PxTranfsorm(PxVec3(PxZero), PxExp(PxVec3(twistTarget, swing1Target, swing2Target))).  For joints restricted to linear motion, J has the form PxTransform(PxVec3(XTarget, YTarget, ZTarget), PxQuat(PxIdentity)).
        ///
        ///  For spherical joints with more than 1 degree of freedom, the joint target angles taken together can collectively represent a rotation of greater than Pi around a vector. When this happens the rotation that matches the joint drive target is not the shortest path rotation.  The joint pose J that is the outcome after driving to the target pose will always be the equivalent of the shortest path rotation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setDriveTarget_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setDriveTarget_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis, float target, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Returns the joint drive position target for the given axis.
        ///
        ///  The target position.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getDriveTarget", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationJointReducedCoordinate_getDriveTarget(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis);

        /// <summary>
        ///  Sets the joint drive velocity target for the given axis.
        ///
        ///  The target units are linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setDriveVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setDriveVelocity_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis, float targetVel, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Returns the joint drive velocity target for the given axis.
        ///
        ///  The target velocity.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getDriveVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationJointReducedCoordinate_getDriveVelocity(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis);

        /// <summary>
        ///  Sets the joint armature for the given axis.
        ///
        ///  - The armature is directly added to the joint-space spatial inertia of the corresponding axis.
        ///  - The armature is in mass units for a prismatic (i.e. linear) joint, and in mass units * (scene linear units)^2 for a rotational joint.
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setArmature_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setArmature_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis, float armature);

        /// <summary>
        ///  Gets the joint armature for the given axis.
        ///
        ///  The armature set on the given axis.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getArmature", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationJointReducedCoordinate_getArmature(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis);

        /// <summary>
        ///  Sets the joint friction coefficient, which applies to all joint axes.
        ///
        ///  - The joint friction is unitless and relates the magnitude of the spatial force [F_trans, T_trans] transmitted from parent to child link to
        ///  the maximal friction force F_resist that may be applied by the solver to resist joint motion, per axis; i.e. |F_resist|
        ///  &lt;
        ///  = coefficient * (|F_trans| + |T_trans|),
        ///  where F_resist may refer to a linear force or torque depending on the joint axis.
        ///  - The simulated friction effect is therefore similar to static and Coulomb friction. In order to simulate dynamic joint friction, use a joint drive with
        ///  zero stiffness and zero velocity target, and an appropriately dimensioned damping parameter.
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setFrictionCoefficient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setFrictionCoefficient_mut(PxArticulationJointReducedCoordinate* self_, float coefficient);

        /// <summary>
        ///  Gets the joint friction coefficient.
        ///
        ///  The joint friction coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getFrictionCoefficient", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationJointReducedCoordinate_getFrictionCoefficient(PxArticulationJointReducedCoordinate* self_);

        /// <summary>
        ///  Sets the maximal joint velocity enforced for all axes.
        ///
        ///  - The solver will apply appropriate joint-space impulses in order to enforce the per-axis joint-velocity limit.
        ///  - The velocity units are linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setMaxJointVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setMaxJointVelocity_mut(PxArticulationJointReducedCoordinate* self_, float maxJointV);

        /// <summary>
        ///  Gets the maximal joint velocity enforced for all axes.
        ///
        ///  The maximal per-axis joint velocity.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getMaxJointVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationJointReducedCoordinate_getMaxJointVelocity(PxArticulationJointReducedCoordinate* self_);

        /// <summary>
        ///  Sets the joint position for the given axis.
        ///
        ///  - For performance, prefer PxArticulationCache::jointPosition to set joint positions in a batch articulation state update.
        ///  - Use PxArticulationReducedCoordinate::updateKinematic after all state updates to the articulation via non-cache API such as this method,
        ///  in order to update link states for the next simulation frame or querying.
        ///
        ///  This call is not allowed while the simulation is running.
        ///
        ///  For spherical joints, jointPos must be in range [-Pi, Pi].
        ///
        ///  Joint position is specified in the parent frame of the joint. If Gp, Gc are the parent and child actor poses in the world frame and Lp, Lc are the parent and child joint frames expressed in the parent and child actor frames then the parent and child links will be given poses that obey Gp * Lp * J = Gc * Lc with J denoting the joint pose. For joints restricted to angular motion, J has the form PxTranfsorm(PxVec3(PxZero), PxExp(PxVec3(twistPos, swing1Pos, swing2Pos))).  For joints restricted to linear motion, J has the form PxTransform(PxVec3(xPos, yPos, zPos), PxQuat(PxIdentity)).
        ///
        ///  For spherical joints with more than 1 degree of freedom, the input joint positions taken together can collectively represent a rotation of greater than Pi around a vector. When this happens the rotation that matches the joint positions is not the shortest path rotation.  The joint pose J that is the outcome of setting and applying the joint positions will always be the equivalent of the shortest path rotation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setJointPosition_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setJointPosition_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis, float jointPos);

        /// <summary>
        ///  Gets the joint position for the given axis, i.e. joint degree of freedom (DOF).
        ///
        ///  For performance, prefer PxArticulationCache::jointPosition to get joint positions in a batch query.
        ///
        ///  The joint position in linear units (equivalent to scene units) for a translational axis, or radians for a rotational axis.
        ///
        ///  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(),
        ///  and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getJointPosition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationJointReducedCoordinate_getJointPosition(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis);

        /// <summary>
        ///  Sets the joint velocity for the given axis.
        ///
        ///  - For performance, prefer PxArticulationCache::jointVelocity to set joint velocities in a batch articulation state update.
        ///  - Use PxArticulationReducedCoordinate::updateKinematic after all state updates to the articulation via non-cache API such as this method,
        ///  in order to update link states for the next simulation frame or querying.
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_setJointVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationJointReducedCoordinate_setJointVelocity_mut(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis, float jointVel);

        /// <summary>
        ///  Gets the joint velocity for the given axis.
        ///
        ///  For performance, prefer PxArticulationCache::jointVelocity to get joint velocities in a batch query.
        ///
        ///  The joint velocity in linear units (equivalent to scene units) per second for a translational axis, or radians per second for a rotational axis.
        ///
        ///  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(),
        ///  and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getJointVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationJointReducedCoordinate_getJointVelocity(PxArticulationJointReducedCoordinate* self_, PxArticulationAxis axis);

        /// <summary>
        ///  Returns the string name of the dynamic type.
        ///
        ///  The string name.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationJointReducedCoordinate_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxArticulationJointReducedCoordinate_getConcreteTypeName(PxArticulationJointReducedCoordinate* self_);

        /// <summary>
        ///  Decrements the reference count of a shape and releases it if the new reference count is zero.
        ///
        ///  Note that in releases prior to PhysX 3.3 this method did not have reference counting semantics and was used to destroy a shape
        ///  created with PxActor::createShape(). In PhysX 3.3 and above, this usage is deprecated, instead, use PxRigidActor::detachShape() to detach
        ///  a shape from an actor. If the shape to be detached was created with PxActor::createShape(), the actor holds the only counted reference,
        ///  and so when the shape is detached it will also be destroyed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_release_mut(PxShape* self_);

        /// <summary>
        ///  Adjust the geometry of the shape.
        ///
        ///  The type of the passed in geometry must match the geometry type of the shape.
        ///
        ///  It is not allowed to change the geometry type of a shape.
        ///
        ///  This function does not guarantee correct/continuous behavior when objects are resting on top of old or new geometry.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setGeometry_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setGeometry_mut(PxShape* self_, PxGeometry* geometry);

        /// <summary>
        ///  Retrieve a reference to the shape's geometry.
        ///
        ///  The returned reference has the same lifetime as the PxShape it comes from.
        ///
        ///  Reference to internal PxGeometry object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getGeometry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeometry* PxShape_getGeometry(PxShape* self_);

        /// <summary>
        ///  Retrieves the actor which this shape is associated with.
        ///
        ///  The actor this shape is associated with, if it is an exclusive shape, else NULL
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getActor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidActor* PxShape_getActor(PxShape* self_);

        /// <summary>
        ///  Sets the pose of the shape in actor space, i.e. relative to the actors to which they are attached.
        ///
        ///  This transformation is identity by default.
        ///
        ///  The local pose is an attribute of the shape, and so will apply to all actors to which the shape is attached.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the associated actor up automatically.
        ///
        ///  Note:
        ///  Does not automatically update the inertia properties of the owning actor (if applicable); use the
        ///  PhysX extensions method [`PxRigidBodyExt::updateMassAndInertia`]() to do this.
        ///
        ///  Default:
        ///  the identity transform
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setLocalPose_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setLocalPose_mut(PxShape* self_, PxTransform* pose);

        /// <summary>
        ///  Retrieves the pose of the shape in actor space, i.e. relative to the actor they are owned by.
        ///
        ///  This transformation is identity by default.
        ///
        ///  Pose of shape relative to the actor's frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getLocalPose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxShape_getLocalPose(PxShape* self_);

        /// <summary>
        ///  Sets the user definable collision filter data.
        ///
        ///  Sleeping:
        ///  Does wake up the actor if the filter data change causes a formerly suppressed
        ///  collision pair to be enabled.
        ///
        ///  Default:
        ///  (0,0,0,0)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setSimulationFilterData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setSimulationFilterData_mut(PxShape* self_, PxFilterData* data);

        /// <summary>
        ///  Retrieves the shape's collision filter data.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getSimulationFilterData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFilterData PxShape_getSimulationFilterData(PxShape* self_);

        /// <summary>
        ///  Sets the user definable query filter data.
        ///
        ///  Default:
        ///  (0,0,0,0)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setQueryFilterData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setQueryFilterData_mut(PxShape* self_, PxFilterData* data);

        /// <summary>
        ///  Retrieves the shape's Query filter data.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getQueryFilterData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFilterData PxShape_getQueryFilterData(PxShape* self_);

        /// <summary>
        ///  Assigns material(s) to the shape. Will remove existing materials from the shape.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the associated actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setMaterials_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setMaterials_mut(PxShape* self_, PxMaterial** materials, ushort materialCount);

        /// <summary>
        ///  Returns the number of materials assigned to the shape.
        ///
        ///  You can use [`getMaterials`]() to retrieve the material pointers.
        ///
        ///  Number of materials associated with this shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getNbMaterials", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort PxShape_getNbMaterials(PxShape* self_);

        /// <summary>
        ///  Retrieve all the material pointers associated with the shape.
        ///
        ///  You can retrieve the number of material pointers by calling [`getNbMaterials`]()
        ///
        ///  Note: The returned data may contain invalid pointers if you release materials using [`PxMaterial::release`]().
        ///
        ///  Number of material pointers written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getMaterials", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxShape_getMaterials(PxShape* self_, PxMaterial** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Retrieve material from given triangle index.
        ///
        ///  The input index is the internal triangle index as used inside the SDK. This is the index
        ///  returned to users by various SDK functions such as raycasts.
        ///
        ///  This function is only useful for triangle meshes or heightfields, which have per-triangle
        ///  materials. For other shapes or SDF triangle meshes, the function returns the single material
        ///  associated with the shape, regardless of the index.
        ///
        ///  Material from input triangle
        ///
        ///  If faceIndex value of 0xFFFFffff is passed as an input for mesh and heightfield shapes, this function will issue a warning and return NULL.
        ///
        ///  Scene queries set the value of PxQueryHit::faceIndex to 0xFFFFffff whenever it is undefined or does not apply.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getMaterialFromInternalFaceIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBaseMaterial* PxShape_getMaterialFromInternalFaceIndex(PxShape* self_, uint faceIndex);

        /// <summary>
        ///  Sets the contact offset.
        ///
        ///  Shapes whose distance is less than the sum of their contactOffset values will generate contacts. The contact offset must be positive and
        ///  greater than the rest offset. Having a contactOffset greater than than the restOffset allows the collision detection system to
        ///  predictively enforce the contact constraint even when the objects are slightly separated. This prevents jitter that would occur
        ///  if the constraint were enforced only when shapes were within the rest distance.
        ///
        ///  Default:
        ///  0.02f * PxTolerancesScale::length
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the associated actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setContactOffset_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setContactOffset_mut(PxShape* self_, float contactOffset);

        /// <summary>
        ///  Retrieves the contact offset.
        ///
        ///  The contact offset of the shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getContactOffset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxShape_getContactOffset(PxShape* self_);

        /// <summary>
        ///  Sets the rest offset.
        ///
        ///  Two shapes will come to rest at a distance equal to the sum of their restOffset values. If the restOffset is 0, they should converge to touching
        ///  exactly.  Having a restOffset greater than zero is useful to have objects slide smoothly, so that they do not get hung up on irregularities of
        ///  each others' surfaces.
        ///
        ///  Default:
        ///  0.0f
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the associated actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setRestOffset_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setRestOffset_mut(PxShape* self_, float restOffset);

        /// <summary>
        ///  Retrieves the rest offset.
        ///
        ///  The rest offset of the shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getRestOffset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxShape_getRestOffset(PxShape* self_);

        /// <summary>
        ///  Sets the density used to interact with fluids.
        ///
        ///  To be physically accurate, the density of a rigid body should be computed as its mass divided by its volume. To
        ///  simplify tuning the interaction of fluid and rigid bodies, the density for fluid can differ from the real density. This
        ///  allows to create floating bodies, even if they are supposed to sink with their mass and volume.
        ///
        ///  Default:
        ///  800.0f
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setDensityForFluid_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setDensityForFluid_mut(PxShape* self_, float densityForFluid);

        /// <summary>
        ///  Retrieves the density used to interact with fluids.
        ///
        ///  The density of the body when interacting with fluid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getDensityForFluid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxShape_getDensityForFluid(PxShape* self_);

        /// <summary>
        ///  Sets torsional patch radius.
        ///
        ///  This defines the radius of the contact patch used to apply torsional friction. If the radius is 0, no torsional friction
        ///  will be applied. If the radius is &gt; 0, some torsional friction will be applied. This is proportional to the penetration depth
        ///  so, if the shapes are separated or penetration is zero, no torsional friction will be applied. It is used to approximate
        ///  rotational friction introduced by the compression of contacting surfaces.
        ///
        ///  Default:
        ///  0.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setTorsionalPatchRadius_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setTorsionalPatchRadius_mut(PxShape* self_, float radius);

        /// <summary>
        ///  Gets torsional patch radius.
        ///
        ///  This defines the radius of the contact patch used to apply torsional friction. If the radius is 0, no torsional friction
        ///  will be applied. If the radius is &gt; 0, some torsional friction will be applied. This is proportional to the penetration depth
        ///  so, if the shapes are separated or penetration is zero, no torsional friction will be applied. It is used to approximate
        ///  rotational friction introduced by the compression of contacting surfaces.
        ///
        ///  The torsional patch radius of the shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getTorsionalPatchRadius", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxShape_getTorsionalPatchRadius(PxShape* self_);

        /// <summary>
        ///  Sets minimum torsional patch radius.
        ///
        ///  This defines the minimum radius of the contact patch used to apply torsional friction. If the radius is 0, the amount of torsional friction
        ///  that will be applied will be entirely dependent on the value of torsionalPatchRadius.
        ///
        ///  If the radius is &gt; 0, some torsional friction will be applied regardless of the value of torsionalPatchRadius or the amount of penetration.
        ///
        ///  Default:
        ///  0.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setMinTorsionalPatchRadius_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setMinTorsionalPatchRadius_mut(PxShape* self_, float radius);

        /// <summary>
        ///  Gets minimum torsional patch radius.
        ///
        ///  This defines the minimum radius of the contact patch used to apply torsional friction. If the radius is 0, the amount of torsional friction
        ///  that will be applied will be entirely dependent on the value of torsionalPatchRadius.
        ///
        ///  If the radius is &gt; 0, some torsional friction will be applied regardless of the value of torsionalPatchRadius or the amount of penetration.
        ///
        ///  The minimum torsional patch radius of the shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getMinTorsionalPatchRadius", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxShape_getMinTorsionalPatchRadius(PxShape* self_);

        /// <summary>
        ///  Sets shape flags
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the associated actor up automatically.
        ///
        ///  Default:
        ///  PxShapeFlag::eVISUALIZATION | PxShapeFlag::eSIMULATION_SHAPE | PxShapeFlag::eSCENE_QUERY_SHAPE
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setFlag_mut(PxShape* self_, PxShapeFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Sets shape flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setFlags_mut(PxShape* self_, PxShapeFlags inFlags);

        /// <summary>
        ///  Retrieves shape flags.
        ///
        ///  The values of the shape flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxShapeFlags PxShape_getFlags(PxShape* self_);

        /// <summary>
        ///  Returns true if the shape is exclusive to an actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_isExclusive", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxShape_isExclusive(PxShape* self_);

        /// <summary>
        ///  Sets a name string for the object that can be retrieved with [`getName`]().
        ///
        ///  This is for debugging and is not used by the SDK.
        ///  The string is not copied by the SDK, only the pointer is stored.
        ///
        ///  Default:
        ///  NULL
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_setName_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxShape_setName_mut(PxShape* self_, byte* name);

        /// <summary>
        ///  retrieves the name string set with setName().
        ///
        ///  The name associated with the shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShape_getName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxShape_getName(PxShape* self_);

        [DllImport(__DllName, EntryPoint = "PxShape_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxShape_getConcreteTypeName(PxShape* self_);

        /// <summary>
        ///  Deletes the rigid actor object.
        ///
        ///  Also releases any shapes associated with the actor.
        ///
        ///  Releasing an actor will affect any objects that are connected to the actor (constraint shaders like joints etc.).
        ///  Such connected objects will be deleted upon scene deletion, or explicitly by the user by calling release()
        ///  on these objects. It is recommended to always remove all objects that reference actors before the actors
        ///  themselves are removed. It is not possible to retrieve list of dead connected objects.
        ///
        ///  Sleeping:
        ///  This call will awaken any sleeping actors contacting the deleted actor (directly or indirectly).
        ///
        ///  Calls [`PxActor::release`]() so you might want to check the documentation of that method as well.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidActor_release_mut(PxRigidActor* self_);

        /// <summary>
        ///  Returns the internal actor index.
        ///
        ///  This is only defined for actors that have been added to a scene.
        ///
        ///  The internal actor index, or 0xffffffff if the actor is not part of a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_getInternalActorIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRigidActor_getInternalActorIndex(PxRigidActor* self_);

        /// <summary>
        ///  Retrieves the actors world space transform.
        ///
        ///  The getGlobalPose() method retrieves the actor's current actor space to world space transformation.
        ///
        ///  It is not allowed to use this method while the simulation is running (except during PxScene::collide(),
        ///  in PxContactModifyCallback or in contact report callbacks).
        ///
        ///  Global pose of object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_getGlobalPose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxRigidActor_getGlobalPose(PxRigidActor* self_);

        /// <summary>
        ///  Method for setting an actor's pose in the world.
        ///
        ///  This method instantaneously changes the actor space to world space transformation.
        ///
        ///  This method is mainly for dynamic rigid bodies (see [`PxRigidDynamic`]). Calling this method on static actors is
        ///  likely to result in a performance penalty, since internal optimization structures for static actors may need to be
        ///  recomputed. In addition, moving static actors will not interact correctly with dynamic actors or joints.
        ///
        ///  To directly control an actor's position and have it correctly interact with dynamic bodies and joints, create a dynamic
        ///  body with the PxRigidBodyFlag::eKINEMATIC flag, then use the setKinematicTarget() commands to define its path.
        ///
        ///  Even when moving dynamic actors, exercise restraint in making use of this method. Where possible, avoid:
        ///
        ///  moving actors into other actors, thus causing overlap (an invalid physical state)
        ///
        ///  moving an actor that is connected by a joint to another away from the other (thus causing joint error)
        ///
        ///  Sleeping:
        ///  This call wakes dynamic actors if they are sleeping and the autowake parameter is true (default).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_setGlobalPose_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidActor_setGlobalPose_mut(PxRigidActor* self_, PxTransform* pose, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Attach a shape to an actor
        ///
        ///  This call will increment the reference count of the shape.
        ///
        ///  Mass properties of dynamic rigid actors will not automatically be recomputed
        ///  to reflect the new mass distribution implied by the shape. Follow this call with a call to
        ///  the PhysX extensions method [`PxRigidBodyExt::updateMassAndInertia`]() to do that.
        ///
        ///  Attaching a triangle mesh, heightfield or plane geometry shape configured as eSIMULATION_SHAPE is not supported for
        ///  non-kinematic PxRigidDynamic instances.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        ///
        ///  True if success.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_attachShape_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRigidActor_attachShape_mut(PxRigidActor* self_, PxShape* shape);

        /// <summary>
        ///  Detach a shape from an actor.
        ///
        ///  This will also decrement the reference count of the PxShape, and if the reference count is zero, will cause it to be deleted.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_detachShape_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidActor_detachShape_mut(PxRigidActor* self_, PxShape* shape, [MarshalAs(UnmanagedType.U1)] bool wakeOnLostTouch);

        /// <summary>
        ///  Returns the number of shapes assigned to the actor.
        ///
        ///  You can use [`getShapes`]() to retrieve the shape pointers.
        ///
        ///  Number of shapes associated with this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_getNbShapes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRigidActor_getNbShapes(PxRigidActor* self_);

        /// <summary>
        ///  Retrieve all the shape pointers belonging to the actor.
        ///
        ///  These are the shapes used by the actor for collision detection.
        ///
        ///  You can retrieve the number of shape pointers by calling [`getNbShapes`]()
        ///
        ///  Note: Removing shapes with [`PxShape::release`]() will invalidate the pointer of the released shape.
        ///
        ///  Number of shape pointers written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_getShapes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRigidActor_getShapes(PxRigidActor* self_, PxShape** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of constraint shaders attached to the actor.
        ///
        ///  You can use [`getConstraints`]() to retrieve the constraint shader pointers.
        ///
        ///  Number of constraint shaders attached to this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_getNbConstraints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRigidActor_getNbConstraints(PxRigidActor* self_);

        /// <summary>
        ///  Retrieve all the constraint shader pointers belonging to the actor.
        ///
        ///  You can retrieve the number of constraint shader pointers by calling [`getNbConstraints`]()
        ///
        ///  Note: Removing constraint shaders with [`PxConstraint::release`]() will invalidate the pointer of the released constraint.
        ///
        ///  Number of constraint shader pointers written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActor_getConstraints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRigidActor_getConstraints(PxRigidActor* self_, PxConstraint** userBuffer, uint bufferSize, uint startIndex);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxNodeIndex PxNodeIndex_new(uint id, uint articLinkId);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxNodeIndex PxNodeIndex_new_1(uint id);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_index", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxNodeIndex_index(PxNodeIndex* self_);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_articulationLinkId", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxNodeIndex_articulationLinkId(PxNodeIndex* self_);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_isArticulation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxNodeIndex_isArticulation(PxNodeIndex* self_);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_isStaticBody", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxNodeIndex_isStaticBody(PxNodeIndex* self_);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxNodeIndex_isValid(PxNodeIndex* self_);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_setIndices_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxNodeIndex_setIndices_mut(PxNodeIndex* self_, uint index, uint articLinkId);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_setIndices_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxNodeIndex_setIndices_mut_1(PxNodeIndex* self_, uint index);

        [DllImport(__DllName, EntryPoint = "PxNodeIndex_getInd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong PxNodeIndex_getInd(PxNodeIndex* self_);

        /// <summary>
        ///  Sets the pose of the center of mass relative to the actor.
        ///
        ///  Changing this transform will not move the actor in the world!
        ///
        ///  Setting an unrealistic center of mass which is a long way from the body can make it difficult for
        ///  the SDK to solve constraints. Perhaps leading to instability and jittering bodies.
        ///
        ///  Default:
        ///  the identity transform
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setCMassLocalPose_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setCMassLocalPose_mut(PxRigidBody* self_, PxTransform* pose);

        /// <summary>
        ///  Retrieves the center of mass pose relative to the actor frame.
        ///
        ///  The center of mass pose relative to the actor frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getCMassLocalPose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxRigidBody_getCMassLocalPose(PxRigidBody* self_);

        /// <summary>
        ///  Sets the mass of a dynamic actor.
        ///
        ///  The mass must be non-negative.
        ///
        ///  setMass() does not update the inertial properties of the body, to change the inertia tensor
        ///  use setMassSpaceInertiaTensor() or the PhysX extensions method [`PxRigidBodyExt::updateMassAndInertia`]().
        ///
        ///  A value of 0 is interpreted as infinite mass.
        ///
        ///  Values of 0 are not permitted for instances of PxArticulationLink but are permitted for instances of PxRigidDynamic.
        ///
        ///  Default:
        ///  1.0
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setMass_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setMass_mut(PxRigidBody* self_, float mass);

        /// <summary>
        ///  Retrieves the mass of the actor.
        ///
        ///  A value of 0 is interpreted as infinite mass.
        ///
        ///  The mass of this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getMass", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getMass(PxRigidBody* self_);

        /// <summary>
        ///  Retrieves the inverse mass of the actor.
        ///
        ///  The inverse mass of this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getInvMass", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getInvMass(PxRigidBody* self_);

        /// <summary>
        ///  Sets the inertia tensor, using a parameter specified in mass space coordinates.
        ///
        ///  Note that such matrices are diagonal -- the passed vector is the diagonal.
        ///
        ///  If you have a non diagonal world/actor space inertia tensor(3x3 matrix). Then you need to
        ///  diagonalize it and set an appropriate mass space transform. See [`setCMassLocalPose`]().
        ///
        ///  The inertia tensor elements must be non-negative.
        ///
        ///  A value of 0 in an element is interpreted as infinite inertia along that axis.
        ///
        ///  Values of 0 are not permitted for instances of PxArticulationLink but are permitted for instances of PxRigidDynamic.
        ///
        ///  Default:
        ///  (1.0, 1.0, 1.0)
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setMassSpaceInertiaTensor_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setMassSpaceInertiaTensor_mut(PxRigidBody* self_, PxVec3* m);

        /// <summary>
        ///  Retrieves the diagonal inertia tensor of the actor relative to the mass coordinate frame.
        ///
        ///  This method retrieves a mass frame inertia vector.
        ///
        ///  The mass space inertia tensor of this actor.
        ///
        ///  A value of 0 in an element is interpreted as infinite inertia along that axis.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getMassSpaceInertiaTensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidBody_getMassSpaceInertiaTensor(PxRigidBody* self_);

        /// <summary>
        ///  Retrieves the diagonal inverse inertia tensor of the actor relative to the mass coordinate frame.
        ///
        ///  This method retrieves a mass frame inverse inertia vector.
        ///
        ///  A value of 0 in an element is interpreted as infinite inertia along that axis.
        ///
        ///  The mass space inverse inertia tensor of this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getMassSpaceInvInertiaTensor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidBody_getMassSpaceInvInertiaTensor(PxRigidBody* self_);

        /// <summary>
        ///  Sets the linear damping coefficient.
        ///
        ///  Zero represents no damping. The damping coefficient must be nonnegative.
        ///
        ///  Default:
        ///  0.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setLinearDamping_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setLinearDamping_mut(PxRigidBody* self_, float linDamp);

        /// <summary>
        ///  Retrieves the linear damping coefficient.
        ///
        ///  The linear damping coefficient associated with this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getLinearDamping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getLinearDamping(PxRigidBody* self_);

        /// <summary>
        ///  Sets the angular damping coefficient.
        ///
        ///  Zero represents no damping.
        ///
        ///  The angular damping coefficient must be nonnegative.
        ///
        ///  Default:
        ///  0.05
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setAngularDamping_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setAngularDamping_mut(PxRigidBody* self_, float angDamp);

        /// <summary>
        ///  Retrieves the angular damping coefficient.
        ///
        ///  The angular damping coefficient associated with this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getAngularDamping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getAngularDamping(PxRigidBody* self_);

        /// <summary>
        ///  Retrieves the linear velocity of an actor.
        ///
        ///  It is not allowed to use this method while the simulation is running (except during PxScene::collide(),
        ///  in PxContactModifyCallback or in contact report callbacks).
        ///
        ///  The linear velocity of the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getLinearVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidBody_getLinearVelocity(PxRigidBody* self_);

        /// <summary>
        ///  Retrieves the angular velocity of the actor.
        ///
        ///  It is not allowed to use this method while the simulation is running (except during PxScene::collide(),
        ///  in PxContactModifyCallback or in contact report callbacks).
        ///
        ///  The angular velocity of the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getAngularVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidBody_getAngularVelocity(PxRigidBody* self_);

        /// <summary>
        ///  Lets you set the maximum linear velocity permitted for this actor.
        ///
        ///  With this function, you can set the  maximum linear velocity permitted for this rigid body.
        ///  Higher angular velocities are clamped to this value.
        ///
        ///  Note: The angular velocity is clamped to the set value
        ///  before
        ///  the solver, which means that
        ///  the limit may still be momentarily exceeded.
        ///
        ///  Default:
        ///  PX_MAX_F32
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setMaxLinearVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setMaxLinearVelocity_mut(PxRigidBody* self_, float maxLinVel);

        /// <summary>
        ///  Retrieves the maximum angular velocity permitted for this actor.
        ///
        ///  The maximum allowed angular velocity for this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getMaxLinearVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getMaxLinearVelocity(PxRigidBody* self_);

        /// <summary>
        ///  Lets you set the maximum angular velocity permitted for this actor.
        ///
        ///  For various internal computations, very quickly rotating actors introduce error
        ///  into the simulation, which leads to undesired results.
        ///
        ///  With this function, you can set the  maximum angular velocity permitted for this rigid body.
        ///  Higher angular velocities are clamped to this value.
        ///
        ///  Note: The angular velocity is clamped to the set value
        ///  before
        ///  the solver, which means that
        ///  the limit may still be momentarily exceeded.
        ///
        ///  Default:
        ///  100.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setMaxAngularVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setMaxAngularVelocity_mut(PxRigidBody* self_, float maxAngVel);

        /// <summary>
        ///  Retrieves the maximum angular velocity permitted for this actor.
        ///
        ///  The maximum allowed angular velocity for this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getMaxAngularVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getMaxAngularVelocity(PxRigidBody* self_);

        /// <summary>
        ///  Applies a force (or impulse) defined in the global coordinate frame to the actor at its center of mass.
        ///
        ///  This will not induce a torque
        ///  .
        ///
        ///  ::PxForceMode determines if the force is to be conventional or impulsive.
        ///
        ///  Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION
        ///  and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same
        ///  accumulators and are just short hand for multiplying the vector parameter by inverse mass and then using PxForceMode::eACCELERATION and
        ///  PxForceMode::eVELOCITY_CHANGE respectively.
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.
        ///
        ///  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.
        ///
        ///  if this is called on an articulation link, only the link is updated, not the entire articulation.
        ///
        ///  see [`PxRigidBodyExt::computeVelocityDeltaFromImpulse`] for details of how to compute the change in linear velocity that
        ///  will arise from the application of an impulsive force, where an impulsive force is applied force multiplied by a timestep.
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the force is non-zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_addForce_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_addForce_mut(PxRigidBody* self_, PxVec3* force, PxForceMode mode, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Applies an impulsive torque defined in the global coordinate frame to the actor.
        ///
        ///  ::PxForceMode determines if the torque is to be conventional or impulsive.
        ///
        ///  Each actor has an angular acceleration and an angular velocity change accumulator which are directly modified using the modes
        ///  PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE
        ///  also modify these same accumulators and are just short hand for multiplying the vector parameter by inverse inertia and then
        ///  using PxForceMode::eACCELERATION and PxForceMode::eVELOCITY_CHANGE respectively.
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.
        ///
        ///  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.
        ///
        ///  if this called on an articulation link, only the link is updated, not the entire articulation.
        ///
        ///  see [`PxRigidBodyExt::computeVelocityDeltaFromImpulse`] for details of how to compute the change in angular velocity that
        ///  will arise from the application of an impulsive torque, where an impulsive torque is an applied torque multiplied by a timestep.
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the torque is non-zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_addTorque_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_addTorque_mut(PxRigidBody* self_, PxVec3* torque, PxForceMode mode, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Clears the accumulated forces (sets the accumulated force back to zero).
        ///
        ///  Each actor has an acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION
        ///  and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same
        ///  accumulators (see PxRigidBody::addForce() for details); therefore the effect of calling clearForce(PxForceMode::eFORCE) is equivalent to calling
        ///  clearForce(PxForceMode::eACCELERATION), and the effect of calling clearForce(PxForceMode::eIMPULSE) is equivalent to calling
        ///  clearForce(PxForceMode::eVELOCITY_CHANGE).
        ///
        ///  ::PxForceMode determines if the cleared force is to be conventional or impulsive.
        ///
        ///  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_clearForce_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_clearForce_mut(PxRigidBody* self_, PxForceMode mode);

        /// <summary>
        ///  Clears the impulsive torque defined in the global coordinate frame to the actor.
        ///
        ///  ::PxForceMode determines if the cleared torque is to be conventional or impulsive.
        ///
        ///  Each actor has an angular acceleration and a velocity change accumulator which are directly modified using the modes PxForceMode::eACCELERATION
        ///  and PxForceMode::eVELOCITY_CHANGE respectively.  The modes PxForceMode::eFORCE and PxForceMode::eIMPULSE also modify these same
        ///  accumulators (see PxRigidBody::addTorque() for details); therefore the effect of calling clearTorque(PxForceMode::eFORCE) is equivalent to calling
        ///  clearTorque(PxForceMode::eACCELERATION), and the effect of calling clearTorque(PxForceMode::eIMPULSE) is equivalent to calling
        ///  clearTorque(PxForceMode::eVELOCITY_CHANGE).
        ///
        ///  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_clearTorque_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_clearTorque_mut(PxRigidBody* self_, PxForceMode mode);

        /// <summary>
        ///  Sets the impulsive force and torque defined in the global coordinate frame to the actor.
        ///
        ///  ::PxForceMode determines if the cleared torque is to be conventional or impulsive.
        ///
        ///  The force modes PxForceMode::eIMPULSE and PxForceMode::eVELOCITY_CHANGE can not be applied to articulation links.
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setForceAndTorque_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setForceAndTorque_mut(PxRigidBody* self_, PxVec3* force, PxVec3* torque, PxForceMode mode);

        /// <summary>
        ///  Raises or clears a particular rigid body flag.
        ///
        ///  See the list of flags [`PxRigidBodyFlag`]
        ///
        ///  Default:
        ///  no flags are set
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setRigidBodyFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setRigidBodyFlag_mut(PxRigidBody* self_, PxRigidBodyFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        [DllImport(__DllName, EntryPoint = "PxRigidBody_setRigidBodyFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setRigidBodyFlags_mut(PxRigidBody* self_, PxRigidBodyFlags inFlags);

        /// <summary>
        ///  Reads the PxRigidBody flags.
        ///
        ///  See the list of flags [`PxRigidBodyFlag`]
        ///
        ///  The values of the PxRigidBody flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getRigidBodyFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidBodyFlags PxRigidBody_getRigidBodyFlags(PxRigidBody* self_);

        /// <summary>
        ///  Sets the CCD minimum advance coefficient.
        ///
        ///  The CCD minimum advance coefficient is a value in the range [0, 1] that is used to control the minimum amount of time a body is integrated when
        ///  it has a CCD contact. The actual minimum amount of time that is integrated depends on various properties, including the relative speed and collision shapes
        ///  of the bodies involved in the contact. From these properties, a numeric value is calculated that determines the maximum distance (and therefore maximum time)
        ///  which these bodies could be integrated forwards that would ensure that these bodies did not pass through each-other. This value is then scaled by CCD minimum advance
        ///  coefficient to determine the amount of time that will be consumed in the CCD pass.
        ///
        ///  Things to consider:
        ///  A large value (approaching 1) ensures that the objects will always advance some time. However, larger values increase the chances of objects gently drifting through each-other in
        ///  scenes which the constraint solver can't converge, e.g. scenes where an object is being dragged through a wall with a constraint.
        ///  A value of 0 ensures that the pair of objects stop at the exact time-of-impact and will not gently drift through each-other. However, with very small/thin objects initially in
        ///  contact, this can lead to a large amount of time being dropped and increases the chances of jamming. Jamming occurs when the an object is persistently in contact with an object
        ///  such that the time-of-impact is 0, which results in no time being advanced for those objects in that CCD pass.
        ///
        ///  The chances of jamming can be reduced by increasing the number of CCD mass
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setMinCCDAdvanceCoefficient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setMinCCDAdvanceCoefficient_mut(PxRigidBody* self_, float advanceCoefficient);

        /// <summary>
        ///  Gets the CCD minimum advance coefficient.
        ///
        ///  The value of the CCD min advance coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getMinCCDAdvanceCoefficient", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getMinCCDAdvanceCoefficient(PxRigidBody* self_);

        /// <summary>
        ///  Sets the maximum depenetration velocity permitted to be introduced by the solver.
        ///  This value controls how much velocity the solver can introduce to correct for penetrations in contacts.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setMaxDepenetrationVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setMaxDepenetrationVelocity_mut(PxRigidBody* self_, float biasClamp);

        /// <summary>
        ///  Returns the maximum depenetration velocity the solver is permitted to introduced.
        ///  This value controls how much velocity the solver can introduce to correct for penetrations in contacts.
        ///
        ///  The maximum penetration bias applied by the solver.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getMaxDepenetrationVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getMaxDepenetrationVelocity(PxRigidBody* self_);

        /// <summary>
        ///  Sets a limit on the impulse that may be applied at a contact. The maximum impulse at a contact between two dynamic or kinematic
        ///  bodies will be the minimum of the two limit values. For a collision between a static and a dynamic body, the impulse is limited
        ///  by the value for the dynamic body.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setMaxContactImpulse_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setMaxContactImpulse_mut(PxRigidBody* self_, float maxImpulse);

        /// <summary>
        ///  Returns the maximum impulse that may be applied at a contact.
        ///
        ///  The maximum impulse that may be applied at a contact
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getMaxContactImpulse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getMaxContactImpulse(PxRigidBody* self_);

        /// <summary>
        ///  Sets a distance scale whereby the angular influence of a contact on the normal constraint in a contact is
        ///  zeroed if normal.cross(offset) falls below this tolerance. Rather than acting as an absolute value, this tolerance
        ///  is scaled by the ratio rXn.dot(angVel)/normal.dot(linVel) such that contacts that have relatively larger angular velocity
        ///  than linear normal velocity (e.g. rolling wheels) achieve larger slop values as the angular velocity increases.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_setContactSlopCoefficient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBody_setContactSlopCoefficient_mut(PxRigidBody* self_, float slopCoefficient);

        /// <summary>
        ///  Returns the contact slop coefficient.
        ///
        ///  The contact slop coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getContactSlopCoefficient", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidBody_getContactSlopCoefficient(PxRigidBody* self_);

        /// <summary>
        ///  Returns the island node index
        ///
        ///  The island node index.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBody_getInternalIslandNodeIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxNodeIndex PxRigidBody_getInternalIslandNodeIndex(PxRigidBody* self_);

        /// <summary>
        ///  Releases the link from the articulation.
        ///
        ///  Only a leaf articulation link can be released.
        ///
        ///  Releasing a link is not allowed while the articulation link is in a scene. In order to release a link,
        ///  remove and then re-add the corresponding articulation to the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationLink_release_mut(PxArticulationLink* self_);

        /// <summary>
        ///  Gets the articulation that the link is a part of.
        ///
        ///  The articulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getArticulation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationReducedCoordinate* PxArticulationLink_getArticulation(PxArticulationLink* self_);

        /// <summary>
        ///  Gets the joint which connects this link to its parent.
        ///
        ///  The joint connecting the link to the parent. NULL for the root link.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getInboundJoint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationJointReducedCoordinate* PxArticulationLink_getInboundJoint(PxArticulationLink* self_);

        /// <summary>
        ///  Gets the number of degrees of freedom of the joint which connects this link to its parent.
        ///
        ///  - The root link DOF-count is defined to be 0 regardless of PxArticulationFlag::eFIX_BASE.
        ///  - The return value is only valid for articulations that are in a scene.
        ///
        ///  The number of degrees of freedom, or 0xFFFFFFFF if the articulation is not in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getInboundJointDof", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationLink_getInboundJointDof(PxArticulationLink* self_);

        /// <summary>
        ///  Gets the number of child links.
        ///
        ///  The number of child links.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getNbChildren", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationLink_getNbChildren(PxArticulationLink* self_);

        /// <summary>
        ///  Gets the low-level link index that may be used to index into members of PxArticulationCache.
        ///
        ///  The return value is only valid for articulations that are in a scene.
        ///
        ///  The low-level index, or 0xFFFFFFFF if the articulation is not in a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getLinkIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationLink_getLinkIndex(PxArticulationLink* self_);

        /// <summary>
        ///  Retrieves the child links.
        ///
        ///  The number of articulation links written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getChildren", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxArticulationLink_getChildren(PxArticulationLink* self_, PxArticulationLink** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Set the constraint-force-mixing scale term.
        ///
        ///  The cfm scale term is a stabilization term that helps avoid instabilities with over-constrained
        ///  configurations. It should be a small value that is multiplied by 1/mass internally to produce
        ///  an additional bias added to the unit response term in the solver.
        ///
        ///  Default:
        ///  0.025
        ///  Range:
        ///  [0, 1]
        ///
        ///  This call is not allowed while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_setCfmScale_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxArticulationLink_setCfmScale_mut(PxArticulationLink* self_, float cfm);

        /// <summary>
        ///  Get the constraint-force-mixing scale term.
        ///
        ///  The constraint-force-mixing scale term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getCfmScale", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxArticulationLink_getCfmScale(PxArticulationLink* self_);

        /// <summary>
        ///  Get the linear velocity of the link.
        ///
        ///  - The linear velocity is with respect to the link's center of mass and not the actor frame origin.
        ///  - For performance, prefer PxArticulationCache::linkVelocity to get link spatial velocities in a batch query.
        ///  - When the articulation state is updated via non-cache API, use PxArticulationReducedCoordinate::updateKinematic before querying velocity.
        ///
        ///  The linear velocity of the link.
        ///
        ///  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(),
        ///  and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getLinearVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxArticulationLink_getLinearVelocity(PxArticulationLink* self_);

        /// <summary>
        ///  Get the angular velocity of the link.
        ///
        ///  - For performance, prefer PxArticulationCache::linkVelocity to get link spatial velocities in a batch query.
        ///  - When the articulation state is updated via non-cache API, use PxArticulationReducedCoordinate::updateKinematic before querying velocity.
        ///
        ///  The angular velocity of the link.
        ///
        ///  This call is not allowed while the simulation is running except in a split simulation during [`PxScene::collide`]() and up to #PxScene::advance(),
        ///  and in PxContactModifyCallback or in contact report callbacks.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getAngularVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxArticulationLink_getAngularVelocity(PxArticulationLink* self_);

        /// <summary>
        ///  Returns the string name of the dynamic type.
        ///
        ///  The string name.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxArticulationLink_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxArticulationLink_getConcreteTypeName(PxArticulationLink* self_);

        [DllImport(__DllName, EntryPoint = "PxConeLimitedConstraint_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConeLimitedConstraint PxConeLimitedConstraint_new();

        /// <summary>
        ///  Releases a PxConstraint instance.
        ///
        ///  This call does not wake up the connected rigid bodies.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_release_mut(PxConstraint* self_);

        /// <summary>
        ///  Retrieves the scene which this constraint belongs to.
        ///
        ///  Owner Scene. NULL if not part of a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_getScene", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxScene* PxConstraint_getScene(PxConstraint* self_);

        /// <summary>
        ///  Retrieves the actors for this constraint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_getActors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_getActors(PxConstraint* self_, PxRigidActor** actor0, PxRigidActor** actor1);

        /// <summary>
        ///  Sets the actors for this constraint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_setActors_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_setActors_mut(PxConstraint* self_, PxRigidActor* actor0, PxRigidActor* actor1);

        /// <summary>
        ///  Notify the scene that the constraint shader data has been updated by the application
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_markDirty_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_markDirty_mut(PxConstraint* self_);

        /// <summary>
        ///  Retrieve the flags for this constraint
        ///
        ///  the constraint flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_getFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConstraintFlags PxConstraint_getFlags(PxConstraint* self_);

        /// <summary>
        ///  Set the flags for this constraint
        ///
        ///  default: PxConstraintFlag::eDRIVE_LIMITS_ARE_FORCES
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_setFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_setFlags_mut(PxConstraint* self_, PxConstraintFlags flags);

        /// <summary>
        ///  Set a flag for this constraint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_setFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_setFlag_mut(PxConstraint* self_, PxConstraintFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Retrieve the constraint force most recently applied to maintain this constraint.
        ///
        ///  It is not allowed to use this method while the simulation is running (except during PxScene::collide(),
        ///  in PxContactModifyCallback or in contact report callbacks).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_getForce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_getForce(PxConstraint* self_, PxVec3* linear, PxVec3* angular);

        /// <summary>
        ///  whether the constraint is valid.
        ///
        ///  A constraint is valid if it has at least one dynamic rigid body or articulation link. A constraint that
        ///  is not valid may not be inserted into a scene, and therefore a static actor to which an invalid constraint
        ///  is attached may not be inserted into a scene.
        ///
        ///  Invalid constraints arise only when an actor to which the constraint is attached has been deleted.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxConstraint_isValid(PxConstraint* self_);

        /// <summary>
        ///  Set the break force and torque thresholds for this constraint.
        ///
        ///  If either the force or torque measured at the constraint exceed these thresholds the constraint will break.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_setBreakForce_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_setBreakForce_mut(PxConstraint* self_, float linear, float angular);

        /// <summary>
        ///  Retrieve the constraint break force and torque thresholds
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_getBreakForce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_getBreakForce(PxConstraint* self_, float* linear, float* angular);

        /// <summary>
        ///  Set the minimum response threshold for a constraint row
        ///
        ///  When using mass modification for a joint or infinite inertia for a jointed body, very stiff solver constraints can be generated which
        ///  can destabilize simulation. Setting this value to a small positive value (e.g. 1e-8) will cause constraint rows to be ignored if very
        ///  large changes in impulses will generate only small changes in velocity. When setting this value, also set
        ///  PxConstraintFlag::eDISABLE_PREPROCESSING. The solver accuracy for this joint may be reduced.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_setMinResponseThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_setMinResponseThreshold_mut(PxConstraint* self_, float threshold);

        /// <summary>
        ///  Retrieve the constraint break force and torque thresholds
        ///
        ///  the minimum response threshold for a constraint row
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_getMinResponseThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxConstraint_getMinResponseThreshold(PxConstraint* self_);

        /// <summary>
        ///  Fetch external owner of the constraint.
        ///
        ///  Provides a reference to the external owner of a constraint and a unique owner type ID.
        ///
        ///  Reference to the external object which owns the constraint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_getExternalReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxConstraint_getExternalReference_mut(PxConstraint* self_, uint* typeID);

        /// <summary>
        ///  Set the constraint functions for this constraint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConstraint_setConstraintFunctions_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConstraint_setConstraintFunctions_mut(PxConstraint* self_, PxConstraintConnector* connector, PxConstraintShaderTable* shaders);

        [DllImport(__DllName, EntryPoint = "PxConstraint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxConstraint_getConcreteTypeName(PxConstraint* self_);

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactStreamIterator PxContactStreamIterator_new(byte* contactPatches, byte* contactPoints, uint* contactFaceIndices, uint nbPatches, uint nbContacts);

        /// <summary>
        ///  Returns whether there are more patches in this stream.
        ///
        ///  Whether there are more patches in this stream.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_hasNextPatch", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxContactStreamIterator_hasNextPatch(PxContactStreamIterator* self_);

        /// <summary>
        ///  Returns the total contact count.
        ///
        ///  Total contact count.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getTotalContactCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactStreamIterator_getTotalContactCount(PxContactStreamIterator* self_);

        /// <summary>
        ///  Returns the total patch count.
        ///
        ///  Total patch count.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getTotalPatchCount", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactStreamIterator_getTotalPatchCount(PxContactStreamIterator* self_);

        /// <summary>
        ///  Advances iterator to next contact patch.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_nextPatch_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactStreamIterator_nextPatch_mut(PxContactStreamIterator* self_);

        /// <summary>
        ///  Returns if the current patch has more contacts.
        ///
        ///  If there are more contacts in the current patch.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_hasNextContact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxContactStreamIterator_hasNextContact(PxContactStreamIterator* self_);

        /// <summary>
        ///  Advances to the next contact in the patch.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_nextContact_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactStreamIterator_nextContact_mut(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the current contact's normal
        ///
        ///  The current contact's normal.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getContactNormal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxContactStreamIterator_getContactNormal(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the inverse mass scale for body 0.
        ///
        ///  The inverse mass scale for body 0.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getInvMassScale0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getInvMassScale0(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the inverse mass scale for body 1.
        ///
        ///  The inverse mass scale for body 1.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getInvMassScale1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getInvMassScale1(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the inverse inertia scale for body 0.
        ///
        ///  The inverse inertia scale for body 0.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getInvInertiaScale0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getInvInertiaScale0(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the inverse inertia scale for body 1.
        ///
        ///  The inverse inertia scale for body 1.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getInvInertiaScale1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getInvInertiaScale1(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's max impulse.
        ///
        ///  The contact's max impulse.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getMaxImpulse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getMaxImpulse(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's target velocity.
        ///
        ///  The contact's target velocity.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getTargetVel", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxContactStreamIterator_getTargetVel(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's contact point.
        ///
        ///  The contact's contact point.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getContactPoint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxContactStreamIterator_getContactPoint(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's separation.
        ///
        ///  The contact's separation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getSeparation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getSeparation(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's face index for shape 0.
        ///
        ///  The contact's face index for shape 0.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getFaceIndex0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactStreamIterator_getFaceIndex0(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's face index for shape 1.
        ///
        ///  The contact's face index for shape 1.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getFaceIndex1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactStreamIterator_getFaceIndex1(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's static friction coefficient.
        ///
        ///  The contact's static friction coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getStaticFriction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getStaticFriction(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's dynamic friction coefficient.
        ///
        ///  The contact's dynamic friction coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getDynamicFriction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getDynamicFriction(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's restitution coefficient.
        ///
        ///  The contact's restitution coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getRestitution", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getRestitution(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's damping value.
        ///
        ///  The contact's damping value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getDamping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactStreamIterator_getDamping(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's material flags.
        ///
        ///  The contact's material flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getMaterialFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactStreamIterator_getMaterialFlags(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's material index for shape 0.
        ///
        ///  The contact's material index for shape 0.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getMaterialIndex0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort PxContactStreamIterator_getMaterialIndex0(PxContactStreamIterator* self_);

        /// <summary>
        ///  Gets the contact's material index for shape 1.
        ///
        ///  The contact's material index for shape 1.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_getMaterialIndex1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort PxContactStreamIterator_getMaterialIndex1(PxContactStreamIterator* self_);

        /// <summary>
        ///  Advances the contact stream iterator to a specific contact index.
        ///
        ///  True if advancing was possible
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactStreamIterator_advanceToIndex_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxContactStreamIterator_advanceToIndex_mut(PxContactStreamIterator* self_, uint initialIndex);

        /// <summary>
        ///  Get the position of a specific contact point in the set.
        ///
        ///  Position to the requested point in world space
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getPoint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxContactSet_getPoint(PxContactSet* self_, uint i);

        /// <summary>
        ///  Alter the position of a specific contact point in the set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setPoint_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setPoint_mut(PxContactSet* self_, uint i, PxVec3* p);

        /// <summary>
        ///  Get the contact normal of a specific contact point in the set.
        ///
        ///  The requested normal in world space
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getNormal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxContactSet_getNormal(PxContactSet* self_, uint i);

        /// <summary>
        ///  Alter the contact normal of a specific contact point in the set.
        ///
        ///  Changing the normal can cause contact points to be ignored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setNormal_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setNormal_mut(PxContactSet* self_, uint i, PxVec3* n);

        /// <summary>
        ///  Get the separation distance of a specific contact point in the set.
        ///
        ///  The separation. Negative implies penetration.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getSeparation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getSeparation(PxContactSet* self_, uint i);

        /// <summary>
        ///  Alter the separation of a specific contact point in the set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setSeparation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setSeparation_mut(PxContactSet* self_, uint i, float s);

        /// <summary>
        ///  Get the target velocity of a specific contact point in the set.
        ///
        ///  The target velocity in world frame
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getTargetVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3* PxContactSet_getTargetVelocity(PxContactSet* self_, uint i);

        /// <summary>
        ///  Alter the target velocity of a specific contact point in the set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setTargetVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setTargetVelocity_mut(PxContactSet* self_, uint i, PxVec3* v);

        /// <summary>
        ///  Get the face index with respect to the first shape of the pair for a specific contact point in the set.
        ///
        ///  The face index of the first shape
        ///
        ///  At the moment, the first shape is never a tri-mesh, therefore this function always returns PXC_CONTACT_NO_FACE_INDEX
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getInternalFaceIndex0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactSet_getInternalFaceIndex0(PxContactSet* self_, uint i);

        /// <summary>
        ///  Get the face index with respect to the second shape of the pair for a specific contact point in the set.
        ///
        ///  The face index of the second shape
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getInternalFaceIndex1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactSet_getInternalFaceIndex1(PxContactSet* self_, uint i);

        /// <summary>
        ///  Get the maximum impulse for a specific contact point in the set.
        ///
        ///  The maximum impulse
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getMaxImpulse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getMaxImpulse(PxContactSet* self_, uint i);

        /// <summary>
        ///  Alter the maximum impulse for a specific contact point in the set.
        ///
        ///  Must be nonnegative. If set to zero, the contact point will be ignored
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setMaxImpulse_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setMaxImpulse_mut(PxContactSet* self_, uint i, float s);

        /// <summary>
        ///  Get the restitution coefficient for a specific contact point in the set.
        ///
        ///  The restitution coefficient
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getRestitution", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getRestitution(PxContactSet* self_, uint i);

        /// <summary>
        ///  Alter the restitution coefficient for a specific contact point in the set.
        ///
        ///  Valid ranges [0,1]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setRestitution_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setRestitution_mut(PxContactSet* self_, uint i, float r);

        /// <summary>
        ///  Get the static friction coefficient for a specific contact point in the set.
        ///
        ///  The friction coefficient (dimensionless)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getStaticFriction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getStaticFriction(PxContactSet* self_, uint i);

        /// <summary>
        ///  Alter the static friction coefficient for a specific contact point in the set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setStaticFriction_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setStaticFriction_mut(PxContactSet* self_, uint i, float f);

        /// <summary>
        ///  Get the static friction coefficient for a specific contact point in the set.
        ///
        ///  The friction coefficient
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getDynamicFriction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getDynamicFriction(PxContactSet* self_, uint i);

        /// <summary>
        ///  Alter the static dynamic coefficient for a specific contact point in the set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setDynamicFriction_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setDynamicFriction_mut(PxContactSet* self_, uint i, float f);

        /// <summary>
        ///  Ignore the contact point.
        ///
        ///  If a contact point is ignored then no force will get applied at this point. This can be used to disable collision in certain areas of a shape, for example.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_ignore_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_ignore_mut(PxContactSet* self_, uint i);

        /// <summary>
        ///  The number of contact points in the set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_size", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactSet_size(PxContactSet* self_);

        /// <summary>
        ///  Returns the invMassScale of body 0
        ///
        ///  A value
        ///  &lt;
        ///  1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact
        ///  treat the body as if it had infinite mass. Any value &gt; 1.f makes this contact treat the body as if it had smaller mass.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getInvMassScale0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getInvMassScale0(PxContactSet* self_);

        /// <summary>
        ///  Returns the invMassScale of body 1
        ///
        ///  A value
        ///  &lt;
        ///  1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact
        ///  treat the body as if it had infinite mass. Any value &gt; 1.f makes this contact treat the body as if it had smaller mass.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getInvMassScale1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getInvMassScale1(PxContactSet* self_);

        /// <summary>
        ///  Returns the invInertiaScale of body 0
        ///
        ///  A value
        ///  &lt;
        ///  1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact
        ///  treat the body as if it had infinite inertia. Any value &gt; 1.f makes this contact treat the body as if it had smaller inertia.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getInvInertiaScale0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getInvInertiaScale0(PxContactSet* self_);

        /// <summary>
        ///  Returns the invInertiaScale of body 1
        ///
        ///  A value
        ///  &lt;
        ///  1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact
        ///  treat the body as if it had infinite inertia. Any value &gt; 1.f makes this contact treat the body as if it had smaller inertia.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_getInvInertiaScale1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactSet_getInvInertiaScale1(PxContactSet* self_);

        /// <summary>
        ///  Sets the invMassScale of body 0
        ///
        ///  This can be set to any value in the range [0, PX_MAX_F32). A value
        ///  &lt;
        ///  1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact
        ///  treat the body as if it had infinite mass. Any value &gt; 1.f makes this contact treat the body as if it had smaller mass.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setInvMassScale0_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setInvMassScale0_mut(PxContactSet* self_, float scale);

        /// <summary>
        ///  Sets the invMassScale of body 1
        ///
        ///  This can be set to any value in the range [0, PX_MAX_F32). A value
        ///  &lt;
        ///  1.0 makes this contact treat the body as if it had larger mass. A value of 0.f makes this contact
        ///  treat the body as if it had infinite mass. Any value &gt; 1.f makes this contact treat the body as if it had smaller mass.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setInvMassScale1_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setInvMassScale1_mut(PxContactSet* self_, float scale);

        /// <summary>
        ///  Sets the invInertiaScale of body 0
        ///
        ///  This can be set to any value in the range [0, PX_MAX_F32). A value
        ///  &lt;
        ///  1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact
        ///  treat the body as if it had infinite inertia. Any value &gt; 1.f makes this contact treat the body as if it had smaller inertia.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setInvInertiaScale0_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setInvInertiaScale0_mut(PxContactSet* self_, float scale);

        /// <summary>
        ///  Sets the invInertiaScale of body 1
        ///
        ///  This can be set to any value in the range [0, PX_MAX_F32). A value
        ///  &lt;
        ///  1.0 makes this contact treat the body as if it had larger inertia. A value of 0.f makes this contact
        ///  treat the body as if it had infinite inertia. Any value &gt; 1.f makes this contact treat the body as if it had smaller inertia.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactSet_setInvInertiaScale1_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactSet_setInvInertiaScale1_mut(PxContactSet* self_, float scale);

        /// <summary>
        ///  Passes modifiable arrays of contacts to the application.
        ///
        ///  The initial contacts are regenerated from scratch each frame by collision detection.
        ///
        ///  The number of contacts can not be changed, so you cannot add your own contacts.  You may however
        ///  disable contacts using PxContactSet::ignore().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactModifyCallback_onContactModify_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactModifyCallback_onContactModify_mut(PxContactModifyCallback* self_, PxContactModifyPair* pairs, uint count);

        /// <summary>
        ///  Passes modifiable arrays of contacts to the application.
        ///
        ///  The initial contacts are regenerated from scratch each frame by collision detection.
        ///
        ///  The number of contacts can not be changed, so you cannot add your own contacts.  You may however
        ///  disable contacts using PxContactSet::ignore().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCCDContactModifyCallback_onCCDContactModify_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCCDContactModifyCallback_onCCDContactModify_mut(PxCCDContactModifyCallback* self_, PxContactModifyPair* pairs, uint count);

        /// <summary>
        ///  Notification if an object or its memory gets released
        ///
        ///  If release() gets called on a PxBase object, an eUSER_RELEASE event will get fired immediately. The object state can be queried in the callback but
        ///  it is not allowed to change the state. Furthermore, when reading from the object it is the user's responsibility to make sure that no other thread
        ///  is writing at the same time to the object (this includes the simulation itself, i.e., [`PxScene::fetchResults`]() must not get called at the same time).
        ///
        ///  Calling release() on a PxBase object does not necessarily trigger its destructor immediately. For example, the object can be shared and might still
        ///  be referenced by other objects or the simulation might still be running and accessing the object state. In such cases the destructor will be called
        ///  as soon as it is safe to do so. After the destruction of the object and its memory, an eMEMORY_RELEASE event will get fired. In this case it is not
        ///  allowed to dereference the object pointer in the callback.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDeletionListener_onRelease_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDeletionListener_onRelease_mut(PxDeletionListener* self_, PxBase* observed, void* userData, PxDeletionEventFlag deletionEvent);

        [DllImport(__DllName, EntryPoint = "PxBaseMaterial_isKindOf", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBaseMaterial_isKindOf(PxBaseMaterial* self_, byte* name);

        /// <summary>
        ///  Sets young's modulus which defines the body's stiffness
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFEMMaterial_setYoungsModulus_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFEMMaterial_setYoungsModulus_mut(PxFEMMaterial* self_, float young);

        /// <summary>
        ///  Retrieves the young's modulus value.
        ///
        ///  The young's modulus value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFEMMaterial_getYoungsModulus", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxFEMMaterial_getYoungsModulus(PxFEMMaterial* self_);

        /// <summary>
        ///  Sets the Poisson's ratio which defines the body's volume preservation. Completely incompressible materials have a poisson ratio of 0.5. Its value should not be set to exactly 0.5 because this leads to numerical problems.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFEMMaterial_setPoissons_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFEMMaterial_setPoissons_mut(PxFEMMaterial* self_, float poisson);

        /// <summary>
        ///  Retrieves the Poisson's ratio.
        ///
        ///  The Poisson's ratio.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFEMMaterial_getPoissons", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxFEMMaterial_getPoissons(PxFEMMaterial* self_);

        /// <summary>
        ///  Sets the dynamic friction value which defines the strength of resistance when two objects slide relative to each other while in contact.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFEMMaterial_setDynamicFriction_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFEMMaterial_setDynamicFriction_mut(PxFEMMaterial* self_, float dynamicFriction);

        /// <summary>
        ///  Retrieves the dynamic friction value
        ///
        ///  The dynamic friction value
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFEMMaterial_getDynamicFriction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxFEMMaterial_getDynamicFriction(PxFEMMaterial* self_);

        [DllImport(__DllName, EntryPoint = "PxFilterData_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFilterData PxFilterData_new(PxEMPTY anon_param0);

        /// <summary>
        ///  Default constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFilterData_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFilterData PxFilterData_new_1();

        /// <summary>
        ///  Constructor to set filter data initially.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFilterData_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFilterData PxFilterData_new_2(uint w0, uint w1, uint w2, uint w3);

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFilterData_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxFilterData_setToDefault_mut(PxFilterData* self_);

        /// <summary>
        ///  Extract filter object type from the filter attributes of a collision pair object
        ///
        ///  The type of the collision pair object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetFilterObjectType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFilterObjectType phys_PxGetFilterObjectType(uint attr);

        /// <summary>
        ///  Specifies whether the collision object belongs to a kinematic rigid body
        ///
        ///  True if the object belongs to a kinematic rigid body, else false
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxFilterObjectIsKinematic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxFilterObjectIsKinematic(uint attr);

        /// <summary>
        ///  Specifies whether the collision object is a trigger shape
        ///
        ///  True if the object is a trigger shape, else false
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxFilterObjectIsTrigger", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxFilterObjectIsTrigger(uint attr);

        /// <summary>
        ///  Filter method to specify how a pair of potentially colliding objects should be processed.
        ///
        ///  This method gets called when the filter flags returned by the filter shader (see [`PxSimulationFilterShader`])
        ///  indicate that the filter callback should be invoked ([`PxFilterFlag::eCALLBACK`] or #PxFilterFlag::eNOTIFY set).
        ///  Return the PxFilterFlag flags and set the PxPairFlag flags to define what the simulation should do with the given
        ///  collision pair.
        ///
        ///  Filter flags defining whether the pair should be discarded, temporarily ignored or processed and whether the pair
        ///  should be tracked and send a report on pair deletion through the filter callback
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationFilterCallback_pairFound_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFilterFlags PxSimulationFilterCallback_pairFound_mut(PxSimulationFilterCallback* self_, uint pairID, uint attributes0, PxFilterData filterData0, PxActor* a0, PxShape* s0, uint attributes1, PxFilterData filterData1, PxActor* a1, PxShape* s1, PxPairFlags* pairFlags);

        /// <summary>
        ///  Callback to inform that a tracked collision pair is gone.
        ///
        ///  This method gets called when a collision pair disappears or gets re-filtered. Only applies to
        ///  collision pairs which have been marked as filter callback pairs ([`PxFilterFlag::eNOTIFY`] set in #pairFound()).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationFilterCallback_pairLost_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationFilterCallback_pairLost_mut(PxSimulationFilterCallback* self_, uint pairID, uint attributes0, PxFilterData filterData0, uint attributes1, PxFilterData filterData1, [MarshalAs(UnmanagedType.U1)] bool objectRemoved);

        /// <summary>
        ///  Callback to give the opportunity to change the filter state of a tracked collision pair.
        ///
        ///  This method gets called once per simulation step to let the application change the filter and pair
        ///  flags of a collision pair that has been reported in [`pairFound`]() and requested callbacks by
        ///  setting [`PxFilterFlag::eNOTIFY`]. To request a change of filter status, the target pair has to be
        ///  specified by its ID, the new filter and pair flags have to be provided and the method should return true.
        ///
        ///  If this method changes the filter status of a collision pair and the pair should keep being tracked
        ///  by the filter callbacks then [`PxFilterFlag::eNOTIFY`] has to be set.
        ///
        ///  The application is responsible to ensure that this method does not get called for pairs that have been
        ///  reported as lost, see [`pairLost`]().
        ///
        ///  True if the changes should be applied. In this case the method will get called again. False if
        ///  no more status changes should be done in the current simulation step. In that case the provided flags will be discarded.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationFilterCallback_statusChange_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSimulationFilterCallback_statusChange_mut(PxSimulationFilterCallback* self_, uint* pairID, PxPairFlags* pairFlags, PxFilterFlags* filterFlags);

        /// <summary>
        ///  Any combination of PxDataAccessFlag::eREADABLE and PxDataAccessFlag::eWRITABLE
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLockedData_getDataAccessFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDataAccessFlags PxLockedData_getDataAccessFlags_mut(PxLockedData* self_);

        /// <summary>
        ///  Unlocks the bulk data.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLockedData_unlock_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxLockedData_unlock_mut(PxLockedData* self_);

        /// <summary>
        ///  virtual destructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxLockedData_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxLockedData_delete(PxLockedData* self_);

        /// <summary>
        ///  Sets the coefficient of dynamic friction.
        ///
        ///  The coefficient of dynamic friction should be in [0, PX_MAX_F32). If set to greater than staticFriction, the effective value of staticFriction will be increased to match.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake any actors which may be affected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_setDynamicFriction_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMaterial_setDynamicFriction_mut(PxMaterial* self_, float coef);

        /// <summary>
        ///  Retrieves the DynamicFriction value.
        ///
        ///  The coefficient of dynamic friction.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_getDynamicFriction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxMaterial_getDynamicFriction(PxMaterial* self_);

        /// <summary>
        ///  Sets the coefficient of static friction
        ///
        ///  The coefficient of static friction should be in the range [0, PX_MAX_F32)
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake any actors which may be affected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_setStaticFriction_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMaterial_setStaticFriction_mut(PxMaterial* self_, float coef);

        /// <summary>
        ///  Retrieves the coefficient of static friction.
        ///
        ///  The coefficient of static friction.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_getStaticFriction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxMaterial_getStaticFriction(PxMaterial* self_);

        /// <summary>
        ///  Sets the coefficient of restitution
        ///
        ///  A coefficient of 0 makes the object bounce as little as possible, higher values up to 1.0 result in more bounce.
        ///
        ///  This property is overloaded when PxMaterialFlag::eCOMPLIANT_CONTACT flag is enabled. This permits negative values for restitution to be provided.
        ///  The negative values are converted into spring stiffness terms for an implicit spring simulated at the contact site, with the spring positional error defined by
        ///  the contact separation value. Higher stiffness terms produce stiffer springs that behave more like a rigid contact.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake any actors which may be affected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_setRestitution_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMaterial_setRestitution_mut(PxMaterial* self_, float rest);

        /// <summary>
        ///  Retrieves the coefficient of restitution.
        ///
        ///  See [`setRestitution`].
        ///
        ///  The coefficient of restitution.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_getRestitution", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxMaterial_getRestitution(PxMaterial* self_);

        /// <summary>
        ///  Sets the coefficient of damping
        ///
        ///  This property only affects the simulation if PxMaterialFlag::eCOMPLIANT_CONTACT is raised.
        ///  Damping works together with spring stiffness (set through a negative restitution value). Spring stiffness corrects positional error while
        ///  damping resists relative velocity. Setting a high damping coefficient can produce spongy contacts.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake any actors which may be affected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_setDamping_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMaterial_setDamping_mut(PxMaterial* self_, float damping);

        /// <summary>
        ///  Retrieves the coefficient of damping.
        ///
        ///  See [`setDamping`].
        ///
        ///  The coefficient of damping.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_getDamping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxMaterial_getDamping(PxMaterial* self_);

        /// <summary>
        ///  Raises or clears a particular material flag.
        ///
        ///  See the list of flags [`PxMaterialFlag`]
        ///
        ///  Default:
        ///  eIMPROVED_PATCH_FRICTION
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake any actors which may be affected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_setFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMaterial_setFlag_mut(PxMaterial* self_, PxMaterialFlag flag, [MarshalAs(UnmanagedType.U1)] bool b);

        /// <summary>
        ///  sets all the material flags.
        ///
        ///  See the list of flags [`PxMaterialFlag`]
        ///
        ///  Default:
        ///  eIMPROVED_PATCH_FRICTION
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake any actors which may be affected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_setFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMaterial_setFlags_mut(PxMaterial* self_, PxMaterialFlags flags);

        /// <summary>
        ///  Retrieves the flags. See [`PxMaterialFlag`].
        ///
        ///  The material flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_getFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMaterialFlags PxMaterial_getFlags(PxMaterial* self_);

        /// <summary>
        ///  Sets the friction combine mode.
        ///
        ///  See the enum ::PxCombineMode .
        ///
        ///  Default:
        ///  PxCombineMode::eAVERAGE
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake any actors which may be affected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_setFrictionCombineMode_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMaterial_setFrictionCombineMode_mut(PxMaterial* self_, PxCombineMode combMode);

        /// <summary>
        ///  Retrieves the friction combine mode.
        ///
        ///  See [`setFrictionCombineMode`].
        ///
        ///  The friction combine mode for this material.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_getFrictionCombineMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCombineMode PxMaterial_getFrictionCombineMode(PxMaterial* self_);

        /// <summary>
        ///  Sets the restitution combine mode.
        ///
        ///  See the enum ::PxCombineMode .
        ///
        ///  Default:
        ///  PxCombineMode::eAVERAGE
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake any actors which may be affected.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_setRestitutionCombineMode_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMaterial_setRestitutionCombineMode_mut(PxMaterial* self_, PxCombineMode combMode);

        /// <summary>
        ///  Retrieves the restitution combine mode.
        ///
        ///  See [`setRestitutionCombineMode`].
        ///
        ///  The coefficient of restitution combine mode for this material.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMaterial_getRestitutionCombineMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCombineMode PxMaterial_getRestitutionCombineMode(PxMaterial* self_);

        [DllImport(__DllName, EntryPoint = "PxMaterial_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxMaterial_getConcreteTypeName(PxMaterial* self_);

        /// <summary>
        ///  Construct parameters with default values.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDiffuseParticleParams_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDiffuseParticleParams PxDiffuseParticleParams_new();

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDiffuseParticleParams_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDiffuseParticleParams_setToDefault_mut(PxDiffuseParticleParams* self_);

        /// <summary>
        ///  Sets friction
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_setFriction_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxParticleMaterial_setFriction_mut(PxParticleMaterial* self_, float friction);

        /// <summary>
        ///  Retrieves the friction value.
        ///
        ///  The friction value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_getFriction", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxParticleMaterial_getFriction(PxParticleMaterial* self_);

        /// <summary>
        ///  Sets velocity damping term
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_setDamping_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxParticleMaterial_setDamping_mut(PxParticleMaterial* self_, float damping);

        /// <summary>
        ///  Retrieves the velocity damping term
        ///
        ///  The velocity damping term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_getDamping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxParticleMaterial_getDamping(PxParticleMaterial* self_);

        /// <summary>
        ///  Sets adhesion term
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_setAdhesion_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxParticleMaterial_setAdhesion_mut(PxParticleMaterial* self_, float adhesion);

        /// <summary>
        ///  Retrieves the adhesion term
        ///
        ///  The adhesion term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_getAdhesion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxParticleMaterial_getAdhesion(PxParticleMaterial* self_);

        /// <summary>
        ///  Sets gravity scale term
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_setGravityScale_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxParticleMaterial_setGravityScale_mut(PxParticleMaterial* self_, float scale);

        /// <summary>
        ///  Retrieves the gravity scale term
        ///
        ///  The gravity scale term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_getGravityScale", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxParticleMaterial_getGravityScale(PxParticleMaterial* self_);

        /// <summary>
        ///  Sets material adhesion radius scale. This is multiplied by the particle rest offset to compute the fall-off distance
        ///  at which point adhesion ceases to operate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_setAdhesionRadiusScale_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxParticleMaterial_setAdhesionRadiusScale_mut(PxParticleMaterial* self_, float scale);

        /// <summary>
        ///  Retrieves the adhesion radius scale.
        ///
        ///  The adhesion radius scale.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxParticleMaterial_getAdhesionRadiusScale", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxParticleMaterial_getAdhesionRadiusScale(PxParticleMaterial* self_);

        /// <summary>
        ///  Destroys the instance it is called on.
        ///
        ///  Use this release method to destroy an instance of this class. Be sure
        ///  to not keep a reference to this object after calling release.
        ///  Avoid release calls while a scene is simulating (in between simulate() and fetchResults() calls).
        ///
        ///  Note that this must be called once for each prior call to PxCreatePhysics, as
        ///  there is a reference counter. Also note that you mustn't destroy the PxFoundation instance (holding the allocator, error callback etc.)
        ///  until after the reference count reaches 0 and the SDK is actually removed.
        ///
        ///  Releasing an SDK will also release any objects created through it (scenes, triangle meshes, convex meshes, heightfields, shapes etc.),
        ///  provided the user hasn't already done so.
        ///
        ///  Releasing the PxPhysics instance is a prerequisite to releasing the PxFoundation instance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPhysics_release_mut(PxPhysics* self_);

        /// <summary>
        ///  Retrieves the Foundation instance.
        ///
        ///  A reference to the Foundation object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getFoundation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFoundation* PxPhysics_getFoundation_mut(PxPhysics* self_);

        /// <summary>
        ///  Creates an aggregate with the specified maximum size and filtering hint.
        ///
        ///  The previous API used "bool enableSelfCollision" which should now silently evaluates
        ///  to a PxAggregateType::eGENERIC aggregate with its self-collision bit.
        ///
        ///  Use PxAggregateType::eSTATIC or PxAggregateType::eKINEMATIC for aggregates that will
        ///  only contain static or kinematic actors. This provides faster filtering when used in
        ///  combination with PxPairFilteringMode.
        ///
        ///  The new aggregate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createAggregate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAggregate* PxPhysics_createAggregate_mut(PxPhysics* self_, uint maxActor, uint maxShape, uint filterHint);

        /// <summary>
        ///  Returns the simulation tolerance parameters.
        ///
        ///  The current simulation tolerance parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getTolerancesScale", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTolerancesScale* PxPhysics_getTolerancesScale(PxPhysics* self_);

        /// <summary>
        ///  Creates a triangle mesh object.
        ///
        ///  This can then be instanced into [`PxShape`] objects.
        ///
        ///  The new triangle mesh.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createTriangleMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangleMesh* PxPhysics_createTriangleMesh_mut(PxPhysics* self_, PxInputStream* stream);

        /// <summary>
        ///  Return the number of triangle meshes that currently exist.
        ///
        ///  Number of triangle meshes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getNbTriangleMeshes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getNbTriangleMeshes(PxPhysics* self_);

        /// <summary>
        ///  Writes the array of triangle mesh pointers to a user buffer.
        ///
        ///  Returns the number of pointers written.
        ///
        ///  The ordering of the triangle meshes in the array is not specified.
        ///
        ///  The number of triangle mesh pointers written to userBuffer, this should be less or equal to bufferSize.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getTriangleMeshes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getTriangleMeshes(PxPhysics* self_, PxTriangleMesh** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Creates a tetrahedron mesh object.
        ///
        ///  This can then be instanced into [`PxShape`] objects.
        ///
        ///  The new tetrahedron mesh.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createTetrahedronMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMesh* PxPhysics_createTetrahedronMesh_mut(PxPhysics* self_, PxInputStream* stream);

        /// <summary>
        ///  Creates a softbody mesh object.
        ///
        ///  The new softbody mesh.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createSoftBodyMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSoftBodyMesh* PxPhysics_createSoftBodyMesh_mut(PxPhysics* self_, PxInputStream* stream);

        /// <summary>
        ///  Return the number of tetrahedron meshes that currently exist.
        ///
        ///  Number of tetrahedron meshes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getNbTetrahedronMeshes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getNbTetrahedronMeshes(PxPhysics* self_);

        /// <summary>
        ///  Writes the array of tetrahedron mesh pointers to a user buffer.
        ///
        ///  Returns the number of pointers written.
        ///
        ///  The ordering of the tetrahedron meshes in the array is not specified.
        ///
        ///  The number of tetrahedron mesh pointers written to userBuffer, this should be less or equal to bufferSize.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getTetrahedronMeshes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getTetrahedronMeshes(PxPhysics* self_, PxTetrahedronMesh** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Creates a heightfield object from previously cooked stream.
        ///
        ///  This can then be instanced into [`PxShape`] objects.
        ///
        ///  The new heightfield.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createHeightField_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightField* PxPhysics_createHeightField_mut(PxPhysics* self_, PxInputStream* stream);

        /// <summary>
        ///  Return the number of heightfields that currently exist.
        ///
        ///  Number of heightfields.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getNbHeightFields", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getNbHeightFields(PxPhysics* self_);

        /// <summary>
        ///  Writes the array of heightfield pointers to a user buffer.
        ///
        ///  Returns the number of pointers written.
        ///
        ///  The ordering of the heightfields in the array is not specified.
        ///
        ///  The number of heightfield pointers written to userBuffer, this should be less or equal to bufferSize.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getHeightFields", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getHeightFields(PxPhysics* self_, PxHeightField** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Creates a convex mesh object.
        ///
        ///  This can then be instanced into [`PxShape`] objects.
        ///
        ///  The new convex mesh.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createConvexMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConvexMesh* PxPhysics_createConvexMesh_mut(PxPhysics* self_, PxInputStream* stream);

        /// <summary>
        ///  Return the number of convex meshes that currently exist.
        ///
        ///  Number of convex meshes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getNbConvexMeshes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getNbConvexMeshes(PxPhysics* self_);

        /// <summary>
        ///  Writes the array of convex mesh pointers to a user buffer.
        ///
        ///  Returns the number of pointers written.
        ///
        ///  The ordering of the convex meshes in the array is not specified.
        ///
        ///  The number of convex mesh pointers written to userBuffer, this should be less or equal to bufferSize.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getConvexMeshes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getConvexMeshes(PxPhysics* self_, PxConvexMesh** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Creates a bounding volume hierarchy.
        ///
        ///  The new BVH.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createBVH_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBVH* PxPhysics_createBVH_mut(PxPhysics* self_, PxInputStream* stream);

        /// <summary>
        ///  Return the number of bounding volume hierarchies that currently exist.
        ///
        ///  Number of bounding volume hierarchies.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getNbBVHs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getNbBVHs(PxPhysics* self_);

        /// <summary>
        ///  Writes the array of bounding volume hierarchy pointers to a user buffer.
        ///
        ///  Returns the number of pointers written.
        ///
        ///  The ordering of the BVHs in the array is not specified.
        ///
        ///  The number of BVH pointers written to userBuffer, this should be less or equal to bufferSize.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getBVHs", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getBVHs(PxPhysics* self_, PxBVH** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Creates a scene.
        ///
        ///  Every scene uses a Thread Local Storage slot. This imposes a platform specific limit on the
        ///  number of scenes that can be created.
        ///
        ///  The new scene object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createScene_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxScene* PxPhysics_createScene_mut(PxPhysics* self_, PxSceneDesc* sceneDesc);

        /// <summary>
        ///  Gets number of created scenes.
        ///
        ///  The number of scenes created.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getNbScenes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getNbScenes(PxPhysics* self_);

        /// <summary>
        ///  Writes the array of scene pointers to a user buffer.
        ///
        ///  Returns the number of pointers written.
        ///
        ///  The ordering of the scene pointers in the array is not specified.
        ///
        ///  The number of scene pointers written to userBuffer, this should be less or equal to bufferSize.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getScenes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getScenes(PxPhysics* self_, PxScene** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Creates a static rigid actor with the specified pose and all other fields initialized
        ///  to their default values.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createRigidStatic_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidStatic* PxPhysics_createRigidStatic_mut(PxPhysics* self_, PxTransform* pose);

        /// <summary>
        ///  Creates a dynamic rigid actor with the specified pose and all other fields initialized
        ///  to their default values.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createRigidDynamic_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidDynamic* PxPhysics_createRigidDynamic_mut(PxPhysics* self_, PxTransform* pose);

        /// <summary>
        ///  Creates a pruning structure from actors.
        ///
        ///  Every provided actor needs at least one shape with the eSCENE_QUERY_SHAPE flag set.
        ///
        ///  Both static and dynamic actors can be provided.
        ///
        ///  It is not allowed to pass in actors which are already part of a scene.
        ///
        ///  Articulation links cannot be provided.
        ///
        ///  Pruning structure created from given actors, or NULL if any of the actors did not comply with the above requirements.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createPruningStructure_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPruningStructure* PxPhysics_createPruningStructure_mut(PxPhysics* self_, PxRigidActor** actors, uint nbActors);

        /// <summary>
        ///  Creates a shape which may be attached to multiple actors
        ///
        ///  The shape will be created with a reference count of 1.
        ///
        ///  The shape
        ///
        ///  Shared shapes are not mutable when they are attached to an actor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createShape_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxShape* PxPhysics_createShape_mut(PxPhysics* self_, PxGeometry* geometry, PxMaterial* material, [MarshalAs(UnmanagedType.U1)] bool isExclusive, PxShapeFlags shapeFlags);

        /// <summary>
        ///  Creates a shape which may be attached to multiple actors
        ///
        ///  The shape will be created with a reference count of 1.
        ///
        ///  The shape
        ///
        ///  Shared shapes are not mutable when they are attached to an actor
        ///
        ///  Shapes created from *SDF* triangle-mesh geometries do not support more than one material.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createShape_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxShape* PxPhysics_createShape_mut_1(PxPhysics* self_, PxGeometry* geometry, PxMaterial** materials, ushort materialCount, [MarshalAs(UnmanagedType.U1)] bool isExclusive, PxShapeFlags shapeFlags);

        /// <summary>
        ///  Return the number of shapes that currently exist.
        ///
        ///  Number of shapes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getNbShapes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getNbShapes(PxPhysics* self_);

        /// <summary>
        ///  Writes the array of shape pointers to a user buffer.
        ///
        ///  Returns the number of pointers written.
        ///
        ///  The ordering of the shapes in the array is not specified.
        ///
        ///  The number of shape pointers written to userBuffer, this should be less or equal to bufferSize.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getShapes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getShapes(PxPhysics* self_, PxShape** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Creates a constraint shader.
        ///
        ///  A constraint shader will get added automatically to the scene the two linked actors belong to. Either, but not both, of actor0 and actor1 may
        ///  be NULL to denote attachment to the world.
        ///
        ///  The new constraint shader.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createConstraint_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConstraint* PxPhysics_createConstraint_mut(PxPhysics* self_, PxRigidActor* actor0, PxRigidActor* actor1, PxConstraintConnector* connector, PxConstraintShaderTable* shaders, uint dataSize);

        /// <summary>
        ///  Creates a reduced-coordinate articulation with all fields initialized to their default values.
        ///
        ///  the new articulation
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createArticulationReducedCoordinate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxArticulationReducedCoordinate* PxPhysics_createArticulationReducedCoordinate_mut(PxPhysics* self_);

        /// <summary>
        ///  Creates a new rigid body material with certain default properties.
        ///
        ///  The new rigid body material.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_createMaterial_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMaterial* PxPhysics_createMaterial_mut(PxPhysics* self_, float staticFriction, float dynamicFriction, float restitution);

        /// <summary>
        ///  Return the number of rigid body materials that currently exist.
        ///
        ///  Number of rigid body materials.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getNbMaterials", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getNbMaterials(PxPhysics* self_);

        /// <summary>
        ///  Writes the array of rigid body material pointers to a user buffer.
        ///
        ///  Returns the number of pointers written.
        ///
        ///  The ordering of the materials in the array is not specified.
        ///
        ///  The number of material pointers written to userBuffer, this should be less or equal to bufferSize.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getMaterials", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPhysics_getMaterials(PxPhysics* self_, PxMaterial** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Register a deletion listener. Listeners will be called whenever an object is deleted.
        ///
        ///  It is illegal to register or unregister a deletion listener while deletions are being processed.
        ///
        ///  By default a registered listener will receive events from all objects. Set the restrictedObjectSet parameter to true on registration and use [`registerDeletionListenerObjects`] to restrict the received events to specific objects.
        ///
        ///  The deletion events are only supported on core PhysX objects. In general, objects in extension modules do not provide this functionality, however, in the case of PxJoint objects, the underlying PxConstraint will send the events.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_registerDeletionListener_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPhysics_registerDeletionListener_mut(PxPhysics* self_, PxDeletionListener* observer, PxDeletionEventFlags* deletionEvents, [MarshalAs(UnmanagedType.U1)] bool restrictedObjectSet);

        /// <summary>
        ///  Unregister a deletion listener.
        ///
        ///  It is illegal to register or unregister a deletion listener while deletions are being processed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_unregisterDeletionListener_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPhysics_unregisterDeletionListener_mut(PxPhysics* self_, PxDeletionListener* observer);

        /// <summary>
        ///  Register specific objects for deletion events.
        ///
        ///  This method allows for a deletion listener to limit deletion events to specific objects only.
        ///
        ///  It is illegal to register or unregister objects while deletions are being processed.
        ///
        ///  The deletion listener has to be registered through [`registerDeletionListener`]() and configured to support restricted object sets prior to this method being used.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_registerDeletionListenerObjects_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPhysics_registerDeletionListenerObjects_mut(PxPhysics* self_, PxDeletionListener* observer, PxBase** observables, uint observableCount);

        /// <summary>
        ///  Unregister specific objects for deletion events.
        ///
        ///  This method allows to clear previously registered objects for a deletion listener (see [`registerDeletionListenerObjects`]()).
        ///
        ///  It is illegal to register or unregister objects while deletions are being processed.
        ///
        ///  The deletion listener has to be registered through [`registerDeletionListener`]() and configured to support restricted object sets prior to this method being used.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_unregisterDeletionListenerObjects_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPhysics_unregisterDeletionListenerObjects_mut(PxPhysics* self_, PxDeletionListener* observer, PxBase** observables, uint observableCount);

        /// <summary>
        ///  Gets PxPhysics object insertion interface.
        ///
        ///  The insertion interface is needed for PxCreateTriangleMesh, PxCooking::createTriangleMesh etc., this allows runtime mesh creation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPhysics_getPhysicsInsertionCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxInsertionCallback* PxPhysics_getPhysicsInsertionCallback_mut(PxPhysics* self_);

        /// <summary>
        ///  Creates an instance of the physics SDK.
        ///
        ///  Creates an instance of this class. May not be a class member to avoid name mangling.
        ///  Pass the constant [`PX_PHYSICS_VERSION`] as the argument.
        ///  There may be only one instance of this class per process. Calling this method after an instance
        ///  has been created already will result in an error message and NULL will be returned.
        ///
        ///  Calling this will register all optional code modules (Articulations and HeightFields), preparing them for use.
        ///  If you do not need some of these modules, consider calling PxCreateBasePhysics() instead and registering needed
        ///  modules manually.
        ///
        ///  PxPhysics instance on success, NULL if operation failed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreatePhysics", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPhysics* phys_PxCreatePhysics(uint version, PxFoundation* foundation, PxTolerancesScale* scale, [MarshalAs(UnmanagedType.U1)] bool trackOutstandingAllocations, PxPvd* pvd, PxOmniPvd* omniPvd);

        [DllImport(__DllName, EntryPoint = "phys_PxGetPhysics", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPhysics* phys_PxGetPhysics();

        [DllImport(__DllName, EntryPoint = "PxActorShape_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxActorShape PxActorShape_new();

        [DllImport(__DllName, EntryPoint = "PxActorShape_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxActorShape PxActorShape_new_1(PxRigidActor* a, PxShape* s);

        /// <summary>
        ///  constructor sets to default
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQueryCache_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryCache PxQueryCache_new();

        /// <summary>
        ///  constructor to set properties
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQueryCache_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryCache PxQueryCache_new_1(PxShape* s, uint findex);

        /// <summary>
        ///  default constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQueryFilterData_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryFilterData PxQueryFilterData_new();

        /// <summary>
        ///  constructor to set both filter data and filter flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQueryFilterData_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryFilterData PxQueryFilterData_new_1(PxFilterData* fd, PxQueryFlags f);

        /// <summary>
        ///  constructor to set filter flags only
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQueryFilterData_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryFilterData PxQueryFilterData_new_2(PxQueryFlags f);

        /// <summary>
        ///  This filter callback is executed before the exact intersection test if PxQueryFlag::ePREFILTER flag was set.
        ///
        ///  the updated type for this hit  (see [`PxQueryHitType`])
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQueryFilterCallback_preFilter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryHitType PxQueryFilterCallback_preFilter_mut(PxQueryFilterCallback* self_, PxFilterData* filterData, PxShape* shape, PxRigidActor* actor, PxHitFlags* queryFlags);

        /// <summary>
        ///  This filter callback is executed if the exact intersection test returned true and PxQueryFlag::ePOSTFILTER flag was set.
        ///
        ///  the updated hit type for this hit  (see [`PxQueryHitType`])
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQueryFilterCallback_postFilter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxQueryHitType PxQueryFilterCallback_postFilter_mut(PxQueryFilterCallback* self_, PxFilterData* filterData, PxQueryHit* hit, PxShape* shape, PxRigidActor* actor);

        /// <summary>
        ///  virtual destructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxQueryFilterCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxQueryFilterCallback_delete(PxQueryFilterCallback* self_);

        /// <summary>
        ///  Moves kinematically controlled dynamic actors through the game world.
        ///
        ///  You set a dynamic actor to be kinematic using the PxRigidBodyFlag::eKINEMATIC flag
        ///  with setRigidBodyFlag().
        ///
        ///  The move command will result in a velocity that will move the body into
        ///  the desired pose. After the move is carried out during a single time step,
        ///  the velocity is returned to zero. Thus, you must continuously call
        ///  this in every time step for kinematic actors so that they move along a path.
        ///
        ///  This function simply stores the move destination until the next simulation
        ///  step is processed, so consecutive calls will simply overwrite the stored target variable.
        ///
        ///  The motion is always fully carried out.
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping and will set the wake counter to [`PxSceneDesc::wakeCounterResetValue`].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setKinematicTarget_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setKinematicTarget_mut(PxRigidDynamic* self_, PxTransform* destination);

        /// <summary>
        ///  Get target pose of a kinematically controlled dynamic actor.
        ///
        ///  True if the actor is a kinematically controlled dynamic and the target has been set, else False.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getKinematicTarget", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRigidDynamic_getKinematicTarget(PxRigidDynamic* self_, PxTransform* target);

        /// <summary>
        ///  Returns true if this body is sleeping.
        ///
        ///  When an actor does not move for a period of time, it is no longer simulated in order to save time. This state
        ///  is called sleeping. However, because the object automatically wakes up when it is either touched by an awake object,
        ///  or one of its properties is changed by the user, the entire sleep mechanism should be transparent to the user.
        ///
        ///  In general, a dynamic rigid actor is guaranteed to be awake if at least one of the following holds:
        ///
        ///  The wake counter is positive (see [`setWakeCounter`]()).
        ///
        ///  The linear or angular velocity is non-zero.
        ///
        ///  A non-zero force or torque has been applied.
        ///
        ///  If a dynamic rigid actor is sleeping, the following state is guaranteed:
        ///
        ///  The wake counter is zero.
        ///
        ///  The linear and angular velocity is zero.
        ///
        ///  There is no force update pending.
        ///
        ///  When an actor gets inserted into a scene, it will be considered asleep if all the points above hold, else it will be treated as awake.
        ///
        ///  If an actor is asleep after the call to PxScene::fetchResults() returns, it is guaranteed that the pose of the actor
        ///  was not changed. You can use this information to avoid updating the transforms of associated objects.
        ///
        ///  A kinematic actor is asleep unless a target pose has been set (in which case it will stay awake until two consecutive
        ///  simulation steps without a target pose being set have passed). The wake counter will get set to zero or to the reset value
        ///  [`PxSceneDesc::wakeCounterResetValue`] in the case where a target pose has been set to be consistent with the definitions above.
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already.
        ///
        ///  It is not allowed to use this method while the simulation is running.
        ///
        ///  True if the actor is sleeping.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_isSleeping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRigidDynamic_isSleeping(PxRigidDynamic* self_);

        /// <summary>
        ///  Sets the mass-normalized kinetic energy threshold below which an actor may go to sleep.
        ///
        ///  Actors whose kinetic energy divided by their mass is below this threshold will be candidates for sleeping.
        ///
        ///  Default:
        ///  5e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setSleepThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setSleepThreshold_mut(PxRigidDynamic* self_, float threshold);

        /// <summary>
        ///  Returns the mass-normalized kinetic energy below which an actor may go to sleep.
        ///
        ///  The energy threshold for sleeping.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getSleepThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidDynamic_getSleepThreshold(PxRigidDynamic* self_);

        /// <summary>
        ///  Sets the mass-normalized kinetic energy threshold below which an actor may participate in stabilization.
        ///
        ///  Actors whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.
        ///
        ///  This value has no effect if PxSceneFlag::eENABLE_STABILIZATION was not enabled on the PxSceneDesc.
        ///
        ///  Default:
        ///  1e-5f * PxTolerancesScale::speed * PxTolerancesScale::speed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setStabilizationThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setStabilizationThreshold_mut(PxRigidDynamic* self_, float threshold);

        /// <summary>
        ///  Returns the mass-normalized kinetic energy below which an actor may participate in stabilization.
        ///
        ///  Actors whose kinetic energy divided by their mass is above this threshold will not participate in stabilization.
        ///
        ///  The energy threshold for participating in stabilization.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getStabilizationThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidDynamic_getStabilizationThreshold(PxRigidDynamic* self_);

        /// <summary>
        ///  Reads the PxRigidDynamic lock flags.
        ///
        ///  See the list of flags [`PxRigidDynamicLockFlag`]
        ///
        ///  The values of the PxRigidDynamicLock flags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getRigidDynamicLockFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidDynamicLockFlags PxRigidDynamic_getRigidDynamicLockFlags(PxRigidDynamic* self_);

        /// <summary>
        ///  Raises or clears a particular rigid dynamic lock flag.
        ///
        ///  See the list of flags [`PxRigidDynamicLockFlag`]
        ///
        ///  Default:
        ///  no flags are set
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setRigidDynamicLockFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setRigidDynamicLockFlag_mut(PxRigidDynamic* self_, PxRigidDynamicLockFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setRigidDynamicLockFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setRigidDynamicLockFlags_mut(PxRigidDynamic* self_, PxRigidDynamicLockFlags flags);

        /// <summary>
        ///  Retrieves the linear velocity of an actor.
        ///
        ///  It is not allowed to use this method while the simulation is running (except during PxScene::collide(),
        ///  in PxContactModifyCallback or in contact report callbacks).
        ///
        ///  The linear velocity of the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getLinearVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidDynamic_getLinearVelocity(PxRigidDynamic* self_);

        /// <summary>
        ///  Sets the linear velocity of the actor.
        ///
        ///  Note that if you continuously set the velocity of an actor yourself,
        ///  forces such as gravity or friction will not be able to manifest themselves, because forces directly
        ///  influence only the velocity/momentum of an actor.
        ///
        ///  Default:
        ///  (0.0, 0.0, 0.0)
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the
        ///  new velocity is non-zero.
        ///
        ///  It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setLinearVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setLinearVelocity_mut(PxRigidDynamic* self_, PxVec3* linVel, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Retrieves the angular velocity of the actor.
        ///
        ///  It is not allowed to use this method while the simulation is running (except during PxScene::collide(),
        ///  in PxContactModifyCallback or in contact report callbacks).
        ///
        ///  The angular velocity of the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getAngularVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidDynamic_getAngularVelocity(PxRigidDynamic* self_);

        /// <summary>
        ///  Sets the angular velocity of the actor.
        ///
        ///  Note that if you continuously set the angular velocity of an actor yourself,
        ///  forces such as friction will not be able to rotate the actor, because forces directly influence only the velocity/momentum.
        ///
        ///  Default:
        ///  (0.0, 0.0, 0.0)
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping, and the autowake parameter is true (default) or the
        ///  new velocity is non-zero.
        ///
        ///  It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setAngularVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setAngularVelocity_mut(PxRigidDynamic* self_, PxVec3* angVel, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Sets the wake counter for the actor.
        ///
        ///  The wake counter value determines the minimum amount of time until the body can be put to sleep. Please note
        ///  that a body will not be put to sleep if the energy is above the specified threshold (see [`setSleepThreshold`]())
        ///  or if other awake bodies are touching it.
        ///
        ///  Passing in a positive value will wake the actor up automatically.
        ///
        ///  It is invalid to use this method for kinematic actors since the wake counter for kinematics is defined
        ///  based on whether a target pose has been set (see the comment in [`isSleeping`]()).
        ///
        ///  It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.
        ///
        ///  Default:
        ///  0.4 (which corresponds to 20 frames for a time step of 0.02)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setWakeCounter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setWakeCounter_mut(PxRigidDynamic* self_, float wakeCounterValue);

        /// <summary>
        ///  Returns the wake counter of the actor.
        ///
        ///  It is not allowed to use this method while the simulation is running.
        ///
        ///  The wake counter of the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getWakeCounter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidDynamic_getWakeCounter(PxRigidDynamic* self_);

        /// <summary>
        ///  Wakes up the actor if it is sleeping.
        ///
        ///  The actor will get woken up and might cause other touching actors to wake up as well during the next simulation step.
        ///
        ///  This will set the wake counter of the actor to the value specified in [`PxSceneDesc::wakeCounterResetValue`].
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.
        ///
        ///  It is invalid to use this method for kinematic actors since the sleep state for kinematics is defined
        ///  based on whether a target pose has been set (see the comment in [`isSleeping`]()).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_wakeUp_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_wakeUp_mut(PxRigidDynamic* self_);

        /// <summary>
        ///  Forces the actor to sleep.
        ///
        ///  The actor will stay asleep during the next simulation step if not touched by another non-sleeping actor.
        ///
        ///  Any applied force will be cleared and the velocity and the wake counter of the actor will be set to 0.
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already or if PxActorFlag::eDISABLE_SIMULATION is set.
        ///
        ///  It is invalid to use this method for kinematic actors since the sleep state for kinematics is defined
        ///  based on whether a target pose has been set (see the comment in [`isSleeping`]()).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_putToSleep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_putToSleep_mut(PxRigidDynamic* self_);

        /// <summary>
        ///  Sets the solver iteration counts for the body.
        ///
        ///  The solver iteration count determines how accurately joints and contacts are resolved.
        ///  If you are having trouble with jointed bodies oscillating and behaving erratically, then
        ///  setting a higher position iteration count may improve their stability.
        ///
        ///  If intersecting bodies are being depenetrated too violently, increase the number of velocity
        ///  iterations. More velocity iterations will drive the relative exit velocity of the intersecting
        ///  objects closer to the correct value given the restitution.
        ///
        ///  Default:
        ///  4 position iterations, 1 velocity iteration
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setSolverIterationCounts_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setSolverIterationCounts_mut(PxRigidDynamic* self_, uint minPositionIters, uint minVelocityIters);

        /// <summary>
        ///  Retrieves the solver iteration counts.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getSolverIterationCounts", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_getSolverIterationCounts(PxRigidDynamic* self_, uint* minPositionIters, uint* minVelocityIters);

        /// <summary>
        ///  Retrieves the force threshold for contact reports.
        ///
        ///  The contact report threshold is a force threshold. If the force between
        ///  two actors exceeds this threshold for either of the two actors, a contact report
        ///  will be generated according to the contact report threshold flags provided by
        ///  the filter shader/callback.
        ///  See [`PxPairFlag`].
        ///
        ///  The threshold used for a collision between a dynamic actor and the static environment is
        ///  the threshold of the dynamic actor, and all contacts with static actors are summed to find
        ///  the total normal force.
        ///
        ///  Default:
        ///  PX_MAX_F32
        ///
        ///  Force threshold for contact reports.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getContactReportThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRigidDynamic_getContactReportThreshold(PxRigidDynamic* self_);

        /// <summary>
        ///  Sets the force threshold for contact reports.
        ///
        ///  See [`getContactReportThreshold`]().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_setContactReportThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidDynamic_setContactReportThreshold_mut(PxRigidDynamic* self_, float threshold);

        [DllImport(__DllName, EntryPoint = "PxRigidDynamic_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxRigidDynamic_getConcreteTypeName(PxRigidDynamic* self_);

        [DllImport(__DllName, EntryPoint = "PxRigidStatic_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxRigidStatic_getConcreteTypeName(PxRigidStatic* self_);

        /// <summary>
        ///  constructor sets to default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneQueryDesc PxSceneQueryDesc_new();

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQueryDesc_setToDefault_mut(PxSceneQueryDesc* self_);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQueryDesc_isValid(PxSceneQueryDesc* self_);

        /// <summary>
        ///  Sets the rebuild rate of the dynamic tree pruning structures.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_setDynamicTreeRebuildRateHint_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystemBase_setDynamicTreeRebuildRateHint_mut(PxSceneQuerySystemBase* self_, uint dynamicTreeRebuildRateHint);

        /// <summary>
        ///  Retrieves the rebuild rate of the dynamic tree pruning structures.
        ///
        ///  The rebuild rate of the dynamic tree pruning structures.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_getDynamicTreeRebuildRateHint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSceneQuerySystemBase_getDynamicTreeRebuildRateHint(PxSceneQuerySystemBase* self_);

        /// <summary>
        ///  Forces dynamic trees to be immediately rebuilt.
        ///
        ///  PxScene will call this function with the PX_SCENE_PRUNER_STATIC or PX_SCENE_PRUNER_DYNAMIC value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_forceRebuildDynamicTree_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystemBase_forceRebuildDynamicTree_mut(PxSceneQuerySystemBase* self_, uint prunerIndex);

        /// <summary>
        ///  Sets scene query update mode
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_setUpdateMode_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystemBase_setUpdateMode_mut(PxSceneQuerySystemBase* self_, PxSceneQueryUpdateMode updateMode);

        /// <summary>
        ///  Gets scene query update mode
        ///
        ///  Current scene query update mode.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_getUpdateMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneQueryUpdateMode PxSceneQuerySystemBase_getUpdateMode(PxSceneQuerySystemBase* self_);

        /// <summary>
        ///  Retrieves the system's internal scene query timestamp, increased each time a change to the
        ///  static scene query structure is performed.
        ///
        ///  scene query static timestamp
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_getStaticTimestamp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSceneQuerySystemBase_getStaticTimestamp(PxSceneQuerySystemBase* self_);

        /// <summary>
        ///  Flushes any changes to the scene query representation.
        ///
        ///  This method updates the state of the scene query representation to match changes in the scene state.
        ///
        ///  By default, these changes are buffered until the next query is submitted. Calling this function will not change
        ///  the results from scene queries, but can be used to ensure that a query will not perform update work in the course of
        ///  its execution.
        ///
        ///  A thread performing updates will hold a write lock on the query structure, and thus stall other querying threads. In multithread
        ///  scenarios it can be useful to explicitly schedule the period where this lock may be held for a significant period, so that
        ///  subsequent queries issued from multiple threads will not block.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_flushUpdates_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystemBase_flushUpdates_mut(PxSceneQuerySystemBase* self_);

        /// <summary>
        ///  Performs a raycast against objects in the scene, returns results in a PxRaycastBuffer object
        ///  or via a custom user callback implementation inheriting from PxRaycastCallback.
        ///
        ///  Touching hits are not ordered.
        ///
        ///  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in user guide article SceneQuery. User can ignore such objects by employing one of the provided filter mechanisms.
        ///
        ///  True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_raycast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQuerySystemBase_raycast(PxSceneQuerySystemBase* self_, PxVec3* origin, PxVec3* unitDir, float distance, PxRaycastCallback* hitCall, PxHitFlags hitFlags, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Performs a sweep test against objects in the scene, returns results in a PxSweepBuffer object
        ///  or via a custom user callback implementation inheriting from PxSweepCallback.
        ///
        ///  Touching hits are not ordered.
        ///
        ///  If a shape from the scene is already overlapping with the query shape in its starting position,
        ///  the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.
        ///
        ///  True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_sweep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQuerySystemBase_sweep(PxSceneQuerySystemBase* self_, PxGeometry* geometry, PxTransform* pose, PxVec3* unitDir, float distance, PxSweepCallback* hitCall, PxHitFlags hitFlags, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache, float inflation, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Performs an overlap test of a given geometry against objects in the scene, returns results in a PxOverlapBuffer object
        ///  or via a custom user callback implementation inheriting from PxOverlapCallback.
        ///
        ///  Filtering: returning eBLOCK from user filter for overlap queries will cause a warning (see [`PxQueryHitType`]).
        ///
        ///  True if any touching or blocking hits were found or any hit was found in case PxQueryFlag::eANY_HIT was specified.
        ///
        ///  eBLOCK should not be returned from user filters for overlap(). Doing so will result in undefined behavior, and a warning will be issued.
        ///
        ///  If the PxQueryFlag::eNO_BLOCK flag is set, the eBLOCK will instead be automatically converted to an eTOUCH and the warning suppressed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystemBase_overlap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQuerySystemBase_overlap(PxSceneQuerySystemBase* self_, PxGeometry* geometry, PxTransform* pose, PxOverlapCallback* hitCall, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache, PxGeometryQueryFlags queryFlags);

        /// <summary>
        ///  Sets scene query update mode
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_setSceneQueryUpdateMode_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneSQSystem_setSceneQueryUpdateMode_mut(PxSceneSQSystem* self_, PxSceneQueryUpdateMode updateMode);

        /// <summary>
        ///  Gets scene query update mode
        ///
        ///  Current scene query update mode.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_getSceneQueryUpdateMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneQueryUpdateMode PxSceneSQSystem_getSceneQueryUpdateMode(PxSceneSQSystem* self_);

        /// <summary>
        ///  Retrieves the scene's internal scene query timestamp, increased each time a change to the
        ///  static scene query structure is performed.
        ///
        ///  scene query static timestamp
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_getSceneQueryStaticTimestamp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSceneSQSystem_getSceneQueryStaticTimestamp(PxSceneSQSystem* self_);

        /// <summary>
        ///  Flushes any changes to the scene query representation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_flushQueryUpdates_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneSQSystem_flushQueryUpdates_mut(PxSceneSQSystem* self_);

        /// <summary>
        ///  Forces dynamic trees to be immediately rebuilt.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_forceDynamicTreeRebuild_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneSQSystem_forceDynamicTreeRebuild_mut(PxSceneSQSystem* self_, [MarshalAs(UnmanagedType.U1)] bool rebuildStaticStructure, [MarshalAs(UnmanagedType.U1)] bool rebuildDynamicStructure);

        /// <summary>
        ///  Return the value of PxSceneQueryDesc::staticStructure that was set when creating the scene with PxPhysics::createScene
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_getStaticStructure", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPruningStructureType PxSceneSQSystem_getStaticStructure(PxSceneSQSystem* self_);

        /// <summary>
        ///  Return the value of PxSceneQueryDesc::dynamicStructure that was set when creating the scene with PxPhysics::createScene
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_getDynamicStructure", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPruningStructureType PxSceneSQSystem_getDynamicStructure(PxSceneSQSystem* self_);

        /// <summary>
        ///  Executes scene queries update tasks.
        ///
        ///  This function will refit dirty shapes within the pruner and will execute a task to build a new AABB tree, which is
        ///  build on a different thread. The new AABB tree is built based on the dynamic tree rebuild hint rate. Once
        ///  the new tree is ready it will be commited in next fetchQueries call, which must be called after.
        ///
        ///  This function is equivalent to the following PxSceneQuerySystem calls:
        ///  Synchronous calls:
        ///  - PxSceneQuerySystemBase::flushUpdates()
        ///  - handle0 = PxSceneQuerySystem::prepareSceneQueryBuildStep(PX_SCENE_PRUNER_STATIC)
        ///  - handle1 = PxSceneQuerySystem::prepareSceneQueryBuildStep(PX_SCENE_PRUNER_DYNAMIC)
        ///  Asynchronous calls:
        ///  - PxSceneQuerySystem::sceneQueryBuildStep(handle0);
        ///  - PxSceneQuerySystem::sceneQueryBuildStep(handle1);
        ///
        ///  This function is part of the PxSceneSQSystem interface because it uses the PxScene task system under the hood. But
        ///  it calls PxSceneQuerySystem functions, which are independent from this system and could be called in a similar
        ///  fashion by a separate, possibly user-defined task manager.
        ///
        ///  If PxSceneQueryUpdateMode::eBUILD_DISABLED_COMMIT_DISABLED is used, it is required to update the scene queries
        ///  using this function.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_sceneQueriesUpdate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneSQSystem_sceneQueriesUpdate_mut(PxSceneSQSystem* self_, PxBaseTask* completionTask, [MarshalAs(UnmanagedType.U1)] bool controlSimulation);

        /// <summary>
        ///  This checks to see if the scene queries update has completed.
        ///
        ///  This does not cause the data available for reading to be updated with the results of the scene queries update, it is simply a status check.
        ///  The bool will allow it to either return immediately or block waiting for the condition to be met so that it can return true
        ///
        ///  True if the results are available.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_checkQueries_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneSQSystem_checkQueries_mut(PxSceneSQSystem* self_, [MarshalAs(UnmanagedType.U1)] bool block);

        /// <summary>
        ///  This method must be called after sceneQueriesUpdate. It will wait for the scene queries update to finish. If the user makes an illegal scene queries update call,
        ///  the SDK will issue an error message.
        ///
        ///  If a new AABB tree build finished, then during fetchQueries the current tree within the pruning structure is swapped with the new tree.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneSQSystem_fetchQueries_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneSQSystem_fetchQueries_mut(PxSceneSQSystem* self_, [MarshalAs(UnmanagedType.U1)] bool block);

        /// <summary>
        ///  Decrements the reference count of the object and releases it if the new reference count is zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_release_mut(PxSceneQuerySystem* self_);

        /// <summary>
        ///  Acquires a counted reference to this object.
        ///
        ///  This method increases the reference count of the object by 1. Decrement the reference count by calling release()
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_acquireReference_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_acquireReference_mut(PxSceneQuerySystem* self_);

        /// <summary>
        ///  Preallocates internal arrays to minimize the amount of reallocations.
        ///
        ///  The system does not prevent more allocations than given numbers. It is legal to not call this function at all,
        ///  or to add more shapes to the system than the preallocated amounts.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_preallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_preallocate_mut(PxSceneQuerySystem* self_, uint prunerIndex, uint nbShapes);

        /// <summary>
        ///  Frees internal memory that may not be in-use anymore.
        ///
        ///  This is an entry point for reclaiming transient memory allocated at some point by the SQ system,
        ///  but which wasn't been immediately freed for performance reason. Calling this function might free
        ///  some memory, but it might also produce a new set of allocations in the next frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_flushMemory_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_flushMemory_mut(PxSceneQuerySystem* self_);

        /// <summary>
        ///  Adds a shape to the SQ system.
        ///
        ///  The same function is used to add either a regular shape, or a SQ compound shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_addSQShape_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_addSQShape_mut(PxSceneQuerySystem* self_, PxRigidActor* actor, PxShape* shape, PxBounds3* bounds, PxTransform* transform, uint* compoundHandle, [MarshalAs(UnmanagedType.U1)] bool hasPruningStructure);

        /// <summary>
        ///  Removes a shape from the SQ system.
        ///
        ///  The same function is used to remove either a regular shape, or a SQ compound shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_removeSQShape_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_removeSQShape_mut(PxSceneQuerySystem* self_, PxRigidActor* actor, PxShape* shape);

        /// <summary>
        ///  Updates a shape in the SQ system.
        ///
        ///  The same function is used to update either a regular shape, or a SQ compound shape.
        ///
        ///  The transforms are eager-evaluated, but the bounds are lazy-evaluated. This means that
        ///  the updated transform has to be passed to the update function, while the bounds are automatically
        ///  recomputed by the system whenever needed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_updateSQShape_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_updateSQShape_mut(PxSceneQuerySystem* self_, PxRigidActor* actor, PxShape* shape, PxTransform* transform);

        /// <summary>
        ///  Adds a compound to the SQ system.
        ///
        ///  SQ compound handle
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_addSQCompound_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSceneQuerySystem_addSQCompound_mut(PxSceneQuerySystem* self_, PxRigidActor* actor, PxShape** shapes, PxBVH* bvh, PxTransform* transforms);

        /// <summary>
        ///  Removes a compound from the SQ system.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_removeSQCompound_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_removeSQCompound_mut(PxSceneQuerySystem* self_, uint compoundHandle);

        /// <summary>
        ///  Updates a compound in the SQ system.
        ///
        ///  The compound structures are immediately updated when the call occurs.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_updateSQCompound_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_updateSQCompound_mut(PxSceneQuerySystem* self_, uint compoundHandle, PxTransform* compoundTransform);

        /// <summary>
        ///  Shift the data structures' origin by the specified vector.
        ///
        ///  Please refer to the notes of the similar function in PxScene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_shiftOrigin_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_shiftOrigin_mut(PxSceneQuerySystem* self_, PxVec3* shift);

        /// <summary>
        ///  Merges a pruning structure with the SQ system's internal pruners.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_merge_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_merge_mut(PxSceneQuerySystem* self_, PxPruningStructure* pruningStructure);

        /// <summary>
        ///  Shape to SQ-pruner-handle mapping function.
        ///
        ///  This function finds and returns the SQ pruner handle associated with a given (actor/shape) couple
        ///  that was previously added to the system. This is needed for the sync function.
        ///
        ///  Associated SQ pruner handle.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_getHandle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSceneQuerySystem_getHandle(PxSceneQuerySystem* self_, PxRigidActor* actor, PxShape* shape, uint* prunerIndex);

        /// <summary>
        ///  Synchronizes the scene-query system with another system that references the same objects.
        ///
        ///  This function is used when the scene-query objects also exist in another system that can also update them. For example the scene-query objects
        ///  (used for raycast, overlap or sweep queries) might be driven by equivalent objects in an external rigid-body simulation engine. In this case
        ///  the rigid-body simulation engine computes the new poses and transforms, and passes them to the scene-query system using this function. It is
        ///  more efficient than calling updateSQShape on each object individually, since updateSQShape would end up recomputing the bounds already available
        ///  in the rigid-body engine.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_sync_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_sync_mut(PxSceneQuerySystem* self_, uint prunerIndex, uint* handles, uint* indices, PxBounds3* bounds, PxTransformPadded* transforms, uint count, PxBitMap* ignoredIndices);

        /// <summary>
        ///  Finalizes updates made to the SQ system.
        ///
        ///  This function should be called after updates have been made to the SQ system, to fully reflect the changes
        ///  inside the internal pruners. In particular it should be called:
        ///  - after calls to updateSQShape
        ///  - after calls to sync
        ///
        ///  This function:
        ///  - recomputes bounds of manually updated shapes (i.e. either regular or SQ compound shapes modified by updateSQShape)
        ///  - updates dynamic pruners (refit operations)
        ///  - incrementally rebuilds AABB-trees
        ///
        ///  The amount of work performed in this function depends on PxSceneQueryUpdateMode.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_finalizeUpdates_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_finalizeUpdates_mut(PxSceneQuerySystem* self_);

        /// <summary>
        ///  Prepares asynchronous build step.
        ///
        ///  This is directly called (synchronously) by PxSceneSQSystem::sceneQueriesUpdate(). See the comments there.
        ///
        ///  This function is called to let the system execute any necessary synchronous operation before the
        ///  asynchronous sceneQueryBuildStep() function is called.
        ///
        ///  If there is any work to do for the specific pruner, the function returns a pruner-specific handle that
        ///  will be passed to the corresponding, asynchronous sceneQueryBuildStep function.
        ///
        ///  A pruner-specific handle that will be sent to sceneQueryBuildStep if there is any work to do, i.e. to execute the corresponding sceneQueryBuildStep() call.
        ///
        ///  Null if there is no work to do, otherwise a pruner-specific handle.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_prepareSceneQueryBuildStep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxSceneQuerySystem_prepareSceneQueryBuildStep_mut(PxSceneQuerySystem* self_, uint prunerIndex);

        /// <summary>
        ///  Executes asynchronous build step.
        ///
        ///  This is directly called (asynchronously) by PxSceneSQSystem::sceneQueriesUpdate(). See the comments there.
        ///
        ///  This function incrementally builds the internal trees/pruners. It is called asynchronously, i.e. this can be
        ///  called from different threads for building multiple trees at the same time.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQuerySystem_sceneQueryBuildStep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneQuerySystem_sceneQueryBuildStep_mut(PxSceneQuerySystem* self_, void* handle);

        [DllImport(__DllName, EntryPoint = "PxBroadPhaseDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhaseDesc PxBroadPhaseDesc_new(PxBroadPhaseType type_);

        [DllImport(__DllName, EntryPoint = "PxBroadPhaseDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBroadPhaseDesc_isValid(PxBroadPhaseDesc* self_);

        /// <summary>
        ///  Retrieves the filter group for static objects.
        ///
        ///  Mark static objects with this group when adding them to the broadphase.
        ///  Overlaps between static objects will not be detected. All static objects
        ///  should have the same group.
        ///
        ///  Filter group for static objects.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetBroadPhaseStaticFilterGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxGetBroadPhaseStaticFilterGroup();

        /// <summary>
        ///  Retrieves a filter group for dynamic objects.
        ///
        ///  Mark dynamic objects with this group when adding them to the broadphase.
        ///  Each dynamic object must have an ID, and overlaps between dynamic objects that have
        ///  the same ID will not be detected. This is useful to dismiss overlaps between shapes
        ///  of the same (compound) actor directly within the broadphase.
        ///
        ///  Filter group for the object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetBroadPhaseDynamicFilterGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxGetBroadPhaseDynamicFilterGroup(uint id);

        /// <summary>
        ///  Retrieves a filter group for kinematic objects.
        ///
        ///  Mark kinematic objects with this group when adding them to the broadphase.
        ///  Each kinematic object must have an ID, and overlaps between kinematic objects that have
        ///  the same ID will not be detected.
        ///
        ///  Filter group for the object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetBroadPhaseKinematicFilterGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxGetBroadPhaseKinematicFilterGroup(uint id);

        [DllImport(__DllName, EntryPoint = "PxBroadPhaseUpdateData_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhaseUpdateData PxBroadPhaseUpdateData_new(uint* created, uint nbCreated, uint* updated, uint nbUpdated, uint* removed, uint nbRemoved, PxBounds3* bounds, uint* groups, float* distances, uint capacity);

        [DllImport(__DllName, EntryPoint = "PxBroadPhaseResults_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhaseResults PxBroadPhaseResults_new();

        /// <summary>
        ///  Returns number of regions currently registered in the broad-phase.
        ///
        ///  Number of regions
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhaseRegions_getNbRegions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxBroadPhaseRegions_getNbRegions(PxBroadPhaseRegions* self_);

        /// <summary>
        ///  Gets broad-phase regions.
        ///
        ///  Number of written out regions.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhaseRegions_getRegions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxBroadPhaseRegions_getRegions(PxBroadPhaseRegions* self_, PxBroadPhaseRegionInfo* userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Adds a new broad-phase region.
        ///
        ///  The total number of regions is limited to PxBroadPhaseCaps::mMaxNbRegions. If that number is exceeded, the call is ignored.
        ///
        ///  The newly added region will be automatically populated with already existing objects that touch it, if the
        ///  'populateRegion' parameter is set to true. Otherwise the newly added region will be empty, and it will only be
        ///  populated with objects when those objects are added to the simulation, or updated if they already exist.
        ///
        ///  Using 'populateRegion=true' has a cost, so it is best to avoid it if possible. In particular it is more efficient
        ///  to create the empty regions first (with populateRegion=false) and then add the objects afterwards (rather than
        ///  the opposite).
        ///
        ///  Objects automatically move from one region to another during their lifetime. The system keeps tracks of what
        ///  regions a given object is in. It is legal for an object to be in an arbitrary number of regions. However if an
        ///  object leaves all regions, or is created outside of all regions, several things happen:
        ///  - collisions get disabled for this object
        ///  - the object appears in the getOutOfBoundsObjects() array
        ///
        ///  If an out-of-bounds object, whose collisions are disabled, re-enters a valid broadphase region, then collisions
        ///  are re-enabled for that object.
        ///
        ///  Handle for newly created region, or 0xffffffff in case of failure.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhaseRegions_addRegion_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxBroadPhaseRegions_addRegion_mut(PxBroadPhaseRegions* self_, PxBroadPhaseRegion* region, [MarshalAs(UnmanagedType.U1)] bool populateRegion, PxBounds3* bounds, float* distances);

        /// <summary>
        ///  Removes a broad-phase region.
        ///
        ///  If the region still contains objects, and if those objects do not overlap any region any more, they are not
        ///  automatically removed from the simulation. Instead, the PxBroadPhaseCallback::onObjectOutOfBounds notification
        ///  is used for each object. Users are responsible for removing the objects from the simulation if this is the
        ///  desired behavior.
        ///
        ///  If the handle is invalid, or if a valid handle is removed twice, an error message is sent to the error stream.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhaseRegions_removeRegion_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBroadPhaseRegions_removeRegion_mut(PxBroadPhaseRegions* self_, uint handle);

        [DllImport(__DllName, EntryPoint = "PxBroadPhaseRegions_getNbOutOfBoundsObjects", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxBroadPhaseRegions_getNbOutOfBoundsObjects(PxBroadPhaseRegions* self_);

        [DllImport(__DllName, EntryPoint = "PxBroadPhaseRegions_getOutOfBoundsObjects", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint* PxBroadPhaseRegions_getOutOfBoundsObjects(PxBroadPhaseRegions* self_);

        [DllImport(__DllName, EntryPoint = "PxBroadPhase_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhase_release_mut(PxBroadPhase* self_);

        /// <summary>
        ///  Gets the broadphase type.
        ///
        ///  Broadphase type.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_getType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhaseType PxBroadPhase_getType(PxBroadPhase* self_);

        /// <summary>
        ///  Gets broad-phase caps.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_getCaps", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhase_getCaps(PxBroadPhase* self_, PxBroadPhaseCaps* caps);

        /// <summary>
        ///  Retrieves the regions API if applicable.
        ///
        ///  For broadphases that do not use explicit user-defined regions, this call returns NULL.
        ///
        ///  Region API, or NULL.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_getRegions_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhaseRegions* PxBroadPhase_getRegions_mut(PxBroadPhase* self_);

        /// <summary>
        ///  Retrieves the broadphase allocator.
        ///
        ///  User-provided buffers should ideally be allocated with this allocator, for best performance.
        ///  This is especially true for the GPU broadphases, whose buffers need to be allocated in CUDA
        ///  host memory.
        ///
        ///  The broadphase allocator.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_getAllocator_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAllocatorCallback* PxBroadPhase_getAllocator_mut(PxBroadPhase* self_);

        /// <summary>
        ///  Retrieves the profiler's context ID.
        ///
        ///  The context ID.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_getContextID", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong PxBroadPhase_getContextID(PxBroadPhase* self_);

        /// <summary>
        ///  Sets a scratch buffer
        ///
        ///  Some broadphases might take advantage of a scratch buffer to limit runtime allocations.
        ///
        ///  All broadphases still work without providing a scratch buffer, this is an optional function
        ///  that can potentially reduce runtime allocations.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_setScratchBlock_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhase_setScratchBlock_mut(PxBroadPhase* self_, void* scratchBlock, uint size);

        /// <summary>
        ///  Updates the broadphase and computes the lists of created/deleted pairs.
        ///
        ///  The provided update data describes changes to objects since the last broadphase update.
        ///
        ///  To benefit from potentially multithreaded implementations, it is necessary to provide a continuation
        ///  task to the function. It is legal to pass NULL there, but the underlying (CPU) implementations will
        ///  then run single-threaded.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_update_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhase_update_mut(PxBroadPhase* self_, PxBroadPhaseUpdateData* updateData, PxBaseTask* continuation);

        /// <summary>
        ///  Retrieves the broadphase results after an update.
        ///
        ///  This should be called once after each update call to retrieve the results of the broadphase. The
        ///  results are incremental, i.e. the system only returns new and lost pairs, not all current pairs.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_fetchResults_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhase_fetchResults_mut(PxBroadPhase* self_, PxBroadPhaseResults* results);

        /// <summary>
        ///  Helper for single-threaded updates.
        ///
        ///  This short helper function performs a single-theaded update and reports the results in a single call.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhase_update_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhase_update_mut_1(PxBroadPhase* self_, PxBroadPhaseResults* results, PxBroadPhaseUpdateData* updateData);

        /// <summary>
        ///  Broadphase factory function.
        ///
        ///  Use this function to create a new standalone broadphase.
        ///
        ///  Newly created broadphase, or NULL
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateBroadPhase", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhase* phys_PxCreateBroadPhase(PxBroadPhaseDesc* desc);

        [DllImport(__DllName, EntryPoint = "PxAABBManager_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAABBManager_release_mut(PxAABBManager* self_);

        /// <summary>
        ///  Retrieves the underlying broadphase.
        ///
        ///  The managed broadphase.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_getBroadPhase_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhase* PxAABBManager_getBroadPhase_mut(PxAABBManager* self_);

        /// <summary>
        ///  Retrieves the managed bounds.
        ///
        ///  This is needed as input parameters to functions like PxBroadPhaseRegions::addRegion.
        ///
        ///  The managed object bounds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_getBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3* PxAABBManager_getBounds(PxAABBManager* self_);

        /// <summary>
        ///  Retrieves the managed distances.
        ///
        ///  This is needed as input parameters to functions like PxBroadPhaseRegions::addRegion.
        ///
        ///  The managed object distances.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_getDistances", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float* PxAABBManager_getDistances(PxAABBManager* self_);

        /// <summary>
        ///  Retrieves the managed filter groups.
        ///
        ///  The managed object groups.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_getGroups", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint* PxAABBManager_getGroups(PxAABBManager* self_);

        /// <summary>
        ///  Retrieves the managed buffers' capacity.
        ///
        ///  Bounds, distances and groups buffers have the same capacity.
        ///
        ///  The managed buffers' capacity.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_getCapacity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxAABBManager_getCapacity(PxAABBManager* self_);

        /// <summary>
        ///  Adds an object to the manager.
        ///
        ///  Objects' indices are externally managed, i.e. they must be provided by users (as opposed to handles
        ///  that could be returned by this manager). The design allows users to identify an object by a single ID,
        ///  and use the same ID in multiple sub-systems.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_addObject_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAABBManager_addObject_mut(PxAABBManager* self_, uint index, PxBounds3* bounds, uint group, float distance);

        /// <summary>
        ///  Removes an object from the manager.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_removeObject_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAABBManager_removeObject_mut(PxAABBManager* self_, uint index);

        /// <summary>
        ///  Updates an object in the manager.
        ///
        ///  This call can update an object's bounds, distance, or both.
        ///  It is not possible to update an object's filter group.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_updateObject_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAABBManager_updateObject_mut(PxAABBManager* self_, uint index, PxBounds3* bounds, float* distance);

        /// <summary>
        ///  Updates the broadphase and computes the lists of created/deleted pairs.
        ///
        ///  The data necessary for updating the broadphase is internally computed by the AABB manager.
        ///
        ///  To benefit from potentially multithreaded implementations, it is necessary to provide a continuation
        ///  task to the function. It is legal to pass NULL there, but the underlying (CPU) implementations will
        ///  then run single-threaded.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_update_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAABBManager_update_mut(PxAABBManager* self_, PxBaseTask* continuation);

        /// <summary>
        ///  Retrieves the broadphase results after an update.
        ///
        ///  This should be called once after each update call to retrieve the results of the broadphase. The
        ///  results are incremental, i.e. the system only returns new and lost pairs, not all current pairs.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_fetchResults_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAABBManager_fetchResults_mut(PxAABBManager* self_, PxBroadPhaseResults* results);

        /// <summary>
        ///  Helper for single-threaded updates.
        ///
        ///  This short helper function performs a single-theaded update and reports the results in a single call.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxAABBManager_update_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxAABBManager_update_mut_1(PxAABBManager* self_, PxBroadPhaseResults* results);

        /// <summary>
        ///  AABB manager factory function.
        ///
        ///  Use this function to create a new standalone high-level broadphase.
        ///
        ///  Newly created AABB manager, or NULL
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateAABBManager", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxAABBManager* phys_PxCreateAABBManager(PxBroadPhase* broadphase);

        /// <summary>
        ///  constructor sets to default
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneLimits_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneLimits PxSceneLimits_new();

        /// <summary>
        ///  (re)sets the structure to the default
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneLimits_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneLimits_setToDefault_mut(PxSceneLimits* self_);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneLimits_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneLimits_isValid(PxSceneLimits* self_);

        [DllImport(__DllName, EntryPoint = "PxgDynamicsMemoryConfig_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxgDynamicsMemoryConfig PxgDynamicsMemoryConfig_new();

        [DllImport(__DllName, EntryPoint = "PxgDynamicsMemoryConfig_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxgDynamicsMemoryConfig_isValid(PxgDynamicsMemoryConfig* self_);

        /// <summary>
        ///  constructor sets to default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneDesc PxSceneDesc_new(PxTolerancesScale* scale);

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneDesc_setToDefault_mut(PxSceneDesc* self_, PxTolerancesScale* scale);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneDesc_isValid(PxSceneDesc* self_);

        [DllImport(__DllName, EntryPoint = "PxSceneDesc_getTolerancesScale", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTolerancesScale* PxSceneDesc_getTolerancesScale(PxSceneDesc* self_);

        /// <summary>
        ///  Get number of broadphase volumes added for the current simulation step.
        ///
        ///  Number of broadphase volumes added.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationStatistics_getNbBroadPhaseAdds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSimulationStatistics_getNbBroadPhaseAdds(PxSimulationStatistics* self_);

        /// <summary>
        ///  Get number of broadphase volumes removed for the current simulation step.
        ///
        ///  Number of broadphase volumes removed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationStatistics_getNbBroadPhaseRemoves", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSimulationStatistics_getNbBroadPhaseRemoves(PxSimulationStatistics* self_);

        /// <summary>
        ///  Get number of shape collision pairs of a certain type processed for the current simulation step.
        ///
        ///  There is an entry for each geometry pair type.
        ///
        ///  entry[i][j] = entry[j][i], hence, if you want the sum of all pair
        ///  types, you need to discard the symmetric entries
        ///
        ///  Number of processed pairs of the specified geometry types.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationStatistics_getRbPairStats", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxSimulationStatistics_getRbPairStats(PxSimulationStatistics* self_, RbPairStatsType pairType, PxGeometryType g0, PxGeometryType g1);

        [DllImport(__DllName, EntryPoint = "PxSimulationStatistics_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSimulationStatistics PxSimulationStatistics_new();

        /// <summary>
        ///  Sets the PVD flag. See PxPvdSceneFlag.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdSceneClient_setScenePvdFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdSceneClient_setScenePvdFlag_mut(PxPvdSceneClient* self_, PxPvdSceneFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Sets the PVD flags. See PxPvdSceneFlags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdSceneClient_setScenePvdFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdSceneClient_setScenePvdFlags_mut(PxPvdSceneClient* self_, PxPvdSceneFlags flags);

        /// <summary>
        ///  Retrieves the PVD flags. See PxPvdSceneFlags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdSceneClient_getScenePvdFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPvdSceneFlags PxPvdSceneClient_getScenePvdFlags(PxPvdSceneClient* self_);

        /// <summary>
        ///  update camera on PVD application's render window
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdSceneClient_updateCamera_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdSceneClient_updateCamera_mut(PxPvdSceneClient* self_, byte* name, PxVec3* origin, PxVec3* up, PxVec3* target);

        /// <summary>
        ///  draw points on PVD application's render window
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdSceneClient_drawPoints_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdSceneClient_drawPoints_mut(PxPvdSceneClient* self_, PxDebugPoint* points, uint count);

        /// <summary>
        ///  draw lines on PVD application's render window
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdSceneClient_drawLines_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdSceneClient_drawLines_mut(PxPvdSceneClient* self_, PxDebugLine* lines, uint count);

        /// <summary>
        ///  draw triangles on PVD application's render window
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdSceneClient_drawTriangles_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdSceneClient_drawTriangles_mut(PxPvdSceneClient* self_, PxDebugTriangle* triangles, uint count);

        /// <summary>
        ///  draw text on PVD application's render window
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdSceneClient_drawText_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdSceneClient_drawText_mut(PxPvdSceneClient* self_, PxDebugText* text);

        [DllImport(__DllName, EntryPoint = "PxDominanceGroupPair_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDominanceGroupPair PxDominanceGroupPair_new(byte a, byte b);

        [DllImport(__DllName, EntryPoint = "PxBroadPhaseCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhaseCallback_delete(PxBroadPhaseCallback* self_);

        /// <summary>
        ///  Out-of-bounds notification.
        ///
        ///  This function is called when an object leaves the broad-phase.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhaseCallback_onObjectOutOfBounds_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhaseCallback_onObjectOutOfBounds_mut(PxBroadPhaseCallback* self_, PxShape* shape, PxActor* actor);

        /// <summary>
        ///  Out-of-bounds notification.
        ///
        ///  This function is called when an aggregate leaves the broad-phase.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhaseCallback_onObjectOutOfBounds_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBroadPhaseCallback_onObjectOutOfBounds_mut_1(PxBroadPhaseCallback* self_, PxAggregate* aggregate);

        /// <summary>
        ///  Deletes the scene.
        ///
        ///  Removes any actors and constraint shaders from this scene
        ///  (if the user hasn't already done so).
        ///
        ///  Be sure to not keep a reference to this object after calling release.
        ///  Avoid release calls while the scene is simulating (in between simulate() and fetchResults() calls).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_release_mut(PxScene* self_);

        /// <summary>
        ///  Sets a scene flag. You can only set one flag at a time.
        ///
        ///  Not all flags are mutable and changing some will result in an error. Please check [`PxSceneFlag`] to see which flags can be changed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setFlag_mut(PxScene* self_, PxSceneFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Get the scene flags.
        ///
        ///  The scene flags. See [`PxSceneFlag`]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneFlags PxScene_getFlags(PxScene* self_);

        /// <summary>
        ///  Set new scene limits.
        ///
        ///  Increase the maximum capacity of various data structures in the scene. The new capacities will be
        ///  at least as large as required to deal with the objects currently in the scene. Further, these values
        ///  are for preallocation and do not represent hard limits.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setLimits_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setLimits_mut(PxScene* self_, PxSceneLimits* limits);

        /// <summary>
        ///  Get current scene limits.
        ///
        ///  Current scene limits.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getLimits", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneLimits PxScene_getLimits(PxScene* self_);

        /// <summary>
        ///  Call this method to retrieve the Physics SDK.
        ///
        ///  The physics SDK this scene is associated with.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getPhysics_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPhysics* PxScene_getPhysics_mut(PxScene* self_);

        /// <summary>
        ///  Retrieves the scene's internal timestamp, increased each time a simulation step is completed.
        ///
        ///  scene timestamp
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getTimestamp", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getTimestamp(PxScene* self_);

        /// <summary>
        ///  Adds an articulation to this scene.
        ///
        ///  If the articulation is already assigned to a scene (see [`PxArticulationReducedCoordinate::getScene`]), the call is ignored and an error is issued.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_addArticulation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_addArticulation_mut(PxScene* self_, PxArticulationReducedCoordinate* articulation);

        /// <summary>
        ///  Removes an articulation from this scene.
        ///
        ///  If the articulation is not part of this scene (see [`PxArticulationReducedCoordinate::getScene`]), the call is ignored and an error is issued.
        ///
        ///  If the articulation is in an aggregate it will be removed from the aggregate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_removeArticulation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_removeArticulation_mut(PxScene* self_, PxArticulationReducedCoordinate* articulation, [MarshalAs(UnmanagedType.U1)] bool wakeOnLostTouch);

        /// <summary>
        ///  Adds an actor to this scene.
        ///
        ///  If the actor is already assigned to a scene (see [`PxActor::getScene`]), the call is ignored and an error is issued.
        ///
        ///  If the actor has an invalid constraint, in checked builds the call is ignored and an error is issued.
        ///
        ///  You can not add individual articulation links (see [`PxArticulationLink`]) to the scene. Use #addArticulation() instead.
        ///
        ///  If the actor is a PxRigidActor then each assigned PxConstraint object will get added to the scene automatically if
        ///  it connects to another actor that is part of the scene already.
        ///
        ///  When a BVH is provided the actor shapes are grouped together.
        ///  The scene query pruning structure inside PhysX SDK will store/update one
        ///  bound per actor. The scene queries against such an actor will query actor
        ///  bounds and then make a local space query against the provided BVH, which is in actor's local space.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_addActor_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_addActor_mut(PxScene* self_, PxActor* actor, PxBVH* bvh);

        /// <summary>
        ///  Adds actors to this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic.
        ///
        ///  This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use addActor() instead.
        ///  For articulation links, use addArticulation().
        ///
        ///  If one of the actors is already assigned to a scene (see [`PxActor::getScene`]), the call is ignored and an error is issued.
        ///
        ///  If an actor in the array contains an invalid constraint, in checked builds the call is ignored and an error is issued.
        ///
        ///  If an actor in the array is a PxRigidActor then each assigned PxConstraint object will get added to the scene automatically if
        ///  it connects to another actor that is part of the scene already.
        ///
        ///  this method is optimized for high performance.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_addActors_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_addActors_mut(PxScene* self_, PxActor** actors, uint nbActors);

        /// <summary>
        ///  Adds a pruning structure together with its actors to this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic.
        ///
        ///  This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use addActor() instead.
        ///  For articulation links, use addArticulation().
        ///
        ///  If an actor in the pruning structure contains an invalid constraint, in checked builds the call is ignored and an error is issued.
        ///
        ///  For all actors in the pruning structure each assigned PxConstraint object will get added to the scene automatically if
        ///  it connects to another actor that is part of the scene already.
        ///
        ///  This method is optimized for high performance.
        ///
        ///  Merging a PxPruningStructure into an active scene query optimization AABB tree might unbalance the tree. A typical use case for
        ///  PxPruningStructure is a large world scenario where blocks of closely positioned actors get streamed in. The merge process finds the
        ///  best node in the active scene query optimization AABB tree and inserts the PxPruningStructure. Therefore using PxPruningStructure
        ///  for actors scattered throughout the world will result in an unbalanced tree.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_addActors_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_addActors_mut_1(PxScene* self_, PxPruningStructure* pruningStructure);

        /// <summary>
        ///  Removes an actor from this scene.
        ///
        ///  If the actor is not part of this scene (see [`PxActor::getScene`]), the call is ignored and an error is issued.
        ///
        ///  You can not remove individual articulation links (see [`PxArticulationLink`]) from the scene. Use #removeArticulation() instead.
        ///
        ///  If the actor is a PxRigidActor then all assigned PxConstraint objects will get removed from the scene automatically.
        ///
        ///  If the actor is in an aggregate it will be removed from the aggregate.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_removeActor_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_removeActor_mut(PxScene* self_, PxActor* actor, [MarshalAs(UnmanagedType.U1)] bool wakeOnLostTouch);

        /// <summary>
        ///  Removes actors from this scene. Only supports actors of type PxRigidStatic and PxRigidDynamic.
        ///
        ///  This method only supports actors of type PxRigidStatic and PxRigidDynamic. For other actors, use removeActor() instead.
        ///  For articulation links, use removeArticulation().
        ///
        ///  If some actor is not part of this scene (see [`PxActor::getScene`]), the actor remove is ignored and an error is issued.
        ///
        ///  You can not remove individual articulation links (see [`PxArticulationLink`]) from the scene. Use #removeArticulation() instead.
        ///
        ///  If the actor is a PxRigidActor then all assigned PxConstraint objects will get removed from the scene automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_removeActors_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_removeActors_mut(PxScene* self_, PxActor** actors, uint nbActors, [MarshalAs(UnmanagedType.U1)] bool wakeOnLostTouch);

        /// <summary>
        ///  Adds an aggregate to this scene.
        ///
        ///  If the aggregate is already assigned to a scene (see [`PxAggregate::getScene`]), the call is ignored and an error is issued.
        ///
        ///  If the aggregate contains an actor with an invalid constraint, in checked builds the call is ignored and an error is issued.
        ///
        ///  If the aggregate already contains actors, those actors are added to the scene as well.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_addAggregate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_addAggregate_mut(PxScene* self_, PxAggregate* aggregate);

        /// <summary>
        ///  Removes an aggregate from this scene.
        ///
        ///  If the aggregate is not part of this scene (see [`PxAggregate::getScene`]), the call is ignored and an error is issued.
        ///
        ///  If the aggregate contains actors, those actors are removed from the scene as well.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_removeAggregate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_removeAggregate_mut(PxScene* self_, PxAggregate* aggregate, [MarshalAs(UnmanagedType.U1)] bool wakeOnLostTouch);

        /// <summary>
        ///  Adds objects in the collection to this scene.
        ///
        ///  This function adds the following types of objects to this scene: PxRigidActor (except PxArticulationLink), PxAggregate, PxArticulationReducedCoordinate.
        ///  This method is typically used after deserializing the collection in order to populate the scene with deserialized objects.
        ///
        ///  If the collection contains an actor with an invalid constraint, in checked builds the call is ignored and an error is issued.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_addCollection_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_addCollection_mut(PxScene* self_, PxCollection* collection);

        /// <summary>
        ///  Retrieve the number of actors of certain types in the scene. For supported types, see PxActorTypeFlags.
        ///
        ///  the number of actors.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getNbActors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getNbActors(PxScene* self_, PxActorTypeFlags types);

        /// <summary>
        ///  Retrieve an array of all the actors of certain types in the scene. For supported types, see PxActorTypeFlags.
        ///
        ///  Number of actors written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getActors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getActors(PxScene* self_, PxActorTypeFlags types, PxActor** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Queries the PxScene for a list of the PxActors whose transforms have been
        ///  updated during the previous simulation step. Only includes actors of type PxRigidDynamic and PxArticulationLink.
        ///
        ///  PxSceneFlag::eENABLE_ACTIVE_ACTORS must be set.
        ///
        ///  Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored and NULL will be returned.
        ///
        ///  A pointer to the list of active PxActors generated during the last call to fetchResults().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getActiveActors_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxActor** PxScene_getActiveActors_mut(PxScene* self_, uint* nbActorsOut);

        /// <summary>
        ///  Returns the number of articulations in the scene.
        ///
        ///  the number of articulations in this scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getNbArticulations", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getNbArticulations(PxScene* self_);

        /// <summary>
        ///  Retrieve all the articulations in the scene.
        ///
        ///  Number of articulations written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getArticulations", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getArticulations(PxScene* self_, PxArticulationReducedCoordinate** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of constraint shaders in the scene.
        ///
        ///  the number of constraint shaders in this scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getNbConstraints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getNbConstraints(PxScene* self_);

        /// <summary>
        ///  Retrieve all the constraint shaders in the scene.
        ///
        ///  Number of constraint shaders written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getConstraints", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getConstraints(PxScene* self_, PxConstraint** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of aggregates in the scene.
        ///
        ///  the number of aggregates in this scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getNbAggregates", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getNbAggregates(PxScene* self_);

        /// <summary>
        ///  Retrieve all the aggregates in the scene.
        ///
        ///  Number of aggregates written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getAggregates", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getAggregates(PxScene* self_, PxAggregate** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Specifies the dominance behavior of contacts between two actors with two certain dominance groups.
        ///
        ///  It is possible to assign each actor to a dominance groups using [`PxActor::setDominanceGroup`]().
        ///
        ///  With dominance groups one can have all contacts created between actors act in one direction only. This is useful, for example, if you
        ///  want an object to push debris out of its way and be unaffected,while still responding physically to forces and collisions
        ///  with non-debris objects.
        ///
        ///  Whenever a contact between two actors (a0, a1) needs to be solved, the groups (g0, g1) of both
        ///  actors are retrieved. Then the PxDominanceGroupPair setting for this group pair is retrieved with getDominanceGroupPair(g0, g1).
        ///
        ///  In the contact, PxDominanceGroupPair::dominance0 becomes the dominance setting for a0, and
        ///  PxDominanceGroupPair::dominance1 becomes the dominance setting for a1. A dominanceN setting of 1.0f, the default,
        ///  will permit aN to be pushed or pulled by a(1-N) through the contact. A dominanceN setting of 0.0f, will however
        ///  prevent aN to be pushed by a(1-N) via the contact. Thus, a PxDominanceGroupPair of (1.0f, 0.0f) makes
        ///  the interaction one-way.
        ///
        ///  The matrix sampled by getDominanceGroupPair(g1, g2) is initialised by default such that:
        ///
        ///  if g1 == g2, then (1.0f, 1.0f) is returned
        ///  if g1
        ///  &lt;
        ///  g2, then (0.0f, 1.0f) is returned
        ///  if g1 &gt;  g2, then (1.0f, 0.0f) is returned
        ///
        ///  In other words, we permit actors in higher groups to be pushed around by actors in lower groups by default.
        ///
        ///  These settings should cover most applications, and in fact not overriding these settings may likely result in higher performance.
        ///
        ///  It is not possible to make the matrix asymetric, or to change the diagonal. In other words:
        ///
        ///  it is not possible to change (g1, g2) if (g1==g2)
        ///  if you set
        ///
        ///  (g1, g2) to X, then (g2, g1) will implicitly and automatically be set to ~X, where:
        ///
        ///  ~(1.0f, 1.0f) is (1.0f, 1.0f)
        ///  ~(0.0f, 1.0f) is (1.0f, 0.0f)
        ///  ~(1.0f, 0.0f) is (0.0f, 1.0f)
        ///
        ///  These two restrictions are to make sure that contacts between two actors will always evaluate to the same dominance
        ///  setting, regardless of the order of the actors.
        ///
        ///  Dominance settings are currently specified as floats 0.0f or 1.0f because in the future we may permit arbitrary
        ///  fractional settings to express 'partly-one-way' interactions.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake actors up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setDominanceGroupPair_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setDominanceGroupPair_mut(PxScene* self_, byte group1, byte group2, PxDominanceGroupPair* dominance);

        /// <summary>
        ///  Samples the dominance matrix.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getDominanceGroupPair", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDominanceGroupPair PxScene_getDominanceGroupPair(PxScene* self_, byte group1, byte group2);

        /// <summary>
        ///  Return the cpu dispatcher that was set in PxSceneDesc::cpuDispatcher when creating the scene with PxPhysics::createScene
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getCpuDispatcher", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCpuDispatcher* PxScene_getCpuDispatcher(PxScene* self_);

        /// <summary>
        ///  Reserves a new client ID.
        ///
        ///  PX_DEFAULT_CLIENT is always available as the default clientID.
        ///  Additional clients are returned by this function. Clients cannot be released once created.
        ///  An error is reported when more than a supported number of clients (currently 128) are created.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_createClient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte PxScene_createClient_mut(PxScene* self_);

        /// <summary>
        ///  Sets a user notify object which receives special simulation events when they occur.
        ///
        ///  Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setSimulationEventCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setSimulationEventCallback_mut(PxScene* self_, PxSimulationEventCallback* callback);

        /// <summary>
        ///  Retrieves the simulationEventCallback pointer set with setSimulationEventCallback().
        ///
        ///  The current user notify pointer. See [`PxSimulationEventCallback`].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getSimulationEventCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSimulationEventCallback* PxScene_getSimulationEventCallback(PxScene* self_);

        /// <summary>
        ///  Sets a user callback object, which receives callbacks on all contacts generated for specified actors.
        ///
        ///  Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setContactModifyCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setContactModifyCallback_mut(PxScene* self_, PxContactModifyCallback* callback);

        /// <summary>
        ///  Sets a user callback object, which receives callbacks on all CCD contacts generated for specified actors.
        ///
        ///  Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setCCDContactModifyCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setCCDContactModifyCallback_mut(PxScene* self_, PxCCDContactModifyCallback* callback);

        /// <summary>
        ///  Retrieves the PxContactModifyCallback pointer set with setContactModifyCallback().
        ///
        ///  The current user contact modify callback pointer. See [`PxContactModifyCallback`].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getContactModifyCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactModifyCallback* PxScene_getContactModifyCallback(PxScene* self_);

        /// <summary>
        ///  Retrieves the PxCCDContactModifyCallback pointer set with setContactModifyCallback().
        ///
        ///  The current user contact modify callback pointer. See [`PxContactModifyCallback`].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getCCDContactModifyCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCCDContactModifyCallback* PxScene_getCCDContactModifyCallback(PxScene* self_);

        /// <summary>
        ///  Sets a broad-phase user callback object.
        ///
        ///  Do not set the callback while the simulation is running. Calls to this method while the simulation is running will be ignored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setBroadPhaseCallback_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setBroadPhaseCallback_mut(PxScene* self_, PxBroadPhaseCallback* callback);

        /// <summary>
        ///  Retrieves the PxBroadPhaseCallback pointer set with setBroadPhaseCallback().
        ///
        ///  The current broad-phase callback pointer. See [`PxBroadPhaseCallback`].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getBroadPhaseCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhaseCallback* PxScene_getBroadPhaseCallback(PxScene* self_);

        /// <summary>
        ///  Sets the shared global filter data which will get passed into the filter shader.
        ///
        ///  It is the user's responsibility to ensure that changing the shared global filter data does not change the filter output value for existing pairs.
        ///  If the filter output for existing pairs does change nonetheless then such a change will not take effect until the pair gets refiltered.
        ///  resetFiltering() can be used to explicitly refilter the pairs of specific objects.
        ///
        ///  The provided data will get copied to internal buffers and this copy will be used for filtering calls.
        ///
        ///  Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setFilterShaderData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setFilterShaderData_mut(PxScene* self_, void* data, uint dataSize);

        /// <summary>
        ///  Gets the shared global filter data in use for this scene.
        ///
        ///  The reference points to a copy of the original filter data specified in [`PxSceneDesc`].filterShaderData or provided by #setFilterShaderData().
        ///
        ///  Shared filter data for filter shader.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getFilterShaderData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxScene_getFilterShaderData(PxScene* self_);

        /// <summary>
        ///  Gets the size of the shared global filter data ([`PxSceneDesc`].filterShaderData)
        ///
        ///  Size of shared filter data [bytes].
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getFilterShaderDataSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getFilterShaderDataSize(PxScene* self_);

        /// <summary>
        ///  Marks the object to reset interactions and re-run collision filters in the next simulation step.
        ///
        ///  This call forces the object to remove all existing collision interactions, to search anew for existing contact
        ///  pairs and to run the collision filters again for found collision pairs.
        ///
        ///  The operation is supported for PxRigidActor objects only.
        ///
        ///  All persistent state of existing interactions will be lost and can not be retrieved even if the same collison pair
        ///  is found again in the next step. This will mean, for example, that you will not get notified about persistent contact
        ///  for such an interaction (see [`PxPairFlag::eNOTIFY_TOUCH_PERSISTS`]), the contact pair will be interpreted as newly found instead.
        ///
        ///  Lost touch contact reports will be sent for every collision pair which includes this shape, if they have
        ///  been requested through [`PxPairFlag::eNOTIFY_TOUCH_LOST`] or #PxPairFlag::eNOTIFY_THRESHOLD_FORCE_LOST.
        ///
        ///  This is an expensive operation, don't use it if you don't have to.
        ///
        ///  Can be used to retrieve collision pairs that were killed by the collision filters (see [`PxFilterFlag::eKILL`])
        ///
        ///  It is invalid to use this method if the actor has not been added to a scene already.
        ///
        ///  It is invalid to use this method if PxActorFlag::eDISABLE_SIMULATION is set.
        ///
        ///  Do not use this method while the simulation is running.
        ///
        ///  Sleeping:
        ///  Does wake up the actor.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_resetFiltering_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_resetFiltering_mut(PxScene* self_, PxActor* actor);

        /// <summary>
        ///  Marks the object to reset interactions and re-run collision filters for specified shapes in the next simulation step.
        ///
        ///  This is a specialization of the resetFiltering(PxActor
        ///  &amp;
        ///  actor) method and allows to reset interactions for specific shapes of
        ///  a PxRigidActor.
        ///
        ///  Do not use this method while the simulation is running.
        ///
        ///  Sleeping:
        ///  Does wake up the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_resetFiltering_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_resetFiltering_mut_1(PxScene* self_, PxRigidActor* actor, PxShape** shapes, uint shapeCount);

        /// <summary>
        ///  Gets the pair filtering mode for kinematic-kinematic pairs.
        ///
        ///  Filtering mode for kinematic-kinematic pairs.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getKinematicKinematicFilteringMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPairFilteringMode PxScene_getKinematicKinematicFilteringMode(PxScene* self_);

        /// <summary>
        ///  Gets the pair filtering mode for static-kinematic pairs.
        ///
        ///  Filtering mode for static-kinematic pairs.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getStaticKinematicFilteringMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPairFilteringMode PxScene_getStaticKinematicFilteringMode(PxScene* self_);

        /// <summary>
        ///  Advances the simulation by an elapsedTime time.
        ///
        ///  Large elapsedTime values can lead to instabilities. In such cases elapsedTime
        ///  should be subdivided into smaller time intervals and simulate() should be called
        ///  multiple times for each interval.
        ///
        ///  Calls to simulate() should pair with calls to fetchResults():
        ///  Each fetchResults() invocation corresponds to exactly one simulate()
        ///  invocation; calling simulate() twice without an intervening fetchResults()
        ///  or fetchResults() twice without an intervening simulate() causes an error
        ///  condition.
        ///
        ///  scene-&gt;simulate();
        ///  ...do some processing until physics is computed...
        ///  scene-&gt;fetchResults();
        ///  ...now results of run may be retrieved.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_simulate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_simulate_mut(PxScene* self_, float elapsedTime, PxBaseTask* completionTask, void* scratchMemBlock, uint scratchMemBlockSize, [MarshalAs(UnmanagedType.U1)] bool controlSimulation);

        /// <summary>
        ///  Performs dynamics phase of the simulation pipeline.
        ///
        ///  Calls to advance() should follow calls to fetchCollision(). An error message will be issued if this sequence is not followed.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_advance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_advance_mut(PxScene* self_, PxBaseTask* completionTask);

        /// <summary>
        ///  Performs collision detection for the scene over elapsedTime
        ///
        ///  Calls to collide() should be the first method called to simulate a frame.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_collide_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_collide_mut(PxScene* self_, float elapsedTime, PxBaseTask* completionTask, void* scratchMemBlock, uint scratchMemBlockSize, [MarshalAs(UnmanagedType.U1)] bool controlSimulation);

        /// <summary>
        ///  This checks to see if the simulation run has completed.
        ///
        ///  This does not cause the data available for reading to be updated with the results of the simulation, it is simply a status check.
        ///  The bool will allow it to either return immediately or block waiting for the condition to be met so that it can return true
        ///
        ///  True if the results are available.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_checkResults_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_checkResults_mut(PxScene* self_, [MarshalAs(UnmanagedType.U1)] bool block);

        /// <summary>
        ///  This method must be called after collide() and before advance(). It will wait for the collision phase to finish. If the user makes an illegal simulation call, the SDK will issue an error
        ///  message.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_fetchCollision_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_fetchCollision_mut(PxScene* self_, [MarshalAs(UnmanagedType.U1)] bool block);

        /// <summary>
        ///  This is the big brother to checkResults() it basically does the following:
        ///
        ///  True if the results have been fetched.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_fetchResults_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_fetchResults_mut(PxScene* self_, [MarshalAs(UnmanagedType.U1)] bool block, uint* errorState);

        /// <summary>
        ///  This call performs the first section of fetchResults, and returns a pointer to the contact streams output by the simulation. It can be used to process contact pairs in parallel, which is often a limiting factor
        ///  for fetchResults() performance.
        ///
        ///  After calling this function and processing the contact streams, call fetchResultsFinish(). Note that writes to the simulation are not
        ///  permitted between the start of fetchResultsStart() and the end of fetchResultsFinish().
        ///
        ///  True if the results have been fetched.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_fetchResultsStart_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_fetchResultsStart_mut(PxScene* self_, PxContactPairHeader** contactPairs, uint* nbContactPairs, [MarshalAs(UnmanagedType.U1)] bool block);

        /// <summary>
        ///  This call processes all event callbacks in parallel. It takes a continuation task, which will be executed once all callbacks have been processed.
        ///
        ///  This is a utility function to make it easier to process callbacks in parallel using the PhysX task system. It can only be used in conjunction with
        ///  fetchResultsStart(...) and fetchResultsFinish(...)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_processCallbacks_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_processCallbacks_mut(PxScene* self_, PxBaseTask* continuation);

        /// <summary>
        ///  This call performs the second section of fetchResults.
        ///
        ///  It must be called after fetchResultsStart() returns and contact reports have been processed.
        ///
        ///  Note that once fetchResultsFinish() has been called, the contact streams returned in fetchResultsStart() will be invalid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_fetchResultsFinish_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_fetchResultsFinish_mut(PxScene* self_, uint* errorState);

        /// <summary>
        ///  This call performs the synchronization of particle system data copies.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_fetchResultsParticleSystem_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_fetchResultsParticleSystem_mut(PxScene* self_);

        /// <summary>
        ///  Clear internal buffers and free memory.
        ///
        ///  This method can be used to clear buffers and free internal memory without having to destroy the scene. Can be useful if
        ///  the physics data gets streamed in and a checkpoint with a clean state should be created.
        ///
        ///  It is not allowed to call this method while the simulation is running. The call will fail.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_flushSimulation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_flushSimulation_mut(PxScene* self_, [MarshalAs(UnmanagedType.U1)] bool sendPendingReports);

        /// <summary>
        ///  Sets a constant gravity for the entire scene.
        ///
        ///  Do not use this method while the simulation is running.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setGravity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setGravity_mut(PxScene* self_, PxVec3* vec);

        /// <summary>
        ///  Retrieves the current gravity setting.
        ///
        ///  The current gravity for the scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getGravity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxScene_getGravity(PxScene* self_);

        /// <summary>
        ///  Set the bounce threshold velocity.  Collision speeds below this threshold will not cause a bounce.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setBounceThresholdVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setBounceThresholdVelocity_mut(PxScene* self_, float t);

        /// <summary>
        ///  Return the bounce threshold velocity.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getBounceThresholdVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxScene_getBounceThresholdVelocity(PxScene* self_);

        /// <summary>
        ///  Sets the maximum number of CCD passes
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setCCDMaxPasses_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setCCDMaxPasses_mut(PxScene* self_, uint ccdMaxPasses);

        /// <summary>
        ///  Gets the maximum number of CCD passes.
        ///
        ///  The maximum number of CCD passes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getCCDMaxPasses", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getCCDMaxPasses(PxScene* self_);

        /// <summary>
        ///  Set the maximum CCD separation.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setCCDMaxSeparation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setCCDMaxSeparation_mut(PxScene* self_, float t);

        /// <summary>
        ///  Gets the maximum CCD separation.
        ///
        ///  The maximum CCD separation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getCCDMaxSeparation", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxScene_getCCDMaxSeparation(PxScene* self_);

        /// <summary>
        ///  Set the CCD threshold.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setCCDThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setCCDThreshold_mut(PxScene* self_, float t);

        /// <summary>
        ///  Gets the CCD threshold.
        ///
        ///  The CCD threshold.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getCCDThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxScene_getCCDThreshold(PxScene* self_);

        /// <summary>
        ///  Set the max bias coefficient.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setMaxBiasCoefficient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setMaxBiasCoefficient_mut(PxScene* self_, float t);

        /// <summary>
        ///  Gets the max bias coefficient.
        ///
        ///  The max bias coefficient.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getMaxBiasCoefficient", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxScene_getMaxBiasCoefficient(PxScene* self_);

        /// <summary>
        ///  Set the friction offset threshold.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setFrictionOffsetThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setFrictionOffsetThreshold_mut(PxScene* self_, float t);

        /// <summary>
        ///  Gets the friction offset threshold.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getFrictionOffsetThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxScene_getFrictionOffsetThreshold(PxScene* self_);

        /// <summary>
        ///  Set the friction correlation distance.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setFrictionCorrelationDistance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setFrictionCorrelationDistance_mut(PxScene* self_, float t);

        /// <summary>
        ///  Gets the friction correlation distance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getFrictionCorrelationDistance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxScene_getFrictionCorrelationDistance(PxScene* self_);

        /// <summary>
        ///  Return the friction model.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getFrictionType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFrictionType PxScene_getFrictionType(PxScene* self_);

        /// <summary>
        ///  Return the solver model.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getSolverType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSolverType PxScene_getSolverType(PxScene* self_);

        /// <summary>
        ///  Function that lets you set debug visualization parameters.
        ///
        ///  Returns false if the value passed is out of range for usage specified by the enum.
        ///
        ///  Do not use this method while the simulation is running.
        ///
        ///  False if the parameter is out of range.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setVisualizationParameter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_setVisualizationParameter_mut(PxScene* self_, PxVisualizationParameter param, float value);

        /// <summary>
        ///  Function that lets you query debug visualization parameters.
        ///
        ///  The value of the parameter.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getVisualizationParameter", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxScene_getVisualizationParameter(PxScene* self_, PxVisualizationParameter paramEnum);

        /// <summary>
        ///  Defines a box in world space to which visualization geometry will be (conservatively) culled. Use a non-empty culling box to enable the feature, and an empty culling box to disable it.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setVisualizationCullingBox_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setVisualizationCullingBox_mut(PxScene* self_, PxBounds3* box_);

        /// <summary>
        ///  Retrieves the visualization culling box.
        ///
        ///  the box to which the geometry will be culled.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getVisualizationCullingBox", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxScene_getVisualizationCullingBox(PxScene* self_);

        /// <summary>
        ///  Retrieves the render buffer.
        ///
        ///  This will contain the results of any active visualization for this scene.
        ///
        ///  Do not use this method while the simulation is running. Calls to this method while the simulation is running will result in undefined behaviour.
        ///
        ///  The render buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getRenderBuffer_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRenderBuffer* PxScene_getRenderBuffer_mut(PxScene* self_);

        /// <summary>
        ///  Call this method to retrieve statistics for the current simulation step.
        ///
        ///  Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getSimulationStatistics", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_getSimulationStatistics(PxScene* self_, PxSimulationStatistics* stats);

        /// <summary>
        ///  Returns broad-phase type.
        ///
        ///  Broad-phase type
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getBroadPhaseType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBroadPhaseType PxScene_getBroadPhaseType(PxScene* self_);

        /// <summary>
        ///  Gets broad-phase caps.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getBroadPhaseCaps", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_getBroadPhaseCaps(PxScene* self_, PxBroadPhaseCaps* caps);

        /// <summary>
        ///  Returns number of regions currently registered in the broad-phase.
        ///
        ///  Number of regions
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getNbBroadPhaseRegions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getNbBroadPhaseRegions(PxScene* self_);

        /// <summary>
        ///  Gets broad-phase regions.
        ///
        ///  Number of written out regions
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getBroadPhaseRegions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getBroadPhaseRegions(PxScene* self_, PxBroadPhaseRegionInfo* userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Adds a new broad-phase region.
        ///
        ///  The bounds for the new region must be non-empty, otherwise an error occurs and the call is ignored.
        ///
        ///  Note that by default, objects already existing in the SDK that might touch this region will not be automatically
        ///  added to the region. In other words the newly created region will be empty, and will only be populated with new
        ///  objects when they are added to the simulation, or with already existing objects when they are updated.
        ///
        ///  It is nonetheless possible to override this default behavior and let the SDK populate the new region automatically
        ///  with already existing objects overlapping the incoming region. This has a cost though, and it should only be used
        ///  when the game can not guarantee that all objects within the new region will be added to the simulation after the
        ///  region itself.
        ///
        ///  Objects automatically move from one region to another during their lifetime. The system keeps tracks of what
        ///  regions a given object is in. It is legal for an object to be in an arbitrary number of regions. However if an
        ///  object leaves all regions, or is created outside of all regions, several things happen:
        ///  - collisions get disabled for this object
        ///  - if a PxBroadPhaseCallback object is provided, an "out-of-bounds" event is generated via that callback
        ///  - if a PxBroadPhaseCallback object is not provided, a warning/error message is sent to the error stream
        ///
        ///  If an object goes out-of-bounds and user deletes it during the same frame, neither the out-of-bounds event nor the
        ///  error message is generated.
        ///
        ///  Handle for newly created region, or 0xffffffff in case of failure.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_addBroadPhaseRegion_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_addBroadPhaseRegion_mut(PxScene* self_, PxBroadPhaseRegion* region, [MarshalAs(UnmanagedType.U1)] bool populateRegion);

        /// <summary>
        ///  Removes a new broad-phase region.
        ///
        ///  If the region still contains objects, and if those objects do not overlap any region any more, they are not
        ///  automatically removed from the simulation. Instead, the PxBroadPhaseCallback::onObjectOutOfBounds notification
        ///  is used for each object. Users are responsible for removing the objects from the simulation if this is the
        ///  desired behavior.
        ///
        ///  If the handle is invalid, or if a valid handle is removed twice, an error message is sent to the error stream.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_removeBroadPhaseRegion_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxScene_removeBroadPhaseRegion_mut(PxScene* self_, uint handle);

        /// <summary>
        ///  Get the task manager associated with this scene
        ///
        ///  the task manager associated with the scene
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getTaskManager", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTaskManager* PxScene_getTaskManager(PxScene* self_);

        /// <summary>
        ///  Lock the scene for reading from the calling thread.
        ///
        ///  When the PxSceneFlag::eREQUIRE_RW_LOCK flag is enabled lockRead() must be
        ///  called before any read calls are made on the scene.
        ///
        ///  Multiple threads may read at the same time, no threads may read while a thread is writing.
        ///  If a call to lockRead() is made while another thread is holding a write lock
        ///  then the calling thread will be blocked until the writing thread calls unlockWrite().
        ///
        ///  Lock upgrading is *not* supported, that means it is an error to
        ///  call lockRead() followed by lockWrite().
        ///
        ///  Recursive locking is supported but each lockRead() call must be paired with an unlockRead().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_lockRead_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_lockRead_mut(PxScene* self_, byte* file, uint line);

        /// <summary>
        ///  Unlock the scene from reading.
        ///
        ///  Each unlockRead() must be paired with a lockRead() from the same thread.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_unlockRead_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_unlockRead_mut(PxScene* self_);

        /// <summary>
        ///  Lock the scene for writing from this thread.
        ///
        ///  When the PxSceneFlag::eREQUIRE_RW_LOCK flag is enabled lockWrite() must be
        ///  called before any write calls are made on the scene.
        ///
        ///  Only one thread may write at a time and no threads may read while a thread is writing.
        ///  If a call to lockWrite() is made and there are other threads reading then the
        ///  calling thread will be blocked until the readers complete.
        ///
        ///  Writers have priority. If a thread is blocked waiting to write then subsequent calls to
        ///  lockRead() from other threads will be blocked until the writer completes.
        ///
        ///  If multiple threads are waiting to write then the thread that is first
        ///  granted access depends on OS scheduling.
        ///
        ///  Recursive locking is supported but each lockWrite() call must be paired
        ///  with an unlockWrite().
        ///
        ///  If a thread has already locked the scene for writing then it may call
        ///  lockRead().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_lockWrite_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_lockWrite_mut(PxScene* self_, byte* file, uint line);

        /// <summary>
        ///  Unlock the scene from writing.
        ///
        ///  Each unlockWrite() must be paired with a lockWrite() from the same thread.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_unlockWrite_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_unlockWrite_mut(PxScene* self_);

        /// <summary>
        ///  set the cache blocks that can be used during simulate().
        ///
        ///  Each frame the simulation requires memory to store contact, friction, and contact cache data. This memory is used in blocks of 16K.
        ///  Each frame the blocks used by the previous frame are freed, and may be retrieved by the application using PxScene::flushSimulation()
        ///
        ///  This call will force allocation of cache blocks if the numBlocks parameter is greater than the currently allocated number
        ///  of blocks, and less than the max16KContactDataBlocks parameter specified at scene creation time.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setNbContactDataBlocks_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setNbContactDataBlocks_mut(PxScene* self_, uint numBlocks);

        /// <summary>
        ///  get the number of cache blocks currently used by the scene
        ///
        ///  This function may not be called while the scene is simulating
        ///
        ///  the number of cache blocks currently used by the scene
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getNbContactDataBlocksUsed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getNbContactDataBlocksUsed(PxScene* self_);

        /// <summary>
        ///  get the maximum number of cache blocks used by the scene
        ///
        ///  This function may not be called while the scene is simulating
        ///
        ///  the maximum number of cache blocks everused by the scene
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getMaxNbContactDataBlocksUsed", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getMaxNbContactDataBlocksUsed(PxScene* self_);

        /// <summary>
        ///  Return the value of PxSceneDesc::contactReportStreamBufferSize that was set when creating the scene with PxPhysics::createScene
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getContactReportStreamBufferSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getContactReportStreamBufferSize(PxScene* self_);

        /// <summary>
        ///  Sets the number of actors required to spawn a separate rigid body solver thread.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setSolverBatchSize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setSolverBatchSize_mut(PxScene* self_, uint solverBatchSize);

        /// <summary>
        ///  Retrieves the number of actors required to spawn a separate rigid body solver thread.
        ///
        ///  Current number of actors required to spawn a separate rigid body solver thread.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getSolverBatchSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getSolverBatchSize(PxScene* self_);

        /// <summary>
        ///  Sets the number of articulations required to spawn a separate rigid body solver thread.
        ///
        ///  Do not use this method while the simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_setSolverArticulationBatchSize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_setSolverArticulationBatchSize_mut(PxScene* self_, uint solverBatchSize);

        /// <summary>
        ///  Retrieves the number of articulations required to spawn a separate rigid body solver thread.
        ///
        ///  Current number of articulations required to spawn a separate rigid body solver thread.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getSolverArticulationBatchSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxScene_getSolverArticulationBatchSize(PxScene* self_);

        /// <summary>
        ///  Returns the wake counter reset value.
        ///
        ///  Wake counter reset value
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getWakeCounterResetValue", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxScene_getWakeCounterResetValue(PxScene* self_);

        /// <summary>
        ///  Shift the scene origin by the specified vector.
        ///
        ///  The poses of all objects in the scene and the corresponding data structures will get adjusted to reflect the new origin location
        ///  (the shift vector will get subtracted from all object positions).
        ///
        ///  It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysX accordingly.
        ///
        ///  Do not use this method while the simulation is running. Calls to this method while the simulation is running will be ignored.
        ///
        ///  Make sure to propagate the origin shift to other dependent modules (for example, the character controller module etc.).
        ///
        ///  This is an expensive operation and we recommend to use it only in the case where distance related precision issues may arise in areas far from the origin.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_shiftOrigin_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_shiftOrigin_mut(PxScene* self_, PxVec3* shift);

        /// <summary>
        ///  Returns the Pvd client associated with the scene.
        ///
        ///  the client, NULL if no PVD supported.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_getScenePvdClient_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPvdSceneClient* PxScene_getScenePvdClient_mut(PxScene* self_);

        /// <summary>
        ///  Copy GPU articulation data from the internal GPU buffer to a user-provided device buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_copyArticulationData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_copyArticulationData_mut(PxScene* self_, void* data, void* index, PxArticulationGpuDataType dataType, uint nbCopyArticulations, void* copyEvent);

        /// <summary>
        ///  Apply GPU articulation data from a user-provided device buffer to the internal GPU buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_applyArticulationData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_applyArticulationData_mut(PxScene* self_, void* data, void* index, PxArticulationGpuDataType dataType, uint nbUpdatedArticulations, void* waitEvent, void* signalEvent);

        /// <summary>
        ///  Copy GPU softbody data from the internal GPU buffer to a user-provided device buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_copySoftBodyData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_copySoftBodyData_mut(PxScene* self_, void** data, void* dataSizes, void* softBodyIndices, PxSoftBodyDataFlag flag, uint nbCopySoftBodies, uint maxSize, void* copyEvent);

        /// <summary>
        ///  Apply user-provided data to the internal softbody system.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_applySoftBodyData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_applySoftBodyData_mut(PxScene* self_, void** data, void* dataSizes, void* softBodyIndices, PxSoftBodyDataFlag flag, uint nbUpdatedSoftBodies, uint maxSize, void* applyEvent);

        /// <summary>
        ///  Copy contact data from the internal GPU buffer to a user-provided device buffer.
        ///
        ///  The contact data contains pointers to internal state and is only valid until the next call to simulate().
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_copyContactData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_copyContactData_mut(PxScene* self_, void* data, uint maxContactPairs, void* numContactPairs, void* copyEvent);

        /// <summary>
        ///  Copy GPU rigid body data from the internal GPU buffer to a user-provided device buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_copyBodyData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_copyBodyData_mut(PxScene* self_, PxGpuBodyData* data, PxGpuActorPair* index, uint nbCopyActors, void* copyEvent);

        /// <summary>
        ///  Apply user-provided data to rigid body.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_applyActorData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_applyActorData_mut(PxScene* self_, void* data, PxGpuActorPair* index, PxActorCacheFlag flag, uint nbUpdatedActors, void* waitEvent, void* signalEvent);

        /// <summary>
        ///  Compute dense Jacobian matrices for specified articulations on the GPU.
        ///
        ///  The size of Jacobians can vary by articulation, since it depends on the number of links, degrees-of-freedom, and whether the base is fixed.
        ///
        ///  The size is determined using these formulas:
        ///  nCols = (fixedBase ? 0 : 6) + dofCount
        ///  nRows = (fixedBase ? 0 : 6) + (linkCount - 1) * 6;
        ///
        ///  The user must ensure that adequate space is provided for each Jacobian matrix.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_computeDenseJacobians_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_computeDenseJacobians_mut(PxScene* self_, PxIndexDataPair* indices, uint nbIndices, void* computeEvent);

        /// <summary>
        ///  Compute the joint-space inertia matrices that maps joint accelerations to joint forces: forces = M * accelerations on the GPU.
        ///
        ///  The size of matrices can vary by articulation, since it depends on the number of links and degrees-of-freedom.
        ///
        ///  The size is determined using this formula:
        ///  sizeof(float) * dofCount * dofCount
        ///
        ///  The user must ensure that adequate space is provided for each mass matrix.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_computeGeneralizedMassMatrices_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_computeGeneralizedMassMatrices_mut(PxScene* self_, PxIndexDataPair* indices, uint nbIndices, void* computeEvent);

        /// <summary>
        ///  Computes the joint DOF forces required to counteract gravitational forces for the given articulation pose.
        ///
        ///  The size of the result can vary by articulation, since it depends on the number of links and degrees-of-freedom.
        ///
        ///  The size is determined using this formula:
        ///  sizeof(float) * dofCount
        ///
        ///  The user must ensure that adequate space is provided for each articulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_computeGeneralizedGravityForces_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_computeGeneralizedGravityForces_mut(PxScene* self_, PxIndexDataPair* indices, uint nbIndices, void* computeEvent);

        /// <summary>
        ///  Computes the joint DOF forces required to counteract coriolis and centrifugal forces for the given articulation pose.
        ///
        ///  The size of the result can vary by articulation, since it depends on the number of links and degrees-of-freedom.
        ///
        ///  The size is determined using this formula:
        ///  sizeof(float) * dofCount
        ///
        ///  The user must ensure that adequate space is provided for each articulation.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_computeCoriolisAndCentrifugalForces_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_computeCoriolisAndCentrifugalForces_mut(PxScene* self_, PxIndexDataPair* indices, uint nbIndices, void* computeEvent);

        [DllImport(__DllName, EntryPoint = "PxScene_getGpuDynamicsConfig", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxgDynamicsMemoryConfig PxScene_getGpuDynamicsConfig(PxScene* self_);

        /// <summary>
        ///  Apply user-provided data to particle buffers.
        ///
        ///  This function should be used if the particle buffer flags are already on the device. Otherwise, use PxParticleBuffer::raiseFlags()
        ///  from the CPU.
        ///
        ///  This assumes the data has been changed directly in the PxParticleBuffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxScene_applyParticleBufferData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxScene_applyParticleBufferData_mut(PxScene* self_, uint* indices, PxGpuParticleBufferIndexPair* bufferIndexPair, PxParticleBufferFlags* flags, uint nbUpdatedBuffers, void* waitEvent, void* signalEvent);

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneReadLock_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneReadLock* PxSceneReadLock_new_alloc(PxScene* scene, byte* file, uint line);

        [DllImport(__DllName, EntryPoint = "PxSceneReadLock_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneReadLock_delete(PxSceneReadLock* self_);

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneWriteLock_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneWriteLock* PxSceneWriteLock_new_alloc(PxScene* scene, byte* file, uint line);

        [DllImport(__DllName, EntryPoint = "PxSceneWriteLock_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSceneWriteLock_delete(PxSceneWriteLock* self_);

        [DllImport(__DllName, EntryPoint = "PxContactPairExtraDataItem_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactPairExtraDataItem PxContactPairExtraDataItem_new();

        [DllImport(__DllName, EntryPoint = "PxContactPairVelocity_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactPairVelocity PxContactPairVelocity_new();

        [DllImport(__DllName, EntryPoint = "PxContactPairPose_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactPairPose PxContactPairPose_new();

        [DllImport(__DllName, EntryPoint = "PxContactPairIndex_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactPairIndex PxContactPairIndex_new();

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactPairExtraDataIterator_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactPairExtraDataIterator PxContactPairExtraDataIterator_new(byte* stream, uint size);

        /// <summary>
        ///  Advances the iterator to next set of extra data items.
        ///
        ///  The contact pair extra data stream contains sets of items as requested by the corresponding [`PxPairFlag`] flags
        ///  [`PxPairFlag::ePRE_SOLVER_VELOCITY`], #PxPairFlag::ePOST_SOLVER_VELOCITY, #PxPairFlag::eCONTACT_EVENT_POSE. A set can contain one
        ///  item of each plus the PxContactPairIndex item. This method parses the stream and points the iterator
        ///  member variables to the corresponding items of the current set, if they are available. If CCD is not enabled,
        ///  you should only get one set of items. If CCD with multiple passes is enabled, you might get more than one item
        ///  set.
        ///
        ///  Even though contact pair extra data is requested per shape pair, you will not get an item set per shape pair
        ///  but one per actor pair. If, for example, an actor has two shapes and both collide with another actor, then
        ///  there will only be one item set (since it applies to both shape pairs).
        ///
        ///  True if there was another set of extra data items in the stream, else false.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactPairExtraDataIterator_nextItemSet_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxContactPairExtraDataIterator_nextItemSet_mut(PxContactPairExtraDataIterator* self_);

        [DllImport(__DllName, EntryPoint = "PxContactPairHeader_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactPairHeader PxContactPairHeader_new();

        [DllImport(__DllName, EntryPoint = "PxContactPair_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactPair PxContactPair_new();

        /// <summary>
        ///  Extracts the contact points from the stream and stores them in a convenient format.
        ///
        ///  Number of contact points written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactPair_extractContacts", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactPair_extractContacts(PxContactPair* self_, PxContactPairPoint* userBuffer, uint bufferSize);

        /// <summary>
        ///  Helper method to clone the contact pair and copy the contact data stream into a user buffer.
        ///
        ///  The contact data stream is only accessible during the contact report callback. This helper function provides copy functionality
        ///  to buffer the contact stream information such that it can get accessed at a later stage.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactPair_bufferContacts", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactPair_bufferContacts(PxContactPair* self_, PxContactPair* newPair, byte* bufferMemory);

        [DllImport(__DllName, EntryPoint = "PxContactPair_getInternalFaceIndices", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint* PxContactPair_getInternalFaceIndices(PxContactPair* self_);

        [DllImport(__DllName, EntryPoint = "PxTriggerPair_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriggerPair PxTriggerPair_new();

        [DllImport(__DllName, EntryPoint = "PxConstraintInfo_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConstraintInfo PxConstraintInfo_new();

        [DllImport(__DllName, EntryPoint = "PxConstraintInfo_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConstraintInfo PxConstraintInfo_new_1(PxConstraint* c, void* extRef, uint t);

        /// <summary>
        ///  This is called when a breakable constraint breaks.
        ///
        ///  The user should not release the constraint shader inside this call!
        ///
        ///  No event will get reported if the constraint breaks but gets deleted while the time step is still being simulated.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationEventCallback_onConstraintBreak_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationEventCallback_onConstraintBreak_mut(PxSimulationEventCallback* self_, PxConstraintInfo* constraints, uint count);

        /// <summary>
        ///  This is called with the actors which have just been woken up.
        ///
        ///  Only supported by rigid bodies yet.
        ///
        ///  Only called on actors for which the PxActorFlag eSEND_SLEEP_NOTIFIES has been set.
        ///
        ///  Only the latest sleep state transition happening between fetchResults() of the previous frame and fetchResults() of the current frame
        ///  will get reported. For example, let us assume actor A is awake, then A-&gt;putToSleep() gets called, then later A-&gt;wakeUp() gets called.
        ///  At the next simulate/fetchResults() step only an onWake() event will get triggered because that was the last transition.
        ///
        ///  If an actor gets newly added to a scene with properties such that it is awake and the sleep state does not get changed by
        ///  the user or simulation, then an onWake() event will get sent at the next simulate/fetchResults() step.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationEventCallback_onWake_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationEventCallback_onWake_mut(PxSimulationEventCallback* self_, PxActor** actors, uint count);

        /// <summary>
        ///  This is called with the actors which have just been put to sleep.
        ///
        ///  Only supported by rigid bodies yet.
        ///
        ///  Only called on actors for which the PxActorFlag eSEND_SLEEP_NOTIFIES has been set.
        ///
        ///  Only the latest sleep state transition happening between fetchResults() of the previous frame and fetchResults() of the current frame
        ///  will get reported. For example, let us assume actor A is asleep, then A-&gt;wakeUp() gets called, then later A-&gt;putToSleep() gets called.
        ///  At the next simulate/fetchResults() step only an onSleep() event will get triggered because that was the last transition (assuming the simulation
        ///  does not wake the actor up).
        ///
        ///  If an actor gets newly added to a scene with properties such that it is asleep and the sleep state does not get changed by
        ///  the user or simulation, then an onSleep() event will get sent at the next simulate/fetchResults() step.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationEventCallback_onSleep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationEventCallback_onSleep_mut(PxSimulationEventCallback* self_, PxActor** actors, uint count);

        /// <summary>
        ///  This is called when certain contact events occur.
        ///
        ///  The method will be called for a pair of actors if one of the colliding shape pairs requested contact notification.
        ///  You request which events are reported using the filter shader/callback mechanism (see [`PxSimulationFilterShader`],
        ///  [`PxSimulationFilterCallback`], #PxPairFlag).
        ///
        ///  Do not keep references to the passed objects, as they will be
        ///  invalid after this function returns.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationEventCallback_onContact_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationEventCallback_onContact_mut(PxSimulationEventCallback* self_, PxContactPairHeader* pairHeader, PxContactPair* pairs, uint nbPairs);

        /// <summary>
        ///  This is called with the current trigger pair events.
        ///
        ///  Shapes which have been marked as triggers using PxShapeFlag::eTRIGGER_SHAPE will send events
        ///  according to the pair flag specification in the filter shader (see [`PxPairFlag`], #PxSimulationFilterShader).
        ///
        ///  Trigger shapes will no longer send notification events for interactions with other trigger shapes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationEventCallback_onTrigger_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationEventCallback_onTrigger_mut(PxSimulationEventCallback* self_, PxTriggerPair* pairs, uint count);

        /// <summary>
        ///  Provides early access to the new pose of moving rigid bodies.
        ///
        ///  When this call occurs, rigid bodies having the [`PxRigidBodyFlag::eENABLE_POSE_INTEGRATION_PREVIEW`]
        ///  flag set, were moved by the simulation and their new poses can be accessed through the provided buffers.
        ///
        ///  The provided buffers are valid and can be read until the next call to [`PxScene::simulate`]() or #PxScene::collide().
        ///
        ///  This callback gets triggered while the simulation is running. If the provided rigid body references are used to
        ///  read properties of the object, then the callback has to guarantee no other thread is writing to the same body at the same
        ///  time.
        ///
        ///  The code in this callback should be lightweight as it can block the simulation, that is, the
        ///  [`PxScene::fetchResults`]() call.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSimulationEventCallback_onAdvance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationEventCallback_onAdvance_mut(PxSimulationEventCallback* self_, PxRigidBody** bodyBuffer, PxTransform* poseBuffer, uint count);

        [DllImport(__DllName, EntryPoint = "PxSimulationEventCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSimulationEventCallback_delete(PxSimulationEventCallback* self_);

        [DllImport(__DllName, EntryPoint = "PxFEMParameters_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFEMParameters PxFEMParameters_new();

        /// <summary>
        ///  Release this object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPruningStructure_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPruningStructure_release_mut(PxPruningStructure* self_);

        /// <summary>
        ///  Retrieve rigid actors in the pruning structure.
        ///
        ///  You can retrieve the number of rigid actor pointers by calling [`getNbRigidActors`]()
        ///
        ///  Number of rigid actor pointers written to the buffer.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPruningStructure_getRigidActors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPruningStructure_getRigidActors(PxPruningStructure* self_, PxRigidActor** userBuffer, uint bufferSize, uint startIndex);

        /// <summary>
        ///  Returns the number of rigid actors in the pruning structure.
        ///
        ///  You can use [`getRigidActors`]() to retrieve the rigid actor pointers.
        ///
        ///  Number of rigid actors in the pruning structure.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPruningStructure_getNbRigidActors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxPruningStructure_getNbRigidActors(PxPruningStructure* self_);

        /// <summary>
        ///  Gets the merge data for static actors
        ///
        ///  This is mainly called by the PxSceneQuerySystem::merge() function to merge a PxPruningStructure
        ///  with the internal data-structures of the scene-query system.
        ///
        ///  Implementation-dependent merge data for static actors.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPruningStructure_getStaticMergeData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxPruningStructure_getStaticMergeData(PxPruningStructure* self_);

        /// <summary>
        ///  Gets the merge data for dynamic actors
        ///
        ///  This is mainly called by the PxSceneQuerySystem::merge() function to merge a PxPruningStructure
        ///  with the internal data-structures of the scene-query system.
        ///
        ///  Implementation-dependent merge data for dynamic actors.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPruningStructure_getDynamicMergeData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxPruningStructure_getDynamicMergeData(PxPruningStructure* self_);

        [DllImport(__DllName, EntryPoint = "PxPruningStructure_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxPruningStructure_getConcreteTypeName(PxPruningStructure* self_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxExtendedVec3 PxExtendedVec3_new();

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxExtendedVec3 PxExtendedVec3_new_1(double _x, double _y, double _z);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_isZero", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxExtendedVec3_isZero(PxExtendedVec3* self_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_dot", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double PxExtendedVec3_dot(PxExtendedVec3* self_, PxVec3* v);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_distanceSquared", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double PxExtendedVec3_distanceSquared(PxExtendedVec3* self_, PxExtendedVec3* v);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_magnitudeSquared", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double PxExtendedVec3_magnitudeSquared(PxExtendedVec3* self_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_magnitude", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double PxExtendedVec3_magnitude(PxExtendedVec3* self_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_normalize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern double PxExtendedVec3_normalize_mut(PxExtendedVec3* self_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_isFinite", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxExtendedVec3_isFinite(PxExtendedVec3* self_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_maximum_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxExtendedVec3_maximum_mut(PxExtendedVec3* self_, PxExtendedVec3* v);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_minimum_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxExtendedVec3_minimum_mut(PxExtendedVec3* self_, PxExtendedVec3* v);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_set_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxExtendedVec3_set_mut(PxExtendedVec3* self_, double x_, double y_, double z_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_setPlusInfinity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxExtendedVec3_setPlusInfinity_mut(PxExtendedVec3* self_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_setMinusInfinity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxExtendedVec3_setMinusInfinity_mut(PxExtendedVec3* self_);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_cross_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxExtendedVec3_cross_mut(PxExtendedVec3* self_, PxExtendedVec3* left, PxVec3* right);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_cross_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxExtendedVec3_cross_mut_1(PxExtendedVec3* self_, PxExtendedVec3* left, PxExtendedVec3* right);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_cross", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxExtendedVec3 PxExtendedVec3_cross(PxExtendedVec3* self_, PxExtendedVec3* v);

        [DllImport(__DllName, EntryPoint = "PxExtendedVec3_cross_mut_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxExtendedVec3_cross_mut_2(PxExtendedVec3* self_, PxVec3* left, PxExtendedVec3* right);

        [DllImport(__DllName, EntryPoint = "phys_toVec3", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 phys_toVec3(PxExtendedVec3* v);

        [DllImport(__DllName, EntryPoint = "PxObstacle_getType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGeometryType PxObstacle_getType(PxObstacle* self_);

        [DllImport(__DllName, EntryPoint = "PxBoxObstacle_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBoxObstacle PxBoxObstacle_new();

        [DllImport(__DllName, EntryPoint = "PxCapsuleObstacle_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCapsuleObstacle PxCapsuleObstacle_new();

        /// <summary>
        ///  Releases the context.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxObstacleContext_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxObstacleContext_release_mut(PxObstacleContext* self_);

        /// <summary>
        ///  Retrieves the controller manager associated with this context.
        ///
        ///  The associated controller manager
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxObstacleContext_getControllerManager", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerManager* PxObstacleContext_getControllerManager(PxObstacleContext* self_);

        /// <summary>
        ///  Adds an obstacle to the context.
        ///
        ///  Handle for newly-added obstacle
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxObstacleContext_addObstacle_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxObstacleContext_addObstacle_mut(PxObstacleContext* self_, PxObstacle* obstacle);

        /// <summary>
        ///  Removes an obstacle from the context.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxObstacleContext_removeObstacle_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxObstacleContext_removeObstacle_mut(PxObstacleContext* self_, uint handle);

        /// <summary>
        ///  Updates data for an existing obstacle.
        ///
        ///  True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxObstacleContext_updateObstacle_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxObstacleContext_updateObstacle_mut(PxObstacleContext* self_, uint handle, PxObstacle* obstacle);

        /// <summary>
        ///  Retrieves number of obstacles in the context.
        ///
        ///  Number of obstacles in the context
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxObstacleContext_getNbObstacles", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxObstacleContext_getNbObstacles(PxObstacleContext* self_);

        /// <summary>
        ///  Retrieves desired obstacle.
        ///
        ///  Desired obstacle
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxObstacleContext_getObstacle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxObstacle* PxObstacleContext_getObstacle(PxObstacleContext* self_, uint i);

        /// <summary>
        ///  Retrieves desired obstacle by given handle.
        ///
        ///  Desired obstacle
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxObstacleContext_getObstacleByHandle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxObstacle* PxObstacleContext_getObstacleByHandle(PxObstacleContext* self_, uint handle);

        /// <summary>
        ///  Called when current controller hits a shape.
        ///
        ///  This is called when the CCT moves and hits a shape. This will not be called when a moving shape hits a non-moving CCT.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxUserControllerHitReport_onShapeHit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxUserControllerHitReport_onShapeHit_mut(PxUserControllerHitReport* self_, PxControllerShapeHit* hit);

        /// <summary>
        ///  Called when current controller hits another controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxUserControllerHitReport_onControllerHit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxUserControllerHitReport_onControllerHit_mut(PxUserControllerHitReport* self_, PxControllersHit* hit);

        /// <summary>
        ///  Called when current controller hits a user-defined obstacle.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxUserControllerHitReport_onObstacleHit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxUserControllerHitReport_onObstacleHit_mut(PxUserControllerHitReport* self_, PxControllerObstacleHit* hit);

        [DllImport(__DllName, EntryPoint = "PxControllerFilterCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerFilterCallback_delete(PxControllerFilterCallback* self_);

        /// <summary>
        ///  Filtering method for CCT-vs-CCT.
        ///
        ///  true to keep the pair, false to filter it out
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerFilterCallback_filter_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxControllerFilterCallback_filter_mut(PxControllerFilterCallback* self_, PxController* a, PxController* b);

        [DllImport(__DllName, EntryPoint = "PxControllerFilters_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerFilters PxControllerFilters_new(PxFilterData* filterData, PxQueryFilterCallback* cb, PxControllerFilterCallback* cctFilterCb);

        /// <summary>
        ///  returns true if the current settings are valid
        ///
        ///  True if the descriptor is valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxControllerDesc_isValid(PxControllerDesc* self_);

        /// <summary>
        ///  Returns the character controller type
        ///
        ///  The controllers type.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerDesc_getType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerShapeType PxControllerDesc_getType(PxControllerDesc* self_);

        /// <summary>
        ///  Return the type of controller
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerShapeType PxController_getType(PxController* self_);

        /// <summary>
        ///  Releases the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_release_mut(PxController* self_);

        /// <summary>
        ///  Moves the character using a "collide-and-slide" algorithm.
        ///
        ///  Collision flags, collection of ::PxControllerCollisionFlags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_move_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerCollisionFlags PxController_move_mut(PxController* self_, PxVec3* disp, float minDist, float elapsedTime, PxControllerFilters* filters, PxObstacleContext* obstacles);

        /// <summary>
        ///  Sets controller's position.
        ///
        ///  The position controlled by this function is the center of the collision shape.
        ///
        ///  This is a 'teleport' function, it doesn't check for collisions.
        ///
        ///  The character's position must be such that it does not overlap the static geometry.
        ///
        ///  To move the character under normal conditions use the [`move`]() function.
        ///
        ///  Currently always returns true.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_setPosition_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxController_setPosition_mut(PxController* self_, PxExtendedVec3* position);

        /// <summary>
        ///  Retrieve the raw position of the controller.
        ///
        ///  The position retrieved by this function is the center of the collision shape. To retrieve the bottom position of the shape,
        ///  a.k.a. the foot position, use the getFootPosition() function.
        ///
        ///  The position is updated by calls to move(). Calling this method without calling
        ///  move() will return the last position or the initial position of the controller.
        ///
        ///  The controller's center position
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getPosition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxExtendedVec3* PxController_getPosition(PxController* self_);

        /// <summary>
        ///  Set controller's foot position.
        ///
        ///  The position controlled by this function is the bottom of the collision shape, a.k.a. the foot position.
        ///
        ///  The foot position takes the contact offset into account
        ///
        ///  This is a 'teleport' function, it doesn't check for collisions.
        ///
        ///  To move the character under normal conditions use the [`move`]() function.
        ///
        ///  Currently always returns true.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_setFootPosition_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxController_setFootPosition_mut(PxController* self_, PxExtendedVec3* position);

        /// <summary>
        ///  Retrieve the "foot" position of the controller, i.e. the position of the bottom of the CCT's shape.
        ///
        ///  The foot position takes the contact offset into account
        ///
        ///  The controller's foot position
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getFootPosition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxExtendedVec3 PxController_getFootPosition(PxController* self_);

        /// <summary>
        ///  Get the rigid body actor associated with this controller (see PhysX documentation).
        ///  The behavior upon manually altering this actor is undefined, you should primarily
        ///  use it for reading const properties.
        ///
        ///  the actor associated with the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getActor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidDynamic* PxController_getActor(PxController* self_);

        /// <summary>
        ///  The step height.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_setStepOffset_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_setStepOffset_mut(PxController* self_, float offset);

        /// <summary>
        ///  Retrieve the step height.
        ///
        ///  The step offset for the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getStepOffset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxController_getStepOffset(PxController* self_);

        /// <summary>
        ///  Sets the non-walkable mode for the CCT.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_setNonWalkableMode_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_setNonWalkableMode_mut(PxController* self_, PxControllerNonWalkableMode flag);

        /// <summary>
        ///  Retrieves the non-walkable mode for the CCT.
        ///
        ///  The current non-walkable mode.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getNonWalkableMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerNonWalkableMode PxController_getNonWalkableMode(PxController* self_);

        /// <summary>
        ///  Retrieve the contact offset.
        ///
        ///  The contact offset for the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getContactOffset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxController_getContactOffset(PxController* self_);

        /// <summary>
        ///  Sets the contact offset.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_setContactOffset_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_setContactOffset_mut(PxController* self_, float offset);

        /// <summary>
        ///  Retrieve the 'up' direction.
        ///
        ///  The up direction for the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getUpDirection", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxController_getUpDirection(PxController* self_);

        /// <summary>
        ///  Sets the 'up' direction.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_setUpDirection_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_setUpDirection_mut(PxController* self_, PxVec3* up);

        /// <summary>
        ///  Retrieve the slope limit.
        ///
        ///  The slope limit for the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getSlopeLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxController_getSlopeLimit(PxController* self_);

        /// <summary>
        ///  Sets the slope limit.
        ///
        ///  This feature can not be enabled at runtime, i.e. if the slope limit is zero when creating the CCT
        ///  (which disables the feature) then changing the slope limit at runtime will not have any effect, and the call
        ///  will be ignored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_setSlopeLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_setSlopeLimit_mut(PxController* self_, float slopeLimit);

        /// <summary>
        ///  Flushes internal geometry cache.
        ///
        ///  The character controller uses caching in order to speed up collision testing. The cache is
        ///  automatically flushed when a change to static objects is detected in the scene. For example when a
        ///  static shape is added, updated, or removed from the scene, the cache is automatically invalidated.
        ///
        ///  However there may be situations that cannot be automatically detected, and those require manual
        ///  invalidation of the cache. Currently the user must call this when the filtering behavior changes (the
        ///  PxControllerFilters parameter of the PxController::move call).  While the controller in principle
        ///  could detect a change in these parameters, it cannot detect a change in the behavior of the filtering
        ///  function.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_invalidateCache_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_invalidateCache_mut(PxController* self_);

        /// <summary>
        ///  Retrieve the scene associated with the controller.
        ///
        ///  The physics scene
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getScene_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxScene* PxController_getScene_mut(PxController* self_);

        /// <summary>
        ///  Returns the user data associated with this controller.
        ///
        ///  The user pointer associated with the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getUserData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxController_getUserData(PxController* self_);

        /// <summary>
        ///  Sets the user data associated with this controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_setUserData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_setUserData_mut(PxController* self_, void* userData);

        /// <summary>
        ///  Returns information about the controller's internal state.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getState", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_getState(PxController* self_, PxControllerState* state);

        /// <summary>
        ///  Returns the controller's internal statistics.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_getStats", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_getStats(PxController* self_, PxControllerStats* stats);

        /// <summary>
        ///  Resizes the controller.
        ///
        ///  This function attempts to resize the controller to a given size, while making sure the bottom
        ///  position of the controller remains constant. In other words the function modifies both the
        ///  height and the (center) position of the controller. This is a helper function that can be used
        ///  to implement a 'crouch' functionality for example.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxController_resize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxController_resize_mut(PxController* self_, float height);

        /// <summary>
        ///  constructor sets to default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxControllerDesc_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBoxControllerDesc* PxBoxControllerDesc_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxBoxControllerDesc_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBoxControllerDesc_delete(PxBoxControllerDesc* self_);

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxControllerDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBoxControllerDesc_setToDefault_mut(PxBoxControllerDesc* self_);

        /// <summary>
        ///  returns true if the current settings are valid
        ///
        ///  True if the descriptor is valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxControllerDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBoxControllerDesc_isValid(PxBoxControllerDesc* self_);

        /// <summary>
        ///  Gets controller's half height.
        ///
        ///  The half height of the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxController_getHalfHeight", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxBoxController_getHalfHeight(PxBoxController* self_);

        /// <summary>
        ///  Gets controller's half side extent.
        ///
        ///  The half side extent of the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxController_getHalfSideExtent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxBoxController_getHalfSideExtent(PxBoxController* self_);

        /// <summary>
        ///  Gets controller's half forward extent.
        ///
        ///  The half forward extent of the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxController_getHalfForwardExtent", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxBoxController_getHalfForwardExtent(PxBoxController* self_);

        /// <summary>
        ///  Sets controller's half height.
        ///
        ///  this doesn't check for collisions.
        ///
        ///  Currently always true.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxController_setHalfHeight_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBoxController_setHalfHeight_mut(PxBoxController* self_, float halfHeight);

        /// <summary>
        ///  Sets controller's half side extent.
        ///
        ///  this doesn't check for collisions.
        ///
        ///  Currently always true.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxController_setHalfSideExtent_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBoxController_setHalfSideExtent_mut(PxBoxController* self_, float halfSideExtent);

        /// <summary>
        ///  Sets controller's half forward extent.
        ///
        ///  this doesn't check for collisions.
        ///
        ///  Currently always true.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBoxController_setHalfForwardExtent_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBoxController_setHalfForwardExtent_mut(PxBoxController* self_, float halfForwardExtent);

        /// <summary>
        ///  constructor sets to default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleControllerDesc_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCapsuleControllerDesc* PxCapsuleControllerDesc_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxCapsuleControllerDesc_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCapsuleControllerDesc_delete(PxCapsuleControllerDesc* self_);

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleControllerDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCapsuleControllerDesc_setToDefault_mut(PxCapsuleControllerDesc* self_);

        /// <summary>
        ///  returns true if the current settings are valid
        ///
        ///  True if the descriptor is valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleControllerDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCapsuleControllerDesc_isValid(PxCapsuleControllerDesc* self_);

        /// <summary>
        ///  Gets controller's radius.
        ///
        ///  The radius of the controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleController_getRadius", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxCapsuleController_getRadius(PxCapsuleController* self_);

        /// <summary>
        ///  Sets controller's radius.
        ///
        ///  this doesn't check for collisions.
        ///
        ///  Currently always true.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleController_setRadius_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCapsuleController_setRadius_mut(PxCapsuleController* self_, float radius);

        /// <summary>
        ///  Gets controller's height.
        ///
        ///  The height of the capsule controller.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleController_getHeight", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxCapsuleController_getHeight(PxCapsuleController* self_);

        /// <summary>
        ///  Resets controller's height.
        ///
        ///  this doesn't check for collisions.
        ///
        ///  Currently always true.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleController_setHeight_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCapsuleController_setHeight_mut(PxCapsuleController* self_, float height);

        /// <summary>
        ///  Gets controller's climbing mode.
        ///
        ///  The capsule controller's climbing mode.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleController_getClimbingMode", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCapsuleClimbingMode PxCapsuleController_getClimbingMode(PxCapsuleController* self_);

        /// <summary>
        ///  Sets controller's climbing mode.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCapsuleController_setClimbingMode_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCapsuleController_setClimbingMode_mut(PxCapsuleController* self_, PxCapsuleClimbingMode mode);

        /// <summary>
        ///  Retrieve behavior flags for a shape.
        ///
        ///  When the CCT touches a shape, the CCT's behavior w.r.t. this shape can be customized by users.
        ///  This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.
        ///
        ///  See comments about deprecated functions at the start of this class
        ///
        ///  Desired behavior flags for the given shape
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerBehaviorCallback_getBehaviorFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerBehaviorFlags PxControllerBehaviorCallback_getBehaviorFlags_mut(PxControllerBehaviorCallback* self_, PxShape* shape, PxActor* actor);

        /// <summary>
        ///  Retrieve behavior flags for a controller.
        ///
        ///  When the CCT touches a controller, the CCT's behavior w.r.t. this controller can be customized by users.
        ///  This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.
        ///
        ///  The flag PxControllerBehaviorFlag::eCCT_CAN_RIDE_ON_OBJECT is not supported.
        ///
        ///  See comments about deprecated functions at the start of this class
        ///
        ///  Desired behavior flags for the given controller
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerBehaviorCallback_getBehaviorFlags_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerBehaviorFlags PxControllerBehaviorCallback_getBehaviorFlags_mut_1(PxControllerBehaviorCallback* self_, PxController* controller);

        /// <summary>
        ///  Retrieve behavior flags for an obstacle.
        ///
        ///  When the CCT touches an obstacle, the CCT's behavior w.r.t. this obstacle can be customized by users.
        ///  This function retrieves the desired PxControllerBehaviorFlag flags capturing the desired behavior.
        ///
        ///  See comments about deprecated functions at the start of this class
        ///
        ///  Desired behavior flags for the given obstacle
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerBehaviorCallback_getBehaviorFlags_mut_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerBehaviorFlags PxControllerBehaviorCallback_getBehaviorFlags_mut_2(PxControllerBehaviorCallback* self_, PxObstacle* obstacle);

        /// <summary>
        ///  Releases the controller manager.
        ///
        ///  This will release all associated controllers and obstacle contexts.
        ///
        ///  This function is required to be called to release foundation usage.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_release_mut(PxControllerManager* self_);

        /// <summary>
        ///  Returns the scene the manager is adding the controllers to.
        ///
        ///  The associated physics scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_getScene", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxScene* PxControllerManager_getScene(PxControllerManager* self_);

        /// <summary>
        ///  Returns the number of controllers that are being managed.
        ///
        ///  The number of controllers.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_getNbControllers", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxControllerManager_getNbControllers(PxControllerManager* self_);

        /// <summary>
        ///  Retrieve one of the controllers in the manager.
        ///
        ///  The controller with the specified index.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_getController_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxController* PxControllerManager_getController_mut(PxControllerManager* self_, uint index);

        /// <summary>
        ///  Creates a new character controller.
        ///
        ///  The new controller
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_createController_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxController* PxControllerManager_createController_mut(PxControllerManager* self_, PxControllerDesc* desc);

        /// <summary>
        ///  Releases all the controllers that are being managed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_purgeControllers_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_purgeControllers_mut(PxControllerManager* self_);

        /// <summary>
        ///  Retrieves debug data.
        ///
        ///  The render buffer filled with debug-render data
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_getRenderBuffer_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRenderBuffer* PxControllerManager_getRenderBuffer_mut(PxControllerManager* self_);

        /// <summary>
        ///  Sets debug rendering flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_setDebugRenderingFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_setDebugRenderingFlags_mut(PxControllerManager* self_, PxControllerDebugRenderFlags flags);

        /// <summary>
        ///  Returns the number of obstacle contexts that are being managed.
        ///
        ///  The number of obstacle contexts.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_getNbObstacleContexts", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxControllerManager_getNbObstacleContexts(PxControllerManager* self_);

        /// <summary>
        ///  Retrieve one of the obstacle contexts in the manager.
        ///
        ///  The obstacle context with the specified index.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_getObstacleContext_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxObstacleContext* PxControllerManager_getObstacleContext_mut(PxControllerManager* self_, uint index);

        /// <summary>
        ///  Creates an obstacle context.
        ///
        ///  New obstacle context
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_createObstacleContext_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxObstacleContext* PxControllerManager_createObstacleContext_mut(PxControllerManager* self_);

        /// <summary>
        ///  Computes character-character interactions.
        ///
        ///  This function is an optional helper to properly resolve interactions between characters, in case they overlap (which can happen for gameplay reasons, etc).
        ///
        ///  You should call this once per frame, before your PxController::move() calls. The function will not move the characters directly, but it will
        ///  compute overlap information for each character that will be used in the next move() call.
        ///
        ///  You need to provide a proper time value here so that interactions are resolved in a way that do not depend on the framerate.
        ///
        ///  If you only have one character in the scene, or if you can guarantee your characters will never overlap, then you do not need to call this function.
        ///
        ///  Releasing the manager will automatically release all the associated obstacle contexts.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_computeInteractions_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_computeInteractions_mut(PxControllerManager* self_, float elapsedTime, PxControllerFilterCallback* cctFilterCb);

        /// <summary>
        ///  Enables or disables runtime tessellation.
        ///
        ///  Large triangles can create accuracy issues in the sweep code, which in turn can lead to characters not sliding smoothly
        ///  against geometries, or even penetrating them. This feature allows one to reduce those issues by tessellating large
        ///  triangles at runtime, before performing sweeps against them. The amount of tessellation is controlled by the 'maxEdgeLength' parameter.
        ///  Any triangle with at least one edge length greater than the maxEdgeLength will get recursively tessellated, until resulting triangles are small enough.
        ///
        ///  This features only applies to triangle meshes, convex meshes, heightfields and boxes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_setTessellation_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_setTessellation_mut(PxControllerManager* self_, [MarshalAs(UnmanagedType.U1)] bool flag, float maxEdgeLength);

        /// <summary>
        ///  Enables or disables the overlap recovery module.
        ///
        ///  The overlap recovery module can be used to depenetrate CCTs from static objects when an overlap is detected. This can happen
        ///  in three main cases:
        ///  - when the CCT is directly spawned or teleported in another object
        ///  - when the CCT algorithm fails due to limited FPU accuracy
        ///  - when the "up vector" is modified, making the rotated CCT shape overlap surrounding objects
        ///
        ///  When activated, the CCT module will automatically try to resolve the penetration, and move the CCT to a safe place where it does
        ///  not overlap other objects anymore. This only concerns static objects, dynamic objects are ignored by the recovery module.
        ///
        ///  When the recovery module is not activated, it is possible for the CCTs to go through static objects. By default, the recovery
        ///  module is enabled.
        ///
        ///  The recovery module currently works with all geometries except heightfields.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_setOverlapRecoveryModule_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_setOverlapRecoveryModule_mut(PxControllerManager* self_, [MarshalAs(UnmanagedType.U1)] bool flag);

        /// <summary>
        ///  Enables or disables the precise sweeps.
        ///
        ///  Precise sweeps are more accurate, but also potentially slower than regular sweeps.
        ///
        ///  By default, precise sweeps are enabled.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_setPreciseSweeps_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_setPreciseSweeps_mut(PxControllerManager* self_, [MarshalAs(UnmanagedType.U1)] bool flag);

        /// <summary>
        ///  Enables or disables vertical sliding against ceilings.
        ///
        ///  Geometry is seen as "ceilings" when the following condition is met:
        ///
        ///  dot product(contact normal, up direction)
        ///  &lt;
        ///  0.0f
        ///
        ///  This flag controls whether characters should slide vertically along the geometry in that case.
        ///
        ///  By default, sliding is allowed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_setPreventVerticalSlidingAgainstCeiling_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_setPreventVerticalSlidingAgainstCeiling_mut(PxControllerManager* self_, [MarshalAs(UnmanagedType.U1)] bool flag);

        /// <summary>
        ///  Shift the origin of the character controllers and obstacle objects by the specified vector.
        ///
        ///  The positions of all character controllers, obstacle objects and the corresponding data structures will get adjusted to reflect the shifted origin location
        ///  (the shift vector will get subtracted from all character controller and obstacle object positions).
        ///
        ///  It is the user's responsibility to keep track of the summed total origin shift and adjust all input/output to/from PhysXCharacterKinematic accordingly.
        ///
        ///  This call will not automatically shift the PhysX scene and its objects. You need to call PxScene::shiftOrigin() seperately to keep the systems in sync.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxControllerManager_shiftOrigin_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxControllerManager_shiftOrigin_mut(PxControllerManager* self_, PxVec3* shift);

        /// <summary>
        ///  Creates the controller manager.
        ///
        ///  The character controller is informed by [`PxDeletionListener::onRelease`]() when actors or shapes are released, and updates its internal
        ///  caches accordingly. If character controller movement or a call to [`PxControllerManager::shiftOrigin`]() may overlap with actor/shape releases,
        ///  internal data structures must be guarded against concurrent access.
        ///
        ///  Locking guarantees thread safety in such scenarios.
        ///
        ///  locking may result in significant slowdown for release of actors or shapes.
        ///
        ///  By default, locking is disabled.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateControllerManager", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxControllerManager* phys_PxCreateControllerManager(PxScene* scene, [MarshalAs(UnmanagedType.U1)] bool lockingEnabled);

        [DllImport(__DllName, EntryPoint = "PxDim3_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDim3 PxDim3_new();

        /// <summary>
        ///  Constructor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSDFDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSDFDesc PxSDFDesc_new();

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSDFDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSDFDesc_isValid(PxSDFDesc* self_);

        /// <summary>
        ///  constructor sets to default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMeshDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConvexMeshDesc PxConvexMeshDesc_new();

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMeshDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxConvexMeshDesc_setToDefault_mut(PxConvexMeshDesc* self_);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  True if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxConvexMeshDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxConvexMeshDesc_isValid(PxConvexMeshDesc* self_);

        /// <summary>
        ///  Constructor sets to default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMeshDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangleMeshDesc PxTriangleMeshDesc_new();

        /// <summary>
        ///  (re)sets the structure to the default.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMeshDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangleMeshDesc_setToDefault_mut(PxTriangleMeshDesc* self_);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMeshDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTriangleMeshDesc_isValid(PxTriangleMeshDesc* self_);

        /// <summary>
        ///  Constructor to build an empty tetmesh description
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMeshDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTetrahedronMeshDesc PxTetrahedronMeshDesc_new();

        [DllImport(__DllName, EntryPoint = "PxTetrahedronMeshDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTetrahedronMeshDesc_isValid(PxTetrahedronMeshDesc* self_);

        /// <summary>
        ///  Constructor to build an empty simulation description
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSoftBodySimulationDataDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSoftBodySimulationDataDesc PxSoftBodySimulationDataDesc_new();

        [DllImport(__DllName, EntryPoint = "PxSoftBodySimulationDataDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSoftBodySimulationDataDesc_isValid(PxSoftBodySimulationDataDesc* self_);

        /// <summary>
        ///  Desc initialization to default value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH34MidphaseDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBVH34MidphaseDesc_setToDefault_mut(PxBVH34MidphaseDesc* self_);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVH34MidphaseDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVH34MidphaseDesc_isValid(PxBVH34MidphaseDesc* self_);

        [DllImport(__DllName, EntryPoint = "PxMidphaseDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMidphaseDesc PxMidphaseDesc_new();

        /// <summary>
        ///  Returns type of midphase mesh structure.
        ///
        ///  PxMeshMidPhase::Enum
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMidphaseDesc_getType", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMeshMidPhase PxMidphaseDesc_getType(PxMidphaseDesc* self_);

        /// <summary>
        ///  Initialize the midphase mesh structure descriptor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMidphaseDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMidphaseDesc_setToDefault_mut(PxMidphaseDesc* self_, PxMeshMidPhase type_);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMidphaseDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxMidphaseDesc_isValid(PxMidphaseDesc* self_);

        [DllImport(__DllName, EntryPoint = "PxBVHDesc_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBVHDesc PxBVHDesc_new();

        /// <summary>
        ///  Initialize the BVH descriptor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVHDesc_setToDefault_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBVHDesc_setToDefault_mut(PxBVHDesc* self_);

        /// <summary>
        ///  Returns true if the descriptor is valid.
        ///
        ///  true if the current settings are valid.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBVHDesc_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxBVHDesc_isValid(PxBVHDesc* self_);

        [DllImport(__DllName, EntryPoint = "PxCookingParams_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCookingParams PxCookingParams_new(PxTolerancesScale* sc);

        [DllImport(__DllName, EntryPoint = "phys_PxGetStandaloneInsertionCallback", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxInsertionCallback* phys_PxGetStandaloneInsertionCallback();

        /// <summary>
        ///  Cooks a bounding volume hierarchy. The results are written to the stream.
        ///
        ///  PxCookBVH() allows a BVH description to be cooked into a binary stream
        ///  suitable for loading and performing BVH detection at runtime.
        ///
        ///  true on success.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCookBVH", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxCookBVH(PxBVHDesc* desc, PxOutputStream* stream);

        /// <summary>
        ///  Cooks and creates a bounding volume hierarchy without going through a stream.
        ///
        ///  This method does the same as cookBVH, but the produced BVH is not stored
        ///  into a stream but is either directly inserted in PxPhysics, or created as a standalone
        ///  object. Use this method if you are unable to cook offline.
        ///
        ///  PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback()
        ///  or PxCooking::getStandaloneInsertionCallback().
        ///
        ///  PxBVH pointer on success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateBVH", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBVH* phys_PxCreateBVH(PxBVHDesc* desc, PxInsertionCallback* insertionCallback);

        /// <summary>
        ///  Cooks a heightfield. The results are written to the stream.
        ///
        ///  To create a heightfield object there is an option to precompute some of calculations done while loading the heightfield data.
        ///
        ///  cookHeightField() allows a heightfield description to be cooked into a binary stream
        ///  suitable for loading and performing collision detection at runtime.
        ///
        ///  true on success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCookHeightField", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxCookHeightField(PxHeightFieldDesc* desc, PxOutputStream* stream);

        /// <summary>
        ///  Cooks and creates a heightfield mesh and inserts it into PxPhysics.
        ///
        ///  PxHeightField pointer on success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateHeightField", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxHeightField* phys_PxCreateHeightField(PxHeightFieldDesc* desc, PxInsertionCallback* insertionCallback);

        /// <summary>
        ///  Cooks a convex mesh. The results are written to the stream.
        ///
        ///  To create a triangle mesh object it is necessary to first 'cook' the mesh data into
        ///  a form which allows the SDK to perform efficient collision detection.
        ///
        ///  cookConvexMesh() allows a mesh description to be cooked into a binary stream
        ///  suitable for loading and performing collision detection at runtime.
        ///
        ///  The number of vertices and the number of convex polygons in a cooked convex mesh is limited to 255.
        ///
        ///  If those limits are exceeded in either the user-provided data or the final cooked mesh, an error is reported.
        ///
        ///  true on success.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCookConvexMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxCookConvexMesh(PxCookingParams* @params, PxConvexMeshDesc* desc, PxOutputStream* stream, PxConvexMeshCookingResult* condition);

        /// <summary>
        ///  Cooks and creates a convex mesh without going through a stream.
        ///
        ///  This method does the same as cookConvexMesh, but the produced mesh is not stored
        ///  into a stream but is either directly inserted in PxPhysics, or created as a standalone
        ///  object. Use this method if you are unable to cook offline.
        ///
        ///  PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback()
        ///  or PxCooking::getStandaloneInsertionCallback().
        ///
        ///  PxConvexMesh pointer on success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateConvexMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConvexMesh* phys_PxCreateConvexMesh(PxCookingParams* @params, PxConvexMeshDesc* desc, PxInsertionCallback* insertionCallback, PxConvexMeshCookingResult* condition);

        /// <summary>
        ///  Verifies if the convex mesh is valid. Prints an error message for each inconsistency found.
        ///
        ///  The convex mesh descriptor must contain an already created convex mesh - the vertices, indices and polygons must be provided.
        ///
        ///  This function should be used if PxConvexFlag::eDISABLE_MESH_VALIDATION is planned to be used in release builds.
        ///
        ///  true if all the validity conditions hold, false otherwise.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxValidateConvexMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxValidateConvexMesh(PxCookingParams* @params, PxConvexMeshDesc* desc);

        /// <summary>
        ///  Computed hull polygons from given vertices and triangles. Polygons are needed for PxConvexMeshDesc rather than triangles.
        ///
        ///  Please note that the resulting polygons may have different number of vertices. Some vertices may be removed.
        ///  The output vertices, indices and polygons must be used to construct a hull.
        ///
        ///  The provided PxAllocatorCallback does allocate the out array's. It is the user responsibility to deallocated those
        ///  array's.
        ///
        ///  true on success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxComputeHullPolygons", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxComputeHullPolygons(PxCookingParams* @params, PxSimpleTriangleMesh* mesh, PxAllocatorCallback* inCallback, uint* nbVerts, PxVec3** vertices, uint* nbIndices, uint** indices, uint* nbPolygons, PxHullPolygon** hullPolygons);

        /// <summary>
        ///  Verifies if the triangle mesh is valid. Prints an error message for each inconsistency found.
        ///
        ///  The following conditions are true for a valid triangle mesh:
        ///  1. There are no duplicate vertices (within specified vertexWeldTolerance. See PxCookingParams::meshWeldTolerance)
        ///  2. There are no large triangles (within specified PxTolerancesScale.)
        ///
        ///  true if all the validity conditions hold, false otherwise.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxValidateTriangleMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxValidateTriangleMesh(PxCookingParams* @params, PxTriangleMeshDesc* desc);

        /// <summary>
        ///  Cooks and creates a triangle mesh without going through a stream.
        ///
        ///  This method does the same as cookTriangleMesh, but the produced mesh is not stored
        ///  into a stream but is either directly inserted in PxPhysics, or created as a standalone
        ///  object. Use this method if you are unable to cook offline.
        ///
        ///  PxInsertionCallback can be obtained through PxPhysics::getPhysicsInsertionCallback()
        ///  or PxCooking::getStandaloneInsertionCallback().
        ///
        ///  PxTriangleMesh pointer on success.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateTriangleMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangleMesh* phys_PxCreateTriangleMesh(PxCookingParams* @params, PxTriangleMeshDesc* desc, PxInsertionCallback* insertionCallback, PxTriangleMeshCookingResult* condition);

        /// <summary>
        ///  Cooks a triangle mesh. The results are written to the stream.
        ///
        ///  To create a triangle mesh object it is necessary to first 'cook' the mesh data into
        ///  a form which allows the SDK to perform efficient collision detection.
        ///
        ///  PxCookTriangleMesh() allows a mesh description to be cooked into a binary stream
        ///  suitable for loading and performing collision detection at runtime.
        ///
        ///  true on success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCookTriangleMesh", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxCookTriangleMesh(PxCookingParams* @params, PxTriangleMeshDesc* desc, PxOutputStream* stream, PxTriangleMeshCookingResult* condition);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryOutputStream_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDefaultMemoryOutputStream* PxDefaultMemoryOutputStream_new_alloc(PxAllocatorCallback* allocator);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryOutputStream_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultMemoryOutputStream_delete(PxDefaultMemoryOutputStream* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryOutputStream_write_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultMemoryOutputStream_write_mut(PxDefaultMemoryOutputStream* self_, void* src, uint count);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryOutputStream_getSize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultMemoryOutputStream_getSize(PxDefaultMemoryOutputStream* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryOutputStream_getData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxDefaultMemoryOutputStream_getData(PxDefaultMemoryOutputStream* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryInputData_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDefaultMemoryInputData* PxDefaultMemoryInputData_new_alloc(byte* data, uint length);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryInputData_read_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultMemoryInputData_read_mut(PxDefaultMemoryInputData* self_, void* dest, uint count);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryInputData_getLength", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultMemoryInputData_getLength(PxDefaultMemoryInputData* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryInputData_seek_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultMemoryInputData_seek_mut(PxDefaultMemoryInputData* self_, uint pos);

        [DllImport(__DllName, EntryPoint = "PxDefaultMemoryInputData_tell", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultMemoryInputData_tell(PxDefaultMemoryInputData* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileOutputStream_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDefaultFileOutputStream* PxDefaultFileOutputStream_new_alloc(byte* name);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileOutputStream_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultFileOutputStream_delete(PxDefaultFileOutputStream* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileOutputStream_write_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultFileOutputStream_write_mut(PxDefaultFileOutputStream* self_, void* src, uint count);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileOutputStream_isValid_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxDefaultFileOutputStream_isValid_mut(PxDefaultFileOutputStream* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileInputData_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDefaultFileInputData* PxDefaultFileInputData_new_alloc(byte* name);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileInputData_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultFileInputData_delete(PxDefaultFileInputData* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileInputData_read_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultFileInputData_read_mut(PxDefaultFileInputData* self_, void* dest, uint count);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileInputData_seek_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultFileInputData_seek_mut(PxDefaultFileInputData* self_, uint pos);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileInputData_tell", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultFileInputData_tell(PxDefaultFileInputData* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileInputData_getLength", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxDefaultFileInputData_getLength(PxDefaultFileInputData* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultFileInputData_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxDefaultFileInputData_isValid(PxDefaultFileInputData* self_);

        [DllImport(__DllName, EntryPoint = "phys_platformAlignedAlloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* phys_platformAlignedAlloc(nuint size);

        [DllImport(__DllName, EntryPoint = "phys_platformAlignedFree", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_platformAlignedFree(void* ptr);

        [DllImport(__DllName, EntryPoint = "PxDefaultAllocator_allocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void* PxDefaultAllocator_allocate_mut(PxDefaultAllocator* self_, nuint size, byte* anon_param1, byte* anon_param2, int anon_param3);

        [DllImport(__DllName, EntryPoint = "PxDefaultAllocator_deallocate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultAllocator_deallocate_mut(PxDefaultAllocator* self_, void* ptr);

        [DllImport(__DllName, EntryPoint = "PxDefaultAllocator_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultAllocator_delete(PxDefaultAllocator* self_);

        /// <summary>
        ///  Set the actors for this joint.
        ///
        ///  An actor may be NULL to indicate the world frame. At most one of the actors may be NULL.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setActors_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setActors_mut(PxJoint* self_, PxRigidActor* actor0, PxRigidActor* actor1);

        /// <summary>
        ///  Get the actors for this joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getActors", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_getActors(PxJoint* self_, PxRigidActor** actor0, PxRigidActor** actor1);

        /// <summary>
        ///  Set the joint local pose for an actor.
        ///
        ///  This is the relative pose which locates the joint frame relative to the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setLocalPose_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setLocalPose_mut(PxJoint* self_, PxJointActorIndex actor, PxTransform* localPose);

        /// <summary>
        ///  get the joint local pose for an actor.
        ///
        ///  return the local pose for this joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getLocalPose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxJoint_getLocalPose(PxJoint* self_, PxJointActorIndex actor);

        /// <summary>
        ///  get the relative pose for this joint
        ///
        ///  This function returns the pose of the joint frame of actor1 relative to actor0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getRelativeTransform", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxJoint_getRelativeTransform(PxJoint* self_);

        /// <summary>
        ///  get the relative linear velocity of the joint
        ///
        ///  This function returns the linear velocity of the origin of the constraint frame of actor1, relative to the origin of the constraint
        ///  frame of actor0. The value is returned in the constraint frame of actor0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getRelativeLinearVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxJoint_getRelativeLinearVelocity(PxJoint* self_);

        /// <summary>
        ///  get the relative angular velocity of the joint
        ///
        ///  This function returns the angular velocity of  actor1 relative to actor0. The value is returned in the constraint frame of actor0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getRelativeAngularVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxJoint_getRelativeAngularVelocity(PxJoint* self_);

        /// <summary>
        ///  set the break force for this joint.
        ///
        ///  if the constraint force or torque on the joint exceeds the specified values, the joint will break,
        ///  at which point it will not constrain the two actors and the flag PxConstraintFlag::eBROKEN will be set. The
        ///  force and torque are measured in the joint frame of the first actor
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setBreakForce_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setBreakForce_mut(PxJoint* self_, float force, float torque);

        /// <summary>
        ///  get the break force for this joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getBreakForce", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_getBreakForce(PxJoint* self_, float* force, float* torque);

        /// <summary>
        ///  set the constraint flags for this joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setConstraintFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setConstraintFlags_mut(PxJoint* self_, PxConstraintFlags flags);

        /// <summary>
        ///  set a constraint flags for this joint to a specified value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setConstraintFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setConstraintFlag_mut(PxJoint* self_, PxConstraintFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  get the constraint flags for this joint.
        ///
        ///  the constraint flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getConstraintFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConstraintFlags PxJoint_getConstraintFlags(PxJoint* self_);

        /// <summary>
        ///  set the inverse mass scale for actor0.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setInvMassScale0_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setInvMassScale0_mut(PxJoint* self_, float invMassScale);

        /// <summary>
        ///  get the inverse mass scale for actor0.
        ///
        ///  inverse mass scale for actor0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getInvMassScale0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxJoint_getInvMassScale0(PxJoint* self_);

        /// <summary>
        ///  set the inverse inertia scale for actor0.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setInvInertiaScale0_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setInvInertiaScale0_mut(PxJoint* self_, float invInertiaScale);

        /// <summary>
        ///  get the inverse inertia scale for actor0.
        ///
        ///  inverse inertia scale for actor0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getInvInertiaScale0", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxJoint_getInvInertiaScale0(PxJoint* self_);

        /// <summary>
        ///  set the inverse mass scale for actor1.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setInvMassScale1_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setInvMassScale1_mut(PxJoint* self_, float invMassScale);

        /// <summary>
        ///  get the inverse mass scale for actor1.
        ///
        ///  inverse mass scale for actor1
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getInvMassScale1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxJoint_getInvMassScale1(PxJoint* self_);

        /// <summary>
        ///  set the inverse inertia scale for actor1.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setInvInertiaScale1_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setInvInertiaScale1_mut(PxJoint* self_, float invInertiaScale);

        /// <summary>
        ///  get the inverse inertia scale for actor1.
        ///
        ///  inverse inertia scale for actor1
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getInvInertiaScale1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxJoint_getInvInertiaScale1(PxJoint* self_);

        /// <summary>
        ///  Retrieves the PxConstraint corresponding to this joint.
        ///
        ///  This can be used to determine, among other things, the force applied at the joint.
        ///
        ///  the constraint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getConstraint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxConstraint* PxJoint_getConstraint(PxJoint* self_);

        /// <summary>
        ///  Sets a name string for the object that can be retrieved with getName().
        ///
        ///  This is for debugging and is not used by the SDK. The string is not copied by the SDK,
        ///  only the pointer is stored.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_setName_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_setName_mut(PxJoint* self_, byte* name);

        /// <summary>
        ///  Retrieves the name string set with setName().
        ///
        ///  Name string associated with object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxJoint_getName(PxJoint* self_);

        /// <summary>
        ///  Deletes the joint.
        ///
        ///  This call does not wake up the connected rigid bodies.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_release_mut(PxJoint* self_);

        /// <summary>
        ///  Retrieves the scene which this joint belongs to.
        ///
        ///  Owner Scene. NULL if not part of a scene.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getScene", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxScene* PxJoint_getScene(PxJoint* self_);

        /// <summary>
        ///  Put class meta data in stream, used for serialization
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJoint_getBinaryMetaData", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJoint_getBinaryMetaData(PxOutputStream* stream);

        [DllImport(__DllName, EntryPoint = "PxSpring_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSpring PxSpring_new(float stiffness_, float damping_);

        /// <summary>
        ///  Helper function to setup a joint's global frame
        ///
        ///  This replaces the following functions from previous SDK versions:
        ///
        ///  void NxJointDesc::setGlobalAnchor(const NxVec3
        ///  &amp;
        ///  wsAnchor);
        ///  void NxJointDesc::setGlobalAxis(const NxVec3
        ///  &amp;
        ///  wsAxis);
        ///
        ///  The function sets the joint's localPose using world-space input parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSetJointGlobalFrame", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetJointGlobalFrame(PxJoint* joint, PxVec3* wsAnchor, PxVec3* wsAxis);

        /// <summary>
        ///  Create a distance Joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxDistanceJointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDistanceJoint* phys_PxDistanceJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        /// <summary>
        ///  Return the current distance of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getDistance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxDistanceJoint_getDistance(PxDistanceJoint* self_);

        /// <summary>
        ///  Set the allowed minimum distance for the joint.
        ///
        ///  The minimum distance must be no more than the maximum distance
        ///
        ///  Default
        ///  0.0f
        ///  Range
        ///  [0, PX_MAX_F32)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_setMinDistance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDistanceJoint_setMinDistance_mut(PxDistanceJoint* self_, float distance);

        /// <summary>
        ///  Get the allowed minimum distance for the joint.
        ///
        ///  the allowed minimum distance
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getMinDistance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxDistanceJoint_getMinDistance(PxDistanceJoint* self_);

        /// <summary>
        ///  Set the allowed maximum distance for the joint.
        ///
        ///  The maximum distance must be no less than the minimum distance.
        ///
        ///  Default
        ///  0.0f
        ///  Range
        ///  [0, PX_MAX_F32)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_setMaxDistance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDistanceJoint_setMaxDistance_mut(PxDistanceJoint* self_, float distance);

        /// <summary>
        ///  Get the allowed maximum distance for the joint.
        ///
        ///  the allowed maximum distance
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getMaxDistance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxDistanceJoint_getMaxDistance(PxDistanceJoint* self_);

        /// <summary>
        ///  Set the error tolerance of the joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_setTolerance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDistanceJoint_setTolerance_mut(PxDistanceJoint* self_, float tolerance);

        /// <summary>
        ///  Get the error tolerance of the joint.
        ///
        ///  the distance beyond the joint's [min, max] range before the joint becomes active.
        ///
        ///  Default
        ///  0.25f * PxTolerancesScale::length
        ///  Range
        ///  (0, PX_MAX_F32)
        ///
        ///  This value should be used to ensure that if the minimum distance is zero and the
        ///  spring function is in use, the rest length of the spring is non-zero.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getTolerance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxDistanceJoint_getTolerance(PxDistanceJoint* self_);

        /// <summary>
        ///  Set the strength of the joint spring.
        ///
        ///  The spring is used if enabled, and the distance exceeds the range [min-error, max+error].
        ///
        ///  Default
        ///  0.0f
        ///  Range
        ///  [0, PX_MAX_F32)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_setStiffness_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDistanceJoint_setStiffness_mut(PxDistanceJoint* self_, float stiffness);

        /// <summary>
        ///  Get the strength of the joint spring.
        ///
        ///  stiffness the spring strength of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getStiffness", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxDistanceJoint_getStiffness(PxDistanceJoint* self_);

        /// <summary>
        ///  Set the damping of the joint spring.
        ///
        ///  The spring is used if enabled, and the distance exceeds the range [min-error, max+error].
        ///
        ///  Default
        ///  0.0f
        ///  Range
        ///  [0, PX_MAX_F32)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_setDamping_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDistanceJoint_setDamping_mut(PxDistanceJoint* self_, float damping);

        /// <summary>
        ///  Get the damping of the joint spring.
        ///
        ///  the degree of damping of the joint spring of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getDamping", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxDistanceJoint_getDamping(PxDistanceJoint* self_);

        /// <summary>
        ///  Set the contact distance for the min
        ///  &amp;
        ///  max distance limits.
        ///
        ///  This is similar to the PxJointLimitParameters::contactDistance parameter for regular limits.
        ///
        ///  The two most common values are 0 and infinite. Infinite means the internal constraints are
        ///  always created, resulting in the best simulation quality but slower performance. Zero means
        ///  the internal constraints are only created when the limits are violated, resulting in best
        ///  performance but worse simulation quality.
        ///
        ///  Default
        ///  0.0f
        ///  Range
        ///  [0, PX_MAX_F32)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_setContactDistance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDistanceJoint_setContactDistance_mut(PxDistanceJoint* self_, float contactDistance);

        /// <summary>
        ///  Get the contact distance.
        ///
        ///  the contact distance
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getContactDistance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxDistanceJoint_getContactDistance(PxDistanceJoint* self_);

        /// <summary>
        ///  Set the flags specific to the Distance Joint.
        ///
        ///  Default
        ///  PxDistanceJointFlag::eMAX_DISTANCE_ENABLED
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_setDistanceJointFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDistanceJoint_setDistanceJointFlags_mut(PxDistanceJoint* self_, PxDistanceJointFlags flags);

        /// <summary>
        ///  Set a single flag specific to a Distance Joint to true or false.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_setDistanceJointFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDistanceJoint_setDistanceJointFlag_mut(PxDistanceJoint* self_, PxDistanceJointFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Get the flags specific to the Distance Joint.
        ///
        ///  the joint flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getDistanceJointFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDistanceJointFlags PxDistanceJoint_getDistanceJointFlags(PxDistanceJoint* self_);

        /// <summary>
        ///  Returns string name of PxDistanceJoint, used for serialization
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDistanceJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxDistanceJoint_getConcreteTypeName(PxDistanceJoint* self_);

        /// <summary>
        ///  Create a distance Joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxContactJointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxContactJoint* phys_PxContactJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        [DllImport(__DllName, EntryPoint = "PxJacobianRow_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJacobianRow PxJacobianRow_new();

        [DllImport(__DllName, EntryPoint = "PxJacobianRow_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJacobianRow PxJacobianRow_new_1(PxVec3* lin0, PxVec3* lin1, PxVec3* ang0, PxVec3* ang1);

        /// <summary>
        ///  Set the current contact of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactJoint_setContact_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactJoint_setContact_mut(PxContactJoint* self_, PxVec3* contact);

        /// <summary>
        ///  Set the current contact normal of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactJoint_setContactNormal_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactJoint_setContactNormal_mut(PxContactJoint* self_, PxVec3* contactNormal);

        /// <summary>
        ///  Set the current penetration of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactJoint_setPenetration_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactJoint_setPenetration_mut(PxContactJoint* self_, float penetration);

        /// <summary>
        ///  Return the current contact of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactJoint_getContact", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxContactJoint_getContact(PxContactJoint* self_);

        /// <summary>
        ///  Return the current contact normal of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactJoint_getContactNormal", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxContactJoint_getContactNormal(PxContactJoint* self_);

        /// <summary>
        ///  Return the current penetration value of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactJoint_getPenetration", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactJoint_getPenetration(PxContactJoint* self_);

        [DllImport(__DllName, EntryPoint = "PxContactJoint_getRestitution", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactJoint_getRestitution(PxContactJoint* self_);

        [DllImport(__DllName, EntryPoint = "PxContactJoint_setRestitution_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactJoint_setRestitution_mut(PxContactJoint* self_, float restitution);

        [DllImport(__DllName, EntryPoint = "PxContactJoint_getBounceThreshold", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxContactJoint_getBounceThreshold(PxContactJoint* self_);

        [DllImport(__DllName, EntryPoint = "PxContactJoint_setBounceThreshold_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactJoint_setBounceThreshold_mut(PxContactJoint* self_, float bounceThreshold);

        /// <summary>
        ///  Returns string name of PxContactJoint, used for serialization
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxContactJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxContactJoint_getConcreteTypeName(PxContactJoint* self_);

        [DllImport(__DllName, EntryPoint = "PxContactJoint_computeJacobians", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxContactJoint_computeJacobians(PxContactJoint* self_, PxJacobianRow* jacobian);

        [DllImport(__DllName, EntryPoint = "PxContactJoint_getNbJacobianRows", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxContactJoint_getNbJacobianRows(PxContactJoint* self_);

        /// <summary>
        ///  Create a fixed joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxFixedJointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFixedJoint* phys_PxFixedJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        /// <summary>
        ///  Returns string name of PxFixedJoint, used for serialization
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxFixedJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxFixedJoint_getConcreteTypeName(PxFixedJoint* self_);

        [DllImport(__DllName, EntryPoint = "PxJointLimitParameters_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLimitParameters* PxJointLimitParameters_new_alloc();

        /// <summary>
        ///  Returns true if the current settings are valid.
        ///
        ///  true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLimitParameters_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxJointLimitParameters_isValid(PxJointLimitParameters* self_);

        [DllImport(__DllName, EntryPoint = "PxJointLimitParameters_isSoft", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxJointLimitParameters_isSoft(PxJointLimitParameters* self_);

        /// <summary>
        ///  construct a linear hard limit
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLinearLimit_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLinearLimit PxJointLinearLimit_new(PxTolerancesScale* scale, float extent, float contactDist_deprecated);

        /// <summary>
        ///  construct a linear soft limit
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLinearLimit_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLinearLimit PxJointLinearLimit_new_1(float extent, PxSpring* spring);

        /// <summary>
        ///  Returns true if the limit is valid
        ///
        ///  true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLinearLimit_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxJointLinearLimit_isValid(PxJointLinearLimit* self_);

        [DllImport(__DllName, EntryPoint = "PxJointLinearLimit_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJointLinearLimit_delete(PxJointLinearLimit* self_);

        /// <summary>
        ///  Construct a linear hard limit pair. The lower distance value must be less than the upper distance value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLinearLimitPair_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLinearLimitPair PxJointLinearLimitPair_new(PxTolerancesScale* scale, float lowerLimit, float upperLimit, float contactDist_deprecated);

        /// <summary>
        ///  construct a linear soft limit pair
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLinearLimitPair_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLinearLimitPair PxJointLinearLimitPair_new_1(float lowerLimit, float upperLimit, PxSpring* spring);

        /// <summary>
        ///  Returns true if the limit is valid.
        ///
        ///  true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLinearLimitPair_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxJointLinearLimitPair_isValid(PxJointLinearLimitPair* self_);

        [DllImport(__DllName, EntryPoint = "PxJointLinearLimitPair_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJointLinearLimitPair_delete(PxJointLinearLimitPair* self_);

        /// <summary>
        ///  construct an angular hard limit pair.
        ///
        ///  The lower value must be less than the upper value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointAngularLimitPair_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointAngularLimitPair PxJointAngularLimitPair_new(float lowerLimit, float upperLimit, float contactDist_deprecated);

        /// <summary>
        ///  construct an angular soft limit pair.
        ///
        ///  The lower value must be less than the upper value.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointAngularLimitPair_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointAngularLimitPair PxJointAngularLimitPair_new_1(float lowerLimit, float upperLimit, PxSpring* spring);

        /// <summary>
        ///  Returns true if the limit is valid.
        ///
        ///  true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointAngularLimitPair_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxJointAngularLimitPair_isValid(PxJointAngularLimitPair* self_);

        [DllImport(__DllName, EntryPoint = "PxJointAngularLimitPair_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJointAngularLimitPair_delete(PxJointAngularLimitPair* self_);

        /// <summary>
        ///  Construct a cone hard limit.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLimitCone_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLimitCone PxJointLimitCone_new(float yLimitAngle, float zLimitAngle, float contactDist_deprecated);

        /// <summary>
        ///  Construct a cone soft limit.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLimitCone_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLimitCone PxJointLimitCone_new_1(float yLimitAngle, float zLimitAngle, PxSpring* spring);

        /// <summary>
        ///  Returns true if the limit is valid.
        ///
        ///  true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLimitCone_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxJointLimitCone_isValid(PxJointLimitCone* self_);

        [DllImport(__DllName, EntryPoint = "PxJointLimitCone_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJointLimitCone_delete(PxJointLimitCone* self_);

        /// <summary>
        ///  Construct a pyramid hard limit.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLimitPyramid_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLimitPyramid PxJointLimitPyramid_new(float yLimitAngleMin, float yLimitAngleMax, float zLimitAngleMin, float zLimitAngleMax, float contactDist_deprecated);

        /// <summary>
        ///  Construct a pyramid soft limit.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLimitPyramid_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLimitPyramid PxJointLimitPyramid_new_1(float yLimitAngleMin, float yLimitAngleMax, float zLimitAngleMin, float zLimitAngleMax, PxSpring* spring);

        /// <summary>
        ///  Returns true if the limit is valid.
        ///
        ///  true if the current settings are valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxJointLimitPyramid_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxJointLimitPyramid_isValid(PxJointLimitPyramid* self_);

        [DllImport(__DllName, EntryPoint = "PxJointLimitPyramid_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxJointLimitPyramid_delete(PxJointLimitPyramid* self_);

        /// <summary>
        ///  Create a prismatic joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxPrismaticJointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPrismaticJoint* phys_PxPrismaticJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        /// <summary>
        ///  returns the displacement of the joint along its axis.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPrismaticJoint_getPosition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxPrismaticJoint_getPosition(PxPrismaticJoint* self_);

        /// <summary>
        ///  returns the velocity of the joint along its axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPrismaticJoint_getVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxPrismaticJoint_getVelocity(PxPrismaticJoint* self_);

        /// <summary>
        ///  sets the joint limit  parameters.
        ///
        ///  The limit range is [-PX_MAX_F32, PX_MAX_F32], but note that the width of the limit (upper-lower) must also be
        ///  a valid float.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPrismaticJoint_setLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPrismaticJoint_setLimit_mut(PxPrismaticJoint* self_, PxJointLinearLimitPair* anon_param0);

        /// <summary>
        ///  gets the joint limit  parameters.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPrismaticJoint_getLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLinearLimitPair PxPrismaticJoint_getLimit(PxPrismaticJoint* self_);

        /// <summary>
        ///  Set the flags specific to the Prismatic Joint.
        ///
        ///  Default
        ///  PxPrismaticJointFlags(0)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPrismaticJoint_setPrismaticJointFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPrismaticJoint_setPrismaticJointFlags_mut(PxPrismaticJoint* self_, PxPrismaticJointFlags flags);

        /// <summary>
        ///  Set a single flag specific to a Prismatic Joint to true or false.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPrismaticJoint_setPrismaticJointFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPrismaticJoint_setPrismaticJointFlag_mut(PxPrismaticJoint* self_, PxPrismaticJointFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Get the flags specific to the Prismatic Joint.
        ///
        ///  the joint flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPrismaticJoint_getPrismaticJointFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPrismaticJointFlags PxPrismaticJoint_getPrismaticJointFlags(PxPrismaticJoint* self_);

        /// <summary>
        ///  Returns string name of PxPrismaticJoint, used for serialization
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPrismaticJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxPrismaticJoint_getConcreteTypeName(PxPrismaticJoint* self_);

        /// <summary>
        ///  Create a revolute joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxRevoluteJointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRevoluteJoint* phys_PxRevoluteJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        /// <summary>
        ///  return the angle of the joint, in the range (-2*Pi, 2*Pi]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_getAngle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRevoluteJoint_getAngle(PxRevoluteJoint* self_);

        /// <summary>
        ///  return the velocity of the joint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_getVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRevoluteJoint_getVelocity(PxRevoluteJoint* self_);

        /// <summary>
        ///  set the joint limit parameters.
        ///
        ///  The limit is activated using the flag PxRevoluteJointFlag::eLIMIT_ENABLED
        ///
        ///  The limit angle range is (-2*Pi, 2*Pi).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_setLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRevoluteJoint_setLimit_mut(PxRevoluteJoint* self_, PxJointAngularLimitPair* limits);

        /// <summary>
        ///  get the joint limit parameters.
        ///
        ///  the joint limit parameters
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_getLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointAngularLimitPair PxRevoluteJoint_getLimit(PxRevoluteJoint* self_);

        /// <summary>
        ///  set the target velocity for the drive model.
        ///
        ///  The motor will only be able to reach this velocity if the maxForce is sufficiently large.
        ///  If the joint is spinning faster than this velocity, the motor will actually try to brake
        ///  (see PxRevoluteJointFlag::eDRIVE_FREESPIN.)
        ///
        ///  The sign of this variable determines the rotation direction, with positive values going
        ///  the same way as positive joint angles. Setting a very large target velocity may cause
        ///  undesirable results.
        ///
        ///  Range:
        ///  (-PX_MAX_F32, PX_MAX_F32)
        ///  Default:
        ///  0.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_setDriveVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRevoluteJoint_setDriveVelocity_mut(PxRevoluteJoint* self_, float velocity, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  gets the target velocity for the drive model.
        ///
        ///  the drive target velocity
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_getDriveVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRevoluteJoint_getDriveVelocity(PxRevoluteJoint* self_);

        /// <summary>
        ///  sets the maximum torque the drive can exert.
        ///
        ///  The value set here may be used either as an impulse limit or a force limit, depending on the flag PxConstraintFlag::eDRIVE_LIMITS_ARE_FORCES
        ///
        ///  Range:
        ///  [0, PX_MAX_F32)
        ///  Default:
        ///  PX_MAX_F32
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_setDriveForceLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRevoluteJoint_setDriveForceLimit_mut(PxRevoluteJoint* self_, float limit);

        /// <summary>
        ///  gets the maximum torque the drive can exert.
        ///
        ///  the torque limit
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_getDriveForceLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRevoluteJoint_getDriveForceLimit(PxRevoluteJoint* self_);

        /// <summary>
        ///  sets the gear ratio for the drive.
        ///
        ///  When setting up the drive constraint, the velocity of the first actor is scaled by this value, and its response to drive torque is scaled down.
        ///  So if the drive target velocity is zero, the second actor will be driven to the velocity of the first scaled by the gear ratio
        ///
        ///  Range:
        ///  [0, PX_MAX_F32)
        ///  Default:
        ///  1.0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_setDriveGearRatio_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRevoluteJoint_setDriveGearRatio_mut(PxRevoluteJoint* self_, float ratio);

        /// <summary>
        ///  gets the gear ratio.
        ///
        ///  the drive gear ratio
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_getDriveGearRatio", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRevoluteJoint_getDriveGearRatio(PxRevoluteJoint* self_);

        /// <summary>
        ///  sets the flags specific to the Revolute Joint.
        ///
        ///  Default
        ///  PxRevoluteJointFlags(0)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_setRevoluteJointFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRevoluteJoint_setRevoluteJointFlags_mut(PxRevoluteJoint* self_, PxRevoluteJointFlags flags);

        /// <summary>
        ///  sets a single flag specific to a Revolute Joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_setRevoluteJointFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRevoluteJoint_setRevoluteJointFlag_mut(PxRevoluteJoint* self_, PxRevoluteJointFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  gets the flags specific to the Revolute Joint.
        ///
        ///  the joint flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_getRevoluteJointFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRevoluteJointFlags PxRevoluteJoint_getRevoluteJointFlags(PxRevoluteJoint* self_);

        /// <summary>
        ///  Returns string name of PxRevoluteJoint, used for serialization
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRevoluteJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxRevoluteJoint_getConcreteTypeName(PxRevoluteJoint* self_);

        /// <summary>
        ///  Create a spherical joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSphericalJointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSphericalJoint* phys_PxSphericalJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        /// <summary>
        ///  Set the limit cone.
        ///
        ///  If enabled, the limit cone will constrain the angular movement of the joint to lie
        ///  within an elliptical cone.
        ///
        ///  the limit cone
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphericalJoint_getLimitCone", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLimitCone PxSphericalJoint_getLimitCone(PxSphericalJoint* self_);

        /// <summary>
        ///  Get the limit cone.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphericalJoint_setLimitCone_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSphericalJoint_setLimitCone_mut(PxSphericalJoint* self_, PxJointLimitCone* limit);

        /// <summary>
        ///  get the swing angle of the joint from the Y axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphericalJoint_getSwingYAngle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxSphericalJoint_getSwingYAngle(PxSphericalJoint* self_);

        /// <summary>
        ///  get the swing angle of the joint from the Z axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphericalJoint_getSwingZAngle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxSphericalJoint_getSwingZAngle(PxSphericalJoint* self_);

        /// <summary>
        ///  Set the flags specific to the Spherical Joint.
        ///
        ///  Default
        ///  PxSphericalJointFlags(0)
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphericalJoint_setSphericalJointFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSphericalJoint_setSphericalJointFlags_mut(PxSphericalJoint* self_, PxSphericalJointFlags flags);

        /// <summary>
        ///  Set a single flag specific to a Spherical Joint to true or false.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphericalJoint_setSphericalJointFlag_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSphericalJoint_setSphericalJointFlag_mut(PxSphericalJoint* self_, PxSphericalJointFlag flag, [MarshalAs(UnmanagedType.U1)] bool value);

        /// <summary>
        ///  Get the flags specific to the Spherical Joint.
        ///
        ///  the joint flags
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphericalJoint_getSphericalJointFlags", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSphericalJointFlags PxSphericalJoint_getSphericalJointFlags(PxSphericalJoint* self_);

        /// <summary>
        ///  Returns string name of PxSphericalJoint, used for serialization
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSphericalJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxSphericalJoint_getConcreteTypeName(PxSphericalJoint* self_);

        /// <summary>
        ///  Create a D6 joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxD6JointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxD6Joint* phys_PxD6JointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        /// <summary>
        ///  default constructor for PxD6JointDrive.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6JointDrive_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxD6JointDrive PxD6JointDrive_new();

        /// <summary>
        ///  constructor a PxD6JointDrive.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6JointDrive_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxD6JointDrive PxD6JointDrive_new_1(float driveStiffness, float driveDamping, float driveForceLimit, [MarshalAs(UnmanagedType.U1)] bool isAcceleration);

        /// <summary>
        ///  returns true if the drive is valid
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6JointDrive_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxD6JointDrive_isValid(PxD6JointDrive* self_);

        /// <summary>
        ///  Set the motion type around the specified axis.
        ///
        ///  Each axis may independently specify that the degree of freedom is locked (blocking relative movement
        ///  along or around this axis), limited by the corresponding limit, or free.
        ///
        ///  Default:
        ///  all degrees of freedom are locked
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setMotion_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setMotion_mut(PxD6Joint* self_, PxD6Axis axis, PxD6Motion type_);

        /// <summary>
        ///  Get the motion type around the specified axis.
        ///
        ///  the motion type around the specified axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getMotion", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxD6Motion PxD6Joint_getMotion(PxD6Joint* self_, PxD6Axis axis);

        /// <summary>
        ///  get the twist angle of the joint, in the range (-2*Pi, 2*Pi]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getTwistAngle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxD6Joint_getTwistAngle(PxD6Joint* self_);

        /// <summary>
        ///  get the swing angle of the joint from the Y axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getSwingYAngle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxD6Joint_getSwingYAngle(PxD6Joint* self_);

        /// <summary>
        ///  get the swing angle of the joint from the Z axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getSwingZAngle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxD6Joint_getSwingZAngle(PxD6Joint* self_);

        /// <summary>
        ///  Set the distance limit for the joint.
        ///
        ///  A single limit constraints all linear limited degrees of freedom, forming a linear, circular
        ///  or spherical constraint on motion depending on the number of limited degrees. This is similar
        ///  to a distance limit.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setDistanceLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setDistanceLimit_mut(PxD6Joint* self_, PxJointLinearLimit* limit);

        /// <summary>
        ///  Get the distance limit for the joint.
        ///
        ///  the distance limit structure
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getDistanceLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLinearLimit PxD6Joint_getDistanceLimit(PxD6Joint* self_);

        /// <summary>
        ///  Set the linear limit for a given linear axis.
        ///
        ///  This function extends the previous setDistanceLimit call with the following features:
        ///  - there can be a different limit for each linear axis
        ///  - each limit is defined by two values, i.e. it can now be asymmetric
        ///
        ///  This can be used to create prismatic joints similar to PxPrismaticJoint, or point-in-quad joints,
        ///  or point-in-box joints.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setLinearLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setLinearLimit_mut(PxD6Joint* self_, PxD6Axis axis, PxJointLinearLimitPair* limit);

        /// <summary>
        ///  Get the linear limit for a given linear axis.
        ///
        ///  the linear limit pair structure from desired axis
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getLinearLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLinearLimitPair PxD6Joint_getLinearLimit(PxD6Joint* self_, PxD6Axis axis);

        /// <summary>
        ///  Set the twist limit for the joint.
        ///
        ///  The twist limit controls the range of motion around the twist axis.
        ///
        ///  The limit angle range is (-2*Pi, 2*Pi).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setTwistLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setTwistLimit_mut(PxD6Joint* self_, PxJointAngularLimitPair* limit);

        /// <summary>
        ///  Get the twist limit for the joint.
        ///
        ///  the twist limit structure
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getTwistLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointAngularLimitPair PxD6Joint_getTwistLimit(PxD6Joint* self_);

        /// <summary>
        ///  Set the swing cone limit for the joint.
        ///
        ///  The cone limit is used if either or both swing axes are limited. The extents are
        ///  symmetrical and measured in the frame of the parent. If only one swing degree of freedom
        ///  is limited, the corresponding value from the cone limit defines the limit range.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setSwingLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setSwingLimit_mut(PxD6Joint* self_, PxJointLimitCone* limit);

        /// <summary>
        ///  Get the cone limit for the joint.
        ///
        ///  the swing limit structure
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getSwingLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLimitCone PxD6Joint_getSwingLimit(PxD6Joint* self_);

        /// <summary>
        ///  Set a pyramidal swing limit for the joint.
        ///
        ///  The pyramid limits will only be used in the following cases:
        ///  - both swing Y and Z are limited. The limit shape is then a pyramid.
        ///  - Y is limited and Z is locked, or vice versa. The limit shape is an asymmetric angular section, similar to
        ///  what is supported for the twist axis.
        ///  The remaining cases (Y limited and Z is free, or vice versa) are not supported.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setPyramidSwingLimit_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setPyramidSwingLimit_mut(PxD6Joint* self_, PxJointLimitPyramid* limit);

        /// <summary>
        ///  Get the pyramidal swing limit for the joint.
        ///
        ///  the swing limit structure
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getPyramidSwingLimit", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxJointLimitPyramid PxD6Joint_getPyramidSwingLimit(PxD6Joint* self_);

        /// <summary>
        ///  Set the drive parameters for the specified drive type.
        ///
        ///  Default
        ///  The default drive spring and damping values are zero, the force limit is zero, and no flags are set.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setDrive_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setDrive_mut(PxD6Joint* self_, PxD6Drive index, PxD6JointDrive* drive);

        /// <summary>
        ///  Get the drive parameters for the specified drive type.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getDrive", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxD6JointDrive PxD6Joint_getDrive(PxD6Joint* self_, PxD6Drive index);

        /// <summary>
        ///  Set the drive goal pose
        ///
        ///  The goal is relative to the constraint frame of actor[0]
        ///
        ///  Default
        ///  the identity transform
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setDrivePosition_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setDrivePosition_mut(PxD6Joint* self_, PxTransform* pose, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Get the drive goal pose.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getDrivePosition", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxD6Joint_getDrivePosition(PxD6Joint* self_);

        /// <summary>
        ///  Set the target goal velocity for drive.
        ///
        ///  The velocity is measured in the constraint frame of actor[0]
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setDriveVelocity_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setDriveVelocity_mut(PxD6Joint* self_, PxVec3* linear, PxVec3* angular, [MarshalAs(UnmanagedType.U1)] bool autowake);

        /// <summary>
        ///  Get the target goal velocity for joint drive.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getDriveVelocity", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_getDriveVelocity(PxD6Joint* self_, PxVec3* linear, PxVec3* angular);

        /// <summary>
        ///  Set the linear tolerance threshold for projection. Projection is enabled if PxConstraintFlag::ePROJECTION
        ///  is set for the joint.
        ///
        ///  If the joint separates by more than this distance along its locked degrees of freedom, the solver
        ///  will move the bodies to close the distance.
        ///
        ///  Setting a very small tolerance may result in simulation jitter or other artifacts.
        ///
        ///  Sometimes it is not possible to project (for example when the joints form a cycle).
        ///
        ///  Range:
        ///  [0, PX_MAX_F32)
        ///  Default:
        ///  1e10f
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setProjectionLinearTolerance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setProjectionLinearTolerance_mut(PxD6Joint* self_, float tolerance);

        /// <summary>
        ///  Get the linear tolerance threshold for projection.
        ///
        ///  the linear tolerance threshold
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getProjectionLinearTolerance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxD6Joint_getProjectionLinearTolerance(PxD6Joint* self_);

        /// <summary>
        ///  Set the angular tolerance threshold for projection. Projection is enabled if
        ///  PxConstraintFlag::ePROJECTION is set for the joint.
        ///
        ///  If the joint deviates by more than this angle around its locked angular degrees of freedom,
        ///  the solver will move the bodies to close the angle.
        ///
        ///  Setting a very small tolerance may result in simulation jitter or other artifacts.
        ///
        ///  Sometimes it is not possible to project (for example when the joints form a cycle).
        ///
        ///  Range:
        ///  [0,Pi]
        ///  Default:
        ///  Pi
        ///
        ///  Angular projection is implemented only for the case of two or three locked angular degrees of freedom.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_setProjectionAngularTolerance_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxD6Joint_setProjectionAngularTolerance_mut(PxD6Joint* self_, float tolerance);

        /// <summary>
        ///  Get the angular tolerance threshold for projection.
        ///
        ///  tolerance the angular tolerance threshold in radians
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getProjectionAngularTolerance", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxD6Joint_getProjectionAngularTolerance(PxD6Joint* self_);

        /// <summary>
        ///  Returns string name of PxD6Joint, used for serialization
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxD6Joint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxD6Joint_getConcreteTypeName(PxD6Joint* self_);

        /// <summary>
        ///  Create a gear Joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGearJointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGearJoint* phys_PxGearJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        /// <summary>
        ///  Set the hinge/revolute joints connected by the gear joint.
        ///
        ///  The passed joints can be either PxRevoluteJoint, PxD6Joint or PxArticulationJointReducedCoordinate.
        ///  The joints must define degrees of freedom around the twist axis. They cannot be null.
        ///
        ///  Note that these joints are only used to compute the positional error correction term,
        ///  used to adjust potential drift between jointed actors. The gear joint can run without
        ///  calling this function, but in that case some visible overlap may develop over time between
        ///  the teeth of the gear meshes.
        ///
        ///  Calling this function resets the internal positional error correction term.
        ///
        ///  true if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGearJoint_setHinges_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxGearJoint_setHinges_mut(PxGearJoint* self_, PxBase* hinge0, PxBase* hinge1);

        /// <summary>
        ///  Set the desired gear ratio.
        ///
        ///  For two gears with n0 and n1 teeth respectively, the gear ratio is n0/n1.
        ///
        ///  You may need to use a negative gear ratio if the joint frames of involved actors are not oriented in the same direction.
        ///
        ///  Calling this function resets the internal positional error correction term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGearJoint_setGearRatio_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxGearJoint_setGearRatio_mut(PxGearJoint* self_, float ratio);

        /// <summary>
        ///  Get the gear ratio.
        ///
        ///  Current ratio
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxGearJoint_getGearRatio", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxGearJoint_getGearRatio(PxGearJoint* self_);

        [DllImport(__DllName, EntryPoint = "PxGearJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxGearJoint_getConcreteTypeName(PxGearJoint* self_);

        /// <summary>
        ///  Create a rack
        ///  &amp;
        ///  pinion Joint.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxRackAndPinionJointCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRackAndPinionJoint* phys_PxRackAndPinionJointCreate(PxPhysics* physics, PxRigidActor* actor0, PxTransform* localFrame0, PxRigidActor* actor1, PxTransform* localFrame1);

        /// <summary>
        ///  Set the hinge
        ///  &amp;
        ///  prismatic joints connected by the rack
        ///  &amp;
        ///  pinion joint.
        ///
        ///  The passed hinge joint can be either PxRevoluteJoint, PxD6Joint or PxArticulationJointReducedCoordinate. It cannot be null.
        ///  The passed prismatic joint can be either PxPrismaticJoint or PxD6Joint. It cannot be null.
        ///
        ///  Note that these joints are only used to compute the positional error correction term,
        ///  used to adjust potential drift between jointed actors. The rack
        ///  &amp;
        ///  pinion joint can run without
        ///  calling this function, but in that case some visible overlap may develop over time between
        ///  the teeth of the rack
        ///  &amp;
        ///  pinion meshes.
        ///
        ///  Calling this function resets the internal positional error correction term.
        ///
        ///  true if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRackAndPinionJoint_setJoints_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRackAndPinionJoint_setJoints_mut(PxRackAndPinionJoint* self_, PxBase* hinge, PxBase* prismatic);

        /// <summary>
        ///  Set the desired ratio directly.
        ///
        ///  You may need to use a negative gear ratio if the joint frames of involved actors are not oriented in the same direction.
        ///
        ///  Calling this function resets the internal positional error correction term.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRackAndPinionJoint_setRatio_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRackAndPinionJoint_setRatio_mut(PxRackAndPinionJoint* self_, float ratio);

        /// <summary>
        ///  Get the ratio.
        ///
        ///  Current ratio
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRackAndPinionJoint_getRatio", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern float PxRackAndPinionJoint_getRatio(PxRackAndPinionJoint* self_);

        /// <summary>
        ///  Set the desired ratio indirectly.
        ///
        ///  This is a simple helper function that computes the ratio from passed data:
        ///
        ///  ratio = (PI*2*nbRackTeeth)/(rackLength*nbPinionTeeth)
        ///
        ///  Calling this function resets the internal positional error correction term.
        ///
        ///  true if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRackAndPinionJoint_setData_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRackAndPinionJoint_setData_mut(PxRackAndPinionJoint* self_, uint nbRackTeeth, uint nbPinionTeeth, float rackLength);

        [DllImport(__DllName, EntryPoint = "PxRackAndPinionJoint_getConcreteTypeName", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxRackAndPinionJoint_getConcreteTypeName(PxRackAndPinionJoint* self_);

        [DllImport(__DllName, EntryPoint = "PxGroupsMask_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGroupsMask* PxGroupsMask_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxGroupsMask_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxGroupsMask_delete(PxGroupsMask* self_);

        /// <summary>
        ///  Implementation of a simple filter shader that emulates PhysX 2.8.x filtering
        ///
        ///  This shader provides the following logic:
        ///
        ///  If one of the two filter objects is a trigger, the pair is acccepted and [`PxPairFlag::eTRIGGER_DEFAULT`] will be used for trigger reports
        ///
        ///  Else, if the filter mask logic (see further below) discards the pair it will be suppressed ([`PxFilterFlag::eSUPPRESS`])
        ///
        ///  Else, the pair gets accepted and collision response gets enabled ([`PxPairFlag::eCONTACT_DEFAULT`])
        ///
        ///  Filter mask logic:
        ///  Given the two [`PxFilterData`] structures fd0 and fd1 of two collision objects, the pair passes the filter if the following
        ///  conditions are met:
        ///
        ///  1) Collision groups of the pair are enabled
        ///  2) Collision filtering equation is satisfied
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxDefaultSimulationFilterShader", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxFilterFlags phys_PxDefaultSimulationFilterShader(uint attributes0, PxFilterData filterData0, uint attributes1, PxFilterData filterData1, PxPairFlags* pairFlags, void* constantBlock, uint constantBlockSize);

        /// <summary>
        ///  Determines if collision detection is performed between a pair of groups
        ///
        ///  Collision group is an integer between 0 and 31.
        ///
        ///  True if the groups could collide
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetGroupCollisionFlag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxGetGroupCollisionFlag(ushort group1, ushort group2);

        /// <summary>
        ///  Specifies if collision should be performed by a pair of groups
        ///
        ///  Collision group is an integer between 0 and 31.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSetGroupCollisionFlag", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetGroupCollisionFlag(ushort group1, ushort group2, [MarshalAs(UnmanagedType.U1)] bool enable);

        /// <summary>
        ///  Retrieves the value set with PxSetGroup()
        ///
        ///  Collision group is an integer between 0 and 31.
        ///
        ///  The collision group this actor belongs to
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ushort phys_PxGetGroup(PxActor* actor);

        /// <summary>
        ///  Sets which collision group this actor is part of
        ///
        ///  Collision group is an integer between 0 and 31.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSetGroup", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetGroup(PxActor* actor, ushort collisionGroup);

        /// <summary>
        ///  Retrieves filtering operation. See comments for PxGroupsMask
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetFilterOps", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxGetFilterOps(PxFilterOp* op0, PxFilterOp* op1, PxFilterOp* op2);

        /// <summary>
        ///  Setups filtering operations. See comments for PxGroupsMask
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSetFilterOps", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetFilterOps(PxFilterOp* op0, PxFilterOp* op1, PxFilterOp* op2);

        /// <summary>
        ///  Retrieves filtering's boolean value. See comments for PxGroupsMask
        ///
        ///  flag Boolean value for filter.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetFilterBool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxGetFilterBool();

        /// <summary>
        ///  Setups filtering's boolean value. See comments for PxGroupsMask
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSetFilterBool", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetFilterBool([MarshalAs(UnmanagedType.U1)] bool enable);

        /// <summary>
        ///  Gets filtering constant K0 and K1. See comments for PxGroupsMask
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetFilterConstants", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxGetFilterConstants(PxGroupsMask* c0, PxGroupsMask* c1);

        /// <summary>
        ///  Setups filtering's K0 and K1 value. See comments for PxGroupsMask
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSetFilterConstants", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetFilterConstants(PxGroupsMask* c0, PxGroupsMask* c1);

        /// <summary>
        ///  Gets 64-bit mask used for collision filtering. See comments for PxGroupsMask
        ///
        ///  The group mask for the actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxGetGroupsMask", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxGroupsMask phys_PxGetGroupsMask(PxActor* actor);

        /// <summary>
        ///  Sets 64-bit mask used for collision filtering. See comments for PxGroupsMask
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxSetGroupsMask", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxSetGroupsMask(PxActor* actor, PxGroupsMask* mask);

        [DllImport(__DllName, EntryPoint = "PxDefaultErrorCallback_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDefaultErrorCallback* PxDefaultErrorCallback_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxDefaultErrorCallback_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultErrorCallback_delete(PxDefaultErrorCallback* self_);

        [DllImport(__DllName, EntryPoint = "PxDefaultErrorCallback_reportError_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultErrorCallback_reportError_mut(PxDefaultErrorCallback* self_, PxErrorCode code, byte* message, byte* file, int line);

        /// <summary>
        ///  Creates a new shape with default properties and a list of materials and adds it to the list of shapes of this actor.
        ///
        ///  This is equivalent to the following
        ///
        ///  ```cpp
        ///  // reference count is 1
        ///  PxShape* shape(...) = PxGetPhysics().createShape(...);
        ///  // increments reference count
        ///  actor-&gt;attachShape(shape);
        ///  // releases user reference, leaving reference count at 1
        ///  shape-&gt;release();
        ///  ```
        ///
        ///  As a consequence, detachShape() will result in the release of the last reference, and the shape will be deleted.
        ///
        ///  The default shape flags to be set are: eVISUALIZATION, eSIMULATION_SHAPE, eSCENE_QUERY_SHAPE (see [`PxShapeFlag`]).
        ///  Triangle mesh, heightfield or plane geometry shapes configured as eSIMULATION_SHAPE are not supported for
        ///  non-kinematic PxRigidDynamic instances.
        ///
        ///  Creating compounds with a very large number of shapes may adversely affect performance and stability.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        ///
        ///  The newly created shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActorExt_createExclusiveShape", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxShape* PxRigidActorExt_createExclusiveShape(PxRigidActor* actor, PxGeometry* geometry, PxMaterial** materials, ushort materialCount, PxShapeFlags shapeFlags);

        /// <summary>
        ///  Creates a new shape with default properties and a single material adds it to the list of shapes of this actor.
        ///
        ///  This is equivalent to the following
        ///
        ///  ```cpp
        ///  // reference count is 1
        ///  PxShape* shape(...) = PxGetPhysics().createShape(...);
        ///  // increments reference count
        ///  actor-&gt;attachShape(shape);
        ///  // releases user reference, leaving reference count at 1
        ///  shape-&gt;release();
        ///  ```
        ///
        ///  As a consequence, detachShape() will result in the release of the last reference, and the shape will be deleted.
        ///
        ///  The default shape flags to be set are: eVISUALIZATION, eSIMULATION_SHAPE, eSCENE_QUERY_SHAPE (see [`PxShapeFlag`]).
        ///  Triangle mesh, heightfield or plane geometry shapes configured as eSIMULATION_SHAPE are not supported for
        ///  non-kinematic PxRigidDynamic instances.
        ///
        ///  Creating compounds with a very large number of shapes may adversely affect performance and stability.
        ///
        ///  Sleeping:
        ///  Does
        ///  NOT
        ///  wake the actor up automatically.
        ///
        ///  The newly created shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActorExt_createExclusiveShape_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxShape* PxRigidActorExt_createExclusiveShape_1(PxRigidActor* actor, PxGeometry* geometry, PxMaterial* material, PxShapeFlags shapeFlags);

        /// <summary>
        ///  Gets a list of bounds based on shapes in rigid actor. This list can be used to cook/create
        ///  bounding volume hierarchy though PxCooking API.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActorExt_getRigidActorShapeLocalBoundsList", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3* PxRigidActorExt_getRigidActorShapeLocalBoundsList(PxRigidActor* actor, uint* numBounds);

        /// <summary>
        ///  Convenience function to create a PxBVH object from a PxRigidActor.
        ///
        ///  The computed PxBVH can then be used in PxScene::addActor() or PxAggregate::addActor().
        ///  After adding the actor
        ///  &amp;
        ///  BVH to the scene/aggregate, release the PxBVH object by calling PxBVH::release().
        ///
        ///  The PxBVH for this actor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidActorExt_createBVHFromActor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBVH* PxRigidActorExt_createBVHFromActor(PxPhysics* physics, PxRigidActor* actor);

        /// <summary>
        ///  Default constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMassProperties PxMassProperties_new();

        /// <summary>
        ///  Construct from individual elements.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMassProperties PxMassProperties_new_1(float m, PxMat33* inertiaT, PxVec3* com);

        /// <summary>
        ///  Compute mass properties based on a provided geometry structure.
        ///
        ///  This constructor assumes the geometry has a density of 1. Mass and inertia tensor scale linearly with density.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_new_2", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMassProperties PxMassProperties_new_2(PxGeometry* geometry);

        /// <summary>
        ///  Translate the center of mass by a given vector and adjust the inertia tensor accordingly.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_translate_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMassProperties_translate_mut(PxMassProperties* self_, PxVec3* t);

        /// <summary>
        ///  Get the entries of the diagonalized inertia tensor and the corresponding reference rotation.
        ///
        ///  The entries of the diagonalized inertia tensor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_getMassSpaceInertia", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxMassProperties_getMassSpaceInertia(PxMat33* inertia, PxQuat* massFrame);

        /// <summary>
        ///  Translate an inertia tensor using the parallel axis theorem
        ///
        ///  The translated inertia tensor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_translateInertia", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMassProperties_translateInertia(PxMat33* inertia, float mass, PxVec3* t);

        /// <summary>
        ///  Rotate an inertia tensor around the center of mass
        ///
        ///  The rotated inertia tensor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_rotateInertia", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMassProperties_rotateInertia(PxMat33* inertia, PxQuat* q);

        /// <summary>
        ///  Non-uniform scaling of the inertia tensor
        ///
        ///  The scaled inertia tensor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_scaleInertia", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMat33 PxMassProperties_scaleInertia(PxMat33* inertia, PxQuat* scaleRotation, PxVec3* scale);

        /// <summary>
        ///  Sum up individual mass properties.
        ///
        ///  The summed up mass properties.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMassProperties_sum", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMassProperties PxMassProperties_sum(PxMassProperties* props, PxTransform* transforms, uint count);

        /// <summary>
        ///  Computation of mass properties for a rigid body actor
        ///
        ///  To simulate a dynamic rigid actor, the SDK needs a mass and an inertia tensor.
        ///
        ///  This method offers functionality to compute the necessary mass and inertia properties based on the shapes declared in
        ///  the PxRigidBody descriptor and some additionally specified parameters. For each shape, the shape geometry,
        ///  the shape positioning within the actor and the specified shape density are used to compute the body's mass and
        ///  inertia properties.
        ///
        ///  Shapes without PxShapeFlag::eSIMULATION_SHAPE set are ignored unless includeNonSimShapes is true.
        ///  Shapes with plane, triangle mesh or heightfield geometry and PxShapeFlag::eSIMULATION_SHAPE set are not allowed for PxRigidBody collision.
        ///
        ///  This method will set the mass, center of mass, and inertia tensor
        ///
        ///  if no collision shapes are found, the inertia tensor is set to (1,1,1) and the mass to 1
        ///
        ///  if massLocalPose is non-NULL, the rigid body's center of mass parameter  will be set
        ///  to the user provided value (massLocalPose) and the inertia tensor will be resolved at that point.
        ///
        ///  If all shapes of the actor have the same density then the overloaded method updateMassAndInertia() with a single density parameter can be used instead.
        ///
        ///  Boolean. True on success else false.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_updateMassAndInertia", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRigidBodyExt_updateMassAndInertia(PxRigidBody* body, float* shapeDensities, uint shapeDensityCount, PxVec3* massLocalPose, [MarshalAs(UnmanagedType.U1)] bool includeNonSimShapes);

        /// <summary>
        ///  Computation of mass properties for a rigid body actor
        ///
        ///  See previous method for details.
        ///
        ///  Boolean. True on success else false.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_updateMassAndInertia_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRigidBodyExt_updateMassAndInertia_1(PxRigidBody* body, float density, PxVec3* massLocalPose, [MarshalAs(UnmanagedType.U1)] bool includeNonSimShapes);

        /// <summary>
        ///  Computation of mass properties for a rigid body actor
        ///
        ///  This method sets the mass, inertia and center of mass of a rigid body. The mass is set to the sum of all user-supplied
        ///  shape mass values, and the inertia and center of mass are computed according to the rigid body's shapes and the per shape mass input values.
        ///
        ///  If no collision shapes are found, the inertia tensor is set to (1,1,1)
        ///
        ///  If a single mass value should be used for the actor as a whole then the overloaded method setMassAndUpdateInertia() with a single mass parameter can be used instead.
        ///
        ///  Boolean. True on success else false.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_setMassAndUpdateInertia", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRigidBodyExt_setMassAndUpdateInertia(PxRigidBody* body, float* shapeMasses, uint shapeMassCount, PxVec3* massLocalPose, [MarshalAs(UnmanagedType.U1)] bool includeNonSimShapes);

        /// <summary>
        ///  Computation of mass properties for a rigid body actor
        ///
        ///  This method sets the mass, inertia and center of mass of a rigid body. The mass is set to the user-supplied
        ///  value, and the inertia and center of mass are computed according to the rigid body's shapes and the input mass.
        ///
        ///  If no collision shapes are found, the inertia tensor is set to (1,1,1)
        ///
        ///  Boolean. True on success else false.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_setMassAndUpdateInertia_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRigidBodyExt_setMassAndUpdateInertia_1(PxRigidBody* body, float mass, PxVec3* massLocalPose, [MarshalAs(UnmanagedType.U1)] bool includeNonSimShapes);

        /// <summary>
        ///  Compute the mass, inertia tensor and center of mass from a list of shapes.
        ///
        ///  The mass properties from the combined shapes.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_computeMassPropertiesFromShapes", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMassProperties PxRigidBodyExt_computeMassPropertiesFromShapes(PxShape** shapes, uint shapeCount);

        /// <summary>
        ///  Applies a force (or impulse) defined in the global coordinate frame, acting at a particular
        ///  point in global coordinates, to the actor.
        ///
        ///  Note that if the force does not act along the center of mass of the actor, this
        ///  will also add the corresponding torque. Because forces are reset at the end of every timestep,
        ///  you can maintain a total external force on an object by calling this once every frame.
        ///
        ///  if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
        ///  articulation
        ///
        ///  ::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the
        ///  force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a
        ///  given point.
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping and the wakeup parameter is true (default).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_addForceAtPos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBodyExt_addForceAtPos(PxRigidBody* body, PxVec3* force, PxVec3* pos, PxForceMode mode, [MarshalAs(UnmanagedType.U1)] bool wakeup);

        /// <summary>
        ///  Applies a force (or impulse) defined in the global coordinate frame, acting at a particular
        ///  point in local coordinates, to the actor.
        ///
        ///  Note that if the force does not act along the center of mass of the actor, this
        ///  will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a
        ///  total external force on an object by calling this once every frame.
        ///
        ///  if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
        ///  articulation
        ///
        ///  ::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the
        ///  force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a
        ///  given point.
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping and the wakeup parameter is true (default).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_addForceAtLocalPos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBodyExt_addForceAtLocalPos(PxRigidBody* body, PxVec3* force, PxVec3* pos, PxForceMode mode, [MarshalAs(UnmanagedType.U1)] bool wakeup);

        /// <summary>
        ///  Applies a force (or impulse) defined in the actor local coordinate frame, acting at a
        ///  particular point in global coordinates, to the actor.
        ///
        ///  Note that if the force does not act along the center of mass of the actor, this
        ///  will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a
        ///  total external force on an object by calling this once every frame.
        ///
        ///  if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
        ///  articulation
        ///
        ///  ::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the
        ///  force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a
        ///  given point.
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping and the wakeup parameter is true (default).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_addLocalForceAtPos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBodyExt_addLocalForceAtPos(PxRigidBody* body, PxVec3* force, PxVec3* pos, PxForceMode mode, [MarshalAs(UnmanagedType.U1)] bool wakeup);

        /// <summary>
        ///  Applies a force (or impulse) defined in the actor local coordinate frame, acting at a
        ///  particular point in local coordinates, to the actor.
        ///
        ///  Note that if the force does not act along the center of mass of the actor, this
        ///  will also add the corresponding torque. Because forces are reset at the end of every timestep, you can maintain a
        ///  total external force on an object by calling this once every frame.
        ///
        ///  if this call is used to apply a force or impulse to an articulation link, only the link is updated, not the entire
        ///  articulation
        ///
        ///  ::PxForceMode determines if the force is to be conventional or impulsive. Only eFORCE and eIMPULSE are supported, as the
        ///  force required to produce a given velocity change or acceleration is underdetermined given only the desired change at a
        ///  given point.
        ///
        ///  Sleeping:
        ///  This call wakes the actor if it is sleeping and the wakeup parameter is true (default).
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_addLocalForceAtLocalPos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBodyExt_addLocalForceAtLocalPos(PxRigidBody* body, PxVec3* force, PxVec3* pos, PxForceMode mode, [MarshalAs(UnmanagedType.U1)] bool wakeup);

        /// <summary>
        ///  Computes the velocity of a point given in world coordinates if it were attached to the
        ///  specified body and moving with it.
        ///
        ///  The velocity of point in the global frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_getVelocityAtPos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidBodyExt_getVelocityAtPos(PxRigidBody* body, PxVec3* pos);

        /// <summary>
        ///  Computes the velocity of a point given in local coordinates if it were attached to the
        ///  specified body and moving with it.
        ///
        ///  The velocity of point in the local frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_getLocalVelocityAtLocalPos", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidBodyExt_getLocalVelocityAtLocalPos(PxRigidBody* body, PxVec3* pos);

        /// <summary>
        ///  Computes the velocity of a point (offset from the origin of the body) given in world coordinates if it were attached to the
        ///  specified body and moving with it.
        ///
        ///  The velocity of point (offset from the origin of the body) in the global frame.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_getVelocityAtOffset", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxVec3 PxRigidBodyExt_getVelocityAtOffset(PxRigidBody* body, PxVec3* pos);

        /// <summary>
        ///  Compute the change to linear and angular velocity that would occur if an impulsive force and torque were to be applied to a specified rigid body.
        ///
        ///  The rigid body is left unaffected unless a subsequent independent call is executed that actually applies the computed changes to velocity and angular velocity.
        ///
        ///  if this call is used to determine the velocity delta for an articulation link, only the mass properties of the link are taken into account.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_computeVelocityDeltaFromImpulse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBodyExt_computeVelocityDeltaFromImpulse(PxRigidBody* body, PxVec3* impulsiveForce, PxVec3* impulsiveTorque, PxVec3* deltaLinearVelocity, PxVec3* deltaAngularVelocity);

        /// <summary>
        ///  Computes the linear and angular velocity change vectors for a given impulse at a world space position taking a mass and inertia scale into account
        ///
        ///  This function is useful for extracting the respective linear and angular velocity changes from a contact or joint when the mass/inertia ratios have been adjusted.
        ///
        ///  if this call is used to determine the velocity delta for an articulation link, only the mass properties of the link are taken into account.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_computeVelocityDeltaFromImpulse_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBodyExt_computeVelocityDeltaFromImpulse_1(PxRigidBody* body, PxTransform* globalPose, PxVec3* point, PxVec3* impulse, float invMassScale, float invInertiaScale, PxVec3* deltaLinearVelocity, PxVec3* deltaAngularVelocity);

        /// <summary>
        ///  Computes the linear and angular impulse vectors for a given impulse at a world space position taking a mass and inertia scale into account
        ///
        ///  This function is useful for extracting the respective linear and angular impulses from a contact or joint when the mass/inertia ratios have been adjusted.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_computeLinearAngularImpulse", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRigidBodyExt_computeLinearAngularImpulse(PxRigidBody* body, PxTransform* globalPose, PxVec3* point, PxVec3* impulse, float invMassScale, float invInertiaScale, PxVec3* linearImpulse, PxVec3* angularImpulse);

        /// <summary>
        ///  Performs a linear sweep through space with the body's geometry objects.
        ///
        ///  Supported geometries are: box, sphere, capsule, convex. Other geometry types will be ignored.
        ///
        ///  If eTOUCH is returned from the filter callback, it will trigger an error and the hit will be discarded.
        ///
        ///  The function sweeps all shapes attached to a given rigid body through space and reports the nearest
        ///  object in the scene which intersects any of of the shapes swept paths.
        ///  Information about the closest intersection is written to a [`PxSweepHit`] structure.
        ///
        ///  True if a blocking hit was found.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_linearSweepSingle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRigidBodyExt_linearSweepSingle(PxRigidBody* body, PxScene* scene, PxVec3* unitDir, float distance, PxHitFlags outputFlags, PxSweepHit* closestHit, uint* shapeIndex, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache, float inflation);

        /// <summary>
        ///  Performs a linear sweep through space with the body's geometry objects, returning all overlaps.
        ///
        ///  Supported geometries are: box, sphere, capsule, convex. Other geometry types will be ignored.
        ///
        ///  This function sweeps all shapes attached to a given rigid body through space and reports all
        ///  objects in the scene that intersect any of the shapes' swept paths until there are no more objects to report
        ///  or a blocking hit is encountered.
        ///
        ///  the number of touching hits. If overflow is set to true, the results are incomplete. In case of overflow there are also no guarantees that all touching hits returned are closer than the blocking hit.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRigidBodyExt_linearSweepMultiple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxRigidBodyExt_linearSweepMultiple(PxRigidBody* body, PxScene* scene, PxVec3* unitDir, float distance, PxHitFlags outputFlags, PxSweepHit* touchHitBuffer, uint* touchHitShapeIndices, uint touchHitBufferSize, PxSweepHit* block, int* blockingShapeIndex, bool* overflow, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache, float inflation);

        /// <summary>
        ///  Retrieves the world space pose of the shape.
        ///
        ///  Global pose of shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShapeExt_getGlobalPose", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTransform PxShapeExt_getGlobalPose(PxShape* shape, PxRigidActor* actor);

        /// <summary>
        ///  Raycast test against the shape.
        ///
        ///  Number of hits between the ray and the shape
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShapeExt_raycast", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxShapeExt_raycast(PxShape* shape, PxRigidActor* actor, PxVec3* rayOrigin, PxVec3* rayDir, float maxDist, PxHitFlags hitFlags, uint maxHits, PxRaycastHit* rayHits);

        /// <summary>
        ///  Test overlap between the shape and a geometry object
        ///
        ///  True if the shape overlaps the geometry object
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShapeExt_overlap", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxShapeExt_overlap(PxShape* shape, PxRigidActor* actor, PxGeometry* otherGeom, PxTransform* otherGeomPose);

        /// <summary>
        ///  Sweep a geometry object against the shape.
        ///
        ///  Currently only box, sphere, capsule and convex mesh shapes are supported, i.e. the swept geometry object must be one of those types.
        ///
        ///  True if the swept geometry object hits the shape
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShapeExt_sweep", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxShapeExt_sweep(PxShape* shape, PxRigidActor* actor, PxVec3* unitDir, float distance, PxGeometry* otherGeom, PxTransform* otherGeomPose, PxSweepHit* sweepHit, PxHitFlags hitFlags);

        /// <summary>
        ///  Retrieves the axis aligned bounding box enclosing the shape.
        ///
        ///  The shape's bounding box.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxShapeExt_getWorldBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBounds3 PxShapeExt_getWorldBounds(PxShape* shape, PxRigidActor* actor, float inflation);

        [DllImport(__DllName, EntryPoint = "PxMeshOverlapUtil_new_alloc", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxMeshOverlapUtil* PxMeshOverlapUtil_new_alloc();

        [DllImport(__DllName, EntryPoint = "PxMeshOverlapUtil_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxMeshOverlapUtil_delete(PxMeshOverlapUtil* self_);

        /// <summary>
        ///  Find the mesh triangles which touch the specified geometry object.
        ///
        ///  Number of overlaps found. Triangle indices can then be accessed through the [`getResults`]() function.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshOverlapUtil_findOverlap_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxMeshOverlapUtil_findOverlap_mut(PxMeshOverlapUtil* self_, PxGeometry* geom, PxTransform* geomPose, PxTriangleMeshGeometry* meshGeom, PxTransform* meshPose);

        /// <summary>
        ///  Find the height field triangles which touch the specified geometry object.
        ///
        ///  Number of overlaps found. Triangle indices can then be accessed through the [`getResults`]() function.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshOverlapUtil_findOverlap_mut_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxMeshOverlapUtil_findOverlap_mut_1(PxMeshOverlapUtil* self_, PxGeometry* geom, PxTransform* geomPose, PxHeightFieldGeometry* hfGeom, PxTransform* hfPose);

        /// <summary>
        ///  Retrieves array of triangle indices after a findOverlap call.
        ///
        ///  Indices of touched triangles
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshOverlapUtil_getResults", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint* PxMeshOverlapUtil_getResults(PxMeshOverlapUtil* self_);

        /// <summary>
        ///  Retrieves number of triangle indices after a findOverlap call.
        ///
        ///  Number of touched triangles
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxMeshOverlapUtil_getNbResults", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxMeshOverlapUtil_getNbResults(PxMeshOverlapUtil* self_);

        /// <summary>
        ///  Computes an approximate minimum translational distance (MTD) between a geometry object and a mesh.
        ///
        ///  This iterative function computes an approximate vector that can be used to depenetrate a geom object
        ///  from a triangle mesh. Returned depenetration vector should be applied to 'geom', to get out of the mesh.
        ///
        ///  The function works best when the amount of overlap between the geom object and the mesh is small. If the
        ///  geom object's center goes inside the mesh, backface culling usually kicks in, no overlap is detected,
        ///  and the function does not compute an MTD vector.
        ///
        ///  The function early exits if no overlap is detected after a depenetration attempt. This means that if
        ///  maxIter = N, the code will attempt at most N iterations but it might exit earlier if depenetration has
        ///  been successful. Usually N = 4 gives good results.
        ///
        ///  True if the MTD has successfully been computed, i.e. if objects do overlap.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxComputeTriangleMeshPenetration", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxComputeTriangleMeshPenetration(PxVec3* direction, float* depth, PxGeometry* geom, PxTransform* geomPose, PxTriangleMeshGeometry* meshGeom, PxTransform* meshPose, uint maxIter, uint* usedIter);

        /// <summary>
        ///  Computes an approximate minimum translational distance (MTD) between a geometry object and a heightfield.
        ///
        ///  This iterative function computes an approximate vector that can be used to depenetrate a geom object
        ///  from a heightfield. Returned depenetration vector should be applied to 'geom', to get out of the heightfield.
        ///
        ///  The function works best when the amount of overlap between the geom object and the mesh is small. If the
        ///  geom object's center goes inside the heightfield, backface culling usually kicks in, no overlap is detected,
        ///  and the function does not compute an MTD vector.
        ///
        ///  The function early exits if no overlap is detected after a depenetration attempt. This means that if
        ///  maxIter = N, the code will attempt at most N iterations but it might exit earlier if depenetration has
        ///  been successful. Usually N = 4 gives good results.
        ///
        ///  True if the MTD has successfully been computed, i.e. if objects do overlap.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxComputeHeightFieldPenetration", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxComputeHeightFieldPenetration(PxVec3* direction, float* depth, PxGeometry* geom, PxTransform* geomPose, PxHeightFieldGeometry* heightFieldGeom, PxTransform* heightFieldPose, uint maxIter, uint* usedIter);

        [DllImport(__DllName, EntryPoint = "PxXmlMiscParameter_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxXmlMiscParameter PxXmlMiscParameter_new();

        [DllImport(__DllName, EntryPoint = "PxXmlMiscParameter_new_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxXmlMiscParameter PxXmlMiscParameter_new_1(PxVec3* inUpVector, PxTolerancesScale inScale);

        /// <summary>
        ///  Returns whether the collection is serializable with the externalReferences collection.
        ///
        ///  Some definitions to explain whether a collection can be serialized or not:
        ///
        ///  For definitions of
        ///  requires
        ///  and
        ///  complete
        ///  see [`PxSerialization::complete`]
        ///
        ///  A serializable object is
        ///  subordinate
        ///  if it cannot be serialized on its own
        ///  The following objects are subordinate:
        ///  - articulation links
        ///  - articulation joints
        ///  - joints
        ///
        ///  A collection C can be serialized with external references collection D iff
        ///  - C is complete relative to D (no dangling references)
        ///  - Every object in D required by an object in C has a valid ID (no unnamed references)
        ///  - Every subordinate object in C is required by another object in C (no orphans)
        ///
        ///  Whether the collection is serializable
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerialization_isSerializable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSerialization_isSerializable(PxCollection* collection, PxSerializationRegistry* sr, PxCollection* externalReferences);

        /// <summary>
        ///  Adds to a collection all objects such that it can be successfully serialized.
        ///
        ///  A collection C is complete relative to an other collection D if every object required by C is either in C or D.
        ///  This function adds objects to a collection, such that it becomes complete with respect to the exceptFor collection.
        ///  Completeness is needed for serialization. See [`PxSerialization::serializeCollectionToBinary`],
        ///  [`PxSerialization::serializeCollectionToXml`].
        ///
        ///  Sdk objects require other sdk object according to the following rules:
        ///  - joints require their actors and constraint
        ///  - rigid actors require their shapes
        ///  - shapes require their material(s) and mesh (triangle mesh, convex mesh or height field), if any
        ///  - articulations require their links and joints
        ///  - aggregates require their actors
        ///
        ///  If followJoints is specified another rule is added:
        ///  - actors require their joints
        ///
        ///  Specifying followJoints will make whole jointed actor chains being added to the collection. Following chains
        ///  is interrupted whenever a object in exceptFor is encountered.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerialization_complete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerialization_complete(PxCollection* collection, PxSerializationRegistry* sr, PxCollection* exceptFor, [MarshalAs(UnmanagedType.U1)] bool followJoints);

        /// <summary>
        ///  Creates PxSerialObjectId values for unnamed objects in a collection.
        ///
        ///  Creates PxSerialObjectId names for unnamed objects in a collection starting at a base value and incrementing,
        ///  skipping values that are already assigned to objects in the collection.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerialization_createSerialObjectIds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxSerialization_createSerialObjectIds(PxCollection* collection, ulong @base);

        /// <summary>
        ///  Creates a PxCollection from XML data.
        ///
        ///  a pointer to a PxCollection if successful or NULL if it failed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerialization_createCollectionFromXml", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCollection* PxSerialization_createCollectionFromXml(PxInputData* inputData, PxCooking* cooking, PxSerializationRegistry* sr, PxCollection* externalRefs, PxStringTable* stringTable, PxXmlMiscParameter* outArgs);

        /// <summary>
        ///  Deserializes a PxCollection from memory.
        ///
        ///  Creates a collection from memory. If the collection has external dependencies another collection
        ///  can be provided to resolve these.
        ///
        ///  The memory block provided has to be 128 bytes aligned and contain a contiguous serialized collection as written
        ///  by PxSerialization::serializeCollectionToBinary. The contained binary data needs to be compatible with the current binary format version
        ///  which is defined by "PX_PHYSICS_VERSION_MAJOR.PX_PHYSICS_VERSION_MINOR.PX_PHYSICS_VERSION_BUGFIX-PX_BINARY_SERIAL_VERSION".
        ///  For a list of compatible sdk releases refer to the documentation of PX_BINARY_SERIAL_VERSION.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerialization_createCollectionFromBinary", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCollection* PxSerialization_createCollectionFromBinary(void* memBlock, PxSerializationRegistry* sr, PxCollection* externalRefs);

        /// <summary>
        ///  Serializes a physics collection to an XML output stream.
        ///
        ///  The collection to be serialized needs to be complete
        ///
        ///  Serialization of objects in a scene that is simultaneously being simulated is not supported and leads to undefined behavior.
        ///
        ///  true if the collection is successfully serialized.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerialization_serializeCollectionToXml", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSerialization_serializeCollectionToXml(PxOutputStream* outputStream, PxCollection* collection, PxSerializationRegistry* sr, PxCooking* cooking, PxCollection* externalRefs, PxXmlMiscParameter* inArgs);

        /// <summary>
        ///  Serializes a collection to a binary stream.
        ///
        ///  Serializes a collection to a stream. In order to resolve external dependencies the externalReferences collection has to be provided.
        ///  Optionally names of objects that where set for example with [`PxActor::setName`] are serialized along with the objects.
        ///
        ///  The collection can be successfully serialized if isSerializable(collection) returns true. See [`isSerializable`].
        ///
        ///  The implementation of the output stream needs to fulfill the requirements on the memory block input taken by
        ///  PxSerialization::createCollectionFromBinary.
        ///
        ///  Serialization of objects in a scene that is simultaneously being simulated is not supported and leads to undefined behavior.
        ///
        ///  Whether serialization was successful
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerialization_serializeCollectionToBinary", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSerialization_serializeCollectionToBinary(PxOutputStream* outputStream, PxCollection* collection, PxSerializationRegistry* sr, PxCollection* externalRefs, [MarshalAs(UnmanagedType.U1)] bool exportNames);

        /// <summary>
        ///  Creates an application managed registry for serialization.
        ///
        ///  PxSerializationRegistry instance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSerialization_createSerializationRegistry", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSerializationRegistry* PxSerialization_createSerializationRegistry(PxPhysics* physics);

        /// <summary>
        ///  Deletes the dispatcher.
        ///
        ///  Do not keep a reference to the deleted instance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDefaultCpuDispatcher_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultCpuDispatcher_release_mut(PxDefaultCpuDispatcher* self_);

        /// <summary>
        ///  Enables profiling at task level.
        ///
        ///  By default enabled only in profiling builds.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDefaultCpuDispatcher_setRunProfiled_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxDefaultCpuDispatcher_setRunProfiled_mut(PxDefaultCpuDispatcher* self_, [MarshalAs(UnmanagedType.U1)] bool runProfiled);

        /// <summary>
        ///  Checks if profiling is enabled at task level.
        ///
        ///  True if tasks should be profiled.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxDefaultCpuDispatcher_getRunProfiled", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxDefaultCpuDispatcher_getRunProfiled(PxDefaultCpuDispatcher* self_);

        /// <summary>
        ///  Create default dispatcher, extensions SDK needs to be initialized first.
        ///
        ///  numThreads may be zero in which case no worker thread are initialized and
        ///  simulation tasks will be executed on the thread that calls PxScene::simulate()
        ///
        ///  yieldProcessorCount must be greater than zero if eYIELD_PROCESSOR is the chosen mode and equal to zero for all other modes.
        ///
        ///  eYIELD_THREAD and eYIELD_PROCESSOR modes will use compute resources even if the simulation is not running.
        ///  It is left to users to keep threads inactive, if so desired, when no simulation is running.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxDefaultCpuDispatcherCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxDefaultCpuDispatcher* phys_PxDefaultCpuDispatcherCreate(uint numThreads, uint* affinityMasks, PxDefaultCpuDispatcherWaitForWorkMode mode, uint yieldProcessorCount);

        /// <summary>
        ///  Builds smooth vertex normals over a mesh.
        ///
        ///  - "smooth" because smoothing groups are not supported here
        ///  - takes angles into account for correct cube normals computation
        ///
        ///  To use 32bit indices pass a pointer in dFaces and set wFaces to zero. Alternatively pass a pointer to
        ///  wFaces and set dFaces to zero.
        ///
        ///  True on success.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxBuildSmoothNormals", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxBuildSmoothNormals(uint nbTris, uint nbVerts, PxVec3* verts, uint* dFaces, ushort* wFaces, PxVec3* normals, [MarshalAs(UnmanagedType.U1)] bool flip);

        /// <summary>
        ///  simple method to create a PxRigidDynamic actor with a single PxShape.
        ///
        ///  a new dynamic actor with the PxRigidBodyFlag, or NULL if it could
        ///  not be constructed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateDynamic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidDynamic* phys_PxCreateDynamic(PxPhysics* sdk, PxTransform* transform, PxGeometry* geometry, PxMaterial* material, float density, PxTransform* shapeOffset);

        /// <summary>
        ///  simple method to create a PxRigidDynamic actor with a single PxShape.
        ///
        ///  a new dynamic actor with the PxRigidBodyFlag, or NULL if it could
        ///  not be constructed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateDynamic_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidDynamic* phys_PxCreateDynamic_1(PxPhysics* sdk, PxTransform* transform, PxShape* shape, float density);

        /// <summary>
        ///  simple method to create a kinematic PxRigidDynamic actor with a single PxShape.
        ///
        ///  unlike PxCreateDynamic, the geometry is not restricted to box, capsule, sphere or convex. However,
        ///  kinematics of other geometry types may not participate in simulation collision and may be used only for
        ///  triggers or scene queries of moving objects under animation control. In this case the density parameter
        ///  will be ignored and the created shape will be set up as a scene query only shape (see [`PxShapeFlag::eSCENE_QUERY_SHAPE`])
        ///
        ///  a new dynamic actor with the PxRigidBodyFlag::eKINEMATIC set, or NULL if it could
        ///  not be constructed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateKinematic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidDynamic* phys_PxCreateKinematic(PxPhysics* sdk, PxTransform* transform, PxGeometry* geometry, PxMaterial* material, float density, PxTransform* shapeOffset);

        /// <summary>
        ///  simple method to create a kinematic PxRigidDynamic actor with a single PxShape.
        ///
        ///  unlike PxCreateDynamic, the geometry is not restricted to box, capsule, sphere or convex. However,
        ///  kinematics of other geometry types may not participate in simulation collision and may be used only for
        ///  triggers or scene queries of moving objects under animation control. In this case the density parameter
        ///  will be ignored and the created shape will be set up as a scene query only shape (see [`PxShapeFlag::eSCENE_QUERY_SHAPE`])
        ///
        ///  a new dynamic actor with the PxRigidBodyFlag::eKINEMATIC set, or NULL if it could
        ///  not be constructed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateKinematic_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidDynamic* phys_PxCreateKinematic_1(PxPhysics* sdk, PxTransform* transform, PxShape* shape, float density);

        /// <summary>
        ///  simple method to create a PxRigidStatic actor with a single PxShape.
        ///
        ///  a new static actor, or NULL if it could not be constructed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateStatic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidStatic* phys_PxCreateStatic(PxPhysics* sdk, PxTransform* transform, PxGeometry* geometry, PxMaterial* material, PxTransform* shapeOffset);

        /// <summary>
        ///  simple method to create a PxRigidStatic actor with a single PxShape.
        ///
        ///  a new static actor, or NULL if it could not be constructed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateStatic_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidStatic* phys_PxCreateStatic_1(PxPhysics* sdk, PxTransform* transform, PxShape* shape);

        /// <summary>
        ///  create a shape by copying attributes from another shape
        ///
        ///  The function clones a PxShape. The following properties are copied:
        ///  - geometry
        ///  - flags
        ///  - materials
        ///  - actor-local pose
        ///  - contact offset
        ///  - rest offset
        ///  - simulation filter data
        ///  - query filter data
        ///  - torsional patch radius
        ///  - minimum torsional patch radius
        ///
        ///  The following are not copied and retain their default values:
        ///  - name
        ///  - user data
        ///
        ///  the newly-created rigid static
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCloneShape", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxShape* phys_PxCloneShape(PxPhysics* physicsSDK, PxShape* shape, [MarshalAs(UnmanagedType.U1)] bool isExclusive);

        /// <summary>
        ///  create a static body by copying attributes from another rigid actor
        ///
        ///  The function clones a PxRigidDynamic or PxRigidStatic as a PxRigidStatic. A uniform scale is applied. The following properties are copied:
        ///  - shapes
        ///  - actor flags
        ///  - owner client and client behavior bits
        ///  - dominance group
        ///
        ///  The following are not copied and retain their default values:
        ///  - name
        ///  - joints or observers
        ///  - aggregate or scene membership
        ///  - user data
        ///
        ///  Transforms are not copied with bit-exact accuracy.
        ///
        ///  the newly-created rigid static
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCloneStatic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidStatic* phys_PxCloneStatic(PxPhysics* physicsSDK, PxTransform* transform, PxRigidActor* actor);

        /// <summary>
        ///  create a dynamic body by copying attributes from an existing body
        ///
        ///  The following properties are copied:
        ///  - shapes
        ///  - actor flags, rigidDynamic flags and rigidDynamic lock flags
        ///  - mass, moment of inertia, and center of mass frame
        ///  - linear and angular velocity
        ///  - linear and angular damping
        ///  - maximum linear velocity
        ///  - maximum angular velocity
        ///  - position and velocity solver iterations
        ///  - maximum depenetration velocity
        ///  - sleep threshold
        ///  - contact report threshold
        ///  - dominance group
        ///  - owner client and client behavior bits
        ///  - name pointer
        ///  - kinematic target
        ///
        ///  The following are not copied and retain their default values:
        ///  - name
        ///  - joints or observers
        ///  - aggregate or scene membership
        ///  - sleep timer
        ///  - user data
        ///
        ///  Transforms are not copied with bit-exact accuracy.
        ///
        ///  the newly-created rigid static
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCloneDynamic", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidDynamic* phys_PxCloneDynamic(PxPhysics* physicsSDK, PxTransform* transform, PxRigidDynamic* body);

        /// <summary>
        ///  create a plane actor. The plane equation is n.x + d = 0
        ///
        ///  a new static actor, or NULL if it could not be constructed
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreatePlane", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRigidStatic* phys_PxCreatePlane(PxPhysics* sdk, PxPlane* plane, PxMaterial* material);

        /// <summary>
        ///  scale a rigid actor by a uniform scale
        ///
        ///  The geometry and relative positions of the actor are multiplied by the given scale value. If the actor is a rigid body or an
        ///  articulation link and the scaleMassProps value is true, the mass properties are scaled assuming the density is constant: the
        ///  center of mass is linearly scaled, the mass is multiplied by the cube of the scale, and the inertia tensor by the fifth power of the scale.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxScaleRigidActor", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxScaleRigidActor(PxRigidActor* actor, float scale, [MarshalAs(UnmanagedType.U1)] bool scaleMassProps);

        [DllImport(__DllName, EntryPoint = "PxStringTableExt_createStringTable", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxStringTable* PxStringTableExt_createStringTable(PxAllocatorCallback* inAllocator);

        /// <summary>
        ///  Creates regions for PxSceneDesc, from a global box.
        ///
        ///  This helper simply subdivides the given global box into a 2D grid of smaller boxes. Each one of those smaller boxes
        ///  is a region of interest for the broadphase. There are nbSubdiv*nbSubdiv regions in the 2D grid. The function does not
        ///  subdivide along the given up axis.
        ///
        ///  This is the simplest setup one can use with PxBroadPhaseType::eMBP. A more sophisticated setup would try to cover
        ///  the game world with a non-uniform set of regions (i.e. not just a grid).
        ///
        ///  number of regions written out to the 'regions' array
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBroadPhaseExt_createRegionsFromWorldBounds", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxBroadPhaseExt_createRegionsFromWorldBounds(PxBounds3* regions, PxBounds3* globalBounds, uint nbSubdiv, uint upAxis);

        /// <summary>
        ///  Raycast returning any blocking hit, not necessarily the closest.
        ///
        ///  Returns whether any rigid actor is hit along the ray.
        ///
        ///  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.
        ///
        ///  True if a blocking hit was found.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryExt_raycastAny", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQueryExt_raycastAny(PxScene* scene, PxVec3* origin, PxVec3* unitDir, float distance, PxQueryHit* hit, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache);

        /// <summary>
        ///  Raycast returning a single result.
        ///
        ///  Returns the first rigid actor that is hit along the ray. Data for a blocking hit will be returned as specified by the outputFlags field. Touching hits will be ignored.
        ///
        ///  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.
        ///
        ///  True if a blocking hit was found.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryExt_raycastSingle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQueryExt_raycastSingle(PxScene* scene, PxVec3* origin, PxVec3* unitDir, float distance, PxHitFlags outputFlags, PxRaycastHit* hit, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache);

        /// <summary>
        ///  Raycast returning multiple results.
        ///
        ///  Find all rigid actors that get hit along the ray. Each result contains data as specified by the outputFlags field.
        ///
        ///  Touching hits are not ordered.
        ///
        ///  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.
        ///
        ///  Number of hits in the buffer, or -1 if the buffer overflowed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryExt_raycastMultiple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int PxSceneQueryExt_raycastMultiple(PxScene* scene, PxVec3* origin, PxVec3* unitDir, float distance, PxHitFlags outputFlags, PxRaycastHit* hitBuffer, uint hitBufferSize, bool* blockingHit, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache);

        /// <summary>
        ///  Sweep returning any blocking hit, not necessarily the closest.
        ///
        ///  Returns whether any rigid actor is hit along the sweep path.
        ///
        ///  If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.
        ///
        ///  True if a blocking hit was found.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryExt_sweepAny", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQueryExt_sweepAny(PxScene* scene, PxGeometry* geometry, PxTransform* pose, PxVec3* unitDir, float distance, PxHitFlags queryFlags, PxQueryHit* hit, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache, float inflation);

        /// <summary>
        ///  Sweep returning a single result.
        ///
        ///  Returns the first rigid actor that is hit along the ray. Data for a blocking hit will be returned as specified by the outputFlags field. Touching hits will be ignored.
        ///
        ///  If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.
        ///
        ///  True if a blocking hit was found.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryExt_sweepSingle", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQueryExt_sweepSingle(PxScene* scene, PxGeometry* geometry, PxTransform* pose, PxVec3* unitDir, float distance, PxHitFlags outputFlags, PxSweepHit* hit, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache, float inflation);

        /// <summary>
        ///  Sweep returning multiple results.
        ///
        ///  Find all rigid actors that get hit along the sweep. Each result contains data as specified by the outputFlags field.
        ///
        ///  Touching hits are not ordered.
        ///
        ///  If a shape from the scene is already overlapping with the query shape in its starting position, behavior is controlled by the PxSceneQueryFlag::eINITIAL_OVERLAP flag.
        ///
        ///  Number of hits in the buffer, or -1 if the buffer overflowed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryExt_sweepMultiple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int PxSceneQueryExt_sweepMultiple(PxScene* scene, PxGeometry* geometry, PxTransform* pose, PxVec3* unitDir, float distance, PxHitFlags outputFlags, PxSweepHit* hitBuffer, uint hitBufferSize, bool* blockingHit, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall, PxQueryCache* cache, float inflation);

        /// <summary>
        ///  Test overlap between a geometry and objects in the scene.
        ///
        ///  Filtering: Overlap tests do not distinguish between touching and blocking hit types. Both get written to the hit buffer.
        ///
        ///  PxHitFlag::eMESH_MULTIPLE and PxHitFlag::eMESH_BOTH_SIDES have no effect in this case
        ///
        ///  Number of hits in the buffer, or -1 if the buffer overflowed.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryExt_overlapMultiple", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int PxSceneQueryExt_overlapMultiple(PxScene* scene, PxGeometry* geometry, PxTransform* pose, PxOverlapHit* hitBuffer, uint hitBufferSize, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall);

        /// <summary>
        ///  Test returning, for a given geometry, any overlapping object in the scene.
        ///
        ///  Filtering: Overlap tests do not distinguish between touching and blocking hit types. Both trigger a hit.
        ///
        ///  PxHitFlag::eMESH_MULTIPLE and PxHitFlag::eMESH_BOTH_SIDES have no effect in this case
        ///
        ///  True if an overlap was found.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxSceneQueryExt_overlapAny", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxSceneQueryExt_overlapAny(PxScene* scene, PxGeometry* geometry, PxTransform* pose, PxOverlapHit* hit, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall);

        [DllImport(__DllName, EntryPoint = "PxBatchQueryExt_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBatchQueryExt_release_mut(PxBatchQueryExt* self_);

        /// <summary>
        ///  Performs a raycast against objects in the scene.
        ///
        ///  Touching hits are not ordered.
        ///
        ///  Shooting a ray from within an object leads to different results depending on the shape type. Please check the details in article SceneQuery. User can ignore such objects by using one of the provided filter mechanisms.
        ///
        ///  This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock
        ///  and overlapping writes from different threads may result in undefined behavior).
        ///
        ///  Returns a PxRaycastBuffer pointer that will store the result of the query after execute() is completed.
        ///  This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBatchQueryExt_raycast_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRaycastBuffer* PxBatchQueryExt_raycast_mut(PxBatchQueryExt* self_, PxVec3* origin, PxVec3* unitDir, float distance, ushort maxNbTouches, PxHitFlags hitFlags, PxQueryFilterData* filterData, PxQueryCache* cache);

        /// <summary>
        ///  Performs a sweep test against objects in the scene.
        ///
        ///  Touching hits are not ordered.
        ///
        ///  If a shape from the scene is already overlapping with the query shape in its starting position,
        ///  the hit is returned unless eASSUME_NO_INITIAL_OVERLAP was specified.
        ///
        ///  This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock
        ///  and overlapping writes from different threads may result in undefined behavior).
        ///
        ///  Returns a PxSweepBuffer pointer that will store the result of the query after execute() is completed.
        ///  This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBatchQueryExt_sweep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSweepBuffer* PxBatchQueryExt_sweep_mut(PxBatchQueryExt* self_, PxGeometry* geometry, PxTransform* pose, PxVec3* unitDir, float distance, ushort maxNbTouches, PxHitFlags hitFlags, PxQueryFilterData* filterData, PxQueryCache* cache, float inflation);

        /// <summary>
        ///  Performs an overlap test of a given geometry against objects in the scene.
        ///
        ///  Filtering: returning eBLOCK from user filter for overlap queries will cause a warning (see [`PxQueryHitType`]).
        ///
        ///  eBLOCK should not be returned from user filters for overlap(). Doing so will result in undefined behavior, and a warning will be issued.
        ///
        ///  If the PxQueryFlag::eNO_BLOCK flag is set, the eBLOCK will instead be automatically converted to an eTOUCH and the warning suppressed.
        ///
        ///  This query call writes to a list associated with the query object and is NOT thread safe (for performance reasons there is no lock
        ///  and overlapping writes from different threads may result in undefined behavior).
        ///
        ///  Returns a PxOverlapBuffer pointer that will store the result of the query after execute() is completed.
        ///  This will point either to an element of the buffer allocated on construction or to a user buffer passed to the constructor.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxBatchQueryExt_overlap_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxOverlapBuffer* PxBatchQueryExt_overlap_mut(PxBatchQueryExt* self_, PxGeometry* geometry, PxTransform* pose, ushort maxNbTouches, PxQueryFilterData* filterData, PxQueryCache* cache);

        [DllImport(__DllName, EntryPoint = "PxBatchQueryExt_execute_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxBatchQueryExt_execute_mut(PxBatchQueryExt* self_);

        /// <summary>
        ///  Create a PxBatchQueryExt without the need for pre-allocated result or touch buffers.
        ///
        ///  Returns a PxBatchQueryExt instance. A NULL pointer will be returned if the subsequent allocations fail or if any of the arguments are illegal.
        ///  In the event that a NULL pointer is returned a corresponding error will be issued to the error stream.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateBatchQueryExt", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBatchQueryExt* phys_PxCreateBatchQueryExt(PxScene* scene, PxQueryFilterCallback* queryFilterCallback, uint maxNbRaycasts, uint maxNbRaycastTouches, uint maxNbSweeps, uint maxNbSweepTouches, uint maxNbOverlaps, uint maxNbOverlapTouches);

        /// <summary>
        ///  Create a PxBatchQueryExt with user-supplied result and touch buffers.
        ///
        ///  Returns a PxBatchQueryExt instance. A NULL pointer will be returned if the subsequent allocations fail or if any of the arguments are illegal.
        ///  In the event that a NULL pointer is returned a corresponding error will be issued to the error stream.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateBatchQueryExt_1", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxBatchQueryExt* phys_PxCreateBatchQueryExt_1(PxScene* scene, PxQueryFilterCallback* queryFilterCallback, PxRaycastBuffer* raycastBuffers, uint maxNbRaycasts, PxRaycastHit* raycastTouches, uint maxNbRaycastTouches, PxSweepBuffer* sweepBuffers, uint maxNbSweeps, PxSweepHit* sweepTouches, uint maxNbSweepTouches, PxOverlapBuffer* overlapBuffers, uint maxNbOverlaps, PxOverlapHit* overlapTouches, uint maxNbOverlapTouches);

        /// <summary>
        ///  Creates an external scene query system.
        ///
        ///  An external SQ system is the part of a PxScene that deals with scene queries (SQ). This is usually taken care of
        ///  by an internal implementation inside PxScene, but it is also possible to re-route all SQ calls to an external
        ///  implementation, potentially opening the door to some customizations in behavior and features for advanced users.
        ///
        ///  The following external SQ system is an example of how an implementation would look like. It re-uses much of the
        ///  same code as the internal version, but it could be re-implemented in a completely different way to match users'
        ///  specific needs.
        ///
        ///  An external SQ system instance
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateExternalSceneQuerySystem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxSceneQuerySystem* phys_PxCreateExternalSceneQuerySystem(PxSceneQueryDesc* desc, ulong contextID);

        /// <summary>
        ///  Adds a pruner to the system.
        ///
        ///  The internal PhysX scene-query system uses two regular pruners (one for static shapes, one for dynamic shapes) and an optional
        ///  compound pruner. Our custom scene query system supports an arbitrary number of regular pruners.
        ///
        ///  This can be useful to reduce the load on each pruner, in particular during updates, when internal trees are rebuilt in the
        ///  background. On the other hand this implementation simply iterates over all created pruners to perform queries, so their cost
        ///  might increase if a large number of pruners is used.
        ///
        ///  In any case this serves as an example of how the PxSceneQuerySystem API can be used to customize scene queries.
        ///
        ///  A pruner index
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomSceneQuerySystem_addPruner_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCustomSceneQuerySystem_addPruner_mut(PxCustomSceneQuerySystem* self_, PxPruningStructureType primaryType, PxDynamicTreeSecondaryPruner secondaryType, uint preallocated);

        /// <summary>
        ///  Start custom build-steps for all pruners
        ///
        ///  This function is used in combination with customBuildstep() and finishCustomBuildstep() to let users take control
        ///  of the pruners' build-step
        ///  &amp;
        ///  commit calls - basically the pruners' update functions. These functions should be used
        ///  with the PxSceneQueryUpdateMode::eBUILD_DISABLED_COMMIT_DISABLED update mode, otherwise the build-steps will happen
        ///  automatically in fetchResults. For N pruners it can be more efficient to use these custom build-step functions to
        ///  perform the updates in parallel:
        ///
        ///  - call startCustomBuildstep() first (one synchronous call)
        ///  - for each pruner, call customBuildstep() (asynchronous calls from multiple threads)
        ///  - once it is done, call finishCustomBuildstep() to finish the update (synchronous call)
        ///
        ///  The multi-threaded update is more efficient here than what it is in PxScene, because the "flushShapes()" call is
        ///  also multi-threaded (while it is not in PxScene).
        ///
        ///  Note that users are responsible for locks here, and these calls should not overlap with other SQ calls. In particular
        ///  one should not add new objects to the SQ system or perform queries while these calls are happening.
        ///
        ///  The number of pruners in the system.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomSceneQuerySystem_startCustomBuildstep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCustomSceneQuerySystem_startCustomBuildstep_mut(PxCustomSceneQuerySystem* self_);

        /// <summary>
        ///  Perform a custom build-step for a given pruner.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomSceneQuerySystem_customBuildstep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCustomSceneQuerySystem_customBuildstep_mut(PxCustomSceneQuerySystem* self_, uint index);

        /// <summary>
        ///  Finish custom build-steps
        ///
        ///  Call this function once after all the customBuildstep() calls are done.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomSceneQuerySystem_finishCustomBuildstep_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCustomSceneQuerySystem_finishCustomBuildstep_mut(PxCustomSceneQuerySystem* self_);

        [DllImport(__DllName, EntryPoint = "PxCustomSceneQuerySystemAdapter_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxCustomSceneQuerySystemAdapter_delete(PxCustomSceneQuerySystemAdapter* self_);

        /// <summary>
        ///  Gets a pruner index for an actor/shape.
        ///
        ///  This user-defined function tells the system in which pruner a given actor/shape should go.
        ///
        ///  The returned index must be valid, i.e. it must have been previously returned to users by PxCustomSceneQuerySystem::addPruner.
        ///
        ///  A pruner index for this actor/shape.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomSceneQuerySystemAdapter_getPrunerIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint PxCustomSceneQuerySystemAdapter_getPrunerIndex(PxCustomSceneQuerySystemAdapter* self_, PxRigidActor* actor, PxShape* shape);

        /// <summary>
        ///  Pruner filtering callback.
        ///
        ///  This will be called for each query to validate whether it should process a given pruner.
        ///
        ///  True to process the pruner, false to skip it entirely
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxCustomSceneQuerySystemAdapter_processPruner", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxCustomSceneQuerySystemAdapter_processPruner(PxCustomSceneQuerySystemAdapter* self_, uint prunerIndex, PxQueryThreadContext* context, PxQueryFilterData* filterData, PxQueryFilterCallback* filterCall);

        /// <summary>
        ///  Creates a custom scene query system.
        ///
        ///  This is similar to PxCreateExternalSceneQuerySystem, except this function creates a PxCustomSceneQuerySystem object.
        ///  It can be plugged to PxScene the same way, via PxSceneDesc::sceneQuerySystem.
        ///
        ///  A custom SQ system instance
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateCustomSceneQuerySystem", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxCustomSceneQuerySystem* phys_PxCreateCustomSceneQuerySystem(PxSceneQueryUpdateMode sceneQueryUpdateMode, ulong contextID, PxCustomSceneQuerySystemAdapter* adapter, [MarshalAs(UnmanagedType.U1)] bool usesTreeOfPruners);

        /// <summary>
        ///  Computes closest polygon of the convex hull geometry for a given impact point
        ///  and impact direction. When doing sweeps against a scene, one might want to delay
        ///  the rather expensive computation of the hit face index for convexes until it is clear
        ///  the information is really needed and then use this method to get the corresponding
        ///  face index.
        ///
        ///  Closest face index of the convex geometry.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxFindFaceIndex", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern uint phys_PxFindFaceIndex(PxConvexMeshGeometry* convexGeom, PxTransform* geomPose, PxVec3* impactPos, PxVec3* unitDir);

        /// <summary>
        ///  Sets the sampling radius
        ///
        ///  Returns true if the sampling was successful and false if there was a problem. Usually an internal overflow is the problem for very big meshes or very small sampling radii.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPoissonSampler_setSamplingRadius_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxPoissonSampler_setSamplingRadius_mut(PxPoissonSampler* self_, float samplingRadius);

        /// <summary>
        ///  Adds new Poisson Samples inside the sphere specified
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPoissonSampler_addSamplesInSphere_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPoissonSampler_addSamplesInSphere_mut(PxPoissonSampler* self_, PxVec3* sphereCenter, float sphereRadius, [MarshalAs(UnmanagedType.U1)] bool createVolumeSamples);

        /// <summary>
        ///  Adds new Poisson Samples inside the box specified
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPoissonSampler_addSamplesInBox_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPoissonSampler_addSamplesInBox_mut(PxPoissonSampler* self_, PxBounds3* axisAlignedBox, PxQuat* boxOrientation, [MarshalAs(UnmanagedType.U1)] bool createVolumeSamples);

        [DllImport(__DllName, EntryPoint = "PxPoissonSampler_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPoissonSampler_delete(PxPoissonSampler* self_);

        /// <summary>
        ///  Creates a shape sampler
        ///
        ///  Returns the sampler
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateShapeSampler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPoissonSampler* phys_PxCreateShapeSampler(PxGeometry* geometry, PxTransform* transform, PxBounds3* worldBounds, float initialSamplingRadius, int numSampleAttemptsAroundPoint);

        /// <summary>
        ///  Checks whether a point is inside the triangle mesh
        ///
        ///  Returns true if the point is inside the triangle mesh
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTriangleMeshPoissonSampler_isPointInTriangleMesh_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxTriangleMeshPoissonSampler_isPointInTriangleMesh_mut(PxTriangleMeshPoissonSampler* self_, PxVec3* p);

        [DllImport(__DllName, EntryPoint = "PxTriangleMeshPoissonSampler_delete", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxTriangleMeshPoissonSampler_delete(PxTriangleMeshPoissonSampler* self_);

        /// <summary>
        ///  Creates a triangle mesh sampler
        ///
        ///  Returns the sampler
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreateTriangleMeshSampler", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxTriangleMeshPoissonSampler* phys_PxCreateTriangleMeshSampler(uint* triangles, uint numTriangles, PxVec3* vertices, uint numVertices, float initialSamplingRadius, int numSampleAttemptsAroundPoint);

        /// <summary>
        ///  Returns the index of the tetrahedron that contains a point
        ///
        ///  The index of the tetrahedon containing the point, -1 if not tetrahedron contains the opoint
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMeshExt_findTetrahedronContainingPoint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int PxTetrahedronMeshExt_findTetrahedronContainingPoint(PxTetrahedronMesh* mesh, PxVec3* point, PxVec4* bary, float tolerance);

        /// <summary>
        ///  Returns the index of the tetrahedron closest to a point
        ///
        ///  The index of the tetrahedon closest to the point
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxTetrahedronMeshExt_findTetrahedronClosestToPoint", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern int PxTetrahedronMeshExt_findTetrahedronClosestToPoint(PxTetrahedronMesh* mesh, PxVec3* point, PxVec4* bary);

        /// <summary>
        ///  Initialize the PhysXExtensions library.
        ///
        ///  This should be called before calling any functions or methods in extensions which may require allocation.
        ///
        ///  This function does not need to be called before creating a PxDefaultAllocator object.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxInitExtensions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool phys_PxInitExtensions(PxPhysics* physics, PxPvd* pvd);

        /// <summary>
        ///  Shut down the PhysXExtensions library.
        ///
        ///  This function should be called to cleanly shut down the PhysXExtensions library before application exit.
        ///
        ///  This function is required to be called to release foundation usage.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCloseExtensions", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void phys_PxCloseExtensions();

        [DllImport(__DllName, EntryPoint = "PxRepXObject_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRepXObject PxRepXObject_new(byte* inTypeName, void* inSerializable, ulong inId);

        [DllImport(__DllName, EntryPoint = "PxRepXObject_isValid", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxRepXObject_isValid(PxRepXObject* self_);

        [DllImport(__DllName, EntryPoint = "PxRepXInstantiationArgs_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRepXInstantiationArgs PxRepXInstantiationArgs_new(PxPhysics* inPhysics, PxCooking* inCooking, PxStringTable* inStringTable);

        /// <summary>
        ///  The type this Serializer is meant to operate on.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRepXSerializer_getTypeName_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* PxRepXSerializer_getTypeName_mut(PxRepXSerializer* self_);

        /// <summary>
        ///  Convert from a RepX object to a key-value pair hierarchy
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRepXSerializer_objectToFile_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxRepXSerializer_objectToFile_mut(PxRepXSerializer* self_, PxRepXObject* inLiveObject, PxCollection* inCollection, XmlWriter* inWriter, MemoryBuffer* inTempBuffer, PxRepXInstantiationArgs* inArgs);

        /// <summary>
        ///  Convert from a descriptor to a live object.  Must be an object of this Serializer type.
        ///
        ///  The new live object.  It can be an invalid object if the instantiation cannot take place.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxRepXSerializer_fileToObject_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxRepXObject PxRepXSerializer_fileToObject_mut(PxRepXSerializer* self_, XmlReader* inReader, XmlMemoryAllocator* inAllocator, PxRepXInstantiationArgs* inArgs, PxCollection* inCollection);

        /// <summary>
        ///  Connects the SDK to the PhysX Visual Debugger application.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvd_connect_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxPvd_connect_mut(PxPvd* self_, PxPvdTransport* transport, PxPvdInstrumentationFlags flags);

        /// <summary>
        ///  Disconnects the SDK from the PhysX Visual Debugger application.
        ///  If we are still connected, this will kill the entire debugger connection.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvd_disconnect_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvd_disconnect_mut(PxPvd* self_);

        /// <summary>
        ///  Return if connection to PVD is created.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvd_isConnected_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxPvd_isConnected_mut(PxPvd* self_, [MarshalAs(UnmanagedType.U1)] bool useCachedStatus);

        /// <summary>
        ///  returns the PVD data transport
        ///  returns NULL if no transport is present.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvd_getTransport_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPvdTransport* PxPvd_getTransport_mut(PxPvd* self_);

        /// <summary>
        ///  Retrieves the PVD flags. See PxPvdInstrumentationFlags.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvd_getInstrumentationFlags_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPvdInstrumentationFlags PxPvd_getInstrumentationFlags_mut(PxPvd* self_);

        /// <summary>
        ///  Releases the pvd instance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvd_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvd_release_mut(PxPvd* self_);

        /// <summary>
        ///  Create a pvd instance.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxCreatePvd", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPvd* phys_PxCreatePvd(PxFoundation* foundation);

        /// <summary>
        ///  Connects to the Visual Debugger application.
        ///  return True if success
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdTransport_connect_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxPvdTransport_connect_mut(PxPvdTransport* self_);

        /// <summary>
        ///  Disconnects from the Visual Debugger application.
        ///  If we are still connected, this will kill the entire debugger connection.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdTransport_disconnect_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdTransport_disconnect_mut(PxPvdTransport* self_);

        /// <summary>
        ///  Return if connection to PVD is created.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdTransport_isConnected_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxPvdTransport_isConnected_mut(PxPvdTransport* self_);

        /// <summary>
        ///  write bytes to the other endpoint of the connection. should lock before witre. If an error occurs
        ///  this connection will assume to be dead.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdTransport_write_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool PxPvdTransport_write_mut(PxPvdTransport* self_, byte* inBytes, uint inLength);

        [DllImport(__DllName, EntryPoint = "PxPvdTransport_lock_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPvdTransport* PxPvdTransport_lock_mut(PxPvdTransport* self_);

        [DllImport(__DllName, EntryPoint = "PxPvdTransport_unlock_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdTransport_unlock_mut(PxPvdTransport* self_);

        /// <summary>
        ///  send any data and block until we know it is at least on the wire.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdTransport_flush_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdTransport_flush_mut(PxPvdTransport* self_);

        /// <summary>
        ///  Return size of written data.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "PxPvdTransport_getWrittenDataSize_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ulong PxPvdTransport_getWrittenDataSize_mut(PxPvdTransport* self_);

        [DllImport(__DllName, EntryPoint = "PxPvdTransport_release_mut", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void PxPvdTransport_release_mut(PxPvdTransport* self_);

        /// <summary>
        ///  Create a default socket transport.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxDefaultPvdSocketTransportCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPvdTransport* phys_PxDefaultPvdSocketTransportCreate(byte* host, int port, uint timeoutInMilliseconds);

        /// <summary>
        ///  Create a default file transport.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "phys_PxDefaultPvdFileTransportCreate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern PxPvdTransport* phys_PxDefaultPvdFileTransportCreate(byte* name);




    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct SimulationEventCallbackInfo
    {
        public delegate* unmanaged[Cdecl]<void*, PxContactPairHeader*, PxContactPair*, uint, void> collision_callback;
        public void* collision_user_data;
        public delegate* unmanaged[Cdecl]<void*, PxTriggerPair*, uint, void> trigger_callback;
        public void* trigger_user_data;
        public delegate* unmanaged[Cdecl]<void*, PxConstraintInfo*, uint, void> constraint_break_callback;
        public void* constraint_break_user_data;
        public delegate* unmanaged[Cdecl]<void*, PxActor**, uint, bool, void> wake_sleep_callback;
        public void* wake_sleep_user_data;
        public delegate* unmanaged[Cdecl]<void*, PxRigidBody**, PxTransform*, uint, void> advance_callback;
        public void* advance_user_data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct FilterShaderCallbackInfo
    {
        public uint attributes0;
        public uint attributes1;
        public PxFilterData filterData0;
        public PxFilterData filterData1;
        public PxPairFlags* pairFlags;
        public void* constantBlock;
        public uint constantBlockSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxAllocatorCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxAssertHandler
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxFoundation
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxVirtualAllocatorCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal unsafe partial struct PxTempAllocatorChunk
    {
        [FieldOffset(0)]
        public PxTempAllocatorChunk* mNext;
        [FieldOffset(0)]
        public uint mIndex;
        [FieldOffset(0)]
        public fixed byte mPad[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxErrorCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxAllocationListener
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxInputStream
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxInputData
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxOutputStream
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxProfilerCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRunnable
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRenderBuffer
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxProcessPxBaseCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSerializationContext
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSerializationRegistry
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCollection
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxStringTable
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSerializer
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxInsertionCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTaskManager
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCpuDispatcher
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBVHRaycastCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBVHOverlapCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBVHTraversalCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCustomGeometryCallbacks
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal unsafe partial struct Px1DConstraintMods
    {
        [FieldOffset(0)]
        public PxSpringModifiers spring;
        [FieldOffset(0)]
        public PxRestitutionModifiers bounce;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConstraintVisualizer
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConstraintConnector
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConstraintAllocator
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactModifyCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCCDContactModifyCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDeletionListener
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSimulationFilterCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxLockedData
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxOmniPvd
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPhysics
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxQueryFilterCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSceneQuerySystemBase
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSceneSQSystem
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSceneQuerySystem
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhaseRegions
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhase
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxAABBManager
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPvdSceneClient
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhaseCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSimulationEventCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxObstacleContext
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxUserControllerHitReport
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerFilterCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxController
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBoxController
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCapsuleController
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerBehaviorCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerManager
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDefaultAllocator
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDefaultErrorCallback
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDefaultCpuDispatcher
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBatchQueryExt
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCustomSceneQuerySystem
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCustomSceneQuerySystemAdapter
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCooking
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct XmlMemoryAllocator
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct XmlWriter
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct XmlReader
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct MemoryBuffer
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRepXSerializer
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPvd
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPvdTransport
    {
        public void* vtable_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxAllocator
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRawAllocator
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxVirtualAllocator
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTempAllocator
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBitAndByte
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBitMap
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxVec3
    {
        public float x;
        public float y;
        public float z;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxVec3Padded
    {
        public float x;
        public float y;
        public float z;
        public uint padding;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxQuat
    {
        public float x;
        public float y;
        public float z;
        public float w;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTransform
    {
        public PxQuat q;
        public PxVec3 p;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTransformPadded
    {
        public PxTransform transform;
        public uint padding;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMat33
    {
        public PxVec3 column0;
        public PxVec3 column1;
        public PxVec3 column2;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBounds3
    {
        public PxVec3 minimum;
        public PxVec3 maximum;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadcastingAllocator
    {
        public fixed byte structgen_pad0[176];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadcastingErrorCallback
    {
        public fixed byte structgen_pad0[160];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxVec4
    {
        public float x;
        public float y;
        public float z;
        public float w;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMat44
    {
        public PxVec4 column0;
        public PxVec4 column1;
        public PxVec4 column2;
        public PxVec4 column3;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPlane
    {
        public PxVec3 n;
        public float d;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMutexImpl
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxReadWriteLock
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxProfileScoped
    {
        public PxProfilerCallback* mCallback;
        public byte* mEventName;
        public void* mProfilerData;
        public ulong mContextId;
        [MarshalAs(UnmanagedType.U1)] public bool mDetached;
        public fixed byte structgen_pad0[7];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSListEntry
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSListImpl
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSyncImpl
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCounterFrequencyToTensOfNanos
    {
        public ulong mNumerator;
        public ulong mDenominator;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTime
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxVec2
    {
        public float x;
        public float y;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxStridedData
    {
        public uint stride;
        public fixed byte structgen_pad0[4];
        public void* data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBoundedData
    {
        public uint stride;
        public fixed byte structgen_pad0[4];
        public void* data;
        public uint count;
        public fixed byte structgen_pad1[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDebugPoint
    {
        public PxVec3 pos;
        public uint color;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDebugLine
    {
        public PxVec3 pos0;
        public uint color0;
        public PxVec3 pos1;
        public uint color1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDebugTriangle
    {
        public PxVec3 pos0;
        public uint color0;
        public PxVec3 pos1;
        public uint color1;
        public PxVec3 pos2;
        public uint color2;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDebugText
    {
        public PxVec3 position;
        public float size;
        public uint color;
        public fixed byte structgen_pad0[4];
        public byte* @string;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDeserializationContext
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBase
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRefCounted
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTolerancesScale
    {
        public float length;
        public float speed;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBaseTask
    {
        public fixed byte structgen_pad0[24];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTask
    {
        public fixed byte structgen_pad0[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxLightCpuTask
    {
        public fixed byte structgen_pad0[40];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBoxGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public PxVec3 halfExtents;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBVH
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCapsuleGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public float radius;
        public float halfHeight;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxHullPolygon
    {
        public fixed float mPlane[4];
        public ushort mNbVerts;
        public ushort mIndexBase;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConvexMesh
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMeshScale
    {
        public PxVec3 scale;
        public PxQuat rotation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConvexMeshGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public PxMeshScale scale;
        public fixed byte structgen_pad1[4];
        public PxConvexMesh* convexMesh;
        public PxConvexMeshGeometryFlags meshFlags;
        public fixed byte structgen_pad2[7];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSphereGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public float radius;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPlaneGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTriangleMeshGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public PxMeshScale scale;
        public PxMeshGeometryFlags meshFlags;
        public fixed byte structgen_pad1[3];
        public PxTriangleMesh* triangleMesh;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxHeightFieldGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public PxHeightField* heightField;
        public float heightScale;
        public float rowScale;
        public float columnScale;
        public PxMeshGeometryFlags heightFieldFlags;
        public fixed byte structgen_pad1[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxParticleSystemGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public PxParticleSolverType mSolverType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxHairSystemGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTetrahedronMeshGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public PxTetrahedronMesh* tetrahedronMesh;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxQueryHit
    {
        public uint faceIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxLocationHit
    {
        public uint faceIndex;
        public PxHitFlags flags;
        public fixed byte structgen_pad0[2];
        public PxVec3 position;
        public PxVec3 normal;
        public float distance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGeomRaycastHit
    {
        public uint faceIndex;
        public PxHitFlags flags;
        public fixed byte structgen_pad0[2];
        public PxVec3 position;
        public PxVec3 normal;
        public float distance;
        public float u;
        public float v;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGeomOverlapHit
    {
        public uint faceIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGeomSweepHit
    {
        public uint faceIndex;
        public PxHitFlags flags;
        public fixed byte structgen_pad0[2];
        public PxVec3 position;
        public PxVec3 normal;
        public float distance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGeomIndexPair
    {
        public uint id0;
        public uint id1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxQueryThreadContext
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCustomGeometryType
    {
        public fixed byte structgen_pad0[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCustomGeometry
    {
        public fixed byte structgen_pad0[4];
        public float mTypePadding;
        public PxCustomGeometryCallbacks* callbacks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGeometryHolder
    {
        public fixed byte structgen_pad0[56];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxHeightFieldSample
    {
        public short height;
        public PxBitAndByte materialIndex0;
        public PxBitAndByte materialIndex1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxHeightField
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxHeightFieldDesc
    {
        public uint nbRows;
        public uint nbColumns;
        public PxHeightFieldFormat format;
        public fixed byte structgen_pad0[4];
        public PxStridedData samples;
        public float convexEdgeThreshold;
        public PxHeightFieldFlags flags;
        public fixed byte structgen_pad1[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSimpleTriangleMesh
    {
        public PxBoundedData points;
        public PxBoundedData triangles;
        public PxMeshFlags flags;
        public fixed byte structgen_pad0[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTriangle
    {
        public fixed byte/* PxVec3, this length is invalid so must keep pointer and can't edit from C# */ verts[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTrianglePadded
    {
        public fixed byte/* PxVec3, this length is invalid so must keep pointer and can't edit from C# */ verts[3];
        public uint padding;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTriangleMesh
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTetrahedron
    {
        public fixed byte/* PxVec3, this length is invalid so must keep pointer and can't edit from C# */ verts[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSoftBodyAuxData
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTetrahedronMesh
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSoftBodyMesh
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCollisionMeshMappingData
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSoftBodyCollisionData
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTetrahedronMeshData
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSoftBodySimulationData
    {
        public fixed byte structgen_pad0[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCollisionTetrahedronMeshData
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSimulationTetrahedronMeshData
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxActor
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxAggregate
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSpringModifiers
    {
        public float stiffness;
        public float damping;
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRestitutionModifiers
    {
        public float restitution;
        public float velocityThreshold;
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct Px1DConstraint
    {
        public PxVec3 linear0;
        public float geometricError;
        public PxVec3 angular0;
        public float velocityTarget;
        public PxVec3 linear1;
        public float minImpulse;
        public PxVec3 angular1;
        public float maxImpulse;
        public Px1DConstraintMods mods;
        public float forInternalUse;
        public ushort flags;
        public ushort solveHint;
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConstraintInvMassScale
    {
        public float linear0;
        public float angular0;
        public float linear1;
        public float angular1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSolverBody
    {
        public PxVec3 linearVelocity;
        public ushort maxSolverNormalProgress;
        public ushort maxSolverFrictionProgress;
        public PxVec3 angularState;
        public uint solverProgress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSolverBodyData
    {
        public PxVec3 linearVelocity;
        public float invMass;
        public PxVec3 angularVelocity;
        public float reportThreshold;
        public PxMat33 sqrtInvInertia;
        public float penBiasClamp;
        public uint nodeIndex;
        public float maxContactImpulse;
        public PxTransform body2World;
        public ushort pad;
        public fixed byte structgen_pad0[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSolverConstraintDesc
    {
        public fixed byte structgen_pad0[16];
        public uint bodyADataIndex;
        public uint bodyBDataIndex;
        public uint linkIndexA;
        public uint linkIndexB;
        public byte* constraint;
        public void* writeBack;
        public ushort progressA;
        public ushort progressB;
        public ushort constraintLengthOver16;
        public fixed byte padding[10];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSolverConstraintPrepDesc
    {
        public PxConstraintInvMassScale invMassScales;
        public PxSolverConstraintDesc* desc;
        public PxSolverBody* body0;
        public PxSolverBody* body1;
        public PxSolverBodyData* data0;
        public PxSolverBodyData* data1;
        public PxTransform bodyFrame0;
        public PxTransform bodyFrame1;
        public BodyState bodyState0;
        public BodyState bodyState1;
        public fixed byte structgen_pad0[8];
        public Px1DConstraint* rows;
        public uint numRows;
        public float linBreakForce;
        public float angBreakForce;
        public float minResponseThreshold;
        public void* writeback;
        [MarshalAs(UnmanagedType.U1)] public bool disablePreprocessing;
        [MarshalAs(UnmanagedType.U1)] public bool improvedSlerp;
        [MarshalAs(UnmanagedType.U1)] public bool driveLimitsAreForces;
        [MarshalAs(UnmanagedType.U1)] public bool extendedLimits;
        [MarshalAs(UnmanagedType.U1)] public bool disableConstraint;
        public fixed byte structgen_pad1[3];
        public PxVec3Padded body0WorldOffset;
        public fixed byte structgen_pad2[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationLimit
    {
        public float low;
        public float high;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationDrive
    {
        public float stiffness;
        public float damping;
        public float maxForce;
        public PxArticulationDriveType driveType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTGSSolverBodyVel
    {
        public PxVec3 linearVelocity;
        public ushort nbStaticInteractions;
        public ushort maxDynamicPartition;
        public PxVec3 angularVelocity;
        public uint partitionMask;
        public PxVec3 deltaAngDt;
        public float maxAngVel;
        public PxVec3 deltaLinDt;
        public ushort lockFlags;
        [MarshalAs(UnmanagedType.U1)] public bool isKinematic;
        public byte pad;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTGSSolverBodyTxInertia
    {
        public PxTransform deltaBody2World;
        public PxMat33 sqrtInvInertia;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTGSSolverBodyData
    {
        public PxVec3 originalLinearVelocity;
        public float maxContactImpulse;
        public PxVec3 originalAngularVelocity;
        public float penBiasClamp;
        public float invMass;
        public uint nodeIndex;
        public float reportThreshold;
        public uint pad;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTGSSolverConstraintPrepDesc
    {
        public PxConstraintInvMassScale invMassScales;
        public PxSolverConstraintDesc* desc;
        public PxTGSSolverBodyVel* body0;
        public PxTGSSolverBodyVel* body1;
        public PxTGSSolverBodyTxInertia* body0TxI;
        public PxTGSSolverBodyTxInertia* body1TxI;
        public PxTGSSolverBodyData* bodyData0;
        public PxTGSSolverBodyData* bodyData1;
        public PxTransform bodyFrame0;
        public PxTransform bodyFrame1;
        public BodyState bodyState0;
        public BodyState bodyState1;
        public fixed byte structgen_pad0[8];
        public Px1DConstraint* rows;
        public uint numRows;
        public float linBreakForce;
        public float angBreakForce;
        public float minResponseThreshold;
        public void* writeback;
        [MarshalAs(UnmanagedType.U1)] public bool disablePreprocessing;
        [MarshalAs(UnmanagedType.U1)] public bool improvedSlerp;
        [MarshalAs(UnmanagedType.U1)] public bool driveLimitsAreForces;
        [MarshalAs(UnmanagedType.U1)] public bool extendedLimits;
        [MarshalAs(UnmanagedType.U1)] public bool disableConstraint;
        public fixed byte structgen_pad1[3];
        public PxVec3Padded body0WorldOffset;
        public PxVec3Padded cA2w;
        public PxVec3Padded cB2w;
        public fixed byte structgen_pad2[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationTendonLimit
    {
        public float lowLimit;
        public float highLimit;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationAttachment
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationTendonJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationTendon
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationSpatialTendon
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationFixedTendon
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSpatialForce
    {
        public PxVec3 force;
        public float pad0;
        public PxVec3 torque;
        public float pad1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSpatialVelocity
    {
        public PxVec3 linear;
        public float pad0;
        public PxVec3 angular;
        public float pad1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationRootLinkData
    {
        public PxTransform transform;
        public PxVec3 worldLinVel;
        public PxVec3 worldAngVel;
        public PxVec3 worldLinAccel;
        public PxVec3 worldAngAccel;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationCache
    {
        public PxSpatialForce* externalForces;
        public float* denseJacobian;
        public float* massMatrix;
        public float* jointVelocity;
        public float* jointAcceleration;
        public float* jointPosition;
        public float* jointForce;
        public float* jointSolverForces;
        public PxSpatialVelocity* linkVelocity;
        public PxSpatialVelocity* linkAcceleration;
        public PxArticulationRootLinkData* rootLinkData;
        public PxSpatialForce* sensorForces;
        public float* coefficientMatrix;
        public float* lambda;
        public void* scratchMemory;
        public void* scratchAllocator;
        public uint version;
        public fixed byte structgen_pad0[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationSensor
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationReducedCoordinate
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationJointReducedCoordinate
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxShape
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRigidActor
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxNodeIndex
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRigidBody
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxArticulationLink
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConeLimitedConstraint
    {
        public PxVec3 mAxis;
        public float mAngle;
        public float mLowLimit;
        public float mHighLimit;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConstraintShaderTable
    {
        public void* solverPrep;
        public fixed byte structgen_pad0[8];
        public void* visualize;
        public PxConstraintFlag flag;
        public fixed byte structgen_pad1[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConstraint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMassModificationProps
    {
        public float mInvMassScale0;
        public float mInvInertiaScale0;
        public float mInvMassScale1;
        public float mInvInertiaScale1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPatch
    {
        public PxMassModificationProps mMassModification;
        public PxVec3 normal;
        public float restitution;
        public float dynamicFriction;
        public float staticFriction;
        public float damping;
        public ushort startContactIndex;
        public byte nbContacts;
        public byte materialFlags;
        public ushort internalFlags;
        public ushort materialIndex0;
        public ushort materialIndex1;
        public fixed ushort pad[5];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContact
    {
        public PxVec3 contact;
        public float separation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactStreamIterator
    {
        public PxVec3 zero;
        public fixed byte structgen_pad0[4];
        public PxContactPatch* patch;
        public PxContact* contact;
        public uint* faceIndice;
        public uint totalPatches;
        public uint totalContacts;
        public uint nextContactIndex;
        public uint nextPatchIndex;
        public uint contactPatchHeaderSize;
        public uint contactPointSize;
        public StreamFormat mStreamFormat;
        public uint forceNoResponse;
        [MarshalAs(UnmanagedType.U1)] public bool pointStepped;
        public fixed byte structgen_pad1[3];
        public uint hasFaceIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactSet
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactModifyPair
    {
        public fixed byte/* PxRigidActor, this length is invalid so must keep pointer and can't edit from C# */ actor[2];
        public fixed byte/* PxShape, this length is invalid so must keep pointer and can't edit from C# */ shape[2];
        public fixed byte/* PxTransform, this length is invalid so must keep pointer and can't edit from C# */ transform[2];
        public PxContactSet contacts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBaseMaterial
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxFEMMaterial
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxFilterData
    {
        public uint word0;
        public uint word1;
        public uint word2;
        public uint word3;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMaterial
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGpuParticleBufferIndexPair
    {
        public uint systemIndex;
        public uint bufferIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDiffuseParticleParams
    {
        public float threshold;
        public float lifetime;
        public float airDrag;
        public float bubbleDrag;
        public float buoyancy;
        public float kineticEnergyWeight;
        public float pressureWeight;
        public float divergenceWeight;
        public float collisionDecay;
        [MarshalAs(UnmanagedType.U1)] public bool useAccurateVelocity;
        public fixed byte structgen_pad0[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxParticleMaterial
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxActorShape
    {
        public PxRigidActor* actor;
        public PxShape* shape;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRaycastHit
    {
        public uint faceIndex;
        public PxHitFlags flags;
        public fixed byte structgen_pad0[2];
        public PxVec3 position;
        public PxVec3 normal;
        public float distance;
        public float u;
        public float v;
        public fixed byte structgen_pad1[4];
        public PxRigidActor* actor;
        public PxShape* shape;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxOverlapHit
    {
        public uint faceIndex;
        public fixed byte structgen_pad0[4];
        public PxRigidActor* actor;
        public PxShape* shape;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSweepHit
    {
        public uint faceIndex;
        public PxHitFlags flags;
        public fixed byte structgen_pad0[2];
        public PxVec3 position;
        public PxVec3 normal;
        public float distance;
        public fixed byte structgen_pad1[4];
        public PxRigidActor* actor;
        public PxShape* shape;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRaycastCallback
    {
        public fixed byte structgen_pad0[8];
        public PxRaycastHit block;
        [MarshalAs(UnmanagedType.U1)] public bool hasBlock;
        public fixed byte structgen_pad1[7];
        public PxRaycastHit* touches;
        public uint maxNbTouches;
        public uint nbTouches;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxOverlapCallback
    {
        public fixed byte structgen_pad0[8];
        public PxOverlapHit block;
        [MarshalAs(UnmanagedType.U1)] public bool hasBlock;
        public fixed byte structgen_pad1[7];
        public PxOverlapHit* touches;
        public uint maxNbTouches;
        public uint nbTouches;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSweepCallback
    {
        public fixed byte structgen_pad0[8];
        public PxSweepHit block;
        [MarshalAs(UnmanagedType.U1)] public bool hasBlock;
        public fixed byte structgen_pad1[7];
        public PxSweepHit* touches;
        public uint maxNbTouches;
        public uint nbTouches;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRaycastBuffer
    {
        public fixed byte structgen_pad0[8];
        public PxRaycastHit block;
        [MarshalAs(UnmanagedType.U1)] public bool hasBlock;
        public fixed byte structgen_pad1[7];
        public PxRaycastHit* touches;
        public uint maxNbTouches;
        public uint nbTouches;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxOverlapBuffer
    {
        public fixed byte structgen_pad0[8];
        public PxOverlapHit block;
        [MarshalAs(UnmanagedType.U1)] public bool hasBlock;
        public fixed byte structgen_pad1[7];
        public PxOverlapHit* touches;
        public uint maxNbTouches;
        public uint nbTouches;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSweepBuffer
    {
        public fixed byte structgen_pad0[8];
        public PxSweepHit block;
        [MarshalAs(UnmanagedType.U1)] public bool hasBlock;
        public fixed byte structgen_pad1[7];
        public PxSweepHit* touches;
        public uint maxNbTouches;
        public uint nbTouches;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxQueryCache
    {
        public PxShape* shape;
        public PxRigidActor* actor;
        public uint faceIndex;
        public fixed byte structgen_pad0[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxQueryFilterData
    {
        public PxFilterData data;
        public PxQueryFlags flags;
        public fixed byte structgen_pad0[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRigidDynamic
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRigidStatic
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSceneQueryDesc
    {
        public PxPruningStructureType staticStructure;
        public PxPruningStructureType dynamicStructure;
        public uint dynamicTreeRebuildRateHint;
        public PxDynamicTreeSecondaryPruner dynamicTreeSecondaryPruner;
        public PxBVHBuildStrategy staticBVHBuildStrategy;
        public PxBVHBuildStrategy dynamicBVHBuildStrategy;
        public uint staticNbObjectsPerNode;
        public uint dynamicNbObjectsPerNode;
        public PxSceneQueryUpdateMode sceneQueryUpdateMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhaseRegion
    {
        public PxBounds3 mBounds;
        public void* mUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhaseRegionInfo
    {
        public PxBroadPhaseRegion mRegion;
        public uint mNbStaticObjects;
        public uint mNbDynamicObjects;
        [MarshalAs(UnmanagedType.U1)] public bool mActive;
        [MarshalAs(UnmanagedType.U1)] public bool mOverlap;
        public fixed byte structgen_pad0[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhaseCaps
    {
        public uint mMaxNbRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhaseDesc
    {
        public PxBroadPhaseType mType;
        public fixed byte structgen_pad0[4];
        public ulong mContextID;
        public fixed byte structgen_pad1[8];
        public uint mFoundLostPairsCapacity;
        [MarshalAs(UnmanagedType.U1)] public bool mDiscardStaticVsKinematic;
        [MarshalAs(UnmanagedType.U1)] public bool mDiscardKinematicVsKinematic;
        public fixed byte structgen_pad2[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhaseUpdateData
    {
        public uint* mCreated;
        public uint mNbCreated;
        public fixed byte structgen_pad0[4];
        public uint* mUpdated;
        public uint mNbUpdated;
        public fixed byte structgen_pad1[4];
        public uint* mRemoved;
        public uint mNbRemoved;
        public fixed byte structgen_pad2[4];
        public PxBounds3* mBounds;
        public uint* mGroups;
        public float* mDistances;
        public uint mCapacity;
        public fixed byte structgen_pad3[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhasePair
    {
        public uint mID0;
        public uint mID1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBroadPhaseResults
    {
        public uint mNbCreatedPairs;
        public fixed byte structgen_pad0[4];
        public PxBroadPhasePair* mCreatedPairs;
        public uint mNbDeletedPairs;
        public fixed byte structgen_pad1[4];
        public PxBroadPhasePair* mDeletedPairs;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSceneLimits
    {
        public uint maxNbActors;
        public uint maxNbBodies;
        public uint maxNbStaticShapes;
        public uint maxNbDynamicShapes;
        public uint maxNbAggregates;
        public uint maxNbConstraints;
        public uint maxNbRegions;
        public uint maxNbBroadPhaseOverlaps;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxgDynamicsMemoryConfig
    {
        public uint tempBufferCapacity;
        public uint maxRigidContactCount;
        public uint maxRigidPatchCount;
        public uint heapCapacity;
        public uint foundLostPairsCapacity;
        public uint foundLostAggregatePairsCapacity;
        public uint totalAggregatePairsCapacity;
        public uint maxSoftBodyContacts;
        public uint maxFemClothContacts;
        public uint maxParticleContacts;
        public uint collisionStackSize;
        public uint maxHairContacts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSceneDesc
    {
        public PxPruningStructureType staticStructure;
        public PxPruningStructureType dynamicStructure;
        public uint dynamicTreeRebuildRateHint;
        public PxDynamicTreeSecondaryPruner dynamicTreeSecondaryPruner;
        public PxBVHBuildStrategy staticBVHBuildStrategy;
        public PxBVHBuildStrategy dynamicBVHBuildStrategy;
        public uint staticNbObjectsPerNode;
        public uint dynamicNbObjectsPerNode;
        public PxSceneQueryUpdateMode sceneQueryUpdateMode;
        public PxVec3 gravity;
        public PxSimulationEventCallback* simulationEventCallback;
        public PxContactModifyCallback* contactModifyCallback;
        public PxCCDContactModifyCallback* ccdContactModifyCallback;
        public void* filterShaderData;
        public uint filterShaderDataSize;
        public fixed byte structgen_pad0[4];
        public void* filterShader;
        public PxSimulationFilterCallback* filterCallback;
        public PxPairFilteringMode kineKineFilteringMode;
        public PxPairFilteringMode staticKineFilteringMode;
        public PxBroadPhaseType broadPhaseType;
        public fixed byte structgen_pad1[4];
        public PxBroadPhaseCallback* broadPhaseCallback;
        public PxSceneLimits limits;
        public PxFrictionType frictionType;
        public PxSolverType solverType;
        public float bounceThresholdVelocity;
        public float frictionOffsetThreshold;
        public float frictionCorrelationDistance;
        public PxSceneFlags flags;
        public PxCpuDispatcher* cpuDispatcher;
        public fixed byte structgen_pad2[8];
        public void* userData;
        public uint solverBatchSize;
        public uint solverArticulationBatchSize;
        public uint nbContactDataBlocks;
        public uint maxNbContactDataBlocks;
        public float maxBiasCoefficient;
        public uint contactReportStreamBufferSize;
        public uint ccdMaxPasses;
        public float ccdThreshold;
        public float ccdMaxSeparation;
        public float wakeCounterResetValue;
        public PxBounds3 sanityBounds;
        public PxgDynamicsMemoryConfig gpuDynamicsConfig;
        public uint gpuMaxNumPartitions;
        public uint gpuMaxNumStaticPartitions;
        public uint gpuComputeVersion;
        public uint contactPairSlabSize;
        public PxSceneQuerySystem* sceneQuerySystem;
        public fixed byte structgen_pad3[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSimulationStatistics
    {
        public uint nbActiveConstraints;
        public uint nbActiveDynamicBodies;
        public uint nbActiveKinematicBodies;
        public uint nbStaticBodies;
        public uint nbDynamicBodies;
        public uint nbKinematicBodies;
        public fixed uint nbShapes[11];
        public uint nbAggregates;
        public uint nbArticulations;
        public uint nbAxisSolverConstraints;
        public uint compressedContactSize;
        public uint requiredContactConstraintMemory;
        public uint peakConstraintMemory;
        public uint nbDiscreteContactPairsTotal;
        public uint nbDiscreteContactPairsWithCacheHits;
        public uint nbDiscreteContactPairsWithContacts;
        public uint nbNewPairs;
        public uint nbLostPairs;
        public uint nbNewTouches;
        public uint nbLostTouches;
        public uint nbPartitions;
        public fixed byte structgen_pad0[4];
        public ulong gpuMemParticles;
        public ulong gpuMemSoftBodies;
        public ulong gpuMemFEMCloths;
        public ulong gpuMemHairSystems;
        public ulong gpuMemHeap;
        public ulong gpuMemHeapBroadPhase;
        public ulong gpuMemHeapNarrowPhase;
        public ulong gpuMemHeapSolver;
        public ulong gpuMemHeapArticulation;
        public ulong gpuMemHeapSimulation;
        public ulong gpuMemHeapSimulationArticulation;
        public ulong gpuMemHeapSimulationParticles;
        public ulong gpuMemHeapSimulationSoftBody;
        public ulong gpuMemHeapSimulationFEMCloth;
        public ulong gpuMemHeapSimulationHairSystem;
        public ulong gpuMemHeapParticles;
        public ulong gpuMemHeapSoftBodies;
        public ulong gpuMemHeapFEMCloths;
        public ulong gpuMemHeapHairSystems;
        public ulong gpuMemHeapOther;
        public uint nbBroadPhaseAdds;
        public uint nbBroadPhaseRemoves;
        public fixed uint nbDiscreteContactPairs[11];
        public fixed uint nbCCDPairs[11];
        public fixed uint nbModifiedContactPairs[11];
        public fixed uint nbTriggerPairs[11];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGpuBodyData
    {
        public PxQuat quat;
        public PxVec4 pos;
        public PxVec4 linVel;
        public PxVec4 angVel;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGpuActorPair
    {
        public uint srcIndex;
        public fixed byte structgen_pad0[4];
        public PxNodeIndex nodeIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxIndexDataPair
    {
        public uint index;
        public fixed byte structgen_pad0[4];
        public void* data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDominanceGroupPair
    {
        public byte dominance0;
        public byte dominance1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxScene
    {
        public fixed byte structgen_pad0[8];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSceneReadLock
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSceneWriteLock
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPairExtraDataItem
    {
        public byte type_;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPairVelocity
    {
        public byte type_;
        public fixed byte structgen_pad0[3];
        public fixed byte/* PxVec3, this length is invalid so must keep pointer and can't edit from C# */ linearVelocity[2];
        public fixed byte/* PxVec3, this length is invalid so must keep pointer and can't edit from C# */ angularVelocity[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPairPose
    {
        public byte type_;
        public fixed byte structgen_pad0[3];
        public fixed byte/* PxTransform, this length is invalid so must keep pointer and can't edit from C# */ globalPose[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPairIndex
    {
        public byte type_;
        public fixed byte structgen_pad0[1];
        public ushort index;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPairExtraDataIterator
    {
        public byte* currPtr;
        public byte* endPtr;
        public PxContactPairVelocity* preSolverVelocity;
        public PxContactPairVelocity* postSolverVelocity;
        public PxContactPairPose* eventPose;
        public uint contactPairIndex;
        public fixed byte structgen_pad0[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPairHeader
    {
        public fixed byte/* PxActor, this length is invalid so must keep pointer and can't edit from C# */ actors[2];
        public byte* extraDataStream;
        public ushort extraDataStreamSize;
        public PxContactPairHeaderFlags flags;
        public fixed byte structgen_pad0[4];
        public PxContactPair* pairs;
        public uint nbPairs;
        public fixed byte structgen_pad1[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPairPoint
    {
        public PxVec3 position;
        public float separation;
        public PxVec3 normal;
        public uint internalFaceIndex0;
        public PxVec3 impulse;
        public uint internalFaceIndex1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactPair
    {
        public fixed byte/* PxShape, this length is invalid so must keep pointer and can't edit from C# */ shapes[2];
        public byte* contactPatches;
        public byte* contactPoints;
        public float* contactImpulses;
        public uint requiredBufferSize;
        public byte contactCount;
        public byte patchCount;
        public ushort contactStreamSize;
        public PxContactPairFlags flags;
        public PxPairFlags events;
        public fixed uint internalData[2];
        public fixed byte structgen_pad0[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTriggerPair
    {
        public PxShape* triggerShape;
        public PxActor* triggerActor;
        public PxShape* otherShape;
        public PxActor* otherActor;
        public PxPairFlag status;
        public PxTriggerPairFlags flags;
        public fixed byte structgen_pad0[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConstraintInfo
    {
        public PxConstraint* constraint;
        public void* externalReference;
        public uint type_;
        public fixed byte structgen_pad0[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxFEMParameters
    {
        public float velocityDamping;
        public float settlingThreshold;
        public float sleepThreshold;
        public float sleepDamping;
        public float selfCollisionFilterDistance;
        public float selfCollisionStressTolerance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPruningStructure
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxExtendedVec3
    {
        public double x;
        public double y;
        public double z;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxObstacle
    {
        public fixed byte structgen_pad0[8];
        public void* mUserData;
        public PxExtendedVec3 mPos;
        public PxQuat mRot;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBoxObstacle
    {
        public fixed byte structgen_pad0[8];
        public void* mUserData;
        public PxExtendedVec3 mPos;
        public PxQuat mRot;
        public PxVec3 mHalfExtents;
        public fixed byte structgen_pad1[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCapsuleObstacle
    {
        public fixed byte structgen_pad0[8];
        public void* mUserData;
        public PxExtendedVec3 mPos;
        public PxQuat mRot;
        public float mHalfHeight;
        public float mRadius;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerState
    {
        public PxVec3 deltaXP;
        public fixed byte structgen_pad0[4];
        public PxShape* touchedShape;
        public PxRigidActor* touchedActor;
        public uint touchedObstacleHandle;
        public uint collisionFlags;
        [MarshalAs(UnmanagedType.U1)] public bool standOnAnotherCCT;
        [MarshalAs(UnmanagedType.U1)] public bool standOnObstacle;
        [MarshalAs(UnmanagedType.U1)] public bool isMovingUp;
        public fixed byte structgen_pad1[5];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerStats
    {
        public ushort nbIterations;
        public ushort nbFullUpdates;
        public ushort nbPartialUpdates;
        public ushort nbTessellation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerShapeHit
    {
        public PxController* controller;
        public PxExtendedVec3 worldPos;
        public PxVec3 worldNormal;
        public PxVec3 dir;
        public float length;
        public fixed byte structgen_pad0[4];
        public PxShape* shape;
        public PxRigidActor* actor;
        public uint triangleIndex;
        public fixed byte structgen_pad1[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllersHit
    {
        public PxController* controller;
        public PxExtendedVec3 worldPos;
        public PxVec3 worldNormal;
        public PxVec3 dir;
        public float length;
        public fixed byte structgen_pad0[4];
        public PxController* other;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerObstacleHit
    {
        public PxController* controller;
        public PxExtendedVec3 worldPos;
        public PxVec3 worldNormal;
        public PxVec3 dir;
        public float length;
        public fixed byte structgen_pad0[4];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerFilters
    {
        public PxFilterData* mFilterData;
        public PxQueryFilterCallback* mFilterCallback;
        public PxQueryFlags mFilterFlags;
        public fixed byte structgen_pad0[6];
        public PxControllerFilterCallback* mCCTFilterCallback;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxControllerDesc
    {
        public fixed byte structgen_pad0[8];
        public PxExtendedVec3 position;
        public PxVec3 upDirection;
        public float slopeLimit;
        public float invisibleWallHeight;
        public float maxJumpHeight;
        public float contactOffset;
        public float stepOffset;
        public float density;
        public float scaleCoeff;
        public float volumeGrowth;
        public fixed byte structgen_pad1[4];
        public PxUserControllerHitReport* reportCallback;
        public PxControllerBehaviorCallback* behaviorCallback;
        public PxControllerNonWalkableMode nonWalkableMode;
        public fixed byte structgen_pad2[4];
        public PxMaterial* material;
        [MarshalAs(UnmanagedType.U1)] public bool registerDeletionListener;
        public byte clientID;
        public fixed byte structgen_pad3[6];
        public void* userData;
        public fixed byte structgen_pad4[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBoxControllerDesc
    {
        public fixed byte structgen_pad0[8];
        public PxExtendedVec3 position;
        public PxVec3 upDirection;
        public float slopeLimit;
        public float invisibleWallHeight;
        public float maxJumpHeight;
        public float contactOffset;
        public float stepOffset;
        public float density;
        public float scaleCoeff;
        public float volumeGrowth;
        public fixed byte structgen_pad1[4];
        public PxUserControllerHitReport* reportCallback;
        public PxControllerBehaviorCallback* behaviorCallback;
        public PxControllerNonWalkableMode nonWalkableMode;
        public fixed byte structgen_pad2[4];
        public PxMaterial* material;
        [MarshalAs(UnmanagedType.U1)] public bool registerDeletionListener;
        public byte clientID;
        public fixed byte structgen_pad3[6];
        public void* userData;
        public fixed byte structgen_pad4[8];
        public float halfHeight;
        public float halfSideExtent;
        public float halfForwardExtent;
        public fixed byte structgen_pad5[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCapsuleControllerDesc
    {
        public fixed byte structgen_pad0[8];
        public PxExtendedVec3 position;
        public PxVec3 upDirection;
        public float slopeLimit;
        public float invisibleWallHeight;
        public float maxJumpHeight;
        public float contactOffset;
        public float stepOffset;
        public float density;
        public float scaleCoeff;
        public float volumeGrowth;
        public fixed byte structgen_pad1[4];
        public PxUserControllerHitReport* reportCallback;
        public PxControllerBehaviorCallback* behaviorCallback;
        public PxControllerNonWalkableMode nonWalkableMode;
        public fixed byte structgen_pad2[4];
        public PxMaterial* material;
        [MarshalAs(UnmanagedType.U1)] public bool registerDeletionListener;
        public byte clientID;
        public fixed byte structgen_pad3[6];
        public void* userData;
        public fixed byte structgen_pad4[8];
        public float radius;
        public float height;
        public PxCapsuleClimbingMode climbingMode;
        public fixed byte structgen_pad5[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDim3
    {
        public uint x;
        public uint y;
        public uint z;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSDFDesc
    {
        public PxBoundedData sdf;
        public PxDim3 dims;
        public PxVec3 meshLower;
        public float spacing;
        public uint subgridSize;
        public PxSdfBitsPerSubgridPixel bitsPerSubgridPixel;
        public PxDim3 sdfSubgrids3DTexBlockDim;
        public PxBoundedData sdfSubgrids;
        public PxBoundedData sdfStartSlots;
        public float subgridsMinSdfValue;
        public float subgridsMaxSdfValue;
        public PxBounds3 sdfBounds;
        public float narrowBandThicknessRelativeToSdfBoundsDiagonal;
        public uint numThreadsForSdfConstruction;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxConvexMeshDesc
    {
        public PxBoundedData points;
        public PxBoundedData polygons;
        public PxBoundedData indices;
        public PxConvexFlags flags;
        public ushort vertexLimit;
        public ushort polygonLimit;
        public ushort quantizedCount;
        public PxSDFDesc* sdfDesc;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTriangleMeshDesc
    {
        public PxBoundedData points;
        public PxBoundedData triangles;
        public PxMeshFlags flags;
        public fixed byte structgen_pad0[22];
        public PxSDFDesc* sdfDesc;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTetrahedronMeshDesc
    {
        public fixed byte structgen_pad0[16];
        public PxBoundedData points;
        public PxBoundedData tetrahedrons;
        public PxMeshFlags flags;
        public ushort tetsPerElement;
        public fixed byte structgen_pad1[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSoftBodySimulationDataDesc
    {
        public PxBoundedData vertexToTet;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBVH34MidphaseDesc
    {
        public uint numPrimsPerLeaf;
        public PxBVH34BuildStrategy buildStrategy;
        [MarshalAs(UnmanagedType.U1)] public bool quantized;
        public fixed byte structgen_pad0[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMidphaseDesc
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxBVHDesc
    {
        public PxBoundedData bounds;
        public float enlargement;
        public uint numPrimsPerLeaf;
        public PxBVHBuildStrategy buildStrategy;
        public fixed byte structgen_pad0[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxCookingParams
    {
        public float areaTestEpsilon;
        public float planeTolerance;
        public PxConvexMeshCookingType convexMeshCookingType;
        [MarshalAs(UnmanagedType.U1)] public bool suppressTriangleMeshRemapTable;
        [MarshalAs(UnmanagedType.U1)] public bool buildTriangleAdjacencies;
        [MarshalAs(UnmanagedType.U1)] public bool buildGPUData;
        public fixed byte structgen_pad0[1];
        public PxTolerancesScale scale;
        public PxMeshPreprocessingFlags meshPreprocessParams;
        public float meshWeldTolerance;
        public PxMidphaseDesc midphaseDesc;
        public uint gaussMapLimit;
        public float maxWeightRatioInTet;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDefaultMemoryOutputStream
    {
        public fixed byte structgen_pad0[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDefaultMemoryInputData
    {
        public fixed byte structgen_pad0[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDefaultFileOutputStream
    {
        public fixed byte structgen_pad0[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDefaultFileInputData
    {
        public fixed byte structgen_pad0[24];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSpring
    {
        public float stiffness;
        public float damping;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxDistanceJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxJacobianRow
    {
        public PxVec3 linear0;
        public PxVec3 linear1;
        public PxVec3 angular0;
        public PxVec3 angular1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxContactJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxFixedJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxJointLimitParameters
    {
        public float restitution;
        public float bounceThreshold;
        public float stiffness;
        public float damping;
        public float contactDistance_deprecated;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxJointLinearLimit
    {
        public float restitution;
        public float bounceThreshold;
        public float stiffness;
        public float damping;
        public float contactDistance_deprecated;
        public float value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxJointLinearLimitPair
    {
        public float restitution;
        public float bounceThreshold;
        public float stiffness;
        public float damping;
        public float contactDistance_deprecated;
        public float upper;
        public float lower;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxJointAngularLimitPair
    {
        public float restitution;
        public float bounceThreshold;
        public float stiffness;
        public float damping;
        public float contactDistance_deprecated;
        public float upper;
        public float lower;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxJointLimitCone
    {
        public float restitution;
        public float bounceThreshold;
        public float stiffness;
        public float damping;
        public float contactDistance_deprecated;
        public float yAngle;
        public float zAngle;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxJointLimitPyramid
    {
        public float restitution;
        public float bounceThreshold;
        public float stiffness;
        public float damping;
        public float contactDistance_deprecated;
        public float yAngleMin;
        public float yAngleMax;
        public float zAngleMin;
        public float zAngleMax;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPrismaticJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRevoluteJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxSphericalJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxD6JointDrive
    {
        public float stiffness;
        public float damping;
        public float forceLimit;
        public PxD6JointDriveFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxD6Joint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGearJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRackAndPinionJoint
    {
        public fixed byte structgen_pad0[16];
        public void* userData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxGroupsMask
    {
        public ushort bits0;
        public ushort bits1;
        public ushort bits2;
        public ushort bits3;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMassProperties
    {
        public PxMat33 inertiaTensor;
        public PxVec3 centerOfMass;
        public float mass;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxMeshOverlapUtil
    {
        public fixed byte structgen_pad0[1040];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxXmlMiscParameter
    {
        public PxVec3 upVector;
        public PxTolerancesScale scale;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxPoissonSampler
    {
        public fixed byte structgen_pad0[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxTriangleMeshPoissonSampler
    {
        public fixed byte structgen_pad0[24];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRepXObject
    {
        public byte* typeName;
        public void* serializable;
        public ulong id;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct PxRepXInstantiationArgs
    {
        public fixed byte structgen_pad0[8];
        public PxCooking* cooker;
        public PxStringTable* stringTable;
    }


    internal enum PxEMPTY : int
    {
        PxEmpty = 0,
    }

    internal enum PxZERO : int
    {
        PxZero = 0,
    }

    internal enum PxIDENTITY : int
    {
        PxIdentity = 0,
    }

    internal enum PxErrorCode : int
    {
        NoError = 0,
        DebugInfo = 1,
        DebugWarning = 2,
        InvalidParameter = 4,
        InvalidOperation = 8,
        OutOfMemory = 16,
        InternalError = 32,
        Abort = 64,
        PerfWarning = 128,
        MaskAll = -1,
    }

    internal enum PxConcreteType : int
    {
        Undefined = 0,
        Heightfield = 1,
        ConvexMesh = 2,
        TriangleMeshBvh33 = 3,
        TriangleMeshBvh34 = 4,
        TetrahedronMesh = 5,
        SoftbodyMesh = 6,
        RigidDynamic = 7,
        RigidStatic = 8,
        Shape = 9,
        Material = 10,
        SoftbodyMaterial = 11,
        ClothMaterial = 12,
        PbdMaterial = 13,
        FlipMaterial = 14,
        MpmMaterial = 15,
        CustomMaterial = 16,
        Constraint = 17,
        Aggregate = 18,
        ArticulationReducedCoordinate = 19,
        ArticulationLink = 20,
        ArticulationJointReducedCoordinate = 21,
        ArticulationSensor = 22,
        ArticulationSpatialTendon = 23,
        ArticulationFixedTendon = 24,
        ArticulationAttachment = 25,
        ArticulationTendonJoint = 26,
        PruningStructure = 27,
        Bvh = 28,
        SoftBody = 29,
        SoftBodyState = 30,
        PbdParticlesystem = 31,
        FlipParticlesystem = 32,
        MpmParticlesystem = 33,
        CustomParticlesystem = 34,
        FemCloth = 35,
        HairSystem = 36,
        ParticleBuffer = 37,
        ParticleDiffuseBuffer = 38,
        ParticleClothBuffer = 39,
        ParticleRigidBuffer = 40,
        PhysxCoreCount = 41,
        FirstPhysxExtension = 256,
        FirstVehicleExtension = 512,
        FirstUserExtension = 1024,
    }

    internal enum PxBaseFlag : int
    {
        OwnsMemory = 1,
        IsReleasable = 2,
    }

    [Flags]
    internal enum PxBaseFlags : ushort
    {
        OwnsMemory = 1 << 0,
        IsReleasable = 1 << 1,
    }

    internal enum PxTaskType : int
    {
        Cpu = 0,
        NotPresent = 1,
        Completed = 2,
    }

    internal enum PxGeometryType : int
    {
        Sphere = 0,
        Plane = 1,
        Capsule = 2,
        Box = 3,
        Convexmesh = 4,
        Particlesystem = 5,
        Tetrahedronmesh = 6,
        Trianglemesh = 7,
        Heightfield = 8,
        Hairsystem = 9,
        Custom = 10,
        GeometryCount = 11,
        Invalid = -1,
    }

    [Flags]
    internal enum PxGeometryQueryFlags : uint
    {
        SimdGuard = 1 << 0,
    }

    internal enum PxBVHBuildStrategy : int
    {
        Fast = 0,
        Default = 1,
        Sah = 2,
        Last = 3,
    }

    [Flags]
    internal enum PxConvexMeshGeometryFlags : byte
    {
        TightBounds = 1 << 0,
    }

    [Flags]
    internal enum PxMeshGeometryFlags : byte
    {
        TightBounds = 1 << 0,
        DoubleSided = 1 << 1,
    }

    internal enum PxParticleSolverType : int
    {
        Pbd = 1,
        Flip = 2,
        Mpm = 4,
        Custom = 8,
    }

    [Flags]
    internal enum PxHitFlags : ushort
    {
        Position = 1 << 0,
        Normal = 1 << 1,
        Uv = 1 << 3,
        AssumeNoInitialOverlap = 1 << 4,
        AnyHit = 1 << 5,
        MeshMultiple = 1 << 6,
        MeshBothSides = 1 << 7,
        PreciseSweep = 1 << 8,
        Mtd = 1 << 9,
        FaceIndex = 1 << 10,
        Default = Position | Normal | FaceIndex,
        ModifiableFlags = AssumeNoInitialOverlap | MeshMultiple | MeshBothSides | PreciseSweep,
    }

    internal enum PxHeightFieldFormat : int
    {
        S16Tm = 1,
    }

    [Flags]
    internal enum PxHeightFieldFlags : ushort
    {
        NoBoundaryEdges = 1 << 0,
    }

    [Flags]
    internal enum PxMeshFlags : ushort
    {
        Flipnormals = 1 << 0,
        E16BitIndices = 1 << 1,
    }

    internal enum PxMeshMidPhase : int
    {
        Bvh33 = 0,
        Bvh34 = 1,
        Last = 2,
    }

    [Flags]
    internal enum PxTriangleMeshFlags : byte
    {
        E16BitIndices = 1 << 1,
        AdjacencyInfo = 1 << 2,
        PreferNoSdfProj = 1 << 3,
    }

    [Flags]
    internal enum PxTetrahedronMeshFlags : byte
    {
        E16BitIndices = 1 << 1,
    }

    internal enum PxActorFlag : int
    {
        Visualization = 1,
        DisableGravity = 2,
        SendSleepNotifies = 4,
        DisableSimulation = 8,
    }

    [Flags]
    internal enum PxActorFlags : byte
    {
        Visualization = 1 << 0,
        DisableGravity = 1 << 1,
        SendSleepNotifies = 1 << 2,
        DisableSimulation = 1 << 3,
    }

    internal enum PxActorType : int
    {
        RigidStatic = 0,
        RigidDynamic = 1,
        ArticulationLink = 2,
    }

    internal enum PxAggregateType : int
    {
        Generic = 0,
        Static = 1,
        Kinematic = 2,
    }

    internal enum BodyState : int
    {
        DynamicBody = 1,
        StaticBody = 2,
        KinematicBody = 4,
        Articulation = 8,
    }

    internal enum PxArticulationAxis : int
    {
        Twist = 0,
        Swing1 = 1,
        Swing2 = 2,
        X = 3,
        Y = 4,
        Z = 5,
        Count = 6,
    }

    internal enum PxArticulationMotion : int
    {
        Locked = 0,
        Limited = 1,
        Free = 2,
    }

    internal enum PxArticulationJointType : int
    {
        Fix = 0,
        Prismatic = 1,
        Revolute = 2,
        RevoluteUnwrapped = 3,
        Spherical = 4,
        Undefined = 5,
    }

    internal enum PxArticulationFlag : int
    {
        FixBase = 1,
        DriveLimitsAreForces = 2,
        DisableSelfCollision = 4,
        ComputeJointForces = 8,
    }

    [Flags]
    internal enum PxArticulationFlags : byte
    {
        FixBase = 1 << 0,
        DriveLimitsAreForces = 1 << 1,
        DisableSelfCollision = 1 << 2,
        ComputeJointForces = 1 << 3,
    }

    internal enum PxArticulationDriveType : int
    {
        Force = 0,
        Acceleration = 1,
        Target = 2,
        Velocity = 3,
        None = 4,
    }

    internal enum PxArticulationGpuDataType : int
    {
        JointPosition = 0,
        JointVelocity = 1,
        JointAcceleration = 2,
        JointForce = 3,
        JointSolverForce = 4,
        JointTargetVelocity = 5,
        JointTargetPosition = 6,
        SensorForce = 7,
        RootTransform = 8,
        RootVelocity = 9,
        LinkTransform = 10,
        LinkVelocity = 11,
        LinkForce = 12,
        LinkTorque = 13,
        FixedTendon = 14,
        FixedTendonJoint = 15,
        SpatialTendon = 16,
        SpatialTendonAttachment = 17,
    }

    [Flags]
    internal enum PxArticulationCacheFlags : uint
    {
        Velocity = 1 << 0,
        Acceleration = 1 << 1,
        Position = 1 << 2,
        Force = 1 << 3,
        LinkVelocity = 1 << 4,
        LinkAcceleration = 1 << 5,
        RootTransform = 1 << 6,
        RootVelocities = 1 << 7,
        SensorForces = 1 << 8,
        JointSolverForces = 1 << 9,
        All = Velocity | Acceleration | Position | LinkVelocity | LinkAcceleration | RootTransform | RootVelocities,
    }

    internal enum PxArticulationSensorFlag : int
    {
        ForwardDynamicsForces = 1,
        ConstraintSolverForces = 2,
        WorldFrame = 4,
    }

    [Flags]
    internal enum PxArticulationSensorFlags : byte
    {
        ForwardDynamicsForces = 1 << 0,
        ConstraintSolverForces = 1 << 1,
        WorldFrame = 1 << 2,
    }

    [Flags]
    internal enum PxArticulationKinematicFlags : byte
    {
        Position = 1 << 0,
        Velocity = 1 << 1,
    }

    internal enum PxShapeFlag : int
    {
        SimulationShape = 1,
        SceneQueryShape = 2,
        TriggerShape = 4,
        Visualization = 8,
    }

    [Flags]
    internal enum PxShapeFlags : byte
    {
        SimulationShape = 1 << 0,
        SceneQueryShape = 1 << 1,
        TriggerShape = 1 << 2,
        Visualization = 1 << 3,
    }

    internal enum PxForceMode : int
    {
        Force = 0,
        Impulse = 1,
        VelocityChange = 2,
        Acceleration = 3,
    }

    internal enum PxRigidBodyFlag : int
    {
        Kinematic = 1,
        UseKinematicTargetForSceneQueries = 2,
        EnableCcd = 4,
        EnableCcdFriction = 8,
        EnableSpeculativeCcd = 16,
        EnablePoseIntegrationPreview = 32,
        EnableCcdMaxContactImpulse = 64,
        RetainAccelerations = 128,
        ForceKineKineNotifications = 256,
        ForceStaticKineNotifications = 512,
        EnableGyroscopicForces = 1024,
    }

    [Flags]
    internal enum PxRigidBodyFlags : ushort
    {
        Kinematic = 1 << 0,
        UseKinematicTargetForSceneQueries = 1 << 1,
        EnableCcd = 1 << 2,
        EnableCcdFriction = 1 << 3,
        EnableSpeculativeCcd = 1 << 4,
        EnablePoseIntegrationPreview = 1 << 5,
        EnableCcdMaxContactImpulse = 1 << 6,
        RetainAccelerations = 1 << 7,
        ForceKineKineNotifications = 1 << 8,
        ForceStaticKineNotifications = 1 << 9,
        EnableGyroscopicForces = 1 << 10,
    }

    internal enum PxConstraintFlag : int
    {
        Broken = 1,
        ProjectToActor0 = 2,
        ProjectToActor1 = 4,
        Projection = 6,
        CollisionEnabled = 8,
        Visualization = 16,
        DriveLimitsAreForces = 32,
        ImprovedSlerp = 128,
        DisablePreprocessing = 256,
        EnableExtendedLimits = 512,
        GpuCompatible = 1024,
        AlwaysUpdate = 2048,
        DisableConstraint = 4096,
    }

    [Flags]
    internal enum PxConstraintFlags : ushort
    {
        Broken = 1 << 0,
        ProjectToActor0 = 1 << 1,
        ProjectToActor1 = 1 << 2,
        Projection = ProjectToActor0 | ProjectToActor1,
        CollisionEnabled = 1 << 3,
        Visualization = 1 << 4,
        DriveLimitsAreForces = 1 << 5,
        ImprovedSlerp = 1 << 7,
        DisablePreprocessing = 1 << 8,
        EnableExtendedLimits = 1 << 9,
        GpuCompatible = 1 << 10,
        AlwaysUpdate = 1 << 11,
        DisableConstraint = 1 << 12,
    }

    internal enum StreamFormat : int
    {
        SimpleStream = 0,
        ModifiableStream = 1,
        CompressedModifiableStream = 2,
    }

    internal enum PxDeletionEventFlag : int
    {
        UserRelease = 1,
        MemoryRelease = 2,
    }

    [Flags]
    internal enum PxDeletionEventFlags : byte
    {
        UserRelease = 1 << 0,
        MemoryRelease = 1 << 1,
    }

    internal enum PxPairFlag : int
    {
        SolveContact = 1,
        ModifyContacts = 2,
        NotifyTouchFound = 4,
        NotifyTouchPersists = 8,
        NotifyTouchLost = 16,
        NotifyTouchCcd = 32,
        NotifyThresholdForceFound = 64,
        NotifyThresholdForcePersists = 128,
        NotifyThresholdForceLost = 256,
        NotifyContactPoints = 512,
        DetectDiscreteContact = 1024,
        DetectCcdContact = 2048,
        PreSolverVelocity = 4096,
        PostSolverVelocity = 8192,
        ContactEventPose = 16384,
        NextFree = 32768,
        ContactDefault = 1025,
        TriggerDefault = 1044,
    }

    [Flags]
    internal enum PxPairFlags : ushort
    {
        SolveContact = 1 << 0,
        ModifyContacts = 1 << 1,
        NotifyTouchFound = 1 << 2,
        NotifyTouchPersists = 1 << 3,
        NotifyTouchLost = 1 << 4,
        NotifyTouchCcd = 1 << 5,
        NotifyThresholdForceFound = 1 << 6,
        NotifyThresholdForcePersists = 1 << 7,
        NotifyThresholdForceLost = 1 << 8,
        NotifyContactPoints = 1 << 9,
        DetectDiscreteContact = 1 << 10,
        DetectCcdContact = 1 << 11,
        PreSolverVelocity = 1 << 12,
        PostSolverVelocity = 1 << 13,
        ContactEventPose = 1 << 14,
        NextFree = 1 << 15,
        ContactDefault = SolveContact | DetectDiscreteContact,
        TriggerDefault = NotifyTouchFound | NotifyTouchLost | DetectDiscreteContact,
    }

    [Flags]
    internal enum PxFilterFlags : ushort
    {
        Kill = 1 << 0,
        Suppress = 1 << 1,
        Callback = 1 << 2,
        Notify = Callback,
    }

    internal enum PxFilterObjectType : int
    {
        RigidStatic = 0,
        RigidDynamic = 1,
        Articulation = 2,
        Particlesystem = 3,
        Softbody = 4,
        Femcloth = 5,
        Hairsystem = 6,
        MaxTypeCount = 16,
        Undefined = 15,
    }

    internal enum PxPairFilteringMode : int
    {
        Keep = 0,
        Suppress = 1,
        Kill = 2,
    }

    [Flags]
    internal enum PxDataAccessFlags : byte
    {
        Readable = 1 << 0,
        Writable = 1 << 1,
        Device = 1 << 2,
    }

    internal enum PxMaterialFlag : int
    {
        DisableFriction = 1,
        DisableStrongFriction = 2,
        ImprovedPatchFriction = 4,
        CompliantContact = 8,
    }

    [Flags]
    internal enum PxMaterialFlags : ushort
    {
        DisableFriction = 1 << 0,
        DisableStrongFriction = 1 << 1,
        ImprovedPatchFriction = 1 << 2,
        CompliantContact = 1 << 3,
    }

    internal enum PxCombineMode : int
    {
        Average = 0,
        Min = 1,
        Multiply = 2,
        Max = 3,
        NValues = 4,
        Pad32 = 2147483647,
    }

    [Flags]
    internal enum PxParticleBufferFlags : uint
    {
        UpdatePosition = 1 << 0,
        UpdateVelocity = 1 << 1,
        UpdatePhase = 1 << 2,
        UpdateRestposition = 1 << 3,
        UpdateCloth = 1 << 5,
        UpdateRigid = 1 << 6,
        UpdateDiffuseParam = 1 << 7,
        UpdateAttachments = 1 << 8,
        All = UpdatePosition | UpdateVelocity | UpdatePhase | UpdateRestposition | UpdateCloth | UpdateRigid | UpdateDiffuseParam | UpdateAttachments,
    }

    [Flags]
    internal enum PxQueryFlags : ushort
    {
        Static = 1 << 0,
        Dynamic = 1 << 1,
        Prefilter = 1 << 2,
        Postfilter = 1 << 3,
        AnyHit = 1 << 4,
        NoBlock = 1 << 5,
        DisableHardcodedFilter = 1 << 6,
        Reserved = 1 << 15,
    }

    internal enum PxQueryHitType : int
    {
        None = 0,
        Touch = 1,
        Block = 2,
    }

    internal enum PxRigidDynamicLockFlag : int
    {
        LockLinearX = 1,
        LockLinearY = 2,
        LockLinearZ = 4,
        LockAngularX = 8,
        LockAngularY = 16,
        LockAngularZ = 32,
    }

    [Flags]
    internal enum PxRigidDynamicLockFlags : byte
    {
        LockLinearX = 1 << 0,
        LockLinearY = 1 << 1,
        LockLinearZ = 1 << 2,
        LockAngularX = 1 << 3,
        LockAngularY = 1 << 4,
        LockAngularZ = 1 << 5,
    }

    internal enum PxPruningStructureType : int
    {
        None = 0,
        DynamicAabbTree = 1,
        StaticAabbTree = 2,
        Last = 3,
    }

    internal enum PxDynamicTreeSecondaryPruner : int
    {
        None = 0,
        Bucket = 1,
        Incremental = 2,
        Bvh = 3,
        Last = 4,
    }

    internal enum PxSceneQueryUpdateMode : int
    {
        BuildEnabledCommitEnabled = 0,
        BuildEnabledCommitDisabled = 1,
        BuildDisabledCommitDisabled = 2,
    }

    internal enum PxBroadPhaseType : int
    {
        Sap = 0,
        Mbp = 1,
        Abp = 2,
        Pabp = 3,
        Gpu = 4,
        Last = 5,
    }

    internal enum PxFrictionType : int
    {
        Patch = 0,
        OneDirectional = 1,
        TwoDirectional = 2,
        FrictionCount = 3,
    }

    internal enum PxSolverType : int
    {
        Pgs = 0,
        Tgs = 1,
    }

    internal enum PxSceneFlag : int
    {
        EnableActiveActors = 1,
        EnableCcd = 2,
        DisableCcdResweep = 4,
        EnablePcm = 64,
        DisableContactReportBufferResize = 128,
        DisableContactCache = 256,
        RequireRwLock = 512,
        EnableStabilization = 1024,
        EnableAveragePoint = 2048,
        ExcludeKinematicsFromActiveActors = 4096,
        EnableGpuDynamics = 8192,
        EnableEnhancedDeterminism = 16384,
        EnableFrictionEveryIteration = 32768,
        SuppressReadback = 65536,
        ForceReadback = 131072,
        MutableFlags = 69633,
    }

    [Flags]
    internal enum PxSceneFlags : uint
    {
        EnableActiveActors = 1 << 0,
        EnableCcd = 1 << 1,
        DisableCcdResweep = 1 << 2,
        EnablePcm = 1 << 6,
        DisableContactReportBufferResize = 1 << 7,
        DisableContactCache = 1 << 8,
        RequireRwLock = 1 << 9,
        EnableStabilization = 1 << 10,
        EnableAveragePoint = 1 << 11,
        ExcludeKinematicsFromActiveActors = 1 << 12,
        EnableGpuDynamics = 1 << 13,
        EnableEnhancedDeterminism = 1 << 14,
        EnableFrictionEveryIteration = 1 << 15,
        SuppressReadback = 1 << 16,
        ForceReadback = 1 << 17,
        MutableFlags = EnableActiveActors | ExcludeKinematicsFromActiveActors | SuppressReadback,
    }

    internal enum PxVisualizationParameter : int
    {
        Scale = 0,
        WorldAxes = 1,
        BodyAxes = 2,
        BodyMassAxes = 3,
        BodyLinVelocity = 4,
        BodyAngVelocity = 5,
        ContactPoint = 6,
        ContactNormal = 7,
        ContactError = 8,
        ContactForce = 9,
        ActorAxes = 10,
        CollisionAabbs = 11,
        CollisionShapes = 12,
        CollisionAxes = 13,
        CollisionCompounds = 14,
        CollisionFnormals = 15,
        CollisionEdges = 16,
        CollisionStatic = 17,
        CollisionDynamic = 18,
        JointLocalFrames = 19,
        JointLimits = 20,
        CullBox = 21,
        MbpRegions = 22,
        SimulationMesh = 23,
        Sdf = 24,
        NumValues = 25,
        ForceDword = 2147483647,
    }

    internal enum RbPairStatsType : int
    {
        DiscreteContactPairs = 0,
        CcdPairs = 1,
        ModifiedContactPairs = 2,
        TriggerPairs = 3,
    }

    internal enum PxSoftBodyDataFlag : int
    {
        TetIndices = 0,
        TetStress = 1,
        TetStresscoeff = 2,
        TetRestPoses = 3,
        TetRotations = 4,
        TetPositionInvMass = 5,
        SimTetIndices = 6,
        SimVelocityInvMass = 7,
        SimPositionInvMass = 8,
        SimKinematicTarget = 9,
    }

    internal enum PxActorCacheFlag : int
    {
        ActorData = 1,
        Force = 4,
        Torque = 8,
    }

    internal enum PxPvdSceneFlag : int
    {
        TransmitContacts = 1,
        TransmitScenequeries = 2,
        TransmitConstraints = 4,
    }

    [Flags]
    internal enum PxPvdSceneFlags : byte
    {
        TransmitContacts = 1 << 0,
        TransmitScenequeries = 1 << 1,
        TransmitConstraints = 1 << 2,
    }

    [Flags]
    internal enum PxActorTypeFlags : ushort
    {
        RigidStatic = 1 << 0,
        RigidDynamic = 1 << 1,
    }

    [Flags]
    internal enum PxContactPairHeaderFlags : ushort
    {
        RemovedActor0 = 1 << 0,
        RemovedActor1 = 1 << 1,
    }

    [Flags]
    internal enum PxContactPairFlags : ushort
    {
        RemovedShape0 = 1 << 0,
        RemovedShape1 = 1 << 1,
        ActorPairHasFirstTouch = 1 << 2,
        ActorPairLostTouch = 1 << 3,
        InternalHasImpulses = 1 << 4,
        InternalContactsAreFlipped = 1 << 5,
    }

    [Flags]
    internal enum PxTriggerPairFlags : byte
    {
        RemovedShapeTrigger = 1 << 0,
        RemovedShapeOther = 1 << 1,
        NextFree = 1 << 2,
    }

    internal enum PxControllerShapeType : int
    {
        Box = 0,
        Capsule = 1,
        ForceDword = 2147483647,
    }

    internal enum PxControllerNonWalkableMode : int
    {
        PreventClimbing = 0,
        PreventClimbingAndForceSliding = 1,
    }

    [Flags]
    internal enum PxControllerCollisionFlags : byte
    {
        CollisionSides = 1 << 0,
        CollisionUp = 1 << 1,
        CollisionDown = 1 << 2,
    }

    internal enum PxCapsuleClimbingMode : int
    {
        Easy = 0,
        Constrained = 1,
        Last = 2,
    }

    [Flags]
    internal enum PxControllerBehaviorFlags : byte
    {
        CctCanRideOnObject = 1 << 0,
        CctSlide = 1 << 1,
        CctUserDefinedRide = 1 << 2,
    }

    [Flags]
    internal enum PxControllerDebugRenderFlags : uint
    {
        TemporalBv = 1 << 0,
        CachedBv = 1 << 1,
        Obstacles = 1 << 2,
        All = TemporalBv | CachedBv | Obstacles,
    }

    internal enum PxSdfBitsPerSubgridPixel : int
    {
        E8BitPerPixel = 1,
        E16BitPerPixel = 2,
        E32BitPerPixel = 4,
    }

    [Flags]
    internal enum PxConvexFlags : ushort
    {
        E16BitIndices = 1 << 0,
        ComputeConvex = 1 << 1,
        CheckZeroAreaTriangles = 1 << 2,
        QuantizeInput = 1 << 3,
        DisableMeshValidation = 1 << 4,
        PlaneShifting = 1 << 5,
        FastInertiaComputation = 1 << 6,
        GpuCompatible = 1 << 7,
        ShiftVertices = 1 << 8,
    }

    internal enum PxBVH34BuildStrategy : int
    {
        Fast = 0,
        Default = 1,
        Sah = 2,
        Last = 3,
    }

    internal enum PxConvexMeshCookingResult : int
    {
        Success = 0,
        ZeroAreaTestFailed = 1,
        PolygonsLimitReached = 2,
        Failure = 3,
    }

    internal enum PxConvexMeshCookingType : int
    {
        Quickhull = 0,
    }

    internal enum PxTriangleMeshCookingResult : int
    {
        Success = 0,
        LargeTriangle = 1,
        Failure = 2,
    }

    [Flags]
    internal enum PxMeshPreprocessingFlags : uint
    {
        WeldVertices = 1 << 0,
        DisableCleanMesh = 1 << 1,
        DisableActiveEdgesPrecompute = 1 << 2,
        Force32bitIndices = 1 << 3,
        EnableVertMapping = 1 << 4,
        EnableInertia = 1 << 5,
    }

    internal enum PxJointActorIndex : int
    {
        Actor0 = 0,
        Actor1 = 1,
        Count = 2,
    }

    internal enum PxDistanceJointFlag : int
    {
        MaxDistanceEnabled = 2,
        MinDistanceEnabled = 4,
        SpringEnabled = 8,
    }

    [Flags]
    internal enum PxDistanceJointFlags : ushort
    {
        MaxDistanceEnabled = 1 << 1,
        MinDistanceEnabled = 1 << 2,
        SpringEnabled = 1 << 3,
    }

    internal enum PxPrismaticJointFlag : int
    {
        LimitEnabled = 2,
    }

    [Flags]
    internal enum PxPrismaticJointFlags : ushort
    {
        LimitEnabled = 1 << 1,
    }

    internal enum PxRevoluteJointFlag : int
    {
        LimitEnabled = 1,
        DriveEnabled = 2,
        DriveFreespin = 4,
    }

    [Flags]
    internal enum PxRevoluteJointFlags : ushort
    {
        LimitEnabled = 1 << 0,
        DriveEnabled = 1 << 1,
        DriveFreespin = 1 << 2,
    }

    internal enum PxSphericalJointFlag : int
    {
        LimitEnabled = 2,
    }

    [Flags]
    internal enum PxSphericalJointFlags : ushort
    {
        LimitEnabled = 1 << 1,
    }

    internal enum PxD6Axis : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        Twist = 3,
        Swing1 = 4,
        Swing2 = 5,
        Count = 6,
    }

    internal enum PxD6Motion : int
    {
        Locked = 0,
        Limited = 1,
        Free = 2,
    }

    internal enum PxD6Drive : int
    {
        X = 0,
        Y = 1,
        Z = 2,
        Swing = 3,
        Twist = 4,
        Slerp = 5,
        Count = 6,
    }

    [Flags]
    internal enum PxD6JointDriveFlags : uint
    {
        Acceleration = 1 << 0,
    }

    internal enum PxFilterOp : int
    {
        PxFilteropAnd = 0,
        PxFilteropOr = 1,
        PxFilteropXor = 2,
        PxFilteropNand = 3,
        PxFilteropNor = 4,
        PxFilteropNxor = 5,
        PxFilteropSwapAnd = 6,
    }

    internal enum PxDefaultCpuDispatcherWaitForWorkMode : int
    {
        WaitForWork = 0,
        YieldThread = 1,
        YieldProcessor = 2,
    }

    [Flags]
    internal enum PxPvdInstrumentationFlags : byte
    {
        Debug = 1 << 0,
        Profile = 1 << 1,
        Memory = 1 << 2,
        All = Debug | Profile | Memory,
    }


}
#endif