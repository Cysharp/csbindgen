// <auto-generated>
// This code is generated via csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
using System;
using System.Runtime.InteropServices;

namespace CsBindgen
{
    public static unsafe partial class LibQuiche
    {
        const string __DllName = "libquiche";

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __va_start(byte** arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __security_init_cookie();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __security_check_cookie(UIntPtr _StackCookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _EXCEPTION_DISPOSITION __C_specific_handler(_EXCEPTION_RECORD* ExceptionRecord, void* EstablisherFrame, _CONTEXT* ContextRecord, _DISPATCHER_CONTEXT* DispatcherContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 _exception_code();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _exception_info();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _abnormal_termination();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _invalid_parameter_noinfo();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* __pctype_func();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* __pwctype_func();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswalnum(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswalpha(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswascii(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswblank(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswcntrl(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswdigit(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswgraph(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswlower(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswprint(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswpunct(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswspace(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswupper(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswxdigit(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int __iswcsymf(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int __iswcsym(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswalnum_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswalpha_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswblank_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswcntrl_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswdigit_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswgraph_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswlower_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswprint_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswpunct_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswspace_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswupper_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswxdigit_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswcsymf_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswcsym_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort towupper(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort towlower(ushort _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iswctype(ushort _C, ushort _Type);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort _towupper_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort _towlower_l(ushort _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iswctype_l(ushort _C, ushort _Type, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isleadbyte(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isleadbyte_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int is_wctype(ushort _C, ushort _Type);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isctype(int _C, int _Type);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isctype_l(int _C, int _Type, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isalpha(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isalpha_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isupper(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isupper_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int islower(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _islower_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isdigit(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isdigit_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isxdigit(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isxdigit_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isspace(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isspace_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ispunct(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ispunct_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isblank(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isblank_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isalnum(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isalnum_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isprint(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isprint_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int isgraph(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _isgraph_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int iscntrl(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _iscntrl_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int toupper(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int tolower(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _tolower(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _tolower_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _toupper(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _toupper_l(int _C, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int __isascii(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int __toascii(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int __iscsymf(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int __iscsym(int _C);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ___mb_cur_max_func();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ___mb_cur_max_l_func(__crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _rotl8(byte Value, byte Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort _rotl16(ushort Value, byte Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _rotr8(byte Value, byte Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort _rotr16(ushort Value, byte Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint _rotl(uint Value, int Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _rotl64(ulong Value, int Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint _rotr(uint Value, int Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _rotr64(ulong Value, int Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int* _errno();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _set_errno(int _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_errno(int* _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32* __doserrno();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _set_doserrno(UInt32 _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_doserrno(UInt32* _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* memchr(void* _Buf, int _Val, ulong _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int memcmp(void* _Buf1, void* _Buf2, ulong _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* memcpy(void* _Dst, void* _Src, ulong _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* memmove(void* _Dst, void* _Src, ulong _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* memset(void* _Dst, int _Val, ulong _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strchr(byte* _Str, int _Val);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strrchr(byte* _Str, int _Ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strstr(byte* _Str, byte* _SubStr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcschr(ushort* _Str, ushort _Ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsrchr(ushort* _Str, ushort _Ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsstr(ushort* _Str, ushort* _SubStr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _memicmp(void* _Buf1, void* _Buf2, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _memicmp_l(void* _Buf1, void* _Buf2, UIntPtr _Size, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* memccpy(void* _Dst, void* _Src, int _Val, ulong _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int memicmp(void* _Buf1, void* _Buf2, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcscat_s(ushort* _Destination, UIntPtr _SizeInWords, ushort* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcscpy_s(ushort* _Destination, UIntPtr _SizeInWords, ushort* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcsncat_s(ushort* _Destination, UIntPtr _SizeInWords, ushort* _Source, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcsncpy_s(ushort* _Destination, UIntPtr _SizeInWords, ushort* _Source, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcstok_s(ushort* _String, ushort* _Delimiter, ushort** _Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcsdup(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcscat(ushort* _Destination, ushort* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcscmp(ushort* _String1, ushort* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcscpy(ushort* _Destination, ushort* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr wcscspn(ushort* _String, ushort* _Control);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong wcslen(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr wcsnlen(ushort* _Source, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsncat(ushort* _Destination, ushort* _Source, UIntPtr _Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcsncmp(ushort* _String1, ushort* _String2, ulong _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsncpy(ushort* _Destination, ushort* _Source, UIntPtr _Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcspbrk(ushort* _String, ushort* _Control);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr wcsspn(ushort* _String, ushort* _Control);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcstok(ushort* _String, ushort* _Delimiter, ushort** _Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcserror(int _ErrorNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcserror_s(ushort* _Buffer, UIntPtr _SizeInWords, int _ErrorNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* __wcserror(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int __wcserror_s(ushort* _Buffer, UIntPtr _SizeInWords, ushort* _ErrorMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsicmp(ushort* _String1, ushort* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsicmp_l(ushort* _String1, ushort* _String2, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsnicmp(ushort* _String1, ushort* _String2, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsnicmp_l(ushort* _String1, ushort* _String2, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsnset_s(ushort* _Destination, UIntPtr _SizeInWords, ushort _Value, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcsnset(ushort* _String, ushort _Value, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcsrev(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsset_s(ushort* _Destination, UIntPtr _SizeInWords, ushort _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcsset(ushort* _String, ushort _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcslwr_s(ushort* _String, UIntPtr _SizeInWords);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcslwr(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcslwr_s_l(ushort* _String, UIntPtr _SizeInWords, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcslwr_l(ushort* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsupr_s(ushort* _String, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcsupr(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsupr_s_l(ushort* _String, UIntPtr _Size, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wcsupr_l(ushort* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr wcsxfrm(ushort* _Destination, ushort* _Source, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _wcsxfrm_l(ushort* _Destination, ushort* _Source, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcscoll(ushort* _String1, ushort* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcscoll_l(ushort* _String1, ushort* _String2, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsicoll(ushort* _String1, ushort* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsicoll_l(ushort* _String1, ushort* _String2, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsncoll(ushort* _String1, ushort* _String2, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsncoll_l(ushort* _String1, ushort* _String2, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsnicoll(ushort* _String1, ushort* _String2, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcsnicoll_l(ushort* _String1, ushort* _String2, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsdup(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcsicmp(ushort* _String1, ushort* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcsnicmp(ushort* _String1, ushort* _String2, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsnset(ushort* _String, ushort _Value, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsrev(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsset(ushort* _String, ushort _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcslwr(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* wcsupr(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcsicoll(ushort* _String1, ushort* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strcpy_s(byte* _Destination, UIntPtr _SizeInBytes, byte* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strcat_s(byte* _Destination, UIntPtr _SizeInBytes, byte* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strerror_s(byte* _Buffer, UIntPtr _SizeInBytes, int _ErrorNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strncat_s(byte* _Destination, UIntPtr _SizeInBytes, byte* _Source, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strncpy_s(byte* _Destination, UIntPtr _SizeInBytes, byte* _Source, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strtok_s(byte* _String, byte* _Delimiter, byte** _Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _memccpy(void* _Dst, void* _Src, int _Val, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strcat(byte* _Destination, byte* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strcmp(byte* _Str1, byte* _Str2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strcmpi(byte* _String1, byte* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strcoll(byte* _String1, byte* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strcoll_l(byte* _String1, byte* _String2, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strcpy(byte* _Destination, byte* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong strcspn(byte* _Str, byte* _Control);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strdup(byte* _Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strerror(byte* _ErrorMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strerror_s(byte* _Buffer, UIntPtr _SizeInBytes, byte* _ErrorMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strerror(int _ErrorMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _stricmp(byte* _String1, byte* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _stricoll(byte* _String1, byte* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _stricoll_l(byte* _String1, byte* _String2, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _stricmp_l(byte* _String1, byte* _String2, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong strlen(byte* _Str);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strlwr_s(byte* _String, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strlwr(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strlwr_s_l(byte* _String, UIntPtr _Size, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strlwr_l(byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strncat(byte* _Destination, byte* _Source, ulong _Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strncmp(byte* _Str1, byte* _Str2, ulong _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strnicmp(byte* _String1, byte* _String2, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strnicmp_l(byte* _String1, byte* _String2, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strnicoll(byte* _String1, byte* _String2, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strnicoll_l(byte* _String1, byte* _String2, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strncoll(byte* _String1, byte* _String2, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strncoll_l(byte* _String1, byte* _String2, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr __strncnt(byte* _String, UIntPtr _Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strncpy(byte* _Destination, byte* _Source, ulong _Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr strnlen(byte* _String, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strnset_s(byte* _String, UIntPtr _SizeInBytes, int _Value, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strnset(byte* _Destination, int _Value, UIntPtr _Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strpbrk(byte* _Str, byte* _Control);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strrev(byte* _Str);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strset_s(byte* _Destination, UIntPtr _DestinationSize, int _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strset(byte* _Destination, int _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong strspn(byte* _Str, byte* _Control);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strtok(byte* _String, byte* _Delimiter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strupr_s(byte* _String, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strupr(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strupr_s_l(byte* _String, UIntPtr _Size, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strupr_l(byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong strxfrm(byte* _Destination, byte* _Source, ulong _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _strxfrm_l(byte* _Destination, byte* _Source, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strdup(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strcmpi(byte* _String1, byte* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int stricmp(byte* _String1, byte* _String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strlwr(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int strnicmp(byte* _String1, byte* _String2, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strnset(byte* _String, int _Value, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strrev(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strset(byte* _String, int _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* strupr(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _bittest(Int32* Base, Int32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _bittestandcomplement(Int32* Base, Int32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _bittestandset(Int32* Base, Int32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _bittestandreset(Int32* Base, Int32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _interlockedbittestandset(Int32* Base, Int32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _interlockedbittestandreset(Int32* Base, Int32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _bittest64(long* Base, long Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _bittestandcomplement64(long* Base, long Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _bittestandset64(long* Base, long Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _bittestandreset64(long* Base, long Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _interlockedbittestandset64(long* Base, long Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _interlockedbittestandreset64(long* Base, long Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _BitScanForward(UInt32* Index, UInt32 Mask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _BitScanReverse(UInt32* Index, UInt32 Mask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _BitScanForward64(UInt32* Index, ulong Mask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _BitScanReverse64(UInt32* Index, ulong Mask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short _InterlockedIncrement16(short* Addend);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short _InterlockedDecrement16(short* Addend);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short _InterlockedCompareExchange16(short* Destination, short ExChange, short Comperand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _InterlockedAnd(Int32* Destination, Int32 Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _InterlockedOr(Int32* Destination, Int32 Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _InterlockedXor(Int32* Destination, Int32 Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _InterlockedAnd64(long* Destination, long Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _InterlockedOr64(long* Destination, long Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _InterlockedXor64(long* Destination, long Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _InterlockedIncrement(Int32* Addend);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _InterlockedDecrement(Int32* Addend);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _InterlockedExchange(Int32* Target, Int32 Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _InterlockedExchangeAdd(Int32* Addend, Int32 Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _InterlockedCompareExchange(Int32* Destination, Int32 ExChange, Int32 Comperand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _InterlockedIncrement64(long* Addend);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _InterlockedDecrement64(long* Addend);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _InterlockedExchange64(long* Target, long Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _InterlockedExchangeAdd64(long* Addend, long Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _InterlockedCompareExchange64(long* Destination, long ExChange, long Comperand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _InterlockedCompareExchange128(long* Destination, long ExchangeHigh, long ExchangeLow, long* ComparandResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _InterlockedCompareExchangePointer(void** Destination, void* Exchange, void* Comperand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _InterlockedExchangePointer(void** Target, void* Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _InterlockedExchange8(byte* Target, byte Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short _InterlockedExchange16(short* Destination, short ExChange);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _InterlockedExchangeAdd8(byte* _Addend, byte _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _InterlockedAnd8(byte* Destination, byte Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _InterlockedOr8(byte* Destination, byte Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte _InterlockedXor8(byte* Destination, byte Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short _InterlockedAnd16(short* Destination, short Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short _InterlockedOr16(short* Destination, short Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short _InterlockedXor16(short* Destination, short Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __cpuidex(int* CPUInfo, int Function, int SubLeaf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _mm_clflush(void* Address);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _ReadWriteBarrier();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __faststorefence();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _mm_lfence();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _mm_mfence();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _mm_sfence();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _mm_pause();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _mm_prefetch(byte* a, int sel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _m_prefetchw(void* Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint _mm_getcsr();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _mm_setcsr(uint MxCsr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint __getcallerseflags();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 __segmentlimit(UInt32 Selector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong __readpmc(UInt32 Counter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong __rdtsc();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __movsb(byte Destination, byte* Source, ulong Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __movsw(ushort Destination, ushort* Source, ulong Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __movsd(UInt32 Destination, UInt32* Source, ulong Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __movsq(ulong* Destination, ulong* Source, ulong Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __stosb(byte* Destination, byte Value, ulong Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __stosw(ushort Destination, ushort Value, ulong Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __stosd(UInt32 Destination, UInt32 Value, ulong Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __stosq(ulong* Destination, ulong Value, ulong Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long __mulh(long Multiplier, long Multiplicand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong __umulh(ulong Multiplier, ulong Multiplicand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong __popcnt64(ulong operand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong __shiftleft128(ulong LowPart, ulong HighPart, byte Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong __shiftright128(ulong LowPart, ulong HighPart, byte Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _mul128(long Multiplier, long Multiplicand, long* HighProduct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _umul128(ulong Multiplier, ulong Multiplicand, ulong* HighProduct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte __readgsbyte(UInt32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort __readgsword(UInt32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 __readgsdword(UInt32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong __readgsqword(UInt32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __writegsbyte(UInt32 Offset, byte Data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __writegsword(UInt32 Offset, ushort Data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __writegsdword(UInt32 Offset, UInt32 Data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __writegsqword(UInt32 Offset, ulong Data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __incgsbyte(UInt32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __addgsbyte(UInt32 Offset, byte Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __incgsword(UInt32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __addgsword(UInt32 Offset, ushort Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __incgsdword(UInt32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __addgsdword(UInt32 Offset, UInt32 Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __incgsqword(UInt32 Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void __addgsqword(UInt32 Offset, ulong Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort RtlCaptureStackBackTrace(UInt32 FramesToSkip, UInt32 FramesToCapture, void** BackTrace, UInt32 BackTraceHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlCaptureContext(_CONTEXT* ContextRecord);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlCaptureContext2(_CONTEXT* ContextRecord);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlUnwind(void* TargetFrame, void* TargetIp, _EXCEPTION_RECORD ExceptionRecord, void* ReturnValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte RtlAddFunctionTable(_IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable, UInt32 EntryCount, ulong BaseAddress);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte RtlDeleteFunctionTable(_IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte RtlInstallFunctionTableCallback(ulong TableIdentifier, ulong BaseAddress, UInt32 Length, GET_RUNTIME_FUNCTION_CALLBACK Callback, void* Context, ushort OutOfProcessCallbackDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlAddGrowableFunctionTable(void** DynamicTable, _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionTable, UInt32 EntryCount, UInt32 MaximumEntryCount, ulong RangeBase, ulong RangeEnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlGrowFunctionTable(void* DynamicTable, UInt32 NewEntryCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlDeleteGrowableFunctionTable(void* DynamicTable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _IMAGE_RUNTIME_FUNCTION_ENTRY* RtlLookupFunctionEntry(ulong ControlPc, ulong* ImageBase, _UNWIND_HISTORY_TABLE* HistoryTable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlRestoreContext(_CONTEXT* ContextRecord, _EXCEPTION_RECORD* ExceptionRecord);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlUnwindEx(void* TargetFrame, void* TargetIp, _EXCEPTION_RECORD ExceptionRecord, void* ReturnValue, _CONTEXT* ContextRecord, _UNWIND_HISTORY_TABLE* HistoryTable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option RtlVirtualUnwind(UInt32 HandlerType, ulong ImageBase, ulong ControlPc, _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry, _CONTEXT* ContextRecord, void** HandlerData, ulong* EstablisherFrame, _KNONVOLATILE_CONTEXT_POINTERS* ContextPointers);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlRaiseException(_EXCEPTION_RECORD ExceptionRecord);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RtlPcToFileHeader(void* PcValue, void** BaseOfImage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong RtlCompareMemory(void* Source1, void* Source2, ulong Length);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlInitializeSListHead(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* RtlFirstEntrySList(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* RtlInterlockedPopEntrySList(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* RtlInterlockedPushEntrySList(_SLIST_HEADER* ListHead, _SLIST_ENTRY* ListEntry);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* RtlInterlockedPushListSListEx(_SLIST_HEADER* ListHead, _SLIST_ENTRY* List, _SLIST_ENTRY* ListEnd, UInt32 Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* RtlInterlockedFlushSList(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort RtlQueryDepthSList(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong RtlGetReturnAddressHijackTarget();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong VerSetConditionMask(ulong ConditionMask, UInt32 TypeMask, byte Condition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte RtlGetProductInfo(UInt32 OSMajorVersion, UInt32 OSMinorVersion, UInt32 SpMajorVersion, UInt32 SpMinorVersion, UInt32 ReturnedProductType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlCrc32(void* Buffer, UIntPtr Size, UInt32 InitialCrc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong RtlCrc64(void* Buffer, UIntPtr Size, ulong InitialCrc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _OS_DEPLOYEMENT_STATE_VALUES RtlOsDeploymentState(UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlGetNonVolatileToken(void* NvBuffer, ulong Size, void** NvToken);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlFreeNonVolatileToken(void* NvToken);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlFlushNonVolatileMemory(void* NvToken, void* NvBuffer, ulong Size, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlDrainNonVolatileFlush(void* NvToken);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlWriteNonVolatileMemory(void* NvToken, void* NvDestination, void* Source, ulong Size, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlFillNonVolatileMemory(void* NvToken, void* NvDestination, ulong Size, byte Value, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlFlushNonVolatileMemoryRanges(void* NvToken, _NV_MEMORY_RANGE* NvRanges, ulong NumRanges, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlInitializeCorrelationVector(CORRELATION_VECTOR* CorrelationVector, int Version, _GUID* Guid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlIncrementCorrelationVector(CORRELATION_VECTOR* CorrelationVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlExtendCorrelationVector(CORRELATION_VECTOR* CorrelationVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlValidateCorrelationVector(CORRELATION_VECTOR* Vector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlRaiseCustomSystemEventTrigger(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG* TriggerConfig);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte RtlIsZeroMemory(void* Buffer, ulong Length);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte RtlNormalizeSecurityDescriptor(void** SecurityDescriptor, UInt32 SecurityDescriptorLength, void** NewSecurityDescriptor, UInt32 NewSecurityDescriptorLength, byte CheckOnly);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RtlGetDeviceFamilyInfoEnum(ulong* pullUAPInfo, UInt32* pulDeviceFamily, UInt32* pulDeviceForm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlConvertDeviceFamilyInfoToString(UInt32 pulDeviceFamilyBufferSize, UInt32 pulDeviceFormBufferSize, ushort DeviceFamily, ushort DeviceForm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RtlSwitchedVVI(_OSVERSIONINFOEXW* VersionInfo, UInt32 TypeMask, ulong ConditionMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsApiSetImplemented(byte Contract);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetEnvironmentStringsW(ushort NewEnvironment);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetStdHandle(UInt32 nStdHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetStdHandle(UInt32 nStdHandle, void* hHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetStdHandleEx(UInt32 nStdHandle, void* hHandle, void* phPrevValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte GetCommandLineA();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetCommandLineW();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte GetEnvironmentStrings();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetEnvironmentStringsW();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FreeEnvironmentStringsA(byte penv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FreeEnvironmentStringsW(ushort penv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetEnvironmentVariableA(byte lpName, byte lpBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetEnvironmentVariableW(ushort lpName, ushort lpBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetEnvironmentVariableA(byte lpName, byte lpValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetEnvironmentVariableW(ushort lpName, ushort lpValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ExpandEnvironmentStringsA(byte lpSrc, byte lpDst, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ExpandEnvironmentStringsW(ushort lpSrc, ushort lpDst, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCurrentDirectoryA(byte lpPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCurrentDirectoryW(ushort lpPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCurrentDirectoryA(UInt32 nBufferLength, byte lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCurrentDirectoryW(UInt32 nBufferLength, ushort lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SearchPathW(ushort lpPath, ushort lpFileName, ushort lpExtension, UInt32 nBufferLength, ushort lpBuffer, ushort* lpFilePart);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SearchPathA(byte lpPath, byte lpFileName, byte lpExtension, UInt32 nBufferLength, byte lpBuffer, byte* lpFilePart);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int NeedCurrentDirectoryForExePathA(byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int NeedCurrentDirectoryForExePathW(ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CompareFileTime(_FILETIME* lpFileTime1, _FILETIME* lpFileTime2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateDirectoryA(byte lpPathName, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateDirectoryW(ushort lpPathName, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileA(byte lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, void* hTemplateFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileW(ushort lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, void* hTemplateFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DefineDosDeviceW(UInt32 dwFlags, ushort lpDeviceName, ushort lpTargetPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteFileA(byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteFileW(ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteVolumeMountPointW(ushort lpszVolumeMountPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FileTimeToLocalFileTime(_FILETIME* lpFileTime, _FILETIME* lpLocalFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindClose(void* hFindFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindCloseChangeNotification(void* hChangeHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstChangeNotificationA(byte lpPathName, int bWatchSubtree, UInt32 dwNotifyFilter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstChangeNotificationW(ushort lpPathName, int bWatchSubtree, UInt32 dwNotifyFilter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileA(byte lpFileName, _WIN32_FIND_DATAA* lpFindFileData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileW(ushort lpFileName, _WIN32_FIND_DATAW* lpFindFileData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileExA(byte lpFileName, _FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, _FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, UInt32 dwAdditionalFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileExW(ushort lpFileName, _FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, _FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, UInt32 dwAdditionalFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstVolumeW(ushort lpszVolumeName, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextChangeNotification(void* hChangeHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextFileA(void* hFindFile, _WIN32_FIND_DATAA* lpFindFileData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextFileW(void* hFindFile, _WIN32_FIND_DATAW* lpFindFileData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextVolumeW(void* hFindVolume, ushort lpszVolumeName, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindVolumeClose(void* hFindVolume);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlushFileBuffers(void* hFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDiskFreeSpaceA(byte lpRootPathName, UInt32 lpSectorsPerCluster, UInt32 lpBytesPerSector, UInt32 lpNumberOfFreeClusters, UInt32 lpTotalNumberOfClusters);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDiskFreeSpaceW(ushort lpRootPathName, UInt32 lpSectorsPerCluster, UInt32 lpBytesPerSector, UInt32 lpNumberOfFreeClusters, UInt32 lpTotalNumberOfClusters);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDiskFreeSpaceExA(byte lpDirectoryName, _ULARGE_INTEGER lpFreeBytesAvailableToCaller, _ULARGE_INTEGER lpTotalNumberOfBytes, _ULARGE_INTEGER lpTotalNumberOfFreeBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDiskFreeSpaceExW(ushort lpDirectoryName, _ULARGE_INTEGER lpFreeBytesAvailableToCaller, _ULARGE_INTEGER lpTotalNumberOfBytes, _ULARGE_INTEGER lpTotalNumberOfFreeBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetDiskSpaceInformationA(byte rootPath, DISK_SPACE_INFORMATION* diskSpaceInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetDiskSpaceInformationW(ushort rootPath, DISK_SPACE_INFORMATION* diskSpaceInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDriveTypeA(byte lpRootPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDriveTypeW(ushort lpRootPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFileAttributesA(byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFileAttributesW(ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileAttributesExA(byte lpFileName, _GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileAttributesExW(ushort lpFileName, _GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileInformationByHandle(void* hFile, _BY_HANDLE_FILE_INFORMATION* lpFileInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFileSize(void* hFile, UInt32 lpFileSizeHigh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileSizeEx(void* hFile, _LARGE_INTEGER lpFileSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFileType(void* hFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFinalPathNameByHandleA(void* hFile, byte lpszFilePath, UInt32 cchFilePath, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFinalPathNameByHandleW(void* hFile, ushort lpszFilePath, UInt32 cchFilePath, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileTime(void* hFile, _FILETIME* lpCreationTime, _FILETIME* lpLastAccessTime, _FILETIME* lpLastWriteTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFullPathNameW(ushort lpFileName, UInt32 nBufferLength, ushort lpBuffer, ushort* lpFilePart);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFullPathNameA(byte lpFileName, UInt32 nBufferLength, byte lpBuffer, byte* lpFilePart);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLogicalDrives();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLogicalDriveStringsW(UInt32 nBufferLength, ushort lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLongPathNameA(byte lpszShortPath, byte lpszLongPath, UInt32 cchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLongPathNameW(ushort lpszShortPath, ushort lpszLongPath, UInt32 cchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetShortPathNameW(ushort lpszLongPath, ushort lpszShortPath, UInt32 cchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetTempFileNameW(ushort lpPathName, ushort lpPrefixString, uint uUnique, ushort lpTempFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumeInformationByHandleW(void* hFile, ushort lpVolumeNameBuffer, UInt32 nVolumeNameSize, UInt32 lpVolumeSerialNumber, UInt32 lpMaximumComponentLength, UInt32 lpFileSystemFlags, ushort lpFileSystemNameBuffer, UInt32 nFileSystemNameSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumeInformationW(ushort lpRootPathName, ushort lpVolumeNameBuffer, UInt32 nVolumeNameSize, UInt32 lpVolumeSerialNumber, UInt32 lpMaximumComponentLength, UInt32 lpFileSystemFlags, ushort lpFileSystemNameBuffer, UInt32 nFileSystemNameSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumePathNameW(ushort lpszFileName, ushort lpszVolumePathName, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LocalFileTimeToFileTime(_FILETIME* lpLocalFileTime, _FILETIME* lpFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LockFile(void* hFile, UInt32 dwFileOffsetLow, UInt32 dwFileOffsetHigh, UInt32 nNumberOfBytesToLockLow, UInt32 nNumberOfBytesToLockHigh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LockFileEx(void* hFile, UInt32 dwFlags, UInt32 dwReserved, UInt32 nNumberOfBytesToLockLow, UInt32 nNumberOfBytesToLockHigh, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 QueryDosDeviceW(ushort lpDeviceName, ushort lpTargetPath, UInt32 ucchMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadFile(void* hFile, void* lpBuffer, UInt32 nNumberOfBytesToRead, UInt32 lpNumberOfBytesRead, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadFileEx(void* hFile, void* lpBuffer, UInt32 nNumberOfBytesToRead, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadFileScatter(void* hFile, _FILE_SEGMENT_ELEMENT* aSegmentArray, UInt32 nNumberOfBytesToRead, UInt32 lpReserved, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveDirectoryA(byte lpPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveDirectoryW(ushort lpPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetEndOfFile(void* hFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileAttributesA(byte lpFileName, UInt32 dwFileAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileAttributesW(ushort lpFileName, UInt32 dwFileAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileInformationByHandle(void* hFile, _FILE_INFO_BY_HANDLE_CLASS FileInformationClass, void* lpFileInformation, UInt32 dwBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetFilePointer(void* hFile, Int32 lDistanceToMove, Int32 lpDistanceToMoveHigh, UInt32 dwMoveMethod);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFilePointerEx(void* hFile, _LARGE_INTEGER liDistanceToMove, _LARGE_INTEGER lpNewFilePointer, UInt32 dwMoveMethod);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileTime(void* hFile, _FILETIME* lpCreationTime, _FILETIME* lpLastAccessTime, _FILETIME* lpLastWriteTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileValidData(void* hFile, long ValidDataLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnlockFile(void* hFile, UInt32 dwFileOffsetLow, UInt32 dwFileOffsetHigh, UInt32 nNumberOfBytesToUnlockLow, UInt32 nNumberOfBytesToUnlockHigh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnlockFileEx(void* hFile, UInt32 dwReserved, UInt32 nNumberOfBytesToUnlockLow, UInt32 nNumberOfBytesToUnlockHigh, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteFile(void* hFile, void* lpBuffer, UInt32 nNumberOfBytesToWrite, UInt32 lpNumberOfBytesWritten, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteFileEx(void* hFile, void* lpBuffer, UInt32 nNumberOfBytesToWrite, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteFileGather(void* hFile, _FILE_SEGMENT_ELEMENT* aSegmentArray, UInt32 nNumberOfBytesToWrite, UInt32 lpReserved, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTempPathW(UInt32 nBufferLength, ushort lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumeNameForVolumeMountPointW(ushort lpszVolumeMountPoint, ushort lpszVolumeName, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumePathNamesForVolumeNameW(ushort lpszVolumeName, ushort lpszVolumePathNames, UInt32 cchBufferLength, UInt32 lpcchReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFile2(ushort lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, UInt32 dwCreationDisposition, _CREATEFILE2_EXTENDED_PARAMETERS* pCreateExParams);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileIoOverlappedRange(void* FileHandle, byte OverlappedRangeStart, UInt32 Length);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCompressedFileSizeA(byte lpFileName, UInt32 lpFileSizeHigh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCompressedFileSizeW(ushort lpFileName, UInt32 lpFileSizeHigh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstStreamW(ushort lpFileName, _STREAM_INFO_LEVELS InfoLevel, void* lpFindStreamData, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextStreamW(void* hFindStream, void* lpFindStreamData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AreFileApisANSI();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTempPathA(UInt32 nBufferLength, byte lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileNameW(ushort lpFileName, UInt32 dwFlags, UInt32 StringLength, ushort LinkName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextFileNameW(void* hFindStream, UInt32 StringLength, ushort LinkName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumeInformationA(byte lpRootPathName, byte lpVolumeNameBuffer, UInt32 nVolumeNameSize, UInt32 lpVolumeSerialNumber, UInt32 lpMaximumComponentLength, UInt32 lpFileSystemFlags, byte lpFileSystemNameBuffer, UInt32 nFileSystemNameSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetTempFileNameA(byte lpPathName, byte lpPrefixString, uint uUnique, byte lpTempFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetFileApisToOEM();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetFileApisToANSI();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyFileFromAppW(ushort lpExistingFileName, ushort lpNewFileName, int bFailIfExists);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateDirectoryFromAppW(ushort lpPathName, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileFromAppW(ushort lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, void* hTemplateFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFile2FromAppW(ushort lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, UInt32 dwCreationDisposition, _CREATEFILE2_EXTENDED_PARAMETERS* pCreateExParams);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteFileFromAppW(ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileExFromAppW(ushort lpFileName, _FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, _FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, UInt32 dwAdditionalFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileAttributesExFromAppW(ushort lpFileName, _GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileFromAppW(ushort lpExistingFileName, ushort lpNewFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveDirectoryFromAppW(ushort lpPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReplaceFileFromAppW(ushort lpReplacedFileName, ushort lpReplacementFileName, ushort lpBackupFileName, UInt32 dwReplaceFlags, void* lpExclude, void* lpReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileAttributesFromAppW(ushort lpFileName, UInt32 dwFileAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsDebuggerPresent();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DebugBreak();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void OutputDebugStringA(byte lpOutputString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void OutputDebugStringW(ushort lpOutputString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ContinueDebugEvent(UInt32 dwProcessId, UInt32 dwThreadId, UInt32 dwContinueStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WaitForDebugEvent(_DEBUG_EVENT* lpDebugEvent, UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DebugActiveProcess(UInt32 dwProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DebugActiveProcessStop(UInt32 dwProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckRemoteDebuggerPresent(void* hProcess, int pbDebuggerPresent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WaitForDebugEventEx(_DEBUG_EVENT* lpDebugEvent, UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* EncodePointer(void* Ptr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* DecodePointer(void* Ptr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* EncodeSystemPointer(void* Ptr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* DecodeSystemPointer(void* Ptr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 EncodeRemotePointer(void* ProcessHandle, void* Ptr, void** EncodedPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DecodeRemotePointer(void* ProcessHandle, void* Ptr, void** DecodedPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Beep(UInt32 dwFreq, UInt32 dwDuration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseHandle(void* hObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DuplicateHandle(void* hSourceProcessHandle, void* hSourceHandle, void* hTargetProcessHandle, void* lpTargetHandle, UInt32 dwDesiredAccess, int bInheritHandle, UInt32 dwOptions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CompareObjectHandles(void* hFirstObjectHandle, void* hSecondObjectHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetHandleInformation(void* hObject, UInt32 lpdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetHandleInformation(void* hObject, UInt32 dwMask, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RaiseException(UInt32 dwExceptionCode, UInt32 dwExceptionFlags, UInt32 nNumberOfArguments, ulong* lpArguments);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UnhandledExceptionFilter(_EXCEPTION_POINTERS* ExceptionInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern PTOP_LEVEL_EXCEPTION_FILTER SetUnhandledExceptionFilter(PTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLastError();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetLastError(UInt32 dwErrCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetErrorMode();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SetErrorMode(uint uMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* AddVectoredExceptionHandler(UInt32 First, Option Handler);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RemoveVectoredExceptionHandler(void* Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* AddVectoredContinueHandler(UInt32 First, Option Handler);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RemoveVectoredContinueHandler(void* Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RaiseFailFastException(_EXCEPTION_RECORD pExceptionRecord, _CONTEXT* pContextRecord, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FatalAppExitA(uint uAction, byte lpMessageText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FatalAppExitW(uint uAction, ushort lpMessageText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetThreadErrorMode();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadErrorMode(UInt32 dwNewMode, UInt32 lpOldMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void TerminateProcessOnMemoryExhaustion(ulong FailedAllocationSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 FlsAlloc(Option lpCallback);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FlsGetValue(UInt32 dwFlsIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlsSetValue(UInt32 dwFlsIndex, void* lpFlsData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlsFree(UInt32 dwFlsIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsThreadAFiber();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreatePipe(void* hReadPipe, void* hWritePipe, _SECURITY_ATTRIBUTES* lpPipeAttributes, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ConnectNamedPipe(void* hNamedPipe, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DisconnectNamedPipe(void* hNamedPipe);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetNamedPipeHandleState(void* hNamedPipe, UInt32 lpMode, UInt32 lpMaxCollectionCount, UInt32 lpCollectDataTimeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PeekNamedPipe(void* hNamedPipe, void* lpBuffer, UInt32 nBufferSize, UInt32 lpBytesRead, UInt32 lpTotalBytesAvail, UInt32 lpBytesLeftThisMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TransactNamedPipe(void* hNamedPipe, void* lpInBuffer, UInt32 nInBufferSize, void* lpOutBuffer, UInt32 nOutBufferSize, UInt32 lpBytesRead, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateNamedPipeW(ushort lpName, UInt32 dwOpenMode, UInt32 dwPipeMode, UInt32 nMaxInstances, UInt32 nOutBufferSize, UInt32 nInBufferSize, UInt32 nDefaultTimeOut, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WaitNamedPipeW(ushort lpNamedPipeName, UInt32 nTimeOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeClientComputerNameW(void* Pipe, ushort ClientComputerName, UInt32 ClientComputerNameLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImpersonateNamedPipeClient(void* hNamedPipe);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeInfo(void* hNamedPipe, UInt32 lpFlags, UInt32 lpOutBufferSize, UInt32 lpInBufferSize, UInt32 lpMaxInstances);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeHandleStateW(void* hNamedPipe, UInt32 lpState, UInt32 lpCurInstances, UInt32 lpMaxCollectionCount, UInt32 lpCollectDataTimeout, ushort lpUserName, UInt32 nMaxUserNameSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CallNamedPipeW(ushort lpNamedPipeName, void* lpInBuffer, UInt32 nInBufferSize, void* lpOutBuffer, UInt32 nOutBufferSize, UInt32 lpBytesRead, UInt32 nTimeOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryPerformanceCounter(_LARGE_INTEGER* lpPerformanceCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryPerformanceFrequency(_LARGE_INTEGER* lpFrequency);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* HeapCreate(UInt32 flOptions, ulong dwInitialSize, ulong dwMaximumSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapDestroy(void* hHeap);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* HeapAlloc(void* hHeap, UInt32 dwFlags, ulong dwBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* HeapReAlloc(void* hHeap, UInt32 dwFlags, void* lpMem, ulong dwBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapFree(void* hHeap, UInt32 dwFlags, void* lpMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong HeapSize(void* hHeap, UInt32 dwFlags, void* lpMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetProcessHeap();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong HeapCompact(void* hHeap, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapSetInformation(void* HeapHandle, _HEAP_INFORMATION_CLASS HeapInformationClass, void* HeapInformation, ulong HeapInformationLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapValidate(void* hHeap, UInt32 dwFlags, void* lpMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapSummary(void* hHeap, UInt32 dwFlags, PHEAP_SUMMARY lpSummary);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetProcessHeaps(UInt32 NumberOfHeaps, void* ProcessHeaps);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapLock(void* hHeap);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapUnlock(void* hHeap);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapWalk(void* hHeap, _PROCESS_HEAP_ENTRY* lpEntry);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HeapQueryInformation(void* HeapHandle, _HEAP_INFORMATION_CLASS HeapInformationClass, void* HeapInformation, ulong HeapInformationLength, ulong ReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateIoCompletionPort(void* FileHandle, void* ExistingCompletionPort, ulong CompletionKey, UInt32 NumberOfConcurrentThreads);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetQueuedCompletionStatus(void* CompletionPort, UInt32 lpNumberOfBytesTransferred, ulong* lpCompletionKey, _OVERLAPPED** lpOverlapped, UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetQueuedCompletionStatusEx(void* CompletionPort, _OVERLAPPED_ENTRY* lpCompletionPortEntries, UInt32 ulCount, UInt32 ulNumEntriesRemoved, UInt32 dwMilliseconds, int fAlertable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PostQueuedCompletionStatus(void* CompletionPort, UInt32 dwNumberOfBytesTransferred, ulong dwCompletionKey, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeviceIoControl(void* hDevice, UInt32 dwIoControlCode, void* lpInBuffer, UInt32 nInBufferSize, void* lpOutBuffer, UInt32 nOutBufferSize, UInt32 lpBytesReturned, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetOverlappedResult(void* hFile, _OVERLAPPED* lpOverlapped, UInt32 lpNumberOfBytesTransferred, int bWait);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CancelIoEx(void* hFile, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CancelIo(void* hFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetOverlappedResultEx(void* hFile, _OVERLAPPED* lpOverlapped, UInt32 lpNumberOfBytesTransferred, UInt32 dwMilliseconds, int bAlertable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CancelSynchronousIo(void* hThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void InitializeSRWLock(RTL_SRWLOCK* SRWLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ReleaseSRWLockExclusive(RTL_SRWLOCK* SRWLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ReleaseSRWLockShared(RTL_SRWLOCK* SRWLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AcquireSRWLockExclusive(RTL_SRWLOCK* SRWLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AcquireSRWLockShared(RTL_SRWLOCK* SRWLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte TryAcquireSRWLockExclusive(RTL_SRWLOCK* SRWLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte TryAcquireSRWLockShared(RTL_SRWLOCK* SRWLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void InitializeCriticalSection(PRTL_CRITICAL_SECTION lpCriticalSection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void EnterCriticalSection(PRTL_CRITICAL_SECTION lpCriticalSection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void LeaveCriticalSection(PRTL_CRITICAL_SECTION lpCriticalSection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeCriticalSectionAndSpinCount(PRTL_CRITICAL_SECTION lpCriticalSection, UInt32 dwSpinCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeCriticalSectionEx(PRTL_CRITICAL_SECTION lpCriticalSection, UInt32 dwSpinCount, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetCriticalSectionSpinCount(PRTL_CRITICAL_SECTION lpCriticalSection, UInt32 dwSpinCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TryEnterCriticalSection(PRTL_CRITICAL_SECTION lpCriticalSection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeleteCriticalSection(PRTL_CRITICAL_SECTION lpCriticalSection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void InitOnceInitialize(PRTL_RUN_ONCE InitOnce);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitOnceExecuteOnce(PRTL_RUN_ONCE InitOnce, Option InitFn, void* Parameter, void** Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitOnceBeginInitialize(PRTL_RUN_ONCE lpInitOnce, UInt32 dwFlags, int fPending, void** lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitOnceComplete(PRTL_RUN_ONCE lpInitOnce, UInt32 dwFlags, void* lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void InitializeConditionVariable(RTL_CONDITION_VARIABLE* ConditionVariable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WakeConditionVariable(RTL_CONDITION_VARIABLE* ConditionVariable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WakeAllConditionVariable(RTL_CONDITION_VARIABLE* ConditionVariable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SleepConditionVariableCS(RTL_CONDITION_VARIABLE* ConditionVariable, PRTL_CRITICAL_SECTION CriticalSection, UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SleepConditionVariableSRW(RTL_CONDITION_VARIABLE* ConditionVariable, RTL_SRWLOCK* SRWLock, UInt32 dwMilliseconds, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetEvent(void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ResetEvent(void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReleaseSemaphore(void* hSemaphore, Int32 lReleaseCount, Int32* lpPreviousCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReleaseMutex(void* hMutex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WaitForSingleObject(void* hHandle, UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SleepEx(UInt32 dwMilliseconds, int bAlertable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WaitForSingleObjectEx(void* hHandle, UInt32 dwMilliseconds, int bAlertable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WaitForMultipleObjectsEx(UInt32 nCount, void** lpHandles, int bWaitAll, UInt32 dwMilliseconds, int bAlertable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateMutexA(_SECURITY_ATTRIBUTES* lpMutexAttributes, int bInitialOwner, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateMutexW(_SECURITY_ATTRIBUTES* lpMutexAttributes, int bInitialOwner, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenMutexW(UInt32 dwDesiredAccess, int bInheritHandle, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateEventA(_SECURITY_ATTRIBUTES* lpEventAttributes, int bManualReset, int bInitialState, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateEventW(_SECURITY_ATTRIBUTES* lpEventAttributes, int bManualReset, int bInitialState, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenEventA(UInt32 dwDesiredAccess, int bInheritHandle, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenEventW(UInt32 dwDesiredAccess, int bInheritHandle, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenSemaphoreW(UInt32 dwDesiredAccess, int bInheritHandle, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenWaitableTimerW(UInt32 dwDesiredAccess, int bInheritHandle, ushort lpTimerName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWaitableTimerEx(void* hTimer, _LARGE_INTEGER* lpDueTime, Int32 lPeriod, Option pfnCompletionRoutine, void* lpArgToCompletionRoutine, _REASON_CONTEXT* WakeContext, UInt32 TolerableDelay);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWaitableTimer(void* hTimer, _LARGE_INTEGER* lpDueTime, Int32 lPeriod, Option pfnCompletionRoutine, void* lpArgToCompletionRoutine, int fResume);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CancelWaitableTimer(void* hTimer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateMutexExA(_SECURITY_ATTRIBUTES* lpMutexAttributes, byte lpName, UInt32 dwFlags, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateMutexExW(_SECURITY_ATTRIBUTES* lpMutexAttributes, ushort lpName, UInt32 dwFlags, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateEventExA(_SECURITY_ATTRIBUTES* lpEventAttributes, byte lpName, UInt32 dwFlags, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateEventExW(_SECURITY_ATTRIBUTES* lpEventAttributes, ushort lpName, UInt32 dwFlags, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateSemaphoreExW(_SECURITY_ATTRIBUTES* lpSemaphoreAttributes, Int32 lInitialCount, Int32 lMaximumCount, ushort lpName, UInt32 dwFlags, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateWaitableTimerExW(_SECURITY_ATTRIBUTES* lpTimerAttributes, ushort lpTimerName, UInt32 dwFlags, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnterSynchronizationBarrier(PRTL_BARRIER lpBarrier, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeSynchronizationBarrier(PRTL_BARRIER lpBarrier, Int32 lTotalThreads, Int32 lSpinCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteSynchronizationBarrier(PRTL_BARRIER lpBarrier);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void Sleep(UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WaitOnAddress(void* Address, void* CompareAddress, ulong AddressSize, UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WakeByAddressSingle(void* Address);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WakeByAddressAll(void* Address);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SignalObjectAndWait(void* hObjectToSignal, void* hObjectToWaitOn, UInt32 dwMilliseconds, int bAlertable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WaitForMultipleObjects(UInt32 nCount, void** lpHandles, int bWaitAll, UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateSemaphoreW(_SECURITY_ATTRIBUTES* lpSemaphoreAttributes, Int32 lInitialCount, Int32 lMaximumCount, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateWaitableTimerW(_SECURITY_ATTRIBUTES* lpTimerAttributes, int bManualReset, ushort lpTimerName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void InitializeSListHead(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* InterlockedPopEntrySList(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* InterlockedPushEntrySList(_SLIST_HEADER* ListHead, _SLIST_ENTRY* ListEntry);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* InterlockedPushListSListEx(_SLIST_HEADER* ListHead, _SLIST_ENTRY* List, _SLIST_ENTRY* ListEnd, UInt32 Count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SLIST_ENTRY* InterlockedFlushSList(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort QueryDepthSList(_SLIST_HEADER* ListHead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 QueueUserAPC(Option pfnAPC, void* hThread, ulong dwData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessTimes(void* hProcess, _FILETIME* lpCreationTime, _FILETIME* lpExitTime, _FILETIME* lpKernelTime, _FILETIME* lpUserTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetCurrentProcess();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCurrentProcessId();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TerminateProcess(void* hProcess, uint uExitCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetExitCodeProcess(void* hProcess, UInt32 lpExitCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SwitchToThread();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateThread(_SECURITY_ATTRIBUTES* lpThreadAttributes, ulong dwStackSize, PTHREAD_START_ROUTINE lpStartAddress, void* lpParameter, UInt32 dwCreationFlags, UInt32 lpThreadId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateRemoteThread(void* hProcess, _SECURITY_ATTRIBUTES* lpThreadAttributes, ulong dwStackSize, PTHREAD_START_ROUTINE lpStartAddress, void* lpParameter, UInt32 dwCreationFlags, UInt32 lpThreadId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetCurrentThread();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCurrentThreadId();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenThread(UInt32 dwDesiredAccess, int bInheritHandle, UInt32 dwThreadId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadPriority(void* hThread, int nPriority);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadPriorityBoost(void* hThread, int bDisablePriorityBoost);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadPriorityBoost(void* hThread, int pDisablePriorityBoost);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadPriority(void* hThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TerminateThread(void* hThread, UInt32 dwExitCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetExitCodeThread(void* hThread, UInt32 lpExitCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SuspendThread(void* hThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ResumeThread(void* hThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 TlsAlloc();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* TlsGetValue(UInt32 dwTlsIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TlsSetValue(UInt32 dwTlsIndex, void* lpTlsValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TlsFree(UInt32 dwTlsIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateProcessA(byte lpApplicationName, byte lpCommandLine, _SECURITY_ATTRIBUTES* lpProcessAttributes, _SECURITY_ATTRIBUTES* lpThreadAttributes, int bInheritHandles, UInt32 dwCreationFlags, void* lpEnvironment, byte lpCurrentDirectory, _STARTUPINFOA* lpStartupInfo, _PROCESS_INFORMATION* lpProcessInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateProcessW(ushort lpApplicationName, ushort lpCommandLine, _SECURITY_ATTRIBUTES* lpProcessAttributes, _SECURITY_ATTRIBUTES* lpThreadAttributes, int bInheritHandles, UInt32 dwCreationFlags, void* lpEnvironment, ushort lpCurrentDirectory, _STARTUPINFOW* lpStartupInfo, _PROCESS_INFORMATION* lpProcessInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessShutdownParameters(UInt32 dwLevel, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetProcessVersion(UInt32 ProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetStartupInfoW(_STARTUPINFOW* lpStartupInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateProcessAsUserW(void* hToken, ushort lpApplicationName, ushort lpCommandLine, _SECURITY_ATTRIBUTES* lpProcessAttributes, _SECURITY_ATTRIBUTES* lpThreadAttributes, int bInheritHandles, UInt32 dwCreationFlags, void* lpEnvironment, ushort lpCurrentDirectory, _STARTUPINFOW* lpStartupInfo, _PROCESS_INFORMATION* lpProcessInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadToken(void* Thread, void* Token);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenProcessToken(void* ProcessHandle, UInt32 DesiredAccess, void* TokenHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenThreadToken(void* ThreadHandle, UInt32 DesiredAccess, int OpenAsSelf, void* TokenHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPriorityClass(void* hProcess, UInt32 dwPriorityClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPriorityClass(void* hProcess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadStackGuarantee(UInt32 StackSizeInBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ProcessIdToSessionId(UInt32 dwProcessId, UInt32* pSessionId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetProcessId(void* Process);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetThreadId(void* Thread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FlushProcessWriteBuffers();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetProcessIdOfThread(void* Thread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeProcThreadAttributeList(_PROC_THREAD_ATTRIBUTE_LIST* lpAttributeList, UInt32 dwAttributeCount, UInt32 dwFlags, ulong lpSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeleteProcThreadAttributeList(_PROC_THREAD_ATTRIBUTE_LIST* lpAttributeList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateProcThreadAttribute(_PROC_THREAD_ATTRIBUTE_LIST* lpAttributeList, UInt32 dwFlags, ulong Attribute, void* lpValue, ulong cbSize, void* lpPreviousValue, ulong lpReturnSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessDynamicEHContinuationTargets(void* Process, ushort NumberOfTargets, _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET* Targets);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessDynamicEnforcedCetCompatibleRanges(void* Process, ushort NumberOfRanges, _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE* Ranges);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessAffinityUpdateMode(void* hProcess, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryProcessAffinityUpdateMode(void* hProcess, UInt32 lpdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateRemoteThreadEx(void* hProcess, _SECURITY_ATTRIBUTES* lpThreadAttributes, ulong dwStackSize, PTHREAD_START_ROUTINE lpStartAddress, void* lpParameter, UInt32 dwCreationFlags, _PROC_THREAD_ATTRIBUTE_LIST* lpAttributeList, UInt32 lpThreadId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetCurrentThreadStackLimits(ulong* LowLimit, ulong* HighLimit);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadContext(void* hThread, _CONTEXT* lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessMitigationPolicy(void* hProcess, _PROCESS_MITIGATION_POLICY MitigationPolicy, void* lpBuffer, ulong dwLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadContext(void* hThread, _CONTEXT* lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessMitigationPolicy(_PROCESS_MITIGATION_POLICY MitigationPolicy, void* lpBuffer, ulong dwLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlushInstructionCache(void* hProcess, void* lpBaseAddress, ulong dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadTimes(void* hThread, _FILETIME* lpCreationTime, _FILETIME* lpExitTime, _FILETIME* lpKernelTime, _FILETIME* lpUserTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenProcess(UInt32 dwDesiredAccess, int bInheritHandle, UInt32 dwProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsProcessorFeaturePresent(UInt32 ProcessorFeature);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessHandleCount(void* hProcess, UInt32 pdwHandleCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCurrentProcessorNumber();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadIdealProcessorEx(void* hThread, _PROCESSOR_NUMBER* lpIdealProcessor, _PROCESSOR_NUMBER* lpPreviousIdealProcessor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadIdealProcessorEx(void* hThread, _PROCESSOR_NUMBER* lpIdealProcessor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetCurrentProcessorNumberEx(_PROCESSOR_NUMBER* ProcNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessPriorityBoost(void* hProcess, int pDisablePriorityBoost);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessPriorityBoost(void* hProcess, int bDisablePriorityBoost);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadIOPendingFlag(void* hThread, int lpIOIsPending);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemTimes(_FILETIME* lpIdleTime, _FILETIME* lpKernelTime, _FILETIME* lpUserTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadInformation(void* hThread, _THREAD_INFORMATION_CLASS ThreadInformationClass, void* ThreadInformation, UInt32 ThreadInformationSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadInformation(void* hThread, _THREAD_INFORMATION_CLASS ThreadInformationClass, void* ThreadInformation, UInt32 ThreadInformationSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsProcessCritical(void* hProcess, int Critical);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProtectedPolicy(_GUID PolicyGuid, ulong PolicyValue, ulong* OldPolicyValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryProtectedPolicy(_GUID PolicyGuid, ulong* PolicyValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetThreadIdealProcessor(void* hThread, UInt32 dwIdealProcessor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessInformation(void* hProcess, _PROCESS_INFORMATION_CLASS ProcessInformationClass, void* ProcessInformation, UInt32 ProcessInformationSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessInformation(void* hProcess, _PROCESS_INFORMATION_CLASS ProcessInformationClass, void* ProcessInformation, UInt32 ProcessInformationSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemCpuSetInformation(_SYSTEM_CPU_SET_INFORMATION* Information, UInt32 BufferLength, UInt32 ReturnedLength, void* Process, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessDefaultCpuSets(void* Process, UInt32 CpuSetIds, UInt32 CpuSetIdCount, UInt32 RequiredIdCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessDefaultCpuSets(void* Process, UInt32* CpuSetIds, UInt32 CpuSetIdCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadSelectedCpuSets(void* Thread, UInt32 CpuSetIds, UInt32 CpuSetIdCount, UInt32 RequiredIdCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadSelectedCpuSets(void* Thread, UInt32* CpuSetIds, UInt32 CpuSetIdCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateProcessAsUserA(void* hToken, byte lpApplicationName, byte lpCommandLine, _SECURITY_ATTRIBUTES* lpProcessAttributes, _SECURITY_ATTRIBUTES* lpThreadAttributes, int bInheritHandles, UInt32 dwCreationFlags, void* lpEnvironment, byte lpCurrentDirectory, _STARTUPINFOA* lpStartupInfo, _PROCESS_INFORMATION* lpProcessInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessShutdownParameters(UInt32 lpdwLevel, UInt32 lpdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetThreadDescription(void* hThread, ushort lpThreadDescription);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetThreadDescription(void* hThread, ushort* ppszThreadDescription);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GlobalMemoryStatusEx(_MEMORYSTATUSEX* lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetSystemInfo(_SYSTEM_INFO* lpSystemInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetSystemTime(_SYSTEMTIME* lpSystemTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetSystemTimeAsFileTime(_FILETIME* lpSystemTimeAsFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetLocalTime(_SYSTEMTIME* lpSystemTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsUserCetAvailableInEnvironment(UInt32 UserCetEnvironment);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemLeapSecondInformation(int Enabled, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetVersion();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetLocalTime(_SYSTEMTIME* lpSystemTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTickCount();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong GetTickCount64();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemTimeAdjustment(UInt32 lpTimeAdjustment, UInt32 lpTimeIncrement, int lpTimeAdjustmentDisabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemTimeAdjustmentPrecise(ulong* lpTimeAdjustment, ulong* lpTimeIncrement, int lpTimeAdjustmentDisabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemDirectoryA(byte lpBuffer, uint uSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemDirectoryW(ushort lpBuffer, uint uSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetWindowsDirectoryA(byte lpBuffer, uint uSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetWindowsDirectoryW(ushort lpBuffer, uint uSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemWindowsDirectoryA(byte lpBuffer, uint uSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemWindowsDirectoryW(ushort lpBuffer, uint uSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetComputerNameExA(_COMPUTER_NAME_FORMAT NameType, byte lpBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetComputerNameExW(_COMPUTER_NAME_FORMAT NameType, ushort lpBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetComputerNameExW(_COMPUTER_NAME_FORMAT NameType, ushort lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSystemTime(_SYSTEMTIME* lpSystemTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVersionExA(_OSVERSIONINFOA* lpVersionInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVersionExW(_OSVERSIONINFOW* lpVersionInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLogicalProcessorInformation(_SYSTEM_LOGICAL_PROCESSOR_INFORMATION* Buffer, UInt32 ReturnedLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLogicalProcessorInformationEx(_LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType, _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX* Buffer, UInt32 ReturnedLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetNativeSystemInfo(_SYSTEM_INFO* lpSystemInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetSystemTimePreciseAsFileTime(_FILETIME* lpSystemTimeAsFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProductInfo(UInt32 dwOSMajorVersion, UInt32 dwOSMinorVersion, UInt32 dwSpMajorVersion, UInt32 dwSpMinorVersion, UInt32 pdwReturnedProductType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetOsSafeBootMode(UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint EnumSystemFirmwareTables(UInt32 FirmwareTableProviderSignature, void* pFirmwareTableEnumBuffer, UInt32 BufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemFirmwareTable(UInt32 FirmwareTableProviderSignature, UInt32 FirmwareTableID, void* pFirmwareTableBuffer, UInt32 BufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DnsHostnameToComputerNameExW(ushort Hostname, ushort ComputerName, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPhysicallyInstalledSystemMemory(ulong TotalMemoryInKilobytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetComputerNameEx2W(_COMPUTER_NAME_FORMAT NameType, UInt32 Flags, ushort lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSystemTimeAdjustment(UInt32 dwTimeAdjustment, int bTimeAdjustmentDisabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSystemTimeAdjustmentPrecise(ulong dwTimeAdjustment, int bTimeAdjustmentDisabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InstallELAMCertificateInfo(void* ELAMFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessorSystemCycleTime(ushort Group, _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION* Buffer, UInt32 ReturnedLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetOsManufacturingMode(int pbEnabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetIntegratedDisplaySize(double* sizeInInches);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetComputerNameA(byte lpComputerName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetComputerNameW(ushort lpComputerName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetComputerNameExA(_COMPUTER_NAME_FORMAT NameType, byte lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* VirtualAlloc(void* lpAddress, ulong dwSize, UInt32 flAllocationType, UInt32 flProtect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VirtualProtect(void* lpAddress, ulong dwSize, UInt32 flNewProtect, UInt32 lpflOldProtect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VirtualFree(void* lpAddress, ulong dwSize, UInt32 dwFreeType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong VirtualQuery(void* lpAddress, _MEMORY_BASIC_INFORMATION* lpBuffer, ulong dwLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* VirtualAllocEx(void* hProcess, void* lpAddress, ulong dwSize, UInt32 flAllocationType, UInt32 flProtect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VirtualProtectEx(void* hProcess, void* lpAddress, ulong dwSize, UInt32 flNewProtect, UInt32 lpflOldProtect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong VirtualQueryEx(void* hProcess, void* lpAddress, _MEMORY_BASIC_INFORMATION* lpBuffer, ulong dwLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadProcessMemory(void* hProcess, void* lpBaseAddress, void* lpBuffer, ulong nSize, ulong* lpNumberOfBytesRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteProcessMemory(void* hProcess, void* lpBaseAddress, void* lpBuffer, ulong nSize, ulong* lpNumberOfBytesWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileMappingW(void* hFile, _SECURITY_ATTRIBUTES* lpFileMappingAttributes, UInt32 flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenFileMappingW(UInt32 dwDesiredAccess, int bInheritHandle, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* MapViewOfFile(void* hFileMappingObject, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, ulong dwNumberOfBytesToMap);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* MapViewOfFileEx(void* hFileMappingObject, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, ulong dwNumberOfBytesToMap, void* lpBaseAddress);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VirtualFreeEx(void* hProcess, void* lpAddress, ulong dwSize, UInt32 dwFreeType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlushViewOfFile(void* lpBaseAddress, ulong dwNumberOfBytesToFlush);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnmapViewOfFile(void* lpBaseAddress);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong GetLargePageMinimum();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessWorkingSetSizeEx(void* hProcess, ulong lpMinimumWorkingSetSize, ulong lpMaximumWorkingSetSize, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessWorkingSetSizeEx(void* hProcess, ulong dwMinimumWorkingSetSize, ulong dwMaximumWorkingSetSize, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VirtualLock(void* lpAddress, ulong dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VirtualUnlock(void* lpAddress, ulong dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetWriteWatch(UInt32 dwFlags, void* lpBaseAddress, ulong dwRegionSize, void** lpAddresses, ulong* lpdwCount, UInt32 lpdwGranularity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ResetWriteWatch(void* lpBaseAddress, ulong dwRegionSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateMemoryResourceNotification(_MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryMemoryResourceNotification(void* ResourceNotificationHandle, int ResourceState);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemFileCacheSize(ulong lpMinimumFileCacheSize, ulong lpMaximumFileCacheSize, UInt32 lpFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSystemFileCacheSize(ulong MinimumFileCacheSize, ulong MaximumFileCacheSize, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileMappingNumaW(void* hFile, _SECURITY_ATTRIBUTES* lpFileMappingAttributes, UInt32 flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, ushort lpName, UInt32 nndPreferred);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PrefetchVirtualMemory(void* hProcess, ulong NumberOfEntries, _WIN32_MEMORY_RANGE_ENTRY* VirtualAddresses, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileMappingFromApp(void* hFile, _SECURITY_ATTRIBUTES* SecurityAttributes, UInt32 PageProtection, ulong MaximumSize, ushort Name);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* MapViewOfFileFromApp(void* hFileMappingObject, UInt32 DesiredAccess, ulong FileOffset, ulong NumberOfBytesToMap);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnmapViewOfFileEx(void* BaseAddress, UInt32 UnmapFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AllocateUserPhysicalPages(void* hProcess, ulong* NumberOfPages, ulong* PageArray);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FreeUserPhysicalPages(void* hProcess, ulong* NumberOfPages, ulong* PageArray);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MapUserPhysicalPages(void* VirtualAddress, ulong NumberOfPages, ulong* PageArray);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AllocateUserPhysicalPagesNuma(void* hProcess, ulong* NumberOfPages, ulong* PageArray, UInt32 nndPreferred);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* VirtualAllocExNuma(void* hProcess, void* lpAddress, ulong dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMemoryErrorHandlingCapabilities(UInt32 Capabilities);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RegisterBadMemoryNotification(Option Callback);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterBadMemoryNotification(void* RegistrationHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 OfferVirtualMemory(void* VirtualAddress, ulong Size, int Priority);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ReclaimVirtualMemory(void* VirtualAddress, ulong Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DiscardVirtualMemory(void* VirtualAddress, ulong Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessValidCallTargets(void* hProcess, void* VirtualAddress, ulong RegionSize, UInt32 NumberOfOffsets, _CFG_CALL_TARGET_INFO* OffsetInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessValidCallTargetsForMappedView(void* Process, void* VirtualAddress, ulong RegionSize, UInt32 NumberOfOffsets, _CFG_CALL_TARGET_INFO* OffsetInformation, void* Section, ulong ExpectedFileOffset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* VirtualAllocFromApp(void* BaseAddress, ulong Size, UInt32 AllocationType, UInt32 Protection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VirtualProtectFromApp(void* Address, ulong Size, UInt32 NewProtection, UInt32 OldProtection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenFileMappingFromApp(UInt32 DesiredAccess, int InheritHandle, ushort Name);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryVirtualMemoryInformation(void* Process, void* VirtualAddress, int MemoryInformationClass, void* MemoryInformation, ulong MemoryInformationSize, ulong ReturnSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* MapViewOfFileNuma2(void* FileMappingHandle, void* ProcessHandle, ulong Offset, void* BaseAddress, ulong ViewSize, UInt32 AllocationType, UInt32 PageProtection, UInt32 PreferredNode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnmapViewOfFile2(void* Process, void* BaseAddress, UInt32 UnmapFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VirtualUnlockEx(void* Process, void* Address, ulong Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* VirtualAlloc2(void* Process, void* BaseAddress, ulong Size, UInt32 AllocationType, UInt32 PageProtection, MEM_EXTENDED_PARAMETER* ExtendedParameters, UInt32 ParameterCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* MapViewOfFile3(void* FileMapping, void* Process, void* BaseAddress, ulong Offset, ulong ViewSize, UInt32 AllocationType, UInt32 PageProtection, MEM_EXTENDED_PARAMETER* ExtendedParameters, UInt32 ParameterCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* VirtualAlloc2FromApp(void* Process, void* BaseAddress, ulong Size, UInt32 AllocationType, UInt32 PageProtection, MEM_EXTENDED_PARAMETER* ExtendedParameters, UInt32 ParameterCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* MapViewOfFile3FromApp(void* FileMapping, void* Process, void* BaseAddress, ulong Offset, ulong ViewSize, UInt32 AllocationType, UInt32 PageProtection, MEM_EXTENDED_PARAMETER* ExtendedParameters, UInt32 ParameterCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileMapping2(void* File, _SECURITY_ATTRIBUTES* SecurityAttributes, UInt32 DesiredAccess, UInt32 PageProtection, UInt32 AllocationAttributes, ulong MaximumSize, ushort Name, MEM_EXTENDED_PARAMETER* ExtendedParameters, UInt32 ParameterCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsEnclaveTypeSupported(UInt32 flEnclaveType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateEnclave(void* hProcess, void* lpAddress, ulong dwSize, ulong dwInitialCommitment, UInt32 flEnclaveType, void* lpEnclaveInformation, UInt32 dwInfoLength, UInt32 lpEnclaveError);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LoadEnclaveData(void* hProcess, void* lpAddress, void* lpBuffer, ulong nSize, UInt32 flProtect, void* lpPageInformation, UInt32 dwInfoLength, ulong lpNumberOfBytesWritten, UInt32 lpEnclaveError);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeEnclave(void* hProcess, void* lpAddress, void* lpEnclaveInformation, UInt32 dwInfoLength, UInt32 lpEnclaveError);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LoadEnclaveImageA(void* lpEnclaveAddress, byte lpImageName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LoadEnclaveImageW(void* lpEnclaveAddress, ushort lpImageName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CallEnclave(PENCLAVE_ROUTINE lpRoutine, void* lpParameter, int fWaitForThread, void** lpReturnValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TerminateEnclave(void* lpAddress, int fWait);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteEnclave(void* lpAddress);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueueUserWorkItem(PTHREAD_START_ROUTINE Function, void* Context, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterWaitEx(void* WaitHandle, void* CompletionEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateTimerQueue();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateTimerQueueTimer(void* phNewTimer, void* TimerQueue, WAITORTIMERCALLBACKFUNC Callback, void* Parameter, UInt32 DueTime, UInt32 Period, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeTimerQueueTimer(void* TimerQueue, void* Timer, UInt32 DueTime, UInt32 Period);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteTimerQueueTimer(void* TimerQueue, void* Timer, void* CompletionEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteTimerQueueEx(void* TimerQueue, void* CompletionEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _TP_POOL* CreateThreadpool(void* reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetThreadpoolThreadMaximum(_TP_POOL* ptpp, UInt32 cthrdMost);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadpoolThreadMinimum(_TP_POOL* ptpp, UInt32 cthrdMic);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadpoolStackInformation(_TP_POOL* ptpp, _TP_POOL_STACK_INFORMATION* ptpsi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryThreadpoolStackInformation(_TP_POOL* ptpp, _TP_POOL_STACK_INFORMATION* ptpsi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CloseThreadpool(_TP_POOL* ptpp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _TP_CLEANUP_GROUP* CreateThreadpoolCleanupGroup();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CloseThreadpoolCleanupGroupMembers(_TP_CLEANUP_GROUP* ptpcg, int fCancelPendingCallbacks, void* pvCleanupContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CloseThreadpoolCleanupGroup(_TP_CLEANUP_GROUP* ptpcg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetEventWhenCallbackReturns(_TP_CALLBACK_INSTANCE* pci, void* evt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ReleaseSemaphoreWhenCallbackReturns(_TP_CALLBACK_INSTANCE* pci, void* sem, UInt32 crel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ReleaseMutexWhenCallbackReturns(_TP_CALLBACK_INSTANCE* pci, void* mut_);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void LeaveCriticalSectionWhenCallbackReturns(_TP_CALLBACK_INSTANCE* pci, PRTL_CRITICAL_SECTION pcs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreeLibraryWhenCallbackReturns(_TP_CALLBACK_INSTANCE* pci, HINSTANCE__* mod_);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CallbackMayRunLong(_TP_CALLBACK_INSTANCE* pci);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DisassociateCurrentThreadFromCallback(_TP_CALLBACK_INSTANCE* pci);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TrySubmitThreadpoolCallback(Option pfns, void* pv, TP_CALLBACK_ENVIRON_V3* pcbe);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _TP_WORK* CreateThreadpoolWork(Option pfnwk, void* pv, TP_CALLBACK_ENVIRON_V3* pcbe);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SubmitThreadpoolWork(_TP_WORK* pwk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WaitForThreadpoolWorkCallbacks(_TP_WORK* pwk, int fCancelPendingCallbacks);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CloseThreadpoolWork(_TP_WORK* pwk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _TP_TIMER* CreateThreadpoolTimer(Option pfnti, void* pv, TP_CALLBACK_ENVIRON_V3* pcbe);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetThreadpoolTimer(_TP_TIMER* pti, _FILETIME* pftDueTime, UInt32 msPeriod, UInt32 msWindowLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsThreadpoolTimerSet(_TP_TIMER* pti);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WaitForThreadpoolTimerCallbacks(_TP_TIMER* pti, int fCancelPendingCallbacks);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CloseThreadpoolTimer(_TP_TIMER* pti);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _TP_WAIT* CreateThreadpoolWait(Option pfnwa, void* pv, TP_CALLBACK_ENVIRON_V3* pcbe);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetThreadpoolWait(_TP_WAIT* pwa, void* h, _FILETIME* pftTimeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WaitForThreadpoolWaitCallbacks(_TP_WAIT* pwa, int fCancelPendingCallbacks);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CloseThreadpoolWait(_TP_WAIT* pwa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _TP_IO* CreateThreadpoolIo(void* fl, Option pfnio, void* pv, TP_CALLBACK_ENVIRON_V3* pcbe);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void StartThreadpoolIo(_TP_IO* pio);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CancelThreadpoolIo(_TP_IO* pio);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WaitForThreadpoolIoCallbacks(_TP_IO* pio, int fCancelPendingCallbacks);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CloseThreadpoolIo(_TP_IO* pio);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadpoolTimerEx(_TP_TIMER* pti, _FILETIME* pftDueTime, UInt32 msPeriod, UInt32 msWindowLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadpoolWaitEx(_TP_WAIT* pwa, void* h, _FILETIME* pftTimeout, void* Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsProcessInJob(void* ProcessHandle, void* JobHandle, int Result);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateJobObjectW(_SECURITY_ATTRIBUTES* lpJobAttributes, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreeMemoryJobObject(void* Buffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenJobObjectW(UInt32 dwDesiredAccess, int bInheritHandle, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AssignProcessToJobObject(void* hJob, void* hProcess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TerminateJobObject(void* hJob, uint uExitCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetInformationJobObject(void* hJob, _JOBOBJECTINFOCLASS JobObjectInformationClass, void* lpJobObjectInformation, UInt32 cbJobObjectInformationLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetIoRateControlInformationJobObject(void* hJob, JOBOBJECT_IO_RATE_CONTROL_INFORMATION* IoRateControlInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryInformationJobObject(void* hJob, _JOBOBJECTINFOCLASS JobObjectInformationClass, void* lpJobObjectInformation, UInt32 cbJobObjectInformationLength, UInt32 lpReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 QueryIoRateControlInformationJobObject(void* hJob, ushort VolumeName, JOBOBJECT_IO_RATE_CONTROL_INFORMATION** InfoBlocks, UInt32* InfoBlockCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Wow64DisableWow64FsRedirection(void** OldValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Wow64RevertWow64FsRedirection(void* OlValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWow64Process(void* hProcess, int Wow64Process);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemWow64DirectoryA(byte lpBuffer, uint uSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemWow64DirectoryW(ushort lpBuffer, uint uSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort Wow64SetThreadDefaultGuestMachine(ushort Machine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWow64Process2(void* hProcess, ushort* pProcessMachine, ushort* pNativeMachine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemWow64Directory2A(byte lpBuffer, uint uSize, ushort ImageFileMachineType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemWow64Directory2W(ushort lpBuffer, uint uSize, ushort ImageFileMachineType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IsWow64GuestMachineSupported(ushort WowGuestMachine, int* MachineIsSupported);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Wow64GetThreadContext(void* hThread, _WOW64_CONTEXT lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Wow64SetThreadContext(void* hThread, _WOW64_CONTEXT* lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 Wow64SuspendThread(void* hThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DisableThreadLibraryCalls(HINSTANCE__* hLibModule);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRSRC__* FindResourceExW(HINSTANCE__* hModule, ushort lpType, ushort lpName, ushort wLanguage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindStringOrdinal(UInt32 dwFindStringOrdinalFlags, ushort lpStringSource, int cchSource, ushort lpStringValue, int cchValue, int bIgnoreCase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FreeLibrary(HINSTANCE__* hLibModule);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FreeResource(void* hResData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetModuleFileNameA(HINSTANCE__* hModule, byte lpFilename, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetModuleFileNameW(HINSTANCE__* hModule, ushort lpFilename, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* GetModuleHandleA(byte lpModuleName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* GetModuleHandleW(ushort lpModuleName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetModuleHandleExA(UInt32 dwFlags, byte lpModuleName, HINSTANCE__** phModule);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetModuleHandleExW(UInt32 dwFlags, ushort lpModuleName, HINSTANCE__** phModule);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option GetProcAddress(HINSTANCE__* hModule, byte lpProcName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* LoadLibraryExA(byte lpLibFileName, void* hFile, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* LoadLibraryExW(ushort lpLibFileName, void* hFile, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LoadResource(HINSTANCE__* hModule, HRSRC__* hResInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LoadStringA(HINSTANCE__* hInstance, uint uID, byte lpBuffer, int cchBufferMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LoadStringW(HINSTANCE__* hInstance, uint uID, ushort lpBuffer, int cchBufferMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LockResource(void* hResData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SizeofResource(HINSTANCE__* hModule, HRSRC__* hResInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* AddDllDirectory(ushort NewDirectory);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveDllDirectory(void* Cookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDefaultDllDirectories(UInt32 DirectoryFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceLanguagesExA(HINSTANCE__* hModule, byte lpType, byte lpName, Option lpEnumFunc, long lParam, UInt32 dwFlags, ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceLanguagesExW(HINSTANCE__* hModule, ushort lpType, ushort lpName, Option lpEnumFunc, long lParam, UInt32 dwFlags, ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceNamesExA(HINSTANCE__* hModule, byte lpType, Option lpEnumFunc, long lParam, UInt32 dwFlags, ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceNamesExW(HINSTANCE__* hModule, ushort lpType, Option lpEnumFunc, long lParam, UInt32 dwFlags, ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceTypesExA(HINSTANCE__* hModule, Option lpEnumFunc, long lParam, UInt32 dwFlags, ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceTypesExW(HINSTANCE__* hModule, Option lpEnumFunc, long lParam, UInt32 dwFlags, ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRSRC__* FindResourceW(HINSTANCE__* hModule, ushort lpName, ushort lpType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* LoadLibraryA(byte lpLibFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* LoadLibraryW(ushort lpLibFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceNamesW(HINSTANCE__* hModule, ushort lpType, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheck(void* pSecurityDescriptor, void* ClientToken, UInt32 DesiredAccess, GENERIC_MAPPING* GenericMapping, _PRIVILEGE_SET* PrivilegeSet, UInt32 PrivilegeSetLength, UInt32 GrantedAccess, int AccessStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckAndAuditAlarmW(ushort SubsystemName, void* HandleId, ushort ObjectTypeName, ushort ObjectName, void* SecurityDescriptor, UInt32 DesiredAccess, GENERIC_MAPPING* GenericMapping, int ObjectCreation, UInt32 GrantedAccess, int AccessStatus, int pfGenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckByType(void* pSecurityDescriptor, void* PrincipalSelfSid, void* ClientToken, UInt32 DesiredAccess, _OBJECT_TYPE_LIST* ObjectTypeList, UInt32 ObjectTypeListLength, GENERIC_MAPPING* GenericMapping, _PRIVILEGE_SET* PrivilegeSet, UInt32 PrivilegeSetLength, UInt32 GrantedAccess, int AccessStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckByTypeResultList(void* pSecurityDescriptor, void* PrincipalSelfSid, void* ClientToken, UInt32 DesiredAccess, _OBJECT_TYPE_LIST* ObjectTypeList, UInt32 ObjectTypeListLength, GENERIC_MAPPING* GenericMapping, _PRIVILEGE_SET* PrivilegeSet, UInt32 PrivilegeSetLength, UInt32 GrantedAccessList, UInt32 AccessStatusList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckByTypeAndAuditAlarmW(ushort SubsystemName, void* HandleId, ushort ObjectTypeName, ushort ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, UInt32 DesiredAccess, _AUDIT_EVENT_TYPE AuditType, UInt32 Flags, _OBJECT_TYPE_LIST* ObjectTypeList, UInt32 ObjectTypeListLength, GENERIC_MAPPING* GenericMapping, int ObjectCreation, UInt32 GrantedAccess, int AccessStatus, int pfGenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckByTypeResultListAndAuditAlarmW(ushort SubsystemName, void* HandleId, ushort ObjectTypeName, ushort ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, UInt32 DesiredAccess, _AUDIT_EVENT_TYPE AuditType, UInt32 Flags, _OBJECT_TYPE_LIST* ObjectTypeList, UInt32 ObjectTypeListLength, GENERIC_MAPPING* GenericMapping, int ObjectCreation, UInt32 GrantedAccessList, UInt32 AccessStatusList, int pfGenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckByTypeResultListAndAuditAlarmByHandleW(ushort SubsystemName, void* HandleId, void* ClientToken, ushort ObjectTypeName, ushort ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, UInt32 DesiredAccess, _AUDIT_EVENT_TYPE AuditType, UInt32 Flags, _OBJECT_TYPE_LIST* ObjectTypeList, UInt32 ObjectTypeListLength, GENERIC_MAPPING* GenericMapping, int ObjectCreation, UInt32 GrantedAccessList, UInt32 AccessStatusList, int pfGenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAccessAllowedAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AccessMask, void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAccessAllowedAceEx(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 AccessMask, void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAccessAllowedObjectAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 AccessMask, _GUID* ObjectTypeGuid, _GUID* InheritedObjectTypeGuid, void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAccessDeniedAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AccessMask, void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAccessDeniedAceEx(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 AccessMask, void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAccessDeniedObjectAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 AccessMask, _GUID* ObjectTypeGuid, _GUID* InheritedObjectTypeGuid, void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 dwStartingAceIndex, void* pAceList, UInt32 nAceListLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAuditAccessAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 dwAccessMask, void* pSid, int bAuditSuccess, int bAuditFailure);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAuditAccessAceEx(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 dwAccessMask, void* pSid, int bAuditSuccess, int bAuditFailure);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddAuditAccessObjectAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 AccessMask, _GUID* ObjectTypeGuid, _GUID* InheritedObjectTypeGuid, void* pSid, int bAuditSuccess, int bAuditFailure);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddMandatoryAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 MandatoryPolicy, void* pLabelSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddResourceAttributeAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 AccessMask, void* pSid, _CLAIM_SECURITY_ATTRIBUTES_INFORMATION* pAttributeInfo, UInt32 pReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddScopedPolicyIDAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, UInt32 AccessMask, void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AdjustTokenGroups(void* TokenHandle, int ResetToDefault, _TOKEN_GROUPS* NewState, UInt32 BufferLength, _TOKEN_GROUPS* PreviousState, UInt32 ReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AdjustTokenPrivileges(void* TokenHandle, int DisableAllPrivileges, _TOKEN_PRIVILEGES* NewState, UInt32 BufferLength, _TOKEN_PRIVILEGES* PreviousState, UInt32 ReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AllocateAndInitializeSid(_SID_IDENTIFIER_AUTHORITY* pIdentifierAuthority, byte nSubAuthorityCount, UInt32 nSubAuthority0, UInt32 nSubAuthority1, UInt32 nSubAuthority2, UInt32 nSubAuthority3, UInt32 nSubAuthority4, UInt32 nSubAuthority5, UInt32 nSubAuthority6, UInt32 nSubAuthority7, void** pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AllocateLocallyUniqueId(_LUID* Luid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AreAllAccessesGranted(UInt32 GrantedAccess, UInt32 DesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AreAnyAccessesGranted(UInt32 GrantedAccess, UInt32 DesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckTokenMembership(void* TokenHandle, void* SidToCheck, int IsMember);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckTokenCapability(void* TokenHandle, void* CapabilitySidToCheck, int HasCapability);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAppContainerAce(ACL* Acl, UInt32 StartingAceIndex, void** AppContainerAce, UInt32* AppContainerAceIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckTokenMembershipEx(void* TokenHandle, void* SidToCheck, UInt32 Flags, int IsMember);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ConvertToAutoInheritPrivateObjectSecurity(void* ParentDescriptor, void* CurrentSecurityDescriptor, void** NewSecurityDescriptor, _GUID* ObjectType, byte IsDirectoryObject, GENERIC_MAPPING* GenericMapping);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopySid(UInt32 nDestinationSidLength, void* pDestinationSid, void* pSourceSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreatePrivateObjectSecurity(void* ParentDescriptor, void* CreatorDescriptor, void** NewDescriptor, int IsDirectoryObject, void* Token, GENERIC_MAPPING* GenericMapping);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreatePrivateObjectSecurityEx(void* ParentDescriptor, void* CreatorDescriptor, void** NewDescriptor, _GUID* ObjectType, int IsContainerObject, UInt32 AutoInheritFlags, void* Token, GENERIC_MAPPING* GenericMapping);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreatePrivateObjectSecurityWithMultipleInheritance(void* ParentDescriptor, void* CreatorDescriptor, void** NewDescriptor, _GUID** ObjectTypes, UInt32 GuidCount, int IsContainerObject, UInt32 AutoInheritFlags, void* Token, GENERIC_MAPPING* GenericMapping);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateRestrictedToken(void* ExistingTokenHandle, UInt32 Flags, UInt32 DisableSidCount, _SID_AND_ATTRIBUTES* SidsToDisable, UInt32 DeletePrivilegeCount, _LUID_AND_ATTRIBUTES* PrivilegesToDelete, UInt32 RestrictedSidCount, _SID_AND_ATTRIBUTES* SidsToRestrict, void* NewTokenHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateWellKnownSid(int WellKnownSidType, void* DomainSid, void* pSid, UInt32* cbSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EqualDomainSid(void* pSid1, void* pSid2, int* pfEqual);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteAce(ACL* pAcl, UInt32 dwAceIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DestroyPrivateObjectSecurity(void** ObjectDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DuplicateToken(void* ExistingTokenHandle, _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, void* DuplicateTokenHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DuplicateTokenEx(void* hExistingToken, UInt32 dwDesiredAccess, _SECURITY_ATTRIBUTES* lpTokenAttributes, _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel, _TOKEN_TYPE TokenType, void* phNewToken);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EqualPrefixSid(void* pSid1, void* pSid2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EqualSid(void* pSid1, void* pSid2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindFirstFreeAce(ACL* pAcl, void** pAce);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FreeSid(void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAce(ACL* pAcl, UInt32 dwAceIndex, void** pAce);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAclInformation(ACL* pAcl, void* pAclInformation, UInt32 nAclInformationLength, _ACL_INFORMATION_CLASS dwAclInformationClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileSecurityW(ushort lpFileName, UInt32 RequestedInformation, void* pSecurityDescriptor, UInt32 nLength, UInt32 lpnLengthNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetKernelObjectSecurity(void* Handle, UInt32 RequestedInformation, void* pSecurityDescriptor, UInt32 nLength, UInt32 lpnLengthNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLengthSid(void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrivateObjectSecurity(void* ObjectDescriptor, UInt32 SecurityInformation, void* ResultantDescriptor, UInt32 DescriptorLength, UInt32 ReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSecurityDescriptorControl(void* pSecurityDescriptor, ushort pControl, UInt32 lpdwRevision);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSecurityDescriptorDacl(void* pSecurityDescriptor, int lpbDaclPresent, ACL** pDacl, int lpbDaclDefaulted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSecurityDescriptorGroup(void* pSecurityDescriptor, void** pGroup, int lpbGroupDefaulted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetSecurityDescriptorLength(void* pSecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSecurityDescriptorOwner(void* pSecurityDescriptor, void** pOwner, int lpbOwnerDefaulted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetSecurityDescriptorRMControl(void* SecurityDescriptor, byte RMControl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSecurityDescriptorSacl(void* pSecurityDescriptor, int lpbSaclPresent, ACL** pSacl, int lpbSaclDefaulted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _SID_IDENTIFIER_AUTHORITY* GetSidIdentifierAuthority(void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetSidLengthRequired(byte nSubAuthorityCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetSidSubAuthority(void* pSid, UInt32 nSubAuthority);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte GetSidSubAuthorityCount(void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTokenInformation(void* TokenHandle, _TOKEN_INFORMATION_CLASS TokenInformationClass, void* TokenInformation, UInt32 TokenInformationLength, UInt32 ReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowsAccountDomainSid(void* pSid, void* pDomainSid, UInt32* cbDomainSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImpersonateAnonymousToken(void* ThreadHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImpersonateLoggedOnUser(void* hToken);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImpersonateSelf(_SECURITY_IMPERSONATION_LEVEL ImpersonationLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeAcl(ACL* pAcl, UInt32 nAclLength, UInt32 dwAclRevision);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeSecurityDescriptor(void* pSecurityDescriptor, UInt32 dwRevision);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeSid(void* Sid, _SID_IDENTIFIER_AUTHORITY* pIdentifierAuthority, byte nSubAuthorityCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsTokenRestricted(void* TokenHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidAcl(ACL* pAcl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidSecurityDescriptor(void* pSecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidSid(void* pSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWellKnownSid(void* pSid, int WellKnownSidType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MakeAbsoluteSD(void* pSelfRelativeSecurityDescriptor, void* pAbsoluteSecurityDescriptor, UInt32 lpdwAbsoluteSecurityDescriptorSize, ACL* pDacl, UInt32 lpdwDaclSize, ACL* pSacl, UInt32 lpdwSaclSize, void* pOwner, UInt32 lpdwOwnerSize, void* pPrimaryGroup, UInt32 lpdwPrimaryGroupSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MakeSelfRelativeSD(void* pAbsoluteSecurityDescriptor, void* pSelfRelativeSecurityDescriptor, UInt32 lpdwBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void MapGenericMask(UInt32 AccessMask, GENERIC_MAPPING* GenericMapping);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ObjectCloseAuditAlarmW(ushort SubsystemName, void* HandleId, int GenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ObjectDeleteAuditAlarmW(ushort SubsystemName, void* HandleId, int GenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ObjectOpenAuditAlarmW(ushort SubsystemName, void* HandleId, ushort ObjectTypeName, ushort ObjectName, void* pSecurityDescriptor, void* ClientToken, UInt32 DesiredAccess, UInt32 GrantedAccess, _PRIVILEGE_SET* Privileges, int ObjectCreation, int AccessGranted, int GenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ObjectPrivilegeAuditAlarmW(ushort SubsystemName, void* HandleId, void* ClientToken, UInt32 DesiredAccess, _PRIVILEGE_SET* Privileges, int AccessGranted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PrivilegeCheck(void* ClientToken, _PRIVILEGE_SET* RequiredPrivileges, int pfResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PrivilegedServiceAuditAlarmW(ushort SubsystemName, ushort ServiceName, void* ClientToken, _PRIVILEGE_SET* Privileges, int AccessGranted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void QuerySecurityAccessMask(UInt32 SecurityInformation, UInt32 DesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RevertToSelf();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetAclInformation(ACL* pAcl, void* pAclInformation, UInt32 nAclInformationLength, _ACL_INFORMATION_CLASS dwAclInformationClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileSecurityW(ushort lpFileName, UInt32 SecurityInformation, void* pSecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetKernelObjectSecurity(void* Handle, UInt32 SecurityInformation, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPrivateObjectSecurity(UInt32 SecurityInformation, void* ModificationDescriptor, void** ObjectsSecurityDescriptor, GENERIC_MAPPING* GenericMapping, void* Token);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPrivateObjectSecurityEx(UInt32 SecurityInformation, void* ModificationDescriptor, void** ObjectsSecurityDescriptor, UInt32 AutoInheritFlags, GENERIC_MAPPING* GenericMapping, void* Token);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetSecurityAccessMask(UInt32 SecurityInformation, UInt32 DesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSecurityDescriptorControl(void* pSecurityDescriptor, ushort ControlBitsOfInterest, ushort ControlBitsToSet);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSecurityDescriptorDacl(void* pSecurityDescriptor, int bDaclPresent, ACL* pDacl, int bDaclDefaulted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSecurityDescriptorGroup(void* pSecurityDescriptor, void* pGroup, int bGroupDefaulted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSecurityDescriptorOwner(void* pSecurityDescriptor, void* pOwner, int bOwnerDefaulted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetSecurityDescriptorRMControl(void* SecurityDescriptor, byte RMControl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSecurityDescriptorSacl(void* pSecurityDescriptor, int bSaclPresent, ACL* pSacl, int bSaclDefaulted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetTokenInformation(void* TokenHandle, _TOKEN_INFORMATION_CLASS TokenInformationClass, void* TokenInformation, UInt32 TokenInformationLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCachedSigningLevel(void* SourceFiles, UInt32 SourceFileCount, UInt32 Flags, void* TargetFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCachedSigningLevel(void* File, UInt32 Flags, UInt32 SigningLevel, byte Thumbprint, UInt32 ThumbprintSize, UInt32 ThumbprintAlgorithm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CveEventWrite(ushort CveId, ushort AdditionalDetails);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeriveCapabilitySidsFromName(ushort CapName, void*** CapabilityGroupSids, UInt32* CapabilityGroupSidCount, void*** CapabilitySids, UInt32* CapabilitySidCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreatePrivateNamespaceW(_SECURITY_ATTRIBUTES* lpPrivateNamespaceAttributes, void* lpBoundaryDescriptor, ushort lpAliasPrefix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenPrivateNamespaceW(void* lpBoundaryDescriptor, ushort lpAliasPrefix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte ClosePrivateNamespace(void* Handle, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateBoundaryDescriptorW(ushort Name, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddSIDToBoundaryDescriptor(void** BoundaryDescriptor, void* RequiredSid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeleteBoundaryDescriptor(void* BoundaryDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaHighestNodeNumber(UInt32 HighestNodeNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaNodeProcessorMaskEx(ushort Node, _GROUP_AFFINITY* ProcessorMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaProximityNodeEx(UInt32 ProximityId, ushort NodeNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessGroupAffinity(void* hProcess, ushort GroupCount, ushort GroupArray);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadGroupAffinity(void* hThread, _GROUP_AFFINITY* GroupAffinity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadGroupAffinity(void* hThread, _GROUP_AFFINITY* GroupAffinity, _GROUP_AFFINITY* PreviousGroupAffinity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAppContainerNamedObjectPath(void* Token, void* AppContainerSid, UInt32 ObjectPathLength, ushort ObjectPath, UInt32 ReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryThreadCycleTime(void* ThreadHandle, ulong* CycleTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryProcessCycleTime(void* ProcessHandle, ulong* CycleTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryIdleProcessorCycleTime(UInt32 BufferLength, ulong* ProcessorIdleCycleTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryIdleProcessorCycleTimeEx(ushort Group, UInt32 BufferLength, ulong* ProcessorIdleCycleTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void QueryInterruptTimePrecise(ulong lpInterruptTimePrecise);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void QueryUnbiasedInterruptTimePrecise(ulong lpUnbiasedInterruptTimePrecise);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void QueryInterruptTime(ulong lpInterruptTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryUnbiasedInterruptTime(ulong UnbiasedTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 QueryAuxiliaryCounterFrequency(ulong lpAuxiliaryCounterFrequency);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ConvertAuxiliaryCounterToPerformanceCounter(ulong ullAuxiliaryCounterValue, ulong lpPerformanceCounterValue, ulong lpConversionError);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ConvertPerformanceCounterToAuxiliaryCounter(ulong ullPerformanceCounterValue, ulong lpAuxiliaryCounterValue, ulong lpConversionError);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WinMain(HINSTANCE__* hInstance, HINSTANCE__* hPrevInstance, byte lpCmdLine, int nShowCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wWinMain(HINSTANCE__* hInstance, HINSTANCE__* hPrevInstance, ushort lpCmdLine, int nShowCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GlobalAlloc(uint uFlags, ulong dwBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GlobalReAlloc(void* hMem, ulong dwBytes, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong GlobalSize(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GlobalUnlock(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GlobalLock(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GlobalFlags(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GlobalHandle(void* pMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GlobalFree(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong GlobalCompact(UInt32 dwMinFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GlobalFix(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GlobalUnfix(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GlobalWire(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GlobalUnWire(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GlobalMemoryStatus(_MEMORYSTATUS* lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LocalAlloc(uint uFlags, ulong uBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LocalReAlloc(void* hMem, ulong uBytes, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LocalLock(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LocalHandle(void* pMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LocalUnlock(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong LocalSize(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint LocalFlags(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LocalFree(void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong LocalShrink(void* hMem, uint cbNewSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong LocalCompact(uint uMinFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetBinaryTypeA(byte lpApplicationName, UInt32 lpBinaryType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetBinaryTypeW(ushort lpApplicationName, UInt32 lpBinaryType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetShortPathNameA(byte lpszLongPath, byte lpszShortPath, UInt32 cchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLongPathNameTransactedA(byte lpszShortPath, byte lpszLongPath, UInt32 cchBuffer, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLongPathNameTransactedW(ushort lpszShortPath, ushort lpszLongPath, UInt32 cchBuffer, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessAffinityMask(void* hProcess, ulong lpProcessAffinityMask, ulong lpSystemAffinityMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessAffinityMask(void* hProcess, ulong dwProcessAffinityMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessIoCounters(void* hProcess, _IO_COUNTERS lpIoCounters);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessWorkingSetSize(void* hProcess, ulong lpMinimumWorkingSetSize, ulong lpMaximumWorkingSetSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessWorkingSetSize(void* hProcess, ulong dwMinimumWorkingSetSize, ulong dwMaximumWorkingSetSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FatalExit(int ExitCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetEnvironmentStringsA(byte NewEnvironment);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SwitchToFiber(void* lpFiber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DeleteFiber(void* lpFiber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ConvertFiberToThread();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFiberEx(ulong dwStackCommitSize, ulong dwStackReserveSize, UInt32 dwFlags, PFIBER_START_ROUTINE lpStartAddress, void* lpParameter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ConvertThreadToFiberEx(void* lpParameter, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFiber(ulong dwStackSize, PFIBER_START_ROUTINE lpStartAddress, void* lpParameter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ConvertThreadToFiber(void* lpParameter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateUmsCompletionList(void** UmsCompletionList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DequeueUmsCompletionListItems(void* UmsCompletionList, UInt32 WaitTimeOut, void** UmsThreadList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUmsCompletionListEvent(void* UmsCompletionList, void* UmsCompletionEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExecuteUmsThread(void* UmsThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UmsThreadYield(void* SchedulerParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteUmsCompletionList(void* UmsCompletionList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetCurrentUmsThread();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetNextUmsListItem(void* UmsContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryUmsThreadInformation(void* UmsThread, _RTL_UMS_THREAD_INFO_CLASS UmsThreadInfoClass, void* UmsThreadInformation, UInt32 UmsThreadInformationLength, UInt32 ReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetUmsThreadInformation(void* UmsThread, _RTL_UMS_THREAD_INFO_CLASS UmsThreadInfoClass, void* UmsThreadInformation, UInt32 UmsThreadInformationLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteUmsThreadContext(void* UmsThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateUmsThreadContext(void** lpUmsThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnterUmsSchedulingMode(_UMS_SCHEDULER_STARTUP_INFO* SchedulerStartupInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUmsSystemThreadInformation(void* ThreadHandle, _UMS_SYSTEM_THREAD_INFORMATION* SystemThreadInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SetThreadAffinityMask(void* hThread, ulong dwThreadAffinityMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessDEPPolicy(UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessDEPPolicy(void* hProcess, UInt32 lpFlags, int lpPermanent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RequestWakeupLatency(int latency);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsSystemResumeAutomatic();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadSelectorEntry(void* hThread, UInt32 dwSelector, void* lpSelectorEntry);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetThreadExecutionState(UInt32 esFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* PowerCreateRequest(_REASON_CONTEXT* Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PowerSetRequest(void* PowerRequest, _POWER_REQUEST_TYPE RequestType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PowerClearRequest(void* PowerRequest, _POWER_REQUEST_TYPE RequestType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileCompletionNotificationModes(void* FileHandle, byte Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Wow64GetThreadSelectorEntry(void* hThread, UInt32 dwSelector, _WOW64_LDT_ENTRY* lpSelectorEntry);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DebugSetProcessKillOnExit(int KillOnExit);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DebugBreakProcess(void* Process);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PulseEvent(void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GlobalDeleteAtom(ushort nAtom);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitAtomTable(UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort DeleteAtom(ushort nAtom);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SetHandleCount(uint uNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RequestDeviceWakeup(void* hDevice);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CancelDeviceWakeupRequest(void* hDevice);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDevicePowerState(void* hDevice, int* pfOn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMessageWaitingIndicator(void* hMsgIndicator, UInt32 ulMsgCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileShortNameA(void* hFile, byte lpShortName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileShortNameW(void* hFile, ushort lpShortName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 LoadModule(byte lpModuleName, void* lpParameterBlock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint WinExec(byte lpCmdLine, uint uCmdShow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ClearCommBreak(void* hFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ClearCommError(void* hFile, UInt32 lpErrors, _COMSTAT* lpStat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetupComm(void* hFile, UInt32 dwInQueue, UInt32 dwOutQueue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EscapeCommFunction(void* hFile, UInt32 dwFunc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCommConfig(void* hCommDev, _COMMCONFIG* lpCC, UInt32 lpdwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCommMask(void* hFile, UInt32 lpEvtMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCommProperties(void* hFile, _COMMPROP* lpCommProp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCommModemStatus(void* hFile, UInt32 lpModemStat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCommState(void* hFile, _DCB* lpDCB);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCommTimeouts(void* hFile, _COMMTIMEOUTS* lpCommTimeouts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PurgeComm(void* hFile, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCommBreak(void* hFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCommConfig(void* hCommDev, _COMMCONFIG* lpCC, UInt32 dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCommMask(void* hFile, UInt32 dwEvtMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCommState(void* hFile, _DCB* lpDCB);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCommTimeouts(void* hFile, _COMMTIMEOUTS* lpCommTimeouts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TransmitCommChar(void* hFile, byte cChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WaitCommEvent(void* hFile, UInt32 lpEvtMask, _OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenCommPort(UInt32 uPortNumber, UInt32 dwDesiredAccess, UInt32 dwFlagsAndAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCommPorts(UInt32 lpPortNumbers, UInt32 uPortNumbersCount, UInt32 puPortNumbersFound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetTapePosition(void* hDevice, UInt32 dwPositionMethod, UInt32 dwPartition, UInt32 dwOffsetLow, UInt32 dwOffsetHigh, int bImmediate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTapePosition(void* hDevice, UInt32 dwPositionType, UInt32 lpdwPartition, UInt32 lpdwOffsetLow, UInt32 lpdwOffsetHigh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 PrepareTape(void* hDevice, UInt32 dwOperation, int bImmediate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EraseTape(void* hDevice, UInt32 dwEraseType, int bImmediate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CreateTapePartition(void* hDevice, UInt32 dwPartitionMethod, UInt32 dwCount, UInt32 dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WriteTapemark(void* hDevice, UInt32 dwTapemarkType, UInt32 dwTapemarkCount, int bImmediate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTapeStatus(void* hDevice);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTapeParameters(void* hDevice, UInt32 dwOperation, UInt32 lpdwSize, void* lpTapeInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetTapeParameters(void* hDevice, UInt32 dwOperation, void* lpTapeInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MulDiv(int nNumber, int nNumerator, int nDenominator);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _DEP_SYSTEM_POLICY_TYPE GetSystemDEPPolicy();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemRegistryQuota(UInt32 pdwQuotaAllowed, UInt32 pdwQuotaUsed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FileTimeToDosDateTime(_FILETIME* lpFileTime, ushort lpFatDate, ushort lpFatTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DosDateTimeToFileTime(ushort wFatDate, ushort wFatTime, _FILETIME* lpFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 FormatMessageA(UInt32 dwFlags, void* lpSource, UInt32 dwMessageId, UInt32 dwLanguageId, byte lpBuffer, UInt32 nSize, byte** Arguments);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 FormatMessageW(UInt32 dwFlags, void* lpSource, UInt32 dwMessageId, UInt32 dwLanguageId, ushort lpBuffer, UInt32 nSize, byte** Arguments);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateMailslotA(byte lpName, UInt32 nMaxMessageSize, UInt32 lReadTimeout, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateMailslotW(ushort lpName, UInt32 nMaxMessageSize, UInt32 lReadTimeout, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMailslotInfo(void* hMailslot, UInt32 lpMaxMessageSize, UInt32 lpNextSize, UInt32 lpMessageCount, UInt32 lpReadTimeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMailslotInfo(void* hMailslot, UInt32 lReadTimeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EncryptFileA(byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EncryptFileW(ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DecryptFileA(byte lpFileName, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DecryptFileW(ushort lpFileName, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FileEncryptionStatusA(byte lpFileName, UInt32 lpStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FileEncryptionStatusW(ushort lpFileName, UInt32 lpStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 OpenEncryptedFileRawA(byte lpFileName, UInt32 ulFlags, void** pvContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 OpenEncryptedFileRawW(ushort lpFileName, UInt32 ulFlags, void** pvContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ReadEncryptedFileRaw(Option pfExportCallback, void* pvCallbackContext, void* pvContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WriteEncryptedFileRaw(Option pfImportCallback, void* pvCallbackContext, void* pvContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CloseEncryptedFileRaw(void* pvContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int lstrcmpA(byte lpString1, byte lpString2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int lstrcmpW(ushort lpString1, ushort lpString2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int lstrcmpiA(byte lpString1, byte lpString2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int lstrcmpiW(ushort lpString1, ushort lpString2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte lstrcpynA(byte lpString1, byte lpString2, int iMaxLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort lstrcpynW(ushort lpString1, ushort lpString2, int iMaxLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte lstrcpyA(byte lpString1, byte lpString2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort lstrcpyW(ushort lpString1, ushort lpString2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte lstrcatA(byte lpString1, byte lpString2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort lstrcatW(ushort lpString1, ushort lpString2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int lstrlenA(byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int lstrlenW(ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenFile(byte lpFileName, _OFSTRUCT* lpReOpenBuff, uint uStyle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _lopen(byte lpPathName, int iReadWrite);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _lcreat(byte lpPathName, int iAttribute);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint _lread(int hFile, void* lpBuffer, uint uBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint _lwrite(int hFile, byte lpBuffer, uint uBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _hread(int hFile, void* lpBuffer, Int32 lBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _hwrite(int hFile, byte lpBuffer, Int32 lBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _lclose(int hFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _llseek(int hFile, Int32 lOffset, int iOrigin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsTextUnicode(void* lpv, int iSize, int* lpiResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BackupRead(void* hFile, byte lpBuffer, UInt32 nNumberOfBytesToRead, UInt32 lpNumberOfBytesRead, int bAbort, int bProcessSecurity, void** lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BackupSeek(void* hFile, UInt32 dwLowBytesToSeek, UInt32 dwHighBytesToSeek, UInt32 lpdwLowByteSeeked, UInt32 lpdwHighByteSeeked, void** lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BackupWrite(void* hFile, byte lpBuffer, UInt32 nNumberOfBytesToWrite, UInt32 lpNumberOfBytesWritten, int bAbort, int bProcessSecurity, void** lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenMutexA(UInt32 dwDesiredAccess, int bInheritHandle, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateSemaphoreA(_SECURITY_ATTRIBUTES* lpSemaphoreAttributes, Int32 lInitialCount, Int32 lMaximumCount, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenSemaphoreA(UInt32 dwDesiredAccess, int bInheritHandle, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateWaitableTimerA(_SECURITY_ATTRIBUTES* lpTimerAttributes, int bManualReset, byte lpTimerName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenWaitableTimerA(UInt32 dwDesiredAccess, int bInheritHandle, byte lpTimerName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateSemaphoreExA(_SECURITY_ATTRIBUTES* lpSemaphoreAttributes, Int32 lInitialCount, Int32 lMaximumCount, byte lpName, UInt32 dwFlags, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateWaitableTimerExA(_SECURITY_ATTRIBUTES* lpTimerAttributes, byte lpTimerName, UInt32 dwFlags, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileMappingA(void* hFile, _SECURITY_ATTRIBUTES* lpFileMappingAttributes, UInt32 flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileMappingNumaA(void* hFile, _SECURITY_ATTRIBUTES* lpFileMappingAttributes, UInt32 flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, byte lpName, UInt32 nndPreferred);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenFileMappingA(UInt32 dwDesiredAccess, int bInheritHandle, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLogicalDriveStringsA(UInt32 nBufferLength, byte lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* LoadPackagedLibrary(ushort lpwLibFileName, UInt32 Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryFullProcessImageNameA(void* hProcess, UInt32 dwFlags, byte lpExeName, UInt32 lpdwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryFullProcessImageNameW(void* hProcess, UInt32 dwFlags, ushort lpExeName, UInt32 lpdwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GetStartupInfoA(_STARTUPINFOA* lpStartupInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFirmwareEnvironmentVariableA(byte lpName, byte lpGuid, void* pBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFirmwareEnvironmentVariableW(ushort lpName, ushort lpGuid, void* pBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFirmwareEnvironmentVariableExA(byte lpName, byte lpGuid, void* pBuffer, UInt32 nSize, UInt32 pdwAttribubutes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFirmwareEnvironmentVariableExW(ushort lpName, ushort lpGuid, void* pBuffer, UInt32 nSize, UInt32 pdwAttribubutes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFirmwareEnvironmentVariableA(byte lpName, byte lpGuid, void* pValue, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFirmwareEnvironmentVariableW(ushort lpName, ushort lpGuid, void* pValue, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFirmwareEnvironmentVariableExA(byte lpName, byte lpGuid, void* pValue, UInt32 nSize, UInt32 dwAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFirmwareEnvironmentVariableExW(ushort lpName, ushort lpGuid, void* pValue, UInt32 nSize, UInt32 dwAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFirmwareType(_FIRMWARE_TYPE* FirmwareType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsNativeVhdBoot(int NativeVhdBoot);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRSRC__* FindResourceA(HINSTANCE__* hModule, byte lpName, byte lpType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRSRC__* FindResourceExA(HINSTANCE__* hModule, byte lpType, byte lpName, ushort wLanguage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceTypesA(HINSTANCE__* hModule, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceTypesW(HINSTANCE__* hModule, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceNamesA(HINSTANCE__* hModule, byte lpType, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceLanguagesA(HINSTANCE__* hModule, byte lpType, byte lpName, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumResourceLanguagesW(HINSTANCE__* hModule, ushort lpType, ushort lpName, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* BeginUpdateResourceA(byte pFileName, int bDeleteExistingResources);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* BeginUpdateResourceW(ushort pFileName, int bDeleteExistingResources);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateResourceA(void* hUpdate, byte lpType, byte lpName, ushort wLanguage, void* lpData, UInt32 cb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateResourceW(void* hUpdate, ushort lpType, ushort lpName, ushort wLanguage, void* lpData, UInt32 cb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndUpdateResourceA(void* hUpdate, int fDiscard);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndUpdateResourceW(void* hUpdate, int fDiscard);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GlobalAddAtomA(byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GlobalAddAtomW(ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GlobalAddAtomExA(byte lpString, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GlobalAddAtomExW(ushort lpString, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GlobalFindAtomA(byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GlobalFindAtomW(ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GlobalGetAtomNameA(ushort nAtom, byte lpBuffer, int nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GlobalGetAtomNameW(ushort nAtom, ushort lpBuffer, int nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort AddAtomA(byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort AddAtomW(ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort FindAtomA(byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort FindAtomW(ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetAtomNameA(ushort nAtom, byte lpBuffer, int nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetAtomNameW(ushort nAtom, ushort lpBuffer, int nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetProfileIntA(byte lpAppName, byte lpKeyName, int nDefault);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetProfileIntW(ushort lpAppName, ushort lpKeyName, int nDefault);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetProfileStringA(byte lpAppName, byte lpKeyName, byte lpDefault, byte lpReturnedString, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetProfileStringW(ushort lpAppName, ushort lpKeyName, ushort lpDefault, ushort lpReturnedString, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteProfileStringA(byte lpAppName, byte lpKeyName, byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteProfileStringW(ushort lpAppName, ushort lpKeyName, ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetProfileSectionA(byte lpAppName, byte lpReturnedString, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetProfileSectionW(ushort lpAppName, ushort lpReturnedString, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteProfileSectionA(byte lpAppName, byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteProfileSectionW(ushort lpAppName, ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetPrivateProfileIntA(byte lpAppName, byte lpKeyName, int nDefault, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetPrivateProfileIntW(ushort lpAppName, ushort lpKeyName, int nDefault, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrivateProfileStringA(byte lpAppName, byte lpKeyName, byte lpDefault, byte lpReturnedString, UInt32 nSize, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrivateProfileStringW(ushort lpAppName, ushort lpKeyName, ushort lpDefault, ushort lpReturnedString, UInt32 nSize, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WritePrivateProfileStringA(byte lpAppName, byte lpKeyName, byte lpString, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WritePrivateProfileStringW(ushort lpAppName, ushort lpKeyName, ushort lpString, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrivateProfileSectionA(byte lpAppName, byte lpReturnedString, UInt32 nSize, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrivateProfileSectionW(ushort lpAppName, ushort lpReturnedString, UInt32 nSize, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WritePrivateProfileSectionA(byte lpAppName, byte lpString, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WritePrivateProfileSectionW(ushort lpAppName, ushort lpString, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrivateProfileSectionNamesA(byte lpszReturnBuffer, UInt32 nSize, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrivateProfileSectionNamesW(ushort lpszReturnBuffer, UInt32 nSize, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrivateProfileStructA(byte lpszSection, byte lpszKey, void* lpStruct, uint uSizeStruct, byte szFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrivateProfileStructW(ushort lpszSection, ushort lpszKey, void* lpStruct, uint uSizeStruct, ushort szFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WritePrivateProfileStructA(byte lpszSection, byte lpszKey, void* lpStruct, uint uSizeStruct, byte szFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WritePrivateProfileStructW(ushort lpszSection, ushort lpszKey, void* lpStruct, uint uSizeStruct, ushort szFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte Wow64EnableWow64FsRedirection(byte Wow64FsEnableRedirection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDllDirectoryA(byte lpPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDllDirectoryW(ushort lpPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetDllDirectoryA(UInt32 nBufferLength, byte lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetDllDirectoryW(UInt32 nBufferLength, ushort lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSearchPathMode(UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateDirectoryExA(byte lpTemplateDirectory, byte lpNewDirectory, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateDirectoryExW(ushort lpTemplateDirectory, ushort lpNewDirectory, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateDirectoryTransactedA(byte lpTemplateDirectory, byte lpNewDirectory, _SECURITY_ATTRIBUTES* lpSecurityAttributes, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateDirectoryTransactedW(ushort lpTemplateDirectory, ushort lpNewDirectory, _SECURITY_ATTRIBUTES* lpSecurityAttributes, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveDirectoryTransactedA(byte lpPathName, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveDirectoryTransactedW(ushort lpPathName, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFullPathNameTransactedA(byte lpFileName, UInt32 nBufferLength, byte lpBuffer, byte* lpFilePart, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFullPathNameTransactedW(ushort lpFileName, UInt32 nBufferLength, ushort lpBuffer, ushort* lpFilePart, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DefineDosDeviceA(UInt32 dwFlags, byte lpDeviceName, byte lpTargetPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 QueryDosDeviceA(byte lpDeviceName, byte lpTargetPath, UInt32 ucchMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileTransactedA(byte lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, void* hTemplateFile, void* hTransaction, ushort pusMiniVersion, void* lpExtendedParameter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateFileTransactedW(ushort lpFileName, UInt32 dwDesiredAccess, UInt32 dwShareMode, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 dwCreationDisposition, UInt32 dwFlagsAndAttributes, void* hTemplateFile, void* hTransaction, ushort pusMiniVersion, void* lpExtendedParameter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ReOpenFile(void* hOriginalFile, UInt32 dwDesiredAccess, UInt32 dwShareMode, UInt32 dwFlagsAndAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileAttributesTransactedA(byte lpFileName, UInt32 dwFileAttributes, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileAttributesTransactedW(ushort lpFileName, UInt32 dwFileAttributes, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileAttributesTransactedA(byte lpFileName, _GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileAttributesTransactedW(ushort lpFileName, _GET_FILEEX_INFO_LEVELS fInfoLevelId, void* lpFileInformation, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCompressedFileSizeTransactedA(byte lpFileName, UInt32 lpFileSizeHigh, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCompressedFileSizeTransactedW(ushort lpFileName, UInt32 lpFileSizeHigh, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteFileTransactedA(byte lpFileName, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteFileTransactedW(ushort lpFileName, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckNameLegalDOS8Dot3A(byte lpName, byte lpOemName, UInt32 OemNameSize, int pbNameContainsSpaces, int pbNameLegal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckNameLegalDOS8Dot3W(ushort lpName, byte lpOemName, UInt32 OemNameSize, int pbNameContainsSpaces, int pbNameLegal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileTransactedA(byte lpFileName, _FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, _FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, UInt32 dwAdditionalFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileTransactedW(ushort lpFileName, _FINDEX_INFO_LEVELS fInfoLevelId, void* lpFindFileData, _FINDEX_SEARCH_OPS fSearchOp, void* lpSearchFilter, UInt32 dwAdditionalFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyFileA(byte lpExistingFileName, byte lpNewFileName, int bFailIfExists);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyFileW(ushort lpExistingFileName, ushort lpNewFileName, int bFailIfExists);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyFileExA(byte lpExistingFileName, byte lpNewFileName, Option lpProgressRoutine, void* lpData, int pbCancel, UInt32 dwCopyFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyFileExW(ushort lpExistingFileName, ushort lpNewFileName, Option lpProgressRoutine, void* lpData, int pbCancel, UInt32 dwCopyFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyFileTransactedA(byte lpExistingFileName, byte lpNewFileName, Option lpProgressRoutine, void* lpData, int pbCancel, UInt32 dwCopyFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyFileTransactedW(ushort lpExistingFileName, ushort lpNewFileName, Option lpProgressRoutine, void* lpData, int pbCancel, UInt32 dwCopyFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CopyFile2(ushort pwszExistingFileName, ushort pwszNewFileName, COPYFILE2_EXTENDED_PARAMETERS* pExtendedParameters);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileA(byte lpExistingFileName, byte lpNewFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileW(ushort lpExistingFileName, ushort lpNewFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileExA(byte lpExistingFileName, byte lpNewFileName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileExW(ushort lpExistingFileName, ushort lpNewFileName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileWithProgressA(byte lpExistingFileName, byte lpNewFileName, Option lpProgressRoutine, void* lpData, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileWithProgressW(ushort lpExistingFileName, ushort lpNewFileName, Option lpProgressRoutine, void* lpData, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileTransactedA(byte lpExistingFileName, byte lpNewFileName, Option lpProgressRoutine, void* lpData, UInt32 dwFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveFileTransactedW(ushort lpExistingFileName, ushort lpNewFileName, Option lpProgressRoutine, void* lpData, UInt32 dwFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReplaceFileA(byte lpReplacedFileName, byte lpReplacementFileName, byte lpBackupFileName, UInt32 dwReplaceFlags, void* lpExclude, void* lpReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReplaceFileW(ushort lpReplacedFileName, ushort lpReplacementFileName, ushort lpBackupFileName, UInt32 dwReplaceFlags, void* lpExclude, void* lpReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateHardLinkA(byte lpFileName, byte lpExistingFileName, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateHardLinkW(ushort lpFileName, ushort lpExistingFileName, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateHardLinkTransactedA(byte lpFileName, byte lpExistingFileName, _SECURITY_ATTRIBUTES* lpSecurityAttributes, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateHardLinkTransactedW(ushort lpFileName, ushort lpExistingFileName, _SECURITY_ATTRIBUTES* lpSecurityAttributes, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstStreamTransactedW(ushort lpFileName, _STREAM_INFO_LEVELS InfoLevel, void* lpFindStreamData, UInt32 dwFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstFileNameTransactedW(ushort lpFileName, UInt32 dwFlags, UInt32 StringLength, ushort LinkName, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateNamedPipeA(byte lpName, UInt32 dwOpenMode, UInt32 dwPipeMode, UInt32 nMaxInstances, UInt32 nOutBufferSize, UInt32 nInBufferSize, UInt32 nDefaultTimeOut, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeHandleStateA(void* hNamedPipe, UInt32 lpState, UInt32 lpCurInstances, UInt32 lpMaxCollectionCount, UInt32 lpCollectDataTimeout, byte lpUserName, UInt32 nMaxUserNameSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CallNamedPipeA(byte lpNamedPipeName, void* lpInBuffer, UInt32 nInBufferSize, void* lpOutBuffer, UInt32 nOutBufferSize, UInt32 lpBytesRead, UInt32 nTimeOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WaitNamedPipeA(byte lpNamedPipeName, UInt32 nTimeOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeClientComputerNameA(void* Pipe, byte ClientComputerName, UInt32 ClientComputerNameLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeClientProcessId(void* Pipe, UInt32 ClientProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeClientSessionId(void* Pipe, UInt32 ClientSessionId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeServerProcessId(void* Pipe, UInt32 ServerProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNamedPipeServerSessionId(void* Pipe, UInt32 ServerSessionId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetVolumeLabelA(byte lpRootPathName, byte lpVolumeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetVolumeLabelW(ushort lpRootPathName, ushort lpVolumeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileBandwidthReservation(void* hFile, UInt32 nPeriodMilliseconds, UInt32 nBytesPerPeriod, int bDiscardable, UInt32 lpTransferSize, UInt32 lpNumOutstandingRequests);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileBandwidthReservation(void* hFile, UInt32 lpPeriodMilliseconds, UInt32 lpBytesPerPeriod, int pDiscardable, UInt32 lpTransferSize, UInt32 lpNumOutstandingRequests);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ClearEventLogA(void* hEventLog, byte lpBackupFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ClearEventLogW(void* hEventLog, ushort lpBackupFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BackupEventLogA(void* hEventLog, byte lpBackupFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BackupEventLogW(void* hEventLog, ushort lpBackupFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseEventLog(void* hEventLog);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeregisterEventSource(void* hEventLog);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int NotifyChangeEventLog(void* hEventLog, void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumberOfEventLogRecords(void* hEventLog, UInt32 NumberOfRecords);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetOldestEventLogRecord(void* hEventLog, UInt32 OldestRecord);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenEventLogA(byte lpUNCServerName, byte lpSourceName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenEventLogW(ushort lpUNCServerName, ushort lpSourceName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RegisterEventSourceA(byte lpUNCServerName, byte lpSourceName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RegisterEventSourceW(ushort lpUNCServerName, ushort lpSourceName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenBackupEventLogA(byte lpUNCServerName, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenBackupEventLogW(ushort lpUNCServerName, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadEventLogA(void* hEventLog, UInt32 dwReadFlags, UInt32 dwRecordOffset, void* lpBuffer, UInt32 nNumberOfBytesToRead, UInt32* pnBytesRead, UInt32* pnMinNumberOfBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadEventLogW(void* hEventLog, UInt32 dwReadFlags, UInt32 dwRecordOffset, void* lpBuffer, UInt32 nNumberOfBytesToRead, UInt32* pnBytesRead, UInt32* pnMinNumberOfBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReportEventA(void* hEventLog, ushort wType, ushort wCategory, UInt32 dwEventID, void* lpUserSid, ushort wNumStrings, UInt32 dwDataSize, byte* lpStrings, void* lpRawData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReportEventW(void* hEventLog, ushort wType, ushort wCategory, UInt32 dwEventID, void* lpUserSid, ushort wNumStrings, UInt32 dwDataSize, ushort* lpStrings, void* lpRawData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetEventLogInformation(void* hEventLog, UInt32 dwInfoLevel, void* lpBuffer, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OperationStart(_OPERATION_START_PARAMETERS* OperationStartParams);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OperationEnd(_OPERATION_END_PARAMETERS* OperationEndParams);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckAndAuditAlarmA(byte SubsystemName, void* HandleId, byte ObjectTypeName, byte ObjectName, void* SecurityDescriptor, UInt32 DesiredAccess, GENERIC_MAPPING* GenericMapping, int ObjectCreation, UInt32 GrantedAccess, int AccessStatus, int pfGenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckByTypeAndAuditAlarmA(byte SubsystemName, void* HandleId, byte ObjectTypeName, byte ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, UInt32 DesiredAccess, _AUDIT_EVENT_TYPE AuditType, UInt32 Flags, _OBJECT_TYPE_LIST* ObjectTypeList, UInt32 ObjectTypeListLength, GENERIC_MAPPING* GenericMapping, int ObjectCreation, UInt32 GrantedAccess, int AccessStatus, int pfGenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckByTypeResultListAndAuditAlarmA(byte SubsystemName, void* HandleId, byte ObjectTypeName, byte ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, UInt32 DesiredAccess, _AUDIT_EVENT_TYPE AuditType, UInt32 Flags, _OBJECT_TYPE_LIST* ObjectTypeList, UInt32 ObjectTypeListLength, GENERIC_MAPPING* GenericMapping, int ObjectCreation, UInt32 GrantedAccess, UInt32 AccessStatusList, int pfGenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AccessCheckByTypeResultListAndAuditAlarmByHandleA(byte SubsystemName, void* HandleId, void* ClientToken, byte ObjectTypeName, byte ObjectName, void* SecurityDescriptor, void* PrincipalSelfSid, UInt32 DesiredAccess, _AUDIT_EVENT_TYPE AuditType, UInt32 Flags, _OBJECT_TYPE_LIST* ObjectTypeList, UInt32 ObjectTypeListLength, GENERIC_MAPPING* GenericMapping, int ObjectCreation, UInt32 GrantedAccess, UInt32 AccessStatusList, int pfGenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ObjectOpenAuditAlarmA(byte SubsystemName, void* HandleId, byte ObjectTypeName, byte ObjectName, void* pSecurityDescriptor, void* ClientToken, UInt32 DesiredAccess, UInt32 GrantedAccess, _PRIVILEGE_SET* Privileges, int ObjectCreation, int AccessGranted, int GenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ObjectPrivilegeAuditAlarmA(byte SubsystemName, void* HandleId, void* ClientToken, UInt32 DesiredAccess, _PRIVILEGE_SET* Privileges, int AccessGranted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ObjectCloseAuditAlarmA(byte SubsystemName, void* HandleId, int GenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ObjectDeleteAuditAlarmA(byte SubsystemName, void* HandleId, int GenerateOnClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PrivilegedServiceAuditAlarmA(byte SubsystemName, byte ServiceName, void* ClientToken, _PRIVILEGE_SET* Privileges, int AccessGranted);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddConditionalAce(ACL* pAcl, UInt32 dwAceRevision, UInt32 AceFlags, byte AceType, UInt32 AccessMask, void* pSid, ushort ConditionStr, UInt32* ReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFileSecurityA(byte lpFileName, UInt32 SecurityInformation, void* pSecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileSecurityA(byte lpFileName, UInt32 RequestedInformation, void* pSecurityDescriptor, UInt32 nLength, UInt32 lpnLengthNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadDirectoryChangesW(void* hDirectory, void* lpBuffer, UInt32 nBufferLength, int bWatchSubtree, UInt32 dwNotifyFilter, UInt32 lpBytesReturned, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadDirectoryChangesExW(void* hDirectory, void* lpBuffer, UInt32 nBufferLength, int bWatchSubtree, UInt32 dwNotifyFilter, UInt32 lpBytesReturned, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine, _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* MapViewOfFileExNuma(void* hFileMappingObject, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, ulong dwNumberOfBytesToMap, void* lpBaseAddress, UInt32 nndPreferred);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsBadReadPtr(void* lp, ulong ucb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsBadWritePtr(void* lp, ulong ucb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsBadHugeReadPtr(void* lp, ulong ucb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsBadHugeWritePtr(void* lp, ulong ucb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsBadCodePtr(Option lpfn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsBadStringPtrA(byte lpsz, ulong ucchMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsBadStringPtrW(ushort lpsz, ulong ucchMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupAccountSidA(byte lpSystemName, void* Sid, byte Name, UInt32 cchName, byte ReferencedDomainName, UInt32 cchReferencedDomainName, _SID_NAME_USE* peUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupAccountSidW(ushort lpSystemName, void* Sid, ushort Name, UInt32 cchName, ushort ReferencedDomainName, UInt32 cchReferencedDomainName, _SID_NAME_USE* peUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupAccountNameA(byte lpSystemName, byte lpAccountName, void* Sid, UInt32 cbSid, byte ReferencedDomainName, UInt32 cchReferencedDomainName, _SID_NAME_USE* peUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupAccountNameW(ushort lpSystemName, ushort lpAccountName, void* Sid, UInt32 cbSid, ushort ReferencedDomainName, UInt32 cchReferencedDomainName, _SID_NAME_USE* peUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupAccountNameLocalA(byte lpAccountName, void* Sid, UInt32 cbSid, byte ReferencedDomainName, UInt32 cchReferencedDomainName, _SID_NAME_USE* peUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupAccountNameLocalW(ushort lpAccountName, void* Sid, UInt32 cbSid, ushort ReferencedDomainName, UInt32 cchReferencedDomainName, _SID_NAME_USE* peUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupAccountSidLocalA(void* Sid, byte Name, UInt32 cchName, byte ReferencedDomainName, UInt32 cchReferencedDomainName, _SID_NAME_USE* peUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupAccountSidLocalW(void* Sid, ushort Name, UInt32 cchName, ushort ReferencedDomainName, UInt32 cchReferencedDomainName, _SID_NAME_USE* peUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupPrivilegeValueA(byte lpSystemName, byte lpName, _LUID* lpLuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupPrivilegeValueW(ushort lpSystemName, ushort lpName, _LUID* lpLuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupPrivilegeNameA(byte lpSystemName, _LUID* lpLuid, byte lpName, UInt32 cchName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupPrivilegeNameW(ushort lpSystemName, _LUID* lpLuid, ushort lpName, UInt32 cchName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupPrivilegeDisplayNameA(byte lpSystemName, byte lpName, byte lpDisplayName, UInt32 cchDisplayName, UInt32 lpLanguageId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupPrivilegeDisplayNameW(ushort lpSystemName, ushort lpName, ushort lpDisplayName, UInt32 cchDisplayName, UInt32 lpLanguageId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BuildCommDCBA(byte lpDef, _DCB* lpDCB);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BuildCommDCBW(ushort lpDef, _DCB* lpDCB);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BuildCommDCBAndTimeoutsA(byte lpDef, _DCB* lpDCB, _COMMTIMEOUTS* lpCommTimeouts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BuildCommDCBAndTimeoutsW(ushort lpDef, _DCB* lpDCB, _COMMTIMEOUTS* lpCommTimeouts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CommConfigDialogA(byte lpszName, HWND__* hWnd, _COMMCONFIG* lpCC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CommConfigDialogW(ushort lpszName, HWND__* hWnd, _COMMCONFIG* lpCC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDefaultCommConfigA(byte lpszName, _COMMCONFIG* lpCC, UInt32 lpdwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDefaultCommConfigW(ushort lpszName, _COMMCONFIG* lpCC, UInt32 lpdwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDefaultCommConfigA(byte lpszName, _COMMCONFIG* lpCC, UInt32 dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDefaultCommConfigW(ushort lpszName, _COMMCONFIG* lpCC, UInt32 dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetComputerNameA(byte lpBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetComputerNameW(ushort lpBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DnsHostnameToComputerNameA(byte Hostname, byte ComputerName, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DnsHostnameToComputerNameW(ushort Hostname, ushort ComputerName, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUserNameA(byte lpBuffer, UInt32 pcbBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUserNameW(ushort lpBuffer, UInt32 pcbBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LogonUserA(byte lpszUsername, byte lpszDomain, byte lpszPassword, UInt32 dwLogonType, UInt32 dwLogonProvider, void* phToken);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LogonUserW(ushort lpszUsername, ushort lpszDomain, ushort lpszPassword, UInt32 dwLogonType, UInt32 dwLogonProvider, void* phToken);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LogonUserExA(byte lpszUsername, byte lpszDomain, byte lpszPassword, UInt32 dwLogonType, UInt32 dwLogonProvider, void* phToken, void** ppLogonSid, void** ppProfileBuffer, UInt32 pdwProfileLength, _QUOTA_LIMITS* pQuotaLimits);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LogonUserExW(ushort lpszUsername, ushort lpszDomain, ushort lpszPassword, UInt32 dwLogonType, UInt32 dwLogonProvider, void* phToken, void** ppLogonSid, void** ppProfileBuffer, UInt32 pdwProfileLength, _QUOTA_LIMITS* pQuotaLimits);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateProcessWithLogonW(ushort lpUsername, ushort lpDomain, ushort lpPassword, UInt32 dwLogonFlags, ushort lpApplicationName, ushort lpCommandLine, UInt32 dwCreationFlags, void* lpEnvironment, ushort lpCurrentDirectory, _STARTUPINFOW* lpStartupInfo, _PROCESS_INFORMATION* lpProcessInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateProcessWithTokenW(void* hToken, UInt32 dwLogonFlags, ushort lpApplicationName, ushort lpCommandLine, UInt32 dwCreationFlags, void* lpEnvironment, ushort lpCurrentDirectory, _STARTUPINFOW* lpStartupInfo, _PROCESS_INFORMATION* lpProcessInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsTokenUntrusted(void* TokenHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterWaitForSingleObject(void* phNewWaitObject, void* hObject, WAITORTIMERCALLBACKFUNC Callback, void* Context, UInt32 dwMilliseconds, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterWait(void* WaitHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BindIoCompletionCallback(void* FileHandle, Option Function, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SetTimerQueueTimer(void* TimerQueue, WAITORTIMERCALLBACKFUNC Callback, void* Parameter, UInt32 DueTime, UInt32 Period, int PreferIo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CancelTimerQueueTimer(void* TimerQueue, void* Timer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteTimerQueue(void* TimerQueue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreatePrivateNamespaceA(_SECURITY_ATTRIBUTES* lpPrivateNamespaceAttributes, void* lpBoundaryDescriptor, byte lpAliasPrefix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenPrivateNamespaceA(void* lpBoundaryDescriptor, byte lpAliasPrefix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateBoundaryDescriptorA(byte Name, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddIntegrityLabelToBoundaryDescriptor(void** BoundaryDescriptor, void* IntegrityLabel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrentHwProfileA(tagHW_PROFILE_INFOA* lpHwProfileInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrentHwProfileW(tagHW_PROFILE_INFOW* lpHwProfileInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VerifyVersionInfoA(_OSVERSIONINFOEXA* lpVersionInformation, UInt32 dwTypeMask, ulong dwlConditionMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VerifyVersionInfoW(_OSVERSIONINFOEXW* lpVersionInformation, UInt32 dwTypeMask, ulong dwlConditionMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SystemTimeToTzSpecificLocalTime(_TIME_ZONE_INFORMATION* lpTimeZoneInformation, _SYSTEMTIME* lpUniversalTime, _SYSTEMTIME* lpLocalTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TzSpecificLocalTimeToSystemTime(_TIME_ZONE_INFORMATION* lpTimeZoneInformation, _SYSTEMTIME* lpLocalTime, _SYSTEMTIME* lpUniversalTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FileTimeToSystemTime(_FILETIME* lpFileTime, _SYSTEMTIME* lpSystemTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SystemTimeToFileTime(_SYSTEMTIME* lpSystemTime, _FILETIME* lpFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTimeZoneInformation(_TIME_ZONE_INFORMATION* lpTimeZoneInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetTimeZoneInformation(_TIME_ZONE_INFORMATION* lpTimeZoneInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDynamicTimeZoneInformation(_TIME_DYNAMIC_ZONE_INFORMATION* lpTimeZoneInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetDynamicTimeZoneInformation(_TIME_DYNAMIC_ZONE_INFORMATION* pTimeZoneInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTimeZoneInformationForYear(ushort wYear, _TIME_DYNAMIC_ZONE_INFORMATION* pdtzi, _TIME_ZONE_INFORMATION* ptzi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnumDynamicTimeZoneInformation(UInt32 dwIndex, _TIME_DYNAMIC_ZONE_INFORMATION* lpTimeZoneInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetDynamicTimeZoneInformationEffectiveYears(_TIME_DYNAMIC_ZONE_INFORMATION* lpTimeZoneInformation, UInt32 FirstYear, UInt32 LastYear);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SystemTimeToTzSpecificLocalTimeEx(_TIME_DYNAMIC_ZONE_INFORMATION* lpTimeZoneInformation, _SYSTEMTIME* lpUniversalTime, _SYSTEMTIME* lpLocalTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TzSpecificLocalTimeToSystemTimeEx(_TIME_DYNAMIC_ZONE_INFORMATION* lpTimeZoneInformation, _SYSTEMTIME* lpLocalTime, _SYSTEMTIME* lpUniversalTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LocalFileTimeToLocalSystemTime(_TIME_ZONE_INFORMATION* timeZoneInformation, _FILETIME* localFileTime, _SYSTEMTIME* localSystemTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LocalSystemTimeToLocalFileTime(_TIME_ZONE_INFORMATION* timeZoneInformation, _SYSTEMTIME* localSystemTime, _FILETIME* localFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSystemPowerState(int fSuspend, int fForce);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemPowerStatus(_SYSTEM_POWER_STATUS* lpSystemPowerStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MapUserPhysicalPagesScatter(void** VirtualAddresses, ulong NumberOfPages, ulong* PageArray);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateJobObjectA(_SECURITY_ATTRIBUTES* lpJobAttributes, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenJobObjectA(UInt32 dwDesiredAccess, int bInheritHandle, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateJobSet(UInt32 NumJob, _JOB_SET_ARRAY* UserJobSet, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstVolumeA(byte lpszVolumeName, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextVolumeA(void* hFindVolume, byte lpszVolumeName, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstVolumeMountPointA(byte lpszRootPathName, byte lpszVolumeMountPoint, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstVolumeMountPointW(ushort lpszRootPathName, ushort lpszVolumeMountPoint, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextVolumeMountPointA(void* hFindVolumeMountPoint, byte lpszVolumeMountPoint, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextVolumeMountPointW(void* hFindVolumeMountPoint, ushort lpszVolumeMountPoint, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindVolumeMountPointClose(void* hFindVolumeMountPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetVolumeMountPointA(byte lpszVolumeMountPoint, byte lpszVolumeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetVolumeMountPointW(ushort lpszVolumeMountPoint, ushort lpszVolumeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteVolumeMountPointA(byte lpszVolumeMountPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumeNameForVolumeMountPointA(byte lpszVolumeMountPoint, byte lpszVolumeName, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumePathNameA(byte lpszFileName, byte lpszVolumePathName, UInt32 cchBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetVolumePathNamesForVolumeNameA(byte lpszVolumeName, byte lpszVolumePathNames, UInt32 cchBufferLength, UInt32 lpcchReturnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateActCtxA(ACTCTXA* pActCtx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateActCtxW(ACTCTXW* pActCtx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AddRefActCtx(void* hActCtx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ReleaseActCtx(void* hActCtx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ZombifyActCtx(void* hActCtx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ActivateActCtx(void* hActCtx, ulong* lpCookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeactivateActCtx(UInt32 dwFlags, ulong ulCookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrentActCtx(void** lphActCtx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindActCtxSectionStringA(UInt32 dwFlags, _GUID* lpExtensionGuid, UInt32 ulSectionId, byte lpStringToFind, tagACTCTX_SECTION_KEYED_DATA* ReturnedData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindActCtxSectionStringW(UInt32 dwFlags, _GUID* lpExtensionGuid, UInt32 ulSectionId, ushort lpStringToFind, tagACTCTX_SECTION_KEYED_DATA* ReturnedData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindActCtxSectionGuid(UInt32 dwFlags, _GUID* lpExtensionGuid, UInt32 ulSectionId, _GUID* lpGuidToFind, tagACTCTX_SECTION_KEYED_DATA* ReturnedData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryActCtxW(UInt32 dwFlags, void* hActCtx, void* pvSubInstance, UInt32 ulInfoClass, void* pvBuffer, ulong cbBuffer, ulong* pcbWrittenOrRequired);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WTSGetActiveConsoleSessionId();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WTSGetServiceSessionId();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte WTSIsServerContainer();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetActiveProcessorGroupCount();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetMaximumProcessorGroupCount();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetActiveProcessorCount(ushort GroupNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetMaximumProcessorCount(ushort GroupNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaProcessorNode(byte Processor, byte NodeNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaNodeNumberFromHandle(void* hFile, ushort NodeNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaProcessorNodeEx(_PROCESSOR_NUMBER* Processor, ushort NodeNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaNodeProcessorMask(byte Node, ulong ProcessorMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaAvailableMemoryNode(byte Node, ulong AvailableBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaAvailableMemoryNodeEx(ushort Node, ulong AvailableBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumaProximityNode(UInt32 ProximityId, byte NodeNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterApplicationRecoveryCallback(Option pRecoveyCallback, void* pvParameter, UInt32 dwPingInterval, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UnregisterApplicationRecoveryCallback();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterApplicationRestart(ushort pwzCommandline, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UnregisterApplicationRestart();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetApplicationRecoveryCallback(void* hProcess, Option* pRecoveryCallback, void** ppvParameter, UInt32 pdwPingInterval, UInt32 pdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetApplicationRestartSettings(void* hProcess, ushort pwzCommandline, UInt32 pcchSize, UInt32 pdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ApplicationRecoveryInProgress(int pbCancelled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ApplicationRecoveryFinished(int bSuccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileInformationByHandleEx(void* hFile, _FILE_INFO_BY_HANDLE_CLASS FileInformationClass, void* lpFileInformation, UInt32 dwBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OpenFileById(void* hVolumeHint, FILE_ID_DESCRIPTOR* lpFileId, UInt32 dwDesiredAccess, UInt32 dwShareMode, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 dwFlagsAndAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CreateSymbolicLinkA(byte lpSymlinkFileName, byte lpTargetFileName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CreateSymbolicLinkW(ushort lpSymlinkFileName, ushort lpTargetFileName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryActCtxSettingsW(UInt32 dwFlags, void* hActCtx, ushort settingsNameSpace, ushort settingName, ushort pvBuffer, ulong dwBuffer, ulong* pdwWrittenOrRequired);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CreateSymbolicLinkTransactedA(byte lpSymlinkFileName, byte lpTargetFileName, UInt32 dwFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CreateSymbolicLinkTransactedW(ushort lpSymlinkFileName, ushort lpTargetFileName, UInt32 dwFlags, void* hTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReplacePartitionUnit(ushort TargetPartition, ushort SparePartition, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddSecureMemoryCacheCallback(Option pfnCallBack);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveSecureMemoryCacheCallback(Option pfnCallBack);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyContext(_CONTEXT* Destination, UInt32 ContextFlags, _CONTEXT* Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeContext(void* Buffer, UInt32 ContextFlags, _CONTEXT** Context, UInt32 ContextLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeContext2(void* Buffer, UInt32 ContextFlags, _CONTEXT** Context, UInt32 ContextLength, ulong XStateCompactionMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong GetEnabledXStateFeatures();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetXStateFeaturesMask(_CONTEXT* Context, ulong* FeatureMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LocateXStateFeature(_CONTEXT* Context, UInt32 FeatureId, UInt32 Length);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetXStateFeaturesMask(_CONTEXT* Context, ulong FeatureMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnableThreadProfiling(void* ThreadHandle, UInt32 Flags, ulong HardwareCounters, void** PerformanceDataHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DisableThreadProfiling(void* PerformanceDataHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 QueryThreadProfiling(void* ThreadHandle, byte Enabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ReadThreadProfilingData(void* PerformanceDataHandle, UInt32 Flags, _PERFORMANCE_DATA* PerformanceData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RaiseCustomSystemEventTrigger(_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG* CustomSystemEventTriggerConfig);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddFontResourceA(byte arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddFontResourceW(ushort arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AnimatePalette(HPALETTE__* hPal, uint iStartIndex, uint cEntries, tagPALETTEENTRY* ppe);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Arc(HDC__* hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BitBlt(HDC__* hdc, int x, int y, int cx, int cy, HDC__* hdcSrc, int x1, int y1, UInt32 rop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CancelDC(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Chord(HDC__* hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChoosePixelFormat(HDC__* hdc, tagPIXELFORMATDESCRIPTOR* ppfd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMETAFILE__* CloseMetaFile(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CombineRgn(HRGN__* hrgnDst, HRGN__* hrgnSrc1, HRGN__* hrgnSrc2, int iMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMETAFILE__* CopyMetaFileA(HMETAFILE__* arg1, byte arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMETAFILE__* CopyMetaFileW(HMETAFILE__* arg1, ushort arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBITMAP__* CreateBitmap(int nWidth, int nHeight, uint nPlanes, uint nBitCount, void* lpBits);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBITMAP__* CreateBitmapIndirect(tagBITMAP* pbm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBRUSH__* CreateBrushIndirect(tagLOGBRUSH* plbrush);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBITMAP__* CreateCompatibleBitmap(HDC__* hdc, int cx, int cy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBITMAP__* CreateDiscardableBitmap(HDC__* hdc, int cx, int cy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateCompatibleDC(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateDCA(byte pwszDriver, byte pwszDevice, byte pszPort, _devicemodeA* pdm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateDCW(ushort pwszDriver, ushort pwszDevice, ushort pszPort, _devicemodeW* pdm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBITMAP__* CreateDIBitmap(HDC__* hdc, tagBITMAPINFOHEADER* pbmih, UInt32 flInit, void* pjBits, tagBITMAPINFO* pbmi, uint iUsage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBRUSH__* CreateDIBPatternBrush(void* h, uint iUsage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBRUSH__* CreateDIBPatternBrushPt(void* lpPackedDIB, uint iUsage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* CreateEllipticRgn(int x1, int y1, int x2, int y2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* CreateEllipticRgnIndirect(tagRECT* lprect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HFONT__* CreateFontIndirectA(tagLOGFONTA* lplf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HFONT__* CreateFontIndirectW(tagLOGFONTW* lplf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HFONT__* CreateFontA(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, UInt32 bItalic, UInt32 bUnderline, UInt32 bStrikeOut, UInt32 iCharSet, UInt32 iOutPrecision, UInt32 iClipPrecision, UInt32 iQuality, UInt32 iPitchAndFamily, byte pszFaceName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HFONT__* CreateFontW(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, UInt32 bItalic, UInt32 bUnderline, UInt32 bStrikeOut, UInt32 iCharSet, UInt32 iOutPrecision, UInt32 iClipPrecision, UInt32 iQuality, UInt32 iPitchAndFamily, ushort pszFaceName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBRUSH__* CreateHatchBrush(int iHatch, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateICA(byte pszDriver, byte pszDevice, byte pszPort, _devicemodeA* pdm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateICW(ushort pszDriver, ushort pszDevice, ushort pszPort, _devicemodeW* pdm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateMetaFileA(byte pszFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateMetaFileW(ushort pszFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HPALETTE__* CreatePalette(tagLOGPALETTE* plpal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HPEN__* CreatePen(int iStyle, int cWidth, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HPEN__* CreatePenIndirect(tagLOGPEN* plpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* CreatePolyPolygonRgn(tagPOINT* pptl, int* pc, int cPoly, int iMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBRUSH__* CreatePatternBrush(HBITMAP__* hbm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* CreateRectRgn(int x1, int y1, int x2, int y2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* CreateRectRgnIndirect(tagRECT* lprect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* CreateRoundRectRgn(int x1, int y1, int x2, int y2, int w, int h);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateScalableFontResourceA(UInt32 fdwHidden, byte lpszFont, byte lpszFile, byte lpszPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateScalableFontResourceW(UInt32 fdwHidden, ushort lpszFont, ushort lpszFile, ushort lpszPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBRUSH__* CreateSolidBrush(UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteDC(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteMetaFile(HMETAFILE__* hmf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteObject(void* ho);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DescribePixelFormat(HDC__* hdc, int iPixelFormat, uint nBytes, tagPIXELFORMATDESCRIPTOR* ppfd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeviceCapabilitiesA(byte pDevice, byte pPort, ushort fwCapability, byte pOutput, _devicemodeA* pDevMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeviceCapabilitiesW(ushort pDevice, ushort pPort, ushort fwCapability, ushort pOutput, _devicemodeW* pDevMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawEscape(HDC__* hdc, int iEscape, int cjIn, byte lpIn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Ellipse(HDC__* hdc, int left, int top, int right, int bottom);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumFontFamiliesExA(HDC__* hdc, tagLOGFONTA* lpLogfont, OLDFONTENUMPROCA lpProc, long lParam, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumFontFamiliesExW(HDC__* hdc, tagLOGFONTW* lpLogfont, OLDFONTENUMPROCW lpProc, long lParam, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumFontFamiliesA(HDC__* hdc, byte lpLogfont, OLDFONTENUMPROCA lpProc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumFontFamiliesW(HDC__* hdc, ushort lpLogfont, OLDFONTENUMPROCW lpProc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumFontsA(HDC__* hdc, byte lpLogfont, OLDFONTENUMPROCA lpProc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumFontsW(HDC__* hdc, ushort lpLogfont, OLDFONTENUMPROCW lpProc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumObjects(HDC__* hdc, int nType, Option lpFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EqualRgn(HRGN__* hrgn1, HRGN__* hrgn2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Escape(HDC__* hdc, int iEscape, int cjIn, byte pvIn, void* pvOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExtEscape(HDC__* hdc, int iEscape, int cjInput, byte lpInData, int cjOutput, byte lpOutData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExcludeClipRect(HDC__* hdc, int left, int top, int right, int bottom);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* ExtCreateRegion(tagXFORM* lpx, UInt32 nCount, _RGNDATA* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExtFloodFill(HDC__* hdc, int x, int y, UInt32 color, uint type_);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FillRgn(HDC__* hdc, HRGN__* hrgn, HBRUSH__* hbr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FloodFill(HDC__* hdc, int x, int y, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FrameRgn(HDC__* hdc, HRGN__* hrgn, HBRUSH__* hbr, int w, int h);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetROP2(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAspectRatioFilterEx(HDC__* hdc, tagSIZE* lpsize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetBkColor(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetDCBrushColor(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetDCPenColor(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetBkMode(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetBitmapBits(HBITMAP__* hbit, Int32 cb, void* lpvBits);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetBitmapDimensionEx(HBITMAP__* hbit, tagSIZE* lpsize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetBoundsRect(HDC__* hdc, tagRECT* lprect, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetBrushOrgEx(HDC__* hdc, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharWidthA(HDC__* hdc, uint iFirst, uint iLast, int* lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharWidthW(HDC__* hdc, uint iFirst, uint iLast, int* lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharWidth32A(HDC__* hdc, uint iFirst, uint iLast, int* lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharWidth32W(HDC__* hdc, uint iFirst, uint iLast, int* lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharWidthFloatA(HDC__* hdc, uint iFirst, uint iLast, float lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharWidthFloatW(HDC__* hdc, uint iFirst, uint iLast, float lpBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharABCWidthsA(HDC__* hdc, uint wFirst, uint wLast, _ABC* lpABC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharABCWidthsW(HDC__* hdc, uint wFirst, uint wLast, _ABC* lpABC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharABCWidthsFloatA(HDC__* hdc, uint iFirst, uint iLast, _ABCFLOAT* lpABC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharABCWidthsFloatW(HDC__* hdc, uint iFirst, uint iLast, _ABCFLOAT* lpABC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClipBox(HDC__* hdc, tagRECT* lprect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClipRgn(HDC__* hdc, HRGN__* hrgn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMetaRgn(HDC__* hdc, HRGN__* hrgn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetCurrentObject(HDC__* hdc, uint type_);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrentPositionEx(HDC__* hdc, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDeviceCaps(HDC__* hdc, int index);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDIBits(HDC__* hdc, HBITMAP__* hbm, uint start, uint cLines, void* lpvBits, tagBITMAPINFO* lpbmi, uint usage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFontData(HDC__* hdc, UInt32 dwTable, UInt32 dwOffset, void* pvBuffer, UInt32 cjBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetGlyphOutlineA(HDC__* hdc, uint uChar, uint fuFormat, _GLYPHMETRICS* lpgm, UInt32 cjBuffer, void* pvBuffer, _MAT2* lpmat2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetGlyphOutlineW(HDC__* hdc, uint uChar, uint fuFormat, _GLYPHMETRICS* lpgm, UInt32 cjBuffer, void* pvBuffer, _MAT2* lpmat2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetGraphicsMode(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMapMode(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetMetaFileBitsEx(HMETAFILE__* hMF, uint cbBuffer, void* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMETAFILE__* GetMetaFileA(byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMETAFILE__* GetMetaFileW(ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetNearestColor(HDC__* hdc, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetNearestPaletteIndex(HPALETTE__* h, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetObjectType(void* h);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetOutlineTextMetricsA(HDC__* hdc, uint cjCopy, _OUTLINETEXTMETRICA* potm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetOutlineTextMetricsW(HDC__* hdc, uint cjCopy, _OUTLINETEXTMETRICW* potm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetPaletteEntries(HPALETTE__* hpal, uint iStart, uint cEntries, tagPALETTEENTRY* pPalEntries);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPixel(HDC__* hdc, int x, int y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPixelFormat(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPolyFillMode(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetRasterizerCaps(_RASTERIZER_STATUS* lpraststat, uint cjBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetRandomRgn(HDC__* hdc, HRGN__* hrgn, int i);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetRegionData(HRGN__* hrgn, UInt32 nCount, _RGNDATA* lpRgnData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetRgnBox(HRGN__* hrgn, tagRECT* lprc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetStockObject(int i);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetStretchBltMode(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemPaletteEntries(HDC__* hdc, uint iStart, uint cEntries, tagPALETTEENTRY* pPalEntries);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemPaletteUse(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextCharacterExtra(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetTextAlign(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTextColor(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextExtentPointA(HDC__* hdc, byte lpString, int c, tagSIZE* lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextExtentPointW(HDC__* hdc, ushort lpString, int c, tagSIZE* lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextExtentPoint32A(HDC__* hdc, byte lpString, int c, tagSIZE* psizl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextExtentPoint32W(HDC__* hdc, ushort lpString, int c, tagSIZE* psizl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextExtentExPointA(HDC__* hdc, byte lpszString, int cchString, int nMaxExtent, int* lpnFit, int* lpnDx, tagSIZE* lpSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextExtentExPointW(HDC__* hdc, ushort lpszString, int cchString, int nMaxExtent, int* lpnFit, int* lpnDx, tagSIZE* lpSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextCharset(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextCharsetInfo(HDC__* hdc, tagFONTSIGNATURE* lpSig, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TranslateCharsetInfo(UInt32* lpSrc, tagCHARSETINFO* lpCs, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFontLanguageInfo(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCharacterPlacementA(HDC__* hdc, byte lpString, int nCount, int nMexExtent, tagGCP_RESULTSA* lpResults, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetCharacterPlacementW(HDC__* hdc, ushort lpString, int nCount, int nMexExtent, tagGCP_RESULTSW* lpResults, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFontUnicodeRanges(HDC__* hdc, tagGLYPHSET* lpgs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetGlyphIndicesA(HDC__* hdc, byte lpstr, int c, ushort pgi, UInt32 fl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetGlyphIndicesW(HDC__* hdc, ushort lpstr, int c, ushort pgi, UInt32 fl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextExtentPointI(HDC__* hdc, ushort pgiIn, int cgi, tagSIZE* psize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextExtentExPointI(HDC__* hdc, ushort lpwszString, int cwchString, int nMaxExtent, int* lpnFit, int* lpnDx, tagSIZE* lpSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharWidthI(HDC__* hdc, uint giFirst, uint cgi, ushort pgi, int* piWidths);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCharABCWidthsI(HDC__* hdc, uint giFirst, uint cgi, ushort pgi, _ABC* pabc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddFontResourceExA(byte name, UInt32 fl, void* res);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddFontResourceExW(ushort name, UInt32 fl, void* res);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveFontResourceExA(byte name, UInt32 fl, void* pdv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveFontResourceExW(ushort name, UInt32 fl, void* pdv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* AddFontMemResourceEx(void* pFileView, UInt32 cjSize, void* pvResrved, UInt32* pNumFonts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveFontMemResourceEx(void* h);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HFONT__* CreateFontIndirectExA(tagENUMLOGFONTEXDVA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HFONT__* CreateFontIndirectExW(tagENUMLOGFONTEXDVW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetViewportExtEx(HDC__* hdc, tagSIZE* lpsize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetViewportOrgEx(HDC__* hdc, tagPOINT* lppoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowExtEx(HDC__* hdc, tagSIZE* lpsize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowOrgEx(HDC__* hdc, tagPOINT* lppoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IntersectClipRect(HDC__* hdc, int left, int top, int right, int bottom);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InvertRgn(HDC__* hdc, HRGN__* hrgn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LineDDA(int xStart, int yStart, int xEnd, int yEnd, Option lpProc, long data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LineTo(HDC__* hdc, int x, int y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MaskBlt(HDC__* hdcDest, int xDest, int yDest, int width, int height, HDC__* hdcSrc, int xSrc, int ySrc, HBITMAP__* hbmMask, int xMask, int yMask, UInt32 rop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PlgBlt(HDC__* hdcDest, tagPOINT* lpPoint, HDC__* hdcSrc, int xSrc, int ySrc, int width, int height, HBITMAP__* hbmMask, int xMask, int yMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OffsetClipRgn(HDC__* hdc, int x, int y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OffsetRgn(HRGN__* hrgn, int x, int y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PatBlt(HDC__* hdc, int x, int y, int w, int h, UInt32 rop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Pie(HDC__* hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PlayMetaFile(HDC__* hdc, HMETAFILE__* hmf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PaintRgn(HDC__* hdc, HRGN__* hrgn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PolyPolygon(HDC__* hdc, tagPOINT* apt, int* asz, int csz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PtInRegion(HRGN__* hrgn, int x, int y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PtVisible(HDC__* hdc, int x, int y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RectInRegion(HRGN__* hrgn, tagRECT* lprect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RectVisible(HDC__* hdc, tagRECT* lprect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Rectangle(HDC__* hdc, int left, int top, int right, int bottom);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RestoreDC(HDC__* hdc, int nSavedDC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* ResetDCA(HDC__* hdc, _devicemodeA* lpdm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* ResetDCW(HDC__* hdc, _devicemodeW* lpdm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint RealizePalette(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveFontResourceA(byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveFontResourceW(ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RoundRect(HDC__* hdc, int left, int top, int right, int bottom, int width, int height);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ResizePalette(HPALETTE__* hpal, uint n);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SaveDC(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SelectClipRgn(HDC__* hdc, HRGN__* hrgn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExtSelectClipRgn(HDC__* hdc, HRGN__* hrgn, int mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMetaRgn(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SelectObject(HDC__* hdc, void* h);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HPALETTE__* SelectPalette(HDC__* hdc, HPALETTE__* hPal, int bForceBkgd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetBkColor(HDC__* hdc, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetDCBrushColor(HDC__* hdc, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetDCPenColor(HDC__* hdc, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetBkMode(HDC__* hdc, int mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetBitmapBits(HBITMAP__* hbm, UInt32 cb, void* pvBits);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SetBoundsRect(HDC__* hdc, tagRECT* lprect, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDIBits(HDC__* hdc, HBITMAP__* hbm, uint start, uint cLines, void* lpBits, tagBITMAPINFO* lpbmi, uint ColorUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDIBitsToDevice(HDC__* hdc, int xDest, int yDest, UInt32 w, UInt32 h, int xSrc, int ySrc, uint StartScan, uint cLines, void* lpvBits, tagBITMAPINFO* lpbmi, uint ColorUse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetMapperFlags(HDC__* hdc, UInt32 flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetGraphicsMode(HDC__* hdc, int iMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMapMode(HDC__* hdc, int iMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetLayout(HDC__* hdc, UInt32 l);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetLayout(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMETAFILE__* SetMetaFileBitsEx(uint cbBuffer, byte* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SetPaletteEntries(HPALETTE__* hpal, uint iStart, uint cEntries, tagPALETTEENTRY* pPalEntries);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetPixel(HDC__* hdc, int x, int y, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPixelV(HDC__* hdc, int x, int y, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPixelFormat(HDC__* hdc, int format, tagPIXELFORMATDESCRIPTOR* ppfd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPolyFillMode(HDC__* hdc, int mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StretchBlt(HDC__* hdcDest, int xDest, int yDest, int wDest, int hDest, HDC__* hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, UInt32 rop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetRectRgn(HRGN__* hrgn, int left, int top, int right, int bottom);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StretchDIBits(HDC__* hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight, void* lpBits, tagBITMAPINFO* lpbmi, uint iUsage, UInt32 rop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetROP2(HDC__* hdc, int rop2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetStretchBltMode(HDC__* hdc, int mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SetSystemPaletteUse(HDC__* hdc, uint use_);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetTextCharacterExtra(HDC__* hdc, int extra);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetTextColor(HDC__* hdc, UInt32 color);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SetTextAlign(HDC__* hdc, uint align);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetTextJustification(HDC__* hdc, int extra, int count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateColors(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AlphaBlend(HDC__* hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC__* hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, _BLENDFUNCTION ftn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TransparentBlt(HDC__* hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC__* hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, uint crTransparent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GradientFill(HDC__* hdc, _TRIVERTEX* pVertex, UInt32 nVertex, void* pMesh, UInt32 nMesh, UInt32 ulMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GdiAlphaBlend(HDC__* hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC__* hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, _BLENDFUNCTION ftn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GdiTransparentBlt(HDC__* hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC__* hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, uint crTransparent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GdiGradientFill(HDC__* hdc, _TRIVERTEX* pVertex, UInt32 nVertex, void* pMesh, UInt32 nCount, UInt32 ulMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PlayMetaFileRecord(HDC__* hdc, tagHANDLETABLE* lpHandleTable, tagMETARECORD* lpMR, uint noObjs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumMetaFile(HDC__* hdc, HMETAFILE__* hmf, Option proc_, long param);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HENHMETAFILE__* CloseEnhMetaFile(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HENHMETAFILE__* CopyEnhMetaFileA(HENHMETAFILE__* hEnh, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HENHMETAFILE__* CopyEnhMetaFileW(HENHMETAFILE__* hEnh, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateEnhMetaFileA(HDC__* hdc, byte lpFilename, tagRECT* lprc, byte lpDesc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* CreateEnhMetaFileW(HDC__* hdc, ushort lpFilename, tagRECT* lprc, ushort lpDesc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteEnhMetaFile(HENHMETAFILE__* hmf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumEnhMetaFile(HDC__* hdc, HENHMETAFILE__* hmf, Option proc_, void* param, tagRECT* lpRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HENHMETAFILE__* GetEnhMetaFileA(byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HENHMETAFILE__* GetEnhMetaFileW(ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetEnhMetaFileBits(HENHMETAFILE__* hEMF, uint nSize, byte lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetEnhMetaFileDescriptionA(HENHMETAFILE__* hemf, uint cchBuffer, byte lpDescription);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetEnhMetaFileDescriptionW(HENHMETAFILE__* hemf, uint cchBuffer, ushort lpDescription);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetEnhMetaFileHeader(HENHMETAFILE__* hemf, uint nSize, tagENHMETAHEADER* lpEnhMetaHeader);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetEnhMetaFilePaletteEntries(HENHMETAFILE__* hemf, uint nNumEntries, tagPALETTEENTRY* lpPaletteEntries);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetEnhMetaFilePixelFormat(HENHMETAFILE__* hemf, uint cbBuffer, tagPIXELFORMATDESCRIPTOR* ppfd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetWinMetaFileBits(HENHMETAFILE__* hemf, uint cbData16, byte pData16, int iMapMode, HDC__* hdcRef);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PlayEnhMetaFile(HDC__* hdc, HENHMETAFILE__* hmf, tagRECT* lprect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PlayEnhMetaFileRecord(HDC__* hdc, tagHANDLETABLE* pht, tagENHMETARECORD* pmr, uint cht);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HENHMETAFILE__* SetEnhMetaFileBits(uint nSize, byte* pb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HENHMETAFILE__* SetWinMetaFileBits(uint nSize, byte* lpMeta16Data, HDC__* hdcRef, tagMETAFILEPICT* lpMFP);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GdiComment(HDC__* hdc, uint nSize, byte* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextMetricsA(HDC__* hdc, tagTEXTMETRICA* lptm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextMetricsW(HDC__* hdc, tagTEXTMETRICW* lptm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AngleArc(HDC__* hdc, int x, int y, UInt32 r, float StartAngle, float SweepAngle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PolyPolyline(HDC__* hdc, tagPOINT* apt, UInt32* asz, UInt32 csz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWorldTransform(HDC__* hdc, tagXFORM* lpxf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWorldTransform(HDC__* hdc, tagXFORM* lpxf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ModifyWorldTransform(HDC__* hdc, tagXFORM* lpxf, UInt32 mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CombineTransform(tagXFORM* lpxfOut, tagXFORM* lpxf1, tagXFORM* lpxf2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBITMAP__* CreateDIBSection(HDC__* hdc, tagBITMAPINFO* pbmi, uint usage, void** ppvBits, void* hSection, UInt32 offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDIBColorTable(HDC__* hdc, uint iStart, uint cEntries, tagRGBQUAD* prgbq);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SetDIBColorTable(HDC__* hdc, uint iStart, uint cEntries, tagRGBQUAD* prgbq);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetColorAdjustment(HDC__* hdc, tagCOLORADJUSTMENT* lpca);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetColorAdjustment(HDC__* hdc, tagCOLORADJUSTMENT* lpca);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HPALETTE__* CreateHalftonePalette(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StartDocA(HDC__* hdc, _DOCINFOA* lpdi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StartDocW(HDC__* hdc, _DOCINFOW* lpdi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndDoc(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StartPage(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndPage(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AbortDoc(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetAbortProc(HDC__* hdc, Option proc_);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AbortPath(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ArcTo(HDC__* hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BeginPath(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseFigure(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndPath(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FillPath(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlattenPath(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPath(HDC__* hdc, tagPOINT* apt, byte aj, int cpt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* PathToRegion(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PolyDraw(HDC__* hdc, tagPOINT* apt, byte* aj, int cpt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SelectClipPath(HDC__* hdc, int mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetArcDirection(HDC__* hdc, int dir);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMiterLimit(HDC__* hdc, float limit, float old);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StrokeAndFillPath(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StrokePath(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WidenPath(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HPEN__* ExtCreatePen(UInt32 iPenStyle, UInt32 cWidth, tagLOGBRUSH* plbrush, UInt32 cStyle, UInt32* pstyle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMiterLimit(HDC__* hdc, float plimit);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetArcDirection(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetObjectA(void* h, int c, void* pv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetObjectW(void* h, int c, void* pv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveToEx(HDC__* hdc, int x, int y, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TextOutA(HDC__* hdc, int x, int y, byte lpString, int c);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TextOutW(HDC__* hdc, int x, int y, ushort lpString, int c);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExtTextOutA(HDC__* hdc, int x, int y, uint options, tagRECT* lprect, byte lpString, uint c, int* lpDx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExtTextOutW(HDC__* hdc, int x, int y, uint options, tagRECT* lprect, ushort lpString, uint c, int* lpDx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PolyTextOutA(HDC__* hdc, tagPOLYTEXTA* ppt, int nstrings);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PolyTextOutW(HDC__* hdc, tagPOLYTEXTW* ppt, int nstrings);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HRGN__* CreatePolygonRgn(tagPOINT* pptl, int cPoint, int iMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DPtoLP(HDC__* hdc, tagPOINT* lppt, int c);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LPtoDP(HDC__* hdc, tagPOINT* lppt, int c);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Polygon(HDC__* hdc, tagPOINT* apt, int cpt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Polyline(HDC__* hdc, tagPOINT* apt, int cpt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PolyBezier(HDC__* hdc, tagPOINT* apt, UInt32 cpt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PolyBezierTo(HDC__* hdc, tagPOINT* apt, UInt32 cpt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PolylineTo(HDC__* hdc, tagPOINT* apt, UInt32 cpt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetViewportExtEx(HDC__* hdc, int x, int y, tagSIZE* lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetViewportOrgEx(HDC__* hdc, int x, int y, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowExtEx(HDC__* hdc, int x, int y, tagSIZE* lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowOrgEx(HDC__* hdc, int x, int y, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OffsetViewportOrgEx(HDC__* hdc, int x, int y, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OffsetWindowOrgEx(HDC__* hdc, int x, int y, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScaleViewportExtEx(HDC__* hdc, int xn, int dx, int yn, int yd, tagSIZE* lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScaleWindowExtEx(HDC__* hdc, int xn, int xd, int yn, int yd, tagSIZE* lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetBitmapDimensionEx(HBITMAP__* hbm, int w, int h, tagSIZE* lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetBrushOrgEx(HDC__* hdc, int x, int y, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextFaceA(HDC__* hdc, int c, byte lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTextFaceW(HDC__* hdc, int c, ushort lpName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetKerningPairsA(HDC__* hdc, UInt32 nPairs, tagKERNINGPAIR* lpKernPair);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetKerningPairsW(HDC__* hdc, UInt32 nPairs, tagKERNINGPAIR* lpKernPair);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDCOrgEx(HDC__* hdc, tagPOINT* lppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FixBrushOrgEx(HDC__* hdc, int x, int y, tagPOINT* ptl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnrealizeObject(void* h);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GdiFlush();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GdiSetBatchLimit(UInt32 dw);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GdiGetBatchLimit();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetICMMode(HDC__* hdc, int mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckColorsInGamut(HDC__* hdc, tagRGBTRIPLE* lpRGBTriple, void* dlpBuffer, UInt32 nCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HCOLORSPACE__* GetColorSpace(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLogColorSpaceA(HCOLORSPACE__* hColorSpace, tagLOGCOLORSPACEA* lpBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLogColorSpaceW(HCOLORSPACE__* hColorSpace, tagLOGCOLORSPACEW* lpBuffer, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HCOLORSPACE__* CreateColorSpaceA(tagLOGCOLORSPACEA* lplcs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HCOLORSPACE__* CreateColorSpaceW(tagLOGCOLORSPACEW* lplcs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HCOLORSPACE__* SetColorSpace(HDC__* hdc, HCOLORSPACE__* hcs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteColorSpace(HCOLORSPACE__* hcs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetICMProfileA(HDC__* hdc, UInt32 pBufSize, byte pszFilename);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetICMProfileW(HDC__* hdc, UInt32 pBufSize, ushort pszFilename);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetICMProfileA(HDC__* hdc, byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetICMProfileW(HDC__* hdc, ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDeviceGammaRamp(HDC__* hdc, void* lpRamp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDeviceGammaRamp(HDC__* hdc, void* lpRamp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ColorMatchToTarget(HDC__* hdc, HDC__* hdcTarget, UInt32 action);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumICMProfilesA(HDC__* hdc, Option proc_, long param);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumICMProfilesW(HDC__* hdc, Option proc_, long param);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateICMRegKeyA(UInt32 reserved, byte lpszCMID, byte lpszFileName, uint command);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateICMRegKeyW(UInt32 reserved, ushort lpszCMID, ushort lpszFileName, uint command);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ColorCorrectPalette(HDC__* hdc, HPALETTE__* hPal, UInt32 deFirst, UInt32 num);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglCopyContext(HGLRC__* arg1, HGLRC__* arg2, uint arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HGLRC__* wglCreateContext(HDC__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HGLRC__* wglCreateLayerContext(HDC__* arg1, int arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglDeleteContext(HGLRC__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HGLRC__* wglGetCurrentContext();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* wglGetCurrentDC();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option wglGetProcAddress(byte arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglMakeCurrent(HDC__* arg1, HGLRC__* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglShareLists(HGLRC__* arg1, HGLRC__* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglUseFontBitmapsA(HDC__* arg1, UInt32 arg2, UInt32 arg3, UInt32 arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglUseFontBitmapsW(HDC__* arg1, UInt32 arg2, UInt32 arg3, UInt32 arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SwapBuffers(HDC__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglUseFontOutlinesA(HDC__* arg1, UInt32 arg2, UInt32 arg3, UInt32 arg4, float arg5, float arg6, int arg7, _GLYPHMETRICSFLOAT* arg8);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglUseFontOutlinesW(HDC__* arg1, UInt32 arg2, UInt32 arg3, UInt32 arg4, float arg5, float arg6, int arg7, _GLYPHMETRICSFLOAT* arg8);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglDescribeLayerPlane(HDC__* arg1, int arg2, int arg3, uint arg4, tagLAYERPLANEDESCRIPTOR* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglSetLayerPaletteEntries(HDC__* arg1, int arg2, int arg3, int arg4, UInt32* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglGetLayerPaletteEntries(HDC__* arg1, int arg2, int arg3, int arg4, UInt32* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglRealizeLayerPalette(HDC__* arg1, int arg2, int arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wglSwapLayerBuffers(HDC__* arg1, uint arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 wglSwapMultipleBuffers(uint arg1, _WGLSWAP* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wvsprintfA(byte arg1, byte arg2, byte* arglist);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wvsprintfW(ushort arg1, ushort arg2, byte* arglist);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wsprintfA(byte arg1, byte arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wsprintfW(ushort arg1, ushort arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HKL__* LoadKeyboardLayoutA(byte pwszKLID, uint Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HKL__* LoadKeyboardLayoutW(ushort pwszKLID, uint Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HKL__* ActivateKeyboardLayout(HKL__* hkl, uint Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ToUnicodeEx(uint wVirtKey, uint wScanCode, byte* lpKeyState, ushort pwszBuff, int cchBuff, uint wFlags, HKL__* dwhkl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnloadKeyboardLayout(HKL__* hkl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetKeyboardLayoutNameA(byte pwszKLID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetKeyboardLayoutNameW(ushort pwszKLID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetKeyboardLayoutList(int nBuff, HKL__** lpList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HKL__* GetKeyboardLayout(UInt32 idThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMouseMovePointsEx(uint cbSize, tagMOUSEMOVEPOINT* lppt, tagMOUSEMOVEPOINT* lpptBuf, int nBufPoints, UInt32 resolution);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDESK__* CreateDesktopA(byte lpszDesktop, byte lpszDevice, _devicemodeA* pDevmode, UInt32 dwFlags, UInt32 dwDesiredAccess, _SECURITY_ATTRIBUTES* lpsa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDESK__* CreateDesktopW(ushort lpszDesktop, ushort lpszDevice, _devicemodeW* pDevmode, UInt32 dwFlags, UInt32 dwDesiredAccess, _SECURITY_ATTRIBUTES* lpsa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDESK__* CreateDesktopExA(byte lpszDesktop, byte lpszDevice, _devicemodeA* pDevmode, UInt32 dwFlags, UInt32 dwDesiredAccess, _SECURITY_ATTRIBUTES* lpsa, UInt32 ulHeapSize, void* pvoid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDESK__* CreateDesktopExW(ushort lpszDesktop, ushort lpszDevice, _devicemodeW* pDevmode, UInt32 dwFlags, UInt32 dwDesiredAccess, _SECURITY_ATTRIBUTES* lpsa, UInt32 ulHeapSize, void* pvoid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDESK__* OpenDesktopA(byte lpszDesktop, UInt32 dwFlags, int fInherit, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDESK__* OpenDesktopW(ushort lpszDesktop, UInt32 dwFlags, int fInherit, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDESK__* OpenInputDesktop(UInt32 dwFlags, int fInherit, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDesktopsA(HWINSTA__* hwinsta, NAMEENUMPROCA lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDesktopsW(HWINSTA__* hwinsta, NAMEENUMPROCW lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDesktopWindows(HDESK__* hDesktop, Option lpfn, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SwitchDesktop(HDESK__* hDesktop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadDesktop(HDESK__* hDesktop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseDesktop(HDESK__* hDesktop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDESK__* GetThreadDesktop(UInt32 dwThreadId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWINSTA__* CreateWindowStationA(byte lpwinsta, UInt32 dwFlags, UInt32 dwDesiredAccess, _SECURITY_ATTRIBUTES* lpsa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWINSTA__* CreateWindowStationW(ushort lpwinsta, UInt32 dwFlags, UInt32 dwDesiredAccess, _SECURITY_ATTRIBUTES* lpsa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWINSTA__* OpenWindowStationA(byte lpszWinSta, int fInherit, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWINSTA__* OpenWindowStationW(ushort lpszWinSta, int fInherit, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumWindowStationsA(NAMEENUMPROCA lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumWindowStationsW(NAMEENUMPROCW lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseWindowStation(HWINSTA__* hWinSta);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessWindowStation(HWINSTA__* hWinSta);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWINSTA__* GetProcessWindowStation();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetUserObjectSecurity(void* hObj, UInt32 pSIRequested, void* pSID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUserObjectSecurity(void* hObj, UInt32 pSIRequested, void* pSID, UInt32 nLength, UInt32 lpnLengthNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUserObjectInformationA(void* hObj, int nIndex, void* pvInfo, UInt32 nLength, UInt32 lpnLengthNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUserObjectInformationW(void* hObj, int nIndex, void* pvInfo, UInt32 nLength, UInt32 lpnLengthNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetUserObjectInformationA(void* hObj, int nIndex, void* pvInfo, UInt32 nLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetUserObjectInformationW(void* hObj, int nIndex, void* pvInfo, UInt32 nLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsHungAppWindow(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DisableProcessWindowsGhosting();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint RegisterWindowMessageA(byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint RegisterWindowMessageW(ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TrackMouseEvent(tagTRACKMOUSEEVENT* lpEventTrack);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawEdge(HDC__* hdc, tagRECT* qrc, uint edge, uint grfFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawFrameControl(HDC__* arg1, tagRECT* arg2, uint arg3, uint arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawCaption(HWND__* hwnd, HDC__* hdc, tagRECT* lprect, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawAnimatedRects(HWND__* hwnd, int idAni, tagRECT* lprcFrom, tagRECT* lprcTo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMessageA(tagMSG* lpMsg, HWND__* hWnd, uint wMsgFilterMin, uint wMsgFilterMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMessageW(tagMSG* lpMsg, HWND__* hWnd, uint wMsgFilterMin, uint wMsgFilterMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TranslateMessage(tagMSG* lpMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DispatchMessageA(tagMSG* lpMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DispatchMessageW(tagMSG* lpMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMessageQueue(int cMessagesMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PeekMessageA(tagMSG* lpMsg, HWND__* hWnd, uint wMsgFilterMin, uint wMsgFilterMax, uint wRemoveMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PeekMessageW(tagMSG* lpMsg, HWND__* hWnd, uint wMsgFilterMin, uint wMsgFilterMax, uint wRemoveMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterHotKey(HWND__* hWnd, int id, uint fsModifiers, uint vk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterHotKey(HWND__* hWnd, int id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExitWindowsEx(uint uFlags, UInt32 dwReason);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SwapMouseButton(int fSwap);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetMessagePos();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetMessageTime();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long GetMessageExtraInfo();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetUnpredictedMessagePos();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWow64Message();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SetMessageExtraInfo(long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SendMessageA(HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SendMessageW(HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SendMessageTimeoutA(HWND__* hWnd, uint Msg, ulong wParam, long lParam, uint fuFlags, uint uTimeout, ulong lpdwResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SendMessageTimeoutW(HWND__* hWnd, uint Msg, ulong wParam, long lParam, uint fuFlags, uint uTimeout, ulong lpdwResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SendNotifyMessageA(HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SendNotifyMessageW(HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SendMessageCallbackA(HWND__* hWnd, uint Msg, ulong wParam, long lParam, Option lpResultCallBack, ulong dwData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SendMessageCallbackW(HWND__* hWnd, uint Msg, ulong wParam, long lParam, Option lpResultCallBack, ulong dwData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BroadcastSystemMessageExA(UInt32 flags, UInt32 lpInfo, uint Msg, ulong wParam, long lParam, BSMINFO* pbsmInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BroadcastSystemMessageExW(UInt32 flags, UInt32 lpInfo, uint Msg, ulong wParam, long lParam, BSMINFO* pbsmInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BroadcastSystemMessageA(UInt32 flags, UInt32 lpInfo, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BroadcastSystemMessageW(UInt32 flags, UInt32 lpInfo, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RegisterDeviceNotificationA(void* hRecipient, void* NotificationFilter, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RegisterDeviceNotificationW(void* hRecipient, void* NotificationFilter, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterDeviceNotification(void* Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RegisterPowerSettingNotification(void* hRecipient, _GUID PowerSettingGuid, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterPowerSettingNotification(void* Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RegisterSuspendResumeNotification(void* hRecipient, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterSuspendResumeNotification(void* Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PostMessageA(HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PostMessageW(HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PostThreadMessageA(UInt32 idThread, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PostThreadMessageW(UInt32 idThread, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AttachThreadInput(UInt32 idAttach, UInt32 idAttachTo, int fAttach);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReplyMessage(long lResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WaitMessage();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WaitForInputIdle(void* hProcess, UInt32 dwMilliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefWindowProcA(HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefWindowProcW(HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void PostQuitMessage(int nExitCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long CallWindowProcA(Option lpPrevWndFunc, HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long CallWindowProcW(Option lpPrevWndFunc, HWND__* hWnd, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InSendMessage();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 InSendMessageEx(void* lpReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDoubleClickTime();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDoubleClickTime(uint arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort RegisterClassA(tagWNDCLASSA* lpWndClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort RegisterClassW(tagWNDCLASSW* lpWndClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterClassA(byte lpClassName, HINSTANCE__* hInstance);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterClassW(ushort lpClassName, HINSTANCE__* hInstance);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClassInfoA(HINSTANCE__* hInstance, byte lpClassName, tagWNDCLASSA* lpWndClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClassInfoW(HINSTANCE__* hInstance, ushort lpClassName, tagWNDCLASSW* lpWndClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort RegisterClassExA(tagWNDCLASSEXA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort RegisterClassExW(tagWNDCLASSEXW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClassInfoExA(HINSTANCE__* hInstance, byte lpszClass, tagWNDCLASSEXA* lpwcx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClassInfoExW(HINSTANCE__* hInstance, ushort lpszClass, tagWNDCLASSEXW* lpwcx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* CreateWindowExA(UInt32 dwExStyle, byte lpClassName, byte lpWindowName, UInt32 dwStyle, int X, int Y, int nWidth, int nHeight, HWND__* hWndParent, HMENU__* hMenu, HINSTANCE__* hInstance, void* lpParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* CreateWindowExW(UInt32 dwExStyle, ushort lpClassName, ushort lpWindowName, UInt32 dwStyle, int X, int Y, int nWidth, int nHeight, HWND__* hWndParent, HMENU__* hMenu, HINSTANCE__* hInstance, void* lpParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWindow(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsMenu(HMENU__* hMenu);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsChild(HWND__* hWndParent, HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DestroyWindow(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShowWindow(HWND__* hWnd, int nCmdShow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AnimateWindow(HWND__* hWnd, UInt32 dwTime, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateLayeredWindow(HWND__* hWnd, HDC__* hdcDst, tagPOINT* pptDst, tagSIZE* psize, HDC__* hdcSrc, tagPOINT* pptSrc, UInt32 crKey, _BLENDFUNCTION* pblend, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateLayeredWindowIndirect(HWND__* hWnd, tagUPDATELAYEREDWINDOWINFO* pULWInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLayeredWindowAttributes(HWND__* hwnd, UInt32* pcrKey, byte* pbAlpha, UInt32* pdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PrintWindow(HWND__* hwnd, HDC__* hdcBlt, uint nFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetLayeredWindowAttributes(HWND__* hwnd, UInt32 crKey, byte bAlpha, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShowWindowAsync(HWND__* hWnd, int nCmdShow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlashWindow(HWND__* hWnd, int bInvert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlashWindowEx(FLASHWINFO* pfwi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShowOwnedPopups(HWND__* hWnd, int fShow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenIcon(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseWindow(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MoveWindow(HWND__* hWnd, int X, int Y, int nWidth, int nHeight, int bRepaint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowPos(HWND__* hWnd, HWND__* hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowPlacement(HWND__* hWnd, tagWINDOWPLACEMENT* lpwndpl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowPlacement(HWND__* hWnd, tagWINDOWPLACEMENT* lpwndpl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowDisplayAffinity(HWND__* hWnd, UInt32* pdwAffinity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowDisplayAffinity(HWND__* hWnd, UInt32 dwAffinity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* BeginDeferWindowPos(int nNumWindows);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* DeferWindowPos(void* hWinPosInfo, HWND__* hWnd, HWND__* hWndInsertAfter, int x, int y, int cx, int cy, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndDeferWindowPos(void* hWinPosInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWindowVisible(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsIconic(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AnyPopup();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BringWindowToTop(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsZoomed(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* CreateDialogParamA(HINSTANCE__* hInstance, byte lpTemplateName, HWND__* hWndParent, Option lpDialogFunc, long dwInitParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* CreateDialogParamW(HINSTANCE__* hInstance, ushort lpTemplateName, HWND__* hWndParent, Option lpDialogFunc, long dwInitParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* CreateDialogIndirectParamA(HINSTANCE__* hInstance, DLGTEMPLATE* lpTemplate, HWND__* hWndParent, Option lpDialogFunc, long dwInitParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* CreateDialogIndirectParamW(HINSTANCE__* hInstance, DLGTEMPLATE* lpTemplate, HWND__* hWndParent, Option lpDialogFunc, long dwInitParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DialogBoxParamA(HINSTANCE__* hInstance, byte lpTemplateName, HWND__* hWndParent, Option lpDialogFunc, long dwInitParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DialogBoxParamW(HINSTANCE__* hInstance, ushort lpTemplateName, HWND__* hWndParent, Option lpDialogFunc, long dwInitParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DialogBoxIndirectParamA(HINSTANCE__* hInstance, DLGTEMPLATE* hDialogTemplate, HWND__* hWndParent, Option lpDialogFunc, long dwInitParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DialogBoxIndirectParamW(HINSTANCE__* hInstance, DLGTEMPLATE* hDialogTemplate, HWND__* hWndParent, Option lpDialogFunc, long dwInitParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndDialog(HWND__* hDlg, long nResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetDlgItem(HWND__* hDlg, int nIDDlgItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDlgItemInt(HWND__* hDlg, int nIDDlgItem, uint uValue, int bSigned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDlgItemInt(HWND__* hDlg, int nIDDlgItem, int* lpTranslated, int bSigned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDlgItemTextA(HWND__* hDlg, int nIDDlgItem, byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDlgItemTextW(HWND__* hDlg, int nIDDlgItem, ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDlgItemTextA(HWND__* hDlg, int nIDDlgItem, byte lpString, int cchMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDlgItemTextW(HWND__* hDlg, int nIDDlgItem, ushort lpString, int cchMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckDlgButton(HWND__* hDlg, int nIDButton, uint uCheck);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckRadioButton(HWND__* hDlg, int nIDFirstButton, int nIDLastButton, int nIDCheckButton);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint IsDlgButtonChecked(HWND__* hDlg, int nIDButton);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SendDlgItemMessageA(HWND__* hDlg, int nIDDlgItem, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SendDlgItemMessageW(HWND__* hDlg, int nIDDlgItem, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetNextDlgGroupItem(HWND__* hDlg, HWND__* hCtl, int bPrevious);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetNextDlgTabItem(HWND__* hDlg, HWND__* hCtl, int bPrevious);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDlgCtrlID(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetDialogBaseUnits();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefDlgProcA(HWND__* hDlg, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefDlgProcW(HWND__* hDlg, uint Msg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDialogControlDpiChangeBehavior(HWND__* hWnd, int mask, int values);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDialogControlDpiChangeBehavior(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDialogDpiChangeBehavior(HWND__* hDlg, int mask, int values);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDialogDpiChangeBehavior(HWND__* hDlg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CallMsgFilterA(tagMSG* lpMsg, int nCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CallMsgFilterW(tagMSG* lpMsg, int nCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenClipboard(HWND__* hWndNewOwner);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseClipboard();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetClipboardSequenceNumber();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetClipboardOwner();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* SetClipboardViewer(HWND__* hWndNewViewer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetClipboardViewer();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeClipboardChain(HWND__* hWndRemove, HWND__* hWndNewNext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SetClipboardData(uint uFormat, void* hMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetClipboardData(uint uFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint RegisterClipboardFormatA(byte lpszFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint RegisterClipboardFormatW(ushort lpszFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CountClipboardFormats();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint EnumClipboardFormats(uint format);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClipboardFormatNameA(uint format, byte lpszFormatName, int cchMaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClipboardFormatNameW(uint format, ushort lpszFormatName, int cchMaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EmptyClipboard();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsClipboardFormatAvailable(uint format);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPriorityClipboardFormat(uint* paFormatPriorityList, int cFormats);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetOpenClipboardWindow();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddClipboardFormatListener(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveClipboardFormatListener(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUpdatedClipboardFormats(uint* lpuiFormats, uint cFormats, uint* pcFormatsOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CharToOemA(byte pSrc, byte pDst);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CharToOemW(ushort pSrc, byte pDst);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OemToCharA(byte pSrc, byte pDst);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OemToCharW(byte pSrc, ushort pDst);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CharToOemBuffA(byte lpszSrc, byte lpszDst, UInt32 cchDstLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CharToOemBuffW(ushort lpszSrc, byte lpszDst, UInt32 cchDstLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OemToCharBuffA(byte lpszSrc, byte lpszDst, UInt32 cchDstLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OemToCharBuffW(byte lpszSrc, ushort lpszDst, UInt32 cchDstLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CharUpperA(byte lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort CharUpperW(ushort lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CharUpperBuffA(byte lpsz, UInt32 cchLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CharUpperBuffW(ushort lpsz, UInt32 cchLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CharLowerA(byte lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort CharLowerW(ushort lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CharLowerBuffA(byte lpsz, UInt32 cchLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CharLowerBuffW(ushort lpsz, UInt32 cchLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CharNextA(byte lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort CharNextW(ushort lpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CharPrevA(byte lpszStart, byte lpszCurrent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort CharPrevW(ushort lpszStart, ushort lpszCurrent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CharNextExA(ushort CodePage, byte lpCurrentChar, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CharPrevExA(ushort CodePage, byte lpStart, byte lpCurrentChar, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsCharAlphaA(byte ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsCharAlphaW(ushort ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsCharAlphaNumericA(byte ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsCharAlphaNumericW(ushort ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsCharUpperA(byte ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsCharUpperW(ushort ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsCharLowerA(byte ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsCharLowerW(ushort ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* SetFocus(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetActiveWindow();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetFocus();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetKBCodePage();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short GetKeyState(int nVirtKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short GetAsyncKeyState(int vKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetKeyboardState(byte lpKeyState);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetKeyboardState(byte lpKeyState);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetKeyNameTextA(Int32 lParam, byte lpString, int cchSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetKeyNameTextW(Int32 lParam, ushort lpString, int cchSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetKeyboardType(int nTypeFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ToAscii(uint uVirtKey, uint uScanCode, byte* lpKeyState, ushort lpChar, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ToAsciiEx(uint uVirtKey, uint uScanCode, byte* lpKeyState, ushort lpChar, uint uFlags, HKL__* dwhkl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ToUnicode(uint wVirtKey, uint wScanCode, byte* lpKeyState, ushort pwszBuff, int cchBuff, uint wFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 OemKeyScan(ushort wOemChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short VkKeyScanA(byte ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short VkKeyScanW(ushort ch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short VkKeyScanExA(byte ch, HKL__* dwhkl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short VkKeyScanExW(ushort ch, HKL__* dwhkl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void keybd_event(byte bVk, byte bScan, UInt32 dwFlags, ulong dwExtraInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void mouse_event(UInt32 dwFlags, UInt32 dx, UInt32 dy, UInt32 dwData, ulong dwExtraInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SendInput(uint cInputs, tagINPUT* pInputs, int cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTouchInputInfo(HTOUCHINPUT__* hTouchInput, uint cInputs, tagTOUCHINPUT* pInputs, int cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseTouchInputHandle(HTOUCHINPUT__* hTouchInput);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterTouchWindow(HWND__* hwnd, UInt32 ulFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterTouchWindow(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsTouchWindow(HWND__* hwnd, UInt32 pulFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitializeTouchInjection(uint maxCount, UInt32 dwMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InjectTouchInput(uint count, tagPOINTER_TOUCH_INFO* contacts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerType(uint pointerId, UInt32* pointerType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerCursorId(uint pointerId, uint* cursorId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerInfo(uint pointerId, tagPOINTER_INFO* pointerInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerInfoHistory(uint pointerId, uint* entriesCount, tagPOINTER_INFO* pointerInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerFrameInfo(uint pointerId, uint* pointerCount, tagPOINTER_INFO* pointerInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerFrameInfoHistory(uint pointerId, uint* entriesCount, uint* pointerCount, tagPOINTER_INFO* pointerInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerTouchInfo(uint pointerId, tagPOINTER_TOUCH_INFO* touchInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerTouchInfoHistory(uint pointerId, uint* entriesCount, tagPOINTER_TOUCH_INFO* touchInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerFrameTouchInfo(uint pointerId, uint* pointerCount, tagPOINTER_TOUCH_INFO* touchInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerFrameTouchInfoHistory(uint pointerId, uint* entriesCount, uint* pointerCount, tagPOINTER_TOUCH_INFO* touchInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerPenInfo(uint pointerId, tagPOINTER_PEN_INFO* penInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerPenInfoHistory(uint pointerId, uint* entriesCount, tagPOINTER_PEN_INFO* penInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerFramePenInfo(uint pointerId, uint* pointerCount, tagPOINTER_PEN_INFO* penInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerFramePenInfoHistory(uint pointerId, uint* entriesCount, uint* pointerCount, tagPOINTER_PEN_INFO* penInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SkipPointerFrameMessages(uint pointerId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterPointerInputTarget(HWND__* hwnd, UInt32 pointerType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterPointerInputTarget(HWND__* hwnd, UInt32 pointerType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterPointerInputTargetEx(HWND__* hwnd, UInt32 pointerType, int fObserve);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnregisterPointerInputTargetEx(HWND__* hwnd, UInt32 pointerType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HSYNTHETICPOINTERDEVICE__* CreateSyntheticPointerDevice(UInt32 pointerType, UInt32 maxCount, int mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InjectSyntheticPointerInput(HSYNTHETICPOINTERDEVICE__* device, tagPOINTER_TYPE_INFO* pointerInfo, uint count);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DestroySyntheticPointerDevice(HSYNTHETICPOINTERDEVICE__* device);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnableMouseInPointer(int fEnable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsMouseInPointerEnabled();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnableMouseInPointerForThread();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterTouchHitTestingWindow(HWND__* hwnd, UInt32 value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EvaluateProximityToRect(tagRECT* controlBoundingBox, tagTOUCH_HIT_TESTING_INPUT* pHitTestingInput, tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EvaluateProximityToPolygon(uint numVertices, tagPOINT* controlPolygon, tagTOUCH_HIT_TESTING_INPUT* pHitTestingInput, tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long PackTouchHitTestingProximityEvaluation(tagTOUCH_HIT_TESTING_INPUT* pHitTestingInput, tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowFeedbackSetting(HWND__* hwnd, tagFEEDBACK_TYPE feedback, UInt32 dwFlags, uint* pSize, void* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowFeedbackSetting(HWND__* hwnd, tagFEEDBACK_TYPE feedback, UInt32 dwFlags, uint size, void* configuration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerInputTransform(uint pointerId, uint historyCount, tagINPUT_TRANSFORM* inputTransform);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLastInputInfo(tagLASTINPUTINFO* plii);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint MapVirtualKeyA(uint uCode, uint uMapType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint MapVirtualKeyW(uint uCode, uint uMapType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint MapVirtualKeyExA(uint uCode, uint uMapType, HKL__* dwhkl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint MapVirtualKeyExW(uint uCode, uint uMapType, HKL__* dwhkl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetInputState();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetQueueStatus(uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetCapture();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* SetCapture(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReleaseCapture();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 MsgWaitForMultipleObjects(UInt32 nCount, void** pHandles, int fWaitAll, UInt32 dwMilliseconds, UInt32 dwWakeMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 MsgWaitForMultipleObjectsEx(UInt32 nCount, void** pHandles, UInt32 dwMilliseconds, UInt32 dwWakeMask, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SetTimer(HWND__* hWnd, ulong nIDEvent, uint uElapse, Option lpTimerFunc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SetCoalescableTimer(HWND__* hWnd, ulong nIDEvent, uint uElapse, Option lpTimerFunc, UInt32 uToleranceDelay);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int KillTimer(HWND__* hWnd, ulong uIDEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWindowUnicode(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnableWindow(HWND__* hWnd, int bEnable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWindowEnabled(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HACCEL__* LoadAcceleratorsA(HINSTANCE__* hInstance, byte lpTableName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HACCEL__* LoadAcceleratorsW(HINSTANCE__* hInstance, ushort lpTableName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HACCEL__* CreateAcceleratorTableA(tagACCEL* paccel, int cAccel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HACCEL__* CreateAcceleratorTableW(tagACCEL* paccel, int cAccel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DestroyAcceleratorTable(HACCEL__* hAccel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyAcceleratorTableA(HACCEL__* hAccelSrc, tagACCEL* lpAccelDst, int cAccelEntries);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyAcceleratorTableW(HACCEL__* hAccelSrc, tagACCEL* lpAccelDst, int cAccelEntries);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TranslateAcceleratorA(HWND__* hWnd, HACCEL__* hAccTable, tagMSG* lpMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TranslateAcceleratorW(HWND__* hWnd, HACCEL__* hAccTable, tagMSG* lpMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemMetrics(int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemMetricsForDpi(int nIndex, uint dpi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* LoadMenuA(HINSTANCE__* hInstance, byte lpMenuName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* LoadMenuW(HINSTANCE__* hInstance, ushort lpMenuName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* LoadMenuIndirectA(void* lpMenuTemplate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* LoadMenuIndirectW(void* lpMenuTemplate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* GetMenu(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMenu(HWND__* hWnd, HMENU__* hMenu);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeMenuA(HMENU__* hMenu, uint cmd, byte lpszNewItem, uint cmdInsert, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeMenuW(HMENU__* hMenu, uint cmd, ushort lpszNewItem, uint cmdInsert, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HiliteMenuItem(HWND__* hWnd, HMENU__* hMenu, uint uIDHiliteItem, uint uHilite);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMenuStringA(HMENU__* hMenu, uint uIDItem, byte lpString, int cchMax, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMenuStringW(HMENU__* hMenu, uint uIDItem, ushort lpString, int cchMax, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetMenuState(HMENU__* hMenu, uint uId, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawMenuBar(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* GetSystemMenu(HWND__* hWnd, int bRevert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* CreateMenu();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* CreatePopupMenu();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DestroyMenu(HMENU__* hMenu);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CheckMenuItem(HMENU__* hMenu, uint uIDCheckItem, uint uCheck);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnableMenuItem(HMENU__* hMenu, uint uIDEnableItem, uint uEnable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMENU__* GetSubMenu(HMENU__* hMenu, int nPos);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetMenuItemID(HMENU__* hMenu, int nPos);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMenuItemCount(HMENU__* hMenu);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InsertMenuA(HMENU__* hMenu, uint uPosition, uint uFlags, ulong uIDNewItem, byte lpNewItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InsertMenuW(HMENU__* hMenu, uint uPosition, uint uFlags, ulong uIDNewItem, ushort lpNewItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AppendMenuA(HMENU__* hMenu, uint uFlags, ulong uIDNewItem, byte lpNewItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AppendMenuW(HMENU__* hMenu, uint uFlags, ulong uIDNewItem, ushort lpNewItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ModifyMenuA(HMENU__* hMnu, uint uPosition, uint uFlags, ulong uIDNewItem, byte lpNewItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ModifyMenuW(HMENU__* hMnu, uint uPosition, uint uFlags, ulong uIDNewItem, ushort lpNewItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RemoveMenu(HMENU__* hMenu, uint uPosition, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteMenu(HMENU__* hMenu, uint uPosition, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMenuItemBitmaps(HMENU__* hMenu, uint uPosition, uint uFlags, HBITMAP__* hBitmapUnchecked, HBITMAP__* hBitmapChecked);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetMenuCheckMarkDimensions();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TrackPopupMenu(HMENU__* hMenu, uint uFlags, int x, int y, int nReserved, HWND__* hWnd, tagRECT* prcRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TrackPopupMenuEx(HMENU__* hMenu, uint uFlags, int x, int y, HWND__* hwnd, TPMPARAMS* lptpm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CalculatePopupWindowPosition(tagPOINT* anchorPoint, tagSIZE* windowSize, uint flags, tagRECT* excludeRect, tagRECT* popupWindowPosition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMenuInfo(HMENU__* arg1, tagMENUINFO* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMenuInfo(HMENU__* arg1, MENUINFO* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndMenu();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InsertMenuItemA(HMENU__* hmenu, uint item, int fByPosition, MENUITEMINFOA* lpmi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InsertMenuItemW(HMENU__* hmenu, uint item, int fByPosition, MENUITEMINFOW* lpmi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMenuItemInfoA(HMENU__* hmenu, uint item, int fByPosition, tagMENUITEMINFOA* lpmii);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMenuItemInfoW(HMENU__* hmenu, uint item, int fByPosition, tagMENUITEMINFOW* lpmii);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMenuItemInfoA(HMENU__* hmenu, uint item, int fByPositon, MENUITEMINFOA* lpmii);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMenuItemInfoW(HMENU__* hmenu, uint item, int fByPositon, MENUITEMINFOW* lpmii);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetMenuDefaultItem(HMENU__* hMenu, uint fByPos, uint gmdiFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMenuDefaultItem(HMENU__* hMenu, uint uItem, uint fByPos);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMenuItemRect(HWND__* hWnd, HMENU__* hMenu, uint uItem, tagRECT* lprcItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MenuItemFromPoint(HWND__* hWnd, HMENU__* hMenu, tagPOINT ptScreen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DragObject(HWND__* hwndParent, HWND__* hwndFrom, uint fmt, ulong data, HICON__* hcur);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DragDetect(HWND__* hwnd, tagPOINT pt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawIcon(HDC__* hDC, int X, int Y, HICON__* hIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawTextA(HDC__* hdc, byte lpchText, int cchText, tagRECT* lprc, uint format);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawTextW(HDC__* hdc, ushort lpchText, int cchText, tagRECT* lprc, uint format);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawTextExA(HDC__* hdc, byte lpchText, int cchText, tagRECT* lprc, uint format, tagDRAWTEXTPARAMS* lpdtp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawTextExW(HDC__* hdc, ushort lpchText, int cchText, tagRECT* lprc, uint format, tagDRAWTEXTPARAMS* lpdtp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GrayStringA(HDC__* hDC, HBRUSH__* hBrush, Option lpOutputFunc, long lpData, int nCount, int X, int Y, int nWidth, int nHeight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GrayStringW(HDC__* hDC, HBRUSH__* hBrush, Option lpOutputFunc, long lpData, int nCount, int X, int Y, int nWidth, int nHeight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawStateA(HDC__* hdc, HBRUSH__* hbrFore, Option qfnCallBack, long lData, ulong wData, int x, int y, int cx, int cy, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawStateW(HDC__* hdc, HBRUSH__* hbrFore, Option qfnCallBack, long lData, ulong wData, int x, int y, int cx, int cy, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 TabbedTextOutA(HDC__* hdc, int x, int y, byte lpString, int chCount, int nTabPositions, int* lpnTabStopPositions, int nTabOrigin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 TabbedTextOutW(HDC__* hdc, int x, int y, ushort lpString, int chCount, int nTabPositions, int* lpnTabStopPositions, int nTabOrigin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTabbedTextExtentA(HDC__* hdc, byte lpString, int chCount, int nTabPositions, int* lpnTabStopPositions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetTabbedTextExtentW(HDC__* hdc, ushort lpString, int chCount, int nTabPositions, int* lpnTabStopPositions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UpdateWindow(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* SetActiveWindow(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetForegroundWindow();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PaintDesktop(HDC__* hdc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SwitchToThisWindow(HWND__* hwnd, int fUnknown);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetForegroundWindow(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AllowSetForegroundWindow(UInt32 dwProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LockSetForegroundWindow(uint uLockCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* WindowFromDC(HDC__* hDC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* GetDC(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* GetDCEx(HWND__* hWnd, HRGN__* hrgnClip, UInt32 flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* GetWindowDC(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReleaseDC(HWND__* hWnd, HDC__* hDC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDC__* BeginPaint(HWND__* hWnd, tagPAINTSTRUCT* lpPaint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndPaint(HWND__* hWnd, tagPAINTSTRUCT* lpPaint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUpdateRect(HWND__* hWnd, tagRECT* lpRect, int bErase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUpdateRgn(HWND__* hWnd, HRGN__* hRgn, int bErase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowRgn(HWND__* hWnd, HRGN__* hRgn, int bRedraw);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowRgn(HWND__* hWnd, HRGN__* hRgn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowRgnBox(HWND__* hWnd, tagRECT* lprc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ExcludeUpdateRgn(HDC__* hDC, HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InvalidateRect(HWND__* hWnd, tagRECT* lpRect, int bErase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ValidateRect(HWND__* hWnd, tagRECT* lpRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InvalidateRgn(HWND__* hWnd, HRGN__* hRgn, int bErase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ValidateRgn(HWND__* hWnd, HRGN__* hRgn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RedrawWindow(HWND__* hWnd, tagRECT* lprcUpdate, HRGN__* hrgnUpdate, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LockWindowUpdate(HWND__* hWndLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScrollWindow(HWND__* hWnd, int XAmount, int YAmount, tagRECT* lpRect, tagRECT* lpClipRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScrollDC(HDC__* hDC, int dx, int dy, tagRECT* lprcScroll, tagRECT* lprcClip, HRGN__* hrgnUpdate, tagRECT* lprcUpdate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScrollWindowEx(HWND__* hWnd, int dx, int dy, tagRECT* prcScroll, tagRECT* prcClip, HRGN__* hrgnUpdate, tagRECT* prcUpdate, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetScrollPos(HWND__* hWnd, int nBar, int nPos, int bRedraw);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetScrollPos(HWND__* hWnd, int nBar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetScrollRange(HWND__* hWnd, int nBar, int nMinPos, int nMaxPos, int bRedraw);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetScrollRange(HWND__* hWnd, int nBar, int* lpMinPos, int* lpMaxPos);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShowScrollBar(HWND__* hWnd, int wBar, int bShow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnableScrollBar(HWND__* hWnd, uint wSBflags, uint wArrows);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPropA(HWND__* hWnd, byte lpString, void* hData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPropW(HWND__* hWnd, ushort lpString, void* hData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetPropA(HWND__* hWnd, byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetPropW(HWND__* hWnd, ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RemovePropA(HWND__* hWnd, byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RemovePropW(HWND__* hWnd, ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPropsExA(HWND__* hWnd, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPropsExW(HWND__* hWnd, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPropsA(HWND__* hWnd, Option lpEnumFunc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPropsW(HWND__* hWnd, Option lpEnumFunc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowTextA(HWND__* hWnd, byte lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowTextW(HWND__* hWnd, ushort lpString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowTextA(HWND__* hWnd, byte lpString, int nMaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowTextW(HWND__* hWnd, ushort lpString, int nMaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowTextLengthA(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowTextLengthW(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClientRect(HWND__* hWnd, tagRECT* lpRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowRect(HWND__* hWnd, tagRECT* lpRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AdjustWindowRect(tagRECT* lpRect, UInt32 dwStyle, int bMenu);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AdjustWindowRectEx(tagRECT* lpRect, UInt32 dwStyle, int bMenu, UInt32 dwExStyle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AdjustWindowRectExForDpi(tagRECT* lpRect, UInt32 dwStyle, int bMenu, UInt32 dwExStyle, uint dpi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetWindowContextHelpId(HWND__* arg1, UInt32 arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetWindowContextHelpId(HWND__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetMenuContextHelpId(HMENU__* arg1, UInt32 arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetMenuContextHelpId(HMENU__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MessageBoxA(HWND__* hWnd, byte lpText, byte lpCaption, uint uType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MessageBoxW(HWND__* hWnd, ushort lpText, ushort lpCaption, uint uType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MessageBoxExA(HWND__* hWnd, byte lpText, byte lpCaption, uint uType, ushort wLanguageId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MessageBoxExW(HWND__* hWnd, ushort lpText, ushort lpCaption, uint uType, ushort wLanguageId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MessageBoxIndirectA(tagMSGBOXPARAMSA* lpmbp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MessageBoxIndirectW(tagMSGBOXPARAMSW* lpmbp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MessageBeep(uint uType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShowCursor(int bShow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCursorPos(int X, int Y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPhysicalCursorPos(int X, int Y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* SetCursor(HICON__* hCursor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCursorPos(tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPhysicalCursorPos(tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClipCursor(tagRECT* lpRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* GetCursor();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CreateCaret(HWND__* hWnd, HBITMAP__* hBitmap, int nWidth, int nHeight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetCaretBlinkTime();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCaretBlinkTime(uint uMSeconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DestroyCaret();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int HideCaret(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShowCaret(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCaretPos(int X, int Y);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCaretPos(tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ClientToScreen(HWND__* hWnd, tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScreenToClient(HWND__* hWnd, tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LogicalToPhysicalPoint(HWND__* hWnd, tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PhysicalToLogicalPoint(HWND__* hWnd, tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LogicalToPhysicalPointForPerMonitorDPI(HWND__* hWnd, tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PhysicalToLogicalPointForPerMonitorDPI(HWND__* hWnd, tagPOINT* lpPoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MapWindowPoints(HWND__* hWndFrom, HWND__* hWndTo, tagPOINT* lpPoints, uint cPoints);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* WindowFromPoint(tagPOINT Point);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* WindowFromPhysicalPoint(tagPOINT Point);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* ChildWindowFromPoint(HWND__* hWndParent, tagPOINT Point);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ClipCursor(tagRECT* lpRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* ChildWindowFromPointEx(HWND__* hwnd, tagPOINT pt, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetSysColor(int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBRUSH__* GetSysColorBrush(int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSysColors(int cElements, int* lpaElements, UInt32* lpaRgbValues);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawFocusRect(HDC__* hDC, tagRECT* lprc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FillRect(HDC__* hDC, tagRECT* lprc, HBRUSH__* hbr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FrameRect(HDC__* hDC, tagRECT* lprc, HBRUSH__* hbr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InvertRect(HDC__* hDC, tagRECT* lprc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetRect(tagRECT* lprc, int xLeft, int yTop, int xRight, int yBottom);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetRectEmpty(tagRECT* lprc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CopyRect(tagRECT* lprcDst, tagRECT* lprcSrc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InflateRect(tagRECT* lprc, int dx, int dy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IntersectRect(tagRECT* lprcDst, tagRECT* lprcSrc1, tagRECT* lprcSrc2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnionRect(tagRECT* lprcDst, tagRECT* lprcSrc1, tagRECT* lprcSrc2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SubtractRect(tagRECT* lprcDst, tagRECT* lprcSrc1, tagRECT* lprcSrc2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OffsetRect(tagRECT* lprc, int dx, int dy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsRectEmpty(tagRECT* lprc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EqualRect(tagRECT* lprc1, tagRECT* lprc2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PtInRect(tagRECT* lprc, tagPOINT pt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetWindowWord(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SetWindowWord(HWND__* hWnd, int nIndex, ushort wNewWord);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetWindowLongA(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetWindowLongW(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetWindowLongA(HWND__* hWnd, int nIndex, Int32 dwNewLong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetWindowLongW(HWND__* hWnd, int nIndex, Int32 dwNewLong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long GetWindowLongPtrA(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long GetWindowLongPtrW(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SetWindowLongPtrA(HWND__* hWnd, int nIndex, long dwNewLong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SetWindowLongPtrW(HWND__* hWnd, int nIndex, long dwNewLong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetClassWord(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SetClassWord(HWND__* hWnd, int nIndex, ushort wNewWord);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetClassLongA(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetClassLongW(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetClassLongA(HWND__* hWnd, int nIndex, Int32 dwNewLong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetClassLongW(HWND__* hWnd, int nIndex, Int32 dwNewLong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong GetClassLongPtrA(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong GetClassLongPtrW(HWND__* hWnd, int nIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SetClassLongPtrA(HWND__* hWnd, int nIndex, long dwNewLong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SetClassLongPtrW(HWND__* hWnd, int nIndex, long dwNewLong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessDefaultLayout(UInt32* pdwDefaultLayout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessDefaultLayout(UInt32 dwDefaultLayout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetDesktopWindow();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetParent(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* SetParent(HWND__* hWndChild, HWND__* hWndNewParent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumChildWindows(HWND__* hWndParent, Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* FindWindowA(byte lpClassName, byte lpWindowName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* FindWindowW(ushort lpClassName, ushort lpWindowName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* FindWindowExA(HWND__* hWndParent, HWND__* hWndChildAfter, byte lpszClass, byte lpszWindow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* FindWindowExW(HWND__* hWndParent, HWND__* hWndChildAfter, ushort lpszClass, ushort lpszWindow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetShellWindow();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterShellHookWindow(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeregisterShellHookWindow(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumWindows(Option lpEnumFunc, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumThreadWindows(UInt32 dwThreadId, Option lpfn, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClassNameA(HWND__* hWnd, byte lpClassName, int nMaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetClassNameW(HWND__* hWnd, ushort lpClassName, int nMaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetTopWindow(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetWindowThreadProcessId(HWND__* hWnd, UInt32 lpdwProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsGUIThread(int bConvert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetLastActivePopup(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetWindow(HWND__* hWnd, uint uCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HHOOK__* SetWindowsHookA(int nFilterType, Option pfnFilterProc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HHOOK__* SetWindowsHookW(int nFilterType, Option pfnFilterProc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnhookWindowsHook(int nCode, Option pfnFilterProc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HHOOK__* SetWindowsHookExA(int idHook, Option lpfn, HINSTANCE__* hmod, UInt32 dwThreadId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HHOOK__* SetWindowsHookExW(int idHook, Option lpfn, HINSTANCE__* hmod, UInt32 dwThreadId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnhookWindowsHookEx(HHOOK__* hhk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long CallNextHookEx(HHOOK__* hhk, int nCode, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CheckMenuRadioItem(HMENU__* hmenu, uint first, uint last, uint check, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBITMAP__* LoadBitmapA(HINSTANCE__* hInstance, byte lpBitmapName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HBITMAP__* LoadBitmapW(HINSTANCE__* hInstance, ushort lpBitmapName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* LoadCursorA(HINSTANCE__* hInstance, byte lpCursorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* LoadCursorW(HINSTANCE__* hInstance, ushort lpCursorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* LoadCursorFromFileA(byte lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* LoadCursorFromFileW(ushort lpFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* CreateCursor(HINSTANCE__* hInst, int xHotSpot, int yHotSpot, int nWidth, int nHeight, void* pvANDPlane, void* pvXORPlane);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DestroyCursor(HICON__* hCursor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetSystemCursor(HICON__* hcur, UInt32 id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* LoadIconA(HINSTANCE__* hInstance, byte lpIconName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* LoadIconW(HINSTANCE__* hInstance, ushort lpIconName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint PrivateExtractIconsA(byte szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON__** phicon, uint* piconid, uint nIcons, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint PrivateExtractIconsW(ushort szFileName, int nIconIndex, int cxIcon, int cyIcon, HICON__** phicon, uint* piconid, uint nIcons, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* CreateIcon(HINSTANCE__* hInstance, int nWidth, int nHeight, byte cPlanes, byte cBitsPixel, byte* lpbANDbits, byte* lpbXORbits);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DestroyIcon(HICON__* hIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupIconIdFromDirectory(byte presbits, int fIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LookupIconIdFromDirectoryEx(byte presbits, int fIcon, int cxDesired, int cyDesired, uint Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* CreateIconFromResource(byte presbits, UInt32 dwResSize, int fIcon, UInt32 dwVer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* CreateIconFromResourceEx(byte presbits, UInt32 dwResSize, int fIcon, UInt32 dwVer, int cxDesired, int cyDesired, uint Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LoadImageA(HINSTANCE__* hInst, byte name, uint type_, int cx, int cy, uint fuLoad);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LoadImageW(HINSTANCE__* hInst, ushort name, uint type_, int cx, int cy, uint fuLoad);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CopyImage(void* h, uint type_, int cx, int cy, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DrawIconEx(HDC__* hdc, int xLeft, int yTop, HICON__* hIcon, int cxWidth, int cyWidth, uint istepIfAniCur, HBRUSH__* hbrFlickerFreeDraw, uint diFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* CreateIconIndirect(ICONINFO* piconinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* CopyIcon(HICON__* hIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetIconInfo(HICON__* hIcon, ICONINFO* piconinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetIconInfoExA(HICON__* hicon, _ICONINFOEXA* piconinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetIconInfoExW(HICON__* hicon, _ICONINFOEXW* piconinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsDialogMessageA(HWND__* hDlg, tagMSG* lpMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsDialogMessageW(HWND__* hDlg, tagMSG* lpMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MapDialogRect(HWND__* hDlg, tagRECT* lpRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DlgDirListA(HWND__* hDlg, byte lpPathSpec, int nIDListBox, int nIDStaticPath, uint uFileType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DlgDirListW(HWND__* hDlg, ushort lpPathSpec, int nIDListBox, int nIDStaticPath, uint uFileType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DlgDirSelectExA(HWND__* hwndDlg, byte lpString, int chCount, int idListBox);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DlgDirSelectExW(HWND__* hwndDlg, ushort lpString, int chCount, int idListBox);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DlgDirListComboBoxA(HWND__* hDlg, byte lpPathSpec, int nIDComboBox, int nIDStaticPath, uint uFiletype);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DlgDirListComboBoxW(HWND__* hDlg, ushort lpPathSpec, int nIDComboBox, int nIDStaticPath, uint uFiletype);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DlgDirSelectComboBoxExA(HWND__* hwndDlg, byte lpString, int cchOut, int idComboBox);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DlgDirSelectComboBoxExW(HWND__* hwndDlg, ushort lpString, int cchOut, int idComboBox);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetScrollInfo(HWND__* hwnd, int nBar, SCROLLINFO* lpsi, int redraw);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetScrollInfo(HWND__* hwnd, int nBar, tagSCROLLINFO* lpsi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefFrameProcA(HWND__* hWnd, HWND__* hWndMDIClient, uint uMsg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefFrameProcW(HWND__* hWnd, HWND__* hWndMDIClient, uint uMsg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefMDIChildProcA(HWND__* hWnd, uint uMsg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefMDIChildProcW(HWND__* hWnd, uint uMsg, ulong wParam, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int TranslateMDISysAccel(HWND__* hWndClient, tagMSG* lpMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ArrangeIconicWindows(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* CreateMDIWindowA(byte lpClassName, byte lpWindowName, UInt32 dwStyle, int X, int Y, int nWidth, int nHeight, HWND__* hWndParent, HINSTANCE__* hInstance, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* CreateMDIWindowW(ushort lpClassName, ushort lpWindowName, UInt32 dwStyle, int X, int Y, int nWidth, int nHeight, HWND__* hWndParent, HINSTANCE__* hInstance, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort TileWindows(HWND__* hwndParent, uint wHow, tagRECT* lpRect, uint cKids, HWND__** lpKids);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort CascadeWindows(HWND__* hwndParent, uint wHow, tagRECT* lpRect, uint cKids, HWND__** lpKids);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WinHelpA(HWND__* hWndMain, byte lpszHelp, uint uCommand, ulong dwData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WinHelpW(HWND__* hWndMain, ushort lpszHelp, uint uCommand, ulong dwData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetGuiResources(void* hProcess, UInt32 uiFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ChangeDisplaySettingsA(_devicemodeA* lpDevMode, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ChangeDisplaySettingsW(_devicemodeW* lpDevMode, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ChangeDisplaySettingsExA(byte lpszDeviceName, _devicemodeA* lpDevMode, HWND__* hwnd, UInt32 dwflags, void* lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ChangeDisplaySettingsExW(ushort lpszDeviceName, _devicemodeW* lpDevMode, HWND__* hwnd, UInt32 dwflags, void* lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDisplaySettingsA(byte lpszDeviceName, UInt32 iModeNum, _devicemodeA* lpDevMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDisplaySettingsW(ushort lpszDeviceName, UInt32 iModeNum, _devicemodeW* lpDevMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDisplaySettingsExA(byte lpszDeviceName, UInt32 iModeNum, _devicemodeA* lpDevMode, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDisplaySettingsExW(ushort lpszDeviceName, UInt32 iModeNum, _devicemodeW* lpDevMode, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDisplayDevicesA(byte lpDevice, UInt32 iDevNum, _DISPLAY_DEVICEA* lpDisplayDevice, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDisplayDevicesW(ushort lpDevice, UInt32 iDevNum, _DISPLAY_DEVICEW* lpDisplayDevice, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetDisplayConfigBufferSizes(uint flags, uint* numPathArrayElements, uint* numModeInfoArrayElements);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetDisplayConfig(uint numPathArrayElements, DISPLAYCONFIG_PATH_INFO* pathArray, uint numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO* modeInfoArray, uint flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 QueryDisplayConfig(uint flags, uint* numPathArrayElements, DISPLAYCONFIG_PATH_INFO* pathArray, uint* numModeInfoArrayElements, DISPLAYCONFIG_MODE_INFO* modeInfoArray, int* currentTopologyId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DisplayConfigGetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DisplayConfigSetDeviceInfo(DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SystemParametersInfoA(uint uiAction, uint uiParam, void* pvParam, uint fWinIni);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SystemParametersInfoW(uint uiAction, uint uiParam, void* pvParam, uint fWinIni);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SystemParametersInfoForDpi(uint uiAction, uint uiParam, void* pvParam, uint fWinIni, uint dpi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SoundSentry();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetDebugErrorLevel(UInt32 dwLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SetLastErrorEx(UInt32 dwErrCode, UInt32 dwType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InternalGetWindowText(HWND__* hWnd, ushort pString, int cchMaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CancelShutdown();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMONITOR__* MonitorFromPoint(tagPOINT pt, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMONITOR__* MonitorFromRect(tagRECT lprc, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMONITOR__* MonitorFromWindow(HWND__* hwnd, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMonitorInfoA(HMONITOR__* hMonitor, tagMONITORINFO* lpmi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMonitorInfoW(HMONITOR__* hMonitor, tagMONITORINFO* lpmi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDisplayMonitors(HDC__* hdc, tagRECT lprcClip, Option lpfnEnum, long dwData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NotifyWinEvent(UInt32 @event, HWND__* hwnd, Int32 idObject, Int32 idChild);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWINEVENTHOOK__* SetWinEventHook(UInt32 eventMin, UInt32 eventMax, HINSTANCE__* hmodWinEventProc, Option pfnWinEventProc, UInt32 idProcess, UInt32 idThread, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsWinEventHookInstalled(UInt32 @event);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnhookWinEvent(HWINEVENTHOOK__* hWinEventHook);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetGUIThreadInfo(UInt32 idThread, tagGUITHREADINFO* pgui);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int BlockInput(int fBlockIt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessDPIAware();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsProcessDPIAware();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern DPI_AWARENESS_CONTEXT__* SetThreadDpiAwarenessContext(DPI_AWARENESS_CONTEXT__* dpiContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern DPI_AWARENESS_CONTEXT__* GetThreadDpiAwarenessContext();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern DPI_AWARENESS_CONTEXT__* GetWindowDpiAwarenessContext(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAwarenessFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT__* value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDpiFromDpiAwarenessContext(DPI_AWARENESS_CONTEXT__* value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AreDpiAwarenessContextsEqual(DPI_AWARENESS_CONTEXT__* dpiContextA, DPI_AWARENESS_CONTEXT__* dpiContextB);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidDpiAwarenessContext(DPI_AWARENESS_CONTEXT__* value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDpiForWindow(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetDpiForSystem();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetSystemDpiForProcess(void* hProcess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnableNonClientDpiScaling(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InheritWindowMonitor(HWND__* hwnd, HWND__* hwndInherit);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessDpiAwarenessContext(DPI_AWARENESS_CONTEXT__* value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern DPI_AWARENESS_CONTEXT__* GetDpiAwarenessContextForProcess(void* hProcess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadDpiHostingBehavior(int value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadDpiHostingBehavior();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowDpiHostingBehavior(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetWindowModuleFileNameA(HWND__* hwnd, byte pszFileName, uint cchFileNameMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetWindowModuleFileNameW(HWND__* hwnd, ushort pszFileName, uint cchFileNameMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCursorInfo(tagCURSORINFO* pci);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetWindowInfo(HWND__* hwnd, tagWINDOWINFO* pwi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTitleBarInfo(HWND__* hwnd, tagTITLEBARINFO* pti);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetMenuBarInfo(HWND__* hwnd, Int32 idObject, Int32 idItem, tagMENUBARINFO* pmbi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetScrollBarInfo(HWND__* hwnd, Int32 idObject, tagSCROLLBARINFO* psbi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetComboBoxInfo(HWND__* hwndCombo, tagCOMBOBOXINFO* pcbi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetAncestor(HWND__* hwnd, uint gaFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* RealChildWindowFromPoint(HWND__* hwndParent, tagPOINT ptParentClientCoords);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint RealGetWindowClassA(HWND__* hwnd, byte ptszClassName, uint cchClassNameMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint RealGetWindowClassW(HWND__* hwnd, ushort ptszClassName, uint cchClassNameMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAltTabInfoA(HWND__* hwnd, int iItem, tagALTTABINFO* pati, byte pszItemText, uint cchItemText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAltTabInfoW(HWND__* hwnd, int iItem, tagALTTABINFO* pati, ushort pszItemText, uint cchItemText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetListBoxInfo(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LockWorkStation();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UserHandleGrantAccess(void* hUserHandle, void* hJob, int bGrant);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetRawInputData(HRAWINPUT__* hRawInput, uint uiCommand, void* pData, uint* pcbSize, uint cbSizeHeader);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetRawInputDeviceInfoA(void* hDevice, uint uiCommand, void* pData, uint* pcbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetRawInputDeviceInfoW(void* hDevice, uint uiCommand, void* pData, uint* pcbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetRawInputBuffer(tagRAWINPUT* pData, uint* pcbSize, uint cbSizeHeader);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterRawInputDevices(RAWINPUTDEVICE* pRawInputDevices, uint uiNumDevices, uint cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetRegisteredRawInputDevices(tagRAWINPUTDEVICE* pRawInputDevices, uint* puiNumDevices, uint cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetRawInputDeviceList(tagRAWINPUTDEVICELIST* pRawInputDeviceList, uint* puiNumDevices, uint cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefRawInputProc(tagRAWINPUT** paRawInput, int nInput, uint cbSizeHeader);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerDevices(uint* deviceCount, tagPOINTER_DEVICE_INFO* pointerDevices);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerDevice(void* device, tagPOINTER_DEVICE_INFO* pointerDevice);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerDeviceProperties(void* device, uint* propertyCount, tagPOINTER_DEVICE_PROPERTY* pointerProperties);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RegisterPointerDeviceNotifications(HWND__* window, int notifyRange);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerDeviceRects(void* device, tagRECT* pointerDeviceRect, tagRECT* displayRect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPointerDeviceCursors(void* device, uint* cursorCount, tagPOINTER_DEVICE_CURSOR_INFO* deviceCursors);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetRawPointerDeviceData(uint pointerId, uint historyCount, uint propertiesCount, tagPOINTER_DEVICE_PROPERTY* pProperties, Int32* pValues);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeWindowMessageFilter(uint message, UInt32 dwFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeWindowMessageFilterEx(HWND__* hwnd, uint message, UInt32 action, tagCHANGEFILTERSTRUCT* pChangeFilterStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetGestureInfo(HGESTUREINFO__* hGestureInfo, tagGESTUREINFO* pGestureInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetGestureExtraArgs(HGESTUREINFO__* hGestureInfo, uint cbExtraArgs, byte pExtraArgs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseGestureInfoHandle(HGESTUREINFO__* hGestureInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetGestureConfig(HWND__* hwnd, UInt32 dwReserved, uint cIDs, tagGESTURECONFIG* pGestureConfig, uint cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetGestureConfig(HWND__* hwnd, UInt32 dwReserved, UInt32 dwFlags, uint* pcIDs, tagGESTURECONFIG* pGestureConfig, uint cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShutdownBlockReasonCreate(HWND__* hWnd, ushort pwszReason);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShutdownBlockReasonQuery(HWND__* hWnd, ushort pwszBuff, UInt32* pcchBuff);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShutdownBlockReasonDestroy(HWND__* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrentInputMessageSource(tagINPUT_MESSAGE_SOURCE* inputMessageSource);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCIMSSM(tagINPUT_MESSAGE_SOURCE* inputMessageSource);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAutoRotationState(tagAR_STATE* pState);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDisplayAutoRotationPreferences(int* pOrientation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDisplayAutoRotationPreferencesByProcessId(UInt32 dwProcessId, int* pOrientation, int* fRotateScreen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDisplayAutoRotationPreferences(int orientation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsImmersiveProcess(void* hProcess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessRestrictionExemption(int fEnableExemption);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDateFormatA(UInt32 Locale, UInt32 dwFlags, _SYSTEMTIME* lpDate, byte lpFormat, byte lpDateStr, int cchDate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDateFormatW(UInt32 Locale, UInt32 dwFlags, _SYSTEMTIME* lpDate, ushort lpFormat, ushort lpDateStr, int cchDate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTimeFormatA(UInt32 Locale, UInt32 dwFlags, _SYSTEMTIME* lpTime, byte lpFormat, byte lpTimeStr, int cchTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTimeFormatW(UInt32 Locale, UInt32 dwFlags, _SYSTEMTIME* lpTime, ushort lpFormat, ushort lpTimeStr, int cchTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetTimeFormatEx(ushort lpLocaleName, UInt32 dwFlags, _SYSTEMTIME* lpTime, ushort lpFormat, ushort lpTimeStr, int cchTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDateFormatEx(ushort lpLocaleName, UInt32 dwFlags, _SYSTEMTIME* lpDate, ushort lpFormat, ushort lpDateStr, int cchDate, ushort lpCalendar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDurationFormatEx(ushort lpLocaleName, UInt32 dwFlags, _SYSTEMTIME* lpDuration, ulong ullDuration, ushort lpFormat, ushort lpDurationStr, int cchDuration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CompareStringEx(ushort lpLocaleName, UInt32 dwCmpFlags, ushort lpString1, int cchCount1, ushort lpString2, int cchCount2, _nlsversioninfo* lpVersionInformation, void* lpReserved, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CompareStringOrdinal(ushort lpString1, int cchCount1, ushort lpString2, int cchCount2, int bIgnoreCase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CompareStringW(UInt32 Locale, UInt32 dwCmpFlags, ushort lpString1, int cchCount1, ushort lpString2, int cchCount2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FoldStringW(UInt32 dwMapFlags, ushort lpSrcStr, int cchSrc, ushort lpDestStr, int cchDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetStringTypeExW(UInt32 Locale, UInt32 dwInfoType, ushort lpSrcStr, int cchSrc, ushort lpCharType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetStringTypeW(UInt32 dwInfoType, ushort lpSrcStr, int cchSrc, ushort lpCharType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int MultiByteToWideChar(uint CodePage, UInt32 dwFlags, byte lpMultiByteStr, int cbMultiByte, ushort lpWideCharStr, int cchWideChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WideCharToMultiByte(uint CodePage, UInt32 dwFlags, ushort lpWideCharStr, int cchWideChar, byte lpMultiByteStr, int cbMultiByte, byte lpDefaultChar, int lpUsedDefaultChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidCodePage(uint CodePage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetACP();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetOEMCP();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCPInfo(uint CodePage, _cpinfo* lpCPInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCPInfoExA(uint CodePage, UInt32 dwFlags, _cpinfoexA* lpCPInfoEx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCPInfoExW(uint CodePage, UInt32 dwFlags, _cpinfoexW* lpCPInfoEx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CompareStringA(UInt32 Locale, UInt32 dwCmpFlags, byte lpString1, int cchCount1, byte lpString2, int cchCount2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNLSString(UInt32 Locale, UInt32 dwFindNLSStringFlags, ushort lpStringSource, int cchSource, ushort lpStringValue, int cchValue, int* pcchFound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LCMapStringW(UInt32 Locale, UInt32 dwMapFlags, ushort lpSrcStr, int cchSrc, ushort lpDestStr, int cchDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LCMapStringA(UInt32 Locale, UInt32 dwMapFlags, byte lpSrcStr, int cchSrc, byte lpDestStr, int cchDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLocaleInfoW(UInt32 Locale, UInt32 LCType, ushort lpLCData, int cchData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLocaleInfoA(UInt32 Locale, UInt32 LCType, byte lpLCData, int cchData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetLocaleInfoA(UInt32 Locale, UInt32 LCType, byte lpLCData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetLocaleInfoW(UInt32 Locale, UInt32 LCType, ushort lpLCData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCalendarInfoA(UInt32 Locale, UInt32 Calendar, UInt32 CalType, byte lpCalData, int cchData, UInt32 lpValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCalendarInfoW(UInt32 Locale, UInt32 Calendar, UInt32 CalType, ushort lpCalData, int cchData, UInt32 lpValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCalendarInfoA(UInt32 Locale, UInt32 Calendar, UInt32 CalType, byte lpCalData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCalendarInfoW(UInt32 Locale, UInt32 Calendar, UInt32 CalType, ushort lpCalData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LoadStringByReference(UInt32 Flags, ushort Language, ushort SourceString, ushort Buffer, UInt32 cchBuffer, ushort Directory, UInt32 pcchBufferOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsDBCSLeadByte(byte TestChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsDBCSLeadByteEx(uint CodePage, byte TestChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 LocaleNameToLCID(ushort lpName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LCIDToLocaleName(UInt32 Locale, ushort lpName, int cchName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDurationFormat(UInt32 Locale, UInt32 dwFlags, _SYSTEMTIME* lpDuration, ulong ullDuration, ushort lpFormat, ushort lpDurationStr, int cchDuration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumberFormatA(UInt32 Locale, UInt32 dwFlags, byte lpValue, _numberfmtA* lpFormat, byte lpNumberStr, int cchNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumberFormatW(UInt32 Locale, UInt32 dwFlags, ushort lpValue, _numberfmtW* lpFormat, ushort lpNumberStr, int cchNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrencyFormatA(UInt32 Locale, UInt32 dwFlags, byte lpValue, _currencyfmtA* lpFormat, byte lpCurrencyStr, int cchCurrency);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrencyFormatW(UInt32 Locale, UInt32 dwFlags, ushort lpValue, _currencyfmtW* lpFormat, ushort lpCurrencyStr, int cchCurrency);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumCalendarInfoA(Option lpCalInfoEnumProc, UInt32 Locale, UInt32 Calendar, UInt32 CalType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumCalendarInfoW(Option lpCalInfoEnumProc, UInt32 Locale, UInt32 Calendar, UInt32 CalType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumCalendarInfoExA(Option lpCalInfoEnumProcEx, UInt32 Locale, UInt32 Calendar, UInt32 CalType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumCalendarInfoExW(Option lpCalInfoEnumProcEx, UInt32 Locale, UInt32 Calendar, UInt32 CalType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumTimeFormatsA(Option lpTimeFmtEnumProc, UInt32 Locale, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumTimeFormatsW(Option lpTimeFmtEnumProc, UInt32 Locale, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDateFormatsA(Option lpDateFmtEnumProc, UInt32 Locale, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDateFormatsW(Option lpDateFmtEnumProc, UInt32 Locale, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDateFormatsExA(Option lpDateFmtEnumProcEx, UInt32 Locale, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDateFormatsExW(Option lpDateFmtEnumProcEx, UInt32 Locale, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidLanguageGroup(UInt32 LanguageGroup, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNLSVersion(UInt32 Function, UInt32 Locale, _nlsversioninfo* lpVersionInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidLocale(UInt32 Locale, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetGeoInfoA(Int32 Location, UInt32 GeoType, byte lpGeoData, int cchData, ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetGeoInfoW(Int32 Location, UInt32 GeoType, ushort lpGeoData, int cchData, ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetGeoInfoEx(ushort location, UInt32 geoType, ushort geoData, int geoDataCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemGeoID(UInt32 GeoClass, Int32 ParentGeoId, Option lpGeoEnumProc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemGeoNames(UInt32 geoClass, Option geoEnumProc, long data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetUserGeoID(UInt32 GeoClass);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUserDefaultGeoName(ushort geoName, int geoNameCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetUserGeoID(Int32 GeoId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetUserGeoName(ushort geoName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ConvertDefaultLocale(UInt32 Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetSystemDefaultUILanguage();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetThreadLocale();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadLocale(UInt32 Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetUserDefaultUILanguage();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetUserDefaultLangID();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetSystemDefaultLangID();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetSystemDefaultLCID();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetUserDefaultLCID();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SetThreadUILanguage(ushort LangId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort GetThreadUILanguage();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetProcessPreferredUILanguages(UInt32 dwFlags, UInt32 pulNumLanguages, ushort pwszLanguagesBuffer, UInt32 pcchLanguagesBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetProcessPreferredUILanguages(UInt32 dwFlags, ushort pwszLanguagesBuffer, UInt32 pulNumLanguages);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUserPreferredUILanguages(UInt32 dwFlags, UInt32 pulNumLanguages, ushort pwszLanguagesBuffer, UInt32 pcchLanguagesBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemPreferredUILanguages(UInt32 dwFlags, UInt32 pulNumLanguages, ushort pwszLanguagesBuffer, UInt32 pcchLanguagesBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetThreadPreferredUILanguages(UInt32 dwFlags, UInt32 pulNumLanguages, ushort pwszLanguagesBuffer, UInt32 pcchLanguagesBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadPreferredUILanguages(UInt32 dwFlags, ushort pwszLanguagesBuffer, UInt32 pulNumLanguages);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileMUIInfo(UInt32 dwFlags, ushort pcwszFilePath, _FILEMUIINFO* pFileMUIInfo, UInt32* pcbFileMUIInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileMUIPath(UInt32 dwFlags, ushort pcwszFilePath, ushort pwszLanguage, UInt32 pcchLanguage, ushort pwszFileMUIPath, UInt32 pcchFileMUIPath, ulong pululEnumerator);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUILanguageInfo(UInt32 dwFlags, ushort pwmszLanguage, ushort pwszFallbackLanguages, UInt32 pcchFallbackLanguages, UInt32 pAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetThreadPreferredUILanguages2(UInt32 flags, ushort languages, UInt32 numLanguagesSet, HSAVEDUILANGUAGES__** snapshot);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RestoreThreadPreferredUILanguages(HSAVEDUILANGUAGES__* snapshot);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int NotifyUILanguageChange(UInt32 dwFlags, ushort pcwstrNewLanguage, ushort pcwstrPreviousLanguage, UInt32 dwReserved, UInt32 pdwStatusRtrn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetStringTypeExA(UInt32 Locale, UInt32 dwInfoType, byte lpSrcStr, int cchSrc, ushort lpCharType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetStringTypeA(UInt32 Locale, UInt32 dwInfoType, byte lpSrcStr, int cchSrc, ushort lpCharType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FoldStringA(UInt32 dwMapFlags, byte lpSrcStr, int cchSrc, byte lpDestStr, int cchDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemLocalesA(Option lpLocaleEnumProc, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemLocalesW(Option lpLocaleEnumProc, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemLanguageGroupsA(Option lpLanguageGroupEnumProc, UInt32 dwFlags, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemLanguageGroupsW(Option lpLanguageGroupEnumProc, UInt32 dwFlags, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumLanguageGroupLocalesA(Option lpLangGroupLocaleEnumProc, UInt32 LanguageGroup, UInt32 dwFlags, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumLanguageGroupLocalesW(Option lpLangGroupLocaleEnumProc, UInt32 LanguageGroup, UInt32 dwFlags, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumUILanguagesA(Option lpUILanguageEnumProc, UInt32 dwFlags, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumUILanguagesW(Option lpUILanguageEnumProc, UInt32 dwFlags, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemCodePagesA(Option lpCodePageEnumProc, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemCodePagesW(Option lpCodePageEnumProc, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IdnToAscii(UInt32 dwFlags, ushort lpUnicodeCharStr, int cchUnicodeChar, ushort lpASCIICharStr, int cchASCIIChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IdnToUnicode(UInt32 dwFlags, ushort lpASCIICharStr, int cchASCIIChar, ushort lpUnicodeCharStr, int cchUnicodeChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IdnToNameprepUnicode(UInt32 dwFlags, ushort lpUnicodeCharStr, int cchUnicodeChar, ushort lpNameprepCharStr, int cchNameprepChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int NormalizeString(_NORM_FORM NormForm, ushort lpSrcString, int cwSrcLength, ushort lpDstString, int cwDstLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsNormalizedString(_NORM_FORM NormForm, ushort lpString, int cwLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VerifyScripts(UInt32 dwFlags, ushort lpLocaleScripts, int cchLocaleScripts, ushort lpTestScripts, int cchTestScripts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetStringScripts(UInt32 dwFlags, ushort lpString, int cchString, ushort lpScripts, int cchScripts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetLocaleInfoEx(ushort lpLocaleName, UInt32 LCType, ushort lpLCData, int cchData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCalendarInfoEx(ushort lpLocaleName, UInt32 Calendar, ushort lpReserved, UInt32 CalType, ushort lpCalData, int cchData, UInt32 lpValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumberFormatEx(ushort lpLocaleName, UInt32 dwFlags, ushort lpValue, _numberfmtW* lpFormat, ushort lpNumberStr, int cchNumber);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrencyFormatEx(ushort lpLocaleName, UInt32 dwFlags, ushort lpValue, _currencyfmtW* lpFormat, ushort lpCurrencyStr, int cchCurrency);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetUserDefaultLocaleName(ushort lpLocaleName, int cchLocaleName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSystemDefaultLocaleName(ushort lpLocaleName, int cchLocaleName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsNLSDefinedString(UInt32 Function, UInt32 dwFlags, _nlsversioninfo* lpVersionInformation, ushort lpString, int cchStr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNLSVersionEx(UInt32 function, ushort lpLocaleName, _nlsversioninfoex* lpVersionInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 IsValidNLSVersion(UInt32 function, ushort lpLocaleName, _nlsversioninfoex* lpVersionInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNLSStringEx(ushort lpLocaleName, UInt32 dwFindNLSStringFlags, ushort lpStringSource, int cchSource, ushort lpStringValue, int cchValue, int* pcchFound, _nlsversioninfo* lpVersionInformation, void* lpReserved, long sortHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LCMapStringEx(ushort lpLocaleName, UInt32 dwMapFlags, ushort lpSrcStr, int cchSrc, ushort lpDestStr, int cchDest, _nlsversioninfo* lpVersionInformation, void* lpReserved, long sortHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidLocaleName(ushort lpLocaleName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumCalendarInfoExEx(Option pCalInfoEnumProcExEx, ushort lpLocaleName, UInt32 Calendar, ushort lpReserved, UInt32 CalType, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDateFormatsExEx(Option lpDateFmtEnumProcExEx, ushort lpLocaleName, UInt32 dwFlags, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumTimeFormatsEx(Option lpTimeFmtEnumProcEx, ushort lpLocaleName, UInt32 dwFlags, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumSystemLocalesEx(Option lpLocaleEnumProcEx, UInt32 dwFlags, long lParam, void* lpReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ResolveLocaleName(ushort lpNameToResolve, ushort lpLocaleName, int cchLocaleName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AllocConsole();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FreeConsole();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AttachConsole(UInt32 dwProcessId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetConsoleCP();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint GetConsoleOutputCP();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetConsoleMode(void* hConsoleHandle, UInt32 lpMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleMode(void* hConsoleHandle, UInt32 dwMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumberOfConsoleInputEvents(void* hConsoleInput, UInt32 lpNumberOfEvents);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleInputA(void* hConsoleInput, _INPUT_RECORD* lpBuffer, UInt32 nLength, UInt32 lpNumberOfEventsRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleInputW(void* hConsoleInput, _INPUT_RECORD* lpBuffer, UInt32 nLength, UInt32 lpNumberOfEventsRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PeekConsoleInputA(void* hConsoleInput, _INPUT_RECORD* lpBuffer, UInt32 nLength, UInt32 lpNumberOfEventsRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PeekConsoleInputW(void* hConsoleInput, _INPUT_RECORD* lpBuffer, UInt32 nLength, UInt32 lpNumberOfEventsRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleA(void* hConsoleInput, void* lpBuffer, UInt32 nNumberOfCharsToRead, UInt32 lpNumberOfCharsRead, _CONSOLE_READCONSOLE_CONTROL* pInputControl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleW(void* hConsoleInput, void* lpBuffer, UInt32 nNumberOfCharsToRead, UInt32 lpNumberOfCharsRead, _CONSOLE_READCONSOLE_CONTROL* pInputControl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleA(void* hConsoleOutput, void* lpBuffer, UInt32 nNumberOfCharsToWrite, UInt32 lpNumberOfCharsWritten, void* lpReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleW(void* hConsoleOutput, void* lpBuffer, UInt32 nNumberOfCharsToWrite, UInt32 lpNumberOfCharsWritten, void* lpReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleCtrlHandler(Option HandlerRoutine, int Add);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreatePseudoConsole(_COORD size, void* hInput, void* hOutput, UInt32 dwFlags, void** phPC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ResizePseudoConsole(void* hPC, _COORD size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ClosePseudoConsole(void* hPC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FillConsoleOutputCharacterA(void* hConsoleOutput, byte cCharacter, UInt32 nLength, _COORD dwWriteCoord, UInt32 lpNumberOfCharsWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FillConsoleOutputCharacterW(void* hConsoleOutput, ushort cCharacter, UInt32 nLength, _COORD dwWriteCoord, UInt32 lpNumberOfCharsWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FillConsoleOutputAttribute(void* hConsoleOutput, ushort wAttribute, UInt32 nLength, _COORD dwWriteCoord, UInt32 lpNumberOfAttrsWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GenerateConsoleCtrlEvent(UInt32 dwCtrlEvent, UInt32 dwProcessGroupId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CreateConsoleScreenBuffer(UInt32 dwDesiredAccess, UInt32 dwShareMode, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 dwFlags, void* lpScreenBufferData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleActiveScreenBuffer(void* hConsoleOutput);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlushConsoleInputBuffer(void* hConsoleInput);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleCP(uint wCodePageID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleOutputCP(uint wCodePageID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetConsoleCursorInfo(void* hConsoleOutput, _CONSOLE_CURSOR_INFO* lpConsoleCursorInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleCursorInfo(void* hConsoleOutput, _CONSOLE_CURSOR_INFO* lpConsoleCursorInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetConsoleScreenBufferInfo(void* hConsoleOutput, _CONSOLE_SCREEN_BUFFER_INFO* lpConsoleScreenBufferInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetConsoleScreenBufferInfoEx(void* hConsoleOutput, _CONSOLE_SCREEN_BUFFER_INFOEX* lpConsoleScreenBufferInfoEx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleScreenBufferInfoEx(void* hConsoleOutput, _CONSOLE_SCREEN_BUFFER_INFOEX* lpConsoleScreenBufferInfoEx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleScreenBufferSize(void* hConsoleOutput, _COORD dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleCursorPosition(void* hConsoleOutput, _COORD dwCursorPosition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _COORD GetLargestConsoleWindowSize(void* hConsoleOutput);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleTextAttribute(void* hConsoleOutput, ushort wAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleWindowInfo(void* hConsoleOutput, int bAbsolute, _SMALL_RECT* lpConsoleWindow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleOutputCharacterA(void* hConsoleOutput, byte lpCharacter, UInt32 nLength, _COORD dwWriteCoord, UInt32 lpNumberOfCharsWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleOutputCharacterW(void* hConsoleOutput, ushort lpCharacter, UInt32 nLength, _COORD dwWriteCoord, UInt32 lpNumberOfCharsWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleOutputAttribute(void* hConsoleOutput, ushort* lpAttribute, UInt32 nLength, _COORD dwWriteCoord, UInt32 lpNumberOfAttrsWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleOutputCharacterA(void* hConsoleOutput, byte lpCharacter, UInt32 nLength, _COORD dwReadCoord, UInt32 lpNumberOfCharsRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleOutputCharacterW(void* hConsoleOutput, ushort lpCharacter, UInt32 nLength, _COORD dwReadCoord, UInt32 lpNumberOfCharsRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleOutputAttribute(void* hConsoleOutput, ushort lpAttribute, UInt32 nLength, _COORD dwReadCoord, UInt32 lpNumberOfAttrsRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleInputA(void* hConsoleInput, _INPUT_RECORD* lpBuffer, UInt32 nLength, UInt32 lpNumberOfEventsWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleInputW(void* hConsoleInput, _INPUT_RECORD* lpBuffer, UInt32 nLength, UInt32 lpNumberOfEventsWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScrollConsoleScreenBufferA(void* hConsoleOutput, _SMALL_RECT* lpScrollRectangle, _SMALL_RECT* lpClipRectangle, _COORD dwDestinationOrigin, _CHAR_INFO* lpFill);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScrollConsoleScreenBufferW(void* hConsoleOutput, _SMALL_RECT* lpScrollRectangle, _SMALL_RECT* lpClipRectangle, _COORD dwDestinationOrigin, _CHAR_INFO* lpFill);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleOutputA(void* hConsoleOutput, _CHAR_INFO* lpBuffer, _COORD dwBufferSize, _COORD dwBufferCoord, _SMALL_RECT* lpWriteRegion);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteConsoleOutputW(void* hConsoleOutput, _CHAR_INFO* lpBuffer, _COORD dwBufferSize, _COORD dwBufferCoord, _SMALL_RECT* lpWriteRegion);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleOutputA(void* hConsoleOutput, _CHAR_INFO* lpBuffer, _COORD dwBufferSize, _COORD dwBufferCoord, _SMALL_RECT* lpReadRegion);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadConsoleOutputW(void* hConsoleOutput, _CHAR_INFO* lpBuffer, _COORD dwBufferSize, _COORD dwBufferCoord, _SMALL_RECT* lpReadRegion);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleTitleA(byte lpConsoleTitle, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleTitleW(ushort lpConsoleTitle, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleOriginalTitleA(byte lpConsoleTitle, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleOriginalTitleW(ushort lpConsoleTitle, UInt32 nSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleTitleA(byte lpConsoleTitle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleTitleW(ushort lpConsoleTitle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNumberOfConsoleMouseButtons(UInt32 lpNumberOfMouseButtons);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _COORD GetConsoleFontSize(void* hConsoleOutput, UInt32 nFont);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrentConsoleFont(void* hConsoleOutput, int bMaximumWindow, _CONSOLE_FONT_INFO* lpConsoleCurrentFont);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetCurrentConsoleFontEx(void* hConsoleOutput, int bMaximumWindow, _CONSOLE_FONT_INFOEX* lpConsoleCurrentFontEx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetCurrentConsoleFontEx(void* hConsoleOutput, int bMaximumWindow, _CONSOLE_FONT_INFOEX* lpConsoleCurrentFontEx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetConsoleSelectionInfo(_CONSOLE_SELECTION_INFO* lpConsoleSelectionInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetConsoleHistoryInfo(_CONSOLE_HISTORY_INFO* lpConsoleHistoryInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleHistoryInfo(_CONSOLE_HISTORY_INFO* lpConsoleHistoryInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetConsoleDisplayMode(UInt32 lpModeFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleDisplayMode(void* hConsoleOutput, UInt32 dwFlags, _COORD* lpNewScreenBufferDimensions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* GetConsoleWindow();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddConsoleAliasA(byte Source, byte Target, byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddConsoleAliasW(ushort Source, ushort Target, ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasA(byte Source, byte TargetBuffer, UInt32 TargetBufferLength, byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasW(ushort Source, ushort TargetBuffer, UInt32 TargetBufferLength, ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasesLengthA(byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasesLengthW(ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasExesLengthA();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasExesLengthW();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasesA(byte AliasBuffer, UInt32 AliasBufferLength, byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasesW(ushort AliasBuffer, UInt32 AliasBufferLength, ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasExesA(byte ExeNameBuffer, UInt32 ExeNameBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleAliasExesW(ushort ExeNameBuffer, UInt32 ExeNameBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ExpungeConsoleCommandHistoryA(byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ExpungeConsoleCommandHistoryW(ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleNumberOfCommandsA(UInt32 Number, byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetConsoleNumberOfCommandsW(UInt32 Number, ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleCommandHistoryLengthA(byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleCommandHistoryLengthW(ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleCommandHistoryA(byte Commands, UInt32 CommandBufferLength, byte ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleCommandHistoryW(ushort Commands, UInt32 CommandBufferLength, ushort ExeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetConsoleProcessList(UInt32 lpdwProcessList, UInt32 dwProcessCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 VerFindFileA(UInt32 uFlags, byte szFileName, byte szWinDir, byte szAppDir, byte szCurDir, uint* puCurDirLen, byte szDestDir, uint* puDestDirLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 VerFindFileW(UInt32 uFlags, ushort szFileName, ushort szWinDir, ushort szAppDir, ushort szCurDir, uint* puCurDirLen, ushort szDestDir, uint* puDestDirLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 VerInstallFileA(UInt32 uFlags, byte szSrcFileName, byte szDestFileName, byte szSrcDir, byte szDestDir, byte szCurDir, byte szTmpFile, uint* puTmpFileLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 VerInstallFileW(UInt32 uFlags, ushort szSrcFileName, ushort szDestFileName, ushort szSrcDir, ushort szDestDir, ushort szCurDir, ushort szTmpFile, uint* puTmpFileLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFileVersionInfoSizeA(byte lptstrFilename, UInt32 lpdwHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFileVersionInfoSizeW(ushort lptstrFilename, UInt32 lpdwHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileVersionInfoA(byte lptstrFilename, UInt32 dwHandle, UInt32 dwLen, void* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileVersionInfoW(ushort lptstrFilename, UInt32 dwHandle, UInt32 dwLen, void* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFileVersionInfoSizeExA(UInt32 dwFlags, byte lpwstrFilename, UInt32 lpdwHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetFileVersionInfoSizeExW(UInt32 dwFlags, ushort lpwstrFilename, UInt32 lpdwHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileVersionInfoExA(UInt32 dwFlags, byte lpwstrFilename, UInt32 dwHandle, UInt32 dwLen, void* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFileVersionInfoExW(UInt32 dwFlags, ushort lpwstrFilename, UInt32 dwHandle, UInt32 dwLen, void* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 VerLanguageNameA(UInt32 wLang, byte szLang, UInt32 cchLang);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 VerLanguageNameW(UInt32 wLang, ushort szLang, UInt32 cchLang);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VerQueryValueA(void* pBlock, byte lpSubBlock, void** lplpBuffer, uint* puLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VerQueryValueW(void* pBlock, ushort lpSubBlock, void** lplpBuffer, uint* puLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCloseKey(HKEY__* hKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOverridePredefKey(HKEY__* hKey, HKEY__* hNewHKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOpenUserClassesRoot(void* hToken, UInt32 dwOptions, UInt32 samDesired, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOpenCurrentUser(UInt32 samDesired, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDisablePredefinedCache();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDisablePredefinedCacheEx();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegConnectRegistryA(byte lpMachineName, HKEY__* hKey, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegConnectRegistryW(ushort lpMachineName, HKEY__* hKey, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegConnectRegistryExA(byte lpMachineName, HKEY__* hKey, UInt32 Flags, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegConnectRegistryExW(ushort lpMachineName, HKEY__* hKey, UInt32 Flags, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCreateKeyA(HKEY__* hKey, byte lpSubKey, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCreateKeyW(HKEY__* hKey, ushort lpSubKey, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCreateKeyExA(HKEY__* hKey, byte lpSubKey, UInt32 Reserved, byte lpClass, UInt32 dwOptions, UInt32 samDesired, _SECURITY_ATTRIBUTES* lpSecurityAttributes, HKEY__* phkResult, UInt32 lpdwDisposition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCreateKeyExW(HKEY__* hKey, ushort lpSubKey, UInt32 Reserved, ushort lpClass, UInt32 dwOptions, UInt32 samDesired, _SECURITY_ATTRIBUTES* lpSecurityAttributes, HKEY__* phkResult, UInt32 lpdwDisposition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCreateKeyTransactedA(HKEY__* hKey, byte lpSubKey, UInt32 Reserved, byte lpClass, UInt32 dwOptions, UInt32 samDesired, _SECURITY_ATTRIBUTES* lpSecurityAttributes, HKEY__* phkResult, UInt32 lpdwDisposition, void* hTransaction, void* pExtendedParemeter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCreateKeyTransactedW(HKEY__* hKey, ushort lpSubKey, UInt32 Reserved, ushort lpClass, UInt32 dwOptions, UInt32 samDesired, _SECURITY_ATTRIBUTES* lpSecurityAttributes, HKEY__* phkResult, UInt32 lpdwDisposition, void* hTransaction, void* pExtendedParemeter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteKeyA(HKEY__* hKey, byte lpSubKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteKeyW(HKEY__* hKey, ushort lpSubKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteKeyExA(HKEY__* hKey, byte lpSubKey, UInt32 samDesired, UInt32 Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteKeyExW(HKEY__* hKey, ushort lpSubKey, UInt32 samDesired, UInt32 Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteKeyTransactedA(HKEY__* hKey, byte lpSubKey, UInt32 samDesired, UInt32 Reserved, void* hTransaction, void* pExtendedParameter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteKeyTransactedW(HKEY__* hKey, ushort lpSubKey, UInt32 samDesired, UInt32 Reserved, void* hTransaction, void* pExtendedParameter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDisableReflectionKey(HKEY__* hBase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegEnableReflectionKey(HKEY__* hBase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryReflectionKey(HKEY__* hBase, int* bIsReflectionDisabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteValueA(HKEY__* hKey, byte lpValueName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteValueW(HKEY__* hKey, ushort lpValueName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegEnumKeyA(HKEY__* hKey, UInt32 dwIndex, byte lpName, UInt32 cchName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegEnumKeyW(HKEY__* hKey, UInt32 dwIndex, ushort lpName, UInt32 cchName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegEnumKeyExA(HKEY__* hKey, UInt32 dwIndex, byte lpName, UInt32 lpcchName, UInt32 lpReserved, byte lpClass, UInt32 lpcchClass, _FILETIME* lpftLastWriteTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegEnumKeyExW(HKEY__* hKey, UInt32 dwIndex, ushort lpName, UInt32 lpcchName, UInt32 lpReserved, ushort lpClass, UInt32 lpcchClass, _FILETIME* lpftLastWriteTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegEnumValueA(HKEY__* hKey, UInt32 dwIndex, byte lpValueName, UInt32 lpcchValueName, UInt32 lpReserved, UInt32 lpType, byte lpData, UInt32 lpcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegEnumValueW(HKEY__* hKey, UInt32 dwIndex, ushort lpValueName, UInt32 lpcchValueName, UInt32 lpReserved, UInt32 lpType, byte lpData, UInt32 lpcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegFlushKey(HKEY__* hKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegGetKeySecurity(HKEY__* hKey, UInt32 SecurityInformation, void* pSecurityDescriptor, UInt32 lpcbSecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegLoadKeyA(HKEY__* hKey, byte lpSubKey, byte lpFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegLoadKeyW(HKEY__* hKey, ushort lpSubKey, ushort lpFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegNotifyChangeKeyValue(HKEY__* hKey, int bWatchSubtree, UInt32 dwNotifyFilter, void* hEvent, int fAsynchronous);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOpenKeyA(HKEY__* hKey, byte lpSubKey, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOpenKeyW(HKEY__* hKey, ushort lpSubKey, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOpenKeyExA(HKEY__* hKey, byte lpSubKey, UInt32 ulOptions, UInt32 samDesired, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOpenKeyExW(HKEY__* hKey, ushort lpSubKey, UInt32 ulOptions, UInt32 samDesired, HKEY__* phkResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOpenKeyTransactedA(HKEY__* hKey, byte lpSubKey, UInt32 ulOptions, UInt32 samDesired, HKEY__* phkResult, void* hTransaction, void* pExtendedParemeter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegOpenKeyTransactedW(HKEY__* hKey, ushort lpSubKey, UInt32 ulOptions, UInt32 samDesired, HKEY__* phkResult, void* hTransaction, void* pExtendedParemeter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryInfoKeyA(HKEY__* hKey, byte lpClass, UInt32 lpcchClass, UInt32 lpReserved, UInt32 lpcSubKeys, UInt32 lpcbMaxSubKeyLen, UInt32 lpcbMaxClassLen, UInt32 lpcValues, UInt32 lpcbMaxValueNameLen, UInt32 lpcbMaxValueLen, UInt32 lpcbSecurityDescriptor, _FILETIME* lpftLastWriteTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryInfoKeyW(HKEY__* hKey, ushort lpClass, UInt32 lpcchClass, UInt32 lpReserved, UInt32 lpcSubKeys, UInt32 lpcbMaxSubKeyLen, UInt32 lpcbMaxClassLen, UInt32 lpcValues, UInt32 lpcbMaxValueNameLen, UInt32 lpcbMaxValueLen, UInt32 lpcbSecurityDescriptor, _FILETIME* lpftLastWriteTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryValueA(HKEY__* hKey, byte lpSubKey, byte lpData, Int32 lpcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryValueW(HKEY__* hKey, ushort lpSubKey, ushort lpData, Int32 lpcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryMultipleValuesA(HKEY__* hKey, value_entA* val_list, UInt32 num_vals, byte lpValueBuf, UInt32 ldwTotsize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryMultipleValuesW(HKEY__* hKey, value_entW* val_list, UInt32 num_vals, ushort lpValueBuf, UInt32 ldwTotsize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryValueExA(HKEY__* hKey, byte lpValueName, UInt32 lpReserved, UInt32 lpType, byte lpData, UInt32 lpcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegQueryValueExW(HKEY__* hKey, ushort lpValueName, UInt32 lpReserved, UInt32 lpType, byte lpData, UInt32 lpcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegReplaceKeyA(HKEY__* hKey, byte lpSubKey, byte lpNewFile, byte lpOldFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegReplaceKeyW(HKEY__* hKey, ushort lpSubKey, ushort lpNewFile, ushort lpOldFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegRestoreKeyA(HKEY__* hKey, byte lpFile, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegRestoreKeyW(HKEY__* hKey, ushort lpFile, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegRenameKey(HKEY__* hKey, ushort lpSubKeyName, ushort lpNewKeyName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSaveKeyA(HKEY__* hKey, byte lpFile, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSaveKeyW(HKEY__* hKey, ushort lpFile, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSetKeySecurity(HKEY__* hKey, UInt32 SecurityInformation, void* pSecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSetValueA(HKEY__* hKey, byte lpSubKey, UInt32 dwType, byte lpData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSetValueW(HKEY__* hKey, ushort lpSubKey, UInt32 dwType, ushort lpData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSetValueExA(HKEY__* hKey, byte lpValueName, UInt32 Reserved, UInt32 dwType, byte* lpData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSetValueExW(HKEY__* hKey, ushort lpValueName, UInt32 Reserved, UInt32 dwType, byte* lpData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegUnLoadKeyA(HKEY__* hKey, byte lpSubKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegUnLoadKeyW(HKEY__* hKey, ushort lpSubKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteKeyValueA(HKEY__* hKey, byte lpSubKey, byte lpValueName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteKeyValueW(HKEY__* hKey, ushort lpSubKey, ushort lpValueName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSetKeyValueA(HKEY__* hKey, byte lpSubKey, byte lpValueName, UInt32 dwType, void* lpData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSetKeyValueW(HKEY__* hKey, ushort lpSubKey, ushort lpValueName, UInt32 dwType, void* lpData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteTreeA(HKEY__* hKey, byte lpSubKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegDeleteTreeW(HKEY__* hKey, ushort lpSubKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCopyTreeA(HKEY__* hKeySrc, byte lpSubKey, HKEY__* hKeyDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegGetValueA(HKEY__* hkey, byte lpSubKey, byte lpValue, UInt32 dwFlags, UInt32 pdwType, void* pvData, UInt32 pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegGetValueW(HKEY__* hkey, ushort lpSubKey, ushort lpValue, UInt32 dwFlags, UInt32 pdwType, void* pvData, UInt32 pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegCopyTreeW(HKEY__* hKeySrc, ushort lpSubKey, HKEY__* hKeyDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegLoadMUIStringA(HKEY__* hKey, byte pszValue, byte pszOutBuf, UInt32 cbOutBuf, UInt32 pcbData, UInt32 Flags, byte pszDirectory);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegLoadMUIStringW(HKEY__* hKey, ushort pszValue, ushort pszOutBuf, UInt32 cbOutBuf, UInt32 pcbData, UInt32 Flags, ushort pszDirectory);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegLoadAppKeyA(byte lpFile, HKEY__* phkResult, UInt32 samDesired, UInt32 dwOptions, UInt32 Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegLoadAppKeyW(ushort lpFile, HKEY__* phkResult, UInt32 samDesired, UInt32 dwOptions, UInt32 Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitiateSystemShutdownA(byte lpMachineName, byte lpMessage, UInt32 dwTimeout, int bForceAppsClosed, int bRebootAfterShutdown);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitiateSystemShutdownW(ushort lpMachineName, ushort lpMessage, UInt32 dwTimeout, int bForceAppsClosed, int bRebootAfterShutdown);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AbortSystemShutdownA(byte lpMachineName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AbortSystemShutdownW(ushort lpMachineName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitiateSystemShutdownExA(byte lpMachineName, byte lpMessage, UInt32 dwTimeout, int bForceAppsClosed, int bRebootAfterShutdown, UInt32 dwReason);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitiateSystemShutdownExW(ushort lpMachineName, ushort lpMessage, UInt32 dwTimeout, int bForceAppsClosed, int bRebootAfterShutdown, UInt32 dwReason);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 InitiateShutdownA(byte lpMachineName, byte lpMessage, UInt32 dwGracePeriod, UInt32 dwShutdownFlags, UInt32 dwReason);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 InitiateShutdownW(ushort lpMachineName, ushort lpMessage, UInt32 dwGracePeriod, UInt32 dwShutdownFlags, UInt32 dwReason);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CheckForHiberboot(byte pHiberboot, byte bClearFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSaveKeyExA(HKEY__* hKey, byte lpFile, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegSaveKeyExW(HKEY__* hKey, ushort lpFile, _SECURITY_ATTRIBUTES* lpSecurityAttributes, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetAddConnectionA(byte lpRemoteName, byte lpPassword, byte lpLocalName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetAddConnectionW(ushort lpRemoteName, ushort lpPassword, ushort lpLocalName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetAddConnection2A(_NETRESOURCEA* lpNetResource, byte lpPassword, byte lpUserName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetAddConnection2W(_NETRESOURCEW* lpNetResource, ushort lpPassword, ushort lpUserName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetAddConnection3A(HWND__* hwndOwner, _NETRESOURCEA* lpNetResource, byte lpPassword, byte lpUserName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetAddConnection3W(HWND__* hwndOwner, _NETRESOURCEW* lpNetResource, ushort lpPassword, ushort lpUserName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetAddConnection4A(HWND__* hwndOwner, _NETRESOURCEA* lpNetResource, void* pAuthBuffer, UInt32 cbAuthBuffer, UInt32 dwFlags, byte lpUseOptions, UInt32 cbUseOptions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetAddConnection4W(HWND__* hwndOwner, _NETRESOURCEW* lpNetResource, void* pAuthBuffer, UInt32 cbAuthBuffer, UInt32 dwFlags, byte lpUseOptions, UInt32 cbUseOptions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetCancelConnectionA(byte lpName, int fForce);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetCancelConnectionW(ushort lpName, int fForce);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetCancelConnection2A(byte lpName, UInt32 dwFlags, int fForce);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetCancelConnection2W(ushort lpName, UInt32 dwFlags, int fForce);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetConnectionA(byte lpLocalName, byte lpRemoteName, UInt32 lpnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetConnectionW(ushort lpLocalName, ushort lpRemoteName, UInt32 lpnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetRestoreSingleConnectionW(HWND__* hwndParent, ushort lpDevice, int fUseUI);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetUseConnectionA(HWND__* hwndOwner, _NETRESOURCEA* lpNetResource, byte lpPassword, byte lpUserId, UInt32 dwFlags, byte lpAccessName, UInt32 lpBufferSize, UInt32 lpResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetUseConnectionW(HWND__* hwndOwner, _NETRESOURCEW* lpNetResource, ushort lpPassword, ushort lpUserId, UInt32 dwFlags, ushort lpAccessName, UInt32 lpBufferSize, UInt32 lpResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetUseConnection4A(HWND__* hwndOwner, _NETRESOURCEA* lpNetResource, void* pAuthBuffer, UInt32 cbAuthBuffer, UInt32 dwFlags, byte lpUseOptions, UInt32 cbUseOptions, byte lpAccessName, UInt32 lpBufferSize, UInt32 lpResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetUseConnection4W(HWND__* hwndOwner, _NETRESOURCEW* lpNetResource, void* pAuthBuffer, UInt32 cbAuthBuffer, UInt32 dwFlags, byte lpUseOptions, UInt32 cbUseOptions, ushort lpAccessName, UInt32 lpBufferSize, UInt32 lpResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetConnectionDialog(HWND__* hwnd, UInt32 dwType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetDisconnectDialog(HWND__* hwnd, UInt32 dwType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetConnectionDialog1A(_CONNECTDLGSTRUCTA* lpConnDlgStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetConnectionDialog1W(_CONNECTDLGSTRUCTW* lpConnDlgStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetDisconnectDialog1A(_DISCDLGSTRUCTA* lpConnDlgStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetDisconnectDialog1W(_DISCDLGSTRUCTW* lpConnDlgStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetOpenEnumA(UInt32 dwScope, UInt32 dwType, UInt32 dwUsage, _NETRESOURCEA* lpNetResource, void* lphEnum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetOpenEnumW(UInt32 dwScope, UInt32 dwType, UInt32 dwUsage, _NETRESOURCEW* lpNetResource, void* lphEnum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetEnumResourceA(void* hEnum, UInt32 lpcCount, void* lpBuffer, UInt32 lpBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetEnumResourceW(void* hEnum, UInt32 lpcCount, void* lpBuffer, UInt32 lpBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetCloseEnum(void* hEnum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetResourceParentA(_NETRESOURCEA* lpNetResource, void* lpBuffer, UInt32 lpcbBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetResourceParentW(_NETRESOURCEW* lpNetResource, void* lpBuffer, UInt32 lpcbBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetResourceInformationA(_NETRESOURCEA* lpNetResource, void* lpBuffer, UInt32 lpcbBuffer, byte* lplpSystem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetResourceInformationW(_NETRESOURCEW* lpNetResource, void* lpBuffer, UInt32 lpcbBuffer, ushort* lplpSystem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetUniversalNameA(byte lpLocalPath, UInt32 dwInfoLevel, void* lpBuffer, UInt32 lpBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetUniversalNameW(ushort lpLocalPath, UInt32 dwInfoLevel, void* lpBuffer, UInt32 lpBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetUserA(byte lpName, byte lpUserName, UInt32 lpnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetUserW(ushort lpName, ushort lpUserName, UInt32 lpnLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetProviderNameA(UInt32 dwNetType, byte lpProviderName, UInt32 lpBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetProviderNameW(UInt32 dwNetType, ushort lpProviderName, UInt32 lpBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetNetworkInformationA(byte lpProvider, _NETINFOSTRUCT* lpNetInfoStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetNetworkInformationW(ushort lpProvider, _NETINFOSTRUCT* lpNetInfoStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetLastErrorA(UInt32 lpError, byte lpErrorBuf, UInt32 nErrorBufSize, byte lpNameBuf, UInt32 nNameBufSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WNetGetLastErrorW(UInt32 lpError, ushort lpErrorBuf, UInt32 nErrorBufSize, ushort lpNameBuf, UInt32 nNameBufSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 MultinetGetConnectionPerformanceA(_NETRESOURCEA* lpNetResource, _NETCONNECTINFOSTRUCT* lpNetConnectInfoStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 MultinetGetConnectionPerformanceW(_NETRESOURCEW* lpNetResource, _NETCONNECTINFOSTRUCT* lpNetConnectInfoStruct);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeSetQualityOfService(HWND__* hwndClient, _SECURITY_QUALITY_OF_SERVICE* pqosNew, _SECURITY_QUALITY_OF_SERVICE* pqosPrev);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImpersonateDdeClientWindow(HWND__* hWndClient, HWND__* hWndServer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long PackDDElParam(uint msg, ulong uiLo, ulong uiHi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnpackDDElParam(uint msg, long lParam, ulong* puiLo, ulong* puiHi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FreeDDElParam(uint msg, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long ReuseDDElParam(long lParam, uint msgIn, uint msgOut, ulong uiLo, ulong uiHi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint DdeInitializeA(UInt32 pidInst, Option pfnCallback, UInt32 afCmd, UInt32 ulRes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint DdeInitializeW(UInt32 pidInst, Option pfnCallback, UInt32 afCmd, UInt32 ulRes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeUninitialize(UInt32 idInst);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HCONVLIST__* DdeConnectList(UInt32 idInst, HSZ__* hszService, HSZ__* hszTopic, HCONVLIST__* hConvList, tagCONVCONTEXT* pCC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HCONV__* DdeQueryNextServer(HCONVLIST__* hConvList, HCONV__* hConvPrev);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeDisconnectList(HCONVLIST__* hConvList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HCONV__* DdeConnect(UInt32 idInst, HSZ__* hszService, HSZ__* hszTopic, tagCONVCONTEXT* pCC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeDisconnect(HCONV__* hConv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HCONV__* DdeReconnect(HCONV__* hConv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint DdeQueryConvInfo(HCONV__* hConv, UInt32 idTransaction, tagCONVINFO* pConvInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeSetUserHandle(HCONV__* hConv, UInt32 id, ulong hUser);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeAbandonTransaction(UInt32 idInst, HCONV__* hConv, UInt32 idTransaction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdePostAdvise(UInt32 idInst, HSZ__* hszTopic, HSZ__* hszItem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeEnableCallback(UInt32 idInst, HCONV__* hConv, uint wCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeImpersonateClient(HCONV__* hConv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDDEDATA__* DdeNameService(UInt32 idInst, HSZ__* hsz1, HSZ__* hsz2, uint afCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDDEDATA__* DdeClientTransaction(byte pData, UInt32 cbData, HCONV__* hConv, HSZ__* hszItem, uint wFmt, uint wType, UInt32 dwTimeout, UInt32 pdwResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDDEDATA__* DdeCreateDataHandle(UInt32 idInst, byte pSrc, UInt32 cb, UInt32 cbOff, HSZ__* hszItem, uint wFmt, uint afCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDDEDATA__* DdeAddData(HDDEDATA__* hData, byte pSrc, UInt32 cb, UInt32 cbOff);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DdeGetData(HDDEDATA__* hData, byte pDst, UInt32 cbMax, UInt32 cbOff);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte DdeAccessData(HDDEDATA__* hData, UInt32 pcbDataSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeUnaccessData(HDDEDATA__* hData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeFreeDataHandle(HDDEDATA__* hData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint DdeGetLastError(UInt32 idInst);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HSZ__* DdeCreateStringHandleA(UInt32 idInst, byte psz, int iCodePage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HSZ__* DdeCreateStringHandleW(UInt32 idInst, ushort psz, int iCodePage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DdeQueryStringA(UInt32 idInst, HSZ__* hsz, byte psz, UInt32 cchMax, int iCodePage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DdeQueryStringW(UInt32 idInst, HSZ__* hsz, ushort psz, UInt32 cchMax, int iCodePage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeFreeStringHandle(UInt32 idInst, HSZ__* hsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeKeepStringHandle(UInt32 idInst, HSZ__* hsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DdeCmpStringHandles(HSZ__* hsz1, HSZ__* hsz2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LZStart();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void LZDone();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CopyLZFile(int hfSource, int hfDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 LZCopy(int hfSource, int hfDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LZInit(int hfSource);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetExpandedNameA(byte lpszSource, byte lpszBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetExpandedNameW(ushort lpszSource, ushort lpszBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LZOpenFileA(byte lpFileName, _OFSTRUCT* lpReOpenBuf, ushort wStyle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LZOpenFileW(ushort lpFileName, _OFSTRUCT* lpReOpenBuf, ushort wStyle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 LZSeek(int hFile, Int32 lOffset, int iOrigin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int LZRead(int hFile, byte* lpBuffer, int cbRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void LZClose(int hFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 mciSendCommandA(uint mciId, uint uMsg, ulong dwParam1, ulong dwParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 mciSendCommandW(uint mciId, uint uMsg, ulong dwParam1, ulong dwParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 mciSendStringA(byte lpstrCommand, byte lpstrReturnString, uint uReturnLength, HWND__* hwndCallback);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 mciSendStringW(ushort lpstrCommand, ushort lpstrReturnString, uint uReturnLength, HWND__* hwndCallback);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mciGetDeviceIDA(byte pszDevice);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mciGetDeviceIDW(ushort pszDevice);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mciGetDeviceIDFromElementIDA(UInt32 dwElementID, byte lpstrType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mciGetDeviceIDFromElementIDW(UInt32 dwElementID, ushort lpstrType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mciGetErrorStringA(UInt32 mcierr, byte pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mciGetErrorStringW(UInt32 mcierr, ushort pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mciSetYieldProc(uint mciId, Option fpYieldProc, UInt32 dwYieldData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HTASK__* mciGetCreatorTask(uint mciId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option mciGetYieldProc(uint mciId, UInt32 pdwYieldData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong mciGetDriverData(uint wDeviceID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mciLoadCommandResource(void* hInstance, ushort lpResName, uint wType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mciSetDriverData(uint wDeviceID, ulong dwData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mciDriverYield(uint wDeviceID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mciDriverNotify(void* hwndCallback, uint wDeviceID, uint uStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mciFreeCommandResource(uint wTable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long CloseDriver(HDRVR__* hDriver, long lParam1, long lParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HDRVR__* OpenDriver(ushort szDriverName, ushort szSectionName, long lParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SendDriverMessage(HDRVR__* hDriver, uint message, long lParam1, long lParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* DrvGetModuleHandle(HDRVR__* hDriver);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* GetDriverModuleHandle(HDRVR__* hDriver);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long DefDriverProc(ulong dwDriverIdentifier, HDRVR__* hdrvr, uint uMsg, long lParam1, long lParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DriverCallback(ulong dwCallback, UInt32 dwFlags, HDRVR__* hDevice, UInt32 dwMsg, ulong dwUser, ulong dwParam1, ulong dwParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 sndOpenSound(ushort EventName, ushort AppName, int Flags, void* FileHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmDrvInstall(HDRVR__* hDriver, ushort wszDrvEntry, Option drvMessage, uint wFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 mmioStringToFOURCCA(byte sz, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 mmioStringToFOURCCW(ushort sz, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option mmioInstallIOProcA(UInt32 fccIOProc, Option pIOProc, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option mmioInstallIOProcW(UInt32 fccIOProc, Option pIOProc, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMMIO__* mmioOpenA(byte pszFileName, _MMIOINFO* pmmioinfo, UInt32 fdwOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HMMIO__* mmioOpenW(ushort pszFileName, _MMIOINFO* pmmioinfo, UInt32 fdwOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioRenameA(byte pszFileName, byte pszNewFileName, MMIOINFO* pmmioinfo, UInt32 fdwRename);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioRenameW(ushort pszFileName, ushort pszNewFileName, MMIOINFO* pmmioinfo, UInt32 fdwRename);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioClose(HMMIO__* hmmio, uint fuClose);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 mmioRead(HMMIO__* hmmio, byte* pch, Int32 cch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 mmioWrite(HMMIO__* hmmio, byte* pch, Int32 cch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 mmioSeek(HMMIO__* hmmio, Int32 lOffset, int iOrigin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioGetInfo(HMMIO__* hmmio, _MMIOINFO* pmmioinfo, uint fuInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioSetInfo(HMMIO__* hmmio, MMIOINFO* pmmioinfo, uint fuInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioSetBuffer(HMMIO__* hmmio, byte pchBuffer, Int32 cchBuffer, uint fuBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioFlush(HMMIO__* hmmio, uint fuFlush);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioAdvance(HMMIO__* hmmio, _MMIOINFO* pmmioinfo, uint fuAdvance);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long mmioSendMessage(HMMIO__* hmmio, uint uMsg, long lParam1, long lParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioDescend(HMMIO__* hmmio, _MMCKINFO* pmmcki, _MMCKINFO* pmmckiParent, uint fuDescend);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioAscend(HMMIO__* hmmio, _MMCKINFO* pmmcki, uint fuAscend);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mmioCreateChunk(HMMIO__* hmmio, _MMCKINFO* pmmcki, uint fuCreate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint timeSetEvent(uint uDelay, uint uResolution, Option fptc, ulong dwUser, uint fuEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint timeKillEvent(uint uTimerID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sndPlaySoundA(byte pszSound, uint fuSound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sndPlaySoundW(ushort pszSound, uint fuSound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PlaySoundA(byte pszSound, HINSTANCE__* hmod, UInt32 fdwSound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PlaySoundW(ushort pszSound, HINSTANCE__* hmod, UInt32 fdwSound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetNumDevs();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetDevCapsA(ulong uDeviceID, tagWAVEOUTCAPSA* pwoc, uint cbwoc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetDevCapsW(ulong uDeviceID, tagWAVEOUTCAPSW* pwoc, uint cbwoc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetVolume(HWAVEOUT__* hwo, UInt32 pdwVolume);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutSetVolume(HWAVEOUT__* hwo, UInt32 dwVolume);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetErrorTextA(uint mmrError, byte pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetErrorTextW(uint mmrError, ushort pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutOpen(HWAVEOUT__* phwo, uint uDeviceID, WAVEFORMATEX* pwfx, ulong dwCallback, ulong dwInstance, UInt32 fdwOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutClose(HWAVEOUT__* hwo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutPrepareHeader(HWAVEOUT__* hwo, wavehdr_tag* pwh, uint cbwh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutUnprepareHeader(HWAVEOUT__* hwo, wavehdr_tag* pwh, uint cbwh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutWrite(HWAVEOUT__* hwo, wavehdr_tag* pwh, uint cbwh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutPause(HWAVEOUT__* hwo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutRestart(HWAVEOUT__* hwo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutReset(HWAVEOUT__* hwo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutBreakLoop(HWAVEOUT__* hwo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetPosition(HWAVEOUT__* hwo, mmtime_tag* pmmt, uint cbmmt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetPitch(HWAVEOUT__* hwo, UInt32 pdwPitch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutSetPitch(HWAVEOUT__* hwo, UInt32 dwPitch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetPlaybackRate(HWAVEOUT__* hwo, UInt32 pdwRate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutSetPlaybackRate(HWAVEOUT__* hwo, UInt32 dwRate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutGetID(HWAVEOUT__* hwo, uint puDeviceID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveOutMessage(HWAVEOUT__* hwo, uint uMsg, ulong dw1, ulong dw2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInGetNumDevs();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInGetDevCapsA(ulong uDeviceID, tagWAVEINCAPSA* pwic, uint cbwic);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInGetDevCapsW(ulong uDeviceID, tagWAVEINCAPSW* pwic, uint cbwic);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInGetErrorTextA(uint mmrError, byte pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInGetErrorTextW(uint mmrError, ushort pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInOpen(HWAVEIN__* phwi, uint uDeviceID, WAVEFORMATEX* pwfx, ulong dwCallback, ulong dwInstance, UInt32 fdwOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInClose(HWAVEIN__* hwi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInPrepareHeader(HWAVEIN__* hwi, wavehdr_tag* pwh, uint cbwh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInUnprepareHeader(HWAVEIN__* hwi, wavehdr_tag* pwh, uint cbwh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInAddBuffer(HWAVEIN__* hwi, wavehdr_tag* pwh, uint cbwh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInStart(HWAVEIN__* hwi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInStop(HWAVEIN__* hwi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInReset(HWAVEIN__* hwi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInGetPosition(HWAVEIN__* hwi, mmtime_tag* pmmt, uint cbmmt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInGetID(HWAVEIN__* hwi, uint puDeviceID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint waveInMessage(HWAVEIN__* hwi, uint uMsg, ulong dw1, ulong dw2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutGetNumDevs();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiStreamOpen(HMIDISTRM__* phms, uint puDeviceID, UInt32 cMidi, ulong dwCallback, ulong dwInstance, UInt32 fdwOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiStreamClose(HMIDISTRM__* hms);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiStreamProperty(HMIDISTRM__* hms, byte lppropdata, UInt32 dwProperty);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiStreamPosition(HMIDISTRM__* hms, mmtime_tag* lpmmt, uint cbmmt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiStreamOut(HMIDISTRM__* hms, midihdr_tag* pmh, uint cbmh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiStreamPause(HMIDISTRM__* hms);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiStreamRestart(HMIDISTRM__* hms);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiStreamStop(HMIDISTRM__* hms);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiConnect(HMIDI__* hmi, HMIDIOUT__* hmo, void* pReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiDisconnect(HMIDI__* hmi, HMIDIOUT__* hmo, void* pReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutGetDevCapsA(ulong uDeviceID, tagMIDIOUTCAPSA* pmoc, uint cbmoc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutGetDevCapsW(ulong uDeviceID, tagMIDIOUTCAPSW* pmoc, uint cbmoc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutGetVolume(HMIDIOUT__* hmo, UInt32 pdwVolume);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutSetVolume(HMIDIOUT__* hmo, UInt32 dwVolume);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutGetErrorTextA(uint mmrError, byte pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutGetErrorTextW(uint mmrError, ushort pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutOpen(HMIDIOUT__* phmo, uint uDeviceID, ulong dwCallback, ulong dwInstance, UInt32 fdwOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutClose(HMIDIOUT__* hmo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutPrepareHeader(HMIDIOUT__* hmo, midihdr_tag* pmh, uint cbmh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutUnprepareHeader(HMIDIOUT__* hmo, midihdr_tag* pmh, uint cbmh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutShortMsg(HMIDIOUT__* hmo, UInt32 dwMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutLongMsg(HMIDIOUT__* hmo, midihdr_tag* pmh, uint cbmh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutReset(HMIDIOUT__* hmo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutCachePatches(HMIDIOUT__* hmo, uint uBank, ushort pwpa, uint fuCache);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutCacheDrumPatches(HMIDIOUT__* hmo, uint uPatch, ushort pwkya, uint fuCache);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutGetID(HMIDIOUT__* hmo, uint puDeviceID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiOutMessage(HMIDIOUT__* hmo, uint uMsg, ulong dw1, ulong dw2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInGetNumDevs();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInGetDevCapsA(ulong uDeviceID, tagMIDIINCAPSA* pmic, uint cbmic);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInGetDevCapsW(ulong uDeviceID, tagMIDIINCAPSW* pmic, uint cbmic);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInGetErrorTextA(uint mmrError, byte pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInGetErrorTextW(uint mmrError, ushort pszText, uint cchText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInOpen(HMIDIIN__* phmi, uint uDeviceID, ulong dwCallback, ulong dwInstance, UInt32 fdwOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInClose(HMIDIIN__* hmi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInPrepareHeader(HMIDIIN__* hmi, midihdr_tag* pmh, uint cbmh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInUnprepareHeader(HMIDIIN__* hmi, midihdr_tag* pmh, uint cbmh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInAddBuffer(HMIDIIN__* hmi, midihdr_tag* pmh, uint cbmh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInStart(HMIDIIN__* hmi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInStop(HMIDIIN__* hmi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInReset(HMIDIIN__* hmi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInGetID(HMIDIIN__* hmi, uint puDeviceID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint midiInMessage(HMIDIIN__* hmi, uint uMsg, ulong dw1, ulong dw2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint auxGetNumDevs();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint auxGetDevCapsA(ulong uDeviceID, tagAUXCAPSA* pac, uint cbac);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint auxGetDevCapsW(ulong uDeviceID, tagAUXCAPSW* pac, uint cbac);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint auxSetVolume(uint uDeviceID, UInt32 dwVolume);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint auxGetVolume(uint uDeviceID, UInt32 pdwVolume);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint auxOutMessage(uint uDeviceID, uint uMsg, ulong dw1, ulong dw2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetNumDevs();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetDevCapsA(ulong uMxId, tagMIXERCAPSA* pmxcaps, uint cbmxcaps);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetDevCapsW(ulong uMxId, tagMIXERCAPSW* pmxcaps, uint cbmxcaps);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerOpen(HMIXER__* phmx, uint uMxId, ulong dwCallback, ulong dwInstance, UInt32 fdwOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerClose(HMIXER__* hmx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 mixerMessage(HMIXER__* hmx, uint uMsg, ulong dwParam1, ulong dwParam2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetLineInfoA(HMIXEROBJ__* hmxobj, tagMIXERLINEA* pmxl, UInt32 fdwInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetLineInfoW(HMIXEROBJ__* hmxobj, tagMIXERLINEW* pmxl, UInt32 fdwInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetID(HMIXEROBJ__* hmxobj, uint* puMxId, UInt32 fdwId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetLineControlsA(HMIXEROBJ__* hmxobj, tagMIXERLINECONTROLSA* pmxlc, UInt32 fdwControls);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetLineControlsW(HMIXEROBJ__* hmxobj, tagMIXERLINECONTROLSW* pmxlc, UInt32 fdwControls);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetControlDetailsA(HMIXEROBJ__* hmxobj, tMIXERCONTROLDETAILS* pmxcd, UInt32 fdwDetails);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerGetControlDetailsW(HMIXEROBJ__* hmxobj, tMIXERCONTROLDETAILS* pmxcd, UInt32 fdwDetails);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint mixerSetControlDetails(HMIXEROBJ__* hmxobj, tMIXERCONTROLDETAILS* pmxcd, UInt32 fdwDetails);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint timeGetSystemTime(mmtime_tag* pmmt, uint cbmmt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 timeGetTime();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint timeGetDevCaps(timecaps_tag* ptc, uint cbtc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint timeBeginPeriod(uint uPeriod);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint timeEndPeriod(uint uPeriod);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joyGetPosEx(uint uJoyID, joyinfoex_tag* pji);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joyGetNumDevs();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joyGetDevCapsA(ulong uJoyID, tagJOYCAPSA* pjc, uint cbjc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joyGetDevCapsW(ulong uJoyID, tagJOYCAPSW* pjc, uint cbjc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joyGetPos(uint uJoyID, joyinfo_tag* pji);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joyGetThreshold(uint uJoyID, uint puThreshold);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joyReleaseCapture(uint uJoyID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joySetCapture(HWND__* hwnd, uint uJoyID, uint uPeriod, int fChanged);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joySetThreshold(uint uJoyID, uint uThreshold);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint joyConfigChanged(UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte Netbios(_NCB* pncb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingCopy(I_RPC_HANDLE SourceBinding, I_RPC_HANDLE* DestinationBinding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingFree(I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingSetOption(I_RPC_HANDLE hBinding, UInt32 option, ulong optionValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqOption(I_RPC_HANDLE hBinding, UInt32 option, ulong* pOptionValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingFromStringBindingA(byte* StringBinding, I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingFromStringBindingW(ushort* StringBinding, I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSsGetContextBinding(void* ContextHandle, I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqObject(I_RPC_HANDLE Binding, _GUID* ObjectUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingReset(I_RPC_HANDLE Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingSetObject(I_RPC_HANDLE Binding, _GUID* ObjectUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtInqDefaultProtectLevel(UInt32 AuthnSvc, UInt32* AuthnLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingToStringBindingA(I_RPC_HANDLE Binding, byte** StringBinding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingToStringBindingW(I_RPC_HANDLE Binding, ushort** StringBinding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingVectorFree(_RPC_BINDING_VECTOR** BindingVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcStringBindingComposeA(byte* ObjUuid, byte* ProtSeq, byte* NetworkAddr, byte* Endpoint, byte* Options, byte** StringBinding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcStringBindingComposeW(ushort* ObjUuid, ushort* ProtSeq, ushort* NetworkAddr, ushort* Endpoint, ushort* Options, ushort** StringBinding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcStringBindingParseA(byte* StringBinding, byte** ObjUuid, byte** Protseq, byte** NetworkAddr, byte** Endpoint, byte** NetworkOptions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcStringBindingParseW(ushort* StringBinding, ushort** ObjUuid, ushort** Protseq, ushort** NetworkAddr, ushort** Endpoint, ushort** NetworkOptions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcStringFreeA(byte** String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcStringFreeW(ushort** String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcIfInqId(void* RpcIfHandle, _RPC_IF_ID* RpcIfId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNetworkIsProtseqValidA(byte* Protseq);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNetworkIsProtseqValidW(ushort* Protseq);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtInqComTimeout(I_RPC_HANDLE Binding, uint* Timeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtSetComTimeout(I_RPC_HANDLE Binding, uint Timeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtSetCancelTimeout(Int32 Timeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNetworkInqProtseqsA(_RPC_PROTSEQ_VECTORA** ProtseqVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNetworkInqProtseqsW(_RPC_PROTSEQ_VECTORW** ProtseqVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcObjectInqType(_GUID* ObjUuid, _GUID* TypeUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcObjectSetInqFn(Option InquiryFn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcObjectSetType(_GUID* ObjUuid, _GUID* TypeUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcProtseqVectorFreeA(_RPC_PROTSEQ_VECTORA** ProtseqVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcProtseqVectorFreeW(_RPC_PROTSEQ_VECTORW** ProtseqVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInqBindings(_RPC_BINDING_VECTOR** BindingVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInqBindingsEx(void* SecurityDescriptor, _RPC_BINDING_VECTOR** BindingVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInqIf(void* IfSpec, _GUID* MgrTypeUuid, void** MgrEpv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerListen(uint MinimumCallThreads, uint MaxCalls, uint DontWait);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerRegisterIf(void* IfSpec, _GUID* MgrTypeUuid, void* MgrEpv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerRegisterIfEx(void* IfSpec, _GUID* MgrTypeUuid, void* MgrEpv, uint Flags, uint MaxCalls, Option IfCallback);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerRegisterIf2(void* IfSpec, _GUID* MgrTypeUuid, void* MgrEpv, uint Flags, uint MaxCalls, uint MaxRpcSize, Option IfCallbackFn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerRegisterIf3(void* IfSpec, _GUID* MgrTypeUuid, void* MgrEpv, uint Flags, uint MaxCalls, uint MaxRpcSize, Option IfCallback, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUnregisterIf(void* IfSpec, _GUID* MgrTypeUuid, uint WaitForCallsToComplete);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUnregisterIfEx(void* IfSpec, _GUID* MgrTypeUuid, int RundownContextHandles);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseAllProtseqs(uint MaxCalls, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseAllProtseqsEx(uint MaxCalls, void* SecurityDescriptor, _RPC_POLICY* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseAllProtseqsIf(uint MaxCalls, void* IfSpec, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseAllProtseqsIfEx(uint MaxCalls, void* IfSpec, void* SecurityDescriptor, _RPC_POLICY* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqA(byte* Protseq, uint MaxCalls, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqExA(byte* Protseq, uint MaxCalls, void* SecurityDescriptor, _RPC_POLICY* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqW(ushort* Protseq, uint MaxCalls, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqExW(ushort* Protseq, uint MaxCalls, void* SecurityDescriptor, _RPC_POLICY* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqEpA(byte* Protseq, uint MaxCalls, byte* Endpoint, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqEpExA(byte* Protseq, uint MaxCalls, byte* Endpoint, void* SecurityDescriptor, _RPC_POLICY* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqEpW(ushort* Protseq, uint MaxCalls, ushort* Endpoint, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqEpExW(ushort* Protseq, uint MaxCalls, ushort* Endpoint, void* SecurityDescriptor, _RPC_POLICY* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqIfA(byte* Protseq, uint MaxCalls, void* IfSpec, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqIfExA(byte* Protseq, uint MaxCalls, void* IfSpec, void* SecurityDescriptor, _RPC_POLICY* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqIfW(ushort* Protseq, uint MaxCalls, void* IfSpec, void* SecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUseProtseqIfExW(ushort* Protseq, uint MaxCalls, void* IfSpec, void* SecurityDescriptor, _RPC_POLICY* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcServerYield();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtStatsVectorFree(RPC_STATS_VECTOR** StatsVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtInqStats(I_RPC_HANDLE Binding, RPC_STATS_VECTOR** Statistics);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtIsServerListening(I_RPC_HANDLE Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtStopServerListening(I_RPC_HANDLE Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtWaitServerListen();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtSetServerStackSize(UInt32 ThreadStackSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcSsDontSerializeContext();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtEnableIdleCleanup();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtInqIfIds(I_RPC_HANDLE Binding, RPC_IF_ID_VECTOR** IfIdVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcIfIdVectorFree(RPC_IF_ID_VECTOR** IfIdVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtInqServerPrincNameA(I_RPC_HANDLE Binding, UInt32 AuthnSvc, byte** ServerPrincName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtInqServerPrincNameW(I_RPC_HANDLE Binding, UInt32 AuthnSvc, ushort** ServerPrincName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInqDefaultPrincNameA(UInt32 AuthnSvc, byte** PrincName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInqDefaultPrincNameW(UInt32 AuthnSvc, ushort** PrincName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcEpResolveBinding(I_RPC_HANDLE Binding, void* IfSpec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingInqEntryNameA(I_RPC_HANDLE Binding, UInt32 EntryNameSyntax, byte** EntryName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingInqEntryNameW(I_RPC_HANDLE Binding, UInt32 EntryNameSyntax, ushort** EntryName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingCreateA(_RPC_BINDING_HANDLE_TEMPLATE_V1_A* Template, _RPC_BINDING_HANDLE_SECURITY_V1_A* Security, _RPC_BINDING_HANDLE_OPTIONS_V1* Options, I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingCreateW(_RPC_BINDING_HANDLE_TEMPLATE_V1_W* Template, _RPC_BINDING_HANDLE_SECURITY_V1_W* Security, _RPC_BINDING_HANDLE_OPTIONS_V1* Options, I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingGetTrainingContextHandle(I_RPC_HANDLE Binding, void** ContextHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInqBindingHandle(I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcImpersonateClient(I_RPC_HANDLE BindingHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcImpersonateClient2(I_RPC_HANDLE BindingHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcRevertToSelfEx(I_RPC_HANDLE BindingHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcRevertToSelf();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcImpersonateClientContainer(I_RPC_HANDLE BindingHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcRevertContainerImpersonation();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqAuthClientA(I_RPC_HANDLE ClientBinding, void** Privs, byte** ServerPrincName, UInt32* AuthnLevel, UInt32* AuthnSvc, UInt32* AuthzSvc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqAuthClientW(I_RPC_HANDLE ClientBinding, void** Privs, ushort** ServerPrincName, UInt32* AuthnLevel, UInt32* AuthnSvc, UInt32* AuthzSvc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqAuthClientExA(I_RPC_HANDLE ClientBinding, void** Privs, byte** ServerPrincName, UInt32* AuthnLevel, UInt32* AuthnSvc, UInt32* AuthzSvc, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqAuthClientExW(I_RPC_HANDLE ClientBinding, void** Privs, ushort** ServerPrincName, UInt32* AuthnLevel, UInt32* AuthnSvc, UInt32* AuthzSvc, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqAuthInfoA(I_RPC_HANDLE Binding, byte** ServerPrincName, UInt32* AuthnLevel, UInt32* AuthnSvc, void** AuthIdentity, UInt32* AuthzSvc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqAuthInfoW(I_RPC_HANDLE Binding, ushort** ServerPrincName, UInt32* AuthnLevel, UInt32* AuthnSvc, void** AuthIdentity, UInt32* AuthzSvc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingSetAuthInfoA(I_RPC_HANDLE Binding, byte* ServerPrincName, UInt32 AuthnLevel, UInt32 AuthnSvc, void* AuthIdentity, UInt32 AuthzSvc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingSetAuthInfoExA(I_RPC_HANDLE Binding, byte* ServerPrincName, UInt32 AuthnLevel, UInt32 AuthnSvc, void* AuthIdentity, UInt32 AuthzSvc, _RPC_SECURITY_QOS* SecurityQos);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingSetAuthInfoW(I_RPC_HANDLE Binding, ushort* ServerPrincName, UInt32 AuthnLevel, UInt32 AuthnSvc, void* AuthIdentity, UInt32 AuthzSvc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingSetAuthInfoExW(I_RPC_HANDLE Binding, ushort* ServerPrincName, UInt32 AuthnLevel, UInt32 AuthnSvc, void* AuthIdentity, UInt32 AuthzSvc, _RPC_SECURITY_QOS* SecurityQOS);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqAuthInfoExA(I_RPC_HANDLE Binding, byte** ServerPrincName, UInt32* AuthnLevel, UInt32* AuthnSvc, void** AuthIdentity, UInt32* AuthzSvc, UInt32 RpcQosVersion, _RPC_SECURITY_QOS* SecurityQOS);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingInqAuthInfoExW(I_RPC_HANDLE Binding, ushort** ServerPrincName, UInt32* AuthnLevel, UInt32* AuthnSvc, void** AuthIdentity, UInt32* AuthzSvc, UInt32 RpcQosVersion, _RPC_SECURITY_QOS* SecurityQOS);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerCompleteSecurityCallback(I_RPC_HANDLE BindingHandle, Int32 Status);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerRegisterAuthInfoA(byte* ServerPrincName, UInt32 AuthnSvc, Option GetKeyFn, void* Arg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerRegisterAuthInfoW(ushort* ServerPrincName, UInt32 AuthnSvc, Option GetKeyFn, void* Arg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingServerFromClient(I_RPC_HANDLE ClientBinding, I_RPC_HANDLE* ServerBinding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcTestCancel();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerTestCancel(I_RPC_HANDLE BindingHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcCancelThread(void* Thread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcCancelThreadEx(void* Thread, Int32 Timeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UuidCreate(_GUID* Uuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UuidCreateSequential(_GUID* Uuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UuidToStringA(_GUID* Uuid, byte** StringUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UuidFromStringA(byte* StringUuid, _GUID* Uuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UuidToStringW(_GUID* Uuid, ushort** StringUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UuidFromStringW(ushort* StringUuid, _GUID* Uuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UuidCompare(_GUID* Uuid1, _GUID* Uuid2, Int32* Status);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UuidCreateNil(_GUID* NilUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UuidEqual(_GUID* Uuid1, _GUID* Uuid2, Int32* Status);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort UuidHash(_GUID* Uuid, Int32* Status);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UuidIsNil(_GUID* Uuid, Int32* Status);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcEpRegisterNoReplaceA(void* IfSpec, _RPC_BINDING_VECTOR* BindingVector, _UUID_VECTOR* UuidVector, byte* Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcEpRegisterNoReplaceW(void* IfSpec, _RPC_BINDING_VECTOR* BindingVector, _UUID_VECTOR* UuidVector, ushort* Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcEpRegisterA(void* IfSpec, _RPC_BINDING_VECTOR* BindingVector, _UUID_VECTOR* UuidVector, byte* Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcEpRegisterW(void* IfSpec, _RPC_BINDING_VECTOR* BindingVector, _UUID_VECTOR* UuidVector, ushort* Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcEpUnregister(void* IfSpec, _RPC_BINDING_VECTOR* BindingVector, _UUID_VECTOR* UuidVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DceErrorInqTextA(Int32 RpcStatus, byte* ErrorText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DceErrorInqTextW(Int32 RpcStatus, ushort* ErrorText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtEpEltInqBegin(I_RPC_HANDLE EpBinding, UInt32 InquiryType, _RPC_IF_ID* IfId, UInt32 VersOption, _GUID* ObjectUuid, I_RPC_HANDLE** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtEpEltInqDone(I_RPC_HANDLE** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtEpEltInqNextA(I_RPC_HANDLE* InquiryContext, _RPC_IF_ID* IfId, I_RPC_HANDLE* Binding, _GUID* ObjectUuid, byte** Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtEpEltInqNextW(I_RPC_HANDLE* InquiryContext, _RPC_IF_ID* IfId, I_RPC_HANDLE* Binding, _GUID* ObjectUuid, ushort** Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtEpUnregister(I_RPC_HANDLE EpBinding, _RPC_IF_ID* IfId, I_RPC_HANDLE Binding, _GUID* ObjectUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcMgmtSetAuthorizationFn(Option AuthorizationFn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int RpcExceptionFilter(UInt32 ExceptionCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInterfaceGroupCreateW(RPC_INTERFACE_TEMPLATEW* Interfaces, UInt32 NumIfs, RPC_ENDPOINT_TEMPLATEW* Endpoints, UInt32 NumEndpoints, UInt32 IdlePeriod, Option IdleCallbackFn, void* IdleCallbackContext, void** IfGroup);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInterfaceGroupCreateA(RPC_INTERFACE_TEMPLATEA* Interfaces, UInt32 NumIfs, RPC_ENDPOINT_TEMPLATEA* Endpoints, UInt32 NumEndpoints, UInt32 IdlePeriod, Option IdleCallbackFn, void* IdleCallbackContext, void** IfGroup);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInterfaceGroupClose(void* IfGroup);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInterfaceGroupActivate(void* IfGroup);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInterfaceGroupDeactivate(void* IfGroup, UInt32 ForceDeactivation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInterfaceGroupInqBindings(void* IfGroup, _RPC_BINDING_VECTOR** BindingVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcNegotiateTransferSyntax(_RPC_MESSAGE* Message);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcGetBuffer(_RPC_MESSAGE* Message);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcGetBufferWithObject(_RPC_MESSAGE* Message, _GUID* ObjectUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcSendReceive(_RPC_MESSAGE* Message);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcFreeBuffer(_RPC_MESSAGE* Message);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcSend(_RPC_MESSAGE* Message);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcReceive(_RPC_MESSAGE* Message, uint Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcFreePipeBuffer(_RPC_MESSAGE* Message);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcReallocPipeBuffer(_RPC_MESSAGE* Message, uint NewSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcRequestMutex(void** Mutex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcClearMutex(void* Mutex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcDeleteMutex(void* Mutex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* I_RpcAllocate(uint Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcFree(void* Object);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 I_RpcFreeSystemHandleCollection(void* CallObj, UInt32 FreeFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcSetSystemHandle(void* Handle, byte Type, UInt32 AccessMask, void* CallObj, UInt32* HandleIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcGetSystemHandle(byte* pMemory, byte Type, UInt32 AccessMask, UInt32 HandleIndex, void* CallObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcFreeSystemHandle(byte Type, void* Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcPauseExecution(UInt32 Milliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcGetExtendedError();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcSystemHandleTypeSpecificWork(void* Handle, byte ActualType, byte IdlType, _LRPC_SYSTEM_HANDLE_MARSHAL_DIRECTION MarshalDirection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcMonitorAssociation(I_RPC_HANDLE Handle, Option RundownRoutine, void* Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcStopMonitorAssociation(I_RPC_HANDLE Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern I_RPC_HANDLE I_RpcGetCurrentCallHandle();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcGetAssociationContext(I_RPC_HANDLE BindingHandle, void** AssociationContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* I_RpcGetServerContextList(I_RPC_HANDLE BindingHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcSetServerContextList(I_RPC_HANDLE BindingHandle, void* ServerContextList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcNsInterfaceExported(UInt32 EntryNameSyntax, ushort* EntryName, _RPC_SERVER_INTERFACE* RpcInterfaceInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcNsInterfaceUnexported(UInt32 EntryNameSyntax, ushort* EntryName, _RPC_SERVER_INTERFACE* RpcInterfaceInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingToStaticStringBindingW(I_RPC_HANDLE Binding, ushort** StringBinding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqSecurityContext(I_RPC_HANDLE Binding, void** SecurityContextHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqSecurityContextKeyInfo(I_RPC_HANDLE Binding, void* KeyInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqWireIdForSnego(I_RPC_HANDLE Binding, byte* WireId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqMarshalledTargetInfo(I_RPC_HANDLE Binding, UInt32* MarshalledTargetInfoSize, byte** MarshalledTargetInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqLocalClientPID(I_RPC_HANDLE Binding, UInt32* Pid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingHandleToAsyncHandle(I_RPC_HANDLE Binding, void** AsyncHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcNsBindingSetEntryNameW(I_RPC_HANDLE Binding, UInt32 EntryNameSyntax, ushort* EntryName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcNsBindingSetEntryNameA(I_RPC_HANDLE Binding, UInt32 EntryNameSyntax, byte* EntryName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerUseProtseqEp2A(byte* NetworkAddress, byte* Protseq, uint MaxCalls, byte* Endpoint, void* SecurityDescriptor, void* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerUseProtseqEp2W(ushort* NetworkAddress, ushort* Protseq, uint MaxCalls, ushort* Endpoint, void* SecurityDescriptor, void* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerUseProtseq2W(ushort* NetworkAddress, ushort* Protseq, uint MaxCalls, void* SecurityDescriptor, void* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerUseProtseq2A(byte* NetworkAddress, byte* Protseq, uint MaxCalls, void* SecurityDescriptor, void* Policy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerStartService(ushort* Protseq, ushort* Endpoint, void* IfSpec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqDynamicEndpointW(I_RPC_HANDLE Binding, ushort** DynamicEndpoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqDynamicEndpointA(I_RPC_HANDLE Binding, byte** DynamicEndpoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerCheckClientRestriction(I_RPC_HANDLE Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqTransportType(I_RPC_HANDLE Binding, uint* Type);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcIfInqTransferSyntaxes(void* RpcIfHandle, _RPC_TRANSFER_SYNTAX* TransferSyntaxes, uint TransferSyntaxSize, uint* TransferSyntaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_UuidCreate(_GUID* Uuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcUninitializeNdrOle();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingCopy(I_RPC_HANDLE SourceBinding, I_RPC_HANDLE* DestinationBinding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingIsClientLocal(I_RPC_HANDLE BindingHandle, uint* ClientLocalFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqConnId(I_RPC_HANDLE Binding, void** ConnId, int* pfFirstCall);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingCreateNP(ushort* ServerName, ushort* ServiceName, ushort* NetworkOptions, I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcSsDontSerializeContext();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcLaunchDatagramReceiveThread(void* pAddress);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerRegisterForwardFunction(Option pForwardFunction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option I_RpcServerInqAddressChangeFn();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerSetAddressChangeFn(Option pAddressChangeFn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerInqLocalConnAddress(I_RPC_HANDLE Binding, void* Buffer, UInt32* BufferSize, UInt32* AddressFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerInqRemoteConnAddress(I_RPC_HANDLE Binding, void* Buffer, UInt32* BufferSize, UInt32* AddressFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcSessionStrictContextHandle();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcTurnOnEEInfoPropagation();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcConnectionInqSockBuffSize(UInt32* RecvBuffSize, UInt32* SendBuffSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcConnectionSetSockBuffSize(UInt32 RecvBuffSize, UInt32 SendBuffSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerStartListening(void* hWnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerStopListening();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingSetAsync(I_RPC_HANDLE Binding, Option BlockingFn, UInt32 ServerTid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcSetThreadParams(int fClientFree, void* Context, void* hWndClient);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint I_RpcWindowProc(void* hWnd, uint Message, uint wParam, UInt32 lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerUnregisterEndpointA(byte* Protseq, byte* Endpoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerUnregisterEndpointW(ushort* Protseq, ushort* Endpoint);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerInqTransportType(uint* Type);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcMapWin32Status(Int32 Status);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcProxyNewConnection(UInt32 ConnectionType, ushort* ServerAddress, ushort* ServerPort, ushort* MinConnTimeout, void* ConnectionParameter, _RDR_CALLOUT_STATE* CallOutState, tagI_RpcProxyCallbackInterface* ProxyCallbackInterface);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcReplyToClientWithStatus(void* ConnectionParameter, Int32 RpcStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcRecordCalloutFailure(Int32 RpcStatus, _RDR_CALLOUT_STATE* CallOutState, ushort* DllName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcMgmtEnableDedicatedThreadPool();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcGetDefaultSD(void** ppSecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcOpenClientProcess(I_RPC_HANDLE Binding, UInt32 DesiredAccess, void** ClientProcess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingIsServerLocal(I_RPC_HANDLE Binding, uint* ServerLocalFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingSetPrivateOption(I_RPC_HANDLE hBinding, UInt32 option, ulong optionValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerSubscribeForDisconnectNotification(I_RPC_HANDLE Binding, void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerGetAssociationID(I_RPC_HANDLE Binding, UInt32* AssociationID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerDisableExceptionFilter();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerSubscribeForDisconnectNotification2(I_RPC_HANDLE Binding, void* hEvent, _GUID* SubscriptionId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcServerUnsubscribeForDisconnectNotification(I_RPC_HANDLE Binding, _GUID SubscriptionId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingExportA(UInt32 EntryNameSyntax, byte* EntryName, void* IfSpec, _RPC_BINDING_VECTOR* BindingVec, _UUID_VECTOR* ObjectUuidVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingUnexportA(UInt32 EntryNameSyntax, byte* EntryName, void* IfSpec, _UUID_VECTOR* ObjectUuidVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingExportW(UInt32 EntryNameSyntax, ushort* EntryName, void* IfSpec, _RPC_BINDING_VECTOR* BindingVec, _UUID_VECTOR* ObjectUuidVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingUnexportW(UInt32 EntryNameSyntax, ushort* EntryName, void* IfSpec, _UUID_VECTOR* ObjectUuidVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingExportPnPA(UInt32 EntryNameSyntax, byte* EntryName, void* IfSpec, _UUID_VECTOR* ObjectVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingUnexportPnPA(UInt32 EntryNameSyntax, byte* EntryName, void* IfSpec, _UUID_VECTOR* ObjectVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingExportPnPW(UInt32 EntryNameSyntax, ushort* EntryName, void* IfSpec, _UUID_VECTOR* ObjectVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingUnexportPnPW(UInt32 EntryNameSyntax, ushort* EntryName, void* IfSpec, _UUID_VECTOR* ObjectVector);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingLookupBeginA(UInt32 EntryNameSyntax, byte* EntryName, void* IfSpec, _GUID* ObjUuid, UInt32 BindingMaxCount, void** LookupContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingLookupBeginW(UInt32 EntryNameSyntax, ushort* EntryName, void* IfSpec, _GUID* ObjUuid, UInt32 BindingMaxCount, void** LookupContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingLookupNext(void* LookupContext, _RPC_BINDING_VECTOR** BindingVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingLookupDone(void** LookupContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupDeleteA(UInt32 GroupNameSyntax, byte* GroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrAddA(UInt32 GroupNameSyntax, byte* GroupName, UInt32 MemberNameSyntax, byte* MemberName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrRemoveA(UInt32 GroupNameSyntax, byte* GroupName, UInt32 MemberNameSyntax, byte* MemberName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrInqBeginA(UInt32 GroupNameSyntax, byte* GroupName, UInt32 MemberNameSyntax, void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrInqNextA(void* InquiryContext, byte** MemberName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupDeleteW(UInt32 GroupNameSyntax, ushort* GroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrAddW(UInt32 GroupNameSyntax, ushort* GroupName, UInt32 MemberNameSyntax, ushort* MemberName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrRemoveW(UInt32 GroupNameSyntax, ushort* GroupName, UInt32 MemberNameSyntax, ushort* MemberName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrInqBeginW(UInt32 GroupNameSyntax, ushort* GroupName, UInt32 MemberNameSyntax, void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrInqNextW(void* InquiryContext, ushort** MemberName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsGroupMbrInqDone(void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileDeleteA(UInt32 ProfileNameSyntax, byte* ProfileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltAddA(UInt32 ProfileNameSyntax, byte* ProfileName, _RPC_IF_ID* IfId, UInt32 MemberNameSyntax, byte* MemberName, UInt32 Priority, byte* Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltRemoveA(UInt32 ProfileNameSyntax, byte* ProfileName, _RPC_IF_ID* IfId, UInt32 MemberNameSyntax, byte* MemberName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltInqBeginA(UInt32 ProfileNameSyntax, byte* ProfileName, UInt32 InquiryType, _RPC_IF_ID* IfId, UInt32 VersOption, UInt32 MemberNameSyntax, byte* MemberName, void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltInqNextA(void* InquiryContext, _RPC_IF_ID* IfId, byte** MemberName, UInt32* Priority, byte** Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileDeleteW(UInt32 ProfileNameSyntax, ushort* ProfileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltAddW(UInt32 ProfileNameSyntax, ushort* ProfileName, _RPC_IF_ID* IfId, UInt32 MemberNameSyntax, ushort* MemberName, UInt32 Priority, ushort* Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltRemoveW(UInt32 ProfileNameSyntax, ushort* ProfileName, _RPC_IF_ID* IfId, UInt32 MemberNameSyntax, ushort* MemberName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltInqBeginW(UInt32 ProfileNameSyntax, ushort* ProfileName, UInt32 InquiryType, _RPC_IF_ID* IfId, UInt32 VersOption, UInt32 MemberNameSyntax, ushort* MemberName, void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltInqNextW(void* InquiryContext, _RPC_IF_ID* IfId, ushort** MemberName, UInt32* Priority, ushort** Annotation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsProfileEltInqDone(void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsEntryObjectInqBeginA(UInt32 EntryNameSyntax, byte* EntryName, void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsEntryObjectInqBeginW(UInt32 EntryNameSyntax, ushort* EntryName, void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsEntryObjectInqNext(void* InquiryContext, _GUID* ObjUuid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsEntryObjectInqDone(void** InquiryContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsEntryExpandNameA(UInt32 EntryNameSyntax, byte* EntryName, byte** ExpandedName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtBindingUnexportA(UInt32 EntryNameSyntax, byte* EntryName, _RPC_IF_ID* IfId, UInt32 VersOption, _UUID_VECTOR* ObjectUuidVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtEntryCreateA(UInt32 EntryNameSyntax, byte* EntryName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtEntryDeleteA(UInt32 EntryNameSyntax, byte* EntryName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtEntryInqIfIdsA(UInt32 EntryNameSyntax, byte* EntryName, RPC_IF_ID_VECTOR** IfIdVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtHandleSetExpAge(void* NsHandle, UInt32 ExpirationAge);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtInqExpAge(UInt32* ExpirationAge);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtSetExpAge(UInt32 ExpirationAge);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsEntryExpandNameW(UInt32 EntryNameSyntax, ushort* EntryName, ushort** ExpandedName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtBindingUnexportW(UInt32 EntryNameSyntax, ushort* EntryName, _RPC_IF_ID* IfId, UInt32 VersOption, _UUID_VECTOR* ObjectUuidVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtEntryCreateW(UInt32 EntryNameSyntax, ushort* EntryName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtEntryDeleteW(UInt32 EntryNameSyntax, ushort* EntryName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsMgmtEntryInqIfIdsW(UInt32 EntryNameSyntax, ushort* EntryName, RPC_IF_ID_VECTOR** IfIdVec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingImportBeginA(UInt32 EntryNameSyntax, byte* EntryName, void* IfSpec, _GUID* ObjUuid, void** ImportContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingImportBeginW(UInt32 EntryNameSyntax, ushort* EntryName, void* IfSpec, _GUID* ObjUuid, void** ImportContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingImportNext(void* ImportContext, I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingImportDone(void** ImportContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcNsBindingSelect(_RPC_BINDING_VECTOR* BindingVec, I_RPC_HANDLE* Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcAsyncRegisterInfo(_RPC_ASYNC_STATE* pAsync);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcAsyncInitializeHandle(_RPC_ASYNC_STATE* pAsync, uint Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcAsyncGetCallStatus(_RPC_ASYNC_STATE* pAsync);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcAsyncCompleteCall(_RPC_ASYNC_STATE* pAsync, void* Reply);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcAsyncAbortCall(_RPC_ASYNC_STATE* pAsync, UInt32 ExceptionCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcAsyncCancelCall(_RPC_ASYNC_STATE* pAsync, int fAbort);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcErrorStartEnumeration(tagRPC_ERROR_ENUM_HANDLE* EnumHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcErrorGetNextRecord(tagRPC_ERROR_ENUM_HANDLE* EnumHandle, int CopyStrings, tagRPC_EXTENDED_ERROR_INFO* ErrorInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcErrorEndEnumeration(tagRPC_ERROR_ENUM_HANDLE* EnumHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcErrorResetEnumeration(tagRPC_ERROR_ENUM_HANDLE* EnumHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcErrorGetNumberOfRecords(tagRPC_ERROR_ENUM_HANDLE* EnumHandle, int* Records);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcErrorSaveErrorInfo(tagRPC_ERROR_ENUM_HANDLE* EnumHandle, void** ErrorBlob, UIntPtr* BlobSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcErrorLoadErrorInfo(void* ErrorBlob, UIntPtr BlobSize, tagRPC_ERROR_ENUM_HANDLE* EnumHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcErrorAddRecord(tagRPC_EXTENDED_ERROR_INFO* ErrorInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcErrorClearInformation();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcAsyncCleanupThread(UInt32 dwTimeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcGetAuthorizationContextForClient(I_RPC_HANDLE ClientBinding, int ImpersonateOnReturn, void* Reserved1, _LARGE_INTEGER pExpirationTime, _LUID Reserved2, UInt32 Reserved3, void* Reserved4, void** pAuthzClientContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcFreeAuthorizationContext(void** pAuthzClientContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSsContextLockExclusive(I_RPC_HANDLE ServerBindingHandle, void* UserContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSsContextLockShared(I_RPC_HANDLE ServerBindingHandle, void* UserContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInqCallAttributesW(I_RPC_HANDLE ClientBinding, void* RpcCallAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerInqCallAttributesA(I_RPC_HANDLE ClientBinding, void* RpcCallAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerSubscribeForNotification(I_RPC_HANDLE Binding, _RPC_NOTIFICATIONS Notification, _RPC_NOTIFICATION_TYPES NotificationType, _RPC_ASYNC_NOTIFICATION_INFO* NotificationInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcServerUnsubscribeForNotification(I_RPC_HANDLE Binding, _RPC_NOTIFICATIONS Notification, UInt32* NotificationsQueued);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingBind(_RPC_ASYNC_STATE* pAsync, I_RPC_HANDLE Binding, void* IfSpec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcBindingUnbind(I_RPC_HANDLE Binding);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcAsyncSetHandle(_RPC_MESSAGE* Message, _RPC_ASYNC_STATE* pAsync);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcAsyncAbortCall(_RPC_ASYNC_STATE* pAsync, UInt32 ExceptionCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int I_RpcExceptionFilter(UInt32 ExceptionCode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcBindingInqClientTokenAttributes(I_RPC_HANDLE Binding, _LUID* TokenId, _LUID* AuthenticationId, _LUID* ModifiedId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* CommandLineToArgvW(ushort lpCmdLine, int* pNumArgs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint DragQueryFileA(HDROP__* hDrop, uint iFile, byte lpszFile, uint cch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint DragQueryFileW(HDROP__* hDrop, uint iFile, ushort lpszFile, uint cch);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DragQueryPoint(HDROP__* hDrop, tagPOINT* ppt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DragFinish(HDROP__* hDrop);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void DragAcceptFiles(HWND__* hWnd, int fAccept);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* ShellExecuteA(HWND__* hwnd, byte lpOperation, byte lpFile, byte lpParameters, byte lpDirectory, int nShowCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* ShellExecuteW(HWND__* hwnd, ushort lpOperation, ushort lpFile, ushort lpParameters, ushort lpDirectory, int nShowCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* FindExecutableA(byte lpFile, byte lpDirectory, byte lpResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* FindExecutableW(ushort lpFile, ushort lpDirectory, ushort lpResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShellAboutA(HWND__* hWnd, byte szApp, byte szOtherStuff, HICON__* hIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShellAboutW(HWND__* hWnd, ushort szApp, ushort szOtherStuff, HICON__* hIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* DuplicateIcon(HINSTANCE__* hInst, HICON__* hIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* ExtractAssociatedIconA(HINSTANCE__* hInst, byte pszIconPath, ushort* piIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* ExtractAssociatedIconW(HINSTANCE__* hInst, ushort pszIconPath, ushort* piIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* ExtractAssociatedIconExA(HINSTANCE__* hInst, byte pszIconPath, ushort* piIconIndex, ushort* piIconId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* ExtractAssociatedIconExW(HINSTANCE__* hInst, ushort pszIconPath, ushort* piIconIndex, ushort* piIconId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* ExtractIconA(HINSTANCE__* hInst, byte pszExeFileName, uint nIconIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HICON__* ExtractIconW(HINSTANCE__* hInst, ushort pszExeFileName, uint nIconIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SHAppBarMessage(UInt32 dwMessage, _AppBarData* pData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DoEnvironmentSubstA(byte pszSrc, uint cchSrc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DoEnvironmentSubstW(ushort pszSrc, uint cchSrc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ExtractIconExA(byte lpszFile, int nIconIndex, HICON__** phiconLarge, HICON__** phiconSmall, uint nIcons);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ExtractIconExW(ushort lpszFile, int nIconIndex, HICON__** phiconLarge, HICON__** phiconSmall, uint nIcons);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHFileOperationA(_SHFILEOPSTRUCTA* lpFileOp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHFileOperationW(_SHFILEOPSTRUCTW* lpFileOp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SHFreeNameMappings(void* hNameMappings);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShellExecuteExA(_SHELLEXECUTEINFOA* pExecInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShellExecuteExW(_SHELLEXECUTEINFOW* pExecInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHCreateProcessAsUserW(_SHCREATEPROCESSINFOW* pscpi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHEvaluateSystemCommandTemplate(ushort pszCmdTemplate, ushort* ppszApplication, ushort* ppszCommandLine, ushort* ppszParameters);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AssocCreateForClasses(ASSOCIATIONELEMENT* rgClasses, UInt32 cClasses, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHQueryRecycleBinA(byte pszRootPath, _SHQUERYRBINFO* pSHQueryRBInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHQueryRecycleBinW(ushort pszRootPath, _SHQUERYRBINFO* pSHQueryRBInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHEmptyRecycleBinA(HWND__* hwnd, byte pszRootPath, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHEmptyRecycleBinW(HWND__* hwnd, ushort pszRootPath, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHQueryUserNotificationState(int* pquns);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHGetPropertyStoreForWindow(HWND__* hwnd, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Shell_NotifyIconA(UInt32 dwMessage, _NOTIFYICONDATAA* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int Shell_NotifyIconW(UInt32 dwMessage, _NOTIFYICONDATAW* lpData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 Shell_NotifyIconGetRect(_NOTIFYICONIDENTIFIER* identifier, tagRECT* iconLocation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SHGetFileInfoA(byte pszPath, UInt32 dwFileAttributes, _SHFILEINFOA* psfi, uint cbFileInfo, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SHGetFileInfoW(ushort pszPath, UInt32 dwFileAttributes, _SHFILEINFOW* psfi, uint cbFileInfo, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHGetStockIconInfo(int siid, uint uFlags, _SHSTOCKICONINFO* psii);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHGetDiskFreeSpaceExA(byte pszDirectoryName, _ULARGE_INTEGER* pulFreeBytesAvailableToCaller, _ULARGE_INTEGER* pulTotalNumberOfBytes, _ULARGE_INTEGER* pulTotalNumberOfFreeBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHGetDiskFreeSpaceExW(ushort pszDirectoryName, _ULARGE_INTEGER* pulFreeBytesAvailableToCaller, _ULARGE_INTEGER* pulTotalNumberOfBytes, _ULARGE_INTEGER* pulTotalNumberOfFreeBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHGetNewLinkInfoA(byte pszLinkTo, byte pszDir, byte pszName, int* pfMustCopy, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHGetNewLinkInfoW(ushort pszLinkTo, ushort pszDir, ushort pszName, int* pfMustCopy, uint uFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHInvokePrinterCommandA(HWND__* hwnd, uint uAction, byte lpBuf1, byte lpBuf2, int fModal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHInvokePrinterCommandW(HWND__* hwnd, uint uAction, ushort lpBuf1, ushort lpBuf2, int fModal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHLoadNonloadedIconOverlayIdentifiers();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHIsFileAvailableOffline(ushort pwszPath, UInt32* pdwStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHSetLocalizedName(ushort pszPath, ushort pszResModule, int idsRes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHRemoveLocalizedName(ushort pszPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHGetLocalizedName(ushort pszPath, ushort pszResModule, uint cch, int* pidsRes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShellMessageBoxA(HINSTANCE__* hAppInst, HWND__* hWnd, byte lpcText, byte lpcTitle, uint fuStyle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ShellMessageBoxW(HINSTANCE__* hAppInst, HWND__* hWnd, ushort lpcText, ushort lpcTitle, uint fuStyle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsLFNDriveA(byte pszPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsLFNDriveW(ushort pszPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHEnumerateUnreadMailAccountsA(HKEY__* hKeyUser, UInt32 dwIndex, byte pszMailAddress, int cchMailAddress);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHEnumerateUnreadMailAccountsW(HKEY__* hKeyUser, UInt32 dwIndex, ushort pszMailAddress, int cchMailAddress);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHGetUnreadMailCountA(HKEY__* hKeyUser, byte pszMailAddress, UInt32* pdwCount, _FILETIME* pFileTime, byte pszShellExecuteCommand, int cchShellExecuteCommand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHGetUnreadMailCountW(HKEY__* hKeyUser, ushort pszMailAddress, UInt32* pdwCount, _FILETIME* pFileTime, ushort pszShellExecuteCommand, int cchShellExecuteCommand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHSetUnreadMailCountA(byte pszMailAddress, UInt32 dwCount, byte pszShellExecuteCommand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHSetUnreadMailCountW(ushort pszMailAddress, UInt32 dwCount, ushort pszShellExecuteCommand);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SHTestTokenMembership(void* hToken, UInt32 ulRID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHGetImageList(int iImageList, _GUID* riid, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InitNetworkAddressControl();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SHGetDriveMedia(ushort pszDrive, UInt32* pdwMediaContent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptAcquireContextA(ulong* phProv, byte szContainer, byte szProvider, UInt32 dwProvType, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptAcquireContextW(ulong* phProv, ushort szContainer, ushort szProvider, UInt32 dwProvType, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptReleaseContext(ulong hProv, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGenKey(ulong hProv, uint Algid, UInt32 dwFlags, ulong* phKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDeriveKey(ulong hProv, uint Algid, ulong hBaseData, UInt32 dwFlags, ulong* phKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDestroyKey(ulong hKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetKeyParam(ulong hKey, UInt32 dwParam, byte* pbData, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetKeyParam(ulong hKey, UInt32 dwParam, byte* pbData, UInt32* pdwDataLen, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetHashParam(ulong hHash, UInt32 dwParam, byte* pbData, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetHashParam(ulong hHash, UInt32 dwParam, byte* pbData, UInt32* pdwDataLen, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetProvParam(ulong hProv, UInt32 dwParam, byte* pbData, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetProvParam(ulong hProv, UInt32 dwParam, byte* pbData, UInt32* pdwDataLen, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGenRandom(ulong hProv, UInt32 dwLen, byte* pbBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetUserKey(ulong hProv, UInt32 dwKeySpec, ulong* phUserKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptExportKey(ulong hKey, ulong hExpKey, UInt32 dwBlobType, UInt32 dwFlags, byte* pbData, UInt32* pdwDataLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptImportKey(ulong hProv, byte* pbData, UInt32 dwDataLen, ulong hPubKey, UInt32 dwFlags, ulong* phKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEncrypt(ulong hKey, ulong hHash, int Final, UInt32 dwFlags, byte* pbData, UInt32* pdwDataLen, UInt32 dwBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDecrypt(ulong hKey, ulong hHash, int Final, UInt32 dwFlags, byte* pbData, UInt32* pdwDataLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptCreateHash(ulong hProv, uint Algid, ulong hKey, UInt32 dwFlags, ulong* phHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptHashData(ulong hHash, byte* pbData, UInt32 dwDataLen, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptHashSessionKey(ulong hHash, ulong hKey, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDestroyHash(ulong hHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSignHashA(ulong hHash, UInt32 dwKeySpec, byte szDescription, UInt32 dwFlags, byte* pbSignature, UInt32* pdwSigLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSignHashW(ulong hHash, UInt32 dwKeySpec, ushort szDescription, UInt32 dwFlags, byte* pbSignature, UInt32* pdwSigLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifySignatureA(ulong hHash, byte* pbSignature, UInt32 dwSigLen, ulong hPubKey, byte szDescription, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifySignatureW(ulong hHash, byte* pbSignature, UInt32 dwSigLen, ulong hPubKey, ushort szDescription, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetProviderA(byte pszProvName, UInt32 dwProvType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetProviderW(ushort pszProvName, UInt32 dwProvType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetProviderExA(byte pszProvName, UInt32 dwProvType, UInt32* pdwReserved, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetProviderExW(ushort pszProvName, UInt32 dwProvType, UInt32* pdwReserved, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetDefaultProviderA(UInt32 dwProvType, UInt32* pdwReserved, UInt32 dwFlags, byte pszProvName, UInt32* pcbProvName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetDefaultProviderW(UInt32 dwProvType, UInt32* pdwReserved, UInt32 dwFlags, ushort pszProvName, UInt32* pcbProvName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEnumProviderTypesA(UInt32 dwIndex, UInt32* pdwReserved, UInt32 dwFlags, UInt32* pdwProvType, byte szTypeName, UInt32* pcbTypeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEnumProviderTypesW(UInt32 dwIndex, UInt32* pdwReserved, UInt32 dwFlags, UInt32* pdwProvType, ushort szTypeName, UInt32* pcbTypeName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEnumProvidersA(UInt32 dwIndex, UInt32* pdwReserved, UInt32 dwFlags, UInt32* pdwProvType, byte szProvName, UInt32* pcbProvName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEnumProvidersW(UInt32 dwIndex, UInt32* pdwReserved, UInt32 dwFlags, UInt32* pdwProvType, ushort szProvName, UInt32* pcbProvName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptContextAddRef(ulong hProv, UInt32* pdwReserved, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDuplicateKey(ulong hKey, UInt32* pdwReserved, UInt32 dwFlags, ulong* phKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDuplicateHash(ulong hHash, UInt32* pdwReserved, UInt32 dwFlags, ulong* phHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetEncSChannel(byte** pData, UInt32* dwDecSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptOpenAlgorithmProvider(void** phAlgorithm, ushort pszAlgId, ushort pszImplementation, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptEnumAlgorithms(UInt32 dwAlgOperations, UInt32* pAlgCount, _BCRYPT_ALGORITHM_IDENTIFIER** ppAlgList, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptEnumProviders(ushort pszAlgId, UInt32* pImplCount, _BCRYPT_PROVIDER_NAME** ppImplList, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptGetProperty(void* hObject, ushort pszProperty, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptSetProperty(void* hObject, ushort pszProperty, byte pbInput, UInt32 cbInput, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptCloseAlgorithmProvider(void* hAlgorithm, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void BCryptFreeBuffer(void* pvBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptGenerateSymmetricKey(void* hAlgorithm, void** phKey, byte pbKeyObject, UInt32 cbKeyObject, byte pbSecret, UInt32 cbSecret, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptGenerateKeyPair(void* hAlgorithm, void** phKey, UInt32 dwLength, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptEncrypt(void* hKey, byte pbInput, UInt32 cbInput, void* pPaddingInfo, byte pbIV, UInt32 cbIV, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDecrypt(void* hKey, byte pbInput, UInt32 cbInput, void* pPaddingInfo, byte pbIV, UInt32 cbIV, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptExportKey(void* hKey, void* hExportKey, ushort pszBlobType, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptImportKey(void* hAlgorithm, void* hImportKey, ushort pszBlobType, void** phKey, byte pbKeyObject, UInt32 cbKeyObject, byte pbInput, UInt32 cbInput, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptImportKeyPair(void* hAlgorithm, void* hImportKey, ushort pszBlobType, void** phKey, byte pbInput, UInt32 cbInput, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDuplicateKey(void* hKey, void** phNewKey, byte pbKeyObject, UInt32 cbKeyObject, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptFinalizeKeyPair(void* hKey, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDestroyKey(void* hKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDestroySecret(void* hSecret);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptSignHash(void* hKey, void* pPaddingInfo, byte pbInput, UInt32 cbInput, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptVerifySignature(void* hKey, void* pPaddingInfo, byte pbHash, UInt32 cbHash, byte pbSignature, UInt32 cbSignature, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptSecretAgreement(void* hPrivKey, void* hPubKey, void** phAgreedSecret, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDeriveKey(void* hSharedSecret, ushort pwszKDF, _BCryptBufferDesc* pParameterList, byte pbDerivedKey, UInt32 cbDerivedKey, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptKeyDerivation(void* hKey, _BCryptBufferDesc* pParameterList, byte pbDerivedKey, UInt32 cbDerivedKey, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptCreateHash(void* hAlgorithm, void** phHash, byte pbHashObject, UInt32 cbHashObject, byte pbSecret, UInt32 cbSecret, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptHashData(void* hHash, byte pbInput, UInt32 cbInput, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptFinishHash(void* hHash, byte pbOutput, UInt32 cbOutput, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptCreateMultiHash(void* hAlgorithm, void** phHash, UInt32 nHashes, byte pbHashObject, UInt32 cbHashObject, byte pbSecret, UInt32 cbSecret, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptProcessMultiOperations(void* hObject, int operationType, void* pOperations, UInt32 cbOperations, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDuplicateHash(void* hHash, void** phNewHash, byte pbHashObject, UInt32 cbHashObject, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDestroyHash(void* hHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptHash(void* hAlgorithm, byte pbSecret, UInt32 cbSecret, byte pbInput, UInt32 cbInput, byte pbOutput, UInt32 cbOutput);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptGenRandom(void* hAlgorithm, byte pbBuffer, UInt32 cbBuffer, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDeriveKeyCapi(void* hHash, void* hTargetAlg, byte pbDerivedKey, UInt32 cbDerivedKey, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDeriveKeyPBKDF2(void* hPrf, byte pbPassword, UInt32 cbPassword, byte pbSalt, UInt32 cbSalt, ulong cIterations, byte pbDerivedKey, UInt32 cbDerivedKey, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptQueryProviderRegistration(ushort pszProvider, UInt32 dwMode, UInt32 dwInterface, UInt32* pcbBuffer, _CRYPT_PROVIDER_REG** ppBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptEnumRegisteredProviders(UInt32* pcbBuffer, _CRYPT_PROVIDERS** ppBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptCreateContext(UInt32 dwTable, ushort pszContext, _CRYPT_CONTEXT_CONFIG* pConfig);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptDeleteContext(UInt32 dwTable, ushort pszContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptEnumContexts(UInt32 dwTable, UInt32* pcbBuffer, _CRYPT_CONTEXTS** ppBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptConfigureContext(UInt32 dwTable, ushort pszContext, _CRYPT_CONTEXT_CONFIG* pConfig);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptQueryContextConfiguration(UInt32 dwTable, ushort pszContext, UInt32* pcbBuffer, _CRYPT_CONTEXT_CONFIG** ppBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptAddContextFunction(UInt32 dwTable, ushort pszContext, UInt32 dwInterface, ushort pszFunction, UInt32 dwPosition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptRemoveContextFunction(UInt32 dwTable, ushort pszContext, UInt32 dwInterface, ushort pszFunction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptEnumContextFunctions(UInt32 dwTable, ushort pszContext, UInt32 dwInterface, UInt32* pcbBuffer, _CRYPT_CONTEXT_FUNCTIONS** ppBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptConfigureContextFunction(UInt32 dwTable, ushort pszContext, UInt32 dwInterface, ushort pszFunction, _CRYPT_CONTEXT_FUNCTION_CONFIG* pConfig);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptQueryContextFunctionConfiguration(UInt32 dwTable, ushort pszContext, UInt32 dwInterface, ushort pszFunction, UInt32* pcbBuffer, _CRYPT_CONTEXT_FUNCTION_CONFIG** ppBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptEnumContextFunctionProviders(UInt32 dwTable, ushort pszContext, UInt32 dwInterface, ushort pszFunction, UInt32* pcbBuffer, _CRYPT_CONTEXT_FUNCTION_PROVIDERS** ppBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptSetContextFunctionProperty(UInt32 dwTable, ushort pszContext, UInt32 dwInterface, ushort pszFunction, ushort pszProperty, UInt32 cbValue, byte pbValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptQueryContextFunctionProperty(UInt32 dwTable, ushort pszContext, UInt32 dwInterface, ushort pszFunction, ushort pszProperty, UInt32* pcbValue, byte* ppbValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptRegisterConfigChangeNotify(void** phEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptUnregisterConfigChangeNotify(void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptResolveProviders(ushort pszContext, UInt32 dwInterface, ushort pszFunction, ushort pszProvider, UInt32 dwMode, UInt32 dwFlags, UInt32* pcbBuffer, _CRYPT_PROVIDER_REFS** ppBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BCryptGetFipsAlgorithmMode(byte* pfEnabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CngGetFipsAlgorithmMode();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptOpenStorageProvider(ulong* phProvider, ushort pszProviderName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptEnumAlgorithms(ulong hProvider, UInt32 dwAlgOperations, UInt32* pdwAlgCount, _NCryptAlgorithmName** ppAlgList, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptIsAlgSupported(ulong hProvider, ushort pszAlgId, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptEnumKeys(ulong hProvider, ushort pszScope, NCryptKeyName** ppKeyName, void** ppEnumState, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptEnumStorageProviders(UInt32* pdwProviderCount, NCryptProviderName** ppProviderList, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptFreeBuffer(void* pvInput);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptOpenKey(ulong hProvider, ulong* phKey, ushort pszKeyName, UInt32 dwLegacyKeySpec, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptCreatePersistedKey(ulong hProvider, ulong* phKey, ushort pszAlgId, ushort pszKeyName, UInt32 dwLegacyKeySpec, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptGetProperty(ulong hObject, ushort pszProperty, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptSetProperty(ulong hObject, ushort pszProperty, byte pbInput, UInt32 cbInput, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptFinalizeKey(ulong hKey, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptEncrypt(ulong hKey, byte pbInput, UInt32 cbInput, void* pPaddingInfo, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptDecrypt(ulong hKey, byte pbInput, UInt32 cbInput, void* pPaddingInfo, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptImportKey(ulong hProvider, ulong hImportKey, ushort pszBlobType, _BCryptBufferDesc* pParameterList, ulong* phKey, byte pbData, UInt32 cbData, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptExportKey(ulong hKey, ulong hExportKey, ushort pszBlobType, _BCryptBufferDesc* pParameterList, byte pbOutput, UInt32 cbOutput, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptSignHash(ulong hKey, void* pPaddingInfo, byte pbHashValue, UInt32 cbHashValue, byte pbSignature, UInt32 cbSignature, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptVerifySignature(ulong hKey, void* pPaddingInfo, byte pbHashValue, UInt32 cbHashValue, byte pbSignature, UInt32 cbSignature, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptDeleteKey(ulong hKey, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptFreeObject(ulong hObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int NCryptIsKeyHandle(ulong hKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptTranslateHandle(ulong* phProvider, ulong* phKey, ulong hLegacyProv, ulong hLegacyKey, UInt32 dwLegacyKeySpec, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptNotifyChangeKey(ulong hProvider, void** phEvent, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptSecretAgreement(ulong hPrivKey, ulong hPubKey, ulong* phAgreedSecret, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptDeriveKey(ulong hSharedSecret, ushort pwszKDF, _BCryptBufferDesc* pParameterList, byte pbDerivedKey, UInt32 cbDerivedKey, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptKeyDerivation(ulong hKey, _BCryptBufferDesc* pParameterList, byte pbDerivedKey, UInt32 cbDerivedKey, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptCreateClaim(ulong hSubjectKey, ulong hAuthorityKey, UInt32 dwClaimType, _BCryptBufferDesc* pParameterList, byte pbClaimBlob, UInt32 cbClaimBlob, UInt32* pcbResult, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NCryptVerifyClaim(ulong hSubjectKey, ulong hAuthorityKey, UInt32 dwClaimType, _BCryptBufferDesc* pParameterList, byte pbClaimBlob, UInt32 cbClaimBlob, _BCryptBufferDesc* pOutput, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptFormatObject(UInt32 dwCertEncodingType, UInt32 dwFormatType, UInt32 dwFormatStrType, void* pFormatStruct, byte lpszStructType, byte* pbEncoded, UInt32 cbEncoded, void* pbFormat, UInt32* pcbFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEncodeObjectEx(UInt32 dwCertEncodingType, byte lpszStructType, void* pvStructInfo, UInt32 dwFlags, _CRYPT_ENCODE_PARA* pEncodePara, void* pvEncoded, UInt32* pcbEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEncodeObject(UInt32 dwCertEncodingType, byte lpszStructType, void* pvStructInfo, byte* pbEncoded, UInt32* pcbEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDecodeObjectEx(UInt32 dwCertEncodingType, byte lpszStructType, byte* pbEncoded, UInt32 cbEncoded, UInt32 dwFlags, _CRYPT_DECODE_PARA* pDecodePara, void* pvStructInfo, UInt32* pcbStructInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDecodeObject(UInt32 dwCertEncodingType, byte lpszStructType, byte* pbEncoded, UInt32 cbEncoded, UInt32 dwFlags, void* pvStructInfo, UInt32* pcbStructInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptInstallOIDFunctionAddress(HINSTANCE__* hModule, UInt32 dwEncodingType, byte pszFuncName, UInt32 cFuncEntry, _CRYPT_OID_FUNC_ENTRY* rgFuncEntry, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CryptInitOIDFunctionSet(byte pszFuncName, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetOIDFunctionAddress(void* hFuncSet, UInt32 dwEncodingType, byte pszOID, UInt32 dwFlags, void** ppvFuncAddr, void** phFuncAddr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetDefaultOIDDllList(void* hFuncSet, UInt32 dwEncodingType, ushort* pwszDllList, UInt32* pcchDllList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetDefaultOIDFunctionAddress(void* hFuncSet, UInt32 dwEncodingType, ushort pwszDll, UInt32 dwFlags, void** ppvFuncAddr, void** phFuncAddr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptFreeOIDFunctionAddress(void* hFuncAddr, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptRegisterOIDFunction(UInt32 dwEncodingType, byte pszFuncName, byte pszOID, ushort pwszDll, byte pszOverrideFuncName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUnregisterOIDFunction(UInt32 dwEncodingType, byte pszFuncName, byte pszOID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptRegisterDefaultOIDFunction(UInt32 dwEncodingType, byte pszFuncName, UInt32 dwIndex, ushort pwszDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUnregisterDefaultOIDFunction(UInt32 dwEncodingType, byte pszFuncName, ushort pwszDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetOIDFunctionValue(UInt32 dwEncodingType, byte pszFuncName, byte pszOID, ushort pwszValueName, UInt32 dwValueType, byte* pbValueData, UInt32 cbValueData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetOIDFunctionValue(UInt32 dwEncodingType, byte pszFuncName, byte pszOID, ushort pwszValueName, UInt32* pdwValueType, byte* pbValueData, UInt32* pcbValueData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEnumOIDFunction(UInt32 dwEncodingType, byte pszFuncName, byte pszOID, UInt32 dwFlags, void* pvArg, Option pfnEnumOIDFunc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CRYPT_OID_INFO* CryptFindOIDInfo(UInt32 dwKeyType, void* pvKey, UInt32 dwGroupId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptRegisterOIDInfo(CRYPT_OID_INFO* pInfo, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUnregisterOIDInfo(CRYPT_OID_INFO* pInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEnumOIDInfo(UInt32 dwGroupId, UInt32 dwFlags, void* pvArg, Option pfnEnumOIDInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort CryptFindLocalizedName(ushort pwszCryptName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CryptMsgOpenToEncode(UInt32 dwMsgEncodingType, UInt32 dwFlags, UInt32 dwMsgType, void* pvMsgEncodeInfo, byte pszInnerContentObjID, _CMSG_STREAM_INFO* pStreamInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CryptMsgCalculateEncodedLength(UInt32 dwMsgEncodingType, UInt32 dwFlags, UInt32 dwMsgType, void* pvMsgEncodeInfo, byte pszInnerContentObjID, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CryptMsgOpenToDecode(UInt32 dwMsgEncodingType, UInt32 dwFlags, UInt32 dwMsgType, ulong hCryptProv, _CERT_INFO* pRecipientInfo, _CMSG_STREAM_INFO* pStreamInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CryptMsgDuplicate(void* hCryptMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgClose(void* hCryptMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgUpdate(void* hCryptMsg, byte* pbData, UInt32 cbData, int fFinal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgGetParam(void* hCryptMsg, UInt32 dwParamType, UInt32 dwIndex, void* pvData, UInt32* pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgControl(void* hCryptMsg, UInt32 dwFlags, UInt32 dwCtrlType, void* pvCtrlPara);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgVerifyCountersignatureEncoded(ulong hCryptProv, UInt32 dwEncodingType, byte pbSignerInfo, UInt32 cbSignerInfo, byte pbSignerInfoCountersignature, UInt32 cbSignerInfoCountersignature, _CERT_INFO* pciCountersigner);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgVerifyCountersignatureEncodedEx(ulong hCryptProv, UInt32 dwEncodingType, byte pbSignerInfo, UInt32 cbSignerInfo, byte pbSignerInfoCountersignature, UInt32 cbSignerInfoCountersignature, UInt32 dwSignerType, void* pvSigner, UInt32 dwFlags, void* pvExtra);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgCountersign(void* hCryptMsg, UInt32 dwIndex, UInt32 cCountersigners, _CMSG_SIGNER_ENCODE_INFO* rgCountersigners);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgCountersignEncoded(UInt32 dwEncodingType, byte pbSignerInfo, UInt32 cbSignerInfo, UInt32 cCountersigners, _CMSG_SIGNER_ENCODE_INFO* rgCountersigners, byte pbCountersignature, UInt32 pcbCountersignature);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CertOpenStore(byte lpszStoreProvider, UInt32 dwEncodingType, ulong hCryptProv, UInt32 dwFlags, void* pvPara);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CertDuplicateStore(void* hCertStore);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSaveStore(void* hCertStore, UInt32 dwEncodingType, UInt32 dwSaveAs, UInt32 dwSaveTo, void* pvSaveToPara, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertCloseStore(void* hCertStore, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CONTEXT* CertGetSubjectCertificateFromStore(void* hCertStore, UInt32 dwCertEncodingType, _CERT_INFO* pCertId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CONTEXT* CertEnumCertificatesInStore(void* hCertStore, CERT_CONTEXT* pPrevCertContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CONTEXT* CertFindCertificateInStore(void* hCertStore, UInt32 dwCertEncodingType, UInt32 dwFindFlags, UInt32 dwFindType, void* pvFindPara, CERT_CONTEXT* pPrevCertContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CONTEXT* CertGetIssuerCertificateFromStore(void* hCertStore, CERT_CONTEXT* pSubjectContext, CERT_CONTEXT* pPrevIssuerContext, UInt32* pdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertVerifySubjectCertificateContext(CERT_CONTEXT* pSubject, CERT_CONTEXT* pIssuer, UInt32* pdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CONTEXT* CertDuplicateCertificateContext(CERT_CONTEXT* pCertContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CONTEXT* CertCreateCertificateContext(UInt32 dwCertEncodingType, byte* pbCertEncoded, UInt32 cbCertEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertFreeCertificateContext(CERT_CONTEXT* pCertContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSetCertificateContextProperty(CERT_CONTEXT* pCertContext, UInt32 dwPropId, UInt32 dwFlags, void* pvData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertGetCertificateContextProperty(CERT_CONTEXT* pCertContext, UInt32 dwPropId, void* pvData, UInt32* pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertEnumCertificateContextProperties(CERT_CONTEXT* pCertContext, UInt32 dwPropId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertCreateCTLEntryFromCertificateContextProperties(CERT_CONTEXT* pCertContext, UInt32 cOptAttr, _CRYPT_ATTRIBUTE* rgOptAttr, UInt32 dwFlags, void* pvReserved, _CTL_ENTRY* pCtlEntry, UInt32* pcbCtlEntry);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSetCertificateContextPropertiesFromCTLEntry(CERT_CONTEXT* pCertContext, _CTL_ENTRY* pCtlEntry, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CRL_CONTEXT* CertGetCRLFromStore(void* hCertStore, CERT_CONTEXT* pIssuerContext, CRL_CONTEXT* pPrevCrlContext, UInt32* pdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CRL_CONTEXT* CertEnumCRLsInStore(void* hCertStore, CRL_CONTEXT* pPrevCrlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CRL_CONTEXT* CertFindCRLInStore(void* hCertStore, UInt32 dwCertEncodingType, UInt32 dwFindFlags, UInt32 dwFindType, void* pvFindPara, CRL_CONTEXT* pPrevCrlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CRL_CONTEXT* CertDuplicateCRLContext(CRL_CONTEXT* pCrlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CRL_CONTEXT* CertCreateCRLContext(UInt32 dwCertEncodingType, byte* pbCrlEncoded, UInt32 cbCrlEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertFreeCRLContext(CRL_CONTEXT* pCrlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSetCRLContextProperty(CRL_CONTEXT* pCrlContext, UInt32 dwPropId, UInt32 dwFlags, void* pvData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertGetCRLContextProperty(CRL_CONTEXT* pCrlContext, UInt32 dwPropId, void* pvData, UInt32* pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertEnumCRLContextProperties(CRL_CONTEXT* pCrlContext, UInt32 dwPropId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertFindCertificateInCRL(CERT_CONTEXT* pCert, CRL_CONTEXT* pCrlContext, UInt32 dwFlags, void* pvReserved, _CRL_ENTRY** ppCrlEntry);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertIsValidCRLForCertificate(CERT_CONTEXT* pCert, CRL_CONTEXT* pCrl, UInt32 dwFlags, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddEncodedCertificateToStore(void* hCertStore, UInt32 dwCertEncodingType, byte* pbCertEncoded, UInt32 cbCertEncoded, UInt32 dwAddDisposition, CERT_CONTEXT** ppCertContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddCertificateContextToStore(void* hCertStore, CERT_CONTEXT* pCertContext, UInt32 dwAddDisposition, CERT_CONTEXT** ppStoreContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddSerializedElementToStore(void* hCertStore, byte* pbElement, UInt32 cbElement, UInt32 dwAddDisposition, UInt32 dwFlags, UInt32 dwContextTypeFlags, UInt32* pdwContextType, void** ppvContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertDeleteCertificateFromStore(CERT_CONTEXT* pCertContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddEncodedCRLToStore(void* hCertStore, UInt32 dwCertEncodingType, byte* pbCrlEncoded, UInt32 cbCrlEncoded, UInt32 dwAddDisposition, CRL_CONTEXT** ppCrlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddCRLContextToStore(void* hCertStore, CRL_CONTEXT* pCrlContext, UInt32 dwAddDisposition, CRL_CONTEXT** ppStoreContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertDeleteCRLFromStore(CRL_CONTEXT* pCrlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSerializeCertificateStoreElement(CERT_CONTEXT* pCertContext, UInt32 dwFlags, byte* pbElement, UInt32* pcbElement);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSerializeCRLStoreElement(CRL_CONTEXT* pCrlContext, UInt32 dwFlags, byte* pbElement, UInt32* pcbElement);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CTL_CONTEXT* CertDuplicateCTLContext(CTL_CONTEXT* pCtlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CTL_CONTEXT* CertCreateCTLContext(UInt32 dwMsgAndCertEncodingType, byte* pbCtlEncoded, UInt32 cbCtlEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertFreeCTLContext(CTL_CONTEXT* pCtlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSetCTLContextProperty(CTL_CONTEXT* pCtlContext, UInt32 dwPropId, UInt32 dwFlags, void* pvData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertGetCTLContextProperty(CTL_CONTEXT* pCtlContext, UInt32 dwPropId, void* pvData, UInt32* pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertEnumCTLContextProperties(CTL_CONTEXT* pCtlContext, UInt32 dwPropId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CTL_CONTEXT* CertEnumCTLsInStore(void* hCertStore, CTL_CONTEXT* pPrevCtlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CTL_ENTRY* CertFindSubjectInCTL(UInt32 dwEncodingType, UInt32 dwSubjectType, void* pvSubject, CTL_CONTEXT* pCtlContext, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CTL_CONTEXT* CertFindCTLInStore(void* hCertStore, UInt32 dwMsgAndCertEncodingType, UInt32 dwFindFlags, UInt32 dwFindType, void* pvFindPara, CTL_CONTEXT* pPrevCtlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddEncodedCTLToStore(void* hCertStore, UInt32 dwMsgAndCertEncodingType, byte* pbCtlEncoded, UInt32 cbCtlEncoded, UInt32 dwAddDisposition, CTL_CONTEXT** ppCtlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddCTLContextToStore(void* hCertStore, CTL_CONTEXT* pCtlContext, UInt32 dwAddDisposition, CTL_CONTEXT** ppStoreContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSerializeCTLStoreElement(CTL_CONTEXT* pCtlContext, UInt32 dwFlags, byte* pbElement, UInt32* pcbElement);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertDeleteCTLFromStore(CTL_CONTEXT* pCtlContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddCertificateLinkToStore(void* hCertStore, CERT_CONTEXT* pCertContext, UInt32 dwAddDisposition, CERT_CONTEXT** ppStoreContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddCRLLinkToStore(void* hCertStore, CRL_CONTEXT* pCrlContext, UInt32 dwAddDisposition, CRL_CONTEXT** ppStoreContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddCTLLinkToStore(void* hCertStore, CTL_CONTEXT* pCtlContext, UInt32 dwAddDisposition, CTL_CONTEXT** ppStoreContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddStoreToCollection(void* hCollectionStore, void* hSiblingStore, UInt32 dwUpdateFlags, UInt32 dwPriority);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CertRemoveStoreFromCollection(void* hCollectionStore, void* hSiblingStore);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertControlStore(void* hCertStore, UInt32 dwFlags, UInt32 dwCtrlType, void* pvCtrlPara);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSetStoreProperty(void* hCertStore, UInt32 dwPropId, UInt32 dwFlags, void* pvData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertGetStoreProperty(void* hCertStore, UInt32 dwPropId, void* pvData, UInt32* pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CertCreateContext(UInt32 dwContextType, UInt32 dwEncodingType, byte* pbEncoded, UInt32 cbEncoded, UInt32 dwFlags, _CERT_CREATE_CONTEXT_PARA* pCreatePara);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertRegisterSystemStore(void* pvSystemStore, UInt32 dwFlags, _CERT_SYSTEM_STORE_INFO* pStoreInfo, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertRegisterPhysicalStore(void* pvSystemStore, UInt32 dwFlags, ushort pwszStoreName, _CERT_PHYSICAL_STORE_INFO* pStoreInfo, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertUnregisterSystemStore(void* pvSystemStore, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertUnregisterPhysicalStore(void* pvSystemStore, UInt32 dwFlags, ushort pwszStoreName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertEnumSystemStoreLocation(UInt32 dwFlags, void* pvArg, Option pfnEnum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertEnumSystemStore(UInt32 dwFlags, void* pvSystemStoreLocationPara, void* pvArg, Option pfnEnum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertEnumPhysicalStore(void* pvSystemStore, UInt32 dwFlags, void* pvArg, Option pfnEnum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertGetEnhancedKeyUsage(CERT_CONTEXT* pCertContext, UInt32 dwFlags, _CTL_USAGE* pUsage, UInt32* pcbUsage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSetEnhancedKeyUsage(CERT_CONTEXT* pCertContext, _CTL_USAGE* pUsage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddEnhancedKeyUsageIdentifier(CERT_CONTEXT* pCertContext, byte pszUsageIdentifier);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertRemoveEnhancedKeyUsageIdentifier(CERT_CONTEXT* pCertContext, byte pszUsageIdentifier);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertGetValidUsages(UInt32 cCerts, CERT_CONTEXT** rghCerts, int* cNumOIDs, byte* rghOIDs, UInt32* pcbOIDs);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgGetAndVerifySigner(void* hCryptMsg, UInt32 cSignerStore, void** rghSignerStore, UInt32 dwFlags, CERT_CONTEXT** ppSigner, UInt32* pdwSignerIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgSignCTL(UInt32 dwMsgEncodingType, byte* pbCtlContent, UInt32 cbCtlContent, _CMSG_SIGNED_ENCODE_INFO* pSignInfo, UInt32 dwFlags, byte* pbEncoded, UInt32* pcbEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptMsgEncodeAndSignCTL(UInt32 dwMsgEncodingType, _CTL_INFO* pCtlInfo, _CMSG_SIGNED_ENCODE_INFO* pSignInfo, UInt32 dwFlags, byte* pbEncoded, UInt32* pcbEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertFindSubjectInSortedCTL(_CRYPTOAPI_BLOB* pSubjectIdentifier, CTL_CONTEXT* pCtlContext, UInt32 dwFlags, void* pvReserved, _CRYPTOAPI_BLOB* pEncodedAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertEnumSubjectInSortedCTL(CTL_CONTEXT* pCtlContext, void** ppvNextSubject, _CRYPTOAPI_BLOB* pSubjectIdentifier, _CRYPTOAPI_BLOB* pEncodedAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertVerifyCTLUsage(UInt32 dwEncodingType, UInt32 dwSubjectType, void* pvSubject, _CTL_USAGE* pSubjectUsage, UInt32 dwFlags, _CTL_VERIFY_USAGE_PARA* pVerifyUsagePara, _CTL_VERIFY_USAGE_STATUS* pVerifyUsageStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertVerifyRevocation(UInt32 dwEncodingType, UInt32 dwRevType, UInt32 cContext, void** rgpvContext, UInt32 dwFlags, _CERT_REVOCATION_PARA* pRevPara, _CERT_REVOCATION_STATUS* pRevStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertCompareIntegerBlob(_CRYPTOAPI_BLOB* pInt1, _CRYPTOAPI_BLOB* pInt2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertCompareCertificate(UInt32 dwCertEncodingType, _CERT_INFO* pCertId1, _CERT_INFO* pCertId2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertCompareCertificateName(UInt32 dwCertEncodingType, _CRYPTOAPI_BLOB* pCertName1, _CRYPTOAPI_BLOB* pCertName2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertIsRDNAttrsInCertificateName(UInt32 dwCertEncodingType, UInt32 dwFlags, _CRYPTOAPI_BLOB* pCertName, _CERT_RDN* pRDN);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertComparePublicKeyInfo(UInt32 dwCertEncodingType, _CERT_PUBLIC_KEY_INFO* pPublicKey1, _CERT_PUBLIC_KEY_INFO* pPublicKey2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertGetPublicKeyLength(UInt32 dwCertEncodingType, _CERT_PUBLIC_KEY_INFO* pPublicKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifyCertificateSignature(ulong hCryptProv, UInt32 dwCertEncodingType, byte* pbEncoded, UInt32 cbEncoded, _CERT_PUBLIC_KEY_INFO* pPublicKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifyCertificateSignatureEx(ulong hCryptProv, UInt32 dwCertEncodingType, UInt32 dwSubjectType, void* pvSubject, UInt32 dwIssuerType, void* pvIssuer, UInt32 dwFlags, void* pvExtra);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertIsStrongHashToSign(CERT_STRONG_SIGN_PARA* pStrongSignPara, ushort pwszCNGHashAlgid, CERT_CONTEXT* pSigningCert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptHashToBeSigned(ulong hCryptProv, UInt32 dwCertEncodingType, byte* pbEncoded, UInt32 cbEncoded, byte* pbComputedHash, UInt32* pcbComputedHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptHashCertificate(ulong hCryptProv, uint Algid, UInt32 dwFlags, byte* pbEncoded, UInt32 cbEncoded, byte* pbComputedHash, UInt32* pcbComputedHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptHashCertificate2(ushort pwszCNGHashAlgid, UInt32 dwFlags, void* pvReserved, byte* pbEncoded, UInt32 cbEncoded, byte* pbComputedHash, UInt32* pcbComputedHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSignCertificate(ulong hCryptProvOrNCryptKey, UInt32 dwKeySpec, UInt32 dwCertEncodingType, byte* pbEncodedToBeSigned, UInt32 cbEncodedToBeSigned, _CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, void* pvHashAuxInfo, byte* pbSignature, UInt32* pcbSignature);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSignAndEncodeCertificate(ulong hCryptProvOrNCryptKey, UInt32 dwKeySpec, UInt32 dwCertEncodingType, byte lpszStructType, void* pvStructInfo, _CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, void* pvHashAuxInfo, byte* pbEncoded, UInt32* pcbEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CertVerifyTimeValidity(_FILETIME* pTimeToVerify, _CERT_INFO* pCertInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CertVerifyCRLTimeValidity(_FILETIME* pTimeToVerify, _CRL_INFO* pCrlInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertVerifyValidityNesting(_CERT_INFO* pSubjectInfo, _CERT_INFO* pIssuerInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertVerifyCRLRevocation(UInt32 dwCertEncodingType, _CERT_INFO* pCertId, UInt32 cCrlInfo, _CRL_INFO** rgpCrlInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte CertAlgIdToOID(UInt32 dwAlgId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertOIDToAlgId(byte pszObjId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CERT_EXTENSION* CertFindExtension(byte pszObjId, UInt32 cExtensions, _CERT_EXTENSION* rgExtensions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CRYPT_ATTRIBUTE* CertFindAttribute(byte pszObjId, UInt32 cAttr, _CRYPT_ATTRIBUTE* rgAttr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CERT_RDN_ATTR* CertFindRDNAttr(byte pszObjId, _CERT_NAME_INFO* pName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertGetIntendedKeyUsage(UInt32 dwCertEncodingType, _CERT_INFO* pCertInfo, byte* pbKeyUsage, UInt32 cbKeyUsage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptInstallDefaultContext(ulong hCryptProv, UInt32 dwDefaultType, void* pvDefaultPara, UInt32 dwFlags, void* pvReserved, void** phDefaultContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUninstallDefaultContext(void* hDefaultContext, UInt32 dwFlags, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptExportPublicKeyInfo(ulong hCryptProvOrNCryptKey, UInt32 dwKeySpec, UInt32 dwCertEncodingType, _CERT_PUBLIC_KEY_INFO* pInfo, UInt32* pcbInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptExportPublicKeyInfoEx(ulong hCryptProvOrNCryptKey, UInt32 dwKeySpec, UInt32 dwCertEncodingType, byte pszPublicKeyObjId, UInt32 dwFlags, void* pvAuxInfo, _CERT_PUBLIC_KEY_INFO* pInfo, UInt32* pcbInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptExportPublicKeyInfoFromBCryptKeyHandle(void* hBCryptKey, UInt32 dwCertEncodingType, byte pszPublicKeyObjId, UInt32 dwFlags, void* pvAuxInfo, _CERT_PUBLIC_KEY_INFO* pInfo, UInt32* pcbInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptImportPublicKeyInfo(ulong hCryptProv, UInt32 dwCertEncodingType, _CERT_PUBLIC_KEY_INFO* pInfo, ulong* phKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptImportPublicKeyInfoEx(ulong hCryptProv, UInt32 dwCertEncodingType, _CERT_PUBLIC_KEY_INFO* pInfo, uint aiKeyAlg, UInt32 dwFlags, void* pvAuxInfo, ulong* phKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptImportPublicKeyInfoEx2(UInt32 dwCertEncodingType, _CERT_PUBLIC_KEY_INFO* pInfo, UInt32 dwFlags, void* pvAuxInfo, void** phKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptAcquireCertificatePrivateKey(CERT_CONTEXT* pCert, UInt32 dwFlags, void* pvParameters, ulong* phCryptProvOrNCryptKey, UInt32* pdwKeySpec, int* pfCallerFreeProvOrNCryptKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptFindCertificateKeyProvInfo(CERT_CONTEXT* pCert, UInt32 dwFlags, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptImportPKCS8(_CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams, UInt32 dwFlags, ulong* phCryptProv, void* pvAuxInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptExportPKCS8(ulong hCryptProv, UInt32 dwKeySpec, byte pszPrivateKeyObjId, UInt32 dwFlags, void* pvAuxInfo, byte* pbPrivateKeyBlob, UInt32* pcbPrivateKeyBlob);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptExportPKCS8Ex(_CRYPT_PKCS8_EXPORT_PARAMS* psExportParams, UInt32 dwFlags, void* pvAuxInfo, byte* pbPrivateKeyBlob, UInt32* pcbPrivateKeyBlob);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptHashPublicKeyInfo(ulong hCryptProv, uint Algid, UInt32 dwFlags, UInt32 dwCertEncodingType, _CERT_PUBLIC_KEY_INFO* pInfo, byte* pbComputedHash, UInt32* pcbComputedHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertRDNValueToStrA(UInt32 dwValueType, _CRYPTOAPI_BLOB* pValue, byte psz, UInt32 csz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertRDNValueToStrW(UInt32 dwValueType, _CRYPTOAPI_BLOB* pValue, ushort psz, UInt32 csz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertNameToStrA(UInt32 dwCertEncodingType, _CRYPTOAPI_BLOB* pName, UInt32 dwStrType, byte psz, UInt32 csz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertNameToStrW(UInt32 dwCertEncodingType, _CRYPTOAPI_BLOB* pName, UInt32 dwStrType, ushort psz, UInt32 csz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertStrToNameA(UInt32 dwCertEncodingType, byte pszX500, UInt32 dwStrType, void* pvReserved, byte* pbEncoded, UInt32* pcbEncoded, byte* ppszError);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertStrToNameW(UInt32 dwCertEncodingType, ushort pszX500, UInt32 dwStrType, void* pvReserved, byte* pbEncoded, UInt32* pcbEncoded, ushort* ppszError);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertGetNameStringA(CERT_CONTEXT* pCertContext, UInt32 dwType, UInt32 dwFlags, void* pvTypePara, byte pszNameString, UInt32 cchNameString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CertGetNameStringW(CERT_CONTEXT* pCertContext, UInt32 dwType, UInt32 dwFlags, void* pvTypePara, ushort pszNameString, UInt32 cchNameString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSignMessage(_CRYPT_SIGN_MESSAGE_PARA* pSignPara, int fDetachedSignature, UInt32 cToBeSigned, byte** rgpbToBeSigned, UInt32* rgcbToBeSigned, byte* pbSignedBlob, UInt32* pcbSignedBlob);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifyMessageSignature(_CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, UInt32 dwSignerIndex, byte* pbSignedBlob, UInt32 cbSignedBlob, byte* pbDecoded, UInt32* pcbDecoded, CERT_CONTEXT** ppSignerCert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CryptGetMessageSignerCount(UInt32 dwMsgEncodingType, byte* pbSignedBlob, UInt32 cbSignedBlob);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CryptGetMessageCertificates(UInt32 dwMsgAndCertEncodingType, ulong hCryptProv, UInt32 dwFlags, byte* pbSignedBlob, UInt32 cbSignedBlob);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifyDetachedMessageSignature(_CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, UInt32 dwSignerIndex, byte* pbDetachedSignBlob, UInt32 cbDetachedSignBlob, UInt32 cToBeSigned, byte** rgpbToBeSigned, UInt32* rgcbToBeSigned, CERT_CONTEXT** ppSignerCert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEncryptMessage(_CRYPT_ENCRYPT_MESSAGE_PARA* pEncryptPara, UInt32 cRecipientCert, CERT_CONTEXT** rgpRecipientCert, byte* pbToBeEncrypted, UInt32 cbToBeEncrypted, byte* pbEncryptedBlob, UInt32* pcbEncryptedBlob);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDecryptMessage(_CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, byte* pbEncryptedBlob, UInt32 cbEncryptedBlob, byte* pbDecrypted, UInt32* pcbDecrypted, CERT_CONTEXT** ppXchgCert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSignAndEncryptMessage(_CRYPT_SIGN_MESSAGE_PARA* pSignPara, _CRYPT_ENCRYPT_MESSAGE_PARA* pEncryptPara, UInt32 cRecipientCert, CERT_CONTEXT** rgpRecipientCert, byte* pbToBeSignedAndEncrypted, UInt32 cbToBeSignedAndEncrypted, byte* pbSignedAndEncryptedBlob, UInt32* pcbSignedAndEncryptedBlob);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDecryptAndVerifyMessageSignature(_CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, _CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, UInt32 dwSignerIndex, byte* pbEncryptedBlob, UInt32 cbEncryptedBlob, byte* pbDecrypted, UInt32* pcbDecrypted, CERT_CONTEXT** ppXchgCert, CERT_CONTEXT** ppSignerCert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptDecodeMessage(UInt32 dwMsgTypeFlags, _CRYPT_DECRYPT_MESSAGE_PARA* pDecryptPara, _CRYPT_VERIFY_MESSAGE_PARA* pVerifyPara, UInt32 dwSignerIndex, byte* pbEncodedBlob, UInt32 cbEncodedBlob, UInt32 dwPrevInnerContentType, UInt32* pdwMsgType, UInt32* pdwInnerContentType, byte* pbDecoded, UInt32* pcbDecoded, CERT_CONTEXT** ppXchgCert, CERT_CONTEXT** ppSignerCert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptHashMessage(_CRYPT_HASH_MESSAGE_PARA* pHashPara, int fDetachedHash, UInt32 cToBeHashed, byte** rgpbToBeHashed, UInt32* rgcbToBeHashed, byte* pbHashedBlob, UInt32* pcbHashedBlob, byte* pbComputedHash, UInt32* pcbComputedHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifyMessageHash(_CRYPT_HASH_MESSAGE_PARA* pHashPara, byte* pbHashedBlob, UInt32 cbHashedBlob, byte* pbToBeHashed, UInt32* pcbToBeHashed, byte* pbComputedHash, UInt32* pcbComputedHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifyDetachedMessageHash(_CRYPT_HASH_MESSAGE_PARA* pHashPara, byte* pbDetachedHashBlob, UInt32 cbDetachedHashBlob, UInt32 cToBeHashed, byte** rgpbToBeHashed, UInt32* rgcbToBeHashed, byte* pbComputedHash, UInt32* pcbComputedHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSignMessageWithKey(_CRYPT_KEY_SIGN_MESSAGE_PARA* pSignPara, byte* pbToBeSigned, UInt32 cbToBeSigned, byte* pbSignedBlob, UInt32* pcbSignedBlob);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifyMessageSignatureWithKey(_CRYPT_KEY_VERIFY_MESSAGE_PARA* pVerifyPara, _CERT_PUBLIC_KEY_INFO* pPublicKeyInfo, byte* pbSignedBlob, UInt32 cbSignedBlob, byte* pbDecoded, UInt32* pcbDecoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CertOpenSystemStoreA(ulong hProv, byte szSubsystemProtocol);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CertOpenSystemStoreW(ulong hProv, ushort szSubsystemProtocol);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddEncodedCertificateToSystemStoreA(byte szCertStoreName, byte* pbCertEncoded, UInt32 cbCertEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertAddEncodedCertificateToSystemStoreW(ushort szCertStoreName, byte* pbCertEncoded, UInt32 cbCertEncoded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 FindCertsByIssuer(_CERT_CHAIN* pCertChains, UInt32* pcbCertChains, UInt32* pcCertChains, byte* pbEncodedIssuerName, UInt32 cbEncodedIssuerName, ushort pwszPurpose, UInt32 dwKeySpec);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptQueryObject(UInt32 dwObjectType, void* pvObject, UInt32 dwExpectedContentTypeFlags, UInt32 dwExpectedFormatTypeFlags, UInt32 dwFlags, UInt32* pdwMsgAndCertEncodingType, UInt32* pdwContentType, UInt32* pdwFormatType, void** phCertStore, void** phMsg, void** ppvContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CryptMemAlloc(UInt32 cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CryptMemRealloc(void* pv, UInt32 cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CryptMemFree(void* pv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptCreateAsyncHandle(UInt32 dwFlags, void* phAsync);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetAsyncParam(void* hAsync, byte pszParamOid, void* pvParam, Option pfnFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetAsyncParam(void* hAsync, byte pszParamOid, void** ppvParam, Option* ppfnFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptCloseAsyncHandle(void* hAsync);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptRetrieveObjectByUrlA(byte pszUrl, byte pszObjectOid, UInt32 dwRetrievalFlags, UInt32 dwTimeout, void** ppvObject, void* hAsyncRetrieve, _CRYPT_CREDENTIALS* pCredentials, void* pvVerify, _CRYPT_RETRIEVE_AUX_INFO* pAuxInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptRetrieveObjectByUrlW(ushort pszUrl, byte pszObjectOid, UInt32 dwRetrievalFlags, UInt32 dwTimeout, void** ppvObject, void* hAsyncRetrieve, _CRYPT_CREDENTIALS* pCredentials, void* pvVerify, _CRYPT_RETRIEVE_AUX_INFO* pAuxInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptInstallCancelRetrieval(Option pfnCancel, void* pvArg, UInt32 dwFlags, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUninstallCancelRetrieval(UInt32 dwFlags, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptCancelAsyncRetrieval(void* hAsyncRetrieval);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetObjectUrl(byte pszUrlOid, void* pvPara, UInt32 dwFlags, _CRYPT_URL_ARRAY* pUrlArray, UInt32* pcbUrlArray, _CRYPT_URL_INFO* pUrlInfo, UInt32* pcbUrlInfo, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetTimeValidObject(byte pszTimeValidOid, void* pvPara, CERT_CONTEXT* pIssuer, _FILETIME* pftValidFor, UInt32 dwFlags, UInt32 dwTimeout, void** ppvObject, _CRYPT_CREDENTIALS* pCredentials, _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO* pExtraInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptFlushTimeValidObject(byte pszFlushTimeValidOid, void* pvPara, CERT_CONTEXT* pIssuer, UInt32 dwFlags, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CONTEXT* CertCreateSelfSignCertificate(ulong hCryptProvOrNCryptKey, _CRYPTOAPI_BLOB* pSubjectIssuerBlob, UInt32 dwFlags, _CRYPT_KEY_PROV_INFO* pKeyProvInfo, _CRYPT_ALGORITHM_IDENTIFIER* pSignatureAlgorithm, _SYSTEMTIME* pStartTime, _SYSTEMTIME* pEndTime, _CERT_EXTENSIONS* pExtensions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptGetKeyIdentifierProperty(_CRYPTOAPI_BLOB* pKeyIdentifier, UInt32 dwPropId, UInt32 dwFlags, ushort pwszComputerName, void* pvReserved, void* pvData, UInt32* pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptSetKeyIdentifierProperty(_CRYPTOAPI_BLOB* pKeyIdentifier, UInt32 dwPropId, UInt32 dwFlags, ushort pwszComputerName, void* pvReserved, void* pvData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptEnumKeyIdentifierProperties(_CRYPTOAPI_BLOB* pKeyIdentifier, UInt32 dwPropId, UInt32 dwFlags, ushort pwszComputerName, void* pvReserved, void* pvArg, Option pfnEnum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptCreateKeyIdentifierFromCSP(UInt32 dwCertEncodingType, byte pszPubKeyOID, _PUBLICKEYSTRUC* pPubKeyStruc, UInt32 cbPubKeyStruc, UInt32 dwFlags, void* pvReserved, byte* pbHash, UInt32* pcbHash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertCreateCertificateChainEngine(_CERT_CHAIN_ENGINE_CONFIG* pConfig, void** phChainEngine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CertFreeCertificateChainEngine(void* hChainEngine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertResyncCertificateChainEngine(void* hChainEngine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertGetCertificateChain(void* hChainEngine, CERT_CONTEXT* pCertContext, _FILETIME* pTime, void* hAdditionalStore, _CERT_CHAIN_PARA* pChainPara, UInt32 dwFlags, void* pvReserved, CERT_CHAIN_CONTEXT** ppChainContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CertFreeCertificateChain(CERT_CHAIN_CONTEXT* pChainContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CHAIN_CONTEXT* CertDuplicateCertificateChain(CERT_CHAIN_CONTEXT* pChainContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_CHAIN_CONTEXT* CertFindChainInStore(void* hCertStore, UInt32 dwCertEncodingType, UInt32 dwFindFlags, UInt32 dwFindType, void* pvFindPara, CERT_CHAIN_CONTEXT* pPrevChainContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertVerifyCertificateChainPolicy(byte pszPolicyOID, CERT_CHAIN_CONTEXT* pChainContext, _CERT_CHAIN_POLICY_PARA* pPolicyPara, _CERT_CHAIN_POLICY_STATUS* pPolicyStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptStringToBinaryA(byte pszString, UInt32 cchString, UInt32 dwFlags, byte* pbBinary, UInt32* pcbBinary, UInt32* pdwSkip, UInt32* pdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptStringToBinaryW(ushort pszString, UInt32 cchString, UInt32 dwFlags, byte* pbBinary, UInt32* pcbBinary, UInt32* pdwSkip, UInt32* pdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptBinaryToStringA(byte* pbBinary, UInt32 cbBinary, UInt32 dwFlags, byte pszString, UInt32* pcchString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptBinaryToStringW(byte* pbBinary, UInt32 cbBinary, UInt32 dwFlags, ushort pszString, UInt32* pcchString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* PFXImportCertStore(_CRYPTOAPI_BLOB* pPFX, ushort szPassword, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PFXIsPFXBlob(_CRYPTOAPI_BLOB* pPFX);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PFXVerifyPassword(_CRYPTOAPI_BLOB* pPFX, ushort szPassword, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PFXExportCertStoreEx(void* hStore, _CRYPTOAPI_BLOB* pPFX, ushort szPassword, void* pvPara, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PFXExportCertStore(void* hStore, _CRYPTOAPI_BLOB* pPFX, ushort szPassword, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CertOpenServerOcspResponse(CERT_CHAIN_CONTEXT* pChainContext, UInt32 dwFlags, _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA* pOpenPara);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CertAddRefServerOcspResponse(void* hServerOcspResponse);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CertCloseServerOcspResponse(void* hServerOcspResponse, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern CERT_SERVER_OCSP_RESPONSE_CONTEXT* CertGetServerOcspResponseContext(void* hServerOcspResponse, UInt32 dwFlags, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CertAddRefServerOcspResponseContext(CERT_SERVER_OCSP_RESPONSE_CONTEXT* pServerOcspResponseContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CertFreeServerOcspResponseContext(CERT_SERVER_OCSP_RESPONSE_CONTEXT* pServerOcspResponseContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertRetrieveLogoOrBiometricInfo(CERT_CONTEXT* pCertContext, byte lpszLogoOrBiometricType, UInt32 dwRetrievalFlags, UInt32 dwTimeout, UInt32 dwFlags, void* pvReserved, byte** ppbData, UInt32* pcbData, ushort* ppwszMimeType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertSelectCertificateChains(_GUID pSelectionContext, UInt32 dwFlags, CERT_SELECT_CHAIN_PARA* pChainParameters, UInt32 cCriteria, CERT_SELECT_CRITERIA* rgpCriteria, void* hStore, UInt32 pcSelection, CERT_CHAIN_CONTEXT*** pprgpSelection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CertFreeCertificateChainList(CERT_CHAIN_CONTEXT** prgpSelection);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptRetrieveTimeStamp(ushort wszUrl, UInt32 dwRetrievalFlags, UInt32 dwTimeout, byte pszHashId, _CRYPT_TIMESTAMP_PARA* pPara, byte* pbData, UInt32 cbData, _CRYPT_TIMESTAMP_CONTEXT** ppTsContext, CERT_CONTEXT** ppTsSigner, void** phStore);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptVerifyTimeStampSignature(byte* pbTSContentInfo, UInt32 cbTSContentInfo, byte* pbData, UInt32 cbData, void* hAdditionalStore, _CRYPT_TIMESTAMP_CONTEXT** ppTsContext, CERT_CONTEXT** ppTsSigner, void** phStore);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CertIsWeakHash(UInt32 dwHashUseType, ushort pwszCNGHashAlgid, UInt32 dwChainFlags, CERT_CHAIN_CONTEXT* pSignerChainContext, _FILETIME* pTimeStamp, ushort pwszFileName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptProtectData(_CRYPTOAPI_BLOB* pDataIn, ushort szDataDescr, _CRYPTOAPI_BLOB* pOptionalEntropy, void* pvReserved, _CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, UInt32 dwFlags, _CRYPTOAPI_BLOB* pDataOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUnprotectData(_CRYPTOAPI_BLOB* pDataIn, ushort* ppszDataDescr, _CRYPTOAPI_BLOB* pOptionalEntropy, void* pvReserved, _CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, UInt32 dwFlags, _CRYPTOAPI_BLOB* pDataOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptProtectDataNoUI(_CRYPTOAPI_BLOB* pDataIn, ushort szDataDescr, _CRYPTOAPI_BLOB* pOptionalEntropy, void* pvReserved, _CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, UInt32 dwFlags, byte* pbOptionalPassword, UInt32 cbOptionalPassword, _CRYPTOAPI_BLOB* pDataOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUnprotectDataNoUI(_CRYPTOAPI_BLOB* pDataIn, ushort* ppszDataDescr, _CRYPTOAPI_BLOB* pOptionalEntropy, void* pvReserved, _CRYPTPROTECT_PROMPTSTRUCT* pPromptStruct, UInt32 dwFlags, byte* pbOptionalPassword, UInt32 cbOptionalPassword, _CRYPTOAPI_BLOB* pDataOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUpdateProtectedState(void* pOldSid, ushort pwszOldPassword, UInt32 dwFlags, UInt32* pdwSuccessCount, UInt32* pdwFailureCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptProtectMemory(void* pDataIn, UInt32 cbDataIn, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CryptUnprotectMemory(void* pDataIn, UInt32 cbDataIn, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 QueryUsersOnEncryptedFile(ushort lpFileName, _ENCRYPTION_CERTIFICATE_HASH_LIST** pUsers);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 QueryRecoveryAgentsOnEncryptedFile(ushort lpFileName, _ENCRYPTION_CERTIFICATE_HASH_LIST** pRecoveryAgents);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 RemoveUsersFromEncryptedFile(ushort lpFileName, _ENCRYPTION_CERTIFICATE_HASH_LIST* pHashes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 AddUsersToEncryptedFile(ushort lpFileName, _ENCRYPTION_CERTIFICATE_LIST* pEncryptionCertificates);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetUserFileEncryptionKey(_ENCRYPTION_CERTIFICATE* pEncryptionCertificate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetUserFileEncryptionKeyEx(_ENCRYPTION_CERTIFICATE* pEncryptionCertificate, UInt32 dwCapabilities, UInt32 dwFlags, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreeEncryptionCertificateHashList(_ENCRYPTION_CERTIFICATE_HASH_LIST* pUsers);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EncryptionDisable(ushort DirPath, int Disable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DuplicateEncryptionInfoFile(ushort SrcFileName, ushort DstFileName, UInt32 dwCreationDistribution, UInt32 dwAttributes, _SECURITY_ATTRIBUTES* lpSecurityAttributes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetEncryptedFileMetadata(ushort lpFileName, UInt32 pcbMetadata, byte* ppbMetadata);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetEncryptedFileMetadata(ushort lpFileName, byte pbOldMetadata, byte pbNewMetadata, _ENCRYPTION_CERTIFICATE_HASH* pOwnerHash, UInt32 dwOperation, _ENCRYPTION_CERTIFICATE_HASH_LIST* pCertificatesAdded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreeEncryptedFileMetadata(byte pbMetadata);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcNsGetBuffer(_RPC_MESSAGE* Message);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcNsSendReceive(_RPC_MESSAGE* Message, I_RPC_HANDLE* Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcNsRaiseException(_RPC_MESSAGE* Message, Int32 Status);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_RpcReBindBuffer(_RPC_MESSAGE* Message);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_NsServerBindSearch();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 I_NsClientBindSearch();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_NsClientBindDone();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* MIDL_user_allocate(UIntPtr size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void MIDL_user_free(void* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* I_RpcDefaultAllocate(I_RPC_HANDLE bh, UIntPtr size, Option RealAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void I_RpcDefaultFree(I_RPC_HANDLE bh, void* arg1, Option RealFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern I_RPC_HANDLE NDRCContextBinding(void* CContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NDRCContextMarshall(void* CContext, void* pBuff);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NDRCContextUnmarshall(void** pCContext, I_RPC_HANDLE hBinding, void* pBuff, UInt32 DataRepresentation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NDRCContextUnmarshall2(void** pCContext, I_RPC_HANDLE hBinding, void* pBuff, UInt32 DataRepresentation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NDRSContextMarshall(_bindgen_ty_2* CContext, void* pBuff, Option userRunDownIn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _bindgen_ty_2* NDRSContextUnmarshall(void* pBuff, UInt32 DataRepresentation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NDRSContextMarshallEx(I_RPC_HANDLE BindingHandle, _bindgen_ty_2* CContext, void* pBuff, Option userRunDownIn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NDRSContextMarshall2(I_RPC_HANDLE BindingHandle, _bindgen_ty_2* CContext, void* pBuff, Option userRunDownIn, void* CtxGuard, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _bindgen_ty_2* NDRSContextUnmarshallEx(I_RPC_HANDLE BindingHandle, void* pBuff, UInt32 DataRepresentation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _bindgen_ty_2* NDRSContextUnmarshall2(I_RPC_HANDLE BindingHandle, void* pBuff, UInt32 DataRepresentation, void* CtxGuard, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcSsDestroyClientContext(void** ContextHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcCsGetTags(I_RPC_HANDLE hBinding, int fServerSide, UInt32* pulSendingTag, UInt32* pulDesiredReceivingTag, UInt32* pulReceivingTag, UInt32* pStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrClientGetSupportedSyntaxes(_RPC_CLIENT_INTERFACE* pInf, UInt32* pCount, _MIDL_SYNTAX_INFO** pArr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrServerGetSupportedSyntaxes(_RPC_SERVER_INTERFACE* pInf, UInt32* pCount, _MIDL_SYNTAX_INFO** pArr, UInt32* pPreferSyntaxIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrSimpleTypeMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte FormatChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrPointerMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrCsArrayMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrCsTagMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrSimpleStructMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantStructMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantVaryingStructMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrComplexStructMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrFixedArrayMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantArrayMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantVaryingArrayMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrVaryingArrayMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrComplexArrayMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrNonConformantStringMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantStringMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrEncapsulatedUnionMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrNonEncapsulatedUnionMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrByteCountPointerMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrXmitOrRepAsMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrUserMarshalMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrInterfacePointerMarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrClientContextMarshall(_MIDL_STUB_MESSAGE* pStubMsg, void* ContextHandle, int fCheck);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerContextMarshall(_MIDL_STUB_MESSAGE* pStubMsg, _bindgen_ty_2* ContextHandle, Option RundownRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerContextNewMarshall(_MIDL_STUB_MESSAGE* pStubMsg, _bindgen_ty_2* ContextHandle, Option RundownRoutine, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrSimpleTypeUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte FormatChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrCsArrayUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrCsTagUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrRangeUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrCorrelationInitialize(_MIDL_STUB_MESSAGE* pStubMsg, void* pMemory, UInt32 CacheSize, UInt32 flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrCorrelationPass(_MIDL_STUB_MESSAGE* pStubMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrCorrelationFree(_MIDL_STUB_MESSAGE* pStubMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrPointerUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrSimpleStructUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantStructUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantVaryingStructUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrComplexStructUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrFixedArrayUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantArrayUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantVaryingArrayUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrVaryingArrayUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrComplexArrayUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrNonConformantStringUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrConformantStringUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrEncapsulatedUnionUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrNonEncapsulatedUnionUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrByteCountPointerUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrXmitOrRepAsUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrUserMarshalUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrInterfacePointerUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte** ppMemory, byte* pFormat, byte fMustAlloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrClientContextUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, void** pContextHandle, I_RPC_HANDLE BindHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _bindgen_ty_2* NdrServerContextUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _bindgen_ty_2* NdrContextHandleInitialize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _bindgen_ty_2* NdrServerContextNewUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrPointerBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrCsArrayBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrCsTagBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrSimpleStructBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantStructBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantVaryingStructBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrComplexStructBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrFixedArrayBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantArrayBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantVaryingArrayBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrVaryingArrayBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrComplexArrayBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantStringBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrNonConformantStringBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrEncapsulatedUnionBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrNonEncapsulatedUnionBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrByteCountPointerBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrXmitOrRepAsBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrUserMarshalBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrInterfacePointerBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrContextHandleSize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrPointerMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrContextHandleMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrCsArrayMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrCsTagMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrSimpleStructMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrConformantStructMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrConformantVaryingStructMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrComplexStructMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrFixedArrayMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrConformantArrayMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrConformantVaryingArrayMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrVaryingArrayMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrComplexArrayMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrConformantStringMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrNonConformantStringMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrEncapsulatedUnionMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrNonEncapsulatedUnionMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrXmitOrRepAsMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrUserMarshalMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NdrInterfacePointerMemorySize(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrPointerFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrCsArrayFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrSimpleStructFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantStructFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantVaryingStructFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrComplexStructFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrFixedArrayFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantArrayFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConformantVaryingArrayFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrVaryingArrayFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrComplexArrayFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrEncapsulatedUnionFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrNonEncapsulatedUnionFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrByteCountPointerFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrXmitOrRepAsFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrUserMarshalFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrInterfacePointerFree(_MIDL_STUB_MESSAGE* pStubMsg, byte* pMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConvert2(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat, Int32 NumberParams);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrConvert(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrUserMarshalSimpleTypeConvert(UInt32* pFlags, byte* pBuffer, byte FormatChar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrClientInitializeNew(_RPC_MESSAGE* pRpcMsg, _MIDL_STUB_MESSAGE* pStubMsg, MIDL_STUB_DESC* pStubDescriptor, uint ProcNum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrServerInitializeNew(_RPC_MESSAGE* pRpcMsg, _MIDL_STUB_MESSAGE* pStubMsg, MIDL_STUB_DESC* pStubDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerInitializePartial(_RPC_MESSAGE* pRpcMsg, _MIDL_STUB_MESSAGE* pStubMsg, MIDL_STUB_DESC* pStubDescriptor, UInt32 RequestedBufferSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrClientInitialize(_RPC_MESSAGE* pRpcMsg, _MIDL_STUB_MESSAGE* pStubMsg, MIDL_STUB_DESC* pStubDescriptor, uint ProcNum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrServerInitialize(_RPC_MESSAGE* pRpcMsg, _MIDL_STUB_MESSAGE* pStubMsg, MIDL_STUB_DESC* pStubDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrServerInitializeUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, MIDL_STUB_DESC* pStubDescriptor, _RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerInitializeMarshall(_RPC_MESSAGE* pRpcMsg, _MIDL_STUB_MESSAGE* pStubMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrGetBuffer(_MIDL_STUB_MESSAGE* pStubMsg, UInt32 BufferLength, I_RPC_HANDLE Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrNsGetBuffer(_MIDL_STUB_MESSAGE* pStubMsg, UInt32 BufferLength, I_RPC_HANDLE Handle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrSendReceive(_MIDL_STUB_MESSAGE* pStubMsg, byte* pBufferEnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* NdrNsSendReceive(_MIDL_STUB_MESSAGE* pStubMsg, byte* pBufferEnd, I_RPC_HANDLE* pAutoHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrFreeBuffer(_MIDL_STUB_MESSAGE* pStubMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrGetDcomProtocolVersion(_MIDL_STUB_MESSAGE* pStubMsg, _RPC_VERSION* pVersion);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CLIENT_CALL_RETURN NdrClientCall2(MIDL_STUB_DESC* pStubDescriptor, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CLIENT_CALL_RETURN NdrClientCall(MIDL_STUB_DESC* pStubDescriptor, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CLIENT_CALL_RETURN NdrAsyncClientCall(MIDL_STUB_DESC* pStubDescriptor, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CLIENT_CALL_RETURN NdrDcomAsyncClientCall(MIDL_STUB_DESC* pStubDescriptor, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrAsyncServerCall(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrAsyncStubCall(IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, _RPC_MESSAGE* pRpcMsg, UInt32* pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrDcomAsyncStubCall(IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, _RPC_MESSAGE* pRpcMsg, UInt32* pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrStubCall2(void* pThis, void* pChannel, _RPC_MESSAGE* pRpcMsg, UInt32* pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerCall2(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrStubCall(void* pThis, void* pChannel, _RPC_MESSAGE* pRpcMsg, UInt32* pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerCall(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int NdrServerUnmarshall(void* pChannel, _RPC_MESSAGE* pRpcMsg, _MIDL_STUB_MESSAGE* pStubMsg, MIDL_STUB_DESC* pStubDescriptor, byte* pFormat, void* pParamList);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerMarshall(void* pThis, void* pChannel, _MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrMapCommAndFaultStatus(_MIDL_STUB_MESSAGE* pStubMsg, UInt32* pCommStatus, UInt32* pFaultStatus, Int32 Status);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RpcSsAllocate(UIntPtr Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcSsDisableAllocate();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcSsEnableAllocate();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcSsFree(void* NodeToFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RpcSsGetThreadHandle();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcSsSetClientAllocFree(Option ClientAlloc, Option ClientFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcSsSetThreadHandle(void* Id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcSsSwapClientAllocFree(Option ClientAlloc, Option ClientFree, Option* OldClientAlloc, Option* OldClientFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RpcSmAllocate(UIntPtr Size, Int32* pStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSmClientFree(void* pNodeToFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSmDestroyClientContext(void** ContextHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSmDisableAllocate();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSmEnableAllocate();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSmFree(void* NodeToFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* RpcSmGetThreadHandle(Int32* pStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSmSetClientAllocFree(Option ClientAlloc, Option ClientFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSmSetThreadHandle(void* Id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RpcSmSwapClientAllocFree(Option ClientAlloc, Option ClientFree, Option* OldClientAlloc, Option* OldClientFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrRpcSsEnableAllocate(_MIDL_STUB_MESSAGE* pMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrRpcSsDisableAllocate(_MIDL_STUB_MESSAGE* pMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrRpcSmSetClientToOsf(_MIDL_STUB_MESSAGE* pMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* NdrRpcSmClientAllocate(UIntPtr Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrRpcSmClientFree(void* NodeToFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* NdrRpcSsDefaultAllocate(UIntPtr Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrRpcSsDefaultFree(void* NodeToFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _FULL_PTR_XLAT_TABLES* NdrFullPointerXlatInit(UInt32 NumberOfPointers, int XlatSide);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrFullPointerXlatFree(_FULL_PTR_XLAT_TABLES* pXlatTables);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* NdrAllocate(_MIDL_STUB_MESSAGE* pStubMsg, UIntPtr Len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrClearOutParameters(_MIDL_STUB_MESSAGE* pStubMsg, byte* pFormat, void* ArgAddr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* NdrOleAllocate(UIntPtr Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrOleFree(void* NodeToFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrGetUserMarshalInfo(UInt32* pFlags, UInt32 InformationLevel, _NDR_USER_MARSHAL_INFO* pMarshalInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrCreateServerInterfaceFromStub(IRpcStubBuffer* pStub, _RPC_SERVER_INTERFACE* pServerIf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CLIENT_CALL_RETURN NdrClientCall3(_MIDL_STUBLESS_PROXY_INFO* pProxyInfo, UInt32 nProcNum, void* pReturnValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CLIENT_CALL_RETURN Ndr64AsyncClientCall(_MIDL_STUBLESS_PROXY_INFO* pProxyInfo, UInt32 nProcNum, void* pReturnValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _CLIENT_CALL_RETURN Ndr64DcomAsyncClientCall(_MIDL_STUBLESS_PROXY_INFO* pProxyInfo, UInt32 nProcNum, void* pReturnValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void Ndr64AsyncServerCall(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void Ndr64AsyncServerCall64(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void Ndr64AsyncServerCallAll(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 Ndr64AsyncStubCall(IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, _RPC_MESSAGE* pRpcMsg, UInt32* pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 Ndr64DcomAsyncStubCall(IRpcStubBuffer* pThis, IRpcChannelBuffer* pChannel, _RPC_MESSAGE* pRpcMsg, UInt32* pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 NdrStubCall3(void* pThis, void* pChannel, _RPC_MESSAGE* pRpcMsg, UInt32* pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerCallAll(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerCallNdr64(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrServerCall3(_RPC_MESSAGE* pRpcMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrPartialIgnoreClientMarshall(_MIDL_STUB_MESSAGE* pStubMsg, void* pMemory);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrPartialIgnoreServerUnmarshall(_MIDL_STUB_MESSAGE* pStubMsg, void** ppMemory);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrPartialIgnoreClientBufferSize(_MIDL_STUB_MESSAGE* pStubMsg, void* pMemory);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void NdrPartialIgnoreServerInitialize(_MIDL_STUB_MESSAGE* pStubMsg, void** ppMemory, byte* pFormat);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void RpcUserFree(I_RPC_HANDLE AsyncHandle, void* pBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardEstablishContext(UInt32 dwScope, void* pvReserved1, void* pvReserved2, ulong phContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardReleaseContext(ulong hContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardIsValidContext(ulong hContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListReaderGroupsA(ulong hContext, byte mszGroups, UInt32 pcchGroups);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListReaderGroupsW(ulong hContext, ushort mszGroups, UInt32 pcchGroups);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListReadersA(ulong hContext, byte mszGroups, byte mszReaders, UInt32 pcchReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListReadersW(ulong hContext, ushort mszGroups, ushort mszReaders, UInt32 pcchReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListCardsA(ulong hContext, byte pbAtr, _GUID rgquidInterfaces, UInt32 cguidInterfaceCount, byte* mszCards, UInt32 pcchCards);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListCardsW(ulong hContext, byte pbAtr, _GUID rgquidInterfaces, UInt32 cguidInterfaceCount, ushort* mszCards, UInt32 pcchCards);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListInterfacesA(ulong hContext, byte szCard, _GUID pguidInterfaces, UInt32 pcguidInterfaces);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListInterfacesW(ulong hContext, ushort szCard, _GUID pguidInterfaces, UInt32 pcguidInterfaces);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetProviderIdA(ulong hContext, byte szCard, _GUID pguidProviderId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetProviderIdW(ulong hContext, ushort szCard, _GUID pguidProviderId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetCardTypeProviderNameA(ulong hContext, byte szCardName, UInt32 dwProviderId, byte* szProvider, UInt32 pcchProvider);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetCardTypeProviderNameW(ulong hContext, ushort szCardName, UInt32 dwProviderId, ushort* szProvider, UInt32 pcchProvider);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardIntroduceReaderGroupA(ulong hContext, byte szGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardIntroduceReaderGroupW(ulong hContext, ushort szGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardForgetReaderGroupA(ulong hContext, byte szGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardForgetReaderGroupW(ulong hContext, ushort szGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardIntroduceReaderA(ulong hContext, byte szReaderName, byte szDeviceName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardIntroduceReaderW(ulong hContext, ushort szReaderName, ushort szDeviceName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardForgetReaderA(ulong hContext, byte szReaderName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardForgetReaderW(ulong hContext, ushort szReaderName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardAddReaderToGroupA(ulong hContext, byte szReaderName, byte szGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardAddReaderToGroupW(ulong hContext, ushort szReaderName, ushort szGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardRemoveReaderFromGroupA(ulong hContext, byte szReaderName, byte szGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardRemoveReaderFromGroupW(ulong hContext, ushort szReaderName, ushort szGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardIntroduceCardTypeA(ulong hContext, byte szCardName, _GUID pguidPrimaryProvider, _GUID rgguidInterfaces, UInt32 dwInterfaceCount, byte pbAtr, byte pbAtrMask, UInt32 cbAtrLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardIntroduceCardTypeW(ulong hContext, ushort szCardName, _GUID pguidPrimaryProvider, _GUID rgguidInterfaces, UInt32 dwInterfaceCount, byte pbAtr, byte pbAtrMask, UInt32 cbAtrLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardSetCardTypeProviderNameA(ulong hContext, byte szCardName, UInt32 dwProviderId, byte szProvider);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardSetCardTypeProviderNameW(ulong hContext, ushort szCardName, UInt32 dwProviderId, ushort szProvider);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardForgetCardTypeA(ulong hContext, byte szCardName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardForgetCardTypeW(ulong hContext, ushort szCardName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardFreeMemory(ulong hContext, void* pvMem);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* SCardAccessStartedEvent();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SCardReleaseStartedEvent();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardLocateCardsA(ulong hContext, byte mszCards, SCARD_READERSTATEA* rgReaderStates, UInt32 cReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardLocateCardsW(ulong hContext, ushort mszCards, SCARD_READERSTATEW* rgReaderStates, UInt32 cReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardLocateCardsByATRA(ulong hContext, _SCARD_ATRMASK* rgAtrMasks, UInt32 cAtrs, SCARD_READERSTATEA* rgReaderStates, UInt32 cReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardLocateCardsByATRW(ulong hContext, _SCARD_ATRMASK* rgAtrMasks, UInt32 cAtrs, SCARD_READERSTATEW* rgReaderStates, UInt32 cReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetStatusChangeA(ulong hContext, UInt32 dwTimeout, SCARD_READERSTATEA* rgReaderStates, UInt32 cReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetStatusChangeW(ulong hContext, UInt32 dwTimeout, SCARD_READERSTATEW* rgReaderStates, UInt32 cReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardCancel(ulong hContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardConnectA(ulong hContext, byte szReader, UInt32 dwShareMode, UInt32 dwPreferredProtocols, ulong phCard, UInt32 pdwActiveProtocol);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardConnectW(ulong hContext, ushort szReader, UInt32 dwShareMode, UInt32 dwPreferredProtocols, ulong phCard, UInt32 pdwActiveProtocol);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardReconnect(ulong hCard, UInt32 dwShareMode, UInt32 dwPreferredProtocols, UInt32 dwInitialization, UInt32 pdwActiveProtocol);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardDisconnect(ulong hCard, UInt32 dwDisposition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardBeginTransaction(ulong hCard);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardEndTransaction(ulong hCard, UInt32 dwDisposition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardCancelTransaction(ulong hCard);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardState(ulong hCard, UInt32 pdwState, UInt32 pdwProtocol, byte pbAtr, UInt32 pcbAtrLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardStatusA(ulong hCard, byte mszReaderNames, UInt32 pcchReaderLen, UInt32 pdwState, UInt32 pdwProtocol, byte pbAtr, UInt32 pcbAtrLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardStatusW(ulong hCard, ushort mszReaderNames, UInt32 pcchReaderLen, UInt32 pdwState, UInt32 pdwProtocol, byte pbAtr, UInt32 pcbAtrLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardTransmit(ulong hCard, _SCARD_IO_REQUEST pioSendPci, byte pbSendBuffer, UInt32 cbSendLength, _SCARD_IO_REQUEST* pioRecvPci, byte pbRecvBuffer, UInt32 pcbRecvLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetTransmitCount(ulong hCard, UInt32 pcTransmitCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardControl(ulong hCard, UInt32 dwControlCode, void* lpInBuffer, UInt32 cbInBufferSize, void* lpOutBuffer, UInt32 cbOutBufferSize, UInt32 lpBytesReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetAttrib(ulong hCard, UInt32 dwAttrId, byte pbAttr, UInt32 pcbAttrLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardSetAttrib(ulong hCard, UInt32 dwAttrId, byte pbAttr, UInt32 cbAttrLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardUIDlgSelectCardA(OPENCARDNAME_EXA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardUIDlgSelectCardW(OPENCARDNAME_EXW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetOpenCardNameA(OPENCARDNAMEA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetOpenCardNameW(OPENCARDNAMEW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardDlgExtendedError();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardReadCacheA(ulong hContext, _GUID* CardIdentifier, UInt32 FreshnessCounter, byte LookupName, byte Data, UInt32* DataLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardReadCacheW(ulong hContext, _GUID* CardIdentifier, UInt32 FreshnessCounter, ushort LookupName, byte Data, UInt32* DataLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardWriteCacheA(ulong hContext, _GUID* CardIdentifier, UInt32 FreshnessCounter, byte LookupName, byte Data, UInt32 DataLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardWriteCacheW(ulong hContext, _GUID* CardIdentifier, UInt32 FreshnessCounter, ushort LookupName, byte Data, UInt32 DataLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetReaderIconA(ulong hContext, byte szReaderName, byte pbIcon, UInt32 pcbIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetReaderIconW(ulong hContext, ushort szReaderName, byte pbIcon, UInt32 pcbIcon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetDeviceTypeIdA(ulong hContext, byte szReaderName, UInt32 pdwDeviceTypeId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetDeviceTypeIdW(ulong hContext, ushort szReaderName, UInt32 pdwDeviceTypeId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetReaderDeviceInstanceIdA(ulong hContext, byte szReaderName, byte szDeviceInstanceId, UInt32 pcchDeviceInstanceId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardGetReaderDeviceInstanceIdW(ulong hContext, ushort szReaderName, ushort szDeviceInstanceId, UInt32 pcchDeviceInstanceId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListReadersWithDeviceInstanceIdA(ulong hContext, byte szDeviceInstanceId, byte mszReaders, UInt32 pcchReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardListReadersWithDeviceInstanceIdW(ulong hContext, ushort szDeviceInstanceId, ushort mszReaders, UInt32 pcchReaders);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SCardAudit(ulong hContext, UInt32 dwEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _PSP* CreatePropertySheetPageA(LPCPROPSHEETPAGEA_V4 constPropSheetPagePointer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _PSP* CreatePropertySheetPageW(LPCPROPSHEETPAGEW_V4 constPropSheetPagePointer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DestroyPropertySheetPage(_PSP* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long PropertySheetA(LPCPROPSHEETHEADERA_V2 arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long PropertySheetW(LPCPROPSHEETHEADERW_V2 arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPrintersA(UInt32 Flags, byte Name, UInt32 Level, byte pPrinterEnum, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPrintersW(UInt32 Flags, ushort Name, UInt32 Level, byte pPrinterEnum, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* GetSpoolFileHandle(void* hPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CommitSpoolData(void* hPrinter, void* hSpoolFile, UInt32 cbCommit);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseSpoolFileHandle(void* hPrinter, void* hSpoolFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenPrinterA(byte pPrinterName, void* phPrinter, _PRINTER_DEFAULTSA* pDefault);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenPrinterW(ushort pPrinterName, void* phPrinter, _PRINTER_DEFAULTSW* pDefault);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ResetPrinterA(void* hPrinter, _PRINTER_DEFAULTSA* pDefault);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ResetPrinterW(void* hPrinter, _PRINTER_DEFAULTSW* pDefault);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetJobA(void* hPrinter, UInt32 JobId, UInt32 Level, byte pJob, UInt32 Command);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetJobW(void* hPrinter, UInt32 JobId, UInt32 Level, byte pJob, UInt32 Command);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetJobA(void* hPrinter, UInt32 JobId, UInt32 Level, byte pJob, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetJobW(void* hPrinter, UInt32 JobId, UInt32 Level, byte pJob, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumJobsA(void* hPrinter, UInt32 FirstJob, UInt32 NoJobs, UInt32 Level, byte pJob, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumJobsW(void* hPrinter, UInt32 FirstJob, UInt32 NoJobs, UInt32 Level, byte pJob, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* AddPrinterA(byte pName, UInt32 Level, byte pPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* AddPrinterW(ushort pName, UInt32 Level, byte pPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrinter(void* hPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPrinterA(void* hPrinter, UInt32 Level, byte pPrinter, UInt32 Command);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPrinterW(void* hPrinter, UInt32 Level, byte pPrinter, UInt32 Command);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrinterA(void* hPrinter, UInt32 Level, byte pPrinter, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrinterW(void* hPrinter, UInt32 Level, byte pPrinter, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrinterDriverA(byte pName, UInt32 Level, byte pDriverInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrinterDriverW(ushort pName, UInt32 Level, byte pDriverInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrinterDriverExA(byte pName, UInt32 Level, byte lpbDriverInfo, UInt32 dwFileCopyFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrinterDriverExW(ushort pName, UInt32 Level, byte lpbDriverInfo, UInt32 dwFileCopyFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPrinterDriversA(byte pName, byte pEnvironment, UInt32 Level, byte pDriverInfo, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPrinterDriversW(ushort pName, ushort pEnvironment, UInt32 Level, byte pDriverInfo, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrinterDriverA(void* hPrinter, byte pEnvironment, UInt32 Level, byte pDriverInfo, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrinterDriverW(void* hPrinter, ushort pEnvironment, UInt32 Level, byte pDriverInfo, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrinterDriverDirectoryA(byte pName, byte pEnvironment, UInt32 Level, byte pDriverDirectory, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrinterDriverDirectoryW(ushort pName, ushort pEnvironment, UInt32 Level, byte pDriverDirectory, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrinterDriverA(byte pName, byte pEnvironment, byte pDriverName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrinterDriverW(ushort pName, ushort pEnvironment, ushort pDriverName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrinterDriverExA(byte pName, byte pEnvironment, byte pDriverName, UInt32 dwDeleteFlag, UInt32 dwVersionFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrinterDriverExW(ushort pName, ushort pEnvironment, ushort pDriverName, UInt32 dwDeleteFlag, UInt32 dwVersionFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrintProcessorA(byte pName, byte pEnvironment, byte pPathName, byte pPrintProcessorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrintProcessorW(ushort pName, ushort pEnvironment, ushort pPathName, ushort pPrintProcessorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPrintProcessorsA(byte pName, byte pEnvironment, UInt32 Level, byte pPrintProcessorInfo, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPrintProcessorsW(ushort pName, ushort pEnvironment, UInt32 Level, byte pPrintProcessorInfo, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrintProcessorDirectoryA(byte pName, byte pEnvironment, UInt32 Level, byte pPrintProcessorInfo, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrintProcessorDirectoryW(ushort pName, ushort pEnvironment, UInt32 Level, byte pPrintProcessorInfo, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPrintProcessorDatatypesA(byte pName, byte pPrintProcessorName, UInt32 Level, byte pDatatypes, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPrintProcessorDatatypesW(ushort pName, ushort pPrintProcessorName, UInt32 Level, byte pDatatypes, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrintProcessorA(byte pName, byte pEnvironment, byte pPrintProcessorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrintProcessorW(ushort pName, ushort pEnvironment, ushort pPrintProcessorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 StartDocPrinterA(void* hPrinter, UInt32 Level, byte pDocInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 StartDocPrinterW(void* hPrinter, UInt32 Level, byte pDocInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StartPagePrinter(void* hPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WritePrinter(void* hPrinter, void* pBuf, UInt32 cbBuf, UInt32 pcWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FlushPrinter(void* hPrinter, void* pBuf, UInt32 cbBuf, UInt32 pcWritten, UInt32 cSleep);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndPagePrinter(void* hPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AbortPrinter(void* hPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ReadPrinter(void* hPrinter, void* pBuf, UInt32 cbBuf, UInt32 pNoBytesRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EndDocPrinter(void* hPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddJobA(void* hPrinter, UInt32 Level, byte pData, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddJobW(void* hPrinter, UInt32 Level, byte pData, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ScheduleJob(void* hPrinter, UInt32 JobId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PrinterProperties(HWND__* hWnd, void* hPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DocumentPropertiesA(HWND__* hWnd, void* hPrinter, byte pDeviceName, _devicemodeA* pDevModeOutput, _devicemodeA* pDevModeInput, UInt32 fMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DocumentPropertiesW(HWND__* hWnd, void* hPrinter, ushort pDeviceName, _devicemodeW* pDevModeOutput, _devicemodeW* pDevModeInput, UInt32 fMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AdvancedDocumentPropertiesA(HWND__* hWnd, void* hPrinter, byte pDeviceName, _devicemodeA* pDevModeOutput, _devicemodeA* pDevModeInput);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AdvancedDocumentPropertiesW(HWND__* hWnd, void* hPrinter, ushort pDeviceName, _devicemodeW* pDevModeOutput, _devicemodeW* pDevModeInput);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ExtDeviceMode(HWND__* hWnd, void* hInst, _devicemodeA* pDevModeOutput, byte pDeviceName, byte pPort, _devicemodeA* pDevModeInput, byte pProfile, UInt32 fMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrinterDataA(void* hPrinter, byte pValueName, UInt32 pType, byte pData, UInt32 nSize, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrinterDataW(void* hPrinter, ushort pValueName, UInt32 pType, byte pData, UInt32 nSize, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrinterDataExA(void* hPrinter, byte pKeyName, byte pValueName, UInt32 pType, byte pData, UInt32 nSize, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetPrinterDataExW(void* hPrinter, ushort pKeyName, ushort pValueName, UInt32 pType, byte pData, UInt32 nSize, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnumPrinterDataA(void* hPrinter, UInt32 dwIndex, byte pValueName, UInt32 cbValueName, UInt32 pcbValueName, UInt32 pType, byte pData, UInt32 cbData, UInt32 pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnumPrinterDataW(void* hPrinter, UInt32 dwIndex, ushort pValueName, UInt32 cbValueName, UInt32 pcbValueName, UInt32 pType, byte pData, UInt32 cbData, UInt32 pcbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnumPrinterDataExA(void* hPrinter, byte pKeyName, byte pEnumValues, UInt32 cbEnumValues, UInt32 pcbEnumValues, UInt32 pnEnumValues);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnumPrinterDataExW(void* hPrinter, ushort pKeyName, byte pEnumValues, UInt32 cbEnumValues, UInt32 pcbEnumValues, UInt32 pnEnumValues);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnumPrinterKeyA(void* hPrinter, byte pKeyName, byte pSubkey, UInt32 cbSubkey, UInt32 pcbSubkey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnumPrinterKeyW(void* hPrinter, ushort pKeyName, ushort pSubkey, UInt32 cbSubkey, UInt32 pcbSubkey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetPrinterDataA(void* hPrinter, byte pValueName, UInt32 Type, byte pData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetPrinterDataW(void* hPrinter, ushort pValueName, UInt32 Type, byte pData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetPrinterDataExA(void* hPrinter, byte pKeyName, byte pValueName, UInt32 Type, byte pData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetPrinterDataExW(void* hPrinter, ushort pKeyName, ushort pValueName, UInt32 Type, byte pData, UInt32 cbData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DeletePrinterDataA(void* hPrinter, byte pValueName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DeletePrinterDataW(void* hPrinter, ushort pValueName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DeletePrinterDataExA(void* hPrinter, byte pKeyName, byte pValueName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DeletePrinterDataExW(void* hPrinter, ushort pKeyName, ushort pValueName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DeletePrinterKeyA(void* hPrinter, byte pKeyName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DeletePrinterKeyW(void* hPrinter, ushort pKeyName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WaitForPrinterChange(void* hPrinter, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* FindFirstPrinterChangeNotification(void* hPrinter, UInt32 fdwFilter, UInt32 fdwOptions, void* pPrinterNotifyOptions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindNextPrinterChangeNotification(void* hChange, UInt32 pdwChange, void* pvReserved, void** ppPrinterNotifyInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FreePrinterNotifyInfo(_PRINTER_NOTIFY_INFO* pPrinterNotifyInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int FindClosePrinterChangeNotification(void* hChange);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 PrinterMessageBoxA(void* hPrinter, UInt32 Error, HWND__* hWnd, byte pText, byte pCaption, UInt32 dwType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 PrinterMessageBoxW(void* hPrinter, UInt32 Error, HWND__* hWnd, ushort pText, ushort pCaption, UInt32 dwType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ClosePrinter(void* hPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddFormA(void* hPrinter, UInt32 Level, byte pForm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddFormW(void* hPrinter, UInt32 Level, byte pForm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteFormA(void* hPrinter, byte pFormName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteFormW(void* hPrinter, ushort pFormName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFormA(void* hPrinter, byte pFormName, UInt32 Level, byte pForm, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetFormW(void* hPrinter, ushort pFormName, UInt32 Level, byte pForm, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFormA(void* hPrinter, byte pFormName, UInt32 Level, byte pForm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetFormW(void* hPrinter, ushort pFormName, UInt32 Level, byte pForm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumFormsA(void* hPrinter, UInt32 Level, byte pForm, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumFormsW(void* hPrinter, UInt32 Level, byte pForm, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumMonitorsA(byte pName, UInt32 Level, byte pMonitor, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumMonitorsW(ushort pName, UInt32 Level, byte pMonitor, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddMonitorA(byte pName, UInt32 Level, byte pMonitors);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddMonitorW(ushort pName, UInt32 Level, byte pMonitors);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteMonitorA(byte pName, byte pEnvironment, byte pMonitorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteMonitorW(ushort pName, ushort pEnvironment, ushort pMonitorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPortsA(byte pName, UInt32 Level, byte pPort, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumPortsW(ushort pName, UInt32 Level, byte pPort, UInt32 cbBuf, UInt32 pcbNeeded, UInt32 pcReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPortA(byte pName, HWND__* hWnd, byte pMonitorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPortW(ushort pName, HWND__* hWnd, ushort pMonitorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ConfigurePortA(byte pName, HWND__* hWnd, byte pPortName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ConfigurePortW(ushort pName, HWND__* hWnd, ushort pPortName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePortA(byte pName, HWND__* hWnd, byte pPortName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePortW(ushort pName, HWND__* hWnd, ushort pPortName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int XcvDataW(void* hXcv, ushort pszDataName, byte pInputData, UInt32 cbInputData, byte pOutputData, UInt32 cbOutputData, UInt32 pcbOutputNeeded, UInt32 pdwStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDefaultPrinterA(byte pszBuffer, UInt32 pcchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetDefaultPrinterW(ushort pszBuffer, UInt32 pcchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDefaultPrinterA(byte pszPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetDefaultPrinterW(ushort pszPrinter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPortA(byte pName, byte pPortName, UInt32 dwLevel, byte pPortInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetPortW(ushort pName, ushort pPortName, UInt32 dwLevel, byte pPortInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrinterConnectionA(byte pName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrinterConnectionW(ushort pName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrinterConnectionA(byte pName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrinterConnectionW(ushort pName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* ConnectToPrinterDlg(HWND__* hwnd, UInt32 Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrintProvidorA(byte pName, UInt32 Level, byte pProvidorInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrintProvidorW(ushort pName, UInt32 Level, byte pProvidorInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrintProvidorA(byte pName, byte pEnvironment, byte pPrintProvidorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeletePrintProvidorW(ushort pName, ushort pEnvironment, ushort pPrintProvidorName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidDevmodeA(_devicemodeA* pDevmode, UIntPtr DevmodeSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsValidDevmodeW(_devicemodeW* pDevmode, UIntPtr DevmodeSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenPrinter2A(byte pPrinterName, void* phPrinter, _PRINTER_DEFAULTSA* pDefault, _PRINTER_OPTIONSA* pOptions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OpenPrinter2W(ushort pPrinterName, void* phPrinter, _PRINTER_DEFAULTSW* pDefault, _PRINTER_OPTIONSW* pOptions);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrinterConnection2A(HWND__* hWnd, byte pszName, UInt32 dwLevel, void* pConnectionInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int AddPrinterConnection2W(HWND__* hWnd, ushort pszName, UInt32 dwLevel, void* pConnectionInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 InstallPrinterDriverFromPackageA(byte pszServer, byte pszInfPath, byte pszDriverName, byte pszEnvironment, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 InstallPrinterDriverFromPackageW(ushort pszServer, ushort pszInfPath, ushort pszDriverName, ushort pszEnvironment, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UploadPrinterDriverPackageA(byte pszServer, byte pszInfPath, byte pszEnvironment, UInt32 dwFlags, HWND__* hwnd, byte pszDestInfPath, UInt32 pcchDestInfPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UploadPrinterDriverPackageW(ushort pszServer, ushort pszInfPath, ushort pszEnvironment, UInt32 dwFlags, HWND__* hwnd, ushort pszDestInfPath, UInt32 pcchDestInfPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetCorePrinterDriversA(byte pszServer, byte pszEnvironment, byte pszzCoreDriverDependencies, UInt32 cCorePrinterDrivers, _CORE_PRINTER_DRIVERA* pCorePrinterDrivers);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetCorePrinterDriversW(ushort pszServer, ushort pszEnvironment, ushort pszzCoreDriverDependencies, UInt32 cCorePrinterDrivers, _CORE_PRINTER_DRIVERW* pCorePrinterDrivers);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CorePrinterDriverInstalledA(byte pszServer, byte pszEnvironment, _GUID CoreDriverGUID, _FILETIME ftDriverDate, ulong dwlDriverVersion, int* pbDriverInstalled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CorePrinterDriverInstalledW(ushort pszServer, ushort pszEnvironment, _GUID CoreDriverGUID, _FILETIME ftDriverDate, ulong dwlDriverVersion, int* pbDriverInstalled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetPrinterDriverPackagePathA(byte pszServer, byte pszEnvironment, byte pszLanguage, byte pszPackageID, byte pszDriverPackageCab, UInt32 cchDriverPackageCab, UInt32 pcchRequiredSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetPrinterDriverPackagePathW(ushort pszServer, ushort pszEnvironment, ushort pszLanguage, ushort pszPackageID, ushort pszDriverPackageCab, UInt32 cchDriverPackageCab, UInt32 pcchRequiredSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DeletePrinterDriverPackageA(byte pszServer, byte pszInfPath, byte pszEnvironment);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DeletePrinterDriverPackageW(ushort pszServer, ushort pszInfPath, ushort pszEnvironment);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ReportJobProcessingProgress(void* printerHandle, UInt32 jobId, int jobOperation, int jobProgress);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrinterDriver2A(HWND__* hWnd, void* hPrinter, byte pEnvironment, UInt32 Level, byte pDriverInfo, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrinterDriver2W(HWND__* hWnd, void* hPrinter, ushort pEnvironment, UInt32 Level, byte pDriverInfo, UInt32 cbBuf, UInt32 pcbNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetPrintExecutionData(PRINT_EXECUTION_DATA* pData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetJobNamedPropertyValue(void* hPrinter, UInt32 JobId, ushort pszName, PrintPropertyValue* pValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreePrintPropertyValue(PrintPropertyValue* pValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreePrintNamedPropertyArray(UInt32 cProperties, PrintNamedProperty** ppProperties);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SetJobNamedProperty(void* hPrinter, UInt32 JobId, PrintNamedProperty* pProperty);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 DeleteJobNamedProperty(void* hPrinter, UInt32 JobId, ushort pszName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 EnumJobNamedProperties(void* hPrinter, UInt32 JobId, UInt32* pcProperties, PrintNamedProperty** ppProperties);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetPrintOutputInfo(HWND__* hWnd, ushort pszPrinter, void** phFile, ushort* ppszOutputFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _calloc_base(UIntPtr _Count, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* calloc(ulong _Count, ulong _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _callnewh(UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _expand(void* _Block, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _free_base(void* _Block);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void free(void* _Block);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _malloc_base(UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* malloc(ulong _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _msize_base(void* _Block);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _msize(void* _Block);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _realloc_base(void* _Block, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* realloc(void* _Block, ulong _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _recalloc_base(void* _Block, UIntPtr _Count, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _recalloc(void* _Block, UIntPtr _Count, UIntPtr _Size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _aligned_free(void* _Block);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _aligned_malloc(UIntPtr _Size, UIntPtr _Alignment);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _aligned_offset_malloc(UIntPtr _Size, UIntPtr _Alignment, UIntPtr _Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _aligned_msize(void* _Block, UIntPtr _Alignment, UIntPtr _Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _aligned_offset_realloc(void* _Block, UIntPtr _Size, UIntPtr _Alignment, UIntPtr _Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _aligned_offset_recalloc(void* _Block, UIntPtr _Count, UIntPtr _Size, UIntPtr _Alignment, UIntPtr _Offset);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _aligned_realloc(void* _Block, UIntPtr _Size, UIntPtr _Alignment);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _aligned_recalloc(void* _Block, UIntPtr _Count, UIntPtr _Size, UIntPtr _Alignment);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* bsearch_s(void* _Key, void* _Base, UIntPtr _NumOfElements, UIntPtr _SizeOfElements, Option _CompareFunction, void* _Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void qsort_s(void* _Base, UIntPtr _NumOfElements, UIntPtr _SizeOfElements, Option _CompareFunction, void* _Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* bsearch(void* _Key, void* _Base, UIntPtr _NumOfElements, UIntPtr _SizeOfElements, Option _CompareFunction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void qsort(void* _Base, UIntPtr _NumOfElements, UIntPtr _SizeOfElements, Option _CompareFunction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _lfind_s(void* _Key, void* _Base, uint* _NumOfElements, UIntPtr _SizeOfElements, Option _CompareFunction, void* _Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _lfind(void* _Key, void* _Base, uint* _NumOfElements, uint _SizeOfElements, Option _CompareFunction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _lsearch_s(void* _Key, void* _Base, uint* _NumOfElements, UIntPtr _SizeOfElements, Option _CompareFunction, void* _Context);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* _lsearch(void* _Key, void* _Base, uint* _NumOfElements, uint _SizeOfElements, Option _CompareFunction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* lfind(void* _Key, void* _Base, uint* _NumOfElements, uint _SizeOfElements, Option _CompareFunction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* lsearch(void* _Key, void* _Base, uint* _NumOfElements, uint _SizeOfElements, Option _CompareFunction);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _itow_s(int _Value, ushort* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _itow(int _Value, ushort* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ltow_s(Int32 _Value, ushort* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _ltow(Int32 _Value, ushort* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ultow_s(UInt32 _Value, ushort* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _ultow(UInt32 _Value, ushort* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double wcstod(ushort* _String, ushort** _EndPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _wcstod_l(ushort* _String, ushort** _EndPtr, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 wcstol(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _wcstol_l(ushort* _String, ushort** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long wcstoll(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _wcstoll_l(ushort* _String, ushort** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 wcstoul(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 _wcstoul_l(ushort* _String, ushort** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong wcstoull(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _wcstoull_l(ushort* _String, ushort** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double wcstold(ushort* _String, ushort** _EndPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _wcstold_l(ushort* _String, ushort** _EndPtr, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float wcstof(ushort* _String, ushort** _EndPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float _wcstof_l(ushort* _String, ushort** _EndPtr, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _wtof(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _wtof_l(ushort* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wtoi(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wtoi_l(ushort* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _wtol(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _wtol_l(ushort* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _wtoll(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _wtoll_l(ushort* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _i64tow_s(long _Value, ushort* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _i64tow(long _Value, ushort* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ui64tow_s(ulong _Value, ushort* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _ui64tow(ulong _Value, ushort* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _wtoi64(ushort* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _wtoi64_l(ushort* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _wcstoi64(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _wcstoi64_l(ushort* _String, ushort** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _wcstoui64(ushort* _String, ushort** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _wcstoui64_l(ushort* _String, ushort** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wfullpath(ushort* _Buffer, ushort* _Path, UIntPtr _BufferCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wmakepath_s(ushort* _Buffer, UIntPtr _BufferCount, ushort* _Drive, ushort* _Dir, ushort* _Filename, ushort* _Ext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _wmakepath(ushort* _Buffer, ushort* _Drive, ushort* _Dir, ushort* _Filename, ushort* _Ext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _wperror(ushort* _ErrorMessage);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _wsplitpath(ushort* _FullPath, ushort* _Drive, ushort* _Dir, ushort* _Filename, ushort* _Ext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wsplitpath_s(ushort* _FullPath, ushort* _Drive, UIntPtr _DriveCount, ushort* _Dir, UIntPtr _DirCount, ushort* _Filename, UIntPtr _FilenameCount, ushort* _Ext, UIntPtr _ExtCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wdupenv_s(ushort** _Buffer, UIntPtr* _BufferCount, ushort* _VarName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wgetenv(ushort* _VarName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wgetenv_s(UIntPtr* _RequiredCount, ushort* _Buffer, UIntPtr _BufferCount, ushort* _VarName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wputenv(ushort* _EnvString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wputenv_s(ushort* _Name, ushort* _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wsearchenv_s(ushort* _Filename, ushort* _VarName, ushort* _Buffer, UIntPtr _BufferCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _wsearchenv(ushort* _Filename, ushort* _VarName, ushort* _ResultPath);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wsystem(ushort* _Command);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _swab(byte* _Buf1, byte* _Buf2, int _SizeInBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint _set_abort_behavior(uint _Flags, uint _Mask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int atexit(Option arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option _onexit(Option _Func);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int at_quick_exit(Option arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option _set_purecall_handler(Option _Handler);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option _get_purecall_handler();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option _set_invalid_parameter_handler(Option _Handler);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option _get_invalid_parameter_handler();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option _set_thread_local_invalid_parameter_handler(Option _Handler);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option _get_thread_local_invalid_parameter_handler();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _set_error_mode(int _Mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte** __sys_errlist();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int* __sys_nerr();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void perror(byte* _ErrMsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte** __p__pgmptr();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort** __p__wpgmptr();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int* __p__fmode();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_pgmptr(byte** _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_wpgmptr(ushort** _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _set_fmode(int _Mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_fmode(int* _PMode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int abs(int _Number);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 labs(Int32 _Number);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long llabs(long _Number);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _abs64(long _Number);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort _byteswap_ushort(ushort _Number);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 _byteswap_ulong(UInt32 _Number);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _byteswap_uint64(ulong _Number);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _div_t div(int _Numerator, int _Denominator);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _ldiv_t ldiv(Int32 _Numerator, Int32 _Denominator);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern _lldiv_t lldiv(long _Numerator, long _Denominator);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 _lrotl(UInt32 _Value, int _Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 _lrotr(UInt32 _Value, int _Shift);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void srand(uint _Seed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int rand();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double atof(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int atoi(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 atol(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long atoll(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _atoi64(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _atof_l(byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _atoi_l(byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _atol_l(byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _atoll_l(byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _atoi64_l(byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _atoflt(_CRT_FLOAT* _Result, byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _atodbl(_CRT_DOUBLE* _Result, byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _atoldbl(_LDOUBLE* _Result, byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _atoflt_l(_CRT_FLOAT* _Result, byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _atodbl_l(_CRT_DOUBLE* _Result, byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _atoldbl_l(_LDOUBLE* _Result, byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float strtof(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern float _strtof_l(byte* _String, byte** _EndPtr, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double strtod(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _strtod_l(byte* _String, byte** _EndPtr, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double strtold(byte* _String, byte** _EndPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _strtold_l(byte* _String, byte** _EndPtr, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 strtol(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _strtol_l(byte* _String, byte** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long strtoll(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _strtoll_l(byte* _String, byte** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 strtoul(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 _strtoul_l(byte* _String, byte** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong strtoull(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _strtoull_l(byte* _String, byte** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _strtoi64(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _strtoi64_l(byte* _String, byte** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _strtoui64(byte* _String, byte** _EndPtr, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong _strtoui64_l(byte* _String, byte** _EndPtr, int _Radix, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _itoa_s(int _Value, byte* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _itoa(int _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ltoa_s(Int32 _Value, byte* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _ltoa(Int32 _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ultoa_s(UInt32 _Value, byte* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _ultoa(UInt32 _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _i64toa_s(long _Value, byte* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _i64toa(long _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ui64toa_s(ulong _Value, byte* _Buffer, UIntPtr _BufferCount, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _ui64toa(ulong _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ecvt_s(byte* _Buffer, UIntPtr _BufferCount, double _Value, int _DigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _ecvt(double _Value, int _DigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _fcvt_s(byte* _Buffer, UIntPtr _BufferCount, double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _fcvt(double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _gcvt_s(byte* _Buffer, UIntPtr _BufferCount, double _Value, int _DigitCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _gcvt(double _Value, int _DigitCount, byte* _Buffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mblen(byte* _Ch, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _mblen_l(byte* _Ch, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _mbstrlen(byte* _String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _mbstrlen_l(byte* _String, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _mbstrnlen(byte* _String, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _mbstrnlen_l(byte* _String, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mbtowc(ushort* _DstCh, byte* _SrcCh, UIntPtr _SrcSizeInBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _mbtowc_l(ushort* _DstCh, byte* _SrcCh, UIntPtr _SrcSizeInBytes, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int mbstowcs_s(UIntPtr* _PtNumOfCharConverted, ushort* _DstBuf, UIntPtr _SizeInWords, byte* _SrcBuf, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr mbstowcs(ushort* _Dest, byte* _Source, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _mbstowcs_s_l(UIntPtr* _PtNumOfCharConverted, ushort* _DstBuf, UIntPtr _SizeInWords, byte* _SrcBuf, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _mbstowcs_l(ushort* _Dest, byte* _Source, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wctomb(byte* _MbCh, ushort _WCh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wctomb_l(byte* _MbCh, ushort _WCh, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wctomb_s(int* _SizeConverted, byte* _MbCh, UIntPtr _SizeInBytes, ushort _WCh);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wctomb_s_l(int* _SizeConverted, byte* _MbCh, UIntPtr _SizeInBytes, ushort _WCh, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int wcstombs_s(UIntPtr* _PtNumOfCharConverted, byte* _Dst, UIntPtr _DstSizeInBytes, ushort* _Src, UIntPtr _MaxCountInBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr wcstombs(byte* _Dest, ushort* _Source, UIntPtr _MaxCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wcstombs_s_l(UIntPtr* _PtNumOfCharConverted, byte* _Dst, UIntPtr _DstSizeInBytes, ushort* _Src, UIntPtr _MaxCountInBytes, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _wcstombs_l(byte* _Dest, ushort* _Source, UIntPtr _MaxCount, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _fullpath(byte* _Buffer, byte* _Path, UIntPtr _BufferCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _makepath_s(byte* _Buffer, UIntPtr _BufferCount, byte* _Drive, byte* _Dir, byte* _Filename, byte* _Ext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _makepath(byte* _Buffer, byte* _Drive, byte* _Dir, byte* _Filename, byte* _Ext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _splitpath(byte* _FullPath, byte* _Drive, byte* _Dir, byte* _Filename, byte* _Ext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _splitpath_s(byte* _FullPath, byte* _Drive, UIntPtr _DriveCount, byte* _Dir, UIntPtr _DirCount, byte* _Filename, UIntPtr _FilenameCount, byte* _Ext, UIntPtr _ExtCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int getenv_s(UIntPtr* _RequiredCount, byte* _Buffer, UIntPtr _BufferCount, byte* _VarName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int* __p___argc();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* getenv(byte* _VarName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _dupenv_s(byte** _Buffer, UIntPtr* _BufferCount, byte* _VarName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int system(byte* _Command);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _putenv(byte* _EnvString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _putenv_s(byte* _Name, byte* _Value);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _searchenv_s(byte* _Filename, byte* _VarName, byte* _Buffer, UIntPtr _BufferCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _searchenv(byte* _Filename, byte* _VarName, byte* _Buffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _seterrormode(int _Mode);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _beep(uint _Frequency, uint _Duration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _sleep(UInt32 _Duration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* ecvt(double _Value, int _DigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* fcvt(double _Value, int _FractionalDigitCount, int* _PtDec, int* _PtSign);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* gcvt(double _Value, int _DigitCount, byte* _DstBuf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* itoa(int _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* ltoa(Int32 _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void swab(byte* _Buf1, byte* _Buf2, int _SizeInBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* ultoa(UInt32 _Value, byte* _Buffer, int _Radix);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int putenv(byte* _EnvString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option onexit(Option _Func);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IUnknown_QueryInterface_Proxy(IUnknown* This, _GUID* riid, void** ppvObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IUnknown_QueryInterface_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 IUnknown_AddRef_Proxy(IUnknown* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IUnknown_AddRef_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 IUnknown_Release_Proxy(IUnknown* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IUnknown_Release_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IClassFactory_RemoteCreateInstance_Proxy(IClassFactory* This, _GUID* riid, IUnknown** ppvObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IClassFactory_RemoteCreateInstance_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IClassFactory_RemoteLockServer_Proxy(IClassFactory* This, int fLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IClassFactory_RemoteLockServer_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IClassFactory_CreateInstance_Proxy(IClassFactory* This, IUnknown* pUnkOuter, _GUID* riid, void** ppvObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IClassFactory_CreateInstance_Stub(IClassFactory* This, _GUID* riid, IUnknown** ppvObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IClassFactory_LockServer_Proxy(IClassFactory* This, int fLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IClassFactory_LockServer_Stub(IClassFactory* This, int fLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumUnknown_RemoteNext_Proxy(IEnumUnknown* This, UInt32 celt, IUnknown** rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumUnknown_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumString_RemoteNext_Proxy(IEnumString* This, UInt32 celt, ushort* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumString_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ISequentialStream_RemoteRead_Proxy(ISequentialStream* This, byte* pv, UInt32 cb, UInt32* pcbRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ISequentialStream_RemoteRead_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ISequentialStream_RemoteWrite_Proxy(ISequentialStream* This, byte* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ISequentialStream_RemoteWrite_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStream_RemoteSeek_Proxy(IStream* This, _LARGE_INTEGER dlibMove, UInt32 dwOrigin, _ULARGE_INTEGER* plibNewPosition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IStream_RemoteSeek_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStream_RemoteCopyTo_Proxy(IStream* This, IStream* pstm, _ULARGE_INTEGER cb, _ULARGE_INTEGER* pcbRead, _ULARGE_INTEGER* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IStream_RemoteCopyTo_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumUnknown_Next_Proxy(IEnumUnknown* This, UInt32 celt, IUnknown** rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumUnknown_Next_Stub(IEnumUnknown* This, UInt32 celt, IUnknown** rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumString_Next_Proxy(IEnumString* This, UInt32 celt, ushort* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumString_Next_Stub(IEnumString* This, UInt32 celt, ushort* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ISequentialStream_Read_Proxy(ISequentialStream* This, void* pv, UInt32 cb, UInt32* pcbRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ISequentialStream_Read_Stub(ISequentialStream* This, byte* pv, UInt32 cb, UInt32* pcbRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ISequentialStream_Write_Proxy(ISequentialStream* This, void* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ISequentialStream_Write_Stub(ISequentialStream* This, byte* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStream_Seek_Proxy(IStream* This, _LARGE_INTEGER dlibMove, UInt32 dwOrigin, _ULARGE_INTEGER* plibNewPosition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStream_Seek_Stub(IStream* This, _LARGE_INTEGER dlibMove, UInt32 dwOrigin, _ULARGE_INTEGER* plibNewPosition);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStream_CopyTo_Proxy(IStream* This, IStream* pstm, _ULARGE_INTEGER cb, _ULARGE_INTEGER* pcbRead, _ULARGE_INTEGER* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStream_CopyTo_Stub(IStream* This, IStream* pstm, _ULARGE_INTEGER cb, _ULARGE_INTEGER* pcbRead, _ULARGE_INTEGER* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetMalloc(UInt32 dwMemContext, IMalloc** ppMalloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateStreamOnHGlobal(void* hGlobal, int fDeleteOnRelease, IStream** ppstm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetHGlobalFromStream(IStream* pstm, void** phglobal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CoUninitialize();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CoGetCurrentProcess();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInitializeEx(void* pvReserved, UInt32 dwCoInit);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetCallerTID(UInt32 lpdwTID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetCurrentLogicalThreadId(_GUID* pguid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetContextToken(ulong* pToken);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetDefaultContext(_APTTYPE aptType, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetApartmentType(_APTTYPE* pAptType, _APTTYPEQUALIFIER* pAptQualifier);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoDecodeProxy(UInt32 dwClientPid, ulong ui64ProxyAddress, tagServerInformation* pServerInformation);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoIncrementMTAUsage(CO_MTA_USAGE_COOKIE__** pCookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoDecrementMTAUsage(CO_MTA_USAGE_COOKIE__* Cookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoAllowUnmarshalerCLSID(_GUID* clsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetObjectContext(_GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetClassObject(_GUID* rclsid, UInt32 dwClsContext, void* pvReserved, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterClassObject(_GUID* rclsid, IUnknown* pUnk, UInt32 dwClsContext, UInt32 flags, UInt32 lpdwRegister);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRevokeClassObject(UInt32 dwRegister);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoResumeClassObjects();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoSuspendClassObjects();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CoAddRefServerProcess();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CoReleaseServerProcess();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetPSClsid(_GUID* riid, _GUID* pClsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterPSClsid(_GUID* riid, _GUID* rclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterSurrogate(ISurrogate* pSurrogate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetMarshalSizeMax(UInt32* pulSize, _GUID* riid, IUnknown* pUnk, UInt32 dwDestContext, void* pvDestContext, UInt32 mshlflags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoMarshalInterface(IStream* pStm, _GUID* riid, IUnknown* pUnk, UInt32 dwDestContext, void* pvDestContext, UInt32 mshlflags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoUnmarshalInterface(IStream* pStm, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoMarshalHresult(IStream* pstm, Int32 hresult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoUnmarshalHresult(IStream* pstm, Int32* phresult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoReleaseMarshalData(IStream* pStm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoDisconnectObject(IUnknown* pUnk, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoLockObjectExternal(IUnknown* pUnk, int fLock, int fLastUnlockReleases);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetStandardMarshal(_GUID* riid, IUnknown* pUnk, UInt32 dwDestContext, void* pvDestContext, UInt32 mshlflags, IMarshal** ppMarshal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetStdMarshalEx(IUnknown* pUnkOuter, UInt32 smexflags, IUnknown** ppUnkInner);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CoIsHandlerConnected(IUnknown* pUnk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoMarshalInterThreadInterfaceInStream(_GUID* riid, IUnknown* pUnk, IStream** ppStm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetInterfaceAndReleaseStream(IStream* pStm, _GUID* iid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoCreateFreeThreadedMarshaler(IUnknown* punkOuter, IUnknown** ppunkMarshal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CoFreeUnusedLibraries();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CoFreeUnusedLibrariesEx(UInt32 dwUnloadDelay, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoDisconnectContext(UInt32 dwTimeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInitializeSecurity(void* pSecDesc, Int32 cAuthSvc, tagSOLE_AUTHENTICATION_SERVICE* asAuthSvc, void* pReserved1, UInt32 dwAuthnLevel, UInt32 dwImpLevel, void* pAuthList, UInt32 dwCapabilities, void* pReserved3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetCallContext(_GUID* riid, void** ppInterface);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoQueryProxyBlanket(IUnknown* pProxy, UInt32* pwAuthnSvc, UInt32* pAuthzSvc, ushort* pServerPrincName, UInt32* pAuthnLevel, UInt32* pImpLevel, void** pAuthInfo, UInt32* pCapabilites);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoSetProxyBlanket(IUnknown* pProxy, UInt32 dwAuthnSvc, UInt32 dwAuthzSvc, ushort* pServerPrincName, UInt32 dwAuthnLevel, UInt32 dwImpLevel, void* pAuthInfo, UInt32 dwCapabilities);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoCopyProxy(IUnknown* pProxy, IUnknown** ppCopy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoQueryClientBlanket(UInt32* pAuthnSvc, UInt32* pAuthzSvc, ushort* pServerPrincName, UInt32* pAuthnLevel, UInt32* pImpLevel, void** pPrivs, UInt32* pCapabilities);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoImpersonateClient();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRevertToSelf();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoQueryAuthenticationServices(UInt32* pcAuthSvc, tagSOLE_AUTHENTICATION_SERVICE** asAuthSvc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoSwitchCallContext(IUnknown* pNewObject, IUnknown** ppOldObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoCreateInstance(_GUID* rclsid, IUnknown* pUnkOuter, UInt32 dwClsContext, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoCreateInstanceEx(_GUID* Clsid, IUnknown* punkOuter, UInt32 dwClsCtx, _COSERVERINFO* pServerInfo, UInt32 dwCount, tagMULTI_QI* pResults);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoCreateInstanceFromApp(_GUID* Clsid, IUnknown* punkOuter, UInt32 dwClsCtx, void* reserved, UInt32 dwCount, tagMULTI_QI* pResults);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterActivationFilter(IActivationFilter* pActivationFilter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetCancelObject(UInt32 dwThreadId, _GUID* iid, void** ppUnk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoSetCancelObject(IUnknown* pUnk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoCancelCall(UInt32 dwThreadId, UInt32 ulTimeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoTestCancel();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoEnableCallCancellation(void* pReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoDisableCallCancellation(void* pReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StringFromCLSID(_GUID* rclsid, ushort* lplpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CLSIDFromString(ushort lpsz, _GUID pclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StringFromIID(_GUID* rclsid, ushort* lplpsz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IIDFromString(ushort lpsz, _GUID lpiid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ProgIDFromCLSID(_GUID* clsid, ushort* lplpszProgID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CLSIDFromProgID(ushort lpszProgID, _GUID lpclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StringFromGUID2(_GUID* rguid, ushort lpsz, int cchMax);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoCreateGuid(_GUID* pguid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 PropVariantCopy(tagPROPVARIANT* pvarDest, tagPROPVARIANT* pvarSrc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 PropVariantClear(tagPROPVARIANT* pvar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 FreePropVariantArray(UInt32 cVariants, tagPROPVARIANT* rgvars);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoWaitForMultipleHandles(UInt32 dwFlags, UInt32 dwTimeout, UInt32 cHandles, void* pHandles, UInt32 lpdwindex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoWaitForMultipleObjects(UInt32 dwFlags, UInt32 dwTimeout, UInt32 cHandles, void** pHandles, UInt32 lpdwindex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetTreatAsClass(_GUID* clsidOld, _GUID pClsidNew);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInvalidateRemoteMachineBindings(ushort pszMachineName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RoGetAgileReference(int options, _GUID* riid, IUnknown* pUnk, IAgileReference** ppAgileReference);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DllGetClassObject(_GUID* rclsid, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DllCanUnloadNow();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CoTaskMemAlloc(ulong cb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* CoTaskMemRealloc(void* pv, ulong cb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CoTaskMemFree(void* pv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoFileTimeNow(_FILETIME* lpFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CLSIDFromProgIDEx(ushort lpszProgID, _GUID lpclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterDeviceCatalog(ushort deviceInstanceId, CO_DEVICE_CATALOG_COOKIE__** cookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRevokeDeviceCatalog(CO_DEVICE_CATALOG_COOKIE__* cookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindCtx_RemoteSetBindOptions_Proxy(IBindCtx* This, tagBIND_OPTS2* pbindopts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IBindCtx_RemoteSetBindOptions_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindCtx_RemoteGetBindOptions_Proxy(IBindCtx* This, tagBIND_OPTS2* pbindopts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IBindCtx_RemoteGetBindOptions_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumMoniker_RemoteNext_Proxy(IEnumMoniker* This, UInt32 celt, IMoniker** rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumMoniker_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IRunnableObject_RemoteIsRunning_Proxy(IRunnableObject* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IRunnableObject_RemoteIsRunning_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IMoniker_RemoteBindToObject_Proxy(IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, _GUID* riidResult, IUnknown** ppvResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IMoniker_RemoteBindToObject_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IMoniker_RemoteBindToStorage_Proxy(IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, _GUID* riid, IUnknown** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IMoniker_RemoteBindToStorage_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATSTG_RemoteNext_Proxy(IEnumSTATSTG* This, UInt32 celt, tagSTATSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumSTATSTG_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_RemoteOpenStream_Proxy(IStorage* This, ushort* pwcsName, UInt32 cbReserved1, byte* reserved1, UInt32 grfMode, UInt32 reserved2, IStream** ppstm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IStorage_RemoteOpenStream_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_RemoteCopyTo_Proxy(IStorage* This, UInt32 ciidExclude, _GUID* rgiidExclude, ushort snbExclude, IStorage* pstgDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IStorage_RemoteCopyTo_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_RemoteEnumElements_Proxy(IStorage* This, UInt32 reserved1, UInt32 cbReserved2, byte* reserved2, UInt32 reserved3, IEnumSTATSTG** ppenum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IStorage_RemoteEnumElements_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ILockBytes_RemoteReadAt_Proxy(ILockBytes* This, _ULARGE_INTEGER ulOffset, byte* pv, UInt32 cb, UInt32* pcbRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ILockBytes_RemoteReadAt_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ILockBytes_RemoteWriteAt_Proxy(ILockBytes* This, _ULARGE_INTEGER ulOffset, byte* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ILockBytes_RemoteWriteAt_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumFORMATETC_RemoteNext_Proxy(IEnumFORMATETC* This, UInt32 celt, tagFORMATETC* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumFORMATETC_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATDATA_RemoteNext_Proxy(IEnumSTATDATA* This, UInt32 celt, tagSTATDATA* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumSTATDATA_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_RemoteOnDataChange_Proxy(IAdviseSink* This, tagFORMATETC* pFormatetc, uSTGMEDIUM* pStgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_RemoteOnDataChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_RemoteOnViewChange_Proxy(IAdviseSink* This, UInt32 dwAspect, Int32 lindex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_RemoteOnViewChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_RemoteOnRename_Proxy(IAdviseSink* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_RemoteOnRename_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_RemoteOnSave_Proxy(IAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_RemoteOnSave_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_RemoteOnClose_Proxy(IAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_RemoteOnClose_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy(AsyncIAdviseSink* This, tagFORMATETC* pFormatetc, uSTGMEDIUM* pStgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy(AsyncIAdviseSink* This, UInt32 dwAspect, Int32 lindex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_RemoteOnRename_Proxy(AsyncIAdviseSink* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_RemoteOnRename_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_RemoteOnRename_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_RemoteOnRename_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_RemoteOnSave_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_RemoteOnSave_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_RemoteOnSave_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_RemoteOnSave_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_RemoteOnClose_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_RemoteOnClose_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_RemoteOnClose_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_RemoteOnClose_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink2_RemoteOnLinkSrcChange_Proxy(IAdviseSink2* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink2_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy(AsyncIAdviseSink2* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_RemoteGetData_Proxy(IDataObject* This, tagFORMATETC* pformatetcIn, uSTGMEDIUM* pRemoteMedium);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IDataObject_RemoteGetData_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_RemoteGetDataHere_Proxy(IDataObject* This, tagFORMATETC* pformatetc, uSTGMEDIUM* pRemoteMedium);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IDataObject_RemoteGetDataHere_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_RemoteSetData_Proxy(IDataObject* This, tagFORMATETC* pformatetc, _FLAG_STGMEDIUM* pmedium, int fRelease);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IDataObject_RemoteSetData_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IFillLockBytes_RemoteFillAppend_Proxy(IFillLockBytes* This, byte* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IFillLockBytes_RemoteFillAppend_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IFillLockBytes_RemoteFillAt_Proxy(IFillLockBytes* This, _ULARGE_INTEGER ulOffset, byte* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IFillLockBytes_RemoteFillAt_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ASYNC_STGMEDIUM_UserSize(UInt32* arg1, UInt32 arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* ASYNC_STGMEDIUM_UserMarshal(UInt32* arg1, byte* arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* ASYNC_STGMEDIUM_UserUnmarshal(UInt32* arg1, byte* arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ASYNC_STGMEDIUM_UserFree(UInt32* arg1, uSTGMEDIUM* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CLIPFORMAT_UserSize(UInt32* arg1, UInt32 arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* CLIPFORMAT_UserMarshal(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* CLIPFORMAT_UserUnmarshal(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CLIPFORMAT_UserFree(UInt32* arg1, ushort* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 FLAG_STGMEDIUM_UserSize(UInt32* arg1, UInt32 arg2, _FLAG_STGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* FLAG_STGMEDIUM_UserMarshal(UInt32* arg1, byte* arg2, _FLAG_STGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* FLAG_STGMEDIUM_UserUnmarshal(UInt32* arg1, byte* arg2, _FLAG_STGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FLAG_STGMEDIUM_UserFree(UInt32* arg1, _FLAG_STGMEDIUM* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HBITMAP_UserSize(UInt32* arg1, UInt32 arg2, HBITMAP__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HBITMAP_UserMarshal(UInt32* arg1, byte* arg2, HBITMAP__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HBITMAP_UserUnmarshal(UInt32* arg1, byte* arg2, HBITMAP__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HBITMAP_UserFree(UInt32* arg1, HBITMAP__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HDC_UserSize(UInt32* arg1, UInt32 arg2, HDC__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HDC_UserMarshal(UInt32* arg1, byte* arg2, HDC__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HDC_UserUnmarshal(UInt32* arg1, byte* arg2, HDC__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HDC_UserFree(UInt32* arg1, HDC__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HICON_UserSize(UInt32* arg1, UInt32 arg2, HICON__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HICON_UserMarshal(UInt32* arg1, byte* arg2, HICON__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HICON_UserUnmarshal(UInt32* arg1, byte* arg2, HICON__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HICON_UserFree(UInt32* arg1, HICON__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SNB_UserSize(UInt32* arg1, UInt32 arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* SNB_UserMarshal(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* SNB_UserUnmarshal(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SNB_UserFree(UInt32* arg1, ushort* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 STGMEDIUM_UserSize(UInt32* arg1, UInt32 arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* STGMEDIUM_UserMarshal(UInt32* arg1, byte* arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* STGMEDIUM_UserUnmarshal(UInt32* arg1, byte* arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void STGMEDIUM_UserFree(UInt32* arg1, uSTGMEDIUM* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ASYNC_STGMEDIUM_UserSize64(UInt32* arg1, UInt32 arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* ASYNC_STGMEDIUM_UserMarshal64(UInt32* arg1, byte* arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* ASYNC_STGMEDIUM_UserUnmarshal64(UInt32* arg1, byte* arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ASYNC_STGMEDIUM_UserFree64(UInt32* arg1, uSTGMEDIUM* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CLIPFORMAT_UserSize64(UInt32* arg1, UInt32 arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* CLIPFORMAT_UserMarshal64(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* CLIPFORMAT_UserUnmarshal64(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CLIPFORMAT_UserFree64(UInt32* arg1, ushort* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 FLAG_STGMEDIUM_UserSize64(UInt32* arg1, UInt32 arg2, _FLAG_STGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* FLAG_STGMEDIUM_UserMarshal64(UInt32* arg1, byte* arg2, _FLAG_STGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* FLAG_STGMEDIUM_UserUnmarshal64(UInt32* arg1, byte* arg2, _FLAG_STGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FLAG_STGMEDIUM_UserFree64(UInt32* arg1, _FLAG_STGMEDIUM* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HBITMAP_UserSize64(UInt32* arg1, UInt32 arg2, HBITMAP__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HBITMAP_UserMarshal64(UInt32* arg1, byte* arg2, HBITMAP__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HBITMAP_UserUnmarshal64(UInt32* arg1, byte* arg2, HBITMAP__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HBITMAP_UserFree64(UInt32* arg1, HBITMAP__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HDC_UserSize64(UInt32* arg1, UInt32 arg2, HDC__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HDC_UserMarshal64(UInt32* arg1, byte* arg2, HDC__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HDC_UserUnmarshal64(UInt32* arg1, byte* arg2, HDC__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HDC_UserFree64(UInt32* arg1, HDC__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HICON_UserSize64(UInt32* arg1, UInt32 arg2, HICON__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HICON_UserMarshal64(UInt32* arg1, byte* arg2, HICON__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HICON_UserUnmarshal64(UInt32* arg1, byte* arg2, HICON__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HICON_UserFree64(UInt32* arg1, HICON__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SNB_UserSize64(UInt32* arg1, UInt32 arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* SNB_UserMarshal64(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* SNB_UserUnmarshal64(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SNB_UserFree64(UInt32* arg1, ushort* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 STGMEDIUM_UserSize64(UInt32* arg1, UInt32 arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* STGMEDIUM_UserMarshal64(UInt32* arg1, byte* arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* STGMEDIUM_UserUnmarshal64(UInt32* arg1, byte* arg2, uSTGMEDIUM* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void STGMEDIUM_UserFree64(UInt32* arg1, uSTGMEDIUM* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindCtx_SetBindOptions_Proxy(IBindCtx* This, tagBIND_OPTS* pbindopts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindCtx_SetBindOptions_Stub(IBindCtx* This, tagBIND_OPTS2* pbindopts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindCtx_GetBindOptions_Proxy(IBindCtx* This, tagBIND_OPTS* pbindopts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindCtx_GetBindOptions_Stub(IBindCtx* This, tagBIND_OPTS2* pbindopts);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumMoniker_Next_Proxy(IEnumMoniker* This, UInt32 celt, IMoniker** rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumMoniker_Next_Stub(IEnumMoniker* This, UInt32 celt, IMoniker** rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IRunnableObject_IsRunning_Proxy(IRunnableObject* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IRunnableObject_IsRunning_Stub(IRunnableObject* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IMoniker_BindToObject_Proxy(IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, _GUID* riidResult, void** ppvResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IMoniker_BindToObject_Stub(IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, _GUID* riidResult, IUnknown** ppvResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IMoniker_BindToStorage_Proxy(IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, _GUID* riid, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IMoniker_BindToStorage_Stub(IMoniker* This, IBindCtx* pbc, IMoniker* pmkToLeft, _GUID* riid, IUnknown** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATSTG_Next_Proxy(IEnumSTATSTG* This, UInt32 celt, tagSTATSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATSTG_Next_Stub(IEnumSTATSTG* This, UInt32 celt, tagSTATSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_OpenStream_Proxy(IStorage* This, ushort* pwcsName, void* reserved1, UInt32 grfMode, UInt32 reserved2, IStream** ppstm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_OpenStream_Stub(IStorage* This, ushort* pwcsName, UInt32 cbReserved1, byte* reserved1, UInt32 grfMode, UInt32 reserved2, IStream** ppstm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_CopyTo_Proxy(IStorage* This, UInt32 ciidExclude, _GUID* rgiidExclude, ushort snbExclude, IStorage* pstgDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_CopyTo_Stub(IStorage* This, UInt32 ciidExclude, _GUID* rgiidExclude, ushort snbExclude, IStorage* pstgDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_EnumElements_Proxy(IStorage* This, UInt32 reserved1, void* reserved2, UInt32 reserved3, IEnumSTATSTG** ppenum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IStorage_EnumElements_Stub(IStorage* This, UInt32 reserved1, UInt32 cbReserved2, byte* reserved2, UInt32 reserved3, IEnumSTATSTG** ppenum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ILockBytes_ReadAt_Proxy(ILockBytes* This, _ULARGE_INTEGER ulOffset, void* pv, UInt32 cb, UInt32* pcbRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ILockBytes_ReadAt_Stub(ILockBytes* This, _ULARGE_INTEGER ulOffset, byte* pv, UInt32 cb, UInt32* pcbRead);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ILockBytes_WriteAt_Proxy(ILockBytes* This, _ULARGE_INTEGER ulOffset, void* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ILockBytes_WriteAt_Stub(ILockBytes* This, _ULARGE_INTEGER ulOffset, byte* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumFORMATETC_Next_Proxy(IEnumFORMATETC* This, UInt32 celt, tagFORMATETC* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumFORMATETC_Next_Stub(IEnumFORMATETC* This, UInt32 celt, tagFORMATETC* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATDATA_Next_Proxy(IEnumSTATDATA* This, UInt32 celt, tagSTATDATA* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATDATA_Next_Stub(IEnumSTATDATA* This, UInt32 celt, tagSTATDATA* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_OnDataChange_Proxy(IAdviseSink* This, tagFORMATETC* pFormatetc, uSTGMEDIUM* pStgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_OnDataChange_Stub(IAdviseSink* This, tagFORMATETC* pFormatetc, uSTGMEDIUM* pStgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_OnViewChange_Proxy(IAdviseSink* This, UInt32 dwAspect, Int32 lindex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_OnViewChange_Stub(IAdviseSink* This, UInt32 dwAspect, Int32 lindex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_OnRename_Proxy(IAdviseSink* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_OnRename_Stub(IAdviseSink* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_OnSave_Proxy(IAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_OnSave_Stub(IAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink_OnClose_Proxy(IAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink_OnClose_Stub(IAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_OnDataChange_Proxy(AsyncIAdviseSink* This, tagFORMATETC* pFormatetc, uSTGMEDIUM* pStgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_OnDataChange_Stub(AsyncIAdviseSink* This, tagFORMATETC* pFormatetc, uSTGMEDIUM* pStgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_OnDataChange_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_OnDataChange_Stub(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_OnViewChange_Proxy(AsyncIAdviseSink* This, UInt32 dwAspect, Int32 lindex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_OnViewChange_Stub(AsyncIAdviseSink* This, UInt32 dwAspect, Int32 lindex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_OnViewChange_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_OnViewChange_Stub(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_OnRename_Proxy(AsyncIAdviseSink* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_OnRename_Stub(AsyncIAdviseSink* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_OnRename_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_OnRename_Stub(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_OnSave_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_OnSave_Stub(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_OnSave_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_OnSave_Stub(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Begin_OnClose_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Begin_OnClose_Stub(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink_Finish_OnClose_Proxy(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink_Finish_OnClose_Stub(AsyncIAdviseSink* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IAdviseSink2_OnLinkSrcChange_Proxy(IAdviseSink2* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IAdviseSink2_OnLinkSrcChange_Stub(IAdviseSink2* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy(AsyncIAdviseSink2* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub(AsyncIAdviseSink2* This, IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy(AsyncIAdviseSink2* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub(AsyncIAdviseSink2* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_GetData_Proxy(IDataObject* This, tagFORMATETC* pformatetcIn, uSTGMEDIUM* pmedium);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_GetData_Stub(IDataObject* This, tagFORMATETC* pformatetcIn, uSTGMEDIUM* pRemoteMedium);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_GetDataHere_Proxy(IDataObject* This, tagFORMATETC* pformatetc, uSTGMEDIUM* pmedium);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_GetDataHere_Stub(IDataObject* This, tagFORMATETC* pformatetc, uSTGMEDIUM* pRemoteMedium);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_SetData_Proxy(IDataObject* This, tagFORMATETC* pformatetc, uSTGMEDIUM* pmedium, int fRelease);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDataObject_SetData_Stub(IDataObject* This, tagFORMATETC* pformatetc, _FLAG_STGMEDIUM* pmedium, int fRelease);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IFillLockBytes_FillAppend_Proxy(IFillLockBytes* This, void* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IFillLockBytes_FillAppend_Stub(IFillLockBytes* This, byte* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IFillLockBytes_FillAt_Proxy(IFillLockBytes* This, _ULARGE_INTEGER ulOffset, void* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IFillLockBytes_FillAt_Stub(IFillLockBytes* This, _ULARGE_INTEGER ulOffset, byte* pv, UInt32 cb, UInt32* pcbWritten);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDispatch_RemoteInvoke_Proxy(IDispatch* This, Int32 dispIdMember, _GUID* riid, UInt32 lcid, UInt32 dwFlags, tagDISPPARAMS* pDispParams, tagVARIANT* pVarResult, tagEXCEPINFO* pExcepInfo, uint* pArgErr, uint cVarRef, uint* rgVarRefIdx, tagVARIANT* rgVarRef);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IDispatch_RemoteInvoke_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumVARIANT_RemoteNext_Proxy(IEnumVARIANT* This, UInt32 celt, tagVARIANT* rgVar, UInt32* pCeltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumVARIANT_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeComp_RemoteBind_Proxy(ITypeComp* This, ushort szName, UInt32 lHashVal, ushort wFlags, ITypeInfo** ppTInfo, tagDESCKIND* pDescKind, tagFUNCDESC** ppFuncDesc, tagVARDESC** ppVarDesc, ITypeComp** ppTypeComp, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeComp_RemoteBind_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeComp_RemoteBindType_Proxy(ITypeComp* This, ushort szName, UInt32 lHashVal, ITypeInfo** ppTInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeComp_RemoteBindType_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_RemoteGetTypeAttr_Proxy(ITypeInfo* This, tagTYPEATTR** ppTypeAttr, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_RemoteGetTypeAttr_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_RemoteGetFuncDesc_Proxy(ITypeInfo* This, uint index, tagFUNCDESC** ppFuncDesc, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_RemoteGetFuncDesc_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_RemoteGetVarDesc_Proxy(ITypeInfo* This, uint index, tagVARDESC** ppVarDesc, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_RemoteGetVarDesc_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_RemoteGetNames_Proxy(ITypeInfo* This, Int32 memid, ushort* rgBstrNames, uint cMaxNames, uint* pcNames);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_RemoteGetNames_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_LocalGetIDsOfNames_Proxy(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_LocalGetIDsOfNames_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_LocalInvoke_Proxy(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_LocalInvoke_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_RemoteGetDocumentation_Proxy(ITypeInfo* This, Int32 memid, UInt32 refPtrFlags, ushort* pBstrName, ushort* pBstrDocString, UInt32* pdwHelpContext, ushort* pBstrHelpFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_RemoteGetDocumentation_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_RemoteGetDllEntry_Proxy(ITypeInfo* This, Int32 memid, tagINVOKEKIND invKind, UInt32 refPtrFlags, ushort* pBstrDllName, ushort* pBstrName, ushort* pwOrdinal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_RemoteGetDllEntry_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_LocalAddressOfMember_Proxy(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_LocalAddressOfMember_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_RemoteCreateInstance_Proxy(ITypeInfo* This, _GUID* riid, IUnknown** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_RemoteCreateInstance_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_RemoteGetContainingTypeLib_Proxy(ITypeInfo* This, ITypeLib** ppTLib, uint* pIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_RemoteGetContainingTypeLib_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_LocalReleaseTypeAttr_Proxy(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_LocalReleaseTypeAttr_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_LocalReleaseFuncDesc_Proxy(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_LocalReleaseFuncDesc_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_LocalReleaseVarDesc_Proxy(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_LocalReleaseVarDesc_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo2_RemoteGetDocumentation2_Proxy(ITypeInfo2* This, Int32 memid, UInt32 lcid, UInt32 refPtrFlags, ushort* pbstrHelpString, UInt32* pdwHelpStringContext, ushort* pbstrHelpStringDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo2_RemoteGetDocumentation2_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_RemoteGetTypeInfoCount_Proxy(ITypeLib* This, uint* pcTInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib_RemoteGetTypeInfoCount_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_RemoteGetLibAttr_Proxy(ITypeLib* This, tagTLIBATTR** ppTLibAttr, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib_RemoteGetLibAttr_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_RemoteGetDocumentation_Proxy(ITypeLib* This, int index, UInt32 refPtrFlags, ushort* pBstrName, ushort* pBstrDocString, UInt32* pdwHelpContext, ushort* pBstrHelpFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib_RemoteGetDocumentation_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_RemoteIsName_Proxy(ITypeLib* This, ushort szNameBuf, UInt32 lHashVal, int* pfName, ushort* pBstrLibName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib_RemoteIsName_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_RemoteFindName_Proxy(ITypeLib* This, ushort szNameBuf, UInt32 lHashVal, ITypeInfo** ppTInfo, Int32* rgMemId, ushort* pcFound, ushort* pBstrLibName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib_RemoteFindName_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_LocalReleaseTLibAttr_Proxy(ITypeLib* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib_LocalReleaseTLibAttr_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib2_RemoteGetLibStatistics_Proxy(ITypeLib2* This, UInt32* pcUniqueNames, UInt32* pcchUniqueNames);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib2_RemoteGetLibStatistics_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib2_RemoteGetDocumentation2_Proxy(ITypeLib2* This, int index, UInt32 lcid, UInt32 refPtrFlags, ushort* pbstrHelpString, UInt32* pdwHelpStringContext, ushort* pbstrHelpStringDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib2_RemoteGetDocumentation2_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IPropertyBag_RemoteRead_Proxy(IPropertyBag* This, ushort pszPropName, tagVARIANT* pVar, IErrorLog* pErrorLog, UInt32 varType, IUnknown* pUnkObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IPropertyBag_RemoteRead_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 BSTR_UserSize(UInt32* arg1, UInt32 arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* BSTR_UserMarshal(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* BSTR_UserUnmarshal(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void BSTR_UserFree(UInt32* arg1, ushort* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CLEANLOCALSTORAGE_UserSize(UInt32* arg1, UInt32 arg2, tagCLEANLOCALSTORAGE* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* CLEANLOCALSTORAGE_UserMarshal(UInt32* arg1, byte* arg2, tagCLEANLOCALSTORAGE* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* CLEANLOCALSTORAGE_UserUnmarshal(UInt32* arg1, byte* arg2, tagCLEANLOCALSTORAGE* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CLEANLOCALSTORAGE_UserFree(UInt32* arg1, tagCLEANLOCALSTORAGE* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 VARIANT_UserSize(UInt32* arg1, UInt32 arg2, tagVARIANT* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* VARIANT_UserMarshal(UInt32* arg1, byte* arg2, tagVARIANT* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* VARIANT_UserUnmarshal(UInt32* arg1, byte* arg2, tagVARIANT* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void VARIANT_UserFree(UInt32* arg1, tagVARIANT* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 BSTR_UserSize64(UInt32* arg1, UInt32 arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* BSTR_UserMarshal64(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* BSTR_UserUnmarshal64(UInt32* arg1, byte* arg2, ushort* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void BSTR_UserFree64(UInt32* arg1, ushort* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CLEANLOCALSTORAGE_UserSize64(UInt32* arg1, UInt32 arg2, tagCLEANLOCALSTORAGE* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* CLEANLOCALSTORAGE_UserMarshal64(UInt32* arg1, byte* arg2, tagCLEANLOCALSTORAGE* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* CLEANLOCALSTORAGE_UserUnmarshal64(UInt32* arg1, byte* arg2, tagCLEANLOCALSTORAGE* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CLEANLOCALSTORAGE_UserFree64(UInt32* arg1, tagCLEANLOCALSTORAGE* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 VARIANT_UserSize64(UInt32* arg1, UInt32 arg2, tagVARIANT* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* VARIANT_UserMarshal64(UInt32* arg1, byte* arg2, tagVARIANT* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* VARIANT_UserUnmarshal64(UInt32* arg1, byte* arg2, tagVARIANT* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void VARIANT_UserFree64(UInt32* arg1, tagVARIANT* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDispatch_Invoke_Proxy(IDispatch* This, Int32 dispIdMember, _GUID* riid, UInt32 lcid, ushort wFlags, tagDISPPARAMS* pDispParams, tagVARIANT* pVarResult, tagEXCEPINFO* pExcepInfo, uint* puArgErr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IDispatch_Invoke_Stub(IDispatch* This, Int32 dispIdMember, _GUID* riid, UInt32 lcid, UInt32 dwFlags, tagDISPPARAMS* pDispParams, tagVARIANT* pVarResult, tagEXCEPINFO* pExcepInfo, uint* pArgErr, uint cVarRef, uint* rgVarRefIdx, tagVARIANT* rgVarRef);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumVARIANT_Next_Proxy(IEnumVARIANT* This, UInt32 celt, tagVARIANT* rgVar, UInt32* pCeltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumVARIANT_Next_Stub(IEnumVARIANT* This, UInt32 celt, tagVARIANT* rgVar, UInt32* pCeltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeComp_Bind_Proxy(ITypeComp* This, ushort szName, UInt32 lHashVal, ushort wFlags, ITypeInfo** ppTInfo, tagDESCKIND* pDescKind, tagBINDPTR* pBindPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeComp_Bind_Stub(ITypeComp* This, ushort szName, UInt32 lHashVal, ushort wFlags, ITypeInfo** ppTInfo, tagDESCKIND* pDescKind, tagFUNCDESC** ppFuncDesc, tagVARDESC** ppVarDesc, ITypeComp** ppTypeComp, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeComp_BindType_Proxy(ITypeComp* This, ushort szName, UInt32 lHashVal, ITypeInfo** ppTInfo, ITypeComp** ppTComp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeComp_BindType_Stub(ITypeComp* This, ushort szName, UInt32 lHashVal, ITypeInfo** ppTInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetTypeAttr_Proxy(ITypeInfo* This, tagTYPEATTR** ppTypeAttr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetTypeAttr_Stub(ITypeInfo* This, tagTYPEATTR** ppTypeAttr, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetFuncDesc_Proxy(ITypeInfo* This, uint index, tagFUNCDESC** ppFuncDesc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetFuncDesc_Stub(ITypeInfo* This, uint index, tagFUNCDESC** ppFuncDesc, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetVarDesc_Proxy(ITypeInfo* This, uint index, tagVARDESC** ppVarDesc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetVarDesc_Stub(ITypeInfo* This, uint index, tagVARDESC** ppVarDesc, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetNames_Proxy(ITypeInfo* This, Int32 memid, ushort* rgBstrNames, uint cMaxNames, uint* pcNames);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetNames_Stub(ITypeInfo* This, Int32 memid, ushort* rgBstrNames, uint cMaxNames, uint* pcNames);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetIDsOfNames_Proxy(ITypeInfo* This, ushort* rgszNames, uint cNames, Int32* pMemId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetIDsOfNames_Stub(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_Invoke_Proxy(ITypeInfo* This, void* pvInstance, Int32 memid, ushort wFlags, tagDISPPARAMS* pDispParams, tagVARIANT* pVarResult, tagEXCEPINFO* pExcepInfo, uint* puArgErr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_Invoke_Stub(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetDocumentation_Proxy(ITypeInfo* This, Int32 memid, ushort* pBstrName, ushort* pBstrDocString, UInt32* pdwHelpContext, ushort* pBstrHelpFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetDocumentation_Stub(ITypeInfo* This, Int32 memid, UInt32 refPtrFlags, ushort* pBstrName, ushort* pBstrDocString, UInt32* pdwHelpContext, ushort* pBstrHelpFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetDllEntry_Proxy(ITypeInfo* This, Int32 memid, tagINVOKEKIND invKind, ushort* pBstrDllName, ushort* pBstrName, ushort* pwOrdinal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetDllEntry_Stub(ITypeInfo* This, Int32 memid, tagINVOKEKIND invKind, UInt32 refPtrFlags, ushort* pBstrDllName, ushort* pBstrName, ushort* pwOrdinal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_AddressOfMember_Proxy(ITypeInfo* This, Int32 memid, tagINVOKEKIND invKind, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_AddressOfMember_Stub(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_CreateInstance_Proxy(ITypeInfo* This, IUnknown* pUnkOuter, _GUID* riid, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_CreateInstance_Stub(ITypeInfo* This, _GUID* riid, IUnknown** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetContainingTypeLib_Proxy(ITypeInfo* This, ITypeLib** ppTLib, uint* pIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_GetContainingTypeLib_Stub(ITypeInfo* This, ITypeLib** ppTLib, uint* pIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_ReleaseTypeAttr_Proxy(ITypeInfo* This, tagTYPEATTR* pTypeAttr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_ReleaseTypeAttr_Stub(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_ReleaseFuncDesc_Proxy(ITypeInfo* This, tagFUNCDESC* pFuncDesc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_ReleaseFuncDesc_Stub(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeInfo_ReleaseVarDesc_Proxy(ITypeInfo* This, tagVARDESC* pVarDesc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo_ReleaseVarDesc_Stub(ITypeInfo* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo2_GetDocumentation2_Proxy(ITypeInfo2* This, Int32 memid, UInt32 lcid, ushort* pbstrHelpString, UInt32* pdwHelpStringContext, ushort* pbstrHelpStringDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeInfo2_GetDocumentation2_Stub(ITypeInfo2* This, Int32 memid, UInt32 lcid, UInt32 refPtrFlags, ushort* pbstrHelpString, UInt32* pdwHelpStringContext, ushort* pbstrHelpStringDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ITypeLib_GetTypeInfoCount_Proxy(ITypeLib* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_GetTypeInfoCount_Stub(ITypeLib* This, uint* pcTInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_GetLibAttr_Proxy(ITypeLib* This, tagTLIBATTR** ppTLibAttr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_GetLibAttr_Stub(ITypeLib* This, tagTLIBATTR** ppTLibAttr, tagCLEANLOCALSTORAGE* pDummy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_GetDocumentation_Proxy(ITypeLib* This, int index, ushort* pBstrName, ushort* pBstrDocString, UInt32* pdwHelpContext, ushort* pBstrHelpFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_GetDocumentation_Stub(ITypeLib* This, int index, UInt32 refPtrFlags, ushort* pBstrName, ushort* pBstrDocString, UInt32* pdwHelpContext, ushort* pBstrHelpFile);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_IsName_Proxy(ITypeLib* This, ushort szNameBuf, UInt32 lHashVal, int* pfName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_IsName_Stub(ITypeLib* This, ushort szNameBuf, UInt32 lHashVal, int* pfName, ushort* pBstrLibName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_FindName_Proxy(ITypeLib* This, ushort szNameBuf, UInt32 lHashVal, ITypeInfo** ppTInfo, Int32* rgMemId, ushort* pcFound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_FindName_Stub(ITypeLib* This, ushort szNameBuf, UInt32 lHashVal, ITypeInfo** ppTInfo, Int32* rgMemId, ushort* pcFound, ushort* pBstrLibName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ITypeLib_ReleaseTLibAttr_Proxy(ITypeLib* This, tagTLIBATTR* pTLibAttr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib_ReleaseTLibAttr_Stub(ITypeLib* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib2_GetLibStatistics_Proxy(ITypeLib2* This, UInt32* pcUniqueNames, UInt32* pcchUniqueNames);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib2_GetLibStatistics_Stub(ITypeLib2* This, UInt32* pcUniqueNames, UInt32* pcchUniqueNames);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib2_GetDocumentation2_Proxy(ITypeLib2* This, int index, UInt32 lcid, ushort* pbstrHelpString, UInt32* pdwHelpStringContext, ushort* pbstrHelpStringDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ITypeLib2_GetDocumentation2_Stub(ITypeLib2* This, int index, UInt32 lcid, UInt32 refPtrFlags, ushort* pbstrHelpString, UInt32* pdwHelpStringContext, ushort* pbstrHelpStringDll);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IPropertyBag_Read_Proxy(IPropertyBag* This, ushort pszPropName, tagVARIANT* pVar, IErrorLog* pErrorLog);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IPropertyBag_Read_Stub(IPropertyBag* This, ushort pszPropName, tagVARIANT* pVar, IErrorLog* pErrorLog, UInt32 varType, IUnknown* pUnkObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATPROPSTG_RemoteNext_Proxy(IEnumSTATPROPSTG* This, UInt32 celt, tagSTATPROPSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumSTATPROPSTG_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATPROPSETSTG_RemoteNext_Proxy(IEnumSTATPROPSETSTG* This, UInt32 celt, tagSTATPROPSETSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumSTATPROPSETSTG_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 LPSAFEARRAY_UserSize(UInt32* arg1, UInt32 arg2, tagSAFEARRAY* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* LPSAFEARRAY_UserMarshal(UInt32* arg1, byte* arg2, tagSAFEARRAY* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* LPSAFEARRAY_UserUnmarshal(UInt32* arg1, byte* arg2, tagSAFEARRAY* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void LPSAFEARRAY_UserFree(UInt32* arg1, tagSAFEARRAY* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 LPSAFEARRAY_UserSize64(UInt32* arg1, UInt32 arg2, tagSAFEARRAY* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* LPSAFEARRAY_UserMarshal64(UInt32* arg1, byte* arg2, tagSAFEARRAY* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* LPSAFEARRAY_UserUnmarshal64(UInt32* arg1, byte* arg2, tagSAFEARRAY* arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void LPSAFEARRAY_UserFree64(UInt32* arg1, tagSAFEARRAY* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATPROPSTG_Next_Proxy(IEnumSTATPROPSTG* This, UInt32 celt, tagSTATPROPSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATPROPSTG_Next_Stub(IEnumSTATPROPSTG* This, UInt32 celt, tagSTATPROPSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATPROPSETSTG_Next_Proxy(IEnumSTATPROPSETSTG* This, UInt32 celt, tagSTATPROPSETSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumSTATPROPSETSTG_Next_Stub(IEnumSTATPROPSETSTG* This, UInt32 celt, tagSTATPROPSETSTG* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgCreateDocfile(ushort* pwcsName, UInt32 grfMode, UInt32 reserved, IStorage** ppstgOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgCreateDocfileOnILockBytes(ILockBytes* plkbyt, UInt32 grfMode, UInt32 reserved, IStorage** ppstgOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgOpenStorage(ushort* pwcsName, IStorage* pstgPriority, UInt32 grfMode, ushort snbExclude, UInt32 reserved, IStorage** ppstgOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgOpenStorageOnILockBytes(ILockBytes* plkbyt, IStorage* pstgPriority, UInt32 grfMode, ushort snbExclude, UInt32 reserved, IStorage** ppstgOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgIsStorageFile(ushort* pwcsName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgIsStorageILockBytes(ILockBytes* plkbyt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgSetTimes(ushort* lpszName, _FILETIME* pctime, _FILETIME* patime, _FILETIME* pmtime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgCreateStorageEx(ushort* pwcsName, UInt32 grfMode, UInt32 stgfmt, UInt32 grfAttrs, tagSTGOPTIONS* pStgOptions, void* pSecurityDescriptor, _GUID* riid, void** ppObjectOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgOpenStorageEx(ushort* pwcsName, UInt32 grfMode, UInt32 stgfmt, UInt32 grfAttrs, tagSTGOPTIONS* pStgOptions, void* pSecurityDescriptor, _GUID* riid, void** ppObjectOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgCreatePropStg(IUnknown* pUnk, _GUID* fmtid, _GUID* pclsid, UInt32 grfFlags, UInt32 dwReserved, IPropertyStorage** ppPropStg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgOpenPropStg(IUnknown* pUnk, _GUID* fmtid, UInt32 grfFlags, UInt32 dwReserved, IPropertyStorage** ppPropStg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgCreatePropSetStg(IStorage* pStorage, UInt32 dwReserved, IPropertySetStorage** ppPropSetStg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 FmtIdToPropStgName(_GUID* pfmtid, ushort oszName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 PropStgNameToFmtId(ushort oszName, _GUID* pfmtid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ReadClassStg(IStorage* pStg, _GUID* pclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 WriteClassStg(IStorage* pStg, _GUID* rclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ReadClassStm(IStream* pStm, _GUID* pclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 WriteClassStm(IStream* pStm, _GUID* rclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetHGlobalFromILockBytes(ILockBytes* plkbyt, void** phglobal);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateILockBytesOnHGlobal(void* hGlobal, int fDeleteOnRelease, ILockBytes** pplkbyt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetConvertStg(IStorage* pStg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CoBuildVersion();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInitialize(void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterMallocSpy(IMallocSpy* pMallocSpy);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRevokeMallocSpy();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoCreateStandardMalloc(UInt32 memctx, IMalloc** ppMalloc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterInitializeSpy(IInitializeSpy* pSpy, _ULARGE_INTEGER* puliCookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRevokeInitializeSpy(_ULARGE_INTEGER uliCookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetSystemSecurityPermissions(tagCOMSD comSDType, void** ppSD);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HINSTANCE__* CoLoadLibrary(ushort lpszLibName, int bAutoFree);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CoFreeLibrary(HINSTANCE__* hInst);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void CoFreeAllLibraries();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetInstanceFromFile(_COSERVERINFO* pServerInfo, _GUID* pClsid, IUnknown* punkOuter, UInt32 dwClsCtx, UInt32 grfMode, ushort* pwszName, UInt32 dwCount, tagMULTI_QI* pResults);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetInstanceFromIStorage(_COSERVERINFO* pServerInfo, _GUID* pClsid, IUnknown* punkOuter, UInt32 dwClsCtx, IStorage* pstg, UInt32 dwCount, tagMULTI_QI* pResults);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoAllowSetForegroundWindow(IUnknown* pUnk, void* lpvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DcomChannelSetHResult(void* pvReserved, UInt32* pulReserved, Int32 appsHR);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CoIsOle1Class(_GUID* rclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CoFileTimeToDosDateTime(_FILETIME* lpFileTime, ushort lpDosDate, ushort lpDosTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CoDosDateTimeToFileTime(ushort nDosDate, ushort nDosTime, _FILETIME* lpFileTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterMessageFilter(IMessageFilter* lpMessageFilter, IMessageFilter** lplpMessageFilter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoRegisterChannelHook(_GUID* ExtensionUuid, IChannelHook* pChannelHook);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoTreatAsClass(_GUID* clsidOld, _GUID* clsidNew);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateDataAdviseHolder(IDataAdviseHolder** ppDAHolder);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateDataCache(IUnknown* pUnkOuter, _GUID* rclsid, _GUID* iid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgOpenAsyncDocfileOnIFillLockBytes(IFillLockBytes* pflb, UInt32 grfMode, UInt32 asyncFlags, IStorage** ppstgOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgGetIFillLockBytesOnILockBytes(ILockBytes* pilb, IFillLockBytes** ppflb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgGetIFillLockBytesOnFile(ushort* pwcsName, IFillLockBytes** ppflb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 StgOpenLayoutDocfile(ushort* pwcsDfName, UInt32 grfMode, UInt32 reserved, IStorage** ppstgOpen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInstall(IBindCtx* pbc, UInt32 dwFlags, __MIDL___MIDL_itf_wtypes_0000_0001_0001* pClassSpec, tagQUERYCONTEXT* pQuery, ushort pszCodeBase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BindMoniker(IMoniker* pmk, UInt32 grfOpt, _GUID* iidResult, void** ppvResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetObject(ushort pszName, tagBIND_OPTS* pBindOptions, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 MkParseDisplayName(IBindCtx* pbc, ushort szUserName, UInt32* pchEaten, IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 MonikerRelativePathTo(IMoniker* pmkSrc, IMoniker* pmkDest, IMoniker** ppmkRelPath, int dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 MonikerCommonPrefixWith(IMoniker* pmkThis, IMoniker* pmkOther, IMoniker** ppmkCommon);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateBindCtx(UInt32 reserved, IBindCtx** ppbc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateGenericComposite(IMoniker* pmkFirst, IMoniker* pmkRest, IMoniker** ppmkComposite);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetClassFile(ushort szFilename, _GUID* pclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateClassMoniker(_GUID* rclsid, IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateFileMoniker(ushort lpszPathName, IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateItemMoniker(ushort lpszDelim, ushort lpszItem, IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateAntiMoniker(IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreatePointerMoniker(IUnknown* punk, IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateObjrefMoniker(IUnknown* punk, IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetRunningObjectTable(UInt32 reserved, IRunningObjectTable** pprot);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleCache2_RemoteUpdateCache_Proxy(IOleCache2* This, IDataObject* pDataObject, UInt32 grfUpdf, long pReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IOleCache2_RemoteUpdateCache_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(IOleInPlaceActiveObject* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(IOleInPlaceActiveObject* This, tagRECT prcBorder, _GUID* riid, IOleInPlaceUIWindow* pUIWindow, int fFrameWindow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_RemoteDraw_Proxy(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, ulong pvAspect, tagDVTARGETDEVICE* ptd, HDC__* hdcTargetDev, HDC__* hdcDraw, _RECTL lprcBounds, _RECTL lprcWBounds, IContinue* pContinue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IViewObject_RemoteDraw_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_RemoteGetColorSet_Proxy(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, ulong pvAspect, tagDVTARGETDEVICE* ptd, ulong hicTargetDev, tagLOGPALETTE** ppColorSet);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IViewObject_RemoteGetColorSet_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_RemoteFreeze_Proxy(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, ulong pvAspect, UInt32* pdwFreeze);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IViewObject_RemoteFreeze_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_RemoteGetAdvise_Proxy(IViewObject* This, UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IViewObject_RemoteGetAdvise_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumOLEVERB_RemoteNext_Proxy(IEnumOLEVERB* This, UInt32 celt, tagOLEVERB* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IEnumOLEVERB_RemoteNext_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HACCEL_UserSize(UInt32* arg1, UInt32 arg2, HACCEL__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HACCEL_UserMarshal(UInt32* arg1, byte* arg2, HACCEL__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HACCEL_UserUnmarshal(UInt32* arg1, byte* arg2, HACCEL__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HACCEL_UserFree(UInt32* arg1, HACCEL__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HGLOBAL_UserSize(UInt32* arg1, UInt32 arg2, void** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HGLOBAL_UserMarshal(UInt32* arg1, byte* arg2, void** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HGLOBAL_UserUnmarshal(UInt32* arg1, byte* arg2, void** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HGLOBAL_UserFree(UInt32* arg1, void** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HMENU_UserSize(UInt32* arg1, UInt32 arg2, HMENU__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HMENU_UserMarshal(UInt32* arg1, byte* arg2, HMENU__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HMENU_UserUnmarshal(UInt32* arg1, byte* arg2, HMENU__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HMENU_UserFree(UInt32* arg1, HMENU__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HWND_UserSize(UInt32* arg1, UInt32 arg2, HWND__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HWND_UserMarshal(UInt32* arg1, byte* arg2, HWND__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HWND_UserUnmarshal(UInt32* arg1, byte* arg2, HWND__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HWND_UserFree(UInt32* arg1, HWND__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HACCEL_UserSize64(UInt32* arg1, UInt32 arg2, HACCEL__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HACCEL_UserMarshal64(UInt32* arg1, byte* arg2, HACCEL__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HACCEL_UserUnmarshal64(UInt32* arg1, byte* arg2, HACCEL__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HACCEL_UserFree64(UInt32* arg1, HACCEL__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HGLOBAL_UserSize64(UInt32* arg1, UInt32 arg2, void** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HGLOBAL_UserMarshal64(UInt32* arg1, byte* arg2, void** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HGLOBAL_UserUnmarshal64(UInt32* arg1, byte* arg2, void** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HGLOBAL_UserFree64(UInt32* arg1, void** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HMENU_UserSize64(UInt32* arg1, UInt32 arg2, HMENU__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HMENU_UserMarshal64(UInt32* arg1, byte* arg2, HMENU__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HMENU_UserUnmarshal64(UInt32* arg1, byte* arg2, HMENU__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HMENU_UserFree64(UInt32* arg1, HMENU__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 HWND_UserSize64(UInt32* arg1, UInt32 arg2, HWND__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HWND_UserMarshal64(UInt32* arg1, byte* arg2, HWND__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* HWND_UserUnmarshal64(UInt32* arg1, byte* arg2, HWND__** arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void HWND_UserFree64(UInt32* arg1, HWND__** arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleCache2_UpdateCache_Proxy(IOleCache2* This, IDataObject* pDataObject, UInt32 grfUpdf, void* pReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleCache2_UpdateCache_Stub(IOleCache2* This, IDataObject* pDataObject, UInt32 grfUpdf, long pReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleInPlaceActiveObject_TranslateAccelerator_Proxy(IOleInPlaceActiveObject* This, tagMSG* lpmsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleInPlaceActiveObject_TranslateAccelerator_Stub(IOleInPlaceActiveObject* This);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleInPlaceActiveObject_ResizeBorder_Proxy(IOleInPlaceActiveObject* This, tagRECT prcBorder, IOleInPlaceUIWindow* pUIWindow, int fFrameWindow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IOleInPlaceActiveObject_ResizeBorder_Stub(IOleInPlaceActiveObject* This, tagRECT prcBorder, _GUID* riid, IOleInPlaceUIWindow* pUIWindow, int fFrameWindow);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_Draw_Proxy(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, void* pvAspect, tagDVTARGETDEVICE* ptd, HDC__* hdcTargetDev, HDC__* hdcDraw, _RECTL lprcBounds, _RECTL lprcWBounds, Option pfnContinue, ulong dwContinue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_Draw_Stub(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, ulong pvAspect, tagDVTARGETDEVICE* ptd, HDC__* hdcTargetDev, HDC__* hdcDraw, _RECTL lprcBounds, _RECTL lprcWBounds, IContinue* pContinue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_GetColorSet_Proxy(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, void* pvAspect, tagDVTARGETDEVICE* ptd, HDC__* hicTargetDev, tagLOGPALETTE** ppColorSet);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_GetColorSet_Stub(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, ulong pvAspect, tagDVTARGETDEVICE* ptd, ulong hicTargetDev, tagLOGPALETTE** ppColorSet);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_Freeze_Proxy(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, void* pvAspect, UInt32* pdwFreeze);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_Freeze_Stub(IViewObject* This, UInt32 dwDrawAspect, Int32 lindex, ulong pvAspect, UInt32* pdwFreeze);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_GetAdvise_Proxy(IViewObject* This, UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IViewObject_GetAdvise_Stub(IViewObject* This, UInt32* pAspects, UInt32* pAdvf, IAdviseSink** ppAdvSink);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumOLEVERB_Next_Proxy(IEnumOLEVERB* This, UInt32 celt, tagOLEVERB* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEnumOLEVERB_Next_Stub(IEnumOLEVERB* This, UInt32 celt, tagOLEVERB* rgelt, UInt32* pceltFetched);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IServiceProvider_RemoteQueryService_Proxy(IServiceProvider* This, _GUID* guidService, _GUID* riid, IUnknown** ppvObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IServiceProvider_RemoteQueryService_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IServiceProvider_QueryService_Proxy(IServiceProvider* This, _GUID* guidService, _GUID* riid, void** ppvObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IServiceProvider_QueryService_Stub(IServiceProvider* This, _GUID* guidService, _GUID* riid, IUnknown** ppvObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateURLMoniker(IMoniker* pMkCtx, ushort szURL, IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateURLMonikerEx(IMoniker* pMkCtx, ushort szURL, IMoniker** ppmk, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetClassURL(ushort szURL, _GUID* pClsID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateAsyncBindCtx(UInt32 reserved, IBindStatusCallback* pBSCb, IEnumFORMATETC* pEFetc, IBindCtx** ppBC);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateURLMonikerEx2(IMoniker* pMkCtx, IUri* pUri, IMoniker** ppmk, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateAsyncBindCtxEx(IBindCtx* pbc, UInt32 dwOptions, IBindStatusCallback* pBSCb, IEnumFORMATETC* pEnum, IBindCtx** ppBC, UInt32 reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 MkParseDisplayNameEx(IBindCtx* pbc, ushort szDisplayName, UInt32* pchEaten, IMoniker** ppmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterBindStatusCallback(IBindCtx* pBC, IBindStatusCallback* pBSCb, IBindStatusCallback** ppBSCBPrev, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RevokeBindStatusCallback(IBindCtx* pBC, IBindStatusCallback* pBSCb);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetClassFileOrMime(IBindCtx* pBC, ushort szFilename, void* pBuffer, UInt32 cbSize, ushort szMime, UInt32 dwReserved, _GUID* pclsid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IsValidURL(IBindCtx* pBC, ushort szURL, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoGetClassObjectFromURL(_GUID* rCLASSID, ushort szCODE, UInt32 dwFileVersionMS, UInt32 dwFileVersionLS, ushort szTYPE, IBindCtx* pBindCtx, UInt32 dwClsContext, void* pvReserved, _GUID* riid, void** ppv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IEInstallScope(UInt32 pdwScope);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 FaultInIEFeature(HWND__* hWnd, __MIDL___MIDL_itf_wtypes_0000_0001_0001* pClassSpec, tagQUERYCONTEXT* pQuery, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetComponentIDFromCLSSPEC(__MIDL___MIDL_itf_wtypes_0000_0001_0001* pClassspec, byte* ppszComponentID);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IsAsyncMoniker(IMoniker* pmk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateURLBinding(ushort lpszUrl, IBindCtx* pbc, IBinding** ppBdg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterMediaTypes(uint ctypes, byte* rgszTypes, ushort* rgcfTypes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 FindMediaType(byte rgszTypes, ushort* rgcfTypes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateFormatEnumerator(uint cfmtetc, tagFORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterFormatEnumerator(IBindCtx* pBC, IEnumFORMATETC* pEFetc, UInt32 reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RevokeFormatEnumerator(IBindCtx* pBC, IEnumFORMATETC* pEFetc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterMediaTypeClass(IBindCtx* pBC, uint ctypes, byte* rgszTypes, _GUID* rgclsID, UInt32 reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 FindMediaTypeClass(IBindCtx* pBC, byte szType, _GUID* pclsID, UInt32 reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UrlMkSetSessionOption(UInt32 dwOption, void* pBuffer, UInt32 dwBufferLength, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UrlMkGetSessionOption(UInt32 dwOption, void* pBuffer, UInt32 dwBufferLength, UInt32* pdwBufferLengthOut, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 FindMimeFromData(IBindCtx* pBC, ushort pwzUrl, void* pBuffer, UInt32 cbSize, ushort pwzMimeProposed, UInt32 dwMimeFlags, ushort* ppwzMimeOut, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ObtainUserAgentString(UInt32 dwOption, byte pszUAOut, UInt32* cbSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CompareSecurityIds(byte* pbSecurityId1, UInt32 dwLen1, byte* pbSecurityId2, UInt32 dwLen2, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CompatFlagsFromClsid(_GUID* pclsid, UInt32 pdwCompatFlags, UInt32 pdwMiscStatusFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetAccessForIEAppContainer(void* hObject, int ieObjectType, UInt32 dwAccessMask);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBinding_RemoteGetBindResult_Proxy(IBinding* This, _GUID* pclsidProtocol, UInt32* pdwResult, ushort* pszResult, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IBinding_RemoteGetBindResult_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallback_RemoteGetBindInfo_Proxy(IBindStatusCallback* This, UInt32* grfBINDF, _tagRemBINDINFO* pbindinfo, tagRemSTGMEDIUM* pstgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IBindStatusCallback_RemoteGetBindInfo_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallback_RemoteOnDataAvailable_Proxy(IBindStatusCallback* This, UInt32 grfBSCF, UInt32 dwSize, tagRemFORMATETC* pformatetc, tagRemSTGMEDIUM* pstgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IBindStatusCallback_RemoteOnDataAvailable_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy(IBindStatusCallbackEx* This, UInt32* grfBINDF, _tagRemBINDINFO* pbindinfo, tagRemSTGMEDIUM* pstgmed, UInt32* grfBINDF2, UInt32* pdwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateUri(ushort pwzURI, UInt32 dwFlags, ulong dwReserved, IUri** ppURI);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateUriWithFragment(ushort pwzURI, ushort pwzFragment, UInt32 dwFlags, ulong dwReserved, IUri** ppURI);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateUriFromMultiByteString(byte pszANSIInputUri, UInt32 dwEncodingFlags, UInt32 dwCodePage, UInt32 dwCreateFlags, ulong dwReserved, IUri** ppUri);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateIUriBuilder(IUri* pIUri, UInt32 dwFlags, ulong dwReserved, IUriBuilder** ppIUriBuilder);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IWinInetInfo_RemoteQueryOption_Proxy(IWinInetInfo* This, UInt32 dwOption, byte* pBuffer, UInt32* pcbBuf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IWinInetInfo_RemoteQueryOption_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IWinInetHttpInfo_RemoteQueryInfo_Proxy(IWinInetHttpInfo* This, UInt32 dwOption, byte* pBuffer, UInt32* pcbBuf, UInt32* pdwFlags, UInt32* pdwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IWinInetHttpInfo_RemoteQueryInfo_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindHost_RemoteMonikerBindToStorage_Proxy(IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, _GUID* riid, IUnknown** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IBindHost_RemoteMonikerBindToStorage_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindHost_RemoteMonikerBindToObject_Proxy(IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, _GUID* riid, IUnknown** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void IBindHost_RemoteMonikerBindToObject_Stub(IRpcStubBuffer* This, IRpcChannelBuffer* _pRpcChannelBuffer, _RPC_MESSAGE* _pRpcMessage, UInt32* _pdwStubPhase);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 HlinkSimpleNavigateToString(ushort szTarget, ushort szLocation, ushort szTargetFrameName, IUnknown* pUnk, IBindCtx* pbc, IBindStatusCallback* arg1, UInt32 grfHLNF, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 HlinkSimpleNavigateToMoniker(IMoniker* pmkTarget, ushort szLocation, ushort szTargetFrameName, IUnknown* pUnk, IBindCtx* pbc, IBindStatusCallback* arg1, UInt32 grfHLNF, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLOpenStreamA(IUnknown* arg1, byte arg2, UInt32 arg3, IBindStatusCallback* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLOpenStreamW(IUnknown* arg1, ushort arg2, UInt32 arg3, IBindStatusCallback* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLOpenPullStreamA(IUnknown* arg1, byte arg2, UInt32 arg3, IBindStatusCallback* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLOpenPullStreamW(IUnknown* arg1, ushort arg2, UInt32 arg3, IBindStatusCallback* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLDownloadToFileA(IUnknown* arg1, byte arg2, byte arg3, UInt32 arg4, IBindStatusCallback* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLDownloadToFileW(IUnknown* arg1, ushort arg2, ushort arg3, UInt32 arg4, IBindStatusCallback* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLDownloadToCacheFileA(IUnknown* arg1, byte arg2, byte arg3, UInt32 cchFileName, UInt32 arg4, IBindStatusCallback* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLDownloadToCacheFileW(IUnknown* arg1, ushort arg2, ushort arg3, UInt32 cchFileName, UInt32 arg4, IBindStatusCallback* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLOpenBlockingStreamA(IUnknown* arg1, byte arg2, IStream** arg3, UInt32 arg4, IBindStatusCallback* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 URLOpenBlockingStreamW(IUnknown* arg1, ushort arg2, IStream** arg3, UInt32 arg4, IBindStatusCallback* arg5);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 HlinkGoBack(IUnknown* pUnk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 HlinkGoForward(IUnknown* pUnk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 HlinkNavigateString(IUnknown* pUnk, ushort szTarget);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 HlinkNavigateMoniker(IUnknown* pUnk, IMoniker* pmkTarget);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetParseUrl(ushort pwzUrl, _tagPARSEACTION ParseAction, UInt32 dwFlags, ushort pszResult, UInt32 cchResult, UInt32* pcchResult, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetParseIUri(IUri* pIUri, _tagPARSEACTION ParseAction, UInt32 dwFlags, ushort pwzResult, UInt32 cchResult, UInt32* pcchResult, ulong dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetCombineUrl(ushort pwzBaseUrl, ushort pwzRelativeUrl, UInt32 dwCombineFlags, ushort pszResult, UInt32 cchResult, UInt32* pcchResult, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetCombineUrlEx(IUri* pBaseUri, ushort pwzRelativeUrl, UInt32 dwCombineFlags, IUri** ppCombinedUri, ulong dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetCombineIUri(IUri* pBaseUri, IUri* pRelativeUri, UInt32 dwCombineFlags, IUri** ppCombinedUri, ulong dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetCompareUrl(ushort pwzUrl1, ushort pwzUrl2, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetGetProtocolFlags(ushort pwzUrl, UInt32* pdwFlags, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetQueryInfo(ushort pwzUrl, _tagQUERYOPTION QueryOptions, UInt32 dwQueryFlags, void* pvBuffer, UInt32 cbBuffer, UInt32* pcbBuffer, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetGetSession(UInt32 dwSessionMode, IInternetSession** ppIInternetSession, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetGetSecurityUrl(ushort pwszUrl, ushort* ppwszSecUrl, _tagPSUACTION psuAction, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 AsyncInstallDistributionUnit(ushort szDistUnit, ushort szTYPE, ushort szExt, UInt32 dwFileVersionMS, UInt32 dwFileVersionLS, ushort szURL, IBindCtx* pbc, void* pvReserved, UInt32 flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetGetSecurityUrlEx(IUri* pUri, IUri** ppSecUri, _tagPSUACTION psuAction, ulong dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetSetFeatureEnabled(_tagINTERNETFEATURELIST FeatureEntry, UInt32 dwFlags, int fEnable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetIsFeatureEnabled(_tagINTERNETFEATURELIST FeatureEntry, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetIsFeatureEnabledForUrl(_tagINTERNETFEATURELIST FeatureEntry, UInt32 dwFlags, ushort szURL, IInternetSecurityManager* pSecMgr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetIsFeatureEnabledForIUri(_tagINTERNETFEATURELIST FeatureEntry, UInt32 dwFlags, IUri* pIUri, IInternetSecurityManagerEx2* pSecMgr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetIsFeatureZoneElevationEnabled(ushort szFromURL, ushort szToURL, IInternetSecurityManager* pSecMgr, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CopyStgMedium(uSTGMEDIUM* pcstgmedSrc, uSTGMEDIUM* pstgmedDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CopyBindInfo(_tagBINDINFO* pcbiSrc, _tagBINDINFO* pbiDest);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ReleaseBindInfo(_tagBINDINFO* pbindinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort IEGetUserPrivateNamespaceName();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetCreateSecurityManager(IServiceProvider* pSP, IInternetSecurityManager** ppSM, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CoInternetCreateZoneManager(IServiceProvider* pSP, IInternetZoneManager** ppZM, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetSoftwareUpdateInfo(ushort szDistUnit, _tagSOFTDISTINFO* psdi);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetSoftwareUpdateAdvertisementState(ushort szDistUnit, UInt32 dwAdState, UInt32 dwAdvertisedVersionMS, UInt32 dwAdvertisedVersionLS);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsLoggingEnabledA(byte pszUrl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsLoggingEnabledW(ushort pwszUrl);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WriteHitLogging(_tagHIT_LOGGING_INFO* lpLogginginfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBinding_GetBindResult_Proxy(IBinding* This, _GUID* pclsidProtocol, UInt32* pdwResult, ushort* pszResult, UInt32* pdwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBinding_GetBindResult_Stub(IBinding* This, _GUID* pclsidProtocol, UInt32* pdwResult, ushort* pszResult, UInt32 dwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallback_GetBindInfo_Proxy(IBindStatusCallback* This, UInt32* grfBINDF, _tagBINDINFO* pbindinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallback_GetBindInfo_Stub(IBindStatusCallback* This, UInt32* grfBINDF, _tagRemBINDINFO* pbindinfo, tagRemSTGMEDIUM* pstgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallback_OnDataAvailable_Proxy(IBindStatusCallback* This, UInt32 grfBSCF, UInt32 dwSize, tagFORMATETC* pformatetc, uSTGMEDIUM* pstgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallback_OnDataAvailable_Stub(IBindStatusCallback* This, UInt32 grfBSCF, UInt32 dwSize, tagRemFORMATETC* pformatetc, tagRemSTGMEDIUM* pstgmed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallbackEx_GetBindInfoEx_Proxy(IBindStatusCallbackEx* This, UInt32* grfBINDF, _tagBINDINFO* pbindinfo, UInt32* grfBINDF2, UInt32* pdwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindStatusCallbackEx_GetBindInfoEx_Stub(IBindStatusCallbackEx* This, UInt32* grfBINDF, _tagRemBINDINFO* pbindinfo, tagRemSTGMEDIUM* pstgmed, UInt32* grfBINDF2, UInt32* pdwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IWinInetInfo_QueryOption_Proxy(IWinInetInfo* This, UInt32 dwOption, void* pBuffer, UInt32* pcbBuf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IWinInetInfo_QueryOption_Stub(IWinInetInfo* This, UInt32 dwOption, byte* pBuffer, UInt32* pcbBuf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IWinInetHttpInfo_QueryInfo_Proxy(IWinInetHttpInfo* This, UInt32 dwOption, void* pBuffer, UInt32* pcbBuf, UInt32* pdwFlags, UInt32* pdwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IWinInetHttpInfo_QueryInfo_Stub(IWinInetHttpInfo* This, UInt32 dwOption, byte* pBuffer, UInt32* pcbBuf, UInt32* pdwFlags, UInt32* pdwReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindHost_MonikerBindToStorage_Proxy(IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, _GUID* riid, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindHost_MonikerBindToStorage_Stub(IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, _GUID* riid, IUnknown** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindHost_MonikerBindToObject_Proxy(IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, _GUID* riid, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 IBindHost_MonikerBindToObject_Stub(IBindHost* This, IMoniker* pMk, IBindCtx* pBC, IBindStatusCallback* pBSC, _GUID* riid, IUnknown** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tagSERIALIZEDPROPERTYVALUE* StgConvertVariantToProperty(tagPROPVARIANT* pvar, ushort CodePage, tagSERIALIZEDPROPERTYVALUE* pprop, UInt32* pcb, UInt32 pid, byte fReserved, UInt32* pcIndirect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateStdProgressIndicator(HWND__* hwndParent, ushort pszTitle, IBindStatusCallback* pIbscCaller, IBindStatusCallback** ppIbsc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SysAllocString(ushort* psz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SysReAllocString(ushort* pbstr, ushort* psz);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SysAllocStringLen(ushort* strIn, uint ui);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SysReAllocStringLen(ushort* pbstr, ushort* psz, uint len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SysAddRefString(ushort bstrString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SysReleaseString(ushort bstrString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SysFreeString(ushort bstrString);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SysStringLen(ushort pbstr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SysStringByteLen(ushort bstr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SysAllocStringByteLen(byte psz, uint len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DosDateTimeToVariantTime(ushort wDosDate, ushort wDosTime, double* pvtime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VariantTimeToDosDateTime(double vtime, ushort* pwDosDate, ushort* pwDosTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SystemTimeToVariantTime(_SYSTEMTIME* lpSystemTime, double* pvtime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int VariantTimeToSystemTime(double vtime, _SYSTEMTIME* lpSystemTime);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayAllocDescriptor(uint cDims, tagSAFEARRAY** ppsaOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayAllocDescriptorEx(ushort vt, uint cDims, tagSAFEARRAY** ppsaOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayAllocData(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tagSAFEARRAY* SafeArrayCreate(ushort vt, uint cDims, tagSAFEARRAYBOUND* rgsabound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tagSAFEARRAY* SafeArrayCreateEx(ushort vt, uint cDims, tagSAFEARRAYBOUND* rgsabound, void* pvExtra);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayCopyData(tagSAFEARRAY* psaSource, tagSAFEARRAY* psaTarget);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SafeArrayReleaseDescriptor(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayDestroyDescriptor(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SafeArrayReleaseData(void* pData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayDestroyData(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayAddRef(tagSAFEARRAY* psa, void** ppDataToRelease);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayDestroy(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayRedim(tagSAFEARRAY* psa, tagSAFEARRAYBOUND* psaboundNew);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SafeArrayGetDim(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SafeArrayGetElemsize(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayGetUBound(tagSAFEARRAY* psa, uint nDim, Int32* plUbound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayGetLBound(tagSAFEARRAY* psa, uint nDim, Int32* plLbound);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayLock(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayUnlock(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayAccessData(tagSAFEARRAY* psa, void** ppvData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayUnaccessData(tagSAFEARRAY* psa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayGetElement(tagSAFEARRAY* psa, Int32* rgIndices, void* pv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayPutElement(tagSAFEARRAY* psa, Int32* rgIndices, void* pv);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayCopy(tagSAFEARRAY* psa, tagSAFEARRAY** ppsaOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayPtrOfIndex(tagSAFEARRAY* psa, Int32* rgIndices, void** ppvData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArraySetRecordInfo(tagSAFEARRAY* psa, IRecordInfo* prinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayGetRecordInfo(tagSAFEARRAY* psa, IRecordInfo** prinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArraySetIID(tagSAFEARRAY* psa, _GUID* guid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayGetIID(tagSAFEARRAY* psa, _GUID* pguid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SafeArrayGetVartype(tagSAFEARRAY* psa, ushort* pvt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tagSAFEARRAY* SafeArrayCreateVector(ushort vt, Int32 lLbound, UInt32 cElements);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tagSAFEARRAY* SafeArrayCreateVectorEx(ushort vt, Int32 lLbound, UInt32 cElements, void* pvExtra);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void VariantInit(tagVARIANT* pvarg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VariantClear(tagVARIANT* pvarg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VariantCopy(tagVARIANT* pvargDest, tagVARIANT* pvargSrc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VariantCopyInd(tagVARIANT* pvarDest, tagVARIANT* pvargSrc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VariantChangeType(tagVARIANT* pvargDest, tagVARIANT* pvarSrc, ushort wFlags, ushort vt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VariantChangeTypeEx(tagVARIANT* pvargDest, tagVARIANT* pvarSrc, UInt32 lcid, ushort wFlags, ushort vt);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VectorFromBstr(ushort bstr, tagSAFEARRAY** ppsa);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 BstrFromVector(tagSAFEARRAY* psa, ushort* pbstr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromI2(short sIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromI4(Int32 lIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromI8(long i64In, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromR4(float fltIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromR8(double dblIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromCy(tagCY cyIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromDate(double dateIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromDisp(IDispatch* pdispIn, UInt32 lcid, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromBool(short boolIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromI1(byte cIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromUI2(ushort uiIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromUI4(UInt32 ulIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromUI8(ulong ui64In, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI1FromDec(tagDEC* pdecIn, byte* pbOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromUI1(byte bIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromI4(Int32 lIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromI8(long i64In, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromR4(float fltIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromR8(double dblIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromCy(tagCY cyIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromDate(double dateIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromDisp(IDispatch* pdispIn, UInt32 lcid, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromBool(short boolIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromI1(byte cIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromUI2(ushort uiIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromUI4(UInt32 ulIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromUI8(ulong ui64In, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI2FromDec(tagDEC* pdecIn, short* psOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromUI1(byte bIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromI2(short sIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromI8(long i64In, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromR4(float fltIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromR8(double dblIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromCy(tagCY cyIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromDate(double dateIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromDisp(IDispatch* pdispIn, UInt32 lcid, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromBool(short boolIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromI1(byte cIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromUI2(ushort uiIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromUI4(UInt32 ulIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromUI8(ulong ui64In, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI4FromDec(tagDEC* pdecIn, Int32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromUI1(byte bIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromI2(short sIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromR4(float fltIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromR8(double dblIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromCy(tagCY cyIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromDate(double dateIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromDisp(IDispatch* pdispIn, UInt32 lcid, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromBool(short boolIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromI1(byte cIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromUI2(ushort uiIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromUI4(UInt32 ulIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromUI8(ulong ui64In, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI8FromDec(tagDEC* pdecIn, long* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromUI1(byte bIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromI2(short sIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromI4(Int32 lIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromI8(long i64In, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromR8(double dblIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromCy(tagCY cyIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromDate(double dateIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromDisp(IDispatch* pdispIn, UInt32 lcid, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromBool(short boolIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromI1(byte cIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromUI2(ushort uiIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromUI4(UInt32 ulIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromUI8(ulong ui64In, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4FromDec(tagDEC* pdecIn, float* pfltOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromUI1(byte bIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromI2(short sIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromI4(Int32 lIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromI8(long i64In, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromR4(float fltIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromCy(tagCY cyIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromDate(double dateIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromDisp(IDispatch* pdispIn, UInt32 lcid, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromBool(short boolIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromI1(byte cIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromUI2(ushort uiIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromUI4(UInt32 ulIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromUI8(ulong ui64In, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8FromDec(tagDEC* pdecIn, double* pdblOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromUI1(byte bIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromI2(short sIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromI4(Int32 lIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromI8(long i64In, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromR4(float fltIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromR8(double dblIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromCy(tagCY cyIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromDisp(IDispatch* pdispIn, UInt32 lcid, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromBool(short boolIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromI1(byte cIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromUI2(ushort uiIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromUI4(UInt32 ulIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromUI8(ulong ui64In, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromDec(tagDEC* pdecIn, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromUI1(byte bIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromI2(short sIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromI4(Int32 lIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromI8(long i64In, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromR4(float fltIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromR8(double dblIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromDate(double dateIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromDisp(IDispatch* pdispIn, UInt32 lcid, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromBool(short boolIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromI1(byte cIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromUI2(ushort uiIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromUI4(UInt32 ulIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromUI8(ulong ui64In, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFromDec(tagDEC* pdecIn, tagCY* pcyOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromUI1(byte bVal, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromI2(short iVal, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromI4(Int32 lIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromI8(long i64In, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromR4(float fltIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromR8(double dblIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromCy(tagCY cyIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromDate(double dateIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromDisp(IDispatch* pdispIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromBool(short boolIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromI1(byte cIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromUI2(ushort uiIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromUI4(UInt32 ulIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromUI8(ulong ui64In, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrFromDec(tagDEC* pdecIn, UInt32 lcid, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromUI1(byte bIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromI2(short sIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromI4(Int32 lIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromI8(long i64In, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromR4(float fltIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromR8(double dblIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromDate(double dateIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromCy(tagCY cyIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromDisp(IDispatch* pdispIn, UInt32 lcid, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromI1(byte cIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromUI2(ushort uiIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromUI4(UInt32 ulIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromUI8(ulong i64In, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBoolFromDec(tagDEC* pdecIn, short* pboolOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromUI1(byte bIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromI2(short uiIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromI4(Int32 lIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromI8(long i64In, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromR4(float fltIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromR8(double dblIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromDate(double dateIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromCy(tagCY cyIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromDisp(IDispatch* pdispIn, UInt32 lcid, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromBool(short boolIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromUI2(ushort uiIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromUI4(UInt32 ulIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromUI8(ulong i64In, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarI1FromDec(tagDEC* pdecIn, byte* pcOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromUI1(byte bIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromI2(short uiIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromI4(Int32 lIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromI8(long i64In, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromR4(float fltIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromR8(double dblIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromDate(double dateIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromCy(tagCY cyIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromDisp(IDispatch* pdispIn, UInt32 lcid, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromBool(short boolIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromI1(byte cIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromUI4(UInt32 ulIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromUI8(ulong i64In, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI2FromDec(tagDEC* pdecIn, ushort* puiOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromUI1(byte bIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromI2(short uiIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromI4(Int32 lIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromI8(long i64In, UInt32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromR4(float fltIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromR8(double dblIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromDate(double dateIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromCy(tagCY cyIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromDisp(IDispatch* pdispIn, UInt32 lcid, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromBool(short boolIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromI1(byte cIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromUI2(ushort uiIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromUI8(ulong ui64In, UInt32* plOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI4FromDec(tagDEC* pdecIn, UInt32* pulOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromUI1(byte bIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromI2(short sIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromI4(Int32 lIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromI8(long ui64In, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromR4(float fltIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromR8(double dblIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromCy(tagCY cyIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromDate(double dateIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromDisp(IDispatch* pdispIn, UInt32 lcid, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromBool(short boolIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromI1(byte cIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromUI2(ushort uiIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromUI4(UInt32 ulIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUI8FromDec(tagDEC* pdecIn, ulong* pi64Out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromUI1(byte bIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromI2(short uiIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromI4(Int32 lIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromI8(long i64In, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromR4(float fltIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromR8(double dblIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromDate(double dateIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromCy(tagCY cyIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromDisp(IDispatch* pdispIn, UInt32 lcid, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromBool(short boolIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromI1(byte cIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromUI2(ushort uiIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromUI4(UInt32 ulIn, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFromUI8(ulong ui64In, tagDEC* pdecOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarParseNumFromStr(ushort strIn, UInt32 lcid, UInt32 dwFlags, NUMPARSE* pnumprs, byte* rgbDig);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarNumFromParseNum(NUMPARSE* pnumprs, byte* rgbDig, UInt32 dwVtBits, tagVARIANT* pvar);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarAdd(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarAnd(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCat(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDiv(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarEqv(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarIdiv(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarImp(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarMod(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarMul(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarOr(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarPow(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarSub(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarXor(tagVARIANT pvarLeft, tagVARIANT pvarRight, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarAbs(tagVARIANT pvarIn, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarFix(tagVARIANT pvarIn, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarInt(tagVARIANT pvarIn, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarNeg(tagVARIANT pvarIn, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarNot(tagVARIANT pvarIn, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarRound(tagVARIANT pvarIn, int cDecimals, tagVARIANT pvarResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCmp(tagVARIANT pvarLeft, tagVARIANT pvarRight, UInt32 lcid, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecAdd(tagDEC pdecLeft, tagDEC pdecRight, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecDiv(tagDEC pdecLeft, tagDEC pdecRight, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecMul(tagDEC pdecLeft, tagDEC pdecRight, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecSub(tagDEC pdecLeft, tagDEC pdecRight, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecAbs(tagDEC pdecIn, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecFix(tagDEC pdecIn, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecInt(tagDEC pdecIn, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecNeg(tagDEC pdecIn, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecRound(tagDEC pdecIn, int cDecimals, tagDEC pdecResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecCmp(tagDEC pdecLeft, tagDEC pdecRight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDecCmpR8(tagDEC pdecLeft, double dblRight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyAdd(tagCY cyLeft, tagCY cyRight, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyMul(tagCY cyLeft, tagCY cyRight, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyMulI4(tagCY cyLeft, Int32 lRight, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyMulI8(tagCY cyLeft, long lRight, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCySub(tagCY cyLeft, tagCY cyRight, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyAbs(tagCY cyIn, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyFix(tagCY cyIn, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyInt(tagCY cyIn, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyNeg(tagCY cyIn, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyRound(tagCY cyIn, int cDecimals, tagCY pcyResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyCmp(tagCY cyLeft, tagCY cyRight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarCyCmpR8(tagCY cyLeft, double dblRight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrCat(ushort bstrLeft, ushort bstrRight, ushort pbstrResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarBstrCmp(ushort bstrLeft, ushort bstrRight, UInt32 lcid, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8Pow(double dblLeft, double dblRight, double* pdblResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR4CmpR8(float fltLeft, double dblRight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarR8Round(double dblIn, int cDecimals, double* pdblResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromUdate(UDATE* pudateIn, UInt32 dwFlags, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarDateFromUdateEx(UDATE* pudateIn, UInt32 lcid, UInt32 dwFlags, double* pdateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarUdateFromDate(double dateIn, UInt32 dwFlags, UDATE* pudateOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetAltMonthNames(UInt32 lcid, ushort** prgp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarFormat(tagVARIANT pvarIn, ushort pstrFormat, int iFirstDay, int iFirstWeek, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarFormatDateTime(tagVARIANT pvarIn, int iNamedFormat, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarFormatNumber(tagVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarFormatPercent(tagVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarFormatCurrency(tagVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarMonthName(int iMonth, int fAbbrev, UInt32 dwFlags, ushort* pbstrOut);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarFormatFromTokens(tagVARIANT pvarIn, ushort pstrFormat, byte pbTokCur, UInt32 dwFlags, ushort* pbstrOut, UInt32 lcid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 VarTokenizeFormatString(ushort pstrFormat, byte rgbTok, int cbTok, int iFirstDay, int iFirstWeek, UInt32 lcid, int* pcbActual);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 LHashValOfNameSysA(tagSYSKIND syskind, UInt32 lcid, byte szName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 LHashValOfNameSys(tagSYSKIND syskind, UInt32 lcid, ushort* szName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 LoadTypeLib(ushort szFile, ITypeLib** pptlib);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 LoadTypeLibEx(ushort szFile, tagREGKIND regkind, ITypeLib** pptlib);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 LoadRegTypeLib(_GUID* rguid, ushort wVerMajor, ushort wVerMinor, UInt32 lcid, ITypeLib** pptlib);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 QueryPathOfRegTypeLib(_GUID* guid, ushort wMaj, ushort wMin, UInt32 lcid, ushort lpbstrPathName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterTypeLib(ITypeLib* ptlib, ushort szFullPath, ushort szHelpDir);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UnRegisterTypeLib(_GUID* libID, ushort wVerMajor, ushort wVerMinor, UInt32 lcid, tagSYSKIND syskind);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterTypeLibForUser(ITypeLib* ptlib, ushort* szFullPath, ushort* szHelpDir);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 UnRegisterTypeLibForUser(_GUID* libID, ushort wMajorVerNum, ushort wMinorVerNum, UInt32 lcid, tagSYSKIND syskind);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateTypeLib(tagSYSKIND syskind, ushort szFile, ICreateTypeLib** ppctlib);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateTypeLib2(tagSYSKIND syskind, ushort szFile, ICreateTypeLib2** ppctlib);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DispGetParam(tagDISPPARAMS* pdispparams, uint position, ushort vtTarg, tagVARIANT* pvarResult, uint* puArgErr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DispGetIDsOfNames(ITypeInfo* ptinfo, ushort* rgszNames, uint cNames, Int32* rgdispid);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DispInvoke(void* _this, ITypeInfo* ptinfo, Int32 dispidMember, ushort wFlags, tagDISPPARAMS* pparams, tagVARIANT* pvarResult, tagEXCEPINFO* pexcepinfo, uint* puArgErr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateDispTypeInfo(tagINTERFACEDATA* pidata, UInt32 lcid, ITypeInfo** pptinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateStdDispatch(IUnknown* punkOuter, void* pvThis, ITypeInfo* ptinfo, IUnknown** ppunkStdDisp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DispCallFunc(void* pvInstance, ulong oVft, tagCALLCONV cc, ushort vtReturn, uint cActuals, ushort* prgvt, tagVARIANT** prgpvarg, tagVARIANT* pvargResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterActiveObject(IUnknown* punk, _GUID* rclsid, UInt32 dwFlags, UInt32* pdwRegister);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RevokeActiveObject(UInt32 dwRegister, void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetActiveObject(_GUID* rclsid, void* pvReserved, IUnknown** ppunk);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetErrorInfo(UInt32 dwReserved, IErrorInfo* perrinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetErrorInfo(UInt32 dwReserved, IErrorInfo** pperrinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateErrorInfo(ICreateErrorInfo** pperrinfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetRecordInfoFromTypeInfo(ITypeInfo* pTypeInfo, IRecordInfo** ppRecInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 GetRecordInfoFromGuids(_GUID* rGuidTypeLib, UInt32 uVerMajor, UInt32 uVerMinor, UInt32 lcid, _GUID* rGuidTypeInfo, IRecordInfo** ppRecInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 OaBuildVersion();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ClearCustData(tagCUSTDATA* pCustData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void OaEnablePerUserTLibRegistration();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 OleBuildVersion();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 WriteFmtUserTypeStg(IStorage* pstg, ushort cf, ushort lpszUserType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ReadFmtUserTypeStg(IStorage* pstg, ushort* pcf, ushort* lplpszUserType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleInitialize(void* pvReserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void OleUninitialize();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleQueryLinkFromData(IDataObject* pSrcDataObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleQueryCreateFromData(IDataObject* pSrcDataObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreate(_GUID* rclsid, _GUID* riid, UInt32 renderopt, tagFORMATETC* pFormatEtc, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateEx(_GUID* rclsid, _GUID* riid, UInt32 dwFlags, UInt32 renderopt, UInt32 cFormats, UInt32* rgAdvf, tagFORMATETC* rgFormatEtc, IAdviseSink* lpAdviseSink, UInt32* rgdwConnection, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateFromData(IDataObject* pSrcDataObj, _GUID* riid, UInt32 renderopt, tagFORMATETC* pFormatEtc, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateFromDataEx(IDataObject* pSrcDataObj, _GUID* riid, UInt32 dwFlags, UInt32 renderopt, UInt32 cFormats, UInt32* rgAdvf, tagFORMATETC* rgFormatEtc, IAdviseSink* lpAdviseSink, UInt32* rgdwConnection, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateLinkFromData(IDataObject* pSrcDataObj, _GUID* riid, UInt32 renderopt, tagFORMATETC* pFormatEtc, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateLinkFromDataEx(IDataObject* pSrcDataObj, _GUID* riid, UInt32 dwFlags, UInt32 renderopt, UInt32 cFormats, UInt32* rgAdvf, tagFORMATETC* rgFormatEtc, IAdviseSink* lpAdviseSink, UInt32* rgdwConnection, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateStaticFromData(IDataObject* pSrcDataObj, _GUID* iid, UInt32 renderopt, tagFORMATETC* pFormatEtc, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateLink(IMoniker* pmkLinkSrc, _GUID* riid, UInt32 renderopt, tagFORMATETC* lpFormatEtc, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateLinkEx(IMoniker* pmkLinkSrc, _GUID* riid, UInt32 dwFlags, UInt32 renderopt, UInt32 cFormats, UInt32* rgAdvf, tagFORMATETC* rgFormatEtc, IAdviseSink* lpAdviseSink, UInt32* rgdwConnection, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateLinkToFile(ushort lpszFileName, _GUID* riid, UInt32 renderopt, tagFORMATETC* lpFormatEtc, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateLinkToFileEx(ushort lpszFileName, _GUID* riid, UInt32 dwFlags, UInt32 renderopt, UInt32 cFormats, UInt32* rgAdvf, tagFORMATETC* rgFormatEtc, IAdviseSink* lpAdviseSink, UInt32* rgdwConnection, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateFromFile(_GUID* rclsid, ushort lpszFileName, _GUID* riid, UInt32 renderopt, tagFORMATETC* lpFormatEtc, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateFromFileEx(_GUID* rclsid, ushort lpszFileName, _GUID* riid, UInt32 dwFlags, UInt32 renderopt, UInt32 cFormats, UInt32* rgAdvf, tagFORMATETC* rgFormatEtc, IAdviseSink* lpAdviseSink, UInt32* rgdwConnection, IOleClientSite* pClientSite, IStorage* pStg, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleLoad(IStorage* pStg, _GUID* riid, IOleClientSite* pClientSite, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleSave(IPersistStorage* pPS, IStorage* pStg, int fSameAsLoad);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleLoadFromStream(IStream* pStm, _GUID* iidInterface, void** ppvObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleSaveToStream(IPersistStream* pPStm, IStream* pStm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleSetContainedObject(IUnknown* pUnknown, int fContained);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleNoteObjectVisible(IUnknown* pUnknown, int fVisible);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RegisterDragDrop(HWND__* hwnd, IDropTarget* pDropTarget);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 RevokeDragDrop(HWND__* hwnd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 DoDragDrop(IDataObject* pDataObj, IDropSource* pDropSource, UInt32 dwOKEffects, UInt32 pdwEffect);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleSetClipboard(IDataObject* pDataObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleGetClipboard(IDataObject** ppDataObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleGetClipboardWithEnterpriseInfo(IDataObject** dataObject, ushort* dataEnterpriseId, ushort* sourceDescription, ushort* targetDescription, ushort* dataDescription);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleFlushClipboard();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleIsCurrentClipboard(IDataObject* pDataObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OleCreateMenuDescriptor(HMENU__* hmenuCombined, tagOleMenuGroupWidths* lpMenuWidths);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleSetMenuDescriptor(void* holemenu, HWND__* hwndFrame, HWND__* hwndActiveObject, IOleInPlaceFrame* lpFrame, IOleInPlaceActiveObject* lpActiveObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleDestroyMenuDescriptor(void* holemenu);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleTranslateAccelerator(IOleInPlaceFrame* lpFrame, tagOIFI* lpFrameInfo, tagMSG* lpmsg);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OleDuplicateData(void* hSrc, ushort cfFormat, uint uiFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleDraw(IUnknown* pUnknown, UInt32 dwAspect, HDC__* hdcDraw, tagRECT lprcBounds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleRun(IUnknown* pUnknown);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int OleIsRunning(IOleObject* pObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleLockRunning(IUnknown* pUnknown, int fLock, int fLastUnlockCloses);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void ReleaseStgMedium(uSTGMEDIUM arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 CreateOleAdviseHolder(IOleAdviseHolder** ppOAHolder);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateDefaultHandler(_GUID* clsid, IUnknown* pUnkOuter, _GUID* riid, void** lplpObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleCreateEmbeddingHelper(_GUID* clsid, IUnknown* pUnkOuter, UInt32 flags, IClassFactory* pCF, _GUID* riid, void** lplpObj);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int IsAccelerator(HACCEL__* hAccel, int cAccelEntries, tagMSG* lpMsg, ushort* lpwCmd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OleGetIconOfFile(ushort lpszPath, int fUseFileAsLabel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OleGetIconOfClass(_GUID* rclsid, ushort lpszLabel, int fUseTypeAsLabel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* OleMetafilePictFromIconAndLabel(HICON__* hIcon, ushort lpszLabel, ushort lpszSourceFile, uint iIconIndex);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleRegGetUserType(_GUID* clsid, UInt32 dwFormOfType, ushort* pszUserType);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleRegGetMiscStatus(_GUID* clsid, UInt32 dwAspect, UInt32* pdwStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleRegEnumFormatEtc(_GUID* clsid, UInt32 dwDirection, IEnumFORMATETC** ppenum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleRegEnumVerbs(_GUID* clsid, IEnumOLEVERB** ppenum);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleConvertOLESTREAMToIStorage(_OLESTREAM* lpolestream, IStorage* pstg, tagDVTARGETDEVICE* ptd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleConvertIStorageToOLESTREAM(IStorage* pstg, _OLESTREAM* lpolestream);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleDoAutoConvert(IStorage* pStg, _GUID pClsidNew);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleGetAutoConvert(_GUID* clsidOld, _GUID pClsidNew);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleSetAutoConvert(_GUID* clsidOld, _GUID* clsidNew);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 SetConvertStg(IStorage* pStg, int fConvert);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleConvertIStorageToOLESTREAMEx(IStorage* pstg, ushort cfFormat, Int32 lWidth, Int32 lHeight, UInt32 dwSize, uSTGMEDIUM pmedium, _OLESTREAM* polestm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 OleConvertOLESTREAMToIStorageEx(_OLESTREAM* polestm, IStorage* pstg, ushort* pcfFormat, Int32* plwWidth, Int32* plHeight, UInt32* pdwSize, uSTGMEDIUM pmedium);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetOpenFileNameA(tagOFNA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetOpenFileNameW(tagOFNW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSaveFileNameA(tagOFNA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetSaveFileNameW(tagOFNW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short GetFileTitleA(byte arg1, byte Buf, ushort cchSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern short GetFileTitleW(ushort arg1, ushort Buf, ushort cchSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChooseColorA(tagCHOOSECOLORA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChooseColorW(tagCHOOSECOLORW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* FindTextA(tagFINDREPLACEA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* FindTextW(tagFINDREPLACEW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* ReplaceTextA(tagFINDREPLACEA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* ReplaceTextW(tagFINDREPLACEW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChooseFontA(CHOOSEFONTA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChooseFontW(CHOOSEFONTW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PrintDlgA(tagPDA* pPD);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PrintDlgW(tagPDW* pPD);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 PrintDlgExA(tagPDEXA* pPD);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 PrintDlgExW(tagPDEXW* pPD);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 CommDlgExtendedError();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PageSetupDlgA(tagPSDA* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int PageSetupDlgW(tagPSDW* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort uaw_CharUpperW(ushort String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int uaw_lstrcmpW(ushort String1, ushort String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int uaw_lstrcmpiW(ushort String1, ushort String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int uaw_lstrlenW(ushort String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort uaw_wcschr(ushort String, ushort Character);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort uaw_wcscpy(ushort Destination, ushort Source);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int uaw_wcsicmp(ushort String1, ushort String2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr uaw_wcslen(ushort String);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort uaw_wcsrchr(ushort String, ushort Character);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeServiceConfigA(SC_HANDLE__* hService, UInt32 dwServiceType, UInt32 dwStartType, UInt32 dwErrorControl, byte lpBinaryPathName, byte lpLoadOrderGroup, UInt32 lpdwTagId, byte lpDependencies, byte lpServiceStartName, byte lpPassword, byte lpDisplayName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeServiceConfigW(SC_HANDLE__* hService, UInt32 dwServiceType, UInt32 dwStartType, UInt32 dwErrorControl, ushort lpBinaryPathName, ushort lpLoadOrderGroup, UInt32 lpdwTagId, ushort lpDependencies, ushort lpServiceStartName, ushort lpPassword, ushort lpDisplayName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeServiceConfig2A(SC_HANDLE__* hService, UInt32 dwInfoLevel, void* lpInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ChangeServiceConfig2W(SC_HANDLE__* hService, UInt32 dwInfoLevel, void* lpInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int CloseServiceHandle(SC_HANDLE__* hSCObject);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ControlService(SC_HANDLE__* hService, UInt32 dwControl, _SERVICE_STATUS* lpServiceStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SC_HANDLE__* CreateServiceA(SC_HANDLE__* hSCManager, byte lpServiceName, byte lpDisplayName, UInt32 dwDesiredAccess, UInt32 dwServiceType, UInt32 dwStartType, UInt32 dwErrorControl, byte lpBinaryPathName, byte lpLoadOrderGroup, UInt32 lpdwTagId, byte lpDependencies, byte lpServiceStartName, byte lpPassword);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SC_HANDLE__* CreateServiceW(SC_HANDLE__* hSCManager, ushort lpServiceName, ushort lpDisplayName, UInt32 dwDesiredAccess, UInt32 dwServiceType, UInt32 dwStartType, UInt32 dwErrorControl, ushort lpBinaryPathName, ushort lpLoadOrderGroup, UInt32 lpdwTagId, ushort lpDependencies, ushort lpServiceStartName, ushort lpPassword);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int DeleteService(SC_HANDLE__* hService);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDependentServicesA(SC_HANDLE__* hService, UInt32 dwServiceState, _ENUM_SERVICE_STATUSA* lpServices, UInt32 cbBufSize, UInt32 pcbBytesNeeded, UInt32 lpServicesReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumDependentServicesW(SC_HANDLE__* hService, UInt32 dwServiceState, _ENUM_SERVICE_STATUSW* lpServices, UInt32 cbBufSize, UInt32 pcbBytesNeeded, UInt32 lpServicesReturned);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumServicesStatusA(SC_HANDLE__* hSCManager, UInt32 dwServiceType, UInt32 dwServiceState, _ENUM_SERVICE_STATUSA* lpServices, UInt32 cbBufSize, UInt32 pcbBytesNeeded, UInt32 lpServicesReturned, UInt32 lpResumeHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumServicesStatusW(SC_HANDLE__* hSCManager, UInt32 dwServiceType, UInt32 dwServiceState, _ENUM_SERVICE_STATUSW* lpServices, UInt32 cbBufSize, UInt32 pcbBytesNeeded, UInt32 lpServicesReturned, UInt32 lpResumeHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumServicesStatusExA(SC_HANDLE__* hSCManager, _SC_ENUM_TYPE InfoLevel, UInt32 dwServiceType, UInt32 dwServiceState, byte lpServices, UInt32 cbBufSize, UInt32 pcbBytesNeeded, UInt32 lpServicesReturned, UInt32 lpResumeHandle, byte pszGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int EnumServicesStatusExW(SC_HANDLE__* hSCManager, _SC_ENUM_TYPE InfoLevel, UInt32 dwServiceType, UInt32 dwServiceState, byte lpServices, UInt32 cbBufSize, UInt32 pcbBytesNeeded, UInt32 lpServicesReturned, UInt32 lpResumeHandle, ushort pszGroupName);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetServiceKeyNameA(SC_HANDLE__* hSCManager, byte lpDisplayName, byte lpServiceName, UInt32 lpcchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetServiceKeyNameW(SC_HANDLE__* hSCManager, ushort lpDisplayName, ushort lpServiceName, UInt32 lpcchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetServiceDisplayNameA(SC_HANDLE__* hSCManager, byte lpServiceName, byte lpDisplayName, UInt32 lpcchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetServiceDisplayNameW(SC_HANDLE__* hSCManager, ushort lpServiceName, ushort lpDisplayName, UInt32 lpcchBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* LockServiceDatabase(SC_HANDLE__* hSCManager);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int NotifyBootConfigStatus(int BootAcceptable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SC_HANDLE__* OpenSCManagerA(byte lpMachineName, byte lpDatabaseName, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SC_HANDLE__* OpenSCManagerW(ushort lpMachineName, ushort lpDatabaseName, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SC_HANDLE__* OpenServiceA(SC_HANDLE__* hSCManager, byte lpServiceName, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SC_HANDLE__* OpenServiceW(SC_HANDLE__* hSCManager, ushort lpServiceName, UInt32 dwDesiredAccess);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceConfigA(SC_HANDLE__* hService, _QUERY_SERVICE_CONFIGA* lpServiceConfig, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceConfigW(SC_HANDLE__* hService, _QUERY_SERVICE_CONFIGW* lpServiceConfig, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceConfig2A(SC_HANDLE__* hService, UInt32 dwInfoLevel, byte lpBuffer, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceConfig2W(SC_HANDLE__* hService, UInt32 dwInfoLevel, byte lpBuffer, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceLockStatusA(SC_HANDLE__* hSCManager, _QUERY_SERVICE_LOCK_STATUSA* lpLockStatus, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceLockStatusW(SC_HANDLE__* hSCManager, _QUERY_SERVICE_LOCK_STATUSW* lpLockStatus, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceObjectSecurity(SC_HANDLE__* hService, UInt32 dwSecurityInformation, void* lpSecurityDescriptor, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceStatus(SC_HANDLE__* hService, _SERVICE_STATUS* lpServiceStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceStatusEx(SC_HANDLE__* hService, _SC_STATUS_TYPE InfoLevel, byte lpBuffer, UInt32 cbBufSize, UInt32 pcbBytesNeeded);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SERVICE_STATUS_HANDLE__* RegisterServiceCtrlHandlerA(byte lpServiceName, Option lpHandlerProc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SERVICE_STATUS_HANDLE__* RegisterServiceCtrlHandlerW(ushort lpServiceName, Option lpHandlerProc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SERVICE_STATUS_HANDLE__* RegisterServiceCtrlHandlerExA(byte lpServiceName, Option lpHandlerProc, void* lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern SERVICE_STATUS_HANDLE__* RegisterServiceCtrlHandlerExW(ushort lpServiceName, Option lpHandlerProc, void* lpContext);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetServiceObjectSecurity(SC_HANDLE__* hService, UInt32 dwSecurityInformation, void* lpSecurityDescriptor);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetServiceStatus(SERVICE_STATUS_HANDLE__* hServiceStatus, _SERVICE_STATUS* lpServiceStatus);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StartServiceCtrlDispatcherA(_SERVICE_TABLE_ENTRYA* lpServiceStartTable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StartServiceCtrlDispatcherW(_SERVICE_TABLE_ENTRYW* lpServiceStartTable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StartServiceA(SC_HANDLE__* hService, UInt32 dwNumServiceArgs, byte* lpServiceArgVectors);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int StartServiceW(SC_HANDLE__* hService, UInt32 dwNumServiceArgs, ushort* lpServiceArgVectors);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int UnlockServiceDatabase(void* ScLock);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NotifyServiceStatusChangeA(SC_HANDLE__* hService, UInt32 dwNotifyMask, SERVICE_NOTIFY_2A* pNotifyBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 NotifyServiceStatusChangeW(SC_HANDLE__* hService, UInt32 dwNotifyMask, SERVICE_NOTIFY_2W* pNotifyBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ControlServiceExA(SC_HANDLE__* hService, UInt32 dwControl, UInt32 dwInfoLevel, void* pControlParams);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ControlServiceExW(SC_HANDLE__* hService, UInt32 dwControl, UInt32 dwInfoLevel, void* pControlParams);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int QueryServiceDynamicInformation(SERVICE_STATUS_HANDLE__* hServiceStatus, UInt32 dwInfoLevel, void** ppDynamicInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 SubscribeServiceChangeNotifications(SC_HANDLE__* hService, _SC_EVENT_TYPE eEventType, Option pCallback, void* pCallbackContext, _SC_NOTIFICATION_REGISTRATION** pSubscription);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void UnsubscribeServiceChangeNotifications(_SC_NOTIFICATION_REGISTRATION* pSubscription);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WaitServiceState(SC_HANDLE__* hService, UInt32 dwNotify, UInt32 dwTimeout, void* hCancelEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetServiceRegistryStateKey(SERVICE_STATUS_HANDLE__* ServiceStatusHandle, int StateType, UInt32 AccessMask, HKEY__** ServiceStateKey);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 GetServiceDirectory(SERVICE_STATUS_HANDLE__* hServiceStatus, int eDirectoryType, ushort lpPathBuffer, UInt32 cchPathBufferLength, UInt32* lpcchRequiredBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HKL__* ImmInstallIMEA(byte lpszIMEFileName, byte lpszLayoutText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HKL__* ImmInstallIMEW(ushort lpszIMEFileName, ushort lpszLayoutText);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HWND__* ImmGetDefaultIMEWnd(HWND__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmGetDescriptionA(HKL__* arg1, byte lpszDescription, uint uBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmGetDescriptionW(HKL__* arg1, ushort lpszDescription, uint uBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmGetIMEFileNameA(HKL__* arg1, byte lpszFileName, uint uBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmGetIMEFileNameW(HKL__* arg1, ushort lpszFileName, uint uBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetProperty(HKL__* arg1, UInt32 arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmIsIME(HKL__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSimulateHotKey(HWND__* arg1, UInt32 arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HIMC__* ImmCreateContext();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmDestroyContext(HIMC__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HIMC__* ImmGetContext(HWND__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmReleaseContext(HWND__* arg1, HIMC__* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern HIMC__* ImmAssociateContext(HWND__* arg1, HIMC__* arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmAssociateContextEx(HWND__* arg1, HIMC__* arg2, UInt32 arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ImmGetCompositionStringA(HIMC__* arg1, UInt32 arg2, void* lpBuf, UInt32 dwBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 ImmGetCompositionStringW(HIMC__* arg1, UInt32 arg2, void* lpBuf, UInt32 dwBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetCompositionStringA(HIMC__* arg1, UInt32 dwIndex, void* lpComp, UInt32 dwCompLen, void* lpRead, UInt32 dwReadLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetCompositionStringW(HIMC__* arg1, UInt32 dwIndex, void* lpComp, UInt32 dwCompLen, void* lpRead, UInt32 dwReadLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetCandidateListCountA(HIMC__* arg1, UInt32 lpdwListCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetCandidateListCountW(HIMC__* arg1, UInt32 lpdwListCount);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetCandidateListA(HIMC__* arg1, UInt32 deIndex, tagCANDIDATELIST* lpCandList, UInt32 dwBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetCandidateListW(HIMC__* arg1, UInt32 deIndex, tagCANDIDATELIST* lpCandList, UInt32 dwBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetGuideLineA(HIMC__* arg1, UInt32 dwIndex, byte lpBuf, UInt32 dwBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetGuideLineW(HIMC__* arg1, UInt32 dwIndex, ushort lpBuf, UInt32 dwBufLen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmGetConversionStatus(HIMC__* arg1, UInt32 lpfdwConversion, UInt32 lpfdwSentence);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetConversionStatus(HIMC__* arg1, UInt32 arg2, UInt32 arg3);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmGetOpenStatus(HIMC__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetOpenStatus(HIMC__* arg1, int arg2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmGetCompositionFontA(HIMC__* arg1, tagLOGFONTA* lplf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmGetCompositionFontW(HIMC__* arg1, tagLOGFONTW* lplf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetCompositionFontA(HIMC__* arg1, tagLOGFONTA* lplf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetCompositionFontW(HIMC__* arg1, tagLOGFONTW* lplf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmConfigureIMEA(HKL__* arg1, HWND__* arg2, UInt32 arg3, void* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmConfigureIMEW(HKL__* arg1, HWND__* arg2, UInt32 arg3, void* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long ImmEscapeA(HKL__* arg1, HIMC__* arg2, uint arg3, void* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long ImmEscapeW(HKL__* arg1, HIMC__* arg2, uint arg3, void* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetConversionListA(HKL__* arg1, HIMC__* arg2, byte lpSrc, tagCANDIDATELIST* lpDst, UInt32 dwBufLen, uint uFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetConversionListW(HKL__* arg1, HIMC__* arg2, ushort lpSrc, tagCANDIDATELIST* lpDst, UInt32 dwBufLen, uint uFlag);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmNotifyIME(HIMC__* arg1, UInt32 dwAction, UInt32 dwIndex, UInt32 dwValue);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmGetStatusWindowPos(HIMC__* arg1, tagPOINT* lpptPos);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetStatusWindowPos(HIMC__* arg1, tagPOINT* lpptPos);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmGetCompositionWindow(HIMC__* arg1, tagCOMPOSITIONFORM* lpCompForm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetCompositionWindow(HIMC__* arg1, tagCOMPOSITIONFORM* lpCompForm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmGetCandidateWindow(HIMC__* arg1, UInt32 arg2, tagCANDIDATEFORM* lpCandidate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmSetCandidateWindow(HIMC__* arg1, tagCANDIDATEFORM* lpCandidate);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmIsUIMessageA(HWND__* arg1, uint arg2, ulong arg3, long arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmIsUIMessageW(HWND__* arg1, uint arg2, ulong arg3, long arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmGetVirtualKey(HWND__* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmRegisterWordA(HKL__* arg1, byte lpszReading, UInt32 arg2, byte lpszRegister);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmRegisterWordW(HKL__* arg1, ushort lpszReading, UInt32 arg2, ushort lpszRegister);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmUnregisterWordA(HKL__* arg1, byte lpszReading, UInt32 arg2, byte lpszUnregister);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmUnregisterWordW(HKL__* arg1, ushort lpszReading, UInt32 arg2, ushort lpszUnregister);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmGetRegisterWordStyleA(HKL__* arg1, uint nItem, tagSTYLEBUFA* lpStyleBuf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmGetRegisterWordStyleW(HKL__* arg1, uint nItem, tagSTYLEBUFW* lpStyleBuf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmEnumRegisterWordA(HKL__* arg1, Option arg2, byte lpszReading, UInt32 arg3, byte lpszRegister, void* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint ImmEnumRegisterWordW(HKL__* arg1, Option arg2, ushort lpszReading, UInt32 arg3, ushort lpszRegister, void* arg4);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmDisableIME(UInt32 arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmEnumInputContext(UInt32 idThread, Option lpfn, long lParam);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetImeMenuItemsA(HIMC__* arg1, UInt32 arg2, UInt32 arg3, tagIMEMENUITEMINFOA* lpImeParentMenu, tagIMEMENUITEMINFOA* lpImeMenu, UInt32 dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ImmGetImeMenuItemsW(HIMC__* arg1, UInt32 arg2, UInt32 arg3, tagIMEMENUITEMINFOW* lpImeParentMenu, tagIMEMENUITEMINFOW* lpImeMenu, UInt32 dwSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmDisableTextFrameService(UInt32 idThread);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ImmDisableLegacyIME();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int __WSAFDIsSet(ulong fd, fd_set* arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong accept(ulong s, sockaddr* addr, int* addrlen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int bind(ulong s, sockaddr* name, int namelen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int closesocket(ulong s);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int connect(ulong s, sockaddr* name, int namelen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int ioctlsocket(ulong s, Int32 cmd, UInt32* argp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int getpeername(ulong s, sockaddr* name, int* namelen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int getsockname(ulong s, sockaddr* name, int* namelen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int getsockopt(ulong s, int level, int optname, byte* optval, int* optlen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 htonl(UInt32 hostlong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort htons(ushort hostshort);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 inet_addr(byte* cp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* inet_ntoa(in_addr in_);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int listen(ulong s, int backlog);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 ntohl(UInt32 netlong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort ntohs(ushort netshort);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int recv(ulong s, byte* buf, int len, int flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int recvfrom(ulong s, byte* buf, int len, int flags, sockaddr* from, int* fromlen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int select(int nfds, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, timeval* timeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int send(ulong s, byte* buf, int len, int flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int sendto(ulong s, byte* buf, int len, int flags, sockaddr* to, int tolen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int setsockopt(ulong s, int level, int optname, byte* optval, int optlen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int shutdown(ulong s, int how);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong socket(int af, int type_, int protocol);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern hostent* gethostbyaddr(byte* addr, int len, int type_);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern hostent* gethostbyname(byte* name);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int gethostname(byte* name, int namelen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetHostNameW(ushort name, int namelen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern servent* getservbyport(int port, byte* proto);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern servent* getservbyname(byte* name, byte* proto);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern protoent* getprotobynumber(int number);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern protoent* getprotobyname(byte* name);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAStartup(ushort wVersionRequested, WSAData* lpWSAData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSACleanup();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void WSASetLastError(int iError);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAGetLastError();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAIsBlocking();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAUnhookBlockingHook();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Option WSASetBlockingHook(Option lpBlockFunc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSACancelBlockingCall();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* WSAAsyncGetServByName(HWND__* hWnd, uint wMsg, byte* name, byte* proto, byte* buf, int buflen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* WSAAsyncGetServByPort(HWND__* hWnd, uint wMsg, int port, byte* proto, byte* buf, int buflen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* WSAAsyncGetProtoByName(HWND__* hWnd, uint wMsg, byte* name, byte* buf, int buflen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* WSAAsyncGetProtoByNumber(HWND__* hWnd, uint wMsg, int number, byte* buf, int buflen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* WSAAsyncGetHostByName(HWND__* hWnd, uint wMsg, byte* name, byte* buf, int buflen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* WSAAsyncGetHostByAddr(HWND__* hWnd, uint wMsg, byte* addr, int len, int type_, byte* buf, int buflen);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSACancelAsyncRequest(void* hAsyncTaskHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAAsyncSelect(ulong s, HWND__* hWnd, uint wMsg, Int32 lEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong WSAAccept(ulong s, sockaddr* addr, int* addrlen, Option lpfnCondition, ulong dwCallbackData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSACloseEvent(void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAConnect(ulong s, sockaddr* name, int namelen, _WSABUF* lpCallerData, _WSABUF* lpCalleeData, _QualityOfService* lpSQOS, _QualityOfService* lpGQOS);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAConnectByNameW(ulong s, ushort nodename, ushort servicename, UInt32 LocalAddressLength, sockaddr* LocalAddress, UInt32 RemoteAddressLength, sockaddr* RemoteAddress, timeval* timeout, _OVERLAPPED* Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAConnectByNameA(ulong s, byte nodename, byte servicename, UInt32 LocalAddressLength, sockaddr* LocalAddress, UInt32 RemoteAddressLength, sockaddr* RemoteAddress, timeval* timeout, _OVERLAPPED* Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAConnectByList(ulong s, _SOCKET_ADDRESS_LIST* SocketAddress, UInt32 LocalAddressLength, sockaddr* LocalAddress, UInt32 RemoteAddressLength, sockaddr* RemoteAddress, timeval* timeout, _OVERLAPPED* Reserved);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* WSACreateEvent();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSADuplicateSocketA(ulong s, UInt32 dwProcessId, _WSAPROTOCOL_INFOA* lpProtocolInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSADuplicateSocketW(ulong s, UInt32 dwProcessId, _WSAPROTOCOL_INFOW* lpProtocolInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAEnumNetworkEvents(ulong s, void* hEventObject, _WSANETWORKEVENTS* lpNetworkEvents);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAEnumProtocolsA(int* lpiProtocols, _WSAPROTOCOL_INFOA* lpProtocolBuffer, UInt32 lpdwBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAEnumProtocolsW(int* lpiProtocols, _WSAPROTOCOL_INFOW* lpProtocolBuffer, UInt32 lpdwBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAEventSelect(ulong s, void* hEventObject, Int32 lNetworkEvents);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAGetOverlappedResult(ulong s, _OVERLAPPED* lpOverlapped, UInt32 lpcbTransfer, int fWait, UInt32 lpdwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAGetQOSByName(ulong s, _WSABUF* lpQOSName, _QualityOfService* lpQOS);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAHtonl(ulong s, UInt32 hostlong, UInt32* lpnetlong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAHtons(ulong s, ushort hostshort, ushort* lpnetshort);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAIoctl(ulong s, UInt32 dwIoControlCode, void* lpvInBuffer, UInt32 cbInBuffer, void* lpvOutBuffer, UInt32 cbOutBuffer, UInt32 lpcbBytesReturned, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong WSAJoinLeaf(ulong s, sockaddr* name, int namelen, _WSABUF* lpCallerData, _WSABUF* lpCalleeData, _QualityOfService* lpSQOS, _QualityOfService* lpGQOS, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSANtohl(ulong s, UInt32 netlong, UInt32* lphostlong);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSANtohs(ulong s, ushort netshort, ushort* lphostshort);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSARecv(ulong s, _WSABUF* lpBuffers, UInt32 dwBufferCount, UInt32 lpNumberOfBytesRecvd, UInt32 lpFlags, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSARecvDisconnect(ulong s, _WSABUF* lpInboundDisconnectData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSARecvFrom(ulong s, _WSABUF* lpBuffers, UInt32 dwBufferCount, UInt32 lpNumberOfBytesRecvd, UInt32 lpFlags, sockaddr* lpFrom, int* lpFromlen, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAResetEvent(void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSASend(ulong s, _WSABUF* lpBuffers, UInt32 dwBufferCount, UInt32 lpNumberOfBytesSent, UInt32 dwFlags, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSASendMsg(ulong Handle, _WSAMSG* lpMsg, UInt32 dwFlags, UInt32 lpNumberOfBytesSent, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSASendDisconnect(ulong s, _WSABUF* lpOutboundDisconnectData);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSASendTo(ulong s, _WSABUF* lpBuffers, UInt32 dwBufferCount, UInt32 lpNumberOfBytesSent, UInt32 dwFlags, sockaddr* lpTo, int iTolen, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSASetEvent(void* hEvent);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong WSASocketA(int af, int type_, int protocol, _WSAPROTOCOL_INFOA* lpProtocolInfo, uint g, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong WSASocketW(int af, int type_, int protocol, _WSAPROTOCOL_INFOW* lpProtocolInfo, uint g, UInt32 dwFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 WSAWaitForMultipleEvents(UInt32 cEvents, void** lphEvents, int fWaitAll, UInt32 dwTimeout, int fAlertable);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAAddressToStringA(sockaddr* lpsaAddress, UInt32 dwAddressLength, _WSAPROTOCOL_INFOA* lpProtocolInfo, byte lpszAddressString, UInt32 lpdwAddressStringLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAAddressToStringW(sockaddr* lpsaAddress, UInt32 dwAddressLength, _WSAPROTOCOL_INFOW* lpProtocolInfo, ushort lpszAddressString, UInt32 lpdwAddressStringLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAStringToAddressA(byte AddressString, int AddressFamily, _WSAPROTOCOL_INFOA* lpProtocolInfo, sockaddr* lpAddress, int* lpAddressLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAStringToAddressW(ushort AddressString, int AddressFamily, _WSAPROTOCOL_INFOW* lpProtocolInfo, sockaddr* lpAddress, int* lpAddressLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSALookupServiceBeginA(_WSAQuerySetA* lpqsRestrictions, UInt32 dwControlFlags, void* lphLookup);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSALookupServiceBeginW(_WSAQuerySetW* lpqsRestrictions, UInt32 dwControlFlags, void* lphLookup);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSALookupServiceNextA(void* hLookup, UInt32 dwControlFlags, UInt32 lpdwBufferLength, _WSAQuerySetA* lpqsResults);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSALookupServiceNextW(void* hLookup, UInt32 dwControlFlags, UInt32 lpdwBufferLength, _WSAQuerySetW* lpqsResults);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSANSPIoctl(void* hLookup, UInt32 dwControlCode, void* lpvInBuffer, UInt32 cbInBuffer, void* lpvOutBuffer, UInt32 cbOutBuffer, UInt32 lpcbBytesReturned, _WSACOMPLETION* lpCompletion);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSALookupServiceEnd(void* hLookup);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAInstallServiceClassA(_WSAServiceClassInfoA* lpServiceClassInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAInstallServiceClassW(_WSAServiceClassInfoW* lpServiceClassInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSARemoveServiceClass(_GUID lpServiceClassId);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAGetServiceClassInfoA(_GUID lpProviderId, _GUID lpServiceClassId, UInt32 lpdwBufSize, _WSAServiceClassInfoA* lpServiceClassInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAGetServiceClassInfoW(_GUID lpProviderId, _GUID lpServiceClassId, UInt32 lpdwBufSize, _WSAServiceClassInfoW* lpServiceClassInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAEnumNameSpaceProvidersA(UInt32 lpdwBufferLength, _WSANAMESPACE_INFOA* lpnspBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAEnumNameSpaceProvidersW(UInt32 lpdwBufferLength, _WSANAMESPACE_INFOW* lpnspBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAEnumNameSpaceProvidersExA(UInt32 lpdwBufferLength, _WSANAMESPACE_INFOEXA* lpnspBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAEnumNameSpaceProvidersExW(UInt32 lpdwBufferLength, _WSANAMESPACE_INFOEXW* lpnspBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAGetServiceClassNameByClassIdA(_GUID lpServiceClassId, byte lpszServiceClassName, UInt32 lpdwBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAGetServiceClassNameByClassIdW(_GUID lpServiceClassId, ushort lpszServiceClassName, UInt32 lpdwBufferLength);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSASetServiceA(_WSAQuerySetA* lpqsRegInfo, _WSAESETSERVICEOP essoperation, UInt32 dwControlFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSASetServiceW(_WSAQuerySetW* lpqsRegInfo, _WSAESETSERVICEOP essoperation, UInt32 dwControlFlags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAProviderConfigChange(void* lpNotificationHandle, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int WSAPoll(pollfd* fdArray, UInt32 fds, int timeout);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int getaddrinfo(byte pNodeName, byte pServiceName, addrinfo* pHints, addrinfo** ppResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAddrInfoW(ushort pNodeName, ushort pServiceName, addrinfoW* pHints, addrinfoW** ppResult);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAddrInfoExA(byte pName, byte pServiceName, UInt32 dwNameSpace, _GUID lpNspId, addrinfoexA* hints, addrinfoexA** ppResult, timeval* timeout, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine, void* lpNameHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAddrInfoExW(ushort pName, ushort pServiceName, UInt32 dwNameSpace, _GUID lpNspId, addrinfoexW* hints, addrinfoexW** ppResult, timeval* timeout, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine, void* lpHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAddrInfoExCancel(void* lpHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetAddrInfoExOverlappedResult(_OVERLAPPED* lpOverlapped);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetAddrInfoExA(byte pName, byte pServiceName, _SOCKET_ADDRESS* pAddresses, UInt32 dwAddressCount, tagBLOB* lpBlob, UInt32 dwFlags, UInt32 dwNameSpace, _GUID lpNspId, timeval* timeout, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine, void* lpNameHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SetAddrInfoExW(ushort pName, ushort pServiceName, _SOCKET_ADDRESS* pAddresses, UInt32 dwAddressCount, tagBLOB* lpBlob, UInt32 dwFlags, UInt32 dwNameSpace, _GUID lpNspId, timeval* timeout, _OVERLAPPED* lpOverlapped, Option lpCompletionRoutine, void* lpNameHandle);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void freeaddrinfo(addrinfo* pAddrInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreeAddrInfoW(addrinfoW* pAddrInfo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreeAddrInfoEx(addrinfoexA* pAddrInfoEx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void FreeAddrInfoExW(addrinfoexW* pAddrInfoEx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int getnameinfo(sockaddr* pSockaddr, int SockaddrLength, byte pNodeBuffer, UInt32 NodeBufferSize, byte pServiceBuffer, UInt32 ServiceBufferSize, int Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int GetNameInfoW(sockaddr* pSockaddr, int SockaddrLength, ushort pNodeBuffer, UInt32 NodeBufferSize, ushort pServiceBuffer, UInt32 ServiceBufferSize, int Flags);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int inet_pton(int Family, byte pszAddrString, void* pAddrBuf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int InetPtonW(int Family, ushort pszAddrString, void* pAddrBuf);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte inet_ntop(int Family, void* pAddr, byte pStringBuf, UIntPtr StringBufSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort InetNtopW(int Family, void* pAddr, ushort pStringBuf, UIntPtr StringBufSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wasctime(tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wasctime_s(ushort* _Buffer, UIntPtr _SizeInWords, tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr wcsftime(ushort* _Buffer, UIntPtr _SizeInWords, ushort* _Format, tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _wcsftime_l(ushort* _Buffer, UIntPtr _SizeInWords, ushort* _Format, tm* _Tm, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wctime32(Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wctime32_s(ushort* _Buffer, UIntPtr _SizeInWords, Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wctime64(long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wctime64_s(ushort* _Buffer, UIntPtr _SizeInWords, long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wstrdate_s(ushort* _Buffer, UIntPtr _SizeInWords);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wstrdate(ushort* _Buffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _wstrtime_s(ushort* _Buffer, UIntPtr _SizeInWords);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort* _wstrtime(ushort* _Buffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int* __daylight();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32* __dstbias();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32* __timezone();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte** __tzname();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_daylight(int* _Daylight);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_dstbias(Int32* _DaylightSavingsBias);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_timezone(Int32* _TimeZone);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _get_tzname(UIntPtr* _ReturnValue, byte* _Buffer, UIntPtr _SizeInBytes, int _Index);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* asctime(tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int asctime_s(byte* _Buffer, UIntPtr _SizeInBytes, tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 clock();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _ctime32(Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ctime32_s(byte* _Buffer, UIntPtr _SizeInBytes, Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _ctime64(long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _ctime64_s(byte* _Buffer, UIntPtr _SizeInBytes, long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _difftime32(Int32 _Time1, Int32 _Time2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern double _difftime64(long _Time1, long _Time2);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tm* _gmtime32(Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _gmtime32_s(tm* _Tm, Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tm* _gmtime64(long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _gmtime64_s(tm* _Tm, long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tm* _localtime32(Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _localtime32_s(tm* _Tm, Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern tm* _localtime64(long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _localtime64_s(tm* _Tm, long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _mkgmtime32(tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _mkgmtime64(tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _mktime32(tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _mktime64(tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr strftime(byte* _Buffer, UIntPtr _SizeInBytes, byte* _Format, tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr _strftime_l(byte* _Buffer, UIntPtr _MaxSize, byte* _Format, tm* _Tm, __crt_locale_pointers* _Locale);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strdate_s(byte* _Buffer, UIntPtr _SizeInBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strdate(byte* _Buffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _strtime_s(byte* _Buffer, UIntPtr _SizeInBytes);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* _strtime(byte* _Buffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 _time32(Int32* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long _time64(long* _Time);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _timespec32_get(_timespec32* _Ts, int _Base);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int _timespec64_get(_timespec64* _Ts, int _Base);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void _tzset();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint _getsystime(tm* _Tm);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint _setsystime(tm* _Tm, uint _Milliseconds);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void tzset();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern byte* quiche_version();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_enable_debug_logging(Option cb, void* argp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_config* quiche_config_new(uint version);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_config_load_cert_chain_from_pem_file(quiche_config* config, byte* path);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_config_load_priv_key_from_pem_file(quiche_config* config, byte* path);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_config_load_verify_locations_from_file(quiche_config* config, byte* path);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_config_load_verify_locations_from_directory(quiche_config* config, byte* path);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_verify_peer(quiche_config* config, bool v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_grease(quiche_config* config, bool v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_log_keys(quiche_config* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_enable_early_data(quiche_config* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_config_set_application_protos(quiche_config* config, byte* protos, UIntPtr protos_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_max_idle_timeout(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_max_recv_udp_payload_size(quiche_config* config, UIntPtr v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_max_send_udp_payload_size(quiche_config* config, UIntPtr v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_initial_max_data(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_initial_max_stream_data_bidi_local(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_initial_max_stream_data_bidi_remote(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_initial_max_stream_data_uni(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_initial_max_streams_bidi(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_initial_max_streams_uni(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_ack_delay_exponent(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_max_ack_delay(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_disable_active_migration(quiche_config* config, bool v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_cc_algorithm(quiche_config* config, int algo);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_enable_hystart(quiche_config* config, bool v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_enable_pacing(quiche_config* config, bool v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_enable_dgram(quiche_config* config, bool enabled, UIntPtr recv_queue_len, UIntPtr send_queue_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_max_connection_window(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_max_stream_window(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_active_connection_id_limit(quiche_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_set_stateless_reset_token(quiche_config* config, byte* v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_config_free(quiche_config* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_header_info(byte* buf, UIntPtr buf_len, UIntPtr dcil, uint* version, byte* type_, byte* scid, UIntPtr* scid_len, byte* dcid, UIntPtr* dcid_len, byte* token, UIntPtr* token_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_conn* quiche_accept(byte* scid, UIntPtr scid_len, byte* odcid, UIntPtr odcid_len, sockaddr* local, UIntPtr local_len, sockaddr* peer, UIntPtr peer_len, quiche_config* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_conn* quiche_connect(byte* server_name, byte* scid, UIntPtr scid_len, sockaddr* local, UIntPtr local_len, sockaddr* peer, UIntPtr peer_len, quiche_config* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_negotiate_version(byte* scid, UIntPtr scid_len, byte* dcid, UIntPtr dcid_len, byte* @out, UIntPtr out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_retry(byte* scid, UIntPtr scid_len, byte* dcid, UIntPtr dcid_len, byte* new_scid, UIntPtr new_scid_len, byte* token, UIntPtr token_len, uint version, byte* @out, UIntPtr out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_version_is_supported(uint version);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_conn* quiche_conn_new_with_tls(byte* scid, UIntPtr scid_len, byte* odcid, UIntPtr odcid_len, sockaddr* local, UIntPtr local_len, sockaddr* peer, UIntPtr peer_len, quiche_config* config, void* ssl, bool is_server);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_set_keylog_path(quiche_conn* conn, byte* path);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_set_keylog_fd(quiche_conn* conn, int fd);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_set_qlog_path(quiche_conn* conn, byte* path, byte* log_title, byte* log_desc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_set_qlog_fd(quiche_conn* conn, int fd, byte* log_title, byte* log_desc);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_conn_set_session(quiche_conn* conn, byte* buf, UIntPtr buf_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_recv(quiche_conn* conn, byte* buf, UIntPtr buf_len, quiche_recv_info* info);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_send(quiche_conn* conn, byte* @out, UIntPtr out_len, quiche_send_info* out_info);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr quiche_conn_send_quantum(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_stream_recv(quiche_conn* conn, ulong stream_id, byte* @out, UIntPtr buf_len, bool* fin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_stream_send(quiche_conn* conn, ulong stream_id, byte* buf, UIntPtr buf_len, bool fin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_conn_stream_priority(quiche_conn* conn, ulong stream_id, byte urgency, bool incremental);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_conn_stream_shutdown(quiche_conn* conn, ulong stream_id, int direction, ulong err);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_stream_capacity(quiche_conn* conn, ulong stream_id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_stream_readable(quiche_conn* conn, ulong stream_id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_stream_readable_next(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_conn_stream_writable(quiche_conn* conn, ulong stream_id, UIntPtr len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_stream_writable_next(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_stream_finished(quiche_conn* conn, ulong stream_id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_stream_iter* quiche_conn_readable(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_stream_iter* quiche_conn_writable(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr quiche_conn_max_send_udp_payload_size(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong quiche_conn_timeout_as_nanos(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong quiche_conn_timeout_as_millis(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_on_timeout(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_conn_close(quiche_conn* conn, bool app, ulong err, byte* reason, UIntPtr reason_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_trace_id(quiche_conn* conn, byte** @out, UIntPtr* out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_source_id(quiche_conn* conn, byte** @out, UIntPtr* out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_destination_id(quiche_conn* conn, byte** @out, UIntPtr* out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_application_proto(quiche_conn* conn, byte** @out, UIntPtr* out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_peer_cert(quiche_conn* conn, byte** @out, UIntPtr* out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_session(quiche_conn* conn, byte** @out, UIntPtr* out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_is_established(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_is_in_early_data(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_is_readable(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_is_draining(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong quiche_conn_peer_streams_left_bidi(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong quiche_conn_peer_streams_left_uni(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_is_closed(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_is_timed_out(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_peer_error(quiche_conn* conn, bool* is_app, ulong* error_code, byte** reason, UIntPtr* reason_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_conn_local_error(quiche_conn* conn, bool* is_app, ulong* error_code, byte** reason, UIntPtr* reason_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_conn_stream_init_application_data(quiche_conn* conn, ulong stream_id, void* data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* quiche_conn_stream_application_data(quiche_conn* conn, ulong stream_id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_stream_iter_next(quiche_stream_iter* iter, ulong* stream_id);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_stream_iter_free(quiche_stream_iter* iter);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_stats(quiche_conn* conn, quiche_stats* @out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_conn_path_stats(quiche_conn* conn, UIntPtr idx, quiche_path_stats* @out);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_dgram_max_writable_len(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_dgram_recv_front_len(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_dgram_recv_queue_len(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_dgram_recv_queue_byte_size(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_dgram_send_queue_len(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_dgram_send_queue_byte_size(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_dgram_recv(quiche_conn* conn, byte* buf, UIntPtr buf_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_dgram_send(quiche_conn* conn, byte* buf, UIntPtr buf_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_dgram_purge_outgoing(quiche_conn* conn, Option f);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_send_ack_eliciting(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_conn_send_ack_eliciting_on_path(quiche_conn* conn, sockaddr* local, UIntPtr local_len, sockaddr* peer, UIntPtr peer_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_conn_free(quiche_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_h3_config* quiche_h3_config_new();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_h3_config_set_max_field_section_size(quiche_h3_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_h3_config_set_qpack_max_table_capacity(quiche_h3_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_h3_config_set_qpack_blocked_streams(quiche_h3_config* config, ulong v);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_h3_config_enable_extended_connect(quiche_h3_config* config, bool enabled);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_h3_config_free(quiche_h3_config* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_h3_conn* quiche_h3_accept(quiche_conn* quiche_conn, quiche_h3_config* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern quiche_h3_conn* quiche_h3_conn_new_with_transport(quiche_conn* quiche_conn, quiche_h3_config* config);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_h3_conn_poll(quiche_h3_conn* conn, quiche_conn* quic_conn, quiche_h3_event** ev);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_h3_event_type(quiche_h3_event* ev);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_h3_event_for_each_header(quiche_h3_event* ev, Option cb, void* argp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_h3_for_each_setting(quiche_h3_conn* conn, Option cb, void* argp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_h3_event_headers_has_body(quiche_h3_event* ev);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_h3_extended_connect_enabled_by_peer(quiche_h3_conn* conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_h3_event_free(quiche_h3_event* ev);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_h3_send_request(quiche_h3_conn* conn, quiche_conn* quic_conn, quiche_h3_header* headers, UIntPtr headers_len, bool fin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_h3_send_response(quiche_h3_conn* conn, quiche_conn* quic_conn, ulong stream_id, quiche_h3_header* headers, UIntPtr headers_len, bool fin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_h3_send_response_with_priority(quiche_h3_conn* conn, quiche_conn* quic_conn, ulong stream_id, quiche_h3_header* headers, UIntPtr headers_len, quiche_h3_priority* priority, bool fin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_h3_send_body(quiche_h3_conn* conn, quiche_conn* quic_conn, ulong stream_id, byte* body, UIntPtr body_len, bool fin);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_h3_recv_body(quiche_h3_conn* conn, quiche_conn* quic_conn, ulong stream_id, byte* @out, UIntPtr out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_h3_parse_extensible_priority(byte* priority, UIntPtr priority_len, quiche_h3_priority* parsed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_h3_send_priority_update_for_request(quiche_h3_conn* conn, quiche_conn* quic_conn, ulong stream_id, quiche_h3_priority* priority);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern int quiche_h3_take_last_priority_update(quiche_h3_conn* conn, ulong prioritized_element_id, Option cb, void* argp);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern bool quiche_h3_dgram_enabled_by_peer(quiche_h3_conn* conn, quiche_conn* quic_conn);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_h3_send_dgram(quiche_h3_conn* conn, quiche_conn* quic_conn, ulong flow_id, byte* data, UIntPtr data_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern long quiche_h3_recv_dgram(quiche_h3_conn* conn, quiche_conn* quic_conn, ulong* flow_id, UIntPtr* flow_id_len, byte* @out, UIntPtr out_len);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void quiche_h3_conn_free(quiche_h3_conn* conn);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct __BindgenBitfieldUnit
    {
        public Storage storage;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct __crt_locale_pointers
    {
        public __crt_locale_data* locinfo;
        public __crt_multibyte_data* mbcinfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESSOR_NUMBER
    {
        public ushort Group;
        public byte Number;
        public byte Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _GROUP_AFFINITY
    {
        public ulong Mask;
        public ushort Group;
        public fixed ushort Reserved[3];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _LARGE_INTEGER
    {
        [FieldOffset(0)]
        public _LARGE_INTEGER__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public _LARGE_INTEGER__bindgen_ty_2 u;
        [FieldOffset(0)]
        public long QuadPart;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LARGE_INTEGER__bindgen_ty_1
    {
        public UInt32 LowPart;
        public Int32 HighPart;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LARGE_INTEGER__bindgen_ty_2
    {
        public UInt32 LowPart;
        public Int32 HighPart;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _ULARGE_INTEGER
    {
        [FieldOffset(0)]
        public _ULARGE_INTEGER__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public _ULARGE_INTEGER__bindgen_ty_2 u;
        [FieldOffset(0)]
        public ulong QuadPart;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ULARGE_INTEGER__bindgen_ty_1
    {
        public UInt32 LowPart;
        public UInt32 HighPart;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ULARGE_INTEGER__bindgen_ty_2
    {
        public UInt32 LowPart;
        public UInt32 HighPart;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LUID
    {
        public UInt32 LowPart;
        public Int32 HighPart;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LIST_ENTRY
    {
        public _LIST_ENTRY* Flink;
        public _LIST_ENTRY* Blink;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SINGLE_LIST_ENTRY
    {
        public _SINGLE_LIST_ENTRY* Next;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _GUID
    {
        public UInt32 Data1;
        public ushort Data2;
        public ushort Data3;
        public fixed byte Data4[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _M128A
    {
        public ulong Low;
        public long High;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _XSAVE_FORMAT
    {
        public ushort ControlWord;
        public ushort StatusWord;
        public byte TagWord;
        public byte Reserved1;
        public ushort ErrorOpcode;
        public UInt32 ErrorOffset;
        public ushort ErrorSelector;
        public ushort Reserved2;
        public UInt32 DataOffset;
        public ushort DataSelector;
        public ushort Reserved3;
        public UInt32 MxCsr;
        public UInt32 MxCsr_Mask;
        public fixed byte/* _M128A, this length is invalid so must keep pointer and can't edit from C# */ FloatRegisters[8];
        public fixed byte/* _M128A, this length is invalid so must keep pointer and can't edit from C# */ XmmRegisters[16];
        public fixed byte Reserved4[96];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _XSAVE_AREA_HEADER
    {
        public ulong Mask;
        public ulong CompactionMask;
        public fixed ulong Reserved2[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _XSAVE_AREA
    {
        public _XSAVE_FORMAT LegacyState;
        public _XSAVE_AREA_HEADER Header;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCOPE_TABLE_AMD64__bindgen_ty_1
    {
        public UInt32 BeginAddress;
        public UInt32 EndAddress;
        public UInt32 HandlerAddress;
        public UInt32 JumpTarget;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONTEXT
    {
        public ulong P1Home;
        public ulong P2Home;
        public ulong P3Home;
        public ulong P4Home;
        public ulong P5Home;
        public ulong P6Home;
        public UInt32 ContextFlags;
        public UInt32 MxCsr;
        public ushort SegCs;
        public ushort SegDs;
        public ushort SegEs;
        public ushort SegFs;
        public ushort SegGs;
        public ushort SegSs;
        public UInt32 EFlags;
        public ulong Dr0;
        public ulong Dr1;
        public ulong Dr2;
        public ulong Dr3;
        public ulong Dr6;
        public ulong Dr7;
        public ulong Rax;
        public ulong Rcx;
        public ulong Rdx;
        public ulong Rbx;
        public ulong Rsp;
        public ulong Rbp;
        public ulong Rsi;
        public ulong Rdi;
        public ulong R8;
        public ulong R9;
        public ulong R10;
        public ulong R11;
        public ulong R12;
        public ulong R13;
        public ulong R14;
        public ulong R15;
        public ulong Rip;
        public _CONTEXT__bindgen_ty_1 __bindgen_anon_1;
        public fixed byte/* _M128A, this length is invalid so must keep pointer and can't edit from C# */ VectorRegister[26];
        public ulong VectorControl;
        public ulong DebugControl;
        public ulong LastBranchToRip;
        public ulong LastBranchFromRip;
        public ulong LastExceptionToRip;
        public ulong LastExceptionFromRip;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CONTEXT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _XSAVE_FORMAT FltSave;
        [FieldOffset(0)]
        public _CONTEXT__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONTEXT__bindgen_ty_1__bindgen_ty_1
    {
        public fixed byte/* _M128A, this length is invalid so must keep pointer and can't edit from C# */ Header[2];
        public fixed byte/* _M128A, this length is invalid so must keep pointer and can't edit from C# */ Legacy[8];
        public _M128A Xmm0;
        public _M128A Xmm1;
        public _M128A Xmm2;
        public _M128A Xmm3;
        public _M128A Xmm4;
        public _M128A Xmm5;
        public _M128A Xmm6;
        public _M128A Xmm7;
        public _M128A Xmm8;
        public _M128A Xmm9;
        public _M128A Xmm10;
        public _M128A Xmm11;
        public _M128A Xmm12;
        public _M128A Xmm13;
        public _M128A Xmm14;
        public _M128A Xmm15;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _UNWIND_HISTORY_TABLE_ENTRY
    {
        public ulong ImageBase;
        public _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _UNWIND_HISTORY_TABLE
    {
        public UInt32 Count;
        public byte LocalHint;
        public byte GlobalHint;
        public byte Search;
        public byte Once;
        public ulong LowAddress;
        public ulong HighAddress;
        public fixed byte/* _UNWIND_HISTORY_TABLE_ENTRY, this length is invalid so must keep pointer and can't edit from C# */ Entry[12];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISPATCHER_CONTEXT
    {
        public ulong ControlPc;
        public ulong ImageBase;
        public _IMAGE_RUNTIME_FUNCTION_ENTRY* FunctionEntry;
        public ulong EstablisherFrame;
        public ulong TargetIp;
        public _CONTEXT* ContextRecord;
        public Option LanguageHandler;
        public void* HandlerData;
        public _UNWIND_HISTORY_TABLE* HistoryTable;
        public UInt32 ScopeIndex;
        public UInt32 Fill0;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _KNONVOLATILE_CONTEXT_POINTERS
    {
        public _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1 __bindgen_anon_1;
        public _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2 __bindgen_anon_2;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1
    {
        [FieldOffset(0)]
        public fixed byte/* _M128A, this length is invalid so must keep pointer and can't edit from C# */ FloatingContext[16];
        [FieldOffset(0)]
        public _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_1__bindgen_ty_1
    {
        public _M128A* Xmm0;
        public _M128A* Xmm1;
        public _M128A* Xmm2;
        public _M128A* Xmm3;
        public _M128A* Xmm4;
        public _M128A* Xmm5;
        public _M128A* Xmm6;
        public _M128A* Xmm7;
        public _M128A* Xmm8;
        public _M128A* Xmm9;
        public _M128A* Xmm10;
        public _M128A* Xmm11;
        public _M128A* Xmm12;
        public _M128A* Xmm13;
        public _M128A* Xmm14;
        public _M128A* Xmm15;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2
    {
        [FieldOffset(0)]
        public fixed ulong IntegerContext[16];
        [FieldOffset(0)]
        public _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _KNONVOLATILE_CONTEXT_POINTERS__bindgen_ty_2__bindgen_ty_1
    {
        public ulong* Rax;
        public ulong* Rcx;
        public ulong* Rdx;
        public ulong* Rbx;
        public ulong* Rsp;
        public ulong* Rbp;
        public ulong* Rsi;
        public ulong* Rdi;
        public ulong* R8;
        public ulong* R9;
        public ulong* R10;
        public ulong* R11;
        public ulong* R12;
        public ulong* R13;
        public ulong* R14;
        public ulong* R15;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCOPE_TABLE_ARM__bindgen_ty_1
    {
        public UInt32 BeginAddress;
        public UInt32 EndAddress;
        public UInt32 HandlerAddress;
        public UInt32 JumpTarget;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCOPE_TABLE_ARM64__bindgen_ty_1
    {
        public UInt32 BeginAddress;
        public UInt32 EndAddress;
        public UInt32 HandlerAddress;
        public UInt32 JumpTarget;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _LDT_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1 Bytes;
        [FieldOffset(0)]
        public _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 Bits;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LDT_ENTRY__bindgen_ty_1__bindgen_ty_1
    {
        public byte BaseMid;
        public byte Flags1;
        public byte Flags2;
        public byte BaseHi;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LDT_ENTRY__bindgen_ty_1__bindgen_ty_2
    {
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WOW64_FLOATING_SAVE_AREA
    {
        public UInt32 ControlWord;
        public UInt32 StatusWord;
        public UInt32 TagWord;
        public UInt32 ErrorOffset;
        public UInt32 ErrorSelector;
        public UInt32 DataOffset;
        public UInt32 DataSelector;
        public fixed byte RegisterArea[80];
        public UInt32 Cr0NpxState;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WOW64_CONTEXT
    {
        public UInt32 ContextFlags;
        public UInt32 Dr0;
        public UInt32 Dr1;
        public UInt32 Dr2;
        public UInt32 Dr3;
        public UInt32 Dr6;
        public UInt32 Dr7;
        public _WOW64_FLOATING_SAVE_AREA FloatSave;
        public UInt32 SegGs;
        public UInt32 SegFs;
        public UInt32 SegEs;
        public UInt32 SegDs;
        public UInt32 Edi;
        public UInt32 Esi;
        public UInt32 Ebx;
        public UInt32 Edx;
        public UInt32 Ecx;
        public UInt32 Eax;
        public UInt32 Ebp;
        public UInt32 Eip;
        public UInt32 SegCs;
        public UInt32 EFlags;
        public UInt32 Esp;
        public UInt32 SegSs;
        public fixed byte ExtendedRegisters[512];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WOW64_LDT_ENTRY
    {
        public ushort LimitLow;
        public ushort BaseLow;
        public _WOW64_LDT_ENTRY__bindgen_ty_1 HighWord;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _WOW64_LDT_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1 Bytes;
        [FieldOffset(0)]
        public _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2 Bits;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_1
    {
        public byte BaseMid;
        public byte Flags1;
        public byte Flags2;
        public byte BaseHi;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WOW64_LDT_ENTRY__bindgen_ty_1__bindgen_ty_2
    {
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _EXCEPTION_RECORD
    {
        public UInt32 ExceptionCode;
        public UInt32 ExceptionFlags;
        public _EXCEPTION_RECORD* ExceptionRecord;
        public void* ExceptionAddress;
        public UInt32 NumberParameters;
        public fixed ulong ExceptionInformation[15];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _EXCEPTION_POINTERS
    {
        public _EXCEPTION_RECORD ExceptionRecord;
        public _CONTEXT* ContextRecord;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LUID_AND_ATTRIBUTES
    {
        public _LUID Luid;
        public UInt32 Attributes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SID_IDENTIFIER_AUTHORITY
    {
        public fixed byte Value[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SID
    {
        public byte Revision;
        public byte SubAuthorityCount;
        public _SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ SubAuthority[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SID_AND_ATTRIBUTES
    {
        public void* Sid;
        public UInt32 Attributes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SID_AND_ATTRIBUTES_HASH
    {
        public UInt32 SidCount;
        public _SID_AND_ATTRIBUTES* SidAttr;
        public fixed ulong Hash[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ACE_HEADER
    {
        public byte AceType;
        public byte AceFlags;
        public ushort AceSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OBJECT_TYPE_LIST
    {
        public ushort Level;
        public ushort Sbz;
        public _GUID* ObjectType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRIVILEGE_SET
    {
        public UInt32 PrivilegeCount;
        public UInt32 Control;
        public fixed byte/* _LUID_AND_ATTRIBUTES, this length is invalid so must keep pointer and can't edit from C# */ Privilege[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ACCESS_REASONS
    {
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Data[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SE_SECURITY_DESCRIPTOR
    {
        public UInt32 Size;
        public UInt32 Flags;
        public void* SecurityDescriptor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TOKEN_USER
    {
        public _SID_AND_ATTRIBUTES User;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SE_TOKEN_USER__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _TOKEN_USER TokenUser;
        [FieldOffset(0)]
        public _SID_AND_ATTRIBUTES User;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SE_TOKEN_USER__bindgen_ty_2
    {
        [FieldOffset(0)]
        public _SID Sid;
        [FieldOffset(0)]
        public fixed byte Buffer[68];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TOKEN_GROUPS
    {
        public UInt32 GroupCount;
        public fixed byte/* _SID_AND_ATTRIBUTES, this length is invalid so must keep pointer and can't edit from C# */ Groups[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TOKEN_PRIVILEGES
    {
        public UInt32 PrivilegeCount;
        public fixed byte/* _LUID_AND_ATTRIBUTES, this length is invalid so must keep pointer and can't edit from C# */ Privileges[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TOKEN_MANDATORY_POLICY
    {
        public UInt32 Policy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TOKEN_SOURCE
    {
        public fixed byte SourceName[8];
        public _LUID SourceIdentifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE
    {
        public ulong Version;
        public ushort Name;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
    {
        public void* pValue;
        public UInt32 ValueLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CLAIM_SECURITY_ATTRIBUTE_V1
    {
        public ushort Name;
        public ushort ValueType;
        public ushort Reserved;
        public UInt32 Flags;
        public UInt32 ValueCount;
        public _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1 Values;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CLAIM_SECURITY_ATTRIBUTE_V1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public long* pInt64;
        [FieldOffset(0)]
        public ulong* pUint64;
        [FieldOffset(0)]
        public ushort* ppString;
        [FieldOffset(0)]
        public _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE* pFqbn;
        [FieldOffset(0)]
        public _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE* pOctetString;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ pInt64[1];
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ pUint64[1];
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ ppString[1];
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ pFqbn[1];
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ pOctetString[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION
    {
        public ushort Version;
        public ushort Reserved;
        public UInt32 AttributeCount;
        public _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1 Attribute;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CLAIM_SECURITY_ATTRIBUTE_V1* pAttributeV1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SECURITY_QUALITY_OF_SERVICE
    {
        public UInt32 Length;
        public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
        public byte ContextTrackingMode;
        public byte EffectiveOnly;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _JOB_SET_ARRAY
    {
        public void* JobHandle;
        public UInt32 MemberLevel;
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _EXCEPTION_REGISTRATION_RECORD
    {
        public _EXCEPTION_REGISTRATION_RECORD* Next;
        public Option Handler;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NT_TIB
    {
        public _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
        public void* StackBase;
        public void* StackLimit;
        public void* SubSystemTib;
        public _NT_TIB__bindgen_ty_1 __bindgen_anon_1;
        public void* ArbitraryUserPointer;
        public _NT_TIB* Self_;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _NT_TIB__bindgen_ty_1
    {
        [FieldOffset(0)]
        public void* FiberData;
        [FieldOffset(0)]
        public UInt32 Version;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _NT_TIB32__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 FiberData;
        [FieldOffset(0)]
        public UInt32 Version;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _NT_TIB64__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong FiberData;
        [FieldOffset(0)]
        public UInt32 Version;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET
    {
        public ulong TargetAddress;
        public ulong Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE
    {
        public ulong BaseAddress;
        public ulong Size;
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _QUOTA_LIMITS
    {
        public ulong PagedPoolLimit;
        public ulong NonPagedPoolLimit;
        public ulong MinimumWorkingSetSize;
        public ulong MaximumWorkingSetSize;
        public ulong PagefileLimit;
        public _LARGE_INTEGER TimeLimit;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RATE_QUOTA_LIMIT
    {
        [FieldOffset(0)]
        public UInt32 RateData;
        [FieldOffset(0)]
        public _RATE_QUOTA_LIMIT__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RATE_QUOTA_LIMIT__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IO_COUNTERS
    {
        public ulong ReadOperationCount;
        public ulong WriteOperationCount;
        public ulong OtherOperationCount;
        public ulong ReadTransferCount;
        public ulong WriteTransferCount;
        public ulong OtherTransferCount;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_ASLR_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_DEP_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION
    {
        public _LARGE_INTEGER TotalUserTime;
        public _LARGE_INTEGER TotalKernelTime;
        public _LARGE_INTEGER ThisPeriodTotalUserTime;
        public _LARGE_INTEGER ThisPeriodTotalKernelTime;
        public UInt32 TotalPageFaultCount;
        public UInt32 TotalProcesses;
        public UInt32 ActiveProcesses;
        public UInt32 TotalTerminatedProcesses;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _JOBOBJECT_BASIC_LIMIT_INFORMATION
    {
        public _LARGE_INTEGER PerProcessUserTimeLimit;
        public _LARGE_INTEGER PerJobUserTimeLimit;
        public UInt32 LimitFlags;
        public ulong MinimumWorkingSetSize;
        public ulong MaximumWorkingSetSize;
        public UInt32 ActiveProcessLimit;
        public ulong Affinity;
        public UInt32 PriorityClass;
        public UInt32 SchedulingClass;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong JobHighMemoryLimit;
        [FieldOffset(0)]
        public ulong JobMemoryLimit;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_2
    {
        [FieldOffset(0)]
        public _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        [FieldOffset(0)]
        public _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2__bindgen_ty_3
    {
        [FieldOffset(0)]
        public _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
        [FieldOffset(0)]
        public _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL CpuRateControlToleranceInterval;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong JobHighMemoryLimit;
        [FieldOffset(0)]
        public ulong JobMemoryLimit;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_2
    {
        [FieldOffset(0)]
        public _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
        [FieldOffset(0)]
        public _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2__bindgen_ty_3
    {
        [FieldOffset(0)]
        public _JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
        [FieldOffset(0)]
        public _JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 CpuRate;
        [FieldOffset(0)]
        public UInt32 Weight;
        [FieldOffset(0)]
        public _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION__bindgen_ty_1__bindgen_ty_1
    {
        public ushort MinRate;
        public ushort MaxRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _JOBOBJECT_IO_ATTRIBUTION_STATS
    {
        public ulong IoCount;
        public ulong TotalNonOverlappedQueueTime;
        public ulong TotalNonOverlappedServiceTime;
        public ulong TotalSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CACHE_DESCRIPTOR
    {
        public byte Level;
        public byte Associativity;
        public ushort LineSize;
        public UInt32 Size;
        public _PROCESSOR_CACHE_TYPE Type;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION
    {
        public ulong ProcessorMask;
        public _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
        public _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1 ProcessorCore;
        [FieldOffset(0)]
        public _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2 NumaNode;
        [FieldOffset(0)]
        public _CACHE_DESCRIPTOR Cache;
        [FieldOffset(0)]
        public fixed ulong Reserved[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_1
    {
        public byte Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 NodeNumber;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESSOR_RELATIONSHIP
    {
        public byte Flags;
        public byte EfficiencyClass;
        public fixed byte Reserved[20];
        public ushort GroupCount;
        public fixed byte/* _GROUP_AFFINITY, this length is invalid so must keep pointer and can't edit from C# */ GroupMask[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NUMA_NODE_RELATIONSHIP
    {
        public UInt32 NodeNumber;
        public fixed byte Reserved[20];
        public _GROUP_AFFINITY GroupMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CACHE_RELATIONSHIP
    {
        public byte Level;
        public byte Associativity;
        public ushort LineSize;
        public UInt32 CacheSize;
        public _PROCESSOR_CACHE_TYPE Type;
        public fixed byte Reserved[20];
        public _GROUP_AFFINITY GroupMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESSOR_GROUP_INFO
    {
        public byte MaximumProcessorCount;
        public byte ActiveProcessorCount;
        public fixed byte Reserved[38];
        public ulong ActiveProcessorMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _GROUP_RELATIONSHIP
    {
        public ushort MaximumGroupCount;
        public ushort ActiveGroupCount;
        public fixed byte Reserved[20];
        public fixed byte/* _PROCESSOR_GROUP_INFO, this length is invalid so must keep pointer and can't edit from C# */ GroupInfo[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX
    {
        public _LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
        public UInt32 Size;
        public _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _PROCESSOR_RELATIONSHIP Processor;
        [FieldOffset(0)]
        public _NUMA_NODE_RELATIONSHIP NumaNode;
        [FieldOffset(0)]
        public _CACHE_RELATIONSHIP Cache;
        [FieldOffset(0)]
        public _GROUP_RELATIONSHIP Group;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_CPU_SET_INFORMATION
    {
        public UInt32 Size;
        public _CPU_SET_INFORMATION_TYPE Type;
        public _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1 CpuSet;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 Id;
        public ushort Group;
        public byte LogicalProcessorIndex;
        public byte CoreIndex;
        public byte LastLevelCacheIndex;
        public byte NumaNodeIndex;
        public byte EfficiencyClass;
        public _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        public _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2 __bindgen_anon_2;
        public ulong AllocationTag;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte AllFlags;
        [FieldOffset(0)]
        public _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
    {
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SYSTEM_CPU_SET_INFORMATION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_2
    {
        [FieldOffset(0)]
        public UInt32 Reserved;
        [FieldOffset(0)]
        public byte SchedulingClass;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION
    {
        public ulong CycleTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _XSTATE_FEATURE
    {
        public UInt32 Offset;
        public UInt32 Size;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _XSTATE_CONFIGURATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 ControlFlags;
        [FieldOffset(0)]
        public _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _XSTATE_CONFIGURATION__bindgen_ty_1__bindgen_ty_1
    {
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public fixed byte __bindgen_padding_0[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MEMORY_BASIC_INFORMATION
    {
        public void* BaseAddress;
        public void* AllocationBase;
        public UInt32 AllocationProtect;
        public ushort PartitionId;
        public ulong RegionSize;
        public UInt32 State;
        public UInt32 Protect;
        public UInt32 Type;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CFG_CALL_TARGET_INFO
    {
        public ulong Offset;
        public ulong Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct MEM_EXTENDED_PARAMETER
    {
        public MEM_EXTENDED_PARAMETER__bindgen_ty_1 __bindgen_anon_1;
        public MEM_EXTENDED_PARAMETER__bindgen_ty_2 __bindgen_anon_2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct MEM_EXTENDED_PARAMETER__bindgen_ty_1
    {
        public fixed ulong _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct MEM_EXTENDED_PARAMETER__bindgen_ty_2
    {
        [FieldOffset(0)]
        public ulong ULong64;
        [FieldOffset(0)]
        public void* Pointer;
        [FieldOffset(0)]
        public ulong Size;
        [FieldOffset(0)]
        public void* Handle;
        [FieldOffset(0)]
        public UInt32 ULong;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _ENCLAVE_INIT_INFO_VBS_BASIC__bindgen_ty_1
    {
        [FieldOffset(0)]
        public void* SignatureInfoHandle;
        [FieldOffset(0)]
        public ulong Unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_ID_128
    {
        public fixed byte Identifier[16];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _FILE_SEGMENT_ELEMENT
    {
        [FieldOffset(0)]
        public void* Buffer;
        [FieldOffset(0)]
        public ulong Alignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _REPARSE_GUID_DATA_BUFFER__bindgen_ty_1
    {
        public fixed byte DataBuffer[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCRUB_PARITY_EXTENT
    {
        public long Offset;
        public ulong Length;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct BATTERY_REPORTING_SCALE
    {
        public UInt32 Granularity;
        public UInt32 Capacity;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PPM_WMI_IDLE_STATE
    {
        public UInt32 Latency;
        public UInt32 Power;
        public UInt32 TimeCheck;
        public byte PromotePercent;
        public byte DemotePercent;
        public byte StateType;
        public byte Reserved;
        public UInt32 StateFlags;
        public UInt32 Context;
        public UInt32 IdleHandler;
        public UInt32 Reserved1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PPM_WMI_PERF_STATE
    {
        public UInt32 Frequency;
        public UInt32 Power;
        public byte PercentFrequency;
        public byte IncreaseLevel;
        public byte DecreaseLevel;
        public byte Type;
        public UInt32 IncreaseTime;
        public UInt32 DecreaseTime;
        public ulong Control;
        public ulong Status;
        public UInt32 HitCount;
        public UInt32 Reserved1;
        public ulong Reserved2;
        public ulong Reserved3;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PPM_IDLE_STATE_ACCOUNTING
    {
        public UInt32 IdleTransitions;
        public UInt32 FailedTransitions;
        public UInt32 InvalidBucketIndex;
        public ulong TotalTime;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ IdleTimeBuckets[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PPM_IDLE_STATE_BUCKET_EX
    {
        public ulong TotalTimeUs;
        public UInt32 MinTimeUs;
        public UInt32 MaxTimeUs;
        public UInt32 Count;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PPM_IDLE_STATE_ACCOUNTING_EX
    {
        public ulong TotalTime;
        public UInt32 IdleTransitions;
        public UInt32 FailedTransitions;
        public UInt32 InvalidBucketIndex;
        public UInt32 MinTimeUs;
        public UInt32 MaxTimeUs;
        public UInt32 CancelledTransitions;
        public fixed byte/* PPM_IDLE_STATE_BUCKET_EX, this length is invalid so must keep pointer and can't edit from C# */ IdleTimeBuckets[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct POWER_ACTION_POLICY
    {
        public int Action;
        public UInt32 Flags;
        public UInt32 EventCode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct SYSTEM_POWER_LEVEL
    {
        public byte Enable;
        public fixed byte Spare[3];
        public UInt32 BatteryLevel;
        public POWER_ACTION_POLICY PowerPolicy;
        public _SYSTEM_POWER_STATE MinSystemState;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PROCESSOR_IDLESTATE_INFO
    {
        public UInt32 TimeCheck;
        public byte DemotePercent;
        public byte PromotePercent;
        public fixed byte Spare[2];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort AsWORD;
        [FieldOffset(0)]
        public PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PROCESSOR_IDLESTATE_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed ushort _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESSOR_POWER_POLICY_INFO
    {
        public UInt32 TimeCheck;
        public UInt32 DemoteLimit;
        public UInt32 PromoteLimit;
        public byte DemotePercent;
        public byte PromotePercent;
        public fixed byte Spare[2];
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte Spare;
        [FieldOffset(0)]
        public PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1 Flags;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte AsBYTE;
        [FieldOffset(0)]
        public PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PROCESSOR_PERFSTATE_POLICY__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
    {
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_FILE_HEADER
    {
        public ushort Machine;
        public ushort NumberOfSections;
        public UInt32 TimeDateStamp;
        public UInt32 PointerToSymbolTable;
        public UInt32 NumberOfSymbols;
        public ushort SizeOfOptionalHeader;
        public ushort Characteristics;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_DATA_DIRECTORY
    {
        public UInt32 VirtualAddress;
        public UInt32 Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_OPTIONAL_HEADER
    {
        public ushort Magic;
        public byte MajorLinkerVersion;
        public byte MinorLinkerVersion;
        public UInt32 SizeOfCode;
        public UInt32 SizeOfInitializedData;
        public UInt32 SizeOfUninitializedData;
        public UInt32 AddressOfEntryPoint;
        public UInt32 BaseOfCode;
        public UInt32 BaseOfData;
        public UInt32 ImageBase;
        public UInt32 SectionAlignment;
        public UInt32 FileAlignment;
        public ushort MajorOperatingSystemVersion;
        public ushort MinorOperatingSystemVersion;
        public ushort MajorImageVersion;
        public ushort MinorImageVersion;
        public ushort MajorSubsystemVersion;
        public ushort MinorSubsystemVersion;
        public UInt32 Win32VersionValue;
        public UInt32 SizeOfImage;
        public UInt32 SizeOfHeaders;
        public UInt32 CheckSum;
        public ushort Subsystem;
        public ushort DllCharacteristics;
        public UInt32 SizeOfStackReserve;
        public UInt32 SizeOfStackCommit;
        public UInt32 SizeOfHeapReserve;
        public UInt32 SizeOfHeapCommit;
        public UInt32 LoaderFlags;
        public UInt32 NumberOfRvaAndSizes;
        public fixed byte/* _IMAGE_DATA_DIRECTORY, this length is invalid so must keep pointer and can't edit from C# */ DataDirectory[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_ROM_OPTIONAL_HEADER
    {
        public ushort Magic;
        public byte MajorLinkerVersion;
        public byte MinorLinkerVersion;
        public UInt32 SizeOfCode;
        public UInt32 SizeOfInitializedData;
        public UInt32 SizeOfUninitializedData;
        public UInt32 AddressOfEntryPoint;
        public UInt32 BaseOfCode;
        public UInt32 BaseOfData;
        public UInt32 BaseOfBss;
        public UInt32 GprMask;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ CprMask[4];
        public UInt32 GpValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_OPTIONAL_HEADER64
    {
        public ushort Magic;
        public byte MajorLinkerVersion;
        public byte MinorLinkerVersion;
        public UInt32 SizeOfCode;
        public UInt32 SizeOfInitializedData;
        public UInt32 SizeOfUninitializedData;
        public UInt32 AddressOfEntryPoint;
        public UInt32 BaseOfCode;
        public ulong ImageBase;
        public UInt32 SectionAlignment;
        public UInt32 FileAlignment;
        public ushort MajorOperatingSystemVersion;
        public ushort MinorOperatingSystemVersion;
        public ushort MajorImageVersion;
        public ushort MinorImageVersion;
        public ushort MajorSubsystemVersion;
        public ushort MinorSubsystemVersion;
        public UInt32 Win32VersionValue;
        public UInt32 SizeOfImage;
        public UInt32 SizeOfHeaders;
        public UInt32 CheckSum;
        public ushort Subsystem;
        public ushort DllCharacteristics;
        public ulong SizeOfStackReserve;
        public ulong SizeOfStackCommit;
        public ulong SizeOfHeapReserve;
        public ulong SizeOfHeapCommit;
        public UInt32 LoaderFlags;
        public UInt32 NumberOfRvaAndSizes;
        public fixed byte/* _IMAGE_DATA_DIRECTORY, this length is invalid so must keep pointer and can't edit from C# */ DataDirectory[16];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_SECTION_HEADER__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 PhysicalAddress;
        [FieldOffset(0)]
        public UInt32 VirtualSize;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_SYMBOL__bindgen_ty_1
    {
        [FieldOffset(0)]
        public fixed byte ShortName[8];
        [FieldOffset(0)]
        public _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1 Name;
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ LongName[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_SYMBOL__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 Short;
        public UInt32 Long;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_SYMBOL_EX__bindgen_ty_1
    {
        [FieldOffset(0)]
        public fixed byte ShortName[8];
        [FieldOffset(0)]
        public _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1 Name;
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ LongName[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_SYMBOL_EX__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 Short;
        public UInt32 Long;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMAGE_AUX_SYMBOL_TOKEN_DEF
    {
        public byte bAuxType;
        public byte bReserved;
        public UInt32 SymbolTableIndex;
        public fixed byte rgbReserved[12];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_1
    {
        public UInt32 TagIndex;
        public _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1 Misc;
        public _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2 FcnAry;
        public ushort TvIndex;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 LnSz;
        [FieldOffset(0)]
        public UInt32 TotalSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
    {
        public ushort Linenumber;
        public ushort Size;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2
    {
        [FieldOffset(0)]
        public _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1 Function;
        [FieldOffset(0)]
        public _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2 Array;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_1
    {
        public UInt32 PointerToLinenumber;
        public UInt32 PointerToNextFunction;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_1__bindgen_ty_2__bindgen_ty_2
    {
        public fixed ushort Dimension[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_2
    {
        public fixed byte Name[18];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_3
    {
        public UInt32 Length;
        public ushort NumberOfRelocations;
        public ushort NumberOfLinenumbers;
        public UInt32 CheckSum;
        public short Number;
        public byte Selection;
        public byte bReserved;
        public short HighNumber;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL__bindgen_ty_4
    {
        public UInt32 crc;
        public fixed byte rgbReserved[14];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_1
    {
        public UInt32 WeakDefaultSymIndex;
        public UInt32 WeakSearchType;
        public fixed byte rgbReserved[12];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_2
    {
        public fixed byte Name[20];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_3
    {
        public UInt32 Length;
        public ushort NumberOfRelocations;
        public ushort NumberOfLinenumbers;
        public UInt32 CheckSum;
        public short Number;
        public byte Selection;
        public byte bReserved;
        public short HighNumber;
        public fixed byte rgbReserved[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_4
    {
        public IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        public fixed byte rgbReserved[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_AUX_SYMBOL_EX__bindgen_ty_5
    {
        public UInt32 crc;
        public fixed byte rgbReserved[16];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_RELOCATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 VirtualAddress;
        [FieldOffset(0)]
        public UInt32 RelocCount;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_LINENUMBER__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 SymbolTableIndex;
        [FieldOffset(0)]
        public UInt32 VirtualAddress;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_THUNK_DATA64__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong ForwarderString;
        [FieldOffset(0)]
        public ulong Function;
        [FieldOffset(0)]
        public ulong Ordinal;
        [FieldOffset(0)]
        public ulong AddressOfData;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_THUNK_DATA32__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 ForwarderString;
        [FieldOffset(0)]
        public UInt32 Function;
        [FieldOffset(0)]
        public UInt32 Ordinal;
        [FieldOffset(0)]
        public UInt32 AddressOfData;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_TLS_DIRECTORY64__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Characteristics;
        [FieldOffset(0)]
        public _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_TLS_DIRECTORY64__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_TLS_DIRECTORY32__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Characteristics;
        [FieldOffset(0)]
        public _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_TLS_DIRECTORY32__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_IMPORT_DESCRIPTOR__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Characteristics;
        [FieldOffset(0)]
        public UInt32 OriginalFirstThunk;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 AllAttributes;
        [FieldOffset(0)]
        public _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_DELAYLOAD_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public UInt32 Name;
        [FieldOffset(0)]
        public ushort Id;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2
    {
        [FieldOffset(0)]
        public UInt32 OffsetToData;
        [FieldOffset(0)]
        public _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_RESOURCE_DIRECTORY_ENTRY__bindgen_ty_2__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY
    {
        public ushort Flags;
        public ushort Catalog;
        public UInt32 CatalogOffset;
        public UInt32 Reserved;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 UnwindData;
        [FieldOffset(0)]
        public _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed ushort _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 UnwindData;
        [FieldOffset(0)]
        public _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1__bindgen_ty_1
    {
        public fixed ushort _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IMAGE_RUNTIME_FUNCTION_ENTRY
    {
        public UInt32 BeginAddress;
        public UInt32 EndAddress;
        public _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_RUNTIME_FUNCTION_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 UnwindInfoAddress;
        [FieldOffset(0)]
        public UInt32 UnwindData;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_FUNCTION_ENTRY64__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong EndOfPrologue;
        [FieldOffset(0)]
        public ulong UnwindInfoAddress;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct IMPORT_OBJECT_HEADER__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort Ordinal;
        [FieldOffset(0)]
        public ushort Hint;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct IMAGE_COR20_HEADER__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 EntryPointToken;
        [FieldOffset(0)]
        public UInt32 EntryPointRVA;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SLIST_ENTRY
    {
        public _SLIST_ENTRY* Next;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SLIST_HEADER
    {
        [FieldOffset(0)]
        public _SLIST_HEADER__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public _SLIST_HEADER__bindgen_ty_2 HeaderX64;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SLIST_HEADER__bindgen_ty_1
    {
        public ulong Alignment;
        public ulong Region;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SLIST_HEADER__bindgen_ty_2
    {
        public fixed ulong _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MESSAGE_RESOURCE_BLOCK
    {
        public UInt32 LowId;
        public UInt32 HighId;
        public UInt32 OffsetToEntries;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OSVERSIONINFOA
    {
        public UInt32 dwOSVersionInfoSize;
        public UInt32 dwMajorVersion;
        public UInt32 dwMinorVersion;
        public UInt32 dwBuildNumber;
        public UInt32 dwPlatformId;
        public fixed byte szCSDVersion[128];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OSVERSIONINFOW
    {
        public UInt32 dwOSVersionInfoSize;
        public UInt32 dwMajorVersion;
        public UInt32 dwMinorVersion;
        public UInt32 dwBuildNumber;
        public UInt32 dwPlatformId;
        public fixed ushort szCSDVersion[128];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OSVERSIONINFOEXA
    {
        public UInt32 dwOSVersionInfoSize;
        public UInt32 dwMajorVersion;
        public UInt32 dwMinorVersion;
        public UInt32 dwBuildNumber;
        public UInt32 dwPlatformId;
        public fixed byte szCSDVersion[128];
        public ushort wServicePackMajor;
        public ushort wServicePackMinor;
        public ushort wSuiteMask;
        public byte wProductType;
        public byte wReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OSVERSIONINFOEXW
    {
        public UInt32 dwOSVersionInfoSize;
        public UInt32 dwMajorVersion;
        public UInt32 dwMinorVersion;
        public UInt32 dwBuildNumber;
        public UInt32 dwPlatformId;
        public fixed ushort szCSDVersion[128];
        public ushort wServicePackMajor;
        public ushort wServicePackMinor;
        public ushort wSuiteMask;
        public byte wProductType;
        public byte wReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NV_MEMORY_RANGE
    {
        public void* BaseAddress;
        public ulong Length;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct CORRELATION_VECTOR
    {
        public byte Version;
        public fixed byte Vector[129];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
    {
        public UInt32 Size;
        public ushort TriggerId;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _IMAGE_POLICY_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public void* None;
        [FieldOffset(0)]
        public byte BoolValue;
        [FieldOffset(0)]
        public sbyte Int8Value;
        [FieldOffset(0)]
        public byte UInt8Value;
        [FieldOffset(0)]
        public short Int16Value;
        [FieldOffset(0)]
        public ushort UInt16Value;
        [FieldOffset(0)]
        public int Int32Value;
        [FieldOffset(0)]
        public uint UInt32Value;
        [FieldOffset(0)]
        public long Int64Value;
        [FieldOffset(0)]
        public ulong UInt64Value;
        [FieldOffset(0)]
        public byte AnsiStringValue;
        [FieldOffset(0)]
        public ushort UnicodeStringValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RTL_CRITICAL_SECTION_DEBUG
    {
        public ushort Type;
        public ushort CreatorBackTraceIndex;
        public _RTL_CRITICAL_SECTION* CriticalSection;
        public _LIST_ENTRY ProcessLocksList;
        public UInt32 EntryCount;
        public UInt32 ContentionCount;
        public UInt32 Flags;
        public ushort CreatorBackTraceIndexHigh;
        public ushort SpareWORD;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RTL_CRITICAL_SECTION
    {
        public _RTL_CRITICAL_SECTION_DEBUG* DebugInfo;
        public Int32 LockCount;
        public Int32 RecursionCount;
        public void* OwningThread;
        public void* LockSemaphore;
        public ulong SpinCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _HARDWARE_COUNTER_DATA
    {
        public _HARDWARE_COUNTER_TYPE Type;
        public UInt32 Reserved;
        public ulong Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PERFORMANCE_DATA
    {
        public ushort Size;
        public byte Version;
        public byte HwCountersCount;
        public UInt32 ContextSwitchCount;
        public ulong WaitReasonBitMap;
        public ulong CycleTime;
        public UInt32 RetryCount;
        public UInt32 Reserved;
        public fixed byte/* _HARDWARE_COUNTER_DATA, this length is invalid so must keep pointer and can't edit from C# */ HwCounters[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TRANSACTION_ENLISTMENT_PAIR
    {
        public _GUID EnlistmentId;
        public _GUID ResourceManagerId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TRANSACTION_LIST_ENTRY
    {
        public _GUID UOW;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_CALLBACK_INSTANCE
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_POOL
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_POOL_STACK_INFORMATION
    {
        public ulong StackReserve;
        public ulong StackCommit;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_CLEANUP_GROUP
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1 s;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_CALLBACK_ENVIRON_V3__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_WORK
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_TIMER
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_WAIT
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TP_IO
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HKEY__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMETAFILE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HINSTANCE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HRGN__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HRSRC__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HTASK__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HWINSTA__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HKL__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILETIME
    {
        public UInt32 dwLowDateTime;
        public UInt32 dwHighDateTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HWND__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HHOOK__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HACCEL__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HBITMAP__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HBRUSH__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HCOLORSPACE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HDC__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HGLRC__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HDESK__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HENHMETAFILE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HFONT__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HICON__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMENU__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HPALETTE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HPEN__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HWINEVENTHOOK__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMONITOR__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRECT
    {
        public Int32 left;
        public Int32 top;
        public Int32 right;
        public Int32 bottom;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RECTL
    {
        public Int32 left;
        public Int32 top;
        public Int32 right;
        public Int32 bottom;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINT
    {
        public Int32 x;
        public Int32 y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _POINTL
    {
        public Int32 x;
        public Int32 y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSIZE
    {
        public Int32 cx;
        public Int32 cy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTS
    {
        public short x;
        public short y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DPI_AWARENESS_CONTEXT__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SECURITY_ATTRIBUTES
    {
        public UInt32 nLength;
        public void* lpSecurityDescriptor;
        public int bInheritHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OVERLAPPED
    {
        public ulong Internal;
        public ulong InternalHigh;
        public _OVERLAPPED__bindgen_ty_1 __bindgen_anon_1;
        public void* hEvent;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _OVERLAPPED__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _OVERLAPPED__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public void* Pointer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OVERLAPPED__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 Offset;
        public UInt32 OffsetHigh;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OVERLAPPED_ENTRY
    {
        public ulong lpCompletionKey;
        public _OVERLAPPED* lpOverlapped;
        public ulong Internal;
        public UInt32 dwNumberOfBytesTransferred;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEMTIME
    {
        public ushort wYear;
        public ushort wMonth;
        public ushort wDayOfWeek;
        public ushort wDay;
        public ushort wHour;
        public ushort wMinute;
        public ushort wSecond;
        public ushort wMilliseconds;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WIN32_FIND_DATAA
    {
        public UInt32 dwFileAttributes;
        public _FILETIME ftCreationTime;
        public _FILETIME ftLastAccessTime;
        public _FILETIME ftLastWriteTime;
        public UInt32 nFileSizeHigh;
        public UInt32 nFileSizeLow;
        public UInt32 dwReserved0;
        public UInt32 dwReserved1;
        public fixed byte cFileName[260];
        public fixed byte cAlternateFileName[14];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WIN32_FIND_DATAW
    {
        public UInt32 dwFileAttributes;
        public _FILETIME ftCreationTime;
        public _FILETIME ftLastAccessTime;
        public _FILETIME ftLastWriteTime;
        public UInt32 nFileSizeHigh;
        public UInt32 nFileSizeLow;
        public UInt32 dwReserved0;
        public UInt32 dwReserved1;
        public fixed ushort cFileName[260];
        public fixed ushort cAlternateFileName[14];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_HEAP_ENTRY
    {
        public void* lpData;
        public UInt32 cbData;
        public byte cbOverhead;
        public byte iRegionIndex;
        public ushort wFlags;
        public _PROCESS_HEAP_ENTRY__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROCESS_HEAP_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1 Block;
        [FieldOffset(0)]
        public _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2 Region;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_1
    {
        public void* hMem;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ dwReserved[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_HEAP_ENTRY__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 dwCommittedSize;
        public UInt32 dwUnCommittedSize;
        public void* lpFirstBlock;
        public void* lpLastBlock;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _REASON_CONTEXT
    {
        public UInt32 Version;
        public UInt32 Flags;
        public _REASON_CONTEXT__bindgen_ty_1 Reason;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _REASON_CONTEXT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1 Detailed;
        [FieldOffset(0)]
        public ushort SimpleReasonString;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _REASON_CONTEXT__bindgen_ty_1__bindgen_ty_1
    {
        public HINSTANCE__* LocalizedReasonModule;
        public UInt32 LocalizedReasonId;
        public UInt32 ReasonStringCount;
        public ushort* ReasonStrings;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _EXCEPTION_DEBUG_INFO
    {
        public _EXCEPTION_RECORD ExceptionRecord;
        public UInt32 dwFirstChance;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CREATE_THREAD_DEBUG_INFO
    {
        public void* hThread;
        public void* lpThreadLocalBase;
        public PTHREAD_START_ROUTINE lpStartAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CREATE_PROCESS_DEBUG_INFO
    {
        public void* hFile;
        public void* hProcess;
        public void* hThread;
        public void* lpBaseOfImage;
        public UInt32 dwDebugInfoFileOffset;
        public UInt32 nDebugInfoSize;
        public void* lpThreadLocalBase;
        public PTHREAD_START_ROUTINE lpStartAddress;
        public void* lpImageName;
        public ushort fUnicode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _EXIT_THREAD_DEBUG_INFO
    {
        public UInt32 dwExitCode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _EXIT_PROCESS_DEBUG_INFO
    {
        public UInt32 dwExitCode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LOAD_DLL_DEBUG_INFO
    {
        public void* hFile;
        public void* lpBaseOfDll;
        public UInt32 dwDebugInfoFileOffset;
        public UInt32 nDebugInfoSize;
        public void* lpImageName;
        public ushort fUnicode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _UNLOAD_DLL_DEBUG_INFO
    {
        public void* lpBaseOfDll;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OUTPUT_DEBUG_STRING_INFO
    {
        public byte lpDebugStringData;
        public ushort fUnicode;
        public ushort nDebugStringLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RIP_INFO
    {
        public UInt32 dwError;
        public UInt32 dwType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEBUG_EVENT
    {
        public UInt32 dwDebugEventCode;
        public UInt32 dwProcessId;
        public UInt32 dwThreadId;
        public _DEBUG_EVENT__bindgen_ty_1 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DEBUG_EVENT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _EXCEPTION_DEBUG_INFO Exception;
        [FieldOffset(0)]
        public _CREATE_THREAD_DEBUG_INFO CreateThread;
        [FieldOffset(0)]
        public _CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        [FieldOffset(0)]
        public _EXIT_THREAD_DEBUG_INFO ExitThread;
        [FieldOffset(0)]
        public _EXIT_PROCESS_DEBUG_INFO ExitProcess;
        [FieldOffset(0)]
        public _LOAD_DLL_DEBUG_INFO LoadDll;
        [FieldOffset(0)]
        public _UNLOAD_DLL_DEBUG_INFO UnloadDll;
        [FieldOffset(0)]
        public _OUTPUT_DEBUG_STRING_INFO DebugString;
        [FieldOffset(0)]
        public _RIP_INFO RipInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISK_SPACE_INFORMATION
    {
        public ulong ActualTotalAllocationUnits;
        public ulong ActualAvailableAllocationUnits;
        public ulong ActualPoolUnavailableAllocationUnits;
        public ulong CallerTotalAllocationUnits;
        public ulong CallerAvailableAllocationUnits;
        public ulong CallerPoolUnavailableAllocationUnits;
        public ulong UsedAllocationUnits;
        public ulong TotalReservedAllocationUnits;
        public ulong VolumeStorageReserveAllocationUnits;
        public ulong AvailableCommittedAllocationUnits;
        public ulong PoolAvailableAllocationUnits;
        public UInt32 SectorsPerAllocationUnit;
        public UInt32 BytesPerSector;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BY_HANDLE_FILE_INFORMATION
    {
        public UInt32 dwFileAttributes;
        public _FILETIME ftCreationTime;
        public _FILETIME ftLastAccessTime;
        public _FILETIME ftLastWriteTime;
        public UInt32 dwVolumeSerialNumber;
        public UInt32 nFileSizeHigh;
        public UInt32 nFileSizeLow;
        public UInt32 nNumberOfLinks;
        public UInt32 nFileIndexHigh;
        public UInt32 nFileIndexLow;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CREATEFILE2_EXTENDED_PARAMETERS
    {
        public UInt32 dwSize;
        public UInt32 dwFileAttributes;
        public UInt32 dwFileFlags;
        public UInt32 dwSecurityQosFlags;
        public _SECURITY_ATTRIBUTES* lpSecurityAttributes;
        public void* hTemplateFile;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROCESS_INFORMATION
    {
        public void* hProcess;
        public void* hThread;
        public UInt32 dwProcessId;
        public UInt32 dwThreadId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STARTUPINFOA
    {
        public UInt32 cb;
        public byte lpReserved;
        public byte lpDesktop;
        public byte lpTitle;
        public UInt32 dwX;
        public UInt32 dwY;
        public UInt32 dwXSize;
        public UInt32 dwYSize;
        public UInt32 dwXCountChars;
        public UInt32 dwYCountChars;
        public UInt32 dwFillAttribute;
        public UInt32 dwFlags;
        public ushort wShowWindow;
        public ushort cbReserved2;
        public byte lpReserved2;
        public void* hStdInput;
        public void* hStdOutput;
        public void* hStdError;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STARTUPINFOW
    {
        public UInt32 cb;
        public ushort lpReserved;
        public ushort lpDesktop;
        public ushort lpTitle;
        public UInt32 dwX;
        public UInt32 dwY;
        public UInt32 dwXSize;
        public UInt32 dwYSize;
        public UInt32 dwXCountChars;
        public UInt32 dwYCountChars;
        public UInt32 dwFillAttribute;
        public UInt32 dwFlags;
        public ushort wShowWindow;
        public ushort cbReserved2;
        public byte lpReserved2;
        public void* hStdInput;
        public void* hStdOutput;
        public void* hStdError;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PROC_THREAD_ATTRIBUTE_LIST
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_INFO
    {
        public _SYSTEM_INFO__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 dwPageSize;
        public void* lpMinimumApplicationAddress;
        public void* lpMaximumApplicationAddress;
        public ulong dwActiveProcessorMask;
        public UInt32 dwNumberOfProcessors;
        public UInt32 dwProcessorType;
        public UInt32 dwAllocationGranularity;
        public ushort wProcessorLevel;
        public ushort wProcessorRevision;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SYSTEM_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 dwOemId;
        [FieldOffset(0)]
        public _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_INFO__bindgen_ty_1__bindgen_ty_1
    {
        public ushort wProcessorArchitecture;
        public ushort wReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MEMORYSTATUSEX
    {
        public UInt32 dwLength;
        public UInt32 dwMemoryLoad;
        public ulong ullTotalPhys;
        public ulong ullAvailPhys;
        public ulong ullTotalPageFile;
        public ulong ullAvailPageFile;
        public ulong ullTotalVirtual;
        public ulong ullAvailVirtual;
        public ulong ullAvailExtendedVirtual;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WIN32_MEMORY_RANGE_ENTRY
    {
        public void* VirtualAddress;
        public ulong NumberOfBytes;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 Flags;
        [FieldOffset(0)]
        public WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct WIN32_MEMORY_REGION_INFORMATION__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION
    {
        public long MaxIops;
        public long MaxBandwidth;
        public long ReservationIops;
        public ushort VolumeName;
        public UInt32 BaseIoSize;
        public UInt32 ControlFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COMMPROP
    {
        public ushort wPacketLength;
        public ushort wPacketVersion;
        public UInt32 dwServiceMask;
        public UInt32 dwReserved1;
        public UInt32 dwMaxTxQueue;
        public UInt32 dwMaxRxQueue;
        public UInt32 dwMaxBaud;
        public UInt32 dwProvSubType;
        public UInt32 dwProvCapabilities;
        public UInt32 dwSettableParams;
        public UInt32 dwSettableBaud;
        public ushort wSettableData;
        public ushort wSettableStopParity;
        public UInt32 dwCurrentTxQueue;
        public UInt32 dwCurrentRxQueue;
        public UInt32 dwProvSpec1;
        public UInt32 dwProvSpec2;
        public fixed ushort wcProvChar[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COMSTAT
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public UInt32 cbInQue;
        public UInt32 cbOutQue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DCB
    {
        public UInt32 DCBlength;
        public UInt32 BaudRate;
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public ushort wReserved;
        public ushort XonLim;
        public ushort XoffLim;
        public byte ByteSize;
        public byte Parity;
        public byte StopBits;
        public byte XonChar;
        public byte XoffChar;
        public byte ErrorChar;
        public byte EofChar;
        public byte EvtChar;
        public ushort wReserved1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COMMTIMEOUTS
    {
        public UInt32 ReadIntervalTimeout;
        public UInt32 ReadTotalTimeoutMultiplier;
        public UInt32 ReadTotalTimeoutConstant;
        public UInt32 WriteTotalTimeoutMultiplier;
        public UInt32 WriteTotalTimeoutConstant;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COMMCONFIG
    {
        public UInt32 dwSize;
        public ushort wVersion;
        public ushort wReserved;
        public _DCB dcb;
        public UInt32 dwProviderSubType;
        public UInt32 dwProviderOffset;
        public UInt32 dwProviderSize;
        public fixed ushort wcProviderData[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MEMORYSTATUS
    {
        public UInt32 dwLength;
        public UInt32 dwMemoryLoad;
        public ulong dwTotalPhys;
        public ulong dwAvailPhys;
        public ulong dwTotalPageFile;
        public ulong dwAvailPageFile;
        public ulong dwTotalVirtual;
        public ulong dwAvailVirtual;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OFSTRUCT
    {
        public byte cBytes;
        public byte fFixedDisk;
        public ushort nErrCode;
        public ushort Reserved1;
        public ushort Reserved2;
        public fixed byte szPathName[128];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _UMS_SCHEDULER_STARTUP_INFO
    {
        public UInt32 UmsVersion;
        public void* CompletionList;
        public PRTL_UMS_SCHEDULER_ENTRY_POINT SchedulerProc;
        public void* SchedulerParam;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _UMS_SYSTEM_THREAD_INFORMATION
    {
        public UInt32 UmsVersion;
        public _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public UInt32 ThreadUmsFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _UMS_SYSTEM_THREAD_INFORMATION__bindgen_ty_1__bindgen_ty_1
    {
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public fixed byte __bindgen_padding_0[3];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct COPYFILE2_MESSAGE__bindgen_ty_1
    {
        [FieldOffset(0)]
        public COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1 ChunkStarted;
        [FieldOffset(0)]
        public COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2 ChunkFinished;
        [FieldOffset(0)]
        public COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3 StreamStarted;
        [FieldOffset(0)]
        public COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4 StreamFinished;
        [FieldOffset(0)]
        public COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5 PollContinue;
        [FieldOffset(0)]
        public COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6 Error;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 dwStreamNumber;
        public UInt32 dwReserved;
        public void* hSourceFile;
        public void* hDestinationFile;
        public _ULARGE_INTEGER uliChunkNumber;
        public _ULARGE_INTEGER uliChunkSize;
        public _ULARGE_INTEGER uliStreamSize;
        public _ULARGE_INTEGER uliTotalFileSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 dwStreamNumber;
        public UInt32 dwFlags;
        public void* hSourceFile;
        public void* hDestinationFile;
        public _ULARGE_INTEGER uliChunkNumber;
        public _ULARGE_INTEGER uliChunkSize;
        public _ULARGE_INTEGER uliStreamSize;
        public _ULARGE_INTEGER uliStreamBytesTransferred;
        public _ULARGE_INTEGER uliTotalFileSize;
        public _ULARGE_INTEGER uliTotalBytesTransferred;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_3
    {
        public UInt32 dwStreamNumber;
        public UInt32 dwReserved;
        public void* hSourceFile;
        public void* hDestinationFile;
        public _ULARGE_INTEGER uliStreamSize;
        public _ULARGE_INTEGER uliTotalFileSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_4
    {
        public UInt32 dwStreamNumber;
        public UInt32 dwReserved;
        public void* hSourceFile;
        public void* hDestinationFile;
        public _ULARGE_INTEGER uliStreamSize;
        public _ULARGE_INTEGER uliStreamBytesTransferred;
        public _ULARGE_INTEGER uliTotalFileSize;
        public _ULARGE_INTEGER uliTotalBytesTransferred;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_5
    {
        public UInt32 dwReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct COPYFILE2_MESSAGE__bindgen_ty_1__bindgen_ty_6
    {
        public _COPYFILE2_COPY_PHASE CopyPhase;
        public UInt32 dwStreamNumber;
        public Int32 hrFailure;
        public UInt32 dwReserved;
        public _ULARGE_INTEGER uliChunkNumber;
        public _ULARGE_INTEGER uliStreamSize;
        public _ULARGE_INTEGER uliStreamBytesTransferred;
        public _ULARGE_INTEGER uliTotalFileSize;
        public _ULARGE_INTEGER uliTotalBytesTransferred;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct COPYFILE2_EXTENDED_PARAMETERS
    {
        public UInt32 dwSize;
        public UInt32 dwCopyFlags;
        public int* pfCancel;
        public Option pProgressRoutine;
        public void* pvCallbackContext;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OPERATION_START_PARAMETERS
    {
        public UInt32 Version;
        public UInt32 OperationId;
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OPERATION_END_PARAMETERS
    {
        public UInt32 Version;
        public UInt32 OperationId;
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagHW_PROFILE_INFOA
    {
        public UInt32 dwDockInfo;
        public fixed byte szHwProfileGuid[39];
        public fixed byte szHwProfileName[80];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagHW_PROFILE_INFOW
    {
        public UInt32 dwDockInfo;
        public fixed ushort szHwProfileGuid[39];
        public fixed ushort szHwProfileName[80];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TIME_ZONE_INFORMATION
    {
        public Int32 Bias;
        public fixed ushort StandardName[32];
        public _SYSTEMTIME StandardDate;
        public Int32 StandardBias;
        public fixed ushort DaylightName[32];
        public _SYSTEMTIME DaylightDate;
        public Int32 DaylightBias;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TIME_DYNAMIC_ZONE_INFORMATION
    {
        public Int32 Bias;
        public fixed ushort StandardName[32];
        public _SYSTEMTIME StandardDate;
        public Int32 StandardBias;
        public fixed ushort DaylightName[32];
        public _SYSTEMTIME DaylightDate;
        public Int32 DaylightBias;
        public fixed ushort TimeZoneKeyName[128];
        public byte DynamicDaylightTimeDisabled;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SYSTEM_POWER_STATUS
    {
        public byte ACLineStatus;
        public byte BatteryFlag;
        public byte BatteryLifePercent;
        public byte SystemStatusFlag;
        public UInt32 BatteryLifeTime;
        public UInt32 BatteryFullLifeTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA
    {
        public void* lpInformation;
        public void* lpSectionBase;
        public UInt32 ulSectionLength;
        public void* lpSectionGlobalDataBase;
        public UInt32 ulSectionGlobalDataLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagACTCTX_SECTION_KEYED_DATA
    {
        public UInt32 cbSize;
        public UInt32 ulDataFormatVersion;
        public void* lpData;
        public UInt32 ulLength;
        public void* lpSectionGlobalData;
        public UInt32 ulSectionGlobalDataLength;
        public void* lpSectionBase;
        public UInt32 ulSectionTotalLength;
        public void* hActCtx;
        public UInt32 ulAssemblyRosterIndex;
        public UInt32 ulFlags;
        public tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _FILE_RENAME_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte ReplaceIfExists;
        [FieldOffset(0)]
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_1
    {
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Reserved[8];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2
    {
        [FieldOffset(0)]
        public _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1 Smb2;
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Reserved[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1
    {
        public _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 Server;
        public _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2 Share;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 Capabilities;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_REMOTE_PROTOCOL_INFO__bindgen_ty_2__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 Capabilities;
        public UInt32 CachingFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct FILE_ID_DESCRIPTOR
    {
        public UInt32 dwSize;
        public _FILE_ID_TYPE Type;
        public FILE_ID_DESCRIPTOR__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct FILE_ID_DESCRIPTOR__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _LARGE_INTEGER FileId;
        [FieldOffset(0)]
        public _GUID ObjectId;
        [FieldOffset(0)]
        public _FILE_ID_128 ExtendedFileId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagXFORM
    {
        public float eM11;
        public float eM12;
        public float eM21;
        public float eM22;
        public float eDx;
        public float eDy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBITMAP
    {
        public Int32 bmType;
        public Int32 bmWidth;
        public Int32 bmHeight;
        public Int32 bmWidthBytes;
        public ushort bmPlanes;
        public ushort bmBitsPixel;
        public void* bmBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRGBTRIPLE
    {
        public byte rgbtBlue;
        public byte rgbtGreen;
        public byte rgbtRed;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRGBQUAD
    {
        public byte rgbBlue;
        public byte rgbGreen;
        public byte rgbRed;
        public byte rgbReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCIEXYZ
    {
        public Int32 ciexyzX;
        public Int32 ciexyzY;
        public Int32 ciexyzZ;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagICEXYZTRIPLE
    {
        public tagCIEXYZ ciexyzRed;
        public tagCIEXYZ ciexyzGreen;
        public tagCIEXYZ ciexyzBlue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLOGCOLORSPACEA
    {
        public UInt32 lcsSignature;
        public UInt32 lcsVersion;
        public UInt32 lcsSize;
        public Int32 lcsCSType;
        public Int32 lcsIntent;
        public tagICEXYZTRIPLE lcsEndpoints;
        public UInt32 lcsGammaRed;
        public UInt32 lcsGammaGreen;
        public UInt32 lcsGammaBlue;
        public fixed byte lcsFilename[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLOGCOLORSPACEW
    {
        public UInt32 lcsSignature;
        public UInt32 lcsVersion;
        public UInt32 lcsSize;
        public Int32 lcsCSType;
        public Int32 lcsIntent;
        public tagICEXYZTRIPLE lcsEndpoints;
        public UInt32 lcsGammaRed;
        public UInt32 lcsGammaGreen;
        public UInt32 lcsGammaBlue;
        public fixed ushort lcsFilename[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBITMAPCOREHEADER
    {
        public UInt32 bcSize;
        public ushort bcWidth;
        public ushort bcHeight;
        public ushort bcPlanes;
        public ushort bcBitCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBITMAPINFOHEADER
    {
        public UInt32 biSize;
        public Int32 biWidth;
        public Int32 biHeight;
        public ushort biPlanes;
        public ushort biBitCount;
        public UInt32 biCompression;
        public UInt32 biSizeImage;
        public Int32 biXPelsPerMeter;
        public Int32 biYPelsPerMeter;
        public UInt32 biClrUsed;
        public UInt32 biClrImportant;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBITMAPINFO
    {
        public tagBITMAPINFOHEADER bmiHeader;
        public fixed byte/* tagRGBQUAD, this length is invalid so must keep pointer and can't edit from C# */ bmiColors[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagFONTSIGNATURE
    {
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ fsUsb[4];
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ fsCsb[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCHARSETINFO
    {
        public uint ciCharset;
        public uint ciACP;
        public tagFONTSIGNATURE fs;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagHANDLETABLE
    {
        public fixed byte/* void, this length is invalid so must keep pointer and can't edit from C# */ objectHandle[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMETARECORD
    {
        public UInt32 rdSize;
        public ushort rdFunction;
        public fixed ushort rdParm[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMETAFILEPICT
    {
        public Int32 mm;
        public Int32 xExt;
        public Int32 yExt;
        public HMETAFILE__* hMF;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagENHMETARECORD
    {
        public UInt32 iType;
        public UInt32 nSize;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ dParm[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagENHMETAHEADER
    {
        public UInt32 iType;
        public UInt32 nSize;
        public _RECTL rclBounds;
        public _RECTL rclFrame;
        public UInt32 dSignature;
        public UInt32 nVersion;
        public UInt32 nBytes;
        public UInt32 nRecords;
        public ushort nHandles;
        public ushort sReserved;
        public UInt32 nDescription;
        public UInt32 offDescription;
        public UInt32 nPalEntries;
        public tagSIZE szlDevice;
        public tagSIZE szlMillimeters;
        public UInt32 cbPixelFormat;
        public UInt32 offPixelFormat;
        public UInt32 bOpenGL;
        public tagSIZE szlMicrometers;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTEXTMETRICA
    {
        public Int32 tmHeight;
        public Int32 tmAscent;
        public Int32 tmDescent;
        public Int32 tmInternalLeading;
        public Int32 tmExternalLeading;
        public Int32 tmAveCharWidth;
        public Int32 tmMaxCharWidth;
        public Int32 tmWeight;
        public Int32 tmOverhang;
        public Int32 tmDigitizedAspectX;
        public Int32 tmDigitizedAspectY;
        public byte tmFirstChar;
        public byte tmLastChar;
        public byte tmDefaultChar;
        public byte tmBreakChar;
        public byte tmItalic;
        public byte tmUnderlined;
        public byte tmStruckOut;
        public byte tmPitchAndFamily;
        public byte tmCharSet;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTEXTMETRICW
    {
        public Int32 tmHeight;
        public Int32 tmAscent;
        public Int32 tmDescent;
        public Int32 tmInternalLeading;
        public Int32 tmExternalLeading;
        public Int32 tmAveCharWidth;
        public Int32 tmMaxCharWidth;
        public Int32 tmWeight;
        public Int32 tmOverhang;
        public Int32 tmDigitizedAspectX;
        public Int32 tmDigitizedAspectY;
        public ushort tmFirstChar;
        public ushort tmLastChar;
        public ushort tmDefaultChar;
        public ushort tmBreakChar;
        public byte tmItalic;
        public byte tmUnderlined;
        public byte tmStruckOut;
        public byte tmPitchAndFamily;
        public byte tmCharSet;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagNEWTEXTMETRICA
    {
        public Int32 tmHeight;
        public Int32 tmAscent;
        public Int32 tmDescent;
        public Int32 tmInternalLeading;
        public Int32 tmExternalLeading;
        public Int32 tmAveCharWidth;
        public Int32 tmMaxCharWidth;
        public Int32 tmWeight;
        public Int32 tmOverhang;
        public Int32 tmDigitizedAspectX;
        public Int32 tmDigitizedAspectY;
        public byte tmFirstChar;
        public byte tmLastChar;
        public byte tmDefaultChar;
        public byte tmBreakChar;
        public byte tmItalic;
        public byte tmUnderlined;
        public byte tmStruckOut;
        public byte tmPitchAndFamily;
        public byte tmCharSet;
        public UInt32 ntmFlags;
        public uint ntmSizeEM;
        public uint ntmCellHeight;
        public uint ntmAvgWidth;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagNEWTEXTMETRICW
    {
        public Int32 tmHeight;
        public Int32 tmAscent;
        public Int32 tmDescent;
        public Int32 tmInternalLeading;
        public Int32 tmExternalLeading;
        public Int32 tmAveCharWidth;
        public Int32 tmMaxCharWidth;
        public Int32 tmWeight;
        public Int32 tmOverhang;
        public Int32 tmDigitizedAspectX;
        public Int32 tmDigitizedAspectY;
        public ushort tmFirstChar;
        public ushort tmLastChar;
        public ushort tmDefaultChar;
        public ushort tmBreakChar;
        public byte tmItalic;
        public byte tmUnderlined;
        public byte tmStruckOut;
        public byte tmPitchAndFamily;
        public byte tmCharSet;
        public UInt32 ntmFlags;
        public uint ntmSizeEM;
        public uint ntmCellHeight;
        public uint ntmAvgWidth;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagNEWTEXTMETRICEXA
    {
        public tagNEWTEXTMETRICA ntmTm;
        public tagFONTSIGNATURE ntmFontSig;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagNEWTEXTMETRICEXW
    {
        public tagNEWTEXTMETRICW ntmTm;
        public tagFONTSIGNATURE ntmFontSig;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLOGBRUSH
    {
        public uint lbStyle;
        public UInt32 lbColor;
        public ulong lbHatch;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLOGBRUSH32
    {
        public uint lbStyle;
        public UInt32 lbColor;
        public UInt32 lbHatch;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLOGPEN
    {
        public uint lopnStyle;
        public tagPOINT lopnWidth;
        public UInt32 lopnColor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagEXTLOGPEN32
    {
        public UInt32 elpPenStyle;
        public UInt32 elpWidth;
        public uint elpBrushStyle;
        public UInt32 elpColor;
        public UInt32 elpHatch;
        public UInt32 elpNumEntries;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ elpStyleEntry[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPALETTEENTRY
    {
        public byte peRed;
        public byte peGreen;
        public byte peBlue;
        public byte peFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLOGPALETTE
    {
        public ushort palVersion;
        public ushort palNumEntries;
        public fixed byte/* tagPALETTEENTRY, this length is invalid so must keep pointer and can't edit from C# */ palPalEntry[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLOGFONTA
    {
        public Int32 lfHeight;
        public Int32 lfWidth;
        public Int32 lfEscapement;
        public Int32 lfOrientation;
        public Int32 lfWeight;
        public byte lfItalic;
        public byte lfUnderline;
        public byte lfStrikeOut;
        public byte lfCharSet;
        public byte lfOutPrecision;
        public byte lfClipPrecision;
        public byte lfQuality;
        public byte lfPitchAndFamily;
        public fixed byte lfFaceName[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLOGFONTW
    {
        public Int32 lfHeight;
        public Int32 lfWidth;
        public Int32 lfEscapement;
        public Int32 lfOrientation;
        public Int32 lfWeight;
        public byte lfItalic;
        public byte lfUnderline;
        public byte lfStrikeOut;
        public byte lfCharSet;
        public byte lfOutPrecision;
        public byte lfClipPrecision;
        public byte lfQuality;
        public byte lfPitchAndFamily;
        public fixed ushort lfFaceName[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagENUMLOGFONTEXA
    {
        public tagLOGFONTA elfLogFont;
        public fixed byte elfFullName[64];
        public fixed byte elfStyle[32];
        public fixed byte elfScript[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagENUMLOGFONTEXW
    {
        public tagLOGFONTW elfLogFont;
        public fixed ushort elfFullName[64];
        public fixed ushort elfStyle[32];
        public fixed ushort elfScript[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPANOSE
    {
        public byte bFamilyType;
        public byte bSerifStyle;
        public byte bWeight;
        public byte bProportion;
        public byte bContrast;
        public byte bStrokeVariation;
        public byte bArmStyle;
        public byte bLetterform;
        public byte bMidline;
        public byte bXHeight;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagEXTLOGFONTW
    {
        public tagLOGFONTW elfLogFont;
        public fixed ushort elfFullName[64];
        public fixed ushort elfStyle[32];
        public UInt32 elfVersion;
        public UInt32 elfStyleSize;
        public UInt32 elfMatch;
        public UInt32 elfReserved;
        public fixed byte elfVendorId[4];
        public UInt32 elfCulture;
        public tagPANOSE elfPanose;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _devicemodeA
    {
        public fixed byte dmDeviceName[32];
        public ushort dmSpecVersion;
        public ushort dmDriverVersion;
        public ushort dmSize;
        public ushort dmDriverExtra;
        public UInt32 dmFields;
        public _devicemodeA__bindgen_ty_1 __bindgen_anon_1;
        public short dmColor;
        public short dmDuplex;
        public short dmYResolution;
        public short dmTTOption;
        public short dmCollate;
        public fixed byte dmFormName[32];
        public ushort dmLogPixels;
        public UInt32 dmBitsPerPel;
        public UInt32 dmPelsWidth;
        public UInt32 dmPelsHeight;
        public _devicemodeA__bindgen_ty_2 __bindgen_anon_2;
        public UInt32 dmDisplayFrequency;
        public UInt32 dmICMMethod;
        public UInt32 dmICMIntent;
        public UInt32 dmMediaType;
        public UInt32 dmDitherType;
        public UInt32 dmReserved1;
        public UInt32 dmReserved2;
        public UInt32 dmPanningWidth;
        public UInt32 dmPanningHeight;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _devicemodeA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _devicemodeA__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public _devicemodeA__bindgen_ty_1__bindgen_ty_2 __bindgen_anon_2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _devicemodeA__bindgen_ty_1__bindgen_ty_1
    {
        public short dmOrientation;
        public short dmPaperSize;
        public short dmPaperLength;
        public short dmPaperWidth;
        public short dmScale;
        public short dmCopies;
        public short dmDefaultSource;
        public short dmPrintQuality;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _devicemodeA__bindgen_ty_1__bindgen_ty_2
    {
        public _POINTL dmPosition;
        public UInt32 dmDisplayOrientation;
        public UInt32 dmDisplayFixedOutput;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _devicemodeA__bindgen_ty_2
    {
        [FieldOffset(0)]
        public UInt32 dmDisplayFlags;
        [FieldOffset(0)]
        public UInt32 dmNup;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _devicemodeW
    {
        public fixed ushort dmDeviceName[32];
        public ushort dmSpecVersion;
        public ushort dmDriverVersion;
        public ushort dmSize;
        public ushort dmDriverExtra;
        public UInt32 dmFields;
        public _devicemodeW__bindgen_ty_1 __bindgen_anon_1;
        public short dmColor;
        public short dmDuplex;
        public short dmYResolution;
        public short dmTTOption;
        public short dmCollate;
        public fixed ushort dmFormName[32];
        public ushort dmLogPixels;
        public UInt32 dmBitsPerPel;
        public UInt32 dmPelsWidth;
        public UInt32 dmPelsHeight;
        public _devicemodeW__bindgen_ty_2 __bindgen_anon_2;
        public UInt32 dmDisplayFrequency;
        public UInt32 dmICMMethod;
        public UInt32 dmICMIntent;
        public UInt32 dmMediaType;
        public UInt32 dmDitherType;
        public UInt32 dmReserved1;
        public UInt32 dmReserved2;
        public UInt32 dmPanningWidth;
        public UInt32 dmPanningHeight;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _devicemodeW__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _devicemodeW__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public _devicemodeW__bindgen_ty_1__bindgen_ty_2 __bindgen_anon_2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _devicemodeW__bindgen_ty_1__bindgen_ty_1
    {
        public short dmOrientation;
        public short dmPaperSize;
        public short dmPaperLength;
        public short dmPaperWidth;
        public short dmScale;
        public short dmCopies;
        public short dmDefaultSource;
        public short dmPrintQuality;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _devicemodeW__bindgen_ty_1__bindgen_ty_2
    {
        public _POINTL dmPosition;
        public UInt32 dmDisplayOrientation;
        public UInt32 dmDisplayFixedOutput;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _devicemodeW__bindgen_ty_2
    {
        [FieldOffset(0)]
        public UInt32 dmDisplayFlags;
        [FieldOffset(0)]
        public UInt32 dmNup;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISPLAY_DEVICEA
    {
        public UInt32 cb;
        public fixed byte DeviceName[32];
        public fixed byte DeviceString[128];
        public UInt32 StateFlags;
        public fixed byte DeviceID[128];
        public fixed byte DeviceKey[128];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISPLAY_DEVICEW
    {
        public UInt32 cb;
        public fixed ushort DeviceName[32];
        public fixed ushort DeviceString[128];
        public UInt32 StateFlags;
        public fixed ushort DeviceID[128];
        public fixed ushort DeviceKey[128];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_RATIONAL
    {
        public uint Numerator;
        public uint Denominator;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_2DREGION
    {
        public uint cx;
        public uint cy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
    {
        public ulong pixelRate;
        public DISPLAYCONFIG_RATIONAL hSyncFreq;
        public DISPLAYCONFIG_RATIONAL vSyncFreq;
        public DISPLAYCONFIG_2DREGION activeSize;
        public DISPLAYCONFIG_2DREGION totalSize;
        public DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1 __bindgen_anon_1;
        public int scanLineOrdering;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1 AdditionalSignalInfo;
        [FieldOffset(0)]
        public uint videoStandard;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO__bindgen_ty_1__bindgen_ty_1
    {
        public fixed ushort _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_SOURCE_MODE
    {
        public uint width;
        public uint height;
        public int pixelFormat;
        public _POINTL position;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_TARGET_MODE
    {
        public DISPLAYCONFIG_VIDEO_SIGNAL_INFO targetVideoSignalInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO
    {
        public _POINTL PathSourceSize;
        public _RECTL DesktopImageRegion;
        public _RECTL DesktopImageClip;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_MODE_INFO
    {
        public int infoType;
        public uint id;
        public _LUID adapterId;
        public DISPLAYCONFIG_MODE_INFO__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct DISPLAYCONFIG_MODE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public DISPLAYCONFIG_TARGET_MODE targetMode;
        [FieldOffset(0)]
        public DISPLAYCONFIG_SOURCE_MODE sourceMode;
        [FieldOffset(0)]
        public DISPLAYCONFIG_DESKTOP_IMAGE_INFO desktopImageInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_PATH_SOURCE_INFO
    {
        public _LUID adapterId;
        public uint id;
        public DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1 __bindgen_anon_1;
        public uint statusFlags;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public uint modeInfoIdx;
        [FieldOffset(0)]
        public DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_PATH_SOURCE_INFO__bindgen_ty_1__bindgen_ty_1
    {
        public fixed ushort _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_PATH_TARGET_INFO
    {
        public _LUID adapterId;
        public uint id;
        public DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1 __bindgen_anon_1;
        public int outputTechnology;
        public int rotation;
        public int scaling;
        public DISPLAYCONFIG_RATIONAL refreshRate;
        public int scanLineOrdering;
        public int targetAvailable;
        public uint statusFlags;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public uint modeInfoIdx;
        [FieldOffset(0)]
        public DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_PATH_TARGET_INFO__bindgen_ty_1__bindgen_ty_1
    {
        public fixed ushort _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_PATH_INFO
    {
        public DISPLAYCONFIG_PATH_SOURCE_INFO sourceInfo;
        public DISPLAYCONFIG_PATH_TARGET_INFO targetInfo;
        public uint flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_DEVICE_INFO_HEADER
    {
        public int type_;
        public uint size;
        public _LUID adapterId;
        public uint id;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
    {
        public DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1
    {
        [FieldOffset(0)]
        public DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public uint value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1
    {
        [FieldOffset(0)]
        public DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public uint value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public uint value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public uint value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public uint value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RGNDATAHEADER
    {
        public UInt32 dwSize;
        public UInt32 iType;
        public UInt32 nCount;
        public UInt32 nRgnSize;
        public tagRECT rcBound;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RGNDATA
    {
        public _RGNDATAHEADER rdh;
        public fixed byte Buffer[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ABC
    {
        public int abcA;
        public uint abcB;
        public int abcC;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ABCFLOAT
    {
        public float abcfA;
        public float abcfB;
        public float abcfC;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OUTLINETEXTMETRICA
    {
        public uint otmSize;
        public tagTEXTMETRICA otmTextMetrics;
        public byte otmFiller;
        public tagPANOSE otmPanoseNumber;
        public uint otmfsSelection;
        public uint otmfsType;
        public int otmsCharSlopeRise;
        public int otmsCharSlopeRun;
        public int otmItalicAngle;
        public uint otmEMSquare;
        public int otmAscent;
        public int otmDescent;
        public uint otmLineGap;
        public uint otmsCapEmHeight;
        public uint otmsXHeight;
        public tagRECT otmrcFontBox;
        public int otmMacAscent;
        public int otmMacDescent;
        public uint otmMacLineGap;
        public uint otmusMinimumPPEM;
        public tagPOINT otmptSubscriptSize;
        public tagPOINT otmptSubscriptOffset;
        public tagPOINT otmptSuperscriptSize;
        public tagPOINT otmptSuperscriptOffset;
        public uint otmsStrikeoutSize;
        public int otmsStrikeoutPosition;
        public int otmsUnderscoreSize;
        public int otmsUnderscorePosition;
        public byte otmpFamilyName;
        public byte otmpFaceName;
        public byte otmpStyleName;
        public byte otmpFullName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OUTLINETEXTMETRICW
    {
        public uint otmSize;
        public tagTEXTMETRICW otmTextMetrics;
        public byte otmFiller;
        public tagPANOSE otmPanoseNumber;
        public uint otmfsSelection;
        public uint otmfsType;
        public int otmsCharSlopeRise;
        public int otmsCharSlopeRun;
        public int otmItalicAngle;
        public uint otmEMSquare;
        public int otmAscent;
        public int otmDescent;
        public uint otmLineGap;
        public uint otmsCapEmHeight;
        public uint otmsXHeight;
        public tagRECT otmrcFontBox;
        public int otmMacAscent;
        public int otmMacDescent;
        public uint otmMacLineGap;
        public uint otmusMinimumPPEM;
        public tagPOINT otmptSubscriptSize;
        public tagPOINT otmptSubscriptOffset;
        public tagPOINT otmptSuperscriptSize;
        public tagPOINT otmptSuperscriptOffset;
        public uint otmsStrikeoutSize;
        public int otmsStrikeoutPosition;
        public int otmsUnderscoreSize;
        public int otmsUnderscorePosition;
        public byte otmpFamilyName;
        public byte otmpFaceName;
        public byte otmpStyleName;
        public byte otmpFullName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOLYTEXTA
    {
        public int x;
        public int y;
        public uint n;
        public byte lpstr;
        public uint uiFlags;
        public tagRECT rcl;
        public int* pdx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOLYTEXTW
    {
        public int x;
        public int y;
        public uint n;
        public ushort lpstr;
        public uint uiFlags;
        public tagRECT rcl;
        public int* pdx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FIXED
    {
        public ushort fract;
        public short value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MAT2
    {
        public _FIXED eM11;
        public _FIXED eM12;
        public _FIXED eM21;
        public _FIXED eM22;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _GLYPHMETRICS
    {
        public uint gmBlackBoxX;
        public uint gmBlackBoxY;
        public tagPOINT gmptGlyphOrigin;
        public short gmCellIncX;
        public short gmCellIncY;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTFX
    {
        public _FIXED x;
        public _FIXED y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagGCP_RESULTSA
    {
        public UInt32 lStructSize;
        public byte lpOutString;
        public uint* lpOrder;
        public int* lpDx;
        public int* lpCaretPos;
        public byte lpClass;
        public ushort lpGlyphs;
        public uint nGlyphs;
        public int nMaxFit;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagGCP_RESULTSW
    {
        public UInt32 lStructSize;
        public ushort lpOutString;
        public uint* lpOrder;
        public int* lpDx;
        public int* lpCaretPos;
        public byte lpClass;
        public ushort lpGlyphs;
        public uint nGlyphs;
        public int nMaxFit;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RASTERIZER_STATUS
    {
        public short nSize;
        public short wFlags;
        public short nLanguageID;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPIXELFORMATDESCRIPTOR
    {
        public ushort nSize;
        public ushort nVersion;
        public UInt32 dwFlags;
        public byte iPixelType;
        public byte cColorBits;
        public byte cRedBits;
        public byte cRedShift;
        public byte cGreenBits;
        public byte cGreenShift;
        public byte cBlueBits;
        public byte cBlueShift;
        public byte cAlphaBits;
        public byte cAlphaShift;
        public byte cAccumBits;
        public byte cAccumRedBits;
        public byte cAccumGreenBits;
        public byte cAccumBlueBits;
        public byte cAccumAlphaBits;
        public byte cDepthBits;
        public byte cStencilBits;
        public byte cAuxBuffers;
        public byte iLayerType;
        public byte bReserved;
        public UInt32 dwLayerMask;
        public UInt32 dwVisibleMask;
        public UInt32 dwDamageMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWCRANGE
    {
        public ushort wcLow;
        public ushort cGlyphs;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagGLYPHSET
    {
        public UInt32 cbThis;
        public UInt32 flAccel;
        public UInt32 cGlyphsSupported;
        public UInt32 cRanges;
        public fixed byte/* tagWCRANGE, this length is invalid so must keep pointer and can't edit from C# */ ranges[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagDESIGNVECTOR
    {
        public UInt32 dvReserved;
        public UInt32 dvNumAxes;
        public fixed byte/* Int32, this length is invalid so must keep pointer and can't edit from C# */ dvValues[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagAXISINFOA
    {
        public Int32 axMinValue;
        public Int32 axMaxValue;
        public fixed byte axAxisName[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagAXISINFOW
    {
        public Int32 axMinValue;
        public Int32 axMaxValue;
        public fixed ushort axAxisName[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagAXESLISTA
    {
        public UInt32 axlReserved;
        public UInt32 axlNumAxes;
        public fixed byte/* tagAXISINFOA, this length is invalid so must keep pointer and can't edit from C# */ axlAxisInfo[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagAXESLISTW
    {
        public UInt32 axlReserved;
        public UInt32 axlNumAxes;
        public fixed byte/* tagAXISINFOW, this length is invalid so must keep pointer and can't edit from C# */ axlAxisInfo[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagENUMLOGFONTEXDVA
    {
        public tagENUMLOGFONTEXA elfEnumLogfontEx;
        public tagDESIGNVECTOR elfDesignVector;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagENUMLOGFONTEXDVW
    {
        public tagENUMLOGFONTEXW elfEnumLogfontEx;
        public tagDESIGNVECTOR elfDesignVector;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TRIVERTEX
    {
        public Int32 x;
        public Int32 y;
        public ushort Red;
        public ushort Green;
        public ushort Blue;
        public ushort Alpha;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BLENDFUNCTION
    {
        public byte BlendOp;
        public byte BlendFlags;
        public byte SourceConstantAlpha;
        public byte AlphaFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCOLORADJUSTMENT
    {
        public ushort caSize;
        public ushort caFlags;
        public ushort caIlluminantIndex;
        public ushort caRedGamma;
        public ushort caGreenGamma;
        public ushort caBlueGamma;
        public ushort caReferenceBlack;
        public ushort caReferenceWhite;
        public short caContrast;
        public short caBrightness;
        public short caColorfulness;
        public short caRedGreenTint;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DOCINFOA
    {
        public int cbSize;
        public byte lpszDocName;
        public byte lpszOutput;
        public byte lpszDatatype;
        public UInt32 fwType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DOCINFOW
    {
        public int cbSize;
        public ushort lpszDocName;
        public ushort lpszOutput;
        public ushort lpszDatatype;
        public UInt32 fwType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagKERNINGPAIR
    {
        public ushort wFirst;
        public ushort wSecond;
        public int iKernAmount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagEMR
    {
        public UInt32 iType;
        public UInt32 nSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagEMRTEXT
    {
        public _POINTL ptlReference;
        public UInt32 nChars;
        public UInt32 offString;
        public UInt32 fOptions;
        public _RECTL rcl;
        public UInt32 offDx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _POINTFLOAT
    {
        public float x;
        public float y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _GLYPHMETRICSFLOAT
    {
        public float gmfBlackBoxX;
        public float gmfBlackBoxY;
        public _POINTFLOAT gmfptGlyphOrigin;
        public float gmfCellIncX;
        public float gmfCellIncY;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLAYERPLANEDESCRIPTOR
    {
        public ushort nSize;
        public ushort nVersion;
        public UInt32 dwFlags;
        public byte iPixelType;
        public byte cColorBits;
        public byte cRedBits;
        public byte cRedShift;
        public byte cGreenBits;
        public byte cGreenShift;
        public byte cBlueBits;
        public byte cBlueShift;
        public byte cAlphaBits;
        public byte cAlphaShift;
        public byte cAccumBits;
        public byte cAccumRedBits;
        public byte cAccumGreenBits;
        public byte cAccumBlueBits;
        public byte cAccumAlphaBits;
        public byte cDepthBits;
        public byte cStencilBits;
        public byte cAuxBuffers;
        public byte iLayerPlane;
        public byte bReserved;
        public UInt32 crTransparent;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WGLSWAP
    {
        public HDC__* hdc;
        public uint uiFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMOUSEMOVEPOINT
    {
        public int x;
        public int y;
        public UInt32 time;
        public ulong dwExtraInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWNDCLASSEXA
    {
        public uint cbSize;
        public uint style;
        public Option lpfnWndProc;
        public int cbClsExtra;
        public int cbWndExtra;
        public HINSTANCE__* hInstance;
        public HICON__* hIcon;
        public HICON__* hCursor;
        public HBRUSH__* hbrBackground;
        public byte lpszMenuName;
        public byte lpszClassName;
        public HICON__* hIconSm;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWNDCLASSEXW
    {
        public uint cbSize;
        public uint style;
        public Option lpfnWndProc;
        public int cbClsExtra;
        public int cbWndExtra;
        public HINSTANCE__* hInstance;
        public HICON__* hIcon;
        public HICON__* hCursor;
        public HBRUSH__* hbrBackground;
        public ushort lpszMenuName;
        public ushort lpszClassName;
        public HICON__* hIconSm;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWNDCLASSA
    {
        public uint style;
        public Option lpfnWndProc;
        public int cbClsExtra;
        public int cbWndExtra;
        public HINSTANCE__* hInstance;
        public HICON__* hIcon;
        public HICON__* hCursor;
        public HBRUSH__* hbrBackground;
        public byte lpszMenuName;
        public byte lpszClassName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWNDCLASSW
    {
        public uint style;
        public Option lpfnWndProc;
        public int cbClsExtra;
        public int cbWndExtra;
        public HINSTANCE__* hInstance;
        public HICON__* hIcon;
        public HICON__* hCursor;
        public HBRUSH__* hbrBackground;
        public ushort lpszMenuName;
        public ushort lpszClassName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMSG
    {
        public HWND__* hwnd;
        public uint message;
        public ulong wParam;
        public long lParam;
        public UInt32 time;
        public tagPOINT pt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWINDOWPOS
    {
        public HWND__* hwnd;
        public HWND__* hwndInsertAfter;
        public int x;
        public int y;
        public int cx;
        public int cy;
        public uint flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTRACKMOUSEEVENT
    {
        public UInt32 cbSize;
        public UInt32 dwFlags;
        public HWND__* hwndTrack;
        public UInt32 dwHoverTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagACCEL
    {
        public byte fVirt;
        public ushort key;
        public ushort cmd;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPAINTSTRUCT
    {
        public HDC__* hdc;
        public int fErase;
        public tagRECT rcPaint;
        public int fRestore;
        public int fIncUpdate;
        public fixed byte rgbReserved[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCREATESTRUCTA
    {
        public void* lpCreateParams;
        public HINSTANCE__* hInstance;
        public HMENU__* hMenu;
        public HWND__* hwndParent;
        public int cy;
        public int cx;
        public int y;
        public int x;
        public Int32 style;
        public byte lpszName;
        public byte lpszClass;
        public UInt32 dwExStyle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCREATESTRUCTW
    {
        public void* lpCreateParams;
        public HINSTANCE__* hInstance;
        public HMENU__* hMenu;
        public HWND__* hwndParent;
        public int cy;
        public int cx;
        public int y;
        public int x;
        public Int32 style;
        public ushort lpszName;
        public ushort lpszClass;
        public UInt32 dwExStyle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWINDOWPLACEMENT
    {
        public uint length;
        public uint flags;
        public uint showCmd;
        public tagPOINT ptMinPosition;
        public tagPOINT ptMaxPosition;
        public tagRECT rcNormalPosition;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagNMHDR
    {
        public HWND__* hwndFrom;
        public ulong idFrom;
        public uint code;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct BSMINFO
    {
        public uint cbSize;
        public HDESK__* hdesk;
        public HWND__* hwnd;
        public _LUID luid;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagUPDATELAYEREDWINDOWINFO
    {
        public UInt32 cbSize;
        public HDC__* hdcDst;
        public tagPOINT* pptDst;
        public tagSIZE* psize;
        public HDC__* hdcSrc;
        public tagPOINT* pptSrc;
        public UInt32 crKey;
        public _BLENDFUNCTION* pblend;
        public UInt32 dwFlags;
        public tagRECT* prcDirty;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct FLASHWINFO
    {
        public uint cbSize;
        public HWND__* hwnd;
        public UInt32 dwFlags;
        public uint uCount;
        public UInt32 dwTimeout;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct DLGTEMPLATE
    {
        public UInt32 style;
        public UInt32 dwExtendedStyle;
        public ushort cdit;
        public short x;
        public short y;
        public short cx;
        public short cy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMOUSEINPUT
    {
        public Int32 dx;
        public Int32 dy;
        public UInt32 mouseData;
        public UInt32 dwFlags;
        public UInt32 time;
        public ulong dwExtraInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagKEYBDINPUT
    {
        public ushort wVk;
        public ushort wScan;
        public UInt32 dwFlags;
        public UInt32 time;
        public ulong dwExtraInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagHARDWAREINPUT
    {
        public UInt32 uMsg;
        public ushort wParamL;
        public ushort wParamH;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagINPUT
    {
        public UInt32 type_;
        public tagINPUT__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagINPUT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagMOUSEINPUT mi;
        [FieldOffset(0)]
        public tagKEYBDINPUT ki;
        [FieldOffset(0)]
        public tagHARDWAREINPUT hi;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HTOUCHINPUT__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTOUCHINPUT
    {
        public Int32 x;
        public Int32 y;
        public void* hSource;
        public UInt32 dwID;
        public UInt32 dwFlags;
        public UInt32 dwMask;
        public UInt32 dwTime;
        public ulong dwExtraInfo;
        public UInt32 cxContact;
        public UInt32 cyContact;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTER_INFO
    {
        public UInt32 pointerType;
        public uint pointerId;
        public uint frameId;
        public uint pointerFlags;
        public void* sourceDevice;
        public HWND__* hwndTarget;
        public tagPOINT ptPixelLocation;
        public tagPOINT ptHimetricLocation;
        public tagPOINT ptPixelLocationRaw;
        public tagPOINT ptHimetricLocationRaw;
        public UInt32 dwTime;
        public uint historyCount;
        public int InputData;
        public UInt32 dwKeyStates;
        public ulong PerformanceCount;
        public tagPOINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTER_TOUCH_INFO
    {
        public tagPOINTER_INFO pointerInfo;
        public uint touchFlags;
        public uint touchMask;
        public tagRECT rcContact;
        public tagRECT rcContactRaw;
        public uint orientation;
        public uint pressure;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTER_PEN_INFO
    {
        public tagPOINTER_INFO pointerInfo;
        public uint penFlags;
        public uint penMask;
        public uint pressure;
        public uint rotation;
        public int tiltX;
        public int tiltY;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTER_TYPE_INFO
    {
        public UInt32 type_;
        public tagPOINTER_TYPE_INFO__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagPOINTER_TYPE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagPOINTER_TOUCH_INFO touchInfo;
        [FieldOffset(0)]
        public tagPOINTER_PEN_INFO penInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HSYNTHETICPOINTERDEVICE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
    {
        public ushort score;
        public tagPOINT adjustedPoint;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTOUCH_HIT_TESTING_INPUT
    {
        public uint pointerId;
        public tagPOINT point;
        public tagRECT boundingBox;
        public tagRECT nonOccludedBoundingBox;
        public uint orientation;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagINPUT_TRANSFORM
    {
        public tagINPUT_TRANSFORM__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagINPUT_TRANSFORM__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public fixed float m[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagINPUT_TRANSFORM__bindgen_ty_1__bindgen_ty_1
    {
        public float _11;
        public float _12;
        public float _13;
        public float _14;
        public float _21;
        public float _22;
        public float _23;
        public float _24;
        public float _31;
        public float _32;
        public float _33;
        public float _34;
        public float _41;
        public float _42;
        public float _43;
        public float _44;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagLASTINPUTINFO
    {
        public uint cbSize;
        public UInt32 dwTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMENUINFO
    {
        public UInt32 cbSize;
        public UInt32 fMask;
        public UInt32 dwStyle;
        public uint cyMax;
        public HBRUSH__* hbrBack;
        public UInt32 dwContextHelpID;
        public ulong dwMenuData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMENUITEMINFOA
    {
        public uint cbSize;
        public uint fMask;
        public uint fType;
        public uint fState;
        public uint wID;
        public HMENU__* hSubMenu;
        public HBITMAP__* hbmpChecked;
        public HBITMAP__* hbmpUnchecked;
        public ulong dwItemData;
        public byte dwTypeData;
        public uint cch;
        public HBITMAP__* hbmpItem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMENUITEMINFOW
    {
        public uint cbSize;
        public uint fMask;
        public uint fType;
        public uint fState;
        public uint wID;
        public HMENU__* hSubMenu;
        public HBITMAP__* hbmpChecked;
        public HBITMAP__* hbmpUnchecked;
        public ulong dwItemData;
        public ushort dwTypeData;
        public uint cch;
        public HBITMAP__* hbmpItem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagDRAWTEXTPARAMS
    {
        public uint cbSize;
        public int iTabLength;
        public int iLeftMargin;
        public int iRightMargin;
        public uint uiLengthDrawn;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMSGBOXPARAMSA
    {
        public uint cbSize;
        public HWND__* hwndOwner;
        public HINSTANCE__* hInstance;
        public byte lpszText;
        public byte lpszCaption;
        public UInt32 dwStyle;
        public byte lpszIcon;
        public ulong dwContextHelpId;
        public Option lpfnMsgBoxCallback;
        public UInt32 dwLanguageId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMSGBOXPARAMSW
    {
        public uint cbSize;
        public HWND__* hwndOwner;
        public HINSTANCE__* hInstance;
        public ushort lpszText;
        public ushort lpszCaption;
        public UInt32 dwStyle;
        public ushort lpszIcon;
        public ulong dwContextHelpId;
        public Option lpfnMsgBoxCallback;
        public UInt32 dwLanguageId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ICONINFOEXA
    {
        public UInt32 cbSize;
        public int fIcon;
        public UInt32 xHotspot;
        public UInt32 yHotspot;
        public HBITMAP__* hbmMask;
        public HBITMAP__* hbmColor;
        public ushort wResID;
        public fixed byte szModName[260];
        public fixed byte szResName[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ICONINFOEXW
    {
        public UInt32 cbSize;
        public int fIcon;
        public UInt32 xHotspot;
        public UInt32 yHotspot;
        public HBITMAP__* hbmMask;
        public HBITMAP__* hbmColor;
        public ushort wResID;
        public fixed ushort szModName[260];
        public fixed ushort szResName[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSCROLLINFO
    {
        public uint cbSize;
        public uint fMask;
        public int nMin;
        public int nMax;
        public uint nPage;
        public int nPos;
        public int nTrackPos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMONITORINFO
    {
        public UInt32 cbSize;
        public tagRECT rcMonitor;
        public tagRECT rcWork;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagGUITHREADINFO
    {
        public UInt32 cbSize;
        public UInt32 flags;
        public HWND__* hwndActive;
        public HWND__* hwndFocus;
        public HWND__* hwndCapture;
        public HWND__* hwndMenuOwner;
        public HWND__* hwndMoveSize;
        public HWND__* hwndCaret;
        public tagRECT rcCaret;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCURSORINFO
    {
        public UInt32 cbSize;
        public UInt32 flags;
        public HICON__* hCursor;
        public tagPOINT ptScreenPos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWINDOWINFO
    {
        public UInt32 cbSize;
        public tagRECT rcWindow;
        public tagRECT rcClient;
        public UInt32 dwStyle;
        public UInt32 dwExStyle;
        public UInt32 dwWindowStatus;
        public uint cxWindowBorders;
        public uint cyWindowBorders;
        public ushort atomWindowType;
        public ushort wCreatorVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTITLEBARINFO
    {
        public UInt32 cbSize;
        public tagRECT rcTitleBar;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ rgstate[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMENUBARINFO
    {
        public UInt32 cbSize;
        public tagRECT rcBar;
        public HMENU__* hMenu;
        public HWND__* hwndMenu;
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public uint __bindgen_padding_0;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSCROLLBARINFO
    {
        public UInt32 cbSize;
        public tagRECT rcScrollBar;
        public int dxyLineButton;
        public int xyThumbTop;
        public int xyThumbBottom;
        public int reserved;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ rgstate[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCOMBOBOXINFO
    {
        public UInt32 cbSize;
        public tagRECT rcItem;
        public tagRECT rcButton;
        public UInt32 stateButton;
        public HWND__* hwndCombo;
        public HWND__* hwndItem;
        public HWND__* hwndList;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagALTTABINFO
    {
        public UInt32 cbSize;
        public int cItems;
        public int cColumns;
        public int cRows;
        public int iColFocus;
        public int iRowFocus;
        public int cxItem;
        public int cyItem;
        public tagPOINT ptStart;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HRAWINPUT__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRAWINPUTHEADER
    {
        public UInt32 dwType;
        public UInt32 dwSize;
        public void* hDevice;
        public ulong wParam;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRAWMOUSE
    {
        public ushort usFlags;
        public tagRAWMOUSE__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 ulRawButtons;
        public Int32 lLastX;
        public Int32 lLastY;
        public UInt32 ulExtraInformation;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagRAWMOUSE__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 ulButtons;
        [FieldOffset(0)]
        public tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRAWMOUSE__bindgen_ty_1__bindgen_ty_1
    {
        public ushort usButtonFlags;
        public ushort usButtonData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRAWKEYBOARD
    {
        public ushort MakeCode;
        public ushort Flags;
        public ushort Reserved;
        public ushort VKey;
        public uint Message;
        public UInt32 ExtraInformation;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRAWHID
    {
        public UInt32 dwSizeHid;
        public UInt32 dwCount;
        public fixed byte bRawData[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRAWINPUT
    {
        public tagRAWINPUTHEADER header;
        public tagRAWINPUT__bindgen_ty_1 data;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagRAWINPUT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagRAWMOUSE mouse;
        [FieldOffset(0)]
        public tagRAWKEYBOARD keyboard;
        [FieldOffset(0)]
        public tagRAWHID hid;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRID_DEVICE_INFO_MOUSE
    {
        public UInt32 dwId;
        public UInt32 dwNumberOfButtons;
        public UInt32 dwSampleRate;
        public int fHasHorizontalWheel;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRID_DEVICE_INFO_KEYBOARD
    {
        public UInt32 dwType;
        public UInt32 dwSubType;
        public UInt32 dwKeyboardMode;
        public UInt32 dwNumberOfFunctionKeys;
        public UInt32 dwNumberOfIndicators;
        public UInt32 dwNumberOfKeysTotal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRID_DEVICE_INFO_HID
    {
        public UInt32 dwVendorId;
        public UInt32 dwProductId;
        public UInt32 dwVersionNumber;
        public ushort usUsagePage;
        public ushort usUsage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagRID_DEVICE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagRID_DEVICE_INFO_MOUSE mouse;
        [FieldOffset(0)]
        public tagRID_DEVICE_INFO_KEYBOARD keyboard;
        [FieldOffset(0)]
        public tagRID_DEVICE_INFO_HID hid;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRAWINPUTDEVICE
    {
        public ushort usUsagePage;
        public ushort usUsage;
        public UInt32 dwFlags;
        public HWND__* hwndTarget;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRAWINPUTDEVICELIST
    {
        public void* hDevice;
        public UInt32 dwType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTER_DEVICE_INFO
    {
        public UInt32 displayOrientation;
        public void* device;
        public tagPOINTER_DEVICE_TYPE pointerDeviceType;
        public HMONITOR__* monitor;
        public UInt32 startingCursorId;
        public ushort maxActiveContacts;
        public fixed ushort productString[520];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTER_DEVICE_PROPERTY
    {
        public int logicalMin;
        public int logicalMax;
        public int physicalMin;
        public int physicalMax;
        public uint unit;
        public uint unitExponent;
        public ushort usagePageId;
        public ushort usageId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPOINTER_DEVICE_CURSOR_INFO
    {
        public uint cursorId;
        public tagPOINTER_DEVICE_CURSOR_TYPE cursor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCHANGEFILTERSTRUCT
    {
        public UInt32 cbSize;
        public UInt32 ExtStatus;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HGESTUREINFO__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagGESTUREINFO
    {
        public uint cbSize;
        public UInt32 dwFlags;
        public UInt32 dwID;
        public HWND__* hwndTarget;
        public tagPOINTS ptsLocation;
        public UInt32 dwInstanceID;
        public UInt32 dwSequenceID;
        public ulong ullArguments;
        public uint cbExtraArgs;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagGESTURECONFIG
    {
        public UInt32 dwID;
        public UInt32 dwWant;
        public UInt32 dwBlock;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagINPUT_MESSAGE_SOURCE
    {
        public tagINPUT_MESSAGE_DEVICE_TYPE deviceType;
        public tagINPUT_MESSAGE_ORIGIN_ID originId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _cpinfo
    {
        public uint MaxCharSize;
        public fixed byte DefaultChar[2];
        public fixed byte LeadByte[12];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _cpinfoexA
    {
        public uint MaxCharSize;
        public fixed byte DefaultChar[2];
        public fixed byte LeadByte[12];
        public ushort UnicodeDefaultChar;
        public uint CodePage;
        public fixed byte CodePageName[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _cpinfoexW
    {
        public uint MaxCharSize;
        public fixed byte DefaultChar[2];
        public fixed byte LeadByte[12];
        public ushort UnicodeDefaultChar;
        public uint CodePage;
        public fixed ushort CodePageName[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _numberfmtA
    {
        public uint NumDigits;
        public uint LeadingZero;
        public uint Grouping;
        public byte lpDecimalSep;
        public byte lpThousandSep;
        public uint NegativeOrder;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _numberfmtW
    {
        public uint NumDigits;
        public uint LeadingZero;
        public uint Grouping;
        public ushort lpDecimalSep;
        public ushort lpThousandSep;
        public uint NegativeOrder;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _currencyfmtA
    {
        public uint NumDigits;
        public uint LeadingZero;
        public uint Grouping;
        public byte lpDecimalSep;
        public byte lpThousandSep;
        public uint NegativeOrder;
        public uint PositiveOrder;
        public byte lpCurrencySymbol;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _currencyfmtW
    {
        public uint NumDigits;
        public uint LeadingZero;
        public uint Grouping;
        public ushort lpDecimalSep;
        public ushort lpThousandSep;
        public uint NegativeOrder;
        public uint PositiveOrder;
        public ushort lpCurrencySymbol;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _nlsversioninfo
    {
        public UInt32 dwNLSVersionInfoSize;
        public UInt32 dwNLSVersion;
        public UInt32 dwDefinedVersion;
        public UInt32 dwEffectiveId;
        public _GUID guidCustomVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _nlsversioninfoex
    {
        public UInt32 dwNLSVersionInfoSize;
        public UInt32 dwNLSVersion;
        public UInt32 dwDefinedVersion;
        public UInt32 dwEffectiveId;
        public _GUID guidCustomVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILEMUIINFO
    {
        public UInt32 dwSize;
        public UInt32 dwVersion;
        public UInt32 dwFileType;
        public fixed byte pChecksum[16];
        public fixed byte pServiceChecksum[16];
        public UInt32 dwLanguageNameOffset;
        public UInt32 dwTypeIDMainSize;
        public UInt32 dwTypeIDMainOffset;
        public UInt32 dwTypeNameMainOffset;
        public UInt32 dwTypeIDMUISize;
        public UInt32 dwTypeIDMUIOffset;
        public UInt32 dwTypeNameMUIOffset;
        public fixed byte abBuffer[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HSAVEDUILANGUAGES__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COORD
    {
        public short X;
        public short Y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SMALL_RECT
    {
        public short Left;
        public short Top;
        public short Right;
        public short Bottom;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _KEY_EVENT_RECORD
    {
        public int bKeyDown;
        public ushort wRepeatCount;
        public ushort wVirtualKeyCode;
        public ushort wVirtualScanCode;
        public _KEY_EVENT_RECORD__bindgen_ty_1 uChar;
        public UInt32 dwControlKeyState;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _KEY_EVENT_RECORD__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort UnicodeChar;
        [FieldOffset(0)]
        public byte AsciiChar;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MOUSE_EVENT_RECORD
    {
        public _COORD dwMousePosition;
        public UInt32 dwButtonState;
        public UInt32 dwControlKeyState;
        public UInt32 dwEventFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WINDOW_BUFFER_SIZE_RECORD
    {
        public _COORD dwSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MENU_EVENT_RECORD
    {
        public uint dwCommandId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FOCUS_EVENT_RECORD
    {
        public int bSetFocus;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _INPUT_RECORD
    {
        public ushort EventType;
        public _INPUT_RECORD__bindgen_ty_1 Event;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _INPUT_RECORD__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _KEY_EVENT_RECORD KeyEvent;
        [FieldOffset(0)]
        public _MOUSE_EVENT_RECORD MouseEvent;
        [FieldOffset(0)]
        public _WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        [FieldOffset(0)]
        public _MENU_EVENT_RECORD MenuEvent;
        [FieldOffset(0)]
        public _FOCUS_EVENT_RECORD FocusEvent;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CHAR_INFO
    {
        public _CHAR_INFO__bindgen_ty_1 Char;
        public ushort Attributes;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CHAR_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort UnicodeChar;
        [FieldOffset(0)]
        public byte AsciiChar;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONSOLE_FONT_INFO
    {
        public UInt32 nFont;
        public _COORD dwFontSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONSOLE_READCONSOLE_CONTROL
    {
        public UInt32 nLength;
        public UInt32 nInitialChars;
        public UInt32 dwCtrlWakeupMask;
        public UInt32 dwControlKeyState;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONSOLE_CURSOR_INFO
    {
        public UInt32 dwSize;
        public int bVisible;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONSOLE_SCREEN_BUFFER_INFO
    {
        public _COORD dwSize;
        public _COORD dwCursorPosition;
        public ushort wAttributes;
        public _SMALL_RECT srWindow;
        public _COORD dwMaximumWindowSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONSOLE_SCREEN_BUFFER_INFOEX
    {
        public UInt32 cbSize;
        public _COORD dwSize;
        public _COORD dwCursorPosition;
        public ushort wAttributes;
        public _SMALL_RECT srWindow;
        public _COORD dwMaximumWindowSize;
        public ushort wPopupAttributes;
        public int bFullscreenSupported;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ ColorTable[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONSOLE_FONT_INFOEX
    {
        public UInt32 cbSize;
        public UInt32 nFont;
        public _COORD dwFontSize;
        public uint FontFamily;
        public uint FontWeight;
        public fixed ushort FaceName[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONSOLE_SELECTION_INFO
    {
        public UInt32 dwFlags;
        public _COORD dwSelectionAnchor;
        public _SMALL_RECT srSelection;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONSOLE_HISTORY_INFO
    {
        public uint cbSize;
        public uint HistoryBufferSize;
        public uint NumberOfHistoryBuffers;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct value_entA
    {
        public byte ve_valuename;
        public UInt32 ve_valuelen;
        public ulong ve_valueptr;
        public UInt32 ve_type;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct value_entW
    {
        public ushort ve_valuename;
        public UInt32 ve_valuelen;
        public ulong ve_valueptr;
        public UInt32 ve_type;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NETRESOURCEA
    {
        public UInt32 dwScope;
        public UInt32 dwType;
        public UInt32 dwDisplayType;
        public UInt32 dwUsage;
        public byte lpLocalName;
        public byte lpRemoteName;
        public byte lpComment;
        public byte lpProvider;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NETRESOURCEW
    {
        public UInt32 dwScope;
        public UInt32 dwType;
        public UInt32 dwDisplayType;
        public UInt32 dwUsage;
        public ushort lpLocalName;
        public ushort lpRemoteName;
        public ushort lpComment;
        public ushort lpProvider;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONNECTDLGSTRUCTA
    {
        public UInt32 cbStructure;
        public HWND__* hwndOwner;
        public _NETRESOURCEA* lpConnRes;
        public UInt32 dwFlags;
        public UInt32 dwDevNum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CONNECTDLGSTRUCTW
    {
        public UInt32 cbStructure;
        public HWND__* hwndOwner;
        public _NETRESOURCEW* lpConnRes;
        public UInt32 dwFlags;
        public UInt32 dwDevNum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISCDLGSTRUCTA
    {
        public UInt32 cbStructure;
        public HWND__* hwndOwner;
        public byte lpLocalName;
        public byte lpRemoteName;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISCDLGSTRUCTW
    {
        public UInt32 cbStructure;
        public HWND__* hwndOwner;
        public ushort lpLocalName;
        public ushort lpRemoteName;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NETINFOSTRUCT
    {
        public UInt32 cbStructure;
        public UInt32 dwProviderVersion;
        public UInt32 dwStatus;
        public UInt32 dwCharacteristics;
        public ulong dwHandle;
        public ushort wNetType;
        public UInt32 dwPrinters;
        public UInt32 dwDrives;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NETCONNECTINFOSTRUCT
    {
        public UInt32 cbStructure;
        public UInt32 dwFlags;
        public UInt32 dwSpeed;
        public UInt32 dwDelay;
        public UInt32 dwOptDataSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HCONVLIST__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HCONV__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HSZ__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HDDEDATA__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCONVCONTEXT
    {
        public uint cb;
        public uint wFlags;
        public uint wCountryID;
        public int iCodePage;
        public UInt32 dwLangID;
        public UInt32 dwSecurity;
        public _SECURITY_QUALITY_OF_SERVICE qos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCONVINFO
    {
        public UInt32 cb;
        public ulong hUser;
        public HCONV__* hConvPartner;
        public HSZ__* hszSvcPartner;
        public HSZ__* hszServiceReq;
        public HSZ__* hszTopic;
        public HSZ__* hszItem;
        public uint wFmt;
        public uint wType;
        public uint wStatus;
        public uint wConvst;
        public uint wLastError;
        public HCONVLIST__* hConvList;
        public tagCONVCONTEXT ConvCtxt;
        public HWND__* hwnd;
        public HWND__* hwndPartner;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagDDEML_MSG_HOOK_DATA
    {
        public ulong uiLo;
        public ulong uiHi;
        public UInt32 cbData;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Data[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct mmtime_tag
    {
        public uint wType;
        public mmtime_tag__bindgen_ty_1 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct mmtime_tag__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 ms;
        [FieldOffset(0)]
        public UInt32 sample;
        [FieldOffset(0)]
        public UInt32 cb;
        [FieldOffset(0)]
        public UInt32 ticks;
        [FieldOffset(0)]
        public mmtime_tag__bindgen_ty_1__bindgen_ty_1 smpte;
        [FieldOffset(0)]
        public mmtime_tag__bindgen_ty_1__bindgen_ty_2 midi;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct mmtime_tag__bindgen_ty_1__bindgen_ty_1
    {
        public byte hour;
        public byte min;
        public byte sec;
        public byte frame;
        public byte fps;
        public byte dummy;
        public fixed byte pad[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct mmtime_tag__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 songptrpos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HDRVR__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMMIO__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MMIOINFO
    {
        public UInt32 dwFlags;
        public UInt32 fccIOProc;
        public Option pIOProc;
        public uint wErrorRet;
        public HTASK__* htask;
        public Int32 cchBuffer;
        public byte* pchBuffer;
        public byte* pchNext;
        public byte* pchEndRead;
        public byte* pchEndWrite;
        public Int32 lBufOffset;
        public Int32 lDiskOffset;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ adwInfo[3];
        public UInt32 dwReserved1;
        public UInt32 dwReserved2;
        public HMMIO__* hmmio;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MMCKINFO
    {
        public UInt32 ckid;
        public UInt32 cksize;
        public UInt32 fccType;
        public UInt32 dwDataOffset;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HWAVEIN__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HWAVEOUT__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct wavehdr_tag
    {
        public byte lpData;
        public UInt32 dwBufferLength;
        public UInt32 dwBytesRecorded;
        public ulong dwUser;
        public UInt32 dwFlags;
        public UInt32 dwLoops;
        public wavehdr_tag* lpNext;
        public ulong reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWAVEOUTCAPSA
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed byte szPname[32];
        public UInt32 dwFormats;
        public ushort wChannels;
        public ushort wReserved1;
        public UInt32 dwSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWAVEOUTCAPSW
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed ushort szPname[32];
        public UInt32 dwFormats;
        public ushort wChannels;
        public ushort wReserved1;
        public UInt32 dwSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWAVEINCAPSA
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed byte szPname[32];
        public UInt32 dwFormats;
        public ushort wChannels;
        public ushort wReserved1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagWAVEINCAPSW
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed ushort szPname[32];
        public UInt32 dwFormats;
        public ushort wChannels;
        public ushort wReserved1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct waveformat_tag
    {
        public ushort wFormatTag;
        public ushort nChannels;
        public UInt32 nSamplesPerSec;
        public UInt32 nAvgBytesPerSec;
        public ushort nBlockAlign;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMIDI__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMIDIIN__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMIDIOUT__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMIDISTRM__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIDIOUTCAPSA
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed byte szPname[32];
        public ushort wTechnology;
        public ushort wVoices;
        public ushort wNotes;
        public ushort wChannelMask;
        public UInt32 dwSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIDIOUTCAPSW
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed ushort szPname[32];
        public ushort wTechnology;
        public ushort wVoices;
        public ushort wNotes;
        public ushort wChannelMask;
        public UInt32 dwSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIDIINCAPSA
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed byte szPname[32];
        public UInt32 dwSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIDIINCAPSW
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed ushort szPname[32];
        public UInt32 dwSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct midihdr_tag
    {
        public byte lpData;
        public UInt32 dwBufferLength;
        public UInt32 dwBytesRecorded;
        public ulong dwUser;
        public UInt32 dwFlags;
        public midihdr_tag* lpNext;
        public ulong reserved;
        public UInt32 dwOffset;
        public fixed ulong dwReserved[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagAUXCAPSA
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed byte szPname[32];
        public ushort wTechnology;
        public ushort wReserved1;
        public UInt32 dwSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagAUXCAPSW
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed ushort szPname[32];
        public ushort wTechnology;
        public ushort wReserved1;
        public UInt32 dwSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMIXEROBJ__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HMIXER__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERCAPSA
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed byte szPname[32];
        public UInt32 fdwSupport;
        public UInt32 cDestinations;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERCAPSW
    {
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed ushort szPname[32];
        public UInt32 fdwSupport;
        public UInt32 cDestinations;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERLINEA
    {
        public UInt32 cbStruct;
        public UInt32 dwDestination;
        public UInt32 dwSource;
        public UInt32 dwLineID;
        public UInt32 fdwLine;
        public ulong dwUser;
        public UInt32 dwComponentType;
        public UInt32 cChannels;
        public UInt32 cConnections;
        public UInt32 cControls;
        public fixed byte szShortName[16];
        public fixed byte szName[64];
        public tagMIXERLINEA__bindgen_ty_1 Target;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERLINEA__bindgen_ty_1
    {
        public UInt32 dwType;
        public UInt32 dwDeviceID;
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed byte szPname[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERLINEW
    {
        public UInt32 cbStruct;
        public UInt32 dwDestination;
        public UInt32 dwSource;
        public UInt32 dwLineID;
        public UInt32 fdwLine;
        public ulong dwUser;
        public UInt32 dwComponentType;
        public UInt32 cChannels;
        public UInt32 cConnections;
        public UInt32 cControls;
        public fixed ushort szShortName[16];
        public fixed ushort szName[64];
        public tagMIXERLINEW__bindgen_ty_1 Target;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERLINEW__bindgen_ty_1
    {
        public UInt32 dwType;
        public UInt32 dwDeviceID;
        public ushort wMid;
        public ushort wPid;
        public uint vDriverVersion;
        public fixed ushort szPname[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERCONTROLA
    {
        public UInt32 cbStruct;
        public UInt32 dwControlID;
        public UInt32 dwControlType;
        public UInt32 fdwControl;
        public UInt32 cMultipleItems;
        public fixed byte szShortName[16];
        public fixed byte szName[64];
        public tagMIXERCONTROLA__bindgen_ty_1 Bounds;
        public tagMIXERCONTROLA__bindgen_ty_2 Metrics;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagMIXERCONTROLA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagMIXERCONTROLA__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public tagMIXERCONTROLA__bindgen_ty_1__bindgen_ty_2 __bindgen_anon_2;
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ dwReserved[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERCONTROLA__bindgen_ty_1__bindgen_ty_1
    {
        public Int32 lMinimum;
        public Int32 lMaximum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERCONTROLA__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 dwMinimum;
        public UInt32 dwMaximum;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagMIXERCONTROLA__bindgen_ty_2
    {
        [FieldOffset(0)]
        public UInt32 cSteps;
        [FieldOffset(0)]
        public UInt32 cbCustomData;
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ dwReserved[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERCONTROLW
    {
        public UInt32 cbStruct;
        public UInt32 dwControlID;
        public UInt32 dwControlType;
        public UInt32 fdwControl;
        public UInt32 cMultipleItems;
        public fixed ushort szShortName[16];
        public fixed ushort szName[64];
        public tagMIXERCONTROLW__bindgen_ty_1 Bounds;
        public tagMIXERCONTROLW__bindgen_ty_2 Metrics;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagMIXERCONTROLW__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagMIXERCONTROLW__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public tagMIXERCONTROLW__bindgen_ty_1__bindgen_ty_2 __bindgen_anon_2;
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ dwReserved[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERCONTROLW__bindgen_ty_1__bindgen_ty_1
    {
        public Int32 lMinimum;
        public Int32 lMaximum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERCONTROLW__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 dwMinimum;
        public UInt32 dwMaximum;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagMIXERCONTROLW__bindgen_ty_2
    {
        [FieldOffset(0)]
        public UInt32 cSteps;
        [FieldOffset(0)]
        public UInt32 cbCustomData;
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ dwReserved[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERLINECONTROLSA
    {
        public UInt32 cbStruct;
        public UInt32 dwLineID;
        public tagMIXERLINECONTROLSA__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 cControls;
        public UInt32 cbmxctrl;
        public tagMIXERCONTROLA* pamxctrl;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagMIXERLINECONTROLSA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 dwControlID;
        [FieldOffset(0)]
        public UInt32 dwControlType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMIXERLINECONTROLSW
    {
        public UInt32 cbStruct;
        public UInt32 dwLineID;
        public tagMIXERLINECONTROLSW__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 cControls;
        public UInt32 cbmxctrl;
        public tagMIXERCONTROLW* pamxctrl;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagMIXERLINECONTROLSW__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 dwControlID;
        [FieldOffset(0)]
        public UInt32 dwControlType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tMIXERCONTROLDETAILS
    {
        public UInt32 cbStruct;
        public UInt32 dwControlID;
        public UInt32 cChannels;
        public tMIXERCONTROLDETAILS__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 cbDetails;
        public void* paDetails;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tMIXERCONTROLDETAILS__bindgen_ty_1
    {
        [FieldOffset(0)]
        public HWND__* hwndOwner;
        [FieldOffset(0)]
        public UInt32 cMultipleItems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct timecaps_tag
    {
        public uint wPeriodMin;
        public uint wPeriodMax;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagJOYCAPSA
    {
        public ushort wMid;
        public ushort wPid;
        public fixed byte szPname[32];
        public uint wXmin;
        public uint wXmax;
        public uint wYmin;
        public uint wYmax;
        public uint wZmin;
        public uint wZmax;
        public uint wNumButtons;
        public uint wPeriodMin;
        public uint wPeriodMax;
        public uint wRmin;
        public uint wRmax;
        public uint wUmin;
        public uint wUmax;
        public uint wVmin;
        public uint wVmax;
        public uint wCaps;
        public uint wMaxAxes;
        public uint wNumAxes;
        public uint wMaxButtons;
        public fixed byte szRegKey[32];
        public fixed byte szOEMVxD[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagJOYCAPSW
    {
        public ushort wMid;
        public ushort wPid;
        public fixed ushort szPname[32];
        public uint wXmin;
        public uint wXmax;
        public uint wYmin;
        public uint wYmax;
        public uint wZmin;
        public uint wZmax;
        public uint wNumButtons;
        public uint wPeriodMin;
        public uint wPeriodMax;
        public uint wRmin;
        public uint wRmax;
        public uint wUmin;
        public uint wUmax;
        public uint wVmin;
        public uint wVmax;
        public uint wCaps;
        public uint wMaxAxes;
        public uint wNumAxes;
        public uint wMaxButtons;
        public fixed ushort szRegKey[32];
        public fixed ushort szOEMVxD[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct joyinfo_tag
    {
        public uint wXpos;
        public uint wYpos;
        public uint wZpos;
        public uint wButtons;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct joyinfoex_tag
    {
        public UInt32 dwSize;
        public UInt32 dwFlags;
        public UInt32 dwXpos;
        public UInt32 dwYpos;
        public UInt32 dwZpos;
        public UInt32 dwRpos;
        public UInt32 dwUpos;
        public UInt32 dwVpos;
        public UInt32 dwButtons;
        public UInt32 dwButtonNumber;
        public UInt32 dwPOV;
        public UInt32 dwReserved1;
        public UInt32 dwReserved2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NCB
    {
        public byte ncb_command;
        public byte ncb_retcode;
        public byte ncb_lsn;
        public byte ncb_num;
        public byte ncb_buffer;
        public ushort ncb_length;
        public fixed byte ncb_callname[16];
        public fixed byte ncb_name[16];
        public byte ncb_rto;
        public byte ncb_sto;
        public Option ncb_post;
        public byte ncb_lana_num;
        public byte ncb_cmd_cplt;
        public fixed byte ncb_reserve[18];
        public void* ncb_event;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_BINDING_VECTOR
    {
        public UInt32 Count;
        public fixed byte/* I_RPC_HANDLE, this length is invalid so must keep pointer and can't edit from C# */ BindingH[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _UUID_VECTOR
    {
        public UInt32 Count;
        public fixed byte/* _GUID, this length is invalid so must keep pointer and can't edit from C# */ Uuid[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_IF_ID
    {
        public _GUID Uuid;
        public ushort VersMajor;
        public ushort VersMinor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_PROTSEQ_VECTORA
    {
        public uint Count;
        public fixed byte Protseq[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_PROTSEQ_VECTORW
    {
        public uint Count;
        public fixed ushort Protseq[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_POLICY
    {
        public uint Length;
        public UInt32 EndpointFlags;
        public UInt32 NICFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RPC_STATS_VECTOR
    {
        public uint Count;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Stats[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RPC_IF_ID_VECTOR
    {
        public UInt32 Count;
        public fixed byte/* _RPC_IF_ID, this length is invalid so must keep pointer and can't edit from C# */ IfId[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_SECURITY_QOS
    {
        public UInt32 Version;
        public UInt32 Capabilities;
        public UInt32 IdentityTracking;
        public UInt32 ImpersonationType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SEC_WINNT_AUTH_IDENTITY_W
    {
        public ushort* User;
        public UInt32 UserLength;
        public ushort* Domain;
        public UInt32 DomainLength;
        public ushort* Password;
        public UInt32 PasswordLength;
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SEC_WINNT_AUTH_IDENTITY_A
    {
        public byte* User;
        public UInt32 UserLength;
        public byte* Domain;
        public UInt32 DomainLength;
        public byte* Password;
        public UInt32 PasswordLength;
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
    {
        public _SEC_WINNT_AUTH_IDENTITY_W* TransportCredentials;
        public UInt32 Flags;
        public UInt32 AuthenticationTarget;
        public UInt32 NumberOfAuthnSchemes;
        public UInt32* AuthnSchemes;
        public ushort* ServerCertificateSubject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
    {
        public _SEC_WINNT_AUTH_IDENTITY_A* TransportCredentials;
        public UInt32 Flags;
        public UInt32 AuthenticationTarget;
        public UInt32 NumberOfAuthnSchemes;
        public UInt32* AuthnSchemes;
        public byte* ServerCertificateSubject;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_SECURITY_QOS_V2_W__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_SECURITY_QOS_V2_A__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_SECURITY_QOS_V3_W__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_SECURITY_QOS_V3_A__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_SECURITY_QOS_V4_W__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_SECURITY_QOS_V4_A__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_SECURITY_QOS_V5_W__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _RPC_HTTP_TRANSPORT_CREDENTIALS_W* HttpCredentials;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_SECURITY_QOS_V5_A__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _RPC_HTTP_TRANSPORT_CREDENTIALS_A* HttpCredentials;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W
    {
        public UInt32 Version;
        public UInt32 Flags;
        public UInt32 ProtocolSequence;
        public ushort* NetworkAddress;
        public ushort* StringEndpoint;
        public _RPC_BINDING_HANDLE_TEMPLATE_V1_W__bindgen_ty_1 u1;
        public _GUID ObjectUuid;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort* Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A
    {
        public UInt32 Version;
        public UInt32 Flags;
        public UInt32 ProtocolSequence;
        public byte* NetworkAddress;
        public byte* StringEndpoint;
        public _RPC_BINDING_HANDLE_TEMPLATE_V1_A__bindgen_ty_1 u1;
        public _GUID ObjectUuid;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte* Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_BINDING_HANDLE_SECURITY_V1_W
    {
        public UInt32 Version;
        public ushort* ServerPrincName;
        public UInt32 AuthnLevel;
        public UInt32 AuthnSvc;
        public _SEC_WINNT_AUTH_IDENTITY_W* AuthIdentity;
        public _RPC_SECURITY_QOS* SecurityQos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_BINDING_HANDLE_SECURITY_V1_A
    {
        public UInt32 Version;
        public byte* ServerPrincName;
        public UInt32 AuthnLevel;
        public UInt32 AuthnSvc;
        public _SEC_WINNT_AUTH_IDENTITY_A* AuthIdentity;
        public _RPC_SECURITY_QOS* SecurityQos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_BINDING_HANDLE_OPTIONS_V1
    {
        public UInt32 Version;
        public UInt32 Flags;
        public UInt32 ComTimeout;
        public UInt32 CallTimeout;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RPC_ENDPOINT_TEMPLATEW
    {
        public UInt32 Version;
        public ushort* ProtSeq;
        public ushort* Endpoint;
        public void* SecurityDescriptor;
        public UInt32 Backlog;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RPC_ENDPOINT_TEMPLATEA
    {
        public UInt32 Version;
        public byte* ProtSeq;
        public byte* Endpoint;
        public void* SecurityDescriptor;
        public UInt32 Backlog;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RPC_INTERFACE_TEMPLATEA
    {
        public UInt32 Version;
        public void* IfSpec;
        public _GUID* MgrTypeUuid;
        public void* MgrEpv;
        public uint Flags;
        public uint MaxCalls;
        public uint MaxRpcSize;
        public Option IfCallback;
        public _UUID_VECTOR* UuidVector;
        public byte* Annotation;
        public void* SecurityDescriptor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RPC_INTERFACE_TEMPLATEW
    {
        public UInt32 Version;
        public void* IfSpec;
        public _GUID* MgrTypeUuid;
        public void* MgrEpv;
        public uint Flags;
        public uint MaxCalls;
        public uint MaxRpcSize;
        public Option IfCallback;
        public _UUID_VECTOR* UuidVector;
        public ushort* Annotation;
        public void* SecurityDescriptor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_VERSION
    {
        public ushort MajorVersion;
        public ushort MinorVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_SYNTAX_IDENTIFIER
    {
        public _GUID SyntaxGUID;
        public _RPC_VERSION SyntaxVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_MESSAGE
    {
        public I_RPC_HANDLE Handle;
        public UInt32 DataRepresentation;
        public void* Buffer;
        public uint BufferLength;
        public uint ProcNum;
        public _RPC_SYNTAX_IDENTIFIER* TransferSyntax;
        public void* RpcInterfaceInformation;
        public void* ReservedForRuntime;
        public void* ManagerEpv;
        public void* ImportContext;
        public UInt32 RpcFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RPC_DISPATCH_TABLE
    {
        public uint DispatchTableCount;
        public Option* DispatchTable;
        public long Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_PROTSEQ_ENDPOINT
    {
        public byte* RpcProtocolSequence;
        public byte* Endpoint;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_SERVER_INTERFACE
    {
        public uint Length;
        public _RPC_SYNTAX_IDENTIFIER InterfaceId;
        public _RPC_SYNTAX_IDENTIFIER TransferSyntax;
        public RPC_DISPATCH_TABLE* DispatchTable;
        public uint RpcProtseqEndpointCount;
        public _RPC_PROTSEQ_ENDPOINT* RpcProtseqEndpoint;
        public void* DefaultManagerEpv;
        public void* InterpreterInfo;
        public uint Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_CLIENT_INTERFACE
    {
        public uint Length;
        public _RPC_SYNTAX_IDENTIFIER InterfaceId;
        public _RPC_SYNTAX_IDENTIFIER TransferSyntax;
        public RPC_DISPATCH_TABLE* DispatchTable;
        public uint RpcProtseqEndpointCount;
        public _RPC_PROTSEQ_ENDPOINT* RpcProtseqEndpoint;
        public ulong Reserved;
        public void* InterpreterInfo;
        public uint Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_TRANSFER_SYNTAX
    {
        public _GUID Uuid;
        public ushort VersMajor;
        public ushort VersMinor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RDR_CALLOUT_STATE
    {
        public Int32 LastError;
        public void* LastEEInfo;
        public _RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;
        public ushort* ServerName;
        public ushort* ServerPort;
        public ushort* RemoteUser;
        public ushort* AuthType;
        public byte ResourceTypePresent;
        public byte SessionIdPresent;
        public byte InterfacePresent;
        public _GUID ResourceType;
        public _GUID SessionId;
        public _RPC_SYNTAX_IDENTIFIER Interface;
        public void* CertContext;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagI_RpcProxyCallbackInterface
    {
        public Option IsValidMachineFn;
        public Option GetClientAddressFn;
        public Option GetConnectionTimeoutFn;
        public Option PerformCalloutFn;
        public Option FreeCalloutStateFn;
        public Option GetClientSessionAndResourceUUIDFn;
        public Option ProxyFilterIfFn;
        public Option RpcProxyUpdatePerfCounterFn;
        public Option RpcProxyUpdatePerfCounterBackendServerFn;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RPC_ASYNC_NOTIFICATION_INFO
    {
        [FieldOffset(0)]
        public _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_1 APC;
        [FieldOffset(0)]
        public _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_2 IOC;
        [FieldOffset(0)]
        public _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_3 HWND;
        [FieldOffset(0)]
        public void* hEvent;
        [FieldOffset(0)]
        public Option NotificationRoutine;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_1
    {
        public Option NotificationRoutine;
        public void* hThread;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_2
    {
        public void* hIOPort;
        public UInt32 dwNumberOfBytesTransferred;
        public ulong dwCompletionKey;
        public _OVERLAPPED* lpOverlapped;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_ASYNC_NOTIFICATION_INFO__bindgen_ty_3
    {
        public HWND__* hWnd;
        public uint Msg;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_ASYNC_STATE
    {
        public uint Size;
        public UInt32 Signature;
        public Int32 Lock;
        public UInt32 Flags;
        public void* StubInfo;
        public void* UserInfo;
        public void* RuntimeInfo;
        public _RPC_ASYNC_EVENT Event;
        public _RPC_NOTIFICATION_TYPES NotificationType;
        public _RPC_ASYNC_NOTIFICATION_INFO u;
        public fixed long Reserved[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBinaryParam
    {
        public void* Buffer;
        public short Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRPC_EE_INFO_PARAM
    {
        public tagExtendedErrorParamTypes ParameterType;
        public tagRPC_EE_INFO_PARAM__bindgen_ty_1 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagRPC_EE_INFO_PARAM__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte AnsiString;
        [FieldOffset(0)]
        public ushort UnicodeString;
        [FieldOffset(0)]
        public Int32 LVal;
        [FieldOffset(0)]
        public short SVal;
        [FieldOffset(0)]
        public ulong PVal;
        [FieldOffset(0)]
        public tagBinaryParam BVal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRPC_EXTENDED_ERROR_INFO
    {
        public UInt32 Version;
        public ushort ComputerName;
        public UInt32 ProcessID;
        public tagRPC_EXTENDED_ERROR_INFO__bindgen_ty_1 u;
        public UInt32 GeneratingComponent;
        public UInt32 Status;
        public ushort DetectionLocation;
        public ushort Flags;
        public int NumberOfParameters;
        public fixed byte/* tagRPC_EE_INFO_PARAM, this length is invalid so must keep pointer and can't edit from C# */ Parameters[4];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagRPC_EXTENDED_ERROR_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _SYSTEMTIME SystemTime;
        [FieldOffset(0)]
        public _FILETIME FileTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRPC_ERROR_ENUM_HANDLE
    {
        public UInt32 Signature;
        public void* CurrentPos;
        public void* Head;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _RPC_CALL_LOCAL_ADDRESS_V1
    {
        public uint Version;
        public void* Buffer;
        public UInt32 BufferSize;
        public tagRpcLocalAddressFormat AddressFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HDROP__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _AppBarData
    {
        public UInt32 cbSize;
        public HWND__* hWnd;
        public uint uCallbackMessage;
        public uint uEdge;
        public tagRECT rc;
        public long lParam;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHFILEOPSTRUCTA
    {
        public HWND__* hwnd;
        public uint wFunc;
        public byte pFrom;
        public byte pTo;
        public ushort fFlags;
        public int fAnyOperationsAborted;
        public void* hNameMappings;
        public byte lpszProgressTitle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHFILEOPSTRUCTW
    {
        public HWND__* hwnd;
        public uint wFunc;
        public ushort pFrom;
        public ushort pTo;
        public ushort fFlags;
        public int fAnyOperationsAborted;
        public void* hNameMappings;
        public ushort lpszProgressTitle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHELLEXECUTEINFOA
    {
        public UInt32 cbSize;
        public UInt32 fMask;
        public HWND__* hwnd;
        public byte lpVerb;
        public byte lpFile;
        public byte lpParameters;
        public byte lpDirectory;
        public int nShow;
        public HINSTANCE__* hInstApp;
        public void* lpIDList;
        public byte lpClass;
        public HKEY__* hkeyClass;
        public UInt32 dwHotKey;
        public _SHELLEXECUTEINFOA__bindgen_ty_1 __bindgen_anon_1;
        public void* hProcess;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SHELLEXECUTEINFOA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public void* hIcon;
        [FieldOffset(0)]
        public void* hMonitor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHELLEXECUTEINFOW
    {
        public UInt32 cbSize;
        public UInt32 fMask;
        public HWND__* hwnd;
        public ushort lpVerb;
        public ushort lpFile;
        public ushort lpParameters;
        public ushort lpDirectory;
        public int nShow;
        public HINSTANCE__* hInstApp;
        public void* lpIDList;
        public ushort lpClass;
        public HKEY__* hkeyClass;
        public UInt32 dwHotKey;
        public _SHELLEXECUTEINFOW__bindgen_ty_1 __bindgen_anon_1;
        public void* hProcess;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SHELLEXECUTEINFOW__bindgen_ty_1
    {
        [FieldOffset(0)]
        public void* hIcon;
        [FieldOffset(0)]
        public void* hMonitor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHCREATEPROCESSINFOW
    {
        public UInt32 cbSize;
        public UInt32 fMask;
        public HWND__* hwnd;
        public ushort pszFile;
        public ushort pszParameters;
        public ushort pszCurrentDirectory;
        public void* hUserToken;
        public _SECURITY_ATTRIBUTES* lpProcessAttributes;
        public _SECURITY_ATTRIBUTES* lpThreadAttributes;
        public int bInheritHandles;
        public UInt32 dwCreationFlags;
        public _STARTUPINFOW* lpStartupInfo;
        public _PROCESS_INFORMATION* lpProcessInformation;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ASSOCIATIONELEMENT
    {
        public int ac;
        public HKEY__* hkClass;
        public ushort pszClass;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHQUERYRBINFO
    {
        public UInt32 cbSize;
        public long i64Size;
        public long i64NumItems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NOTIFYICONDATAA
    {
        public UInt32 cbSize;
        public HWND__* hWnd;
        public uint uID;
        public uint uFlags;
        public uint uCallbackMessage;
        public HICON__* hIcon;
        public fixed byte szTip[128];
        public UInt32 dwState;
        public UInt32 dwStateMask;
        public fixed byte szInfo[256];
        public _NOTIFYICONDATAA__bindgen_ty_1 __bindgen_anon_1;
        public fixed byte szInfoTitle[64];
        public UInt32 dwInfoFlags;
        public _GUID guidItem;
        public HICON__* hBalloonIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _NOTIFYICONDATAA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public uint uTimeout;
        [FieldOffset(0)]
        public uint uVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NOTIFYICONDATAW
    {
        public UInt32 cbSize;
        public HWND__* hWnd;
        public uint uID;
        public uint uFlags;
        public uint uCallbackMessage;
        public HICON__* hIcon;
        public fixed ushort szTip[128];
        public UInt32 dwState;
        public UInt32 dwStateMask;
        public fixed ushort szInfo[256];
        public _NOTIFYICONDATAW__bindgen_ty_1 __bindgen_anon_1;
        public fixed ushort szInfoTitle[64];
        public UInt32 dwInfoFlags;
        public _GUID guidItem;
        public HICON__* hBalloonIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _NOTIFYICONDATAW__bindgen_ty_1
    {
        [FieldOffset(0)]
        public uint uTimeout;
        [FieldOffset(0)]
        public uint uVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NOTIFYICONIDENTIFIER
    {
        public UInt32 cbSize;
        public HWND__* hWnd;
        public uint uID;
        public _GUID guidItem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHFILEINFOA
    {
        public HICON__* hIcon;
        public int iIcon;
        public UInt32 dwAttributes;
        public fixed byte szDisplayName[260];
        public fixed byte szTypeName[80];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHFILEINFOW
    {
        public HICON__* hIcon;
        public int iIcon;
        public UInt32 dwAttributes;
        public fixed ushort szDisplayName[260];
        public fixed ushort szTypeName[80];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHSTOCKICONINFO
    {
        public UInt32 cbSize;
        public HICON__* hIcon;
        public int iSysImageIndex;
        public int iIcon;
        public fixed ushort szPath[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PUBLICKEYSTRUC
    {
        public byte bType;
        public byte bVersion;
        public ushort reserved;
        public uint aiKeyAlg;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DSSSEED
    {
        public UInt32 counter;
        public fixed byte seed[20];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPTOAPI_BLOB
    {
        public UInt32 cbData;
        public byte* pbData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BCRYPT_OID
    {
        public UInt32 cbOID;
        public byte pbOID;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BCryptBuffer
    {
        public UInt32 cbBuffer;
        public UInt32 BufferType;
        public void* pvBuffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BCryptBufferDesc
    {
        public UInt32 ulVersion;
        public UInt32 cBuffers;
        public _BCryptBuffer* pBuffers;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BCRYPT_ALGORITHM_IDENTIFIER
    {
        public ushort pszName;
        public UInt32 dwClass;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BCRYPT_PROVIDER_NAME
    {
        public ushort pszProviderName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_INTERFACE_REG
    {
        public UInt32 dwInterface;
        public UInt32 dwFlags;
        public UInt32 cFunctions;
        public ushort* rgpszFunctions;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_IMAGE_REG
    {
        public ushort pszImage;
        public UInt32 cInterfaces;
        public _CRYPT_INTERFACE_REG** rgpInterfaces;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_PROVIDER_REG
    {
        public UInt32 cAliases;
        public ushort* rgpszAliases;
        public _CRYPT_IMAGE_REG* pUM;
        public _CRYPT_IMAGE_REG* pKM;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_PROVIDERS
    {
        public UInt32 cProviders;
        public ushort* rgpszProviders;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_CONTEXT_CONFIG
    {
        public UInt32 dwFlags;
        public UInt32 dwReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_CONTEXT_FUNCTION_CONFIG
    {
        public UInt32 dwFlags;
        public UInt32 dwReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_CONTEXTS
    {
        public UInt32 cContexts;
        public ushort* rgpszContexts;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_CONTEXT_FUNCTIONS
    {
        public UInt32 cFunctions;
        public ushort* rgpszFunctions;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
    {
        public UInt32 cProviders;
        public ushort* rgpszProviders;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_PROPERTY_REF
    {
        public ushort pszProperty;
        public UInt32 cbValue;
        public byte pbValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_IMAGE_REF
    {
        public ushort pszImage;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_PROVIDER_REF
    {
        public UInt32 dwInterface;
        public ushort pszFunction;
        public ushort pszProvider;
        public UInt32 cProperties;
        public _CRYPT_PROPERTY_REF** rgpProperties;
        public _CRYPT_IMAGE_REF* pUM;
        public _CRYPT_IMAGE_REF* pKM;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_PROVIDER_REFS
    {
        public UInt32 cProviders;
        public _CRYPT_PROVIDER_REF** rgpProviders;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NCRYPT_EXPORTED_ISOLATED_KEY_HEADER
    {
        public UInt32 Version;
        public UInt32 KeyUsage;
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public UInt32 cbAlgName;
        public UInt32 cbNonce;
        public UInt32 cbAuthTag;
        public UInt32 cbWrappingKey;
        public UInt32 cbIsolatedKey;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NCryptAlgorithmName
    {
        public ushort pszName;
        public UInt32 dwClass;
        public UInt32 dwAlgOperations;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct NCryptKeyName
    {
        public ushort pszName;
        public ushort pszAlgid;
        public UInt32 dwLegacyKeySpec;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct NCryptProviderName
    {
        public ushort pszName;
        public ushort pszComment;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_BIT_BLOB
    {
        public UInt32 cbData;
        public byte* pbData;
        public UInt32 cUnusedBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_ALGORITHM_IDENTIFIER
    {
        public byte pszObjId;
        public _CRYPTOAPI_BLOB Parameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_EXTENSION
    {
        public byte pszObjId;
        public int fCritical;
        public _CRYPTOAPI_BLOB Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_ATTRIBUTE_TYPE_VALUE
    {
        public byte pszObjId;
        public _CRYPTOAPI_BLOB Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_ATTRIBUTE
    {
        public byte pszObjId;
        public UInt32 cValue;
        public _CRYPTOAPI_BLOB* rgValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_ATTRIBUTES
    {
        public UInt32 cAttr;
        public _CRYPT_ATTRIBUTE* rgAttr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_RDN_ATTR
    {
        public byte pszObjId;
        public UInt32 dwValueType;
        public _CRYPTOAPI_BLOB Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_RDN
    {
        public UInt32 cRDNAttr;
        public _CERT_RDN_ATTR* rgRDNAttr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_NAME_INFO
    {
        public UInt32 cRDN;
        public _CERT_RDN* rgRDN;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_PUBLIC_KEY_INFO
    {
        public _CRYPT_ALGORITHM_IDENTIFIER Algorithm;
        public _CRYPT_BIT_BLOB PublicKey;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_PKCS8_IMPORT_PARAMS
    {
        public _CRYPTOAPI_BLOB PrivateKey;
        public Option pResolvehCryptProvFunc;
        public void* pVoidResolveFunc;
        public Option pDecryptPrivateKeyFunc;
        public void* pVoidDecryptFunc;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_PKCS8_EXPORT_PARAMS
    {
        public ulong hCryptProv;
        public UInt32 dwKeySpec;
        public byte pszPrivateKeyObjId;
        public Option pEncryptPrivateKeyFunc;
        public void* pVoidEncryptFunc;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_INFO
    {
        public UInt32 dwVersion;
        public _CRYPTOAPI_BLOB SerialNumber;
        public _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
        public _CRYPTOAPI_BLOB Issuer;
        public _FILETIME NotBefore;
        public _FILETIME NotAfter;
        public _CRYPTOAPI_BLOB Subject;
        public _CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;
        public _CRYPT_BIT_BLOB IssuerUniqueId;
        public _CRYPT_BIT_BLOB SubjectUniqueId;
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRL_ENTRY
    {
        public _CRYPTOAPI_BLOB SerialNumber;
        public _FILETIME RevocationDate;
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRL_INFO
    {
        public UInt32 dwVersion;
        public _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
        public _CRYPTOAPI_BLOB Issuer;
        public _FILETIME ThisUpdate;
        public _FILETIME NextUpdate;
        public UInt32 cCRLEntry;
        public _CRL_ENTRY* rgCRLEntry;
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_OR_CRL_BLOB
    {
        public UInt32 dwChoice;
        public UInt32 cbEncoded;
        public byte* pbEncoded;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CTL_USAGE
    {
        public UInt32 cUsageIdentifier;
        public byte* rgpszUsageIdentifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CTL_ENTRY
    {
        public _CRYPTOAPI_BLOB SubjectIdentifier;
        public UInt32 cAttribute;
        public _CRYPT_ATTRIBUTE* rgAttribute;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CTL_INFO
    {
        public UInt32 dwVersion;
        public _CTL_USAGE SubjectUsage;
        public _CRYPTOAPI_BLOB ListIdentifier;
        public _CRYPTOAPI_BLOB SequenceNumber;
        public _FILETIME ThisUpdate;
        public _FILETIME NextUpdate;
        public _CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;
        public UInt32 cCTLEntry;
        public _CTL_ENTRY* rgCTLEntry;
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_ENCODE_PARA
    {
        public UInt32 cbSize;
        public Option pfnAlloc;
        public Option pfnFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_DECODE_PARA
    {
        public UInt32 cbSize;
        public Option pfnAlloc;
        public Option pfnFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_EXTENSIONS
    {
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_PRIVATE_KEY_VALIDITY
    {
        public _FILETIME NotBefore;
        public _FILETIME NotAfter;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_POLICY_ID
    {
        public UInt32 cCertPolicyElementId;
        public byte* rgpszCertPolicyElementId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_OTHER_NAME
    {
        public byte pszObjId;
        public _CRYPTOAPI_BLOB Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_ALT_NAME_ENTRY
    {
        public UInt32 dwAltNameChoice;
        public _CERT_ALT_NAME_ENTRY__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_ALT_NAME_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CERT_OTHER_NAME* pOtherName;
        [FieldOffset(0)]
        public ushort pwszRfc822Name;
        [FieldOffset(0)]
        public ushort pwszDNSName;
        [FieldOffset(0)]
        public _CRYPTOAPI_BLOB DirectoryName;
        [FieldOffset(0)]
        public ushort pwszURL;
        [FieldOffset(0)]
        public _CRYPTOAPI_BLOB IPAddress;
        [FieldOffset(0)]
        public byte pszRegisteredID;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_ALT_NAME_INFO
    {
        public UInt32 cAltEntry;
        public _CERT_ALT_NAME_ENTRY* rgAltEntry;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_POLICY_QUALIFIER_INFO
    {
        public byte pszPolicyQualifierId;
        public _CRYPTOAPI_BLOB Qualifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_POLICY_INFO
    {
        public byte pszPolicyIdentifier;
        public UInt32 cPolicyQualifier;
        public _CERT_POLICY_QUALIFIER_INFO* rgPolicyQualifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_POLICIES_INFO
    {
        public UInt32 cPolicyInfo;
        public _CERT_POLICY_INFO* rgPolicyInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE
    {
        public byte pszOrganization;
        public UInt32 cNoticeNumbers;
        public int* rgNoticeNumbers;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CPS_URLS
    {
        public ushort pszURL;
        public _CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm;
        public _CRYPTOAPI_BLOB* pDigest;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_POLICY_MAPPING
    {
        public byte pszIssuerDomainPolicy;
        public byte pszSubjectDomainPolicy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_ACCESS_DESCRIPTION
    {
        public byte pszAccessMethod;
        public _CERT_ALT_NAME_ENTRY AccessLocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRL_DIST_POINT_NAME
    {
        public UInt32 dwDistPointNameChoice;
        public _CRL_DIST_POINT_NAME__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CRL_DIST_POINT_NAME__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CERT_ALT_NAME_INFO FullName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRL_DIST_POINT
    {
        public _CRL_DIST_POINT_NAME DistPointName;
        public _CRYPT_BIT_BLOB ReasonFlags;
        public _CERT_ALT_NAME_INFO CRLIssuer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_GENERAL_SUBTREE
    {
        public _CERT_ALT_NAME_ENTRY Base;
        public UInt32 dwMinimum;
        public int fMaximum;
        public UInt32 dwMaximum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_X942_DH_VALIDATION_PARAMS
    {
        public _CRYPT_BIT_BLOB seed;
        public UInt32 pgenCounter;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_SMIME_CAPABILITY
    {
        public byte pszObjId;
        public _CRYPTOAPI_BLOB Parameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_QC_STATEMENT
    {
        public byte pszStatementId;
        public _CRYPTOAPI_BLOB StatementInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_MASK_GEN_ALGORITHM
    {
        public byte pszObjId;
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_PSOURCE_ALGORITHM
    {
        public byte pszObjId;
        public _CRYPTOAPI_BLOB EncodingParameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMC_TAGGED_ATTRIBUTE
    {
        public UInt32 dwBodyPartID;
        public _CRYPT_ATTRIBUTE Attribute;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMC_TAGGED_CERT_REQUEST
    {
        public UInt32 dwBodyPartID;
        public _CRYPTOAPI_BLOB SignedCertRequest;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMC_TAGGED_REQUEST
    {
        public UInt32 dwTaggedRequestChoice;
        public _CMC_TAGGED_REQUEST__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMC_TAGGED_REQUEST__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CMC_TAGGED_CERT_REQUEST* pTaggedCertRequest;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMC_TAGGED_CONTENT_INFO
    {
        public UInt32 dwBodyPartID;
        public _CRYPTOAPI_BLOB EncodedContentInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMC_TAGGED_OTHER_MSG
    {
        public UInt32 dwBodyPartID;
        public byte pszObjId;
        public _CRYPTOAPI_BLOB Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMC_PEND_INFO
    {
        public _CRYPTOAPI_BLOB PendToken;
        public _FILETIME PendTime;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMC_STATUS_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 dwFailInfo;
        [FieldOffset(0)]
        public _CMC_PEND_INFO* pPendInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_HASHED_URL
    {
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        public _CRYPTOAPI_BLOB Hash;
        public ushort pwszUrl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_LOGOTYPE_DETAILS
    {
        public ushort pwszMimeType;
        public UInt32 cHashedUrl;
        public _CERT_HASHED_URL* rgHashedUrl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_LOGOTYPE_REFERENCE
    {
        public UInt32 cHashedUrl;
        public _CERT_HASHED_URL* rgHashedUrl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_LOGOTYPE_IMAGE_INFO
    {
        public UInt32 dwLogotypeImageInfoChoice;
        public UInt32 dwFileSize;
        public UInt32 dwXSize;
        public UInt32 dwYSize;
        public UInt32 dwLogotypeImageResolutionChoice;
        public _CERT_LOGOTYPE_IMAGE_INFO__bindgen_ty_1 __bindgen_anon_1;
        public ushort pwszLanguage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_LOGOTYPE_IMAGE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 dwNumBits;
        [FieldOffset(0)]
        public UInt32 dwTableSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_LOGOTYPE_IMAGE
    {
        public _CERT_LOGOTYPE_DETAILS LogotypeDetails;
        public _CERT_LOGOTYPE_IMAGE_INFO* pLogotypeImageInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_LOGOTYPE_AUDIO_INFO
    {
        public UInt32 dwFileSize;
        public UInt32 dwPlayTime;
        public UInt32 dwChannels;
        public UInt32 dwSampleRate;
        public ushort pwszLanguage;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_LOGOTYPE_AUDIO
    {
        public _CERT_LOGOTYPE_DETAILS LogotypeDetails;
        public _CERT_LOGOTYPE_AUDIO_INFO* pLogotypeAudioInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_LOGOTYPE_DATA
    {
        public UInt32 cLogotypeImage;
        public _CERT_LOGOTYPE_IMAGE* rgLogotypeImage;
        public UInt32 cLogotypeAudio;
        public _CERT_LOGOTYPE_AUDIO* rgLogotypeAudio;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_LOGOTYPE_INFO
    {
        public UInt32 dwLogotypeInfoChoice;
        public _CERT_LOGOTYPE_INFO__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_LOGOTYPE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CERT_LOGOTYPE_DATA* pLogotypeDirectInfo;
        [FieldOffset(0)]
        public _CERT_LOGOTYPE_REFERENCE* pLogotypeIndirectInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_OTHER_LOGOTYPE_INFO
    {
        public byte pszObjId;
        public _CERT_LOGOTYPE_INFO LogotypeInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_BIOMETRIC_DATA
    {
        public UInt32 dwTypeOfBiometricDataChoice;
        public _CERT_BIOMETRIC_DATA__bindgen_ty_1 __bindgen_anon_1;
        public _CERT_HASHED_URL HashedUrl;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_BIOMETRIC_DATA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 dwPredefined;
        [FieldOffset(0)]
        public byte pszObjId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OCSP_SIGNATURE_INFO
    {
        public _CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;
        public _CRYPT_BIT_BLOB Signature;
        public UInt32 cCertEncoded;
        public _CRYPTOAPI_BLOB* rgCertEncoded;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OCSP_CERT_ID
    {
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        public _CRYPTOAPI_BLOB IssuerNameHash;
        public _CRYPTOAPI_BLOB IssuerKeyHash;
        public _CRYPTOAPI_BLOB SerialNumber;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OCSP_REQUEST_ENTRY
    {
        public _OCSP_CERT_ID CertId;
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OCSP_BASIC_REVOKED_INFO
    {
        public _FILETIME RevocationDate;
        public UInt32 dwCrlReasonCode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OCSP_BASIC_RESPONSE_ENTRY
    {
        public _OCSP_CERT_ID CertId;
        public UInt32 dwCertStatus;
        public _OCSP_BASIC_RESPONSE_ENTRY__bindgen_ty_1 __bindgen_anon_1;
        public _FILETIME ThisUpdate;
        public _FILETIME NextUpdate;
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _OCSP_BASIC_RESPONSE_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _OCSP_BASIC_REVOKED_INFO* pRevokedInfo;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _OCSP_BASIC_RESPONSE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CRYPTOAPI_BLOB ByNameResponderId;
        [FieldOffset(0)]
        public _CRYPTOAPI_BLOB ByKeyResponderId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_OID_FUNC_ENTRY
    {
        public byte pszOID;
        public void* pvFuncAddr;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CRYPT_OID_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 dwValue;
        [FieldOffset(0)]
        public uint Algid;
        [FieldOffset(0)]
        public UInt32 dwLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_STRONG_SIGN_SERIALIZED_INFO
    {
        public UInt32 dwFlags;
        public ushort pwszCNGSignHashAlgids;
        public ushort pwszCNGPubKeyMinBitLengths;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_STRONG_SIGN_PARA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public void* pvInfo;
        [FieldOffset(0)]
        public _CERT_STRONG_SIGN_SERIALIZED_INFO* pSerializedInfo;
        [FieldOffset(0)]
        public byte pszOID;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_ISSUER_SERIAL_NUMBER
    {
        public _CRYPTOAPI_BLOB Issuer;
        public _CRYPTOAPI_BLOB SerialNumber;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_ID
    {
        public UInt32 dwIdChoice;
        public _CERT_ID__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_ID__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;
        [FieldOffset(0)]
        public _CRYPTOAPI_BLOB KeyId;
        [FieldOffset(0)]
        public _CRYPTOAPI_BLOB HashId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_SIGNER_ENCODE_INFO
    {
        public UInt32 cbSize;
        public _CERT_INFO* pCertInfo;
        public _CMSG_SIGNER_ENCODE_INFO__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 dwKeySpec;
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        public void* pvHashAuxInfo;
        public UInt32 cAuthAttr;
        public _CRYPT_ATTRIBUTE* rgAuthAttr;
        public UInt32 cUnauthAttr;
        public _CRYPT_ATTRIBUTE* rgUnauthAttr;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_SIGNER_ENCODE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hCryptProv;
        [FieldOffset(0)]
        public ulong hNCryptKey;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_SIGNED_ENCODE_INFO
    {
        public UInt32 cbSize;
        public UInt32 cSigners;
        public _CMSG_SIGNER_ENCODE_INFO* rgSigners;
        public UInt32 cCertEncoded;
        public _CRYPTOAPI_BLOB* rgCertEncoded;
        public UInt32 cCrlEncoded;
        public _CRYPTOAPI_BLOB* rgCrlEncoded;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_ENVELOPED_ENCODE_INFO
    {
        public UInt32 cbSize;
        public ulong hCryptProv;
        public _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
        public void* pvEncryptionAuxInfo;
        public UInt32 cRecipients;
        public _CERT_INFO** rgpRecipients;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO
    {
        public UInt32 cbSize;
        public _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        public void* pvKeyEncryptionAuxInfo;
        public ulong hCryptProv;
        public _CRYPT_BIT_BLOB RecipientPublicKey;
        public _CERT_ID RecipientId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO
    {
        public UInt32 cbSize;
        public _CRYPT_BIT_BLOB RecipientPublicKey;
        public _CERT_ID RecipientId;
        public _FILETIME Date;
        public _CRYPT_ATTRIBUTE_TYPE_VALUE* pOtherAttr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO
    {
        public UInt32 cbSize;
        public _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        public void* pvKeyEncryptionAuxInfo;
        public _CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;
        public void* pvKeyWrapAuxInfo;
        public ulong hCryptProv;
        public UInt32 dwKeySpec;
        public UInt32 dwKeyChoice;
        public _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO__bindgen_ty_1 __bindgen_anon_1;
        public _CRYPTOAPI_BLOB UserKeyingMaterial;
        public UInt32 cRecipientEncryptedKeys;
        public _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO** rgpRecipientEncryptedKeys;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CRYPT_ALGORITHM_IDENTIFIER* pEphemeralAlgorithm;
        [FieldOffset(0)]
        public _CERT_ID* pSenderId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO
    {
        public UInt32 cbSize;
        public _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        public void* pvKeyEncryptionAuxInfo;
        public ulong hCryptProv;
        public UInt32 dwKeyChoice;
        public _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO__bindgen_ty_1 __bindgen_anon_1;
        public _CRYPTOAPI_BLOB KeyId;
        public _FILETIME Date;
        public _CRYPT_ATTRIBUTE_TYPE_VALUE* pOtherAttr;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hKeyEncryptionKey;
        [FieldOffset(0)]
        public void* pvKeyEncryptionKey;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_RECIPIENT_ENCODE_INFO
    {
        public UInt32 dwRecipientChoice;
        public _CMSG_RECIPIENT_ENCODE_INFO__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_RECIPIENT_ENCODE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO* pKeyTrans;
        [FieldOffset(0)]
        public _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO* pKeyAgree;
        [FieldOffset(0)]
        public _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO* pMailList;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_STREAM_INFO
    {
        public UInt32 cbContent;
        public Option pfnStreamOutput;
        public void* pvArg;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_SIGNER_INFO
    {
        public UInt32 dwVersion;
        public _CRYPTOAPI_BLOB Issuer;
        public _CRYPTOAPI_BLOB SerialNumber;
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        public _CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;
        public _CRYPTOAPI_BLOB EncryptedHash;
        public _CRYPT_ATTRIBUTES AuthAttrs;
        public _CRYPT_ATTRIBUTES UnauthAttrs;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_KEY_TRANS_RECIPIENT_INFO
    {
        public UInt32 dwVersion;
        public _CERT_ID RecipientId;
        public _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        public _CRYPTOAPI_BLOB EncryptedKey;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO
    {
        public _CERT_ID RecipientId;
        public _CRYPTOAPI_BLOB EncryptedKey;
        public _FILETIME Date;
        public _CRYPT_ATTRIBUTE_TYPE_VALUE* pOtherAttr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_KEY_AGREE_RECIPIENT_INFO
    {
        public UInt32 dwVersion;
        public UInt32 dwOriginatorChoice;
        public _CMSG_KEY_AGREE_RECIPIENT_INFO__bindgen_ty_1 __bindgen_anon_1;
        public _CRYPTOAPI_BLOB UserKeyingMaterial;
        public _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        public UInt32 cRecipientEncryptedKeys;
        public _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO** rgpRecipientEncryptedKeys;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_KEY_AGREE_RECIPIENT_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CERT_ID OriginatorCertId;
        [FieldOffset(0)]
        public _CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_MAIL_LIST_RECIPIENT_INFO
    {
        public UInt32 dwVersion;
        public _CRYPTOAPI_BLOB KeyId;
        public _CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;
        public _CRYPTOAPI_BLOB EncryptedKey;
        public _FILETIME Date;
        public _CRYPT_ATTRIBUTE_TYPE_VALUE* pOtherAttr;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_CMS_RECIPIENT_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CMSG_KEY_TRANS_RECIPIENT_INFO* pKeyTrans;
        [FieldOffset(0)]
        public _CMSG_KEY_AGREE_RECIPIENT_INFO* pKeyAgree;
        [FieldOffset(0)]
        public _CMSG_MAIL_LIST_RECIPIENT_INFO* pMailList;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_CTRL_DECRYPT_PARA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hCryptProv;
        [FieldOffset(0)]
        public ulong hNCryptKey;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hCryptProv;
        [FieldOffset(0)]
        public ulong hNCryptKey;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hCryptProv;
        [FieldOffset(0)]
        public ulong hNCryptKey;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hKeyEncryptionKey;
        [FieldOffset(0)]
        public void* pvKeyEncryptionKey;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_CONTENT_ENCRYPT_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hContentEncryptKey;
        [FieldOffset(0)]
        public void* hCNGContentEncryptKey;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO
    {
        public UInt32 cbSize;
        public _CRYPTOAPI_BLOB EncryptedKey;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CMSG_KEY_AGREE_ENCRYPT_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CERT_ID OriginatorCertId;
        [FieldOffset(0)]
        public _CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_KEY_PROV_PARAM
    {
        public UInt32 dwParam;
        public byte* pbData;
        public UInt32 cbData;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_KEY_PROV_INFO
    {
        public ushort pwszContainerName;
        public ushort pwszProvName;
        public UInt32 dwProvType;
        public UInt32 dwFlags;
        public UInt32 cProvParam;
        public _CRYPT_KEY_PROV_PARAM* rgProvParam;
        public UInt32 dwKeySpec;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_KEY_CONTEXT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hCryptProv;
        [FieldOffset(0)]
        public ulong hNCryptKey;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ROOT_INFO_LUID
    {
        public UInt32 LowPart;
        public Int32 HighPart;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_SYSTEM_STORE_RELOCATE_PARA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public HKEY__* hKeyBase;
        [FieldOffset(0)]
        public void* pvBase;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CERT_SYSTEM_STORE_RELOCATE_PARA__bindgen_ty_2
    {
        [FieldOffset(0)]
        public void* pvSystemStore;
        [FieldOffset(0)]
        public byte pszSystemStore;
        [FieldOffset(0)]
        public ushort pwszSystemStore;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CTL_FIND_USAGE_PARA
    {
        public UInt32 cbSize;
        public _CTL_USAGE SubjectUsage;
        public _CRYPTOAPI_BLOB ListIdentifier;
        public _CERT_INFO* pSigner;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_CREATE_CONTEXT_PARA
    {
        public UInt32 cbSize;
        public Option pfnFree;
        public void* pvFree;
        public Option pfnSort;
        public void* pvSort;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_SYSTEM_STORE_INFO
    {
        public UInt32 cbSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_PHYSICAL_STORE_INFO
    {
        public UInt32 cbSize;
        public byte pszOpenStoreProvider;
        public UInt32 dwOpenEncodingType;
        public UInt32 dwOpenFlags;
        public _CRYPTOAPI_BLOB OpenParameters;
        public UInt32 dwFlags;
        public UInt32 dwPriority;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CTL_VERIFY_USAGE_PARA
    {
        public UInt32 cbSize;
        public _CRYPTOAPI_BLOB ListIdentifier;
        public UInt32 cCtlStore;
        public void** rghCtlStore;
        public UInt32 cSignerStore;
        public void** rghSignerStore;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CTL_VERIFY_USAGE_STATUS
    {
        public UInt32 cbSize;
        public UInt32 dwError;
        public UInt32 dwFlags;
        public CTL_CONTEXT** ppCtl;
        public UInt32 dwCtlEntryIndex;
        public CERT_CONTEXT** ppSigner;
        public UInt32 dwSignerIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_REVOCATION_CRL_INFO
    {
        public UInt32 cbSize;
        public CRL_CONTEXT* pBaseCrlContext;
        public CRL_CONTEXT* pDeltaCrlContext;
        public _CRL_ENTRY* pCrlEntry;
        public int fDeltaCrlEntry;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_REVOCATION_PARA
    {
        public UInt32 cbSize;
        public CERT_CONTEXT* pIssuerCert;
        public UInt32 cCertStore;
        public void** rgCertStore;
        public void* hCrlStore;
        public _FILETIME* pftTimeToUse;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_REVOCATION_STATUS
    {
        public UInt32 cbSize;
        public UInt32 dwIndex;
        public UInt32 dwError;
        public UInt32 dwReason;
        public int fHasFreshnessTime;
        public UInt32 dwFreshnessTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_SIGN_MESSAGE_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwMsgEncodingType;
        public CERT_CONTEXT* pSigningCert;
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        public void* pvHashAuxInfo;
        public UInt32 cMsgCert;
        public CERT_CONTEXT** rgpMsgCert;
        public UInt32 cMsgCrl;
        public CRL_CONTEXT** rgpMsgCrl;
        public UInt32 cAuthAttr;
        public _CRYPT_ATTRIBUTE* rgAuthAttr;
        public UInt32 cUnauthAttr;
        public _CRYPT_ATTRIBUTE* rgUnauthAttr;
        public UInt32 dwFlags;
        public UInt32 dwInnerContentType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_VERIFY_MESSAGE_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwMsgAndCertEncodingType;
        public ulong hCryptProv;
        public Option pfnGetSignerCertificate;
        public void* pvGetArg;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_ENCRYPT_MESSAGE_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwMsgEncodingType;
        public ulong hCryptProv;
        public _CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;
        public void* pvEncryptionAuxInfo;
        public UInt32 dwFlags;
        public UInt32 dwInnerContentType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_DECRYPT_MESSAGE_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwMsgAndCertEncodingType;
        public UInt32 cCertStore;
        public void** rghCertStore;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_HASH_MESSAGE_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwMsgEncodingType;
        public ulong hCryptProv;
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        public void* pvHashAuxInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_KEY_SIGN_MESSAGE_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwMsgAndCertEncodingType;
        public _CRYPT_KEY_SIGN_MESSAGE_PARA__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 dwKeySpec;
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        public void* pvHashAuxInfo;
        public _CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CRYPT_KEY_SIGN_MESSAGE_PARA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ulong hCryptProv;
        [FieldOffset(0)]
        public ulong hNCryptKey;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_KEY_VERIFY_MESSAGE_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwMsgEncodingType;
        public ulong hCryptProv;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_CHAIN
    {
        public UInt32 cCerts;
        public _CRYPTOAPI_BLOB* certs;
        public _CRYPT_KEY_PROV_INFO keyLocatorInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_CREDENTIALS
    {
        public UInt32 cbSize;
        public byte pszCredentialsOid;
        public void* pvCredentials;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO
    {
        public UInt32 cbSize;
        public UInt32 dwObjectType;
        public UInt32 dwError;
        public UInt32 dwReserved;
        public _FILETIME ThisUpdateTime;
        public _FILETIME NextUpdateTime;
        public _FILETIME PublishTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPTNET_URL_CACHE_FLUSH_INFO
    {
        public UInt32 cbSize;
        public UInt32 dwExemptSeconds;
        public _FILETIME ExpireTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPTNET_URL_CACHE_RESPONSE_INFO
    {
        public UInt32 cbSize;
        public ushort wResponseType;
        public ushort wResponseFlags;
        public _FILETIME LastModifiedTime;
        public UInt32 dwMaxAge;
        public ushort pwszETag;
        public UInt32 dwProxyId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_RETRIEVE_AUX_INFO
    {
        public UInt32 cbSize;
        public _FILETIME* pLastSyncTime;
        public UInt32 dwMaxUrlRetrievalByteCount;
        public _CRYPTNET_URL_CACHE_PRE_FETCH_INFO* pPreFetchInfo;
        public _CRYPTNET_URL_CACHE_FLUSH_INFO* pFlushInfo;
        public _CRYPTNET_URL_CACHE_RESPONSE_INFO** ppResponseInfo;
        public ushort pwszCacheFileNamePrefix;
        public _FILETIME* pftCacheResync;
        public int fProxyCacheRetrieval;
        public UInt32 dwHttpStatusCode;
        public ushort* ppwszErrorResponseHeaders;
        public _CRYPTOAPI_BLOB** ppErrorContentBlob;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_URL_ARRAY
    {
        public UInt32 cUrl;
        public ushort* rgwszUrl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_URL_INFO
    {
        public UInt32 cbSize;
        public UInt32 dwSyncDeltaTime;
        public UInt32 cGroup;
        public UInt32* rgcGroupEntry;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO
    {
        public UInt32 cbSize;
        public int iDeltaCrlIndicator;
        public _FILETIME* pftCacheResync;
        public _FILETIME* pLastSyncTime;
        public _FILETIME* pMaxAgeTime;
        public _CERT_REVOCATION_CHAIN_PARA* pChainPara;
        public _CRYPTOAPI_BLOB* pDeltaCrlIndicator;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_CHAIN_ENGINE_CONFIG
    {
        public UInt32 cbSize;
        public void* hRestrictedRoot;
        public void* hRestrictedTrust;
        public void* hRestrictedOther;
        public UInt32 cAdditionalStore;
        public void** rghAdditionalStore;
        public UInt32 dwFlags;
        public UInt32 dwUrlRetrievalTimeout;
        public UInt32 MaximumCachedCertificates;
        public UInt32 CycleDetectionModulus;
        public void* hExclusiveRoot;
        public void* hExclusiveTrustedPeople;
        public UInt32 dwExclusiveFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_TRUST_STATUS
    {
        public UInt32 dwErrorStatus;
        public UInt32 dwInfoStatus;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_REVOCATION_INFO
    {
        public UInt32 cbSize;
        public UInt32 dwRevocationResult;
        public byte pszRevocationOid;
        public void* pvOidSpecificInfo;
        public int fHasFreshnessTime;
        public UInt32 dwFreshnessTime;
        public _CERT_REVOCATION_CRL_INFO* pCrlInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_TRUST_LIST_INFO
    {
        public UInt32 cbSize;
        public _CTL_ENTRY* pCtlEntry;
        public CTL_CONTEXT* pCtlContext;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_CHAIN_ELEMENT
    {
        public UInt32 cbSize;
        public CERT_CONTEXT* pCertContext;
        public _CERT_TRUST_STATUS TrustStatus;
        public _CERT_REVOCATION_INFO* pRevocationInfo;
        public _CTL_USAGE* pIssuanceUsage;
        public _CTL_USAGE* pApplicationUsage;
        public ushort pwszExtendedErrorInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_SIMPLE_CHAIN
    {
        public UInt32 cbSize;
        public _CERT_TRUST_STATUS TrustStatus;
        public UInt32 cElement;
        public _CERT_CHAIN_ELEMENT** rgpElement;
        public _CERT_TRUST_LIST_INFO* pTrustListInfo;
        public int fHasRevocationFreshnessTime;
        public UInt32 dwRevocationFreshnessTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_USAGE_MATCH
    {
        public UInt32 dwType;
        public _CTL_USAGE Usage;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_CHAIN_PARA
    {
        public UInt32 cbSize;
        public _CERT_USAGE_MATCH RequestedUsage;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_REVOCATION_CHAIN_PARA
    {
        public UInt32 cbSize;
        public void* hChainEngine;
        public void* hAdditionalStore;
        public UInt32 dwChainFlags;
        public UInt32 dwUrlRetrievalTimeout;
        public _FILETIME* pftCurrentTime;
        public _FILETIME* pftCacheResync;
        public UInt32 cbMaxUrlRetrievalByteCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_CHAIN_POLICY_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwFlags;
        public void* pvExtraPolicyPara;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_CHAIN_POLICY_STATUS
    {
        public UInt32 cbSize;
        public UInt32 dwError;
        public Int32 lChainIndex;
        public Int32 lElementIndex;
        public void* pvExtraPolicyStatus;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _HTTPSPolicyCallbackData__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 cbStruct;
        [FieldOffset(0)]
        public UInt32 cbSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERT_SERVER_OCSP_RESPONSE_OPEN_PARA
    {
        public UInt32 cbSize;
        public UInt32 dwFlags;
        public UInt32* pcbUsedSize;
        public ushort pwszOcspDirectory;
        public Option pfnUpdateCallback;
        public void* pvUpdateCallbackArg;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_TIMESTAMP_ACCURACY
    {
        public UInt32 dwSeconds;
        public UInt32 dwMillis;
        public UInt32 dwMicros;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_TIMESTAMP_INFO
    {
        public UInt32 dwVersion;
        public byte pszTSAPolicyId;
        public _CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;
        public _CRYPTOAPI_BLOB HashedMessage;
        public _CRYPTOAPI_BLOB SerialNumber;
        public _FILETIME ftTime;
        public _CRYPT_TIMESTAMP_ACCURACY* pvAccuracy;
        public int fOrdering;
        public _CRYPTOAPI_BLOB Nonce;
        public _CRYPTOAPI_BLOB Tsa;
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_TIMESTAMP_CONTEXT
    {
        public UInt32 cbEncoded;
        public byte* pbEncoded;
        public _CRYPT_TIMESTAMP_INFO* pTimeStamp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPT_TIMESTAMP_PARA
    {
        public byte pszTSAPolicyId;
        public int fRequestCerts;
        public _CRYPTOAPI_BLOB Nonce;
        public UInt32 cExtension;
        public _CERT_EXTENSION* rgExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRYPTPROTECT_PROMPTSTRUCT
    {
        public UInt32 cbSize;
        public UInt32 dwPromptFlags;
        public HWND__* hwndApp;
        public ushort szPrompt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CERTIFICATE_BLOB
    {
        public UInt32 dwCertEncodingType;
        public UInt32 cbData;
        public byte pbData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _EFS_HASH_BLOB
    {
        public UInt32 cbData;
        public byte pbData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _EFS_RPC_BLOB
    {
        public UInt32 cbData;
        public byte pbData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ENCRYPTION_CERTIFICATE
    {
        public UInt32 cbTotalLength;
        public _SID* pUserSid;
        public _CERTIFICATE_BLOB* pCertBlob;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ENCRYPTION_CERTIFICATE_HASH
    {
        public UInt32 cbTotalLength;
        public _SID* pUserSid;
        public _EFS_HASH_BLOB* pHash;
        public ushort lpDisplayInformation;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ENCRYPTION_CERTIFICATE_HASH_LIST
    {
        public UInt32 nCert_Hash;
        public _ENCRYPTION_CERTIFICATE_HASH** pUsers;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ENCRYPTION_CERTIFICATE_LIST
    {
        public UInt32 nUsers;
        public _ENCRYPTION_CERTIFICATE** pUsers;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ENCRYPTION_PROTECTOR
    {
        public UInt32 cbTotalLength;
        public _SID* pUserSid;
        public ushort lpProtectorDescriptor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _bindgen_ty_2
    {
        public fixed byte/* void, this length is invalid so must keep pointer and can't edit from C# */ pad[2];
        public void* userContext;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ARRAY_INFO
    {
        public Int32 Dimension;
        public UInt32* BufferConformanceMark;
        public UInt32* BufferVarianceMark;
        public UInt32* MaxCountArray;
        public UInt32* OffsetArray;
        public UInt32* ActualCountArray;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NDR_ASYNC_MESSAGE
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NDR_CORRELATION_INFO
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct NDR_ALLOC_ALL_NODES_CONTEXT
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct NDR_POINTER_QUEUE_STATE
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NDR_PROC_CONTEXT
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MIDL_STUB_MESSAGE
    {
        public _RPC_MESSAGE* RpcMsg;
        public byte* Buffer;
        public byte* BufferStart;
        public byte* BufferEnd;
        public byte* BufferMark;
        public UInt32 BufferLength;
        public UInt32 MemorySize;
        public byte* Memory;
        public byte IsClient;
        public byte Pad;
        public ushort uFlags2;
        public int ReuseBuffer;
        public NDR_ALLOC_ALL_NODES_CONTEXT* pAllocAllNodesContext;
        public NDR_POINTER_QUEUE_STATE* pPointerQueueState;
        public int IgnoreEmbeddedPointers;
        public byte* PointerBufferMark;
        public byte CorrDespIncrement;
        public byte uFlags;
        public ushort UniquePtrCount;
        public ulong MaxCount;
        public UInt32 Offset;
        public UInt32 ActualCount;
        public Option pfnAllocate;
        public Option pfnFree;
        public byte* StackTop;
        public byte* pPresentedType;
        public byte* pTransmitType;
        public I_RPC_HANDLE SavedHandle;
        public _MIDL_STUB_DESC* StubDesc;
        public _FULL_PTR_XLAT_TABLES* FullPtrXlatTables;
        public UInt32 FullPtrRefId;
        public UInt32 PointerLength;
        public fixed ushort _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public UInt32 dwDestContext;
        public void* pvDestContext;
        public _bindgen_ty_2** SavedContextHandles;
        public Int32 ParamNumber;
        public IRpcChannelBuffer* pRpcChannelBuffer;
        public ARRAY_INFO* pArrayInfo;
        public UInt32* SizePtrCountArray;
        public UInt32* SizePtrOffsetArray;
        public UInt32* SizePtrLengthArray;
        public void* pArgQueue;
        public UInt32 dwStubPhase;
        public void* LowStackMark;
        public _NDR_ASYNC_MESSAGE* pAsyncMsg;
        public _NDR_CORRELATION_INFO* pCorrInfo;
        public byte* pCorrMemory;
        public void* pMemoryList;
        public long pCSInfo;
        public byte* ConformanceMark;
        public byte* VarianceMark;
        public long Unused;
        public _NDR_PROC_CONTEXT* pContext;
        public void* ContextHandleHash;
        public void* pUserMarshalList;
        public long Reserved51_3;
        public long Reserved51_4;
        public long Reserved51_5;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _GENERIC_BINDING_ROUTINE_PAIR
    {
        public Option pfnBind;
        public Option pfnUnbind;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct __GENERIC_BINDING_INFO
    {
        public void* pObj;
        public uint Size;
        public Option pfnBind;
        public Option pfnUnbind;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _XMIT_ROUTINE_QUINTUPLE
    {
        public Option pfnTranslateToXmit;
        public Option pfnTranslateFromXmit;
        public Option pfnFreeXmit;
        public Option pfnFreeInst;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
        public Option pfnBufferSize;
        public Option pfnMarshall;
        public Option pfnUnmarshall;
        public Option pfnFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MALLOC_FREE_STRUCT
    {
        public Option pfnAllocate;
        public Option pfnFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COMM_FAULT_OFFSETS
    {
        public short CommOffset;
        public short FaultOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
        public Option pfnNetSize;
        public Option pfnToNetCs;
        public Option pfnLocalSize;
        public Option pfnFromNetCs;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NDR_CS_ROUTINES
    {
        public _NDR_CS_SIZE_CONVERT_ROUTINES* pSizeConvertRoutines;
        public Option* pTagGettingRoutines;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NDR_EXPR_DESC
    {
        public ushort* pOffset;
        public byte* pFormatExpr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MIDL_STUB_DESC
    {
        public void* RpcInterfaceInformation;
        public Option pfnAllocate;
        public Option pfnFree;
        public _MIDL_STUB_DESC__bindgen_ty_1 IMPLICIT_HANDLE_INFO;
        public Option* apfnNdrRundownRoutines;
        public _GENERIC_BINDING_ROUTINE_PAIR* aGenericBindingRoutinePairs;
        public Option* apfnExprEval;
        public _XMIT_ROUTINE_QUINTUPLE* aXmitQuintuple;
        public byte* pFormatTypes;
        public int fCheckBounds;
        public UInt32 Version;
        public _MALLOC_FREE_STRUCT* pMallocFreeStruct;
        public Int32 MIDLVersion;
        public _COMM_FAULT_OFFSETS* CommFaultOffsets;
        public _USER_MARSHAL_ROUTINE_QUADRUPLE* aUserMarshalQuadruple;
        public Option* NotifyRoutineTable;
        public ulong mFlags;
        public _NDR_CS_ROUTINES* CsRoutineTables;
        public void* ProxyServerInfo;
        public _NDR_EXPR_DESC* pExprInfo;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _MIDL_STUB_DESC__bindgen_ty_1
    {
        [FieldOffset(0)]
        public I_RPC_HANDLE* pAutoHandle;
        [FieldOffset(0)]
        public I_RPC_HANDLE* pPrimitiveHandle;
        [FieldOffset(0)]
        public __GENERIC_BINDING_INFO* pGenericBindingInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MIDL_METHOD_PROPERTY
    {
        public UInt32 Id;
        public ulong Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MIDL_METHOD_PROPERTY_MAP
    {
        public UInt32 Count;
        public _MIDL_METHOD_PROPERTY* Properties;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MIDL_INTERFACE_METHOD_PROPERTIES
    {
        public ushort MethodCount;
        public _MIDL_METHOD_PROPERTY_MAP** MethodProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MIDL_STUBLESS_PROXY_INFO
    {
        public MIDL_STUB_DESC* pStubDesc;
        public byte* ProcFormatString;
        public ushort* FormatStringOffset;
        public _RPC_SYNTAX_IDENTIFIER* pTransferSyntax;
        public ulong nCount;
        public _MIDL_SYNTAX_INFO* pSyntaxInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _MIDL_SYNTAX_INFO
    {
        public _RPC_SYNTAX_IDENTIFIER TransferSyntax;
        public RPC_DISPATCH_TABLE* DispatchTable;
        public byte* ProcString;
        public ushort* FmtStringOffset;
        public byte* TypeString;
        public void* aUserMarshalQuadruple;
        public _MIDL_INTERFACE_METHOD_PROPERTIES* pMethodProperties;
        public ulong pReserved2;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CLIENT_CALL_RETURN
    {
        [FieldOffset(0)]
        public void* Pointer;
        [FieldOffset(0)]
        public long Simple;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FULL_PTR_XLAT_TABLES
    {
        public void* RefIdToPointer;
        public void* PointerToRefId;
        public UInt32 NextRefId;
        public int XlatSide;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NDR_USER_MARSHAL_INFO_LEVEL1
    {
        public void* Buffer;
        public UInt32 BufferSize;
        public Option pfnAllocate;
        public Option pfnFree;
        public IRpcChannelBuffer* pRpcChannelBuffer;
        public fixed ulong Reserved[5];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NDR_USER_MARSHAL_INFO
    {
        public UInt32 InformationLevel;
        public _NDR_USER_MARSHAL_INFO__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _NDR_USER_MARSHAL_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COAUTHIDENTITY
    {
        public ushort* User;
        public UInt32 UserLength;
        public ushort* Domain;
        public UInt32 DomainLength;
        public ushort* Password;
        public UInt32 PasswordLength;
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COAUTHINFO
    {
        public UInt32 dwAuthnSvc;
        public UInt32 dwAuthzSvc;
        public ushort pwszServerPrincName;
        public UInt32 dwAuthnLevel;
        public UInt32 dwImpersonationLevel;
        public _COAUTHIDENTITY* pAuthIdentityData;
        public UInt32 dwCapabilities;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BYTE_BLOB
    {
        public UInt32 clSize;
        public fixed byte abData[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DWORD_BLOB
    {
        public UInt32 clSize;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ alData[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FLAGGED_BYTE_BLOB
    {
        public UInt32 fFlags;
        public UInt32 clSize;
        public fixed byte abData[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BYTE_SIZEDARR
    {
        public UInt32 clSize;
        public byte* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SHORT_SIZEDARR
    {
        public UInt32 clSize;
        public ushort* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LONG_SIZEDARR
    {
        public UInt32 clSize;
        public UInt32* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _HYPER_SIZEDARR
    {
        public UInt32 clSize;
        public long* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBLOB
    {
        public UInt32 cbSize;
        public byte* pBlobData;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _userCLIPFORMAT___MIDL_IWinTypes_0001
    {
        [FieldOffset(0)]
        public UInt32 dwValue;
        [FieldOffset(0)]
        public ushort* pwszName;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _GDI_NONREMOTE___MIDL_IWinTypes_0002
    {
        [FieldOffset(0)]
        public Int32 hInproc;
        [FieldOffset(0)]
        public _DWORD_BLOB* hRemote;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _userHGLOBAL___MIDL_IWinTypes_0003
    {
        [FieldOffset(0)]
        public Int32 hInproc;
        [FieldOffset(0)]
        public _FLAGGED_BYTE_BLOB* hRemote;
        [FieldOffset(0)]
        public long hInproc64;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _userHMETAFILE
    {
        public Int32 fContext;
        public _userHMETAFILE___MIDL_IWinTypes_0004 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _userHMETAFILE___MIDL_IWinTypes_0004
    {
        [FieldOffset(0)]
        public Int32 hInproc;
        [FieldOffset(0)]
        public _BYTE_BLOB* hRemote;
        [FieldOffset(0)]
        public long hInproc64;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _remoteMETAFILEPICT
    {
        public Int32 mm;
        public Int32 xExt;
        public Int32 yExt;
        public _userHMETAFILE* hMF;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _userHMETAFILEPICT___MIDL_IWinTypes_0005
    {
        [FieldOffset(0)]
        public Int32 hInproc;
        [FieldOffset(0)]
        public _remoteMETAFILEPICT* hRemote;
        [FieldOffset(0)]
        public long hInproc64;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _userHENHMETAFILE___MIDL_IWinTypes_0006
    {
        [FieldOffset(0)]
        public Int32 hInproc;
        [FieldOffset(0)]
        public _BYTE_BLOB* hRemote;
        [FieldOffset(0)]
        public long hInproc64;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _userBITMAP
    {
        public Int32 bmType;
        public Int32 bmWidth;
        public Int32 bmHeight;
        public Int32 bmWidthBytes;
        public ushort bmPlanes;
        public ushort bmBitsPixel;
        public UInt32 cbSize;
        public fixed byte pBuffer[1];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _userHBITMAP___MIDL_IWinTypes_0007
    {
        [FieldOffset(0)]
        public Int32 hInproc;
        [FieldOffset(0)]
        public _userBITMAP* hRemote;
        [FieldOffset(0)]
        public long hInproc64;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _userHPALETTE___MIDL_IWinTypes_0008
    {
        [FieldOffset(0)]
        public Int32 hInproc;
        [FieldOffset(0)]
        public tagLOGPALETTE* hRemote;
        [FieldOffset(0)]
        public long hInproc64;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _RemotableHandle___MIDL_IWinTypes_0009
    {
        [FieldOffset(0)]
        public Int32 hInproc;
        [FieldOffset(0)]
        public Int32 hRemote;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagCY
    {
        [FieldOffset(0)]
        public tagCY__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public long int64;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCY__bindgen_ty_1
    {
        public UInt32 Lo;
        public Int32 Hi;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagDEC
    {
        public ushort wReserved;
        public tagDEC__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 Hi32;
        public tagDEC__bindgen_ty_2 __bindgen_anon_2;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagDEC__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagDEC__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public ushort signscale;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagDEC__bindgen_ty_1__bindgen_ty_1
    {
        public byte scale;
        public byte sign;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagDEC__bindgen_ty_2
    {
        [FieldOffset(0)]
        public tagDEC__bindgen_ty_2__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public ulong Lo64;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagDEC__bindgen_ty_2__bindgen_ty_1
    {
        public UInt32 Lo32;
        public UInt32 Mid32;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBSTRBLOB
    {
        public UInt32 cbSize;
        public byte* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCLIPDATA
    {
        public UInt32 cbSize;
        public Int32 ulClipFmt;
        public byte* pClipData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCSPLATFORM
    {
        public UInt32 dwPlatformId;
        public UInt32 dwVersionHi;
        public UInt32 dwVersionLo;
        public UInt32 dwProcessorArch;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagQUERYCONTEXT
    {
        public UInt32 dwContext;
        public tagCSPLATFORM Platform;
        public UInt32 Locale;
        public UInt32 dwVersionHi;
        public UInt32 dwVersionLo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
    {
        public UInt32 tyspec;
        public __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005 tagged_union;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005
    {
        [FieldOffset(0)]
        public _GUID clsid;
        [FieldOffset(0)]
        public ushort pFileExt;
        [FieldOffset(0)]
        public ushort pMimeType;
        [FieldOffset(0)]
        public ushort pProgId;
        [FieldOffset(0)]
        public ushort pFileName;
        [FieldOffset(0)]
        public __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005__bindgen_ty_1 ByName;
        [FieldOffset(0)]
        public __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005__bindgen_ty_2 ByObjectId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005__bindgen_ty_1
    {
        public ushort pPackageName;
        public _GUID PolicyId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct __MIDL___MIDL_itf_wtypes_0000_0001_0001___MIDL___MIDL_itf_wtypes_0000_0001_0005__bindgen_ty_2
    {
        public _GUID ObjectId;
        public _GUID PolicyId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_DEVICE_NUMBER
    {
        public UInt32 DeviceType;
        public UInt32 DeviceNumber;
        public UInt32 PartitionNumber;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_MEDIA_INFO
    {
        public _DEVICE_MEDIA_INFO__bindgen_ty_1 DeviceSpecific;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DEVICE_MEDIA_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_1 DiskInfo;
        [FieldOffset(0)]
        public _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_2 RemovableDiskInfo;
        [FieldOffset(0)]
        public _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3 TapeInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_1
    {
        public _LARGE_INTEGER Cylinders;
        public _STORAGE_MEDIA_TYPE MediaType;
        public UInt32 TracksPerCylinder;
        public UInt32 SectorsPerTrack;
        public UInt32 BytesPerSector;
        public UInt32 NumberMediaSides;
        public UInt32 MediaCharacteristics;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_2
    {
        public _LARGE_INTEGER Cylinders;
        public _STORAGE_MEDIA_TYPE MediaType;
        public UInt32 TracksPerCylinder;
        public UInt32 SectorsPerTrack;
        public UInt32 BytesPerSector;
        public UInt32 NumberMediaSides;
        public UInt32 MediaCharacteristics;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3
    {
        public _STORAGE_MEDIA_TYPE MediaType;
        public UInt32 MediaCharacteristics;
        public UInt32 CurrentBlockSize;
        public _STORAGE_BUS_TYPE BusType;
        public _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1 BusSpecificData;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1 ScsiInformation;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_MEDIA_INFO__bindgen_ty_1__bindgen_ty_3__bindgen_ty_1__bindgen_ty_1
    {
        public byte MediumType;
        public byte DensityCode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_CRYPTO_CAPABILITY
    {
        public UInt32 Version;
        public UInt32 Size;
        public UInt32 CryptoCapabilityIndex;
        public _STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId;
        public _STORAGE_CRYPTO_KEY_SIZE KeySize;
        public UInt32 DataUnitSizeBitmask;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_TIER
    {
        public _GUID Id;
        public fixed ushort Name[256];
        public fixed ushort Description[256];
        public ulong Flags;
        public ulong ProvisionedCapacity;
        public _STORAGE_TIER_MEDIA_TYPE MediaType;
        public _STORAGE_TIER_CLASS Class;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_PROTOCOL_SPECIFIC_DATA
    {
        public _STORAGE_PROTOCOL_TYPE ProtocolType;
        public UInt32 DataType;
        public UInt32 ProtocolDataRequestValue;
        public UInt32 ProtocolDataRequestSubValue;
        public UInt32 ProtocolDataOffset;
        public UInt32 ProtocolDataLength;
        public UInt32 FixedProtocolReturnData;
        public UInt32 ProtocolDataRequestSubValue2;
        public UInt32 ProtocolDataRequestSubValue3;
        public UInt32 Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT
    {
        public _STORAGE_PROTOCOL_TYPE ProtocolType;
        public UInt32 DataType;
        public UInt32 ProtocolDataValue;
        public UInt32 ProtocolDataSubValue;
        public UInt32 ProtocolDataOffset;
        public UInt32 ProtocolDataLength;
        public UInt32 FixedProtocolReturnData;
        public UInt32 ProtocolDataSubValue2;
        public UInt32 ProtocolDataSubValue3;
        public UInt32 ProtocolDataSubValue4;
        public UInt32 ProtocolDataSubValue5;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Reserved[5];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_TEMPERATURE_INFO
    {
        public ushort Index;
        public short Temperature;
        public short OverThreshold;
        public short UnderThreshold;
        public byte OverThresholdChangable;
        public byte UnderThresholdChangable;
        public byte EventGenerated;
        public byte Reserved0;
        public UInt32 Reserved1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _STORAGE_SPEC_VERSION
    {
        [FieldOffset(0)]
        public _STORAGE_SPEC_VERSION__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public UInt32 AsUlong;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_SPEC_VERSION__bindgen_ty_1
    {
        public _STORAGE_SPEC_VERSION__bindgen_ty_1__bindgen_ty_1 MinorVersion;
        public ushort MajorVersion;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _STORAGE_SPEC_VERSION__bindgen_ty_1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _STORAGE_SPEC_VERSION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public ushort AsUshort;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_SPEC_VERSION__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
    {
        public byte SubMinor;
        public byte Minor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_PHYSICAL_NODE_DATA
    {
        public UInt32 NodeId;
        public UInt32 AdapterCount;
        public UInt32 AdapterDataLength;
        public UInt32 AdapterDataOffset;
        public UInt32 DeviceCount;
        public UInt32 DeviceDataLength;
        public UInt32 DeviceDataOffset;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Reserved[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_OPERATIONAL_REASON
    {
        public UInt32 Version;
        public UInt32 Size;
        public _STORAGE_OPERATIONAL_STATUS_REASON Reason;
        public _STORAGE_OPERATIONAL_REASON__bindgen_ty_1 RawBytes;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _STORAGE_OPERATIONAL_REASON__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _STORAGE_OPERATIONAL_REASON__bindgen_ty_1__bindgen_ty_1 ScsiSenseKey;
        [FieldOffset(0)]
        public _STORAGE_OPERATIONAL_REASON__bindgen_ty_1__bindgen_ty_2 NVDIMM_N;
        [FieldOffset(0)]
        public UInt32 AsUlong;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_OPERATIONAL_REASON__bindgen_ty_1__bindgen_ty_1
    {
        public byte SenseKey;
        public byte ASC;
        public byte ASCQ;
        public byte Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_OPERATIONAL_REASON__bindgen_ty_1__bindgen_ty_2
    {
        public byte CriticalHealth;
        public fixed byte ModuleHealth[2];
        public byte ErrorThresholdStatus;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_ZONE_GROUP
    {
        public UInt32 ZoneCount;
        public _STORAGE_ZONE_TYPES ZoneType;
        public ulong ZoneSize;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1 SequentialRequiredZone;
        [FieldOffset(0)]
        public _STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_2 SequentialPreferredZone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 MaxOpenZoneCount;
        public byte UnrestrictedRead;
        public fixed byte Reserved[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_ZONED_DEVICE_DESCRIPTOR__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 OptimalOpenZoneCount;
        public UInt32 Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_LOCATION
    {
        public UInt32 Socket;
        public UInt32 Slot;
        public UInt32 Adapter;
        public UInt32 Port;
        public _DEVICE_LOCATION__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DEVICE_LOCATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DEVICE_LOCATION__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public _DEVICE_LOCATION__bindgen_ty_1__bindgen_ty_2 __bindgen_anon_2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_LOCATION__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 Channel;
        public UInt32 Device;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_LOCATION__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 Target;
        public UInt32 Lun;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_HW_ENDURANCE_INFO
    {
        public UInt32 ValidFields;
        public UInt32 GroupId;
        public _STORAGE_HW_ENDURANCE_INFO__bindgen_ty_1 Flags;
        public UInt32 LifePercentage;
        public fixed byte BytesReadCount[16];
        public fixed byte ByteWriteCount[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_HW_ENDURANCE_INFO__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_DATA_SET_RANGE
    {
        public long StartingOffset;
        public ulong LengthInBytes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_OFFLOAD_TOKEN
    {
        public fixed byte TokenType[4];
        public fixed byte Reserved[2];
        public fixed byte TokenIdLength[2];
        public _STORAGE_OFFLOAD_TOKEN__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _STORAGE_OFFLOAD_TOKEN__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _STORAGE_OFFLOAD_TOKEN__bindgen_ty_1__bindgen_ty_1 StorageOffloadZeroDataToken;
        [FieldOffset(0)]
        public fixed byte Token[504];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_OFFLOAD_TOKEN__bindgen_ty_1__bindgen_ty_1
    {
        public fixed byte Reserved2[504];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_TIER_REGION
    {
        public _GUID TierId;
        public ulong Offset;
        public ulong Length;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_STORAGE_ADDRESS_RANGE
    {
        public long StartAddress;
        public ulong LengthInBytes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_ZONE_DESCRIPTOR
    {
        public UInt32 Size;
        public _STORAGE_ZONE_TYPES ZoneType;
        public _STORAGE_ZONE_CONDITION ZoneCondition;
        public byte ResetWritePointerRecommend;
        public fixed byte Reserved0[3];
        public ulong ZoneSize;
        public ulong WritePointerOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_STORAGE_RANGE_ATTRIBUTES
    {
        public ulong LengthInBytes;
        public _DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1 __bindgen_anon_1;
        public UInt32 Reserved;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 AllFlags;
        [FieldOffset(0)]
        public _DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICE_STORAGE_RANGE_ATTRIBUTES__bindgen_ty_1__bindgen_ty_1
    {
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public fixed byte __bindgen_padding_0[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR
    {
        public UInt32 Version;
        public UInt32 Size;
        public UInt32 ElementIdentifier;
        public byte PhysicalElementType;
        public byte PhysicalElementHealth;
        public fixed byte Reserved1[2];
        public ulong AssociatedCapacity;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Reserved2[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PERSISTENT_RESERVE_COMMAND__bindgen_ty_1
    {
        public __BindgenUnionField PR_IN;
        public __BindgenUnionField PR_OUT;
        public fixed ushort bindgen_union_field[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICEDUMP_SUBSECTION_POINTER
    {
        public UInt32 dwSize;
        public UInt32 dwFlags;
        public UInt32 dwOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICEDUMP_STRUCTURE_VERSION
    {
        public UInt32 dwSignature;
        public UInt32 dwVersion;
        public UInt32 dwSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICEDUMP_SECTION_HEADER
    {
        public _GUID guidDeviceDataId;
        public fixed byte sOrganizationID[16];
        public UInt32 dwFirmwareRevision;
        public fixed byte sModelNumber[32];
        public fixed byte szDeviceManufacturingID[32];
        public UInt32 dwFlags;
        public UInt32 bRestrictedPrivateDataVersion;
        public UInt32 dwFirmwareIssueId;
        public fixed byte szIssueDescriptionString[132];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _GP_LOG_PAGE_DESCRIPTOR
    {
        public ushort LogAddress;
        public ushort LogSectors;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD
    {
        public fixed byte Cdb[16];
        public fixed byte Command[16];
        public ulong StartTime;
        public ulong EndTime;
        public UInt32 OperationStatus;
        public UInt32 OperationError;
        public _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1 StackSpecific;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_1 ExternalStack;
        [FieldOffset(0)]
        public _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_2 AtaPort;
        [FieldOffset(0)]
        public _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_3 StorPort;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 dwReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 dwAtaPortSpecific;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD__bindgen_ty_1__bindgen_ty_3
    {
        public UInt32 SrbTag;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_COUNTER
    {
        public _STORAGE_COUNTER_TYPE Type;
        public _STORAGE_COUNTER__bindgen_ty_1 Value;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _STORAGE_COUNTER__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _STORAGE_COUNTER__bindgen_ty_1__bindgen_ty_1 ManufactureDate;
        [FieldOffset(0)]
        public ulong AsUlonglong;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_COUNTER__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 Week;
        public UInt32 Year;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_HW_FIRMWARE_SLOT_INFO
    {
        public UInt32 Version;
        public UInt32 Size;
        public byte SlotNumber;
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public fixed byte Reserved1[6];
        public fixed byte Revision[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCM_LOGICAL_DEVICE_INSTANCE
    {
        public UInt32 Version;
        public UInt32 Size;
        public _GUID DeviceGuid;
        public fixed ushort SymbolicLink[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCM_PHYSICAL_DEVICE_INSTANCE
    {
        public UInt32 Version;
        public UInt32 Size;
        public UInt32 NfitHandle;
        public fixed ushort SymbolicLink[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCM_REGION
    {
        public UInt32 Version;
        public UInt32 Size;
        public UInt32 Flags;
        public UInt32 NfitHandle;
        public _GUID LogicalDeviceGuid;
        public _GUID AddressRangeType;
        public UInt32 AssociatedId;
        public ulong Length;
        public ulong StartingDPA;
        public ulong BaseSPA;
        public ulong SPAOffset;
        public ulong RegionOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCM_INTERLEAVED_PD_INFO
    {
        public UInt32 DeviceHandle;
        public _GUID DeviceGuid;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCM_PD_DEVICE_SPECIFIC_PROPERTY
    {
        public fixed ushort Name[128];
        public long Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCM_PD_FIRMWARE_SLOT_INFO
    {
        public UInt32 Version;
        public UInt32 Size;
        public byte SlotNumber;
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public fixed byte Reserved1[6];
        public fixed byte Revision[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCM_PD_REINITIALIZE_MEDIA_INPUT__bindgen_ty_1
    {
        public fixed byte _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
        public fixed byte __bindgen_padding_0[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_GEOMETRY
    {
        public _LARGE_INTEGER Cylinders;
        public _MEDIA_TYPE MediaType;
        public UInt32 TracksPerCylinder;
        public UInt32 SectorsPerTrack;
        public UInt32 BytesPerSector;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PARTITION_INFORMATION
    {
        public _LARGE_INTEGER StartingOffset;
        public _LARGE_INTEGER PartitionLength;
        public UInt32 HiddenSectors;
        public UInt32 PartitionNumber;
        public byte PartitionType;
        public byte BootIndicator;
        public byte RecognizedPartition;
        public byte RewritePartition;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PARTITION_INFORMATION_GPT
    {
        public _GUID PartitionType;
        public _GUID PartitionId;
        public ulong Attributes;
        public fixed ushort Name[36];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PARTITION_INFORMATION_MBR
    {
        public byte PartitionType;
        public byte BootIndicator;
        public byte RecognizedPartition;
        public UInt32 HiddenSectors;
        public _GUID PartitionId;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SET_PARTITION_INFORMATION_EX__bindgen_ty_1
    {
        [FieldOffset(0)]
        public SET_PARTITION_INFORMATION Mbr;
        [FieldOffset(0)]
        public _PARTITION_INFORMATION_GPT Gpt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CREATE_DISK_GPT
    {
        public _GUID DiskId;
        public UInt32 MaxPartitionCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CREATE_DISK_MBR
    {
        public UInt32 Signature;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _CREATE_DISK__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _CREATE_DISK_MBR Mbr;
        [FieldOffset(0)]
        public _CREATE_DISK_GPT Gpt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PARTITION_INFORMATION_EX
    {
        public _PARTITION_STYLE PartitionStyle;
        public _LARGE_INTEGER StartingOffset;
        public _LARGE_INTEGER PartitionLength;
        public UInt32 PartitionNumber;
        public byte RewritePartition;
        public byte IsServicePartition;
        public _PARTITION_INFORMATION_EX__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PARTITION_INFORMATION_EX__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _PARTITION_INFORMATION_MBR Mbr;
        [FieldOffset(0)]
        public _PARTITION_INFORMATION_GPT Gpt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DRIVE_LAYOUT_INFORMATION_GPT
    {
        public _GUID DiskId;
        public _LARGE_INTEGER StartingUsableOffset;
        public _LARGE_INTEGER UsableLength;
        public UInt32 MaxPartitionCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DRIVE_LAYOUT_INFORMATION_MBR
    {
        public UInt32 Signature;
        public UInt32 CheckSum;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DRIVE_LAYOUT_INFORMATION_EX__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DRIVE_LAYOUT_INFORMATION_MBR Mbr;
        [FieldOffset(0)]
        public _DRIVE_LAYOUT_INFORMATION_GPT Gpt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_INT13_INFO
    {
        public ushort DriveSelect;
        public UInt32 MaxCylinders;
        public ushort SectorsPerTrack;
        public ushort MaxHeads;
        public ushort NumberDrives;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_EX_INT13_INFO
    {
        public ushort ExBufferSize;
        public ushort ExFlags;
        public UInt32 ExCylinders;
        public UInt32 ExHeads;
        public UInt32 ExSectorsPerTrack;
        public ulong ExSectorsPerDrive;
        public ushort ExSectorSize;
        public ushort ExReserved;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DISK_DETECTION_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DISK_DETECTION_INFO__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_DETECTION_INFO__bindgen_ty_1__bindgen_ty_1
    {
        public _DISK_INT13_INFO Int13;
        public _DISK_EX_INT13_INFO ExInt13;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DISK_PARTITION_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DISK_PARTITION_INFO__bindgen_ty_1__bindgen_ty_1 Mbr;
        [FieldOffset(0)]
        public _DISK_PARTITION_INFO__bindgen_ty_1__bindgen_ty_2 Gpt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_PARTITION_INFO__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 Signature;
        public UInt32 CheckSum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_PARTITION_INFO__bindgen_ty_1__bindgen_ty_2
    {
        public _GUID DiskId;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _DISK_CACHE_INFORMATION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _DISK_CACHE_INFORMATION__bindgen_ty_1__bindgen_ty_1 ScalarPrefetch;
        [FieldOffset(0)]
        public _DISK_CACHE_INFORMATION__bindgen_ty_1__bindgen_ty_2 BlockPrefetch;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_CACHE_INFORMATION__bindgen_ty_1__bindgen_ty_1
    {
        public ushort Minimum;
        public ushort Maximum;
        public ushort MaximumBlocks;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_CACHE_INFORMATION__bindgen_ty_1__bindgen_ty_2
    {
        public ushort Minimum;
        public ushort Maximum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _HISTOGRAM_BUCKET
    {
        public UInt32 Reads;
        public UInt32 Writes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BIN_RANGE
    {
        public _LARGE_INTEGER StartValue;
        public _LARGE_INTEGER Length;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BIN_COUNT
    {
        public _BIN_RANGE BinRange;
        public UInt32 BinCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _IDEREGS
    {
        public byte bFeaturesReg;
        public byte bSectorCountReg;
        public byte bSectorNumberReg;
        public byte bCylLowReg;
        public byte bCylHighReg;
        public byte bDriveHeadReg;
        public byte bCommandReg;
        public byte bReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DRIVERSTATUS
    {
        public byte bDriverError;
        public byte bIDEError;
        public fixed byte bReserved[2];
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ dwReserved[2];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CHANGER_ELEMENT
    {
        public _ELEMENT_TYPE ElementType;
        public UInt32 ElementAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CHANGER_ELEMENT_LIST
    {
        public _CHANGER_ELEMENT Element;
        public UInt32 NumberOfElements;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CHANGER_ELEMENT_STATUS
    {
        public _CHANGER_ELEMENT Element;
        public _CHANGER_ELEMENT SrcElementAddress;
        public UInt32 Flags;
        public UInt32 ExceptionCode;
        public byte TargetId;
        public byte Lun;
        public ushort Reserved;
        public fixed byte PrimaryVolumeID[36];
        public fixed byte AlternateVolumeID[36];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RETRIEVAL_POINTERS_BUFFER
    {
        public UInt32 ExtentCount;
        public _LARGE_INTEGER StartingVcn;
        public fixed byte/* RETRIEVAL_POINTERS_BUFFER__bindgen_ty_1, this length is invalid so must keep pointer and can't edit from C# */ Extents[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RETRIEVAL_POINTERS_BUFFER__bindgen_ty_1
    {
        public _LARGE_INTEGER NextVcn;
        public _LARGE_INTEGER Lcn;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER__bindgen_ty_1
    {
        public _LARGE_INTEGER NextVcn;
        public _LARGE_INTEGER Lcn;
        public UInt32 ReferenceCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct USN_RECORD_V2
    {
        public UInt32 RecordLength;
        public ushort MajorVersion;
        public ushort MinorVersion;
        public ulong FileReferenceNumber;
        public ulong ParentFileReferenceNumber;
        public long Usn;
        public _LARGE_INTEGER TimeStamp;
        public UInt32 Reason;
        public UInt32 SourceInfo;
        public UInt32 SecurityId;
        public UInt32 FileAttributes;
        public ushort FileNameLength;
        public ushort FileNameOffset;
        public fixed ushort FileName[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct USN_RECORD_V3
    {
        public UInt32 RecordLength;
        public ushort MajorVersion;
        public ushort MinorVersion;
        public _FILE_ID_128 FileReferenceNumber;
        public _FILE_ID_128 ParentFileReferenceNumber;
        public long Usn;
        public _LARGE_INTEGER TimeStamp;
        public UInt32 Reason;
        public UInt32 SourceInfo;
        public UInt32 SecurityId;
        public UInt32 FileAttributes;
        public ushort FileNameLength;
        public ushort FileNameOffset;
        public fixed ushort FileName[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct USN_RECORD_COMMON_HEADER
    {
        public UInt32 RecordLength;
        public ushort MajorVersion;
        public ushort MinorVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct USN_RECORD_EXTENT
    {
        public long Offset;
        public long Length;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct USN_RECORD_V4
    {
        public USN_RECORD_COMMON_HEADER Header;
        public _FILE_ID_128 FileReferenceNumber;
        public _FILE_ID_128 ParentFileReferenceNumber;
        public long Usn;
        public UInt32 Reason;
        public UInt32 SourceInfo;
        public UInt32 RemainingExtents;
        public ushort NumberOfExtents;
        public ushort ExtentSize;
        public fixed byte/* USN_RECORD_EXTENT, this length is invalid so must keep pointer and can't edit from C# */ Extents[1];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct MARK_HANDLE_INFO__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 UsnSourceInfo;
        [FieldOffset(0)]
        public UInt32 CopyNumber;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct MARK_HANDLE_INFO32__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 UsnSourceInfo;
        [FieldOffset(0)]
        public UInt32 CopyNumber;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS__bindgen_ty_1
    {
        public ushort Write;
        public ushort Create;
        public ushort SetInfo;
        public ushort Flush;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS__bindgen_ty_2
    {
        public ushort Write;
        public ushort Create;
        public ushort SetInfo;
        public ushort Flush;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS__bindgen_ty_3
    {
        public ushort Write;
        public ushort Create;
        public ushort SetInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS__bindgen_ty_4
    {
        public ushort Write;
        public ushort Create;
        public ushort SetInfo;
        public ushort Flush;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS__bindgen_ty_5
    {
        public UInt32 Calls;
        public UInt32 Clusters;
        public UInt32 Hints;
        public UInt32 RunsReturned;
        public UInt32 HintsHonored;
        public UInt32 HintsClusters;
        public UInt32 Cache;
        public UInt32 CacheClusters;
        public UInt32 CacheMiss;
        public UInt32 CacheMissClusters;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS_EX__bindgen_ty_1
    {
        public UInt32 Write;
        public UInt32 Create;
        public UInt32 SetInfo;
        public UInt32 Flush;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS_EX__bindgen_ty_2
    {
        public UInt32 Write;
        public UInt32 Create;
        public UInt32 SetInfo;
        public UInt32 Flush;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS_EX__bindgen_ty_3
    {
        public UInt32 Write;
        public UInt32 Create;
        public UInt32 SetInfo;
        public UInt32 Flush;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS_EX__bindgen_ty_4
    {
        public UInt32 Write;
        public UInt32 Create;
        public UInt32 SetInfo;
        public UInt32 Flush;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _NTFS_STATISTICS_EX__bindgen_ty_5
    {
        public UInt32 Calls;
        public UInt32 RunsReturned;
        public UInt32 Hints;
        public UInt32 HintsHonored;
        public UInt32 Cache;
        public UInt32 CacheMiss;
        public ulong Clusters;
        public ulong HintsClusters;
        public ulong CacheClusters;
        public ulong CacheMissClusters;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _FILE_OBJECTID_BUFFER__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _FILE_OBJECTID_BUFFER__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public fixed byte ExtendedInfo[48];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_OBJECTID_BUFFER__bindgen_ty_1__bindgen_ty_1
    {
        public fixed byte BirthVolumeId[16];
        public fixed byte BirthObjectId[16];
        public fixed byte DomainId[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _TXFS_GET_METADATA_INFO_OUT__bindgen_ty_1
    {
        public long LowPart;
        public long HighPart;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _TXFS_READ_BACKUP_INFORMATION_OUT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 BufferLength;
        [FieldOffset(0)]
        public fixed byte Buffer[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BOOT_AREA_INFO__bindgen_ty_1
    {
        public _LARGE_INTEGER Offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _VIRTUAL_STORAGE_TYPE
    {
        public UInt32 DeviceId;
        public _GUID VendorId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE__bindgen_ty_1
    {
        public __BindgenUnionField Lev1Depends;
        public __BindgenUnionField Lev2Depends;
        public uint bindgen_union_field;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SD_CHANGE_MACHINE_SID_INPUT
    {
        public ushort CurrentMachineSIDOffset;
        public ushort CurrentMachineSIDLength;
        public ushort NewMachineSIDOffset;
        public ushort NewMachineSIDLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SD_CHANGE_MACHINE_SID_OUTPUT
    {
        public ulong NumSDChangedSuccess;
        public ulong NumSDChangedFail;
        public ulong NumSDUnused;
        public ulong NumSDTotal;
        public ulong NumMftSDChangedSuccess;
        public ulong NumMftSDChangedFail;
        public ulong NumMftSDTotal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SD_QUERY_STATS_INPUT
    {
        public UInt32 Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SD_QUERY_STATS_OUTPUT
    {
        public ulong SdsStreamSize;
        public ulong SdsAllocationSize;
        public ulong SiiStreamSize;
        public ulong SiiAllocationSize;
        public ulong SdhStreamSize;
        public ulong SdhAllocationSize;
        public ulong NumSDTotal;
        public ulong NumSDUnused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SD_ENUM_SDS_INPUT
    {
        public ulong StartingOffset;
        public ulong MaxSDEntriesToReturn;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SD_ENUM_SDS_ENTRY
    {
        public UInt32 Hash;
        public UInt32 SecurityId;
        public ulong Offset;
        public UInt32 Length;
        public fixed byte Descriptor[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SD_ENUM_SDS_OUTPUT
    {
        public ulong NextOffset;
        public ulong NumSDEntriesReturned;
        public ulong NumSDBytesReturned;
        public fixed byte/* _SD_ENUM_SDS_ENTRY, this length is invalid so must keep pointer and can't edit from C# */ SDEntry[1];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SD_GLOBAL_CHANGE_INPUT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _SD_CHANGE_MACHINE_SID_INPUT SdChange;
        [FieldOffset(0)]
        public _SD_QUERY_STATS_INPUT SdQueryStats;
        [FieldOffset(0)]
        public _SD_ENUM_SDS_INPUT SdEnumSds;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SD_GLOBAL_CHANGE_OUTPUT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
        [FieldOffset(0)]
        public _SD_QUERY_STATS_OUTPUT SdQueryStats;
        [FieldOffset(0)]
        public _SD_ENUM_SDS_OUTPUT SdEnumSds;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_LEVEL_TRIM_RANGE
    {
        public ulong Offset;
        public ulong Length;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CLUSTER_RANGE
    {
        public _LARGE_INTEGER StartingCluster;
        public _LARGE_INTEGER ClusterCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_REFERENCE_RANGE
    {
        public ulong StartingFileReferenceNumber;
        public ulong EndingFileReferenceNumber;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _QUERY_FILE_LAYOUT_INPUT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 FilterEntryCount;
        [FieldOffset(0)]
        public UInt32 NumberOfPairs;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _QUERY_FILE_LAYOUT_INPUT__bindgen_ty_2
    {
        [FieldOffset(0)]
        public fixed byte/* _CLUSTER_RANGE, this length is invalid so must keep pointer and can't edit from C# */ ClusterRanges[1];
        [FieldOffset(0)]
        public fixed byte/* _FILE_REFERENCE_RANGE, this length is invalid so must keep pointer and can't edit from C# */ FileReferenceRanges[1];
        [FieldOffset(0)]
        public fixed byte/* _STORAGE_RESERVE_ID, this length is invalid so must keep pointer and can't edit from C# */ StorageReserveIds[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_LAYOUT_INFO_ENTRY__bindgen_ty_1
    {
        public _LARGE_INTEGER CreationTime;
        public _LARGE_INTEGER LastAccessTime;
        public _LARGE_INTEGER LastWriteTime;
        public _LARGE_INTEGER ChangeTime;
        public UInt32 FileAttributes;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _STREAM_EXTENT_ENTRY__bindgen_ty_1
    {
        [FieldOffset(0)]
        public RETRIEVAL_POINTERS_BUFFER RetrievalPointers;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_REGION_INFO
    {
        public long FileOffset;
        public long Length;
        public UInt32 Usage;
        public UInt32 Reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_STORAGE_TIER
    {
        public _GUID Id;
        public fixed ushort Name[256];
        public fixed ushort Description[256];
        public ulong Flags;
        public ulong ProvisionedCapacity;
        public _FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
        public _FILE_STORAGE_TIER_CLASS Class;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _STREAM_INFORMATION_ENTRY__StreamInformation
    {
        [FieldOffset(0)]
        public _STREAM_INFORMATION_ENTRY__StreamInformation__DesiredStorageClass DesiredStorageClass;
        [FieldOffset(0)]
        public _STREAM_INFORMATION_ENTRY__StreamInformation__DataStream DataStream;
        [FieldOffset(0)]
        public _STREAM_INFORMATION_ENTRY__StreamInformation__Reparse Reparse;
        [FieldOffset(0)]
        public _STREAM_INFORMATION_ENTRY__StreamInformation__Ea Ea;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STREAM_INFORMATION_ENTRY__StreamInformation__DesiredStorageClass
    {
        public _FILE_STORAGE_TIER_CLASS Class;
        public UInt32 Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STREAM_INFORMATION_ENTRY__StreamInformation__DataStream
    {
        public ushort Length;
        public ushort Flags;
        public UInt32 Reserved;
        public ulong Vdl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STREAM_INFORMATION_ENTRY__StreamInformation__Reparse
    {
        public ushort Length;
        public ushort Flags;
        public UInt32 ReparseDataSize;
        public UInt32 ReparseDataOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _STREAM_INFORMATION_ENTRY__StreamInformation__Ea
    {
        public ushort Length;
        public ushort Flags;
        public UInt32 EaSize;
        public UInt32 EaInformationOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FILE_STORAGE_TIER_REGION
    {
        public _GUID TierId;
        public ulong Offset;
        public ulong Length;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _QUERY_BAD_RANGES_INPUT_RANGE
    {
        public ulong StartOffset;
        public ulong LengthInBytes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _QUERY_BAD_RANGES_OUTPUT_RANGE
    {
        public UInt32 Flags;
        public UInt32 Reserved;
        public ulong StartOffset;
        public ulong LengthInBytes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _DISK_EXTENT
    {
        public UInt32 DiskNumber;
        public _LARGE_INTEGER StartingOffset;
        public _LARGE_INTEGER ExtentLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCARD_IO_REQUEST
    {
        public UInt32 dwProtocol;
        public UInt32 cbPciLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCARD_T0_COMMAND
    {
        public byte bCla;
        public byte bIns;
        public byte bP1;
        public byte bP2;
        public byte bP3;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SCARD_T0_REQUEST__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _SCARD_T0_COMMAND CmdBytes;
        [FieldOffset(0)]
        public fixed byte rgbHeader[5];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct SCARD_READERSTATEA
    {
        public byte szReader;
        public void* pvUserData;
        public UInt32 dwCurrentState;
        public UInt32 dwEventState;
        public UInt32 cbAtr;
        public fixed byte rgbAtr[36];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct SCARD_READERSTATEW
    {
        public ushort szReader;
        public void* pvUserData;
        public UInt32 dwCurrentState;
        public UInt32 dwEventState;
        public UInt32 cbAtr;
        public fixed byte rgbAtr[36];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SCARD_ATRMASK
    {
        public UInt32 cbAtr;
        public fixed byte rgbAtr[36];
        public fixed byte rgbMask[36];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct OPENCARD_SEARCH_CRITERIAA
    {
        public UInt32 dwStructSize;
        public byte lpstrGroupNames;
        public UInt32 nMaxGroupNames;
        public _GUID rgguidInterfaces;
        public UInt32 cguidInterfaces;
        public byte lpstrCardNames;
        public UInt32 nMaxCardNames;
        public Option lpfnCheck;
        public Option lpfnConnect;
        public Option lpfnDisconnect;
        public void* pvUserData;
        public UInt32 dwShareMode;
        public UInt32 dwPreferredProtocols;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct OPENCARD_SEARCH_CRITERIAW
    {
        public UInt32 dwStructSize;
        public ushort lpstrGroupNames;
        public UInt32 nMaxGroupNames;
        public _GUID rgguidInterfaces;
        public UInt32 cguidInterfaces;
        public ushort lpstrCardNames;
        public UInt32 nMaxCardNames;
        public Option lpfnCheck;
        public Option lpfnConnect;
        public Option lpfnDisconnect;
        public void* pvUserData;
        public UInt32 dwShareMode;
        public UInt32 dwPreferredProtocols;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct OPENCARDNAME_EXA
    {
        public UInt32 dwStructSize;
        public ulong hSCardContext;
        public HWND__* hwndOwner;
        public UInt32 dwFlags;
        public byte lpstrTitle;
        public byte lpstrSearchDesc;
        public HICON__* hIcon;
        public OPENCARD_SEARCH_CRITERIAA* pOpenCardSearchCriteria;
        public Option lpfnConnect;
        public void* pvUserData;
        public UInt32 dwShareMode;
        public UInt32 dwPreferredProtocols;
        public byte lpstrRdr;
        public UInt32 nMaxRdr;
        public byte lpstrCard;
        public UInt32 nMaxCard;
        public UInt32 dwActiveProtocol;
        public ulong hCardHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct OPENCARDNAME_EXW
    {
        public UInt32 dwStructSize;
        public ulong hSCardContext;
        public HWND__* hwndOwner;
        public UInt32 dwFlags;
        public ushort lpstrTitle;
        public ushort lpstrSearchDesc;
        public HICON__* hIcon;
        public OPENCARD_SEARCH_CRITERIAW* pOpenCardSearchCriteria;
        public Option lpfnConnect;
        public void* pvUserData;
        public UInt32 dwShareMode;
        public UInt32 dwPreferredProtocols;
        public ushort lpstrRdr;
        public UInt32 nMaxRdr;
        public ushort lpstrCard;
        public UInt32 nMaxCard;
        public UInt32 dwActiveProtocol;
        public ulong hCardHandle;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct READER_SEL_REQUEST__bindgen_ty_1
    {
        [FieldOffset(0)]
        public READER_SEL_REQUEST__bindgen_ty_1__bindgen_ty_1 ReaderAndContainerParameter;
        [FieldOffset(0)]
        public READER_SEL_REQUEST__bindgen_ty_1__bindgen_ty_2 SerialNumberParameter;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct READER_SEL_REQUEST__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 cbReaderNameOffset;
        public UInt32 cchReaderNameLength;
        public UInt32 cbContainerNameOffset;
        public UInt32 cchContainerNameLength;
        public UInt32 dwDesiredCardModuleVersion;
        public UInt32 dwCspFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct READER_SEL_REQUEST__bindgen_ty_1__bindgen_ty_2
    {
        public UInt32 cbSerialNumberOffset;
        public UInt32 cbSerialNumberLength;
        public UInt32 dwDesiredCardModuleVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct OPENCARDNAMEA
    {
        public UInt32 dwStructSize;
        public HWND__* hwndOwner;
        public ulong hSCardContext;
        public byte lpstrGroupNames;
        public UInt32 nMaxGroupNames;
        public byte lpstrCardNames;
        public UInt32 nMaxCardNames;
        public _GUID rgguidInterfaces;
        public UInt32 cguidInterfaces;
        public byte lpstrRdr;
        public UInt32 nMaxRdr;
        public byte lpstrCard;
        public UInt32 nMaxCard;
        public byte lpstrTitle;
        public UInt32 dwFlags;
        public void* pvUserData;
        public UInt32 dwShareMode;
        public UInt32 dwPreferredProtocols;
        public UInt32 dwActiveProtocol;
        public Option lpfnConnect;
        public Option lpfnCheck;
        public Option lpfnDisconnect;
        public ulong hCardHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct OPENCARDNAMEW
    {
        public UInt32 dwStructSize;
        public HWND__* hwndOwner;
        public ulong hSCardContext;
        public ushort lpstrGroupNames;
        public UInt32 nMaxGroupNames;
        public ushort lpstrCardNames;
        public UInt32 nMaxCardNames;
        public _GUID rgguidInterfaces;
        public UInt32 cguidInterfaces;
        public ushort lpstrRdr;
        public UInt32 nMaxRdr;
        public ushort lpstrCard;
        public UInt32 nMaxCard;
        public ushort lpstrTitle;
        public UInt32 dwFlags;
        public void* pvUserData;
        public UInt32 dwShareMode;
        public UInt32 dwPreferredProtocols;
        public UInt32 dwActiveProtocol;
        public Option lpfnConnect;
        public Option lpfnCheck;
        public Option lpfnDisconnect;
        public ulong hCardHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PSP
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA_V1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte pszTemplate;
        [FieldOffset(0)]
        public DLGTEMPLATE* pResource;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA_V1__bindgen_ty_2
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public byte pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA_V2__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte pszTemplate;
        [FieldOffset(0)]
        public DLGTEMPLATE* pResource;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA_V2__bindgen_ty_2
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public byte pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA_V3__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte pszTemplate;
        [FieldOffset(0)]
        public DLGTEMPLATE* pResource;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA_V3__bindgen_ty_2
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public byte pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte pszTemplate;
        [FieldOffset(0)]
        public DLGTEMPLATE* pResource;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA__bindgen_ty_2
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public byte pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEA__bindgen_ty_3
    {
        [FieldOffset(0)]
        public HBITMAP__* hbmHeader;
        [FieldOffset(0)]
        public byte pszbmHeader;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW_V1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort pszTemplate;
        [FieldOffset(0)]
        public DLGTEMPLATE* pResource;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW_V1__bindgen_ty_2
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public ushort pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW_V2__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort pszTemplate;
        [FieldOffset(0)]
        public DLGTEMPLATE* pResource;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW_V2__bindgen_ty_2
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public ushort pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW_V3__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort pszTemplate;
        [FieldOffset(0)]
        public DLGTEMPLATE* pResource;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW_V3__bindgen_ty_2
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public ushort pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW__bindgen_ty_1
    {
        [FieldOffset(0)]
        public ushort pszTemplate;
        [FieldOffset(0)]
        public DLGTEMPLATE* pResource;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW__bindgen_ty_2
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public ushort pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETPAGEW__bindgen_ty_3
    {
        [FieldOffset(0)]
        public HBITMAP__* hbmHeader;
        [FieldOffset(0)]
        public ushort pszbmHeader;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERA_V1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public byte pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERA_V1__bindgen_ty_2
    {
        [FieldOffset(0)]
        public uint nStartPage;
        [FieldOffset(0)]
        public byte pStartPage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERA_V1__bindgen_ty_3
    {
        [FieldOffset(0)]
        public LPCPROPSHEETPAGEA_V4 ppsp;
        [FieldOffset(0)]
        public _PSP** phpage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERA_V2__bindgen_ty_1
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public byte pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERA_V2__bindgen_ty_2
    {
        [FieldOffset(0)]
        public uint nStartPage;
        [FieldOffset(0)]
        public byte pStartPage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERA_V2__bindgen_ty_3
    {
        [FieldOffset(0)]
        public LPCPROPSHEETPAGEA_V4 ppsp;
        [FieldOffset(0)]
        public _PSP** phpage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERA_V2__bindgen_ty_4
    {
        [FieldOffset(0)]
        public HBITMAP__* hbmWatermark;
        [FieldOffset(0)]
        public byte pszbmWatermark;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERA_V2__bindgen_ty_5
    {
        [FieldOffset(0)]
        public HBITMAP__* hbmHeader;
        [FieldOffset(0)]
        public byte pszbmHeader;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERW_V1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public ushort pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERW_V1__bindgen_ty_2
    {
        [FieldOffset(0)]
        public uint nStartPage;
        [FieldOffset(0)]
        public ushort pStartPage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERW_V1__bindgen_ty_3
    {
        [FieldOffset(0)]
        public LPCPROPSHEETPAGEW_V4 ppsp;
        [FieldOffset(0)]
        public _PSP** phpage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERW_V2__bindgen_ty_1
    {
        [FieldOffset(0)]
        public HICON__* hIcon;
        [FieldOffset(0)]
        public ushort pszIcon;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERW_V2__bindgen_ty_2
    {
        [FieldOffset(0)]
        public uint nStartPage;
        [FieldOffset(0)]
        public ushort pStartPage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERW_V2__bindgen_ty_3
    {
        [FieldOffset(0)]
        public LPCPROPSHEETPAGEW_V4 ppsp;
        [FieldOffset(0)]
        public _PSP** phpage;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERW_V2__bindgen_ty_4
    {
        [FieldOffset(0)]
        public HBITMAP__* hbmWatermark;
        [FieldOffset(0)]
        public ushort pszbmWatermark;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PROPSHEETHEADERW_V2__bindgen_ty_5
    {
        [FieldOffset(0)]
        public HBITMAP__* hbmHeader;
        [FieldOffset(0)]
        public ushort pszbmHeader;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRINTER_DEFAULTSA
    {
        public byte pDatatype;
        public _devicemodeA* pDevMode;
        public UInt32 DesiredAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRINTER_DEFAULTSW
    {
        public ushort pDatatype;
        public _devicemodeW* pDevMode;
        public UInt32 DesiredAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRINTER_NOTIFY_OPTIONS_TYPE
    {
        public ushort Type;
        public ushort Reserved0;
        public UInt32 Reserved1;
        public UInt32 Reserved2;
        public UInt32 Count;
        public ushort pFields;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRINTER_NOTIFY_INFO_DATA
    {
        public ushort Type;
        public ushort Field;
        public UInt32 Reserved;
        public UInt32 Id;
        public _PRINTER_NOTIFY_INFO_DATA__bindgen_ty_1 NotifyData;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _PRINTER_NOTIFY_INFO_DATA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ adwData[2];
        [FieldOffset(0)]
        public _PRINTER_NOTIFY_INFO_DATA__bindgen_ty_1__bindgen_ty_1 Data;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRINTER_NOTIFY_INFO_DATA__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 cbBuf;
        public void* pBuf;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRINTER_NOTIFY_INFO
    {
        public UInt32 Version;
        public UInt32 Flags;
        public UInt32 Count;
        public fixed byte/* _PRINTER_NOTIFY_INFO_DATA, this length is invalid so must keep pointer and can't edit from C# */ aData[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BINARY_CONTAINER
    {
        public UInt32 cbBuf;
        public byte pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BIDI_DATA
    {
        public UInt32 dwBidiType;
        public _BIDI_DATA__bindgen_ty_1 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _BIDI_DATA__bindgen_ty_1
    {
        [FieldOffset(0)]
        public int bData;
        [FieldOffset(0)]
        public Int32 iData;
        [FieldOffset(0)]
        public ushort sData;
        [FieldOffset(0)]
        public float fData;
        [FieldOffset(0)]
        public _BINARY_CONTAINER biData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BIDI_REQUEST_DATA
    {
        public UInt32 dwReqNumber;
        public ushort pSchema;
        public _BIDI_DATA data;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _BIDI_RESPONSE_DATA
    {
        public UInt32 dwResult;
        public UInt32 dwReqNumber;
        public ushort pSchema;
        public _BIDI_DATA data;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRINTER_OPTIONSA
    {
        public uint cbSize;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _PRINTER_OPTIONSW
    {
        public uint cbSize;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CORE_PRINTER_DRIVERA
    {
        public _GUID CoreDriverGUID;
        public _FILETIME ftDriverDate;
        public ulong dwlDriverVersion;
        public fixed byte szPackageID[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CORE_PRINTER_DRIVERW
    {
        public _GUID CoreDriverGUID;
        public _FILETIME ftDriverDate;
        public ulong dwlDriverVersion;
        public fixed ushort szPackageID[260];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PrintPropertyValue
    {
        public int ePropertyType;
        public PrintPropertyValue__bindgen_ty_1 value;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct PrintPropertyValue__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte propertyByte;
        [FieldOffset(0)]
        public ushort propertyString;
        [FieldOffset(0)]
        public Int32 propertyInt32;
        [FieldOffset(0)]
        public long propertyInt64;
        [FieldOffset(0)]
        public PrintPropertyValue__bindgen_ty_1__bindgen_ty_1 propertyBlob;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PrintPropertyValue__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 cbBuf;
        public void* pBuf;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PrintNamedProperty
    {
        public ushort* propertyName;
        public PrintPropertyValue propertyValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct PRINT_EXECUTION_DATA
    {
        public int context;
        public UInt32 clientAppPID;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _div_t
    {
        public int quot;
        public int rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ldiv_t
    {
        public Int32 quot;
        public Int32 rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _lldiv_t
    {
        public long quot;
        public long rem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _LDOUBLE
    {
        public fixed byte ld[10];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRT_DOUBLE
    {
        public double x;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CRT_FLOAT
    {
        public float f;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUnknownVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUnknown
    {
        public IUnknownVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIUnknownVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Begin_QueryInterface;
        public Option Finish_QueryInterface;
        public Option Begin_AddRef;
        public Option Finish_AddRef;
        public Option Begin_Release;
        public Option Finish_Release;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IClassFactoryVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateInstance;
        public Option LockServer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IClassFactory
    {
        public IClassFactoryVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _COSERVERINFO
    {
        public UInt32 dwReserved1;
        public ushort pwszName;
        public _COAUTHINFO* pAuthInfo;
        public UInt32 dwReserved2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMarshalVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetUnmarshalClass;
        public Option GetMarshalSizeMax;
        public Option MarshalInterface;
        public Option UnmarshalInterface;
        public Option ReleaseMarshalData;
        public Option DisconnectObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMarshal
    {
        public IMarshalVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct INoMarshalVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAgileObjectVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IActivationFilterVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option HandleActivation;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IActivationFilter
    {
        public IActivationFilterVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMarshal2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetUnmarshalClass;
        public Option GetMarshalSizeMax;
        public Option MarshalInterface;
        public Option UnmarshalInterface;
        public Option ReleaseMarshalData;
        public Option DisconnectObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMallocVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Alloc;
        public Option Realloc;
        public Option Free;
        public Option GetSize;
        public Option DidAlloc;
        public Option HeapMinimize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMalloc
    {
        public IMallocVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IStdMarshalInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetClassForHandler;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IExternalConnectionVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option AddConnection;
        public Option ReleaseConnection;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMULTI_QI
    {
        public _GUID* pIID;
        public IUnknown* pItf;
        public Int32 hr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMultiQIVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option QueryMultipleInterfaces;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIMultiQIVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Begin_QueryMultipleInterfaces;
        public Option Finish_QueryMultipleInterfaces;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternalUnknownVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option QueryInternalInterface;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumUnknownVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumUnknown
    {
        public IEnumUnknownVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumStringVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumString
    {
        public IEnumStringVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISequentialStreamVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Read;
        public Option Write;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISequentialStream
    {
        public ISequentialStreamVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSTATSTG
    {
        public ushort pwcsName;
        public UInt32 type_;
        public _ULARGE_INTEGER cbSize;
        public _FILETIME mtime;
        public _FILETIME ctime;
        public _FILETIME atime;
        public UInt32 grfMode;
        public UInt32 grfLocksSupported;
        public _GUID clsid;
        public UInt32 grfStateBits;
        public UInt32 reserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IStreamVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Read;
        public Option Write;
        public Option Seek;
        public Option SetSize;
        public Option CopyTo;
        public Option Commit;
        public Option Revert;
        public Option LockRegion;
        public Option UnlockRegion;
        public Option Stat;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IStream
    {
        public IStreamVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcChannelBufferVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetBuffer;
        public Option SendReceive;
        public Option FreeBuffer;
        public Option GetDestCtx;
        public Option IsConnected;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcChannelBuffer
    {
        public IRpcChannelBufferVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcChannelBuffer2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetBuffer;
        public Option SendReceive;
        public Option FreeBuffer;
        public Option GetDestCtx;
        public Option IsConnected;
        public Option GetProtocolVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAsyncRpcChannelBufferVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetBuffer;
        public Option SendReceive;
        public Option FreeBuffer;
        public Option GetDestCtx;
        public Option IsConnected;
        public Option GetProtocolVersion;
        public Option Send;
        public Option Receive;
        public Option GetDestCtxEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcChannelBuffer3Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetBuffer;
        public Option SendReceive;
        public Option FreeBuffer;
        public Option GetDestCtx;
        public Option IsConnected;
        public Option GetProtocolVersion;
        public Option Send;
        public Option Receive;
        public Option Cancel;
        public Option GetCallContext;
        public Option GetDestCtxEx;
        public Option GetState;
        public Option RegisterAsync;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcSyntaxNegotiateVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option NegotiateSyntax;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcProxyBufferVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Connect;
        public Option Disconnect;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcStubBufferVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Connect;
        public Option Disconnect;
        public Option Invoke;
        public Option IsIIDSupported;
        public Option CountRefs;
        public Option DebugServerQueryInterface;
        public Option DebugServerRelease;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcStubBuffer
    {
        public IRpcStubBufferVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPSFactoryBufferVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateProxy;
        public Option CreateStub;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IChannelHookVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ClientGetSize;
        public Option ClientFillBuffer;
        public Option ClientNotify;
        public Option ServerNotify;
        public Option ServerGetSize;
        public Option ServerFillBuffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IChannelHook
    {
        public IChannelHookVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSOLE_AUTHENTICATION_SERVICE
    {
        public UInt32 dwAuthnSvc;
        public UInt32 dwAuthzSvc;
        public ushort* pPrincipalName;
        public Int32 hr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSOLE_AUTHENTICATION_INFO
    {
        public UInt32 dwAuthnSvc;
        public UInt32 dwAuthzSvc;
        public void* pAuthInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IClientSecurityVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option QueryBlanket;
        public Option SetBlanket;
        public Option CopyProxy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IServerSecurityVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option QueryBlanket;
        public Option ImpersonateClient;
        public Option RevertToSelf;
        public Option IsImpersonating;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcOptionsVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Set;
        public Option Query;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IGlobalOptionsVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Set;
        public Option Query;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISurrogateVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option LoadDllServer;
        public Option FreeSurrogate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISurrogate
    {
        public ISurrogateVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IGlobalInterfaceTableVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option RegisterInterfaceInGlobal;
        public Option RevokeInterfaceFromGlobal;
        public Option GetInterfaceFromGlobal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISynchronizeVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Wait;
        public Option Signal;
        public Option Reset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISynchronizeHandleVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISynchronizeEventVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetHandle;
        public Option SetEventHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISynchronizeContainerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option AddSynchronize;
        public Option WaitMultiple;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISynchronizeMutexVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Wait;
        public Option Signal;
        public Option Reset;
        public Option ReleaseMutex;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICancelMethodCallsVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Cancel;
        public Option TestCancel;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAsyncManagerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CompleteCall;
        public Option GetCallContext;
        public Option GetState;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICallFactoryVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateCall;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRpcHelperVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetDCOMProtocolVersion;
        public Option GetIIDFromOBJREF;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IReleaseMarshalBuffersVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ReleaseMarshalBuffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWaitMultipleVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option WaitMultiple;
        public Option AddSynchronize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAddrTrackingControlVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option EnableCOMDynamicAddrTracking;
        public Option DisableCOMDynamicAddrTracking;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAddrExclusionControlVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetCurrentAddrExclusionList;
        public Option UpdateAddrExclusionList;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPipeByteVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Pull;
        public Option Push;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIPipeByteVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Begin_Pull;
        public Option Finish_Pull;
        public Option Begin_Push;
        public Option Finish_Push;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPipeLongVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Pull;
        public Option Push;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIPipeLongVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Begin_Pull;
        public Option Finish_Pull;
        public Option Begin_Push;
        public Option Finish_Push;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPipeDoubleVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Pull;
        public Option Push;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIPipeDoubleVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Begin_Pull;
        public Option Finish_Pull;
        public Option Begin_Push;
        public Option Finish_Push;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IComThreadingInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetCurrentApartmentType;
        public Option GetCurrentThreadType;
        public Option GetCurrentLogicalThreadId;
        public Option SetCurrentLogicalThreadId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IProcessInitControlVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ResetInitializerTimeout;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IFastRundownVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMarshalingStreamVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Read;
        public Option Write;
        public Option Seek;
        public Option SetSize;
        public Option CopyTo;
        public Option Commit;
        public Option Revert;
        public Option LockRegion;
        public Option UnlockRegion;
        public Option Stat;
        public Option Clone;
        public Option GetMarshalingContextAttribute;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAgileReferenceVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Resolve;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAgileReference
    {
        public IAgileReferenceVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagServerInformation
    {
        public UInt32 dwServerPid;
        public UInt32 dwServerTid;
        public ulong ui64ServerAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct CO_MTA_USAGE_COOKIE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct CO_DEVICE_CATALOG_COOKIE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMallocSpyVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option PreAlloc;
        public Option PostAlloc;
        public Option PreFree;
        public Option PostFree;
        public Option PreRealloc;
        public Option PostRealloc;
        public Option PreGetSize;
        public Option PostGetSize;
        public Option PreDidAlloc;
        public Option PostDidAlloc;
        public Option PreHeapMinimize;
        public Option PostHeapMinimize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMallocSpy
    {
        public IMallocSpyVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBIND_OPTS
    {
        public UInt32 cbStruct;
        public UInt32 grfFlags;
        public UInt32 grfMode;
        public UInt32 dwTickCountDeadline;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagBIND_OPTS2
    {
        public UInt32 cbStruct;
        public UInt32 grfFlags;
        public UInt32 grfMode;
        public UInt32 dwTickCountDeadline;
        public UInt32 dwTrackFlags;
        public UInt32 dwClassContext;
        public UInt32 locale;
        public _COSERVERINFO* pServerInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindCtxVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option RegisterObjectBound;
        public Option RevokeObjectBound;
        public Option ReleaseBoundObjects;
        public Option SetBindOptions;
        public Option GetBindOptions;
        public Option GetRunningObjectTable;
        public Option RegisterObjectParam;
        public Option GetObjectParam;
        public Option EnumObjectParam;
        public Option RevokeObjectParam;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindCtx
    {
        public IBindCtxVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumMonikerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumMoniker
    {
        public IEnumMonikerVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRunnableObjectVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetRunningClass;
        public Option Run;
        public Option IsRunning;
        public Option LockRunning;
        public Option SetContainedObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRunnableObject
    {
        public IRunnableObjectVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRunningObjectTableVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Register;
        public Option Revoke;
        public Option IsRunning;
        public Option GetObjectA;
        public Option NoteChangeTime;
        public Option GetTimeOfLastChange;
        public Option EnumRunning;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRunningObjectTable
    {
        public IRunningObjectTableVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPersistVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetClassID;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPersistStreamVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetClassID;
        public Option IsDirty;
        public Option Load;
        public Option Save;
        public Option GetSizeMax;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPersistStream
    {
        public IPersistStreamVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMonikerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetClassID;
        public Option IsDirty;
        public Option Load;
        public Option Save;
        public Option GetSizeMax;
        public Option BindToObject;
        public Option BindToStorage;
        public Option Reduce;
        public Option ComposeWith;
        public Option Enum;
        public Option IsEqual;
        public Option Hash;
        public Option IsRunning;
        public Option GetTimeOfLastChange;
        public Option Inverse;
        public Option CommonPrefixWith;
        public Option RelativePathTo;
        public Option GetDisplayName;
        public Option ParseDisplayName;
        public Option IsSystemMoniker;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMoniker
    {
        public IMonikerVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IROTDataVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetComparisonData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumSTATSTGVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumSTATSTG
    {
        public IEnumSTATSTGVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IStorageVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateStream;
        public Option OpenStream;
        public Option CreateStorage;
        public Option OpenStorage;
        public Option CopyTo;
        public Option MoveElementTo;
        public Option Commit;
        public Option Revert;
        public Option EnumElements;
        public Option DestroyElement;
        public Option RenameElement;
        public Option SetElementTimes;
        public Option SetClass;
        public Option SetStateBits;
        public Option Stat;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IStorage
    {
        public IStorageVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPersistFileVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetClassID;
        public Option IsDirty;
        public Option Load;
        public Option Save;
        public Option SaveCompleted;
        public Option GetCurFile;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPersistStorageVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetClassID;
        public Option IsDirty;
        public Option InitNew;
        public Option Load;
        public Option Save;
        public Option SaveCompleted;
        public Option HandsOffStorage;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPersistStorage
    {
        public IPersistStorageVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ILockBytesVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ReadAt;
        public Option WriteAt;
        public Option Flush;
        public Option SetSize;
        public Option LockRegion;
        public Option UnlockRegion;
        public Option Stat;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ILockBytes
    {
        public ILockBytesVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagDVTARGETDEVICE
    {
        public UInt32 tdSize;
        public ushort tdDriverNameOffset;
        public ushort tdDeviceNameOffset;
        public ushort tdPortNameOffset;
        public ushort tdExtDevmodeOffset;
        public fixed byte tdData[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagFORMATETC
    {
        public ushort cfFormat;
        public tagDVTARGETDEVICE* ptd;
        public UInt32 dwAspect;
        public Int32 lindex;
        public UInt32 tymed;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumFORMATETCVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumFORMATETC
    {
        public IEnumFORMATETCVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSTATDATA
    {
        public tagFORMATETC formatetc;
        public UInt32 advf;
        public IAdviseSink* pAdvSink;
        public UInt32 dwConnection;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumSTATDATAVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumSTATDATA
    {
        public IEnumSTATDATAVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRootStorageVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SwitchToFile;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRemSTGMEDIUM
    {
        public UInt32 tymed;
        public UInt32 dwHandleType;
        public UInt32 pData;
        public UInt32 pUnkForRelease;
        public UInt32 cbData;
        public fixed byte data[1];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagSTGMEDIUM__bindgen_ty_1
    {
        [FieldOffset(0)]
        public HBITMAP__* hBitmap;
        [FieldOffset(0)]
        public void* hMetaFilePict;
        [FieldOffset(0)]
        public HENHMETAFILE__* hEnhMetaFile;
        [FieldOffset(0)]
        public void* hGlobal;
        [FieldOffset(0)]
        public ushort lpszFileName;
        [FieldOffset(0)]
        public IStream* pstm;
        [FieldOffset(0)]
        public IStorage* pstg;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _GDI_OBJECT
    {
        public UInt32 ObjectType;
        public _GDI_OBJECT___MIDL_IAdviseSink_0002 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _GDI_OBJECT___MIDL_IAdviseSink_0002
    {
        [FieldOffset(0)]
        public userHBITMAP* hBitmap;
        [FieldOffset(0)]
        public userHPALETTE* hPalette;
        [FieldOffset(0)]
        public userHGLOBAL* hGeneric;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _userSTGMEDIUM
    {
        public fixed ulong __bindgen_padding_0[2];
        public IUnknown* pUnkForRelease;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _userSTGMEDIUM__STGMEDIUM_UNION___MIDL_IAdviseSink_0003
    {
        [FieldOffset(0)]
        public userHMETAFILEPICT* hMetaFilePict;
        [FieldOffset(0)]
        public userHENHMETAFILE* hHEnhMetaFile;
        [FieldOffset(0)]
        public _GDI_OBJECT* hGdiHandle;
        [FieldOffset(0)]
        public userHGLOBAL* hGlobal;
        [FieldOffset(0)]
        public ushort lpszFileName;
        [FieldOffset(0)]
        public _BYTE_BLOB* pstm;
        [FieldOffset(0)]
        public _BYTE_BLOB* pstg;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _FLAG_STGMEDIUM
    {
        public Int32 ContextFlags;
        public Int32 fPassOwnership;
        public uSTGMEDIUM Stgmed;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAdviseSinkVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option OnDataChange;
        public Option OnViewChange;
        public Option OnRename;
        public Option OnSave;
        public Option OnClose;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAdviseSink
    {
        public IAdviseSinkVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIAdviseSinkVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Begin_OnDataChange;
        public Option Finish_OnDataChange;
        public Option Begin_OnViewChange;
        public Option Finish_OnViewChange;
        public Option Begin_OnRename;
        public Option Finish_OnRename;
        public Option Begin_OnSave;
        public Option Finish_OnSave;
        public Option Begin_OnClose;
        public Option Finish_OnClose;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIAdviseSink
    {
        public AsyncIAdviseSinkVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAdviseSink2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option OnDataChange;
        public Option OnViewChange;
        public Option OnRename;
        public Option OnSave;
        public Option OnClose;
        public Option OnLinkSrcChange;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAdviseSink2
    {
        public IAdviseSink2Vtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIAdviseSink2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Begin_OnDataChange;
        public Option Finish_OnDataChange;
        public Option Begin_OnViewChange;
        public Option Finish_OnViewChange;
        public Option Begin_OnRename;
        public Option Finish_OnRename;
        public Option Begin_OnSave;
        public Option Finish_OnSave;
        public Option Begin_OnClose;
        public Option Finish_OnClose;
        public Option Begin_OnLinkSrcChange;
        public Option Finish_OnLinkSrcChange;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct AsyncIAdviseSink2
    {
        public AsyncIAdviseSink2Vtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDataObjectVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetData;
        public Option GetDataHere;
        public Option QueryGetData;
        public Option GetCanonicalFormatEtc;
        public Option SetData;
        public Option EnumFormatEtc;
        public Option DAdvise;
        public Option DUnadvise;
        public Option EnumDAdvise;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDataObject
    {
        public IDataObjectVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDataAdviseHolderVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Advise;
        public Option Unadvise;
        public Option EnumAdvise;
        public Option SendOnDataChange;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDataAdviseHolder
    {
        public IDataAdviseHolderVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMessageFilterVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option HandleInComingCall;
        public Option RetryRejectedCall;
        public Option MessagePending;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMessageFilter
    {
        public IMessageFilterVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IClassActivatorVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetClassObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IFillLockBytesVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option FillAppend;
        public Option FillAt;
        public Option SetFillSize;
        public Option Terminate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IFillLockBytes
    {
        public IFillLockBytesVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IProgressNotifyVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option OnProgress;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ILayoutStorageVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option LayoutScript;
        public Option BeginMonitor;
        public Option EndMonitor;
        public Option ReLayoutDocfile;
        public Option ReLayoutDocfileOnILockBytes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBlockingLockVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Lock;
        public Option Unlock;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITimeAndNoticeControlVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SuppressChanges;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOplockStorageVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateStorageEx;
        public Option OpenStorageEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDirectWriterLockVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option WaitForWriteAccess;
        public Option ReleaseWriteAccess;
        public Option HaveWriteAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUrlMonVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option AsyncGetClassBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IForegroundTransferVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option AllowForegroundTransfer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IThumbnailExtractorVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ExtractThumbnail;
        public Option OnFileUpdated;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDummyHICONIncluderVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Dummy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IProcessLockVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option AddRefOnProcess;
        public Option ReleaseRefOnProcess;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISurrogateServiceVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Init;
        public Option ApplicationLaunch;
        public Option ApplicationFree;
        public Option CatalogRefresh;
        public Option ProcessShutdown;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInitializeSpyVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option PreInitialize;
        public Option PostInitialize;
        public Option PreUninitialize;
        public Option PostUninitialize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInitializeSpy
    {
        public IInitializeSpyVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IApartmentShutdownVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option OnUninitialize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSAFEARRAYBOUND
    {
        public UInt32 cElements;
        public Int32 lLbound;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireSAFEARR_BSTR
    {
        public UInt32 Size;
        public FLAGGED_WORD_BLOB** aBstr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireSAFEARR_UNKNOWN
    {
        public UInt32 Size;
        public IUnknown** apUnknown;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireSAFEARR_DISPATCH
    {
        public UInt32 Size;
        public IDispatch** apDispatch;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireSAFEARR_VARIANT
    {
        public UInt32 Size;
        public _wireVARIANT** aVariant;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireSAFEARR_BRECORD
    {
        public UInt32 Size;
        public _wireBRECORD** aRecord;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireSAFEARR_HAVEIID
    {
        public UInt32 Size;
        public IUnknown** apUnknown;
        public _GUID iid;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireSAFEARRAY_UNION
    {
        public UInt32 sfType;
        public _wireSAFEARRAY_UNION___MIDL_IOleAutomationTypes_0001 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _wireSAFEARRAY_UNION___MIDL_IOleAutomationTypes_0001
    {
        [FieldOffset(0)]
        public _wireSAFEARR_BSTR BstrStr;
        [FieldOffset(0)]
        public _wireSAFEARR_UNKNOWN UnknownStr;
        [FieldOffset(0)]
        public _wireSAFEARR_DISPATCH DispatchStr;
        [FieldOffset(0)]
        public _wireSAFEARR_VARIANT VariantStr;
        [FieldOffset(0)]
        public _wireSAFEARR_BRECORD RecordStr;
        [FieldOffset(0)]
        public _wireSAFEARR_HAVEIID HaveIidStr;
        [FieldOffset(0)]
        public _BYTE_SIZEDARR ByteStr;
        [FieldOffset(0)]
        public _SHORT_SIZEDARR WordStr;
        [FieldOffset(0)]
        public _LONG_SIZEDARR LongStr;
        [FieldOffset(0)]
        public _HYPER_SIZEDARR HyperStr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSAFEARRAY
    {
        public ushort cDims;
        public ushort fFeatures;
        public UInt32 cbElements;
        public UInt32 cLocks;
        public void* pvData;
        public fixed byte/* tagSAFEARRAYBOUND, this length is invalid so must keep pointer and can't edit from C# */ rgsabound[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagVARIANT
    {
        public tagVARIANT__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagVARIANT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagVARIANT__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public tagDEC decVal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagVARIANT__bindgen_ty_1__bindgen_ty_1
    {
        public ushort vt;
        public ushort wReserved1;
        public ushort wReserved2;
        public ushort wReserved3;
        public tagVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public long llVal;
        [FieldOffset(0)]
        public Int32 lVal;
        [FieldOffset(0)]
        public byte bVal;
        [FieldOffset(0)]
        public short iVal;
        [FieldOffset(0)]
        public float fltVal;
        [FieldOffset(0)]
        public double dblVal;
        [FieldOffset(0)]
        public short boolVal;
        [FieldOffset(0)]
        public short __OBSOLETE__VARIANT_BOOL;
        [FieldOffset(0)]
        public Int32 scode;
        [FieldOffset(0)]
        public tagCY cyVal;
        [FieldOffset(0)]
        public double date;
        [FieldOffset(0)]
        public ushort bstrVal;
        [FieldOffset(0)]
        public IUnknown* punkVal;
        [FieldOffset(0)]
        public IDispatch* pdispVal;
        [FieldOffset(0)]
        public tagSAFEARRAY* parray;
        [FieldOffset(0)]
        public byte* pbVal;
        [FieldOffset(0)]
        public short* piVal;
        [FieldOffset(0)]
        public Int32* plVal;
        [FieldOffset(0)]
        public long* pllVal;
        [FieldOffset(0)]
        public float* pfltVal;
        [FieldOffset(0)]
        public double* pdblVal;
        [FieldOffset(0)]
        public short* pboolVal;
        [FieldOffset(0)]
        public short* __OBSOLETE__VARIANT_PBOOL;
        [FieldOffset(0)]
        public Int32* pscode;
        [FieldOffset(0)]
        public tagCY* pcyVal;
        [FieldOffset(0)]
        public double* pdate;
        [FieldOffset(0)]
        public ushort* pbstrVal;
        [FieldOffset(0)]
        public IUnknown** ppunkVal;
        [FieldOffset(0)]
        public IDispatch** ppdispVal;
        [FieldOffset(0)]
        public tagSAFEARRAY** pparray;
        [FieldOffset(0)]
        public tagVARIANT* pvarVal;
        [FieldOffset(0)]
        public void* byref;
        [FieldOffset(0)]
        public byte cVal;
        [FieldOffset(0)]
        public ushort uiVal;
        [FieldOffset(0)]
        public UInt32 ulVal;
        [FieldOffset(0)]
        public ulong ullVal;
        [FieldOffset(0)]
        public int intVal;
        [FieldOffset(0)]
        public uint uintVal;
        [FieldOffset(0)]
        public tagDEC* pdecVal;
        [FieldOffset(0)]
        public byte* pcVal;
        [FieldOffset(0)]
        public ushort* puiVal;
        [FieldOffset(0)]
        public UInt32* pulVal;
        [FieldOffset(0)]
        public ulong* pullVal;
        [FieldOffset(0)]
        public int* pintVal;
        [FieldOffset(0)]
        public uint* puintVal;
        [FieldOffset(0)]
        public tagVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
    {
        public void* pvRecord;
        public IRecordInfo* pRecInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireBRECORD
    {
        public UInt32 fFlags;
        public UInt32 clSize;
        public IRecordInfo* pRecInfo;
        public byte* pRecord;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _wireVARIANT
    {
        public UInt32 clSize;
        public UInt32 rpcReserved;
        public ushort vt;
        public ushort wReserved1;
        public ushort wReserved2;
        public ushort wReserved3;
        public _wireVARIANT__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _wireVARIANT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public long llVal;
        [FieldOffset(0)]
        public Int32 lVal;
        [FieldOffset(0)]
        public byte bVal;
        [FieldOffset(0)]
        public short iVal;
        [FieldOffset(0)]
        public float fltVal;
        [FieldOffset(0)]
        public double dblVal;
        [FieldOffset(0)]
        public short boolVal;
        [FieldOffset(0)]
        public Int32 scode;
        [FieldOffset(0)]
        public tagCY cyVal;
        [FieldOffset(0)]
        public double date;
        [FieldOffset(0)]
        public FLAGGED_WORD_BLOB* bstrVal;
        [FieldOffset(0)]
        public IUnknown* punkVal;
        [FieldOffset(0)]
        public IDispatch* pdispVal;
        [FieldOffset(0)]
        public wireSAFEARRAY* parray;
        [FieldOffset(0)]
        public _wireBRECORD* brecVal;
        [FieldOffset(0)]
        public byte* pbVal;
        [FieldOffset(0)]
        public short* piVal;
        [FieldOffset(0)]
        public Int32* plVal;
        [FieldOffset(0)]
        public long* pllVal;
        [FieldOffset(0)]
        public float* pfltVal;
        [FieldOffset(0)]
        public double* pdblVal;
        [FieldOffset(0)]
        public short* pboolVal;
        [FieldOffset(0)]
        public Int32* pscode;
        [FieldOffset(0)]
        public tagCY* pcyVal;
        [FieldOffset(0)]
        public double* pdate;
        [FieldOffset(0)]
        public FLAGGED_WORD_BLOB** pbstrVal;
        [FieldOffset(0)]
        public IUnknown** ppunkVal;
        [FieldOffset(0)]
        public IDispatch** ppdispVal;
        [FieldOffset(0)]
        public wireSAFEARRAY** pparray;
        [FieldOffset(0)]
        public _wireVARIANT** pvarVal;
        [FieldOffset(0)]
        public byte cVal;
        [FieldOffset(0)]
        public ushort uiVal;
        [FieldOffset(0)]
        public UInt32 ulVal;
        [FieldOffset(0)]
        public ulong ullVal;
        [FieldOffset(0)]
        public int intVal;
        [FieldOffset(0)]
        public uint uintVal;
        [FieldOffset(0)]
        public tagDEC decVal;
        [FieldOffset(0)]
        public tagDEC* pdecVal;
        [FieldOffset(0)]
        public byte* pcVal;
        [FieldOffset(0)]
        public ushort* puiVal;
        [FieldOffset(0)]
        public UInt32* pulVal;
        [FieldOffset(0)]
        public ulong* pullVal;
        [FieldOffset(0)]
        public int* pintVal;
        [FieldOffset(0)]
        public uint* puintVal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTYPEDESC
    {
        public tagTYPEDESC__bindgen_ty_1 __bindgen_anon_1;
        public ushort vt;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagTYPEDESC__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagTYPEDESC* lptdesc;
        [FieldOffset(0)]
        public tagARRAYDESC* lpadesc;
        [FieldOffset(0)]
        public UInt32 hreftype;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagARRAYDESC
    {
        public tagTYPEDESC tdescElem;
        public ushort cDims;
        public fixed byte/* tagSAFEARRAYBOUND, this length is invalid so must keep pointer and can't edit from C# */ rgbounds[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPARAMDESCEX
    {
        public UInt32 cBytes;
        public tagVARIANT varDefaultValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPARAMDESC
    {
        public tagPARAMDESCEX* pparamdescex;
        public ushort wParamFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagIDLDESC
    {
        public ulong dwReserved;
        public ushort wIDLFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagELEMDESC
    {
        public tagTYPEDESC tdesc;
        public tagELEMDESC__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagELEMDESC__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagIDLDESC idldesc;
        [FieldOffset(0)]
        public tagPARAMDESC paramdesc;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTYPEATTR
    {
        public _GUID guid;
        public UInt32 lcid;
        public UInt32 dwReserved;
        public Int32 memidConstructor;
        public Int32 memidDestructor;
        public ushort lpstrSchema;
        public UInt32 cbSizeInstance;
        public tagTYPEKIND typekind;
        public ushort cFuncs;
        public ushort cVars;
        public ushort cImplTypes;
        public ushort cbSizeVft;
        public ushort cbAlignment;
        public ushort wTypeFlags;
        public ushort wMajorVerNum;
        public ushort wMinorVerNum;
        public tagTYPEDESC tdescAlias;
        public tagIDLDESC idldescType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagDISPPARAMS
    {
        public tagVARIANT* rgvarg;
        public Int32* rgdispidNamedArgs;
        public uint cArgs;
        public uint cNamedArgs;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagEXCEPINFO
    {
        public ushort wCode;
        public ushort wReserved;
        public ushort bstrSource;
        public ushort bstrDescription;
        public ushort bstrHelpFile;
        public UInt32 dwHelpContext;
        public void* pvReserved;
        public Option pfnDeferredFillIn;
        public Int32 scode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagFUNCDESC
    {
        public Int32 memid;
        public Int32* lprgscode;
        public tagELEMDESC* lprgelemdescParam;
        public tagFUNCKIND funckind;
        public tagINVOKEKIND invkind;
        public tagCALLCONV callconv;
        public short cParams;
        public short cParamsOpt;
        public short oVft;
        public short cScodes;
        public tagELEMDESC elemdescFunc;
        public ushort wFuncFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagVARDESC
    {
        public Int32 memid;
        public ushort lpstrSchema;
        public tagVARDESC__bindgen_ty_1 __bindgen_anon_1;
        public tagELEMDESC elemdescVar;
        public ushort wVarFlags;
        public tagVARKIND varkind;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagVARDESC__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 oInst;
        [FieldOffset(0)]
        public tagVARIANT* lpvarValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCLEANLOCALSTORAGE
    {
        public IUnknown* pInterface;
        public void* pStorage;
        public UInt32 flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCUSTDATAITEM
    {
        public _GUID guid;
        public tagVARIANT varValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCUSTDATA
    {
        public UInt32 cCustData;
        public tagCUSTDATAITEM* prgCustData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICreateTypeInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetGuid;
        public Option SetTypeFlags;
        public Option SetDocString;
        public Option SetHelpContext;
        public Option SetVersion;
        public Option AddRefTypeInfo;
        public Option AddFuncDesc;
        public Option AddImplType;
        public Option SetImplTypeFlags;
        public Option SetAlignment;
        public Option SetSchema;
        public Option AddVarDesc;
        public Option SetFuncAndParamNames;
        public Option SetVarName;
        public Option SetTypeDescAlias;
        public Option DefineFuncAsDllEntry;
        public Option SetFuncDocString;
        public Option SetVarDocString;
        public Option SetFuncHelpContext;
        public Option SetVarHelpContext;
        public Option SetMops;
        public Option SetTypeIdldesc;
        public Option LayOut;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICreateTypeInfo2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetGuid;
        public Option SetTypeFlags;
        public Option SetDocString;
        public Option SetHelpContext;
        public Option SetVersion;
        public Option AddRefTypeInfo;
        public Option AddFuncDesc;
        public Option AddImplType;
        public Option SetImplTypeFlags;
        public Option SetAlignment;
        public Option SetSchema;
        public Option AddVarDesc;
        public Option SetFuncAndParamNames;
        public Option SetVarName;
        public Option SetTypeDescAlias;
        public Option DefineFuncAsDllEntry;
        public Option SetFuncDocString;
        public Option SetVarDocString;
        public Option SetFuncHelpContext;
        public Option SetVarHelpContext;
        public Option SetMops;
        public Option SetTypeIdldesc;
        public Option LayOut;
        public Option DeleteFuncDesc;
        public Option DeleteFuncDescByMemId;
        public Option DeleteVarDesc;
        public Option DeleteVarDescByMemId;
        public Option DeleteImplType;
        public Option SetCustData;
        public Option SetFuncCustData;
        public Option SetParamCustData;
        public Option SetVarCustData;
        public Option SetImplTypeCustData;
        public Option SetHelpStringContext;
        public Option SetFuncHelpStringContext;
        public Option SetVarHelpStringContext;
        public Option Invalidate;
        public Option SetName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICreateTypeLibVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateTypeInfo;
        public Option SetName;
        public Option SetVersion;
        public Option SetGuid;
        public Option SetDocString;
        public Option SetHelpFileName;
        public Option SetHelpContext;
        public Option SetLcid;
        public Option SetLibFlags;
        public Option SaveAllChanges;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICreateTypeLib
    {
        public ICreateTypeLibVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICreateTypeLib2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateTypeInfo;
        public Option SetName;
        public Option SetVersion;
        public Option SetGuid;
        public Option SetDocString;
        public Option SetHelpFileName;
        public Option SetHelpContext;
        public Option SetLcid;
        public Option SetLibFlags;
        public Option SaveAllChanges;
        public Option DeleteTypeInfo;
        public Option SetCustData;
        public Option SetHelpStringContext;
        public Option SetHelpStringDll;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICreateTypeLib2
    {
        public ICreateTypeLib2Vtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDispatchVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDispatch
    {
        public IDispatchVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumVARIANTVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumVARIANT
    {
        public IEnumVARIANTVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagBINDPTR
    {
        [FieldOffset(0)]
        public tagFUNCDESC* lpfuncdesc;
        [FieldOffset(0)]
        public tagVARDESC* lpvardesc;
        [FieldOffset(0)]
        public ITypeComp* lptcomp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeCompVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Bind;
        public Option BindType;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeComp
    {
        public ITypeCompVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeAttr;
        public Option GetTypeComp;
        public Option GetFuncDesc;
        public Option GetVarDesc;
        public Option GetNames;
        public Option GetRefTypeOfImplType;
        public Option GetImplTypeFlags;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option GetDocumentation;
        public Option GetDllEntry;
        public Option GetRefTypeInfo;
        public Option AddressOfMember;
        public Option CreateInstance;
        public Option GetMops;
        public Option GetContainingTypeLib;
        public Option ReleaseTypeAttr;
        public Option ReleaseFuncDesc;
        public Option ReleaseVarDesc;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeInfo
    {
        public ITypeInfoVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeInfo2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeAttr;
        public Option GetTypeComp;
        public Option GetFuncDesc;
        public Option GetVarDesc;
        public Option GetNames;
        public Option GetRefTypeOfImplType;
        public Option GetImplTypeFlags;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option GetDocumentation;
        public Option GetDllEntry;
        public Option GetRefTypeInfo;
        public Option AddressOfMember;
        public Option CreateInstance;
        public Option GetMops;
        public Option GetContainingTypeLib;
        public Option ReleaseTypeAttr;
        public Option ReleaseFuncDesc;
        public Option ReleaseVarDesc;
        public Option GetTypeKind;
        public Option GetTypeFlags;
        public Option GetFuncIndexOfMemId;
        public Option GetVarIndexOfMemId;
        public Option GetCustData;
        public Option GetFuncCustData;
        public Option GetParamCustData;
        public Option GetVarCustData;
        public Option GetImplTypeCustData;
        public Option GetDocumentation2;
        public Option GetAllCustData;
        public Option GetAllFuncCustData;
        public Option GetAllParamCustData;
        public Option GetAllVarCustData;
        public Option GetAllImplTypeCustData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeInfo2
    {
        public ITypeInfo2Vtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagTLIBATTR
    {
        public _GUID guid;
        public UInt32 lcid;
        public tagSYSKIND syskind;
        public ushort wMajorVerNum;
        public ushort wMinorVerNum;
        public ushort wLibFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeLibVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetTypeInfoType;
        public Option GetTypeInfoOfGuid;
        public Option GetLibAttr;
        public Option GetTypeComp;
        public Option GetDocumentation;
        public Option IsName;
        public Option FindName;
        public Option ReleaseTLibAttr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeLib
    {
        public ITypeLibVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeLib2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetTypeInfoType;
        public Option GetTypeInfoOfGuid;
        public Option GetLibAttr;
        public Option GetTypeComp;
        public Option GetDocumentation;
        public Option IsName;
        public Option FindName;
        public Option ReleaseTLibAttr;
        public Option GetCustData;
        public Option GetLibStatistics;
        public Option GetDocumentation2;
        public Option GetAllCustData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeLib2
    {
        public ITypeLib2Vtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeChangeEventsVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option RequestTypeChange;
        public Option AfterTypeChange;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IErrorInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetGUID;
        public Option GetSource;
        public Option GetDescription;
        public Option GetHelpFile;
        public Option GetHelpContext;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IErrorInfo
    {
        public IErrorInfoVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICreateErrorInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetGUID;
        public Option SetSource;
        public Option SetDescription;
        public Option SetHelpFile;
        public Option SetHelpContext;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICreateErrorInfo
    {
        public ICreateErrorInfoVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISupportErrorInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option InterfaceSupportsErrorInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeFactoryVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateFromTypeInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeMarshalVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Size;
        public Option Marshal;
        public Option Unmarshal;
        public Option Free;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRecordInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option RecordInit;
        public Option RecordClear;
        public Option RecordCopy;
        public Option GetGuid;
        public Option GetName;
        public Option GetSize;
        public Option GetTypeInfo;
        public Option GetField;
        public Option GetFieldNoCopy;
        public Option PutField;
        public Option PutFieldNoCopy;
        public Option GetFieldNames;
        public Option IsMatchingType;
        public Option RecordCreate;
        public Option RecordCreateCopy;
        public Option RecordDestroy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IRecordInfo
    {
        public IRecordInfoVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IErrorLogVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option AddError;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IErrorLog
    {
        public IErrorLogVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPropertyBagVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Read;
        public Option Write;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPropertyBag
    {
        public IPropertyBagVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeLibRegistrationReaderVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option EnumTypeLibRegistrations;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ITypeLibRegistrationVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetGuid;
        public Option GetVersion;
        public Option GetLcid;
        public Option GetWin32Path;
        public Option GetWin64Path;
        public Option GetDisplayName;
        public Option GetFlags;
        public Option GetHelpDir;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagVersionedStream
    {
        public _GUID guidVersion;
        public IStream* pStream;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAC
    {
        public UInt32 cElems;
        public byte* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAUB
    {
        public UInt32 cElems;
        public byte* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAI
    {
        public UInt32 cElems;
        public short* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAUI
    {
        public UInt32 cElems;
        public ushort* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAL
    {
        public UInt32 cElems;
        public Int32* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAUL
    {
        public UInt32 cElems;
        public UInt32* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAFLT
    {
        public UInt32 cElems;
        public float* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCADBL
    {
        public UInt32 cElems;
        public double* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCACY
    {
        public UInt32 cElems;
        public tagCY* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCADATE
    {
        public UInt32 cElems;
        public double* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCABSTR
    {
        public UInt32 cElems;
        public ushort* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCABSTRBLOB
    {
        public UInt32 cElems;
        public tagBSTRBLOB* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCABOOL
    {
        public UInt32 cElems;
        public short* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCASCODE
    {
        public UInt32 cElems;
        public Int32* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAPROPVARIANT
    {
        public UInt32 cElems;
        public tagPROPVARIANT* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAH
    {
        public UInt32 cElems;
        public _LARGE_INTEGER* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAUH
    {
        public UInt32 cElems;
        public _ULARGE_INTEGER* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCALPSTR
    {
        public UInt32 cElems;
        public byte* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCALPWSTR
    {
        public UInt32 cElems;
        public ushort* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCAFILETIME
    {
        public UInt32 cElems;
        public _FILETIME* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCACLIPDATA
    {
        public UInt32 cElems;
        public tagCLIPDATA* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCACLSID
    {
        public UInt32 cElems;
        public _GUID* pElems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPROPVARIANT
    {
        public tagPROPVARIANT__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagPROPVARIANT__bindgen_ty_1
    {
        [FieldOffset(0)]
        public tagPROPVARIANT__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public tagDEC decVal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPROPVARIANT__bindgen_ty_1__bindgen_ty_1
    {
        public ushort vt;
        public ushort wReserved1;
        public ushort wReserved2;
        public ushort wReserved3;
        public tagPROPVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagPROPVARIANT__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1
    {
        [FieldOffset(0)]
        public byte cVal;
        [FieldOffset(0)]
        public byte bVal;
        [FieldOffset(0)]
        public short iVal;
        [FieldOffset(0)]
        public ushort uiVal;
        [FieldOffset(0)]
        public Int32 lVal;
        [FieldOffset(0)]
        public UInt32 ulVal;
        [FieldOffset(0)]
        public int intVal;
        [FieldOffset(0)]
        public uint uintVal;
        [FieldOffset(0)]
        public _LARGE_INTEGER hVal;
        [FieldOffset(0)]
        public _ULARGE_INTEGER uhVal;
        [FieldOffset(0)]
        public float fltVal;
        [FieldOffset(0)]
        public double dblVal;
        [FieldOffset(0)]
        public short boolVal;
        [FieldOffset(0)]
        public short __OBSOLETE__VARIANT_BOOL;
        [FieldOffset(0)]
        public Int32 scode;
        [FieldOffset(0)]
        public tagCY cyVal;
        [FieldOffset(0)]
        public double date;
        [FieldOffset(0)]
        public _FILETIME filetime;
        [FieldOffset(0)]
        public _GUID* puuid;
        [FieldOffset(0)]
        public tagCLIPDATA* pclipdata;
        [FieldOffset(0)]
        public ushort bstrVal;
        [FieldOffset(0)]
        public tagBSTRBLOB bstrblobVal;
        [FieldOffset(0)]
        public tagBLOB blob;
        [FieldOffset(0)]
        public byte pszVal;
        [FieldOffset(0)]
        public ushort pwszVal;
        [FieldOffset(0)]
        public IUnknown* punkVal;
        [FieldOffset(0)]
        public IDispatch* pdispVal;
        [FieldOffset(0)]
        public IStream* pStream;
        [FieldOffset(0)]
        public IStorage* pStorage;
        [FieldOffset(0)]
        public tagVersionedStream* pVersionedStream;
        [FieldOffset(0)]
        public tagSAFEARRAY parray;
        [FieldOffset(0)]
        public tagCAC cac;
        [FieldOffset(0)]
        public tagCAUB caub;
        [FieldOffset(0)]
        public tagCAI cai;
        [FieldOffset(0)]
        public tagCAUI caui;
        [FieldOffset(0)]
        public tagCAL cal;
        [FieldOffset(0)]
        public tagCAUL caul;
        [FieldOffset(0)]
        public tagCAH cah;
        [FieldOffset(0)]
        public tagCAUH cauh;
        [FieldOffset(0)]
        public tagCAFLT caflt;
        [FieldOffset(0)]
        public tagCADBL cadbl;
        [FieldOffset(0)]
        public tagCABOOL cabool;
        [FieldOffset(0)]
        public tagCASCODE cascode;
        [FieldOffset(0)]
        public tagCACY cacy;
        [FieldOffset(0)]
        public tagCADATE cadate;
        [FieldOffset(0)]
        public tagCAFILETIME cafiletime;
        [FieldOffset(0)]
        public tagCACLSID cauuid;
        [FieldOffset(0)]
        public tagCACLIPDATA caclipdata;
        [FieldOffset(0)]
        public tagCABSTR cabstr;
        [FieldOffset(0)]
        public tagCABSTRBLOB cabstrblob;
        [FieldOffset(0)]
        public tagCALPSTR calpstr;
        [FieldOffset(0)]
        public tagCALPWSTR calpwstr;
        [FieldOffset(0)]
        public tagCAPROPVARIANT capropvar;
        [FieldOffset(0)]
        public byte* pcVal;
        [FieldOffset(0)]
        public byte* pbVal;
        [FieldOffset(0)]
        public short* piVal;
        [FieldOffset(0)]
        public ushort* puiVal;
        [FieldOffset(0)]
        public Int32* plVal;
        [FieldOffset(0)]
        public UInt32* pulVal;
        [FieldOffset(0)]
        public int* pintVal;
        [FieldOffset(0)]
        public uint* puintVal;
        [FieldOffset(0)]
        public float* pfltVal;
        [FieldOffset(0)]
        public double* pdblVal;
        [FieldOffset(0)]
        public short* pboolVal;
        [FieldOffset(0)]
        public tagDEC* pdecVal;
        [FieldOffset(0)]
        public Int32* pscode;
        [FieldOffset(0)]
        public tagCY* pcyVal;
        [FieldOffset(0)]
        public double* pdate;
        [FieldOffset(0)]
        public ushort* pbstrVal;
        [FieldOffset(0)]
        public IUnknown** ppunkVal;
        [FieldOffset(0)]
        public IDispatch** ppdispVal;
        [FieldOffset(0)]
        public tagSAFEARRAY* pparray;
        [FieldOffset(0)]
        public tagPROPVARIANT* pvarVal;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct tagPROPSPEC__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 propid;
        [FieldOffset(0)]
        public ushort lpwstr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSTATPROPSTG
    {
        public ushort lpwstrName;
        public UInt32 propid;
        public ushort vt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSTATPROPSETSTG
    {
        public _GUID fmtid;
        public _GUID clsid;
        public UInt32 grfFlags;
        public _FILETIME mtime;
        public _FILETIME ctime;
        public _FILETIME atime;
        public UInt32 dwOSVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPropertyStorageVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ReadMultiple;
        public Option WriteMultiple;
        public Option DeleteMultiple;
        public Option ReadPropertyNames;
        public Option WritePropertyNames;
        public Option DeletePropertyNames;
        public Option Commit;
        public Option Revert;
        public Option Enum;
        public Option SetTimes;
        public Option SetClass;
        public Option Stat;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPropertyStorage
    {
        public IPropertyStorageVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPropertySetStorageVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Create;
        public Option Open;
        public Option Delete;
        public Option Enum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPropertySetStorage
    {
        public IPropertySetStorageVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumSTATPROPSTGVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumSTATPROPSTG
    {
        public IEnumSTATPROPSTGVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumSTATPROPSETSTGVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumSTATPROPSETSTG
    {
        public IEnumSTATPROPSETSTGVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSTGOPTIONS
    {
        public ushort usVersion;
        public ushort reserved;
        public UInt32 ulSectorSize;
        public ushort* pwcsTemplateFile;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleAdviseHolderVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Advise;
        public Option Unadvise;
        public Option EnumAdvise;
        public Option SendOnRename;
        public Option SendOnSave;
        public Option SendOnClose;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleAdviseHolder
    {
        public IOleAdviseHolderVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleCacheVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Cache;
        public Option Uncache;
        public Option EnumCache;
        public Option InitCache;
        public Option SetData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleCache2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Cache;
        public Option Uncache;
        public Option EnumCache;
        public Option InitCache;
        public Option SetData;
        public Option UpdateCache;
        public Option DiscardCache;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleCache2
    {
        public IOleCache2Vtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleCacheControlVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option OnRun;
        public Option OnStop;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IParseDisplayNameVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ParseDisplayName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleContainerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ParseDisplayName;
        public Option EnumObjects;
        public Option LockContainer;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleClientSiteVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SaveObject;
        public Option GetMoniker;
        public Option GetContainer;
        public Option ShowObject;
        public Option OnShowWindow;
        public Option RequestNewObjectLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleClientSite
    {
        public IOleClientSiteVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleObjectVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetClientSite;
        public Option GetClientSite;
        public Option SetHostNames;
        public Option Close;
        public Option SetMoniker;
        public Option GetMoniker;
        public Option InitFromData;
        public Option GetClipboardData;
        public Option DoVerb;
        public Option EnumVerbs;
        public Option Update;
        public Option IsUpToDate;
        public Option GetUserClassID;
        public Option GetUserType;
        public Option SetExtent;
        public Option GetExtent;
        public Option Advise;
        public Option Unadvise;
        public Option EnumAdvise;
        public Option GetMiscStatus;
        public Option SetColorScheme;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleObject
    {
        public IOleObjectVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleWindowVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option ContextSensitiveHelp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleLinkVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetUpdateOptions;
        public Option GetUpdateOptions;
        public Option SetSourceMoniker;
        public Option GetSourceMoniker;
        public Option SetSourceDisplayName;
        public Option GetSourceDisplayName;
        public Option BindToSource;
        public Option BindIfRunning;
        public Option GetBoundSource;
        public Option UnbindSource;
        public Option Update;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleItemContainerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ParseDisplayName;
        public Option EnumObjects;
        public Option LockContainer;
        public Option GetObjectA;
        public Option GetObjectStorage;
        public Option IsRunning;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleInPlaceUIWindowVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option ContextSensitiveHelp;
        public Option GetBorder;
        public Option RequestBorderSpace;
        public Option SetBorderSpace;
        public Option SetActiveObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleInPlaceUIWindow
    {
        public IOleInPlaceUIWindowVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleInPlaceActiveObjectVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option ContextSensitiveHelp;
        public Option TranslateAcceleratorA;
        public Option OnFrameWindowActivate;
        public Option OnDocWindowActivate;
        public Option ResizeBorder;
        public Option EnableModeless;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleInPlaceActiveObject
    {
        public IOleInPlaceActiveObjectVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagOIFI
    {
        public uint cb;
        public int fMDIApp;
        public HWND__* hwndFrame;
        public HACCEL__* haccel;
        public uint cAccelEntries;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagOleMenuGroupWidths
    {
        public fixed byte/* Int32, this length is invalid so must keep pointer and can't edit from C# */ width[6];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleInPlaceFrameVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option ContextSensitiveHelp;
        public Option GetBorder;
        public Option RequestBorderSpace;
        public Option SetBorderSpace;
        public Option SetActiveObject;
        public Option InsertMenus;
        public Option SetMenu;
        public Option RemoveMenus;
        public Option SetStatusText;
        public Option EnableModeless;
        public Option TranslateAcceleratorA;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleInPlaceFrame
    {
        public IOleInPlaceFrameVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleInPlaceObjectVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option ContextSensitiveHelp;
        public Option InPlaceDeactivate;
        public Option UIDeactivate;
        public Option SetObjectRects;
        public Option ReactivateAndUndo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IOleInPlaceSiteVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option ContextSensitiveHelp;
        public Option CanInPlaceActivate;
        public Option OnInPlaceActivate;
        public Option OnUIActivate;
        public Option GetWindowContext;
        public Option Scroll;
        public Option OnUIDeactivate;
        public Option OnInPlaceDeactivate;
        public Option DiscardUndoState;
        public Option DeactivateAndUndo;
        public Option OnPosRectChange;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IContinueVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option FContinue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IContinue
    {
        public IContinueVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IViewObjectVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Draw;
        public Option GetColorSet;
        public Option Freeze;
        public Option Unfreeze;
        public Option SetAdvise;
        public Option GetAdvise;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IViewObject
    {
        public IViewObjectVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IViewObject2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Draw;
        public Option GetColorSet;
        public Option Freeze;
        public Option Unfreeze;
        public Option SetAdvise;
        public Option GetAdvise;
        public Option GetExtent;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDropSourceVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option QueryContinueDrag;
        public Option GiveFeedback;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDropSource
    {
        public IDropSourceVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDropTargetVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option DragEnter;
        public Option DragOver;
        public Option DragLeave;
        public Option Drop;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDropTarget
    {
        public IDropTargetVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDropSourceNotifyVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option DragEnterTarget;
        public Option DragLeaveTarget;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnterpriseDropTargetVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetDropSourceEnterpriseId;
        public Option IsEvaluatingEdpPolicy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagOLEVERB
    {
        public Int32 lVerb;
        public ushort lpszVerbName;
        public UInt32 fuFlags;
        public UInt32 grfAttribs;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumOLEVERBVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Next;
        public Option Skip;
        public Option Reset;
        public Option Clone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEnumOLEVERB
    {
        public IEnumOLEVERBVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IServiceProviderVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option QueryService;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IServiceProvider
    {
        public IServiceProviderVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMImplementationVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option hasFeature;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMNodeVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMDocumentFragmentVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMDocumentVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_doctype;
        public Option get_implementation;
        public Option get_documentElement;
        public Option putref_documentElement;
        public Option createElement;
        public Option createDocumentFragment;
        public Option createTextNode;
        public Option createComment;
        public Option createCDATASection;
        public Option createProcessingInstruction;
        public Option createAttribute;
        public Option createEntityReference;
        public Option getElementsByTagName;
        public Option createNode;
        public Option nodeFromID;
        public Option load;
        public Option get_readyState;
        public Option get_parseError;
        public Option get_url;
        public Option get_async;
        public Option put_async;
        public Option abort;
        public Option loadXML;
        public Option save;
        public Option get_validateOnParse;
        public Option put_validateOnParse;
        public Option get_resolveExternals;
        public Option put_resolveExternals;
        public Option get_preserveWhiteSpace;
        public Option put_preserveWhiteSpace;
        public Option put_onreadystatechange;
        public Option put_ondataavailable;
        public Option put_ontransformnode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMNodeListVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_item;
        public Option get_length;
        public Option nextNode;
        public Option reset;
        public Option get__newEnum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMNamedNodeMapVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option getNamedItem;
        public Option setNamedItem;
        public Option removeNamedItem;
        public Option get_item;
        public Option get_length;
        public Option getQualifiedItem;
        public Option removeQualifiedItem;
        public Option nextNode;
        public Option reset;
        public Option get__newEnum;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMCharacterDataVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_data;
        public Option put_data;
        public Option get_length;
        public Option substringData;
        public Option appendData;
        public Option insertData;
        public Option deleteData;
        public Option replaceData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMAttributeVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_name;
        public Option get_value;
        public Option put_value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMElementVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_tagName;
        public Option getAttribute;
        public Option setAttribute;
        public Option removeAttribute;
        public Option getAttributeNode;
        public Option setAttributeNode;
        public Option removeAttributeNode;
        public Option getElementsByTagName;
        public Option normalize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMTextVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_data;
        public Option put_data;
        public Option get_length;
        public Option substringData;
        public Option appendData;
        public Option insertData;
        public Option deleteData;
        public Option replaceData;
        public Option splitText;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMCommentVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_data;
        public Option put_data;
        public Option get_length;
        public Option substringData;
        public Option appendData;
        public Option insertData;
        public Option deleteData;
        public Option replaceData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMProcessingInstructionVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_target;
        public Option get_data;
        public Option put_data;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMCDATASectionVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_data;
        public Option put_data;
        public Option get_length;
        public Option substringData;
        public Option appendData;
        public Option insertData;
        public Option deleteData;
        public Option replaceData;
        public Option splitText;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMDocumentTypeVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_name;
        public Option get_entities;
        public Option get_notations;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMNotationVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_publicId;
        public Option get_systemId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMEntityVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option get_publicId;
        public Option get_systemId;
        public Option get_notationName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMEntityReferenceVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDOMParseErrorVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_errorCode;
        public Option get_url;
        public Option get_reason;
        public Option get_srcText;
        public Option get_line;
        public Option get_linepos;
        public Option get_filepos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXTLRuntimeVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_nodeName;
        public Option get_nodeValue;
        public Option put_nodeValue;
        public Option get_nodeType;
        public Option get_parentNode;
        public Option get_childNodes;
        public Option get_firstChild;
        public Option get_lastChild;
        public Option get_previousSibling;
        public Option get_nextSibling;
        public Option get_attributes;
        public Option insertBefore;
        public Option replaceChild;
        public Option removeChild;
        public Option appendChild;
        public Option hasChildNodes;
        public Option get_ownerDocument;
        public Option cloneNode;
        public Option get_nodeTypeString;
        public Option get_text;
        public Option put_text;
        public Option get_specified;
        public Option get_definition;
        public Option get_nodeTypedValue;
        public Option put_nodeTypedValue;
        public Option get_dataType;
        public Option put_dataType;
        public Option get_xml;
        public Option transformNode;
        public Option selectNodes;
        public Option selectSingleNode;
        public Option get_parsed;
        public Option get_namespaceURI;
        public Option get_prefix;
        public Option get_baseName;
        public Option transformNodeToObject;
        public Option uniqueID;
        public Option depth;
        public Option childNumber;
        public Option ancestorChildNumber;
        public Option absoluteChildNumber;
        public Option formatIndex;
        public Option formatNumber;
        public Option formatDate;
        public Option formatTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct XMLDOMDocumentEventsVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLHttpRequestVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option open;
        public Option setRequestHeader;
        public Option getResponseHeader;
        public Option getAllResponseHeaders;
        public Option send;
        public Option abort;
        public Option get_status;
        public Option get_statusText;
        public Option get_responseXML;
        public Option get_responseText;
        public Option get_responseBody;
        public Option get_responseStream;
        public Option get_readyState;
        public Option put_onreadystatechange;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDSOControlVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_XMLDocument;
        public Option put_XMLDocument;
        public Option get_JavaDSOCompatible;
        public Option put_JavaDSOCompatible;
        public Option get_readyState;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLElementCollectionVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option put_length;
        public Option get_length;
        public Option get__newEnum;
        public Option item;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDocumentVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_root;
        public Option get_fileSize;
        public Option get_fileModifiedDate;
        public Option get_fileUpdatedDate;
        public Option get_URL;
        public Option put_URL;
        public Option get_mimeType;
        public Option get_readyState;
        public Option get_charset;
        public Option put_charset;
        public Option get_version;
        public Option get_doctype;
        public Option get_dtdURL;
        public Option createElement;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLDocument2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_root;
        public Option get_fileSize;
        public Option get_fileModifiedDate;
        public Option get_fileUpdatedDate;
        public Option get_URL;
        public Option put_URL;
        public Option get_mimeType;
        public Option get_readyState;
        public Option get_charset;
        public Option put_charset;
        public Option get_version;
        public Option get_doctype;
        public Option get_dtdURL;
        public Option createElement;
        public Option get_async;
        public Option put_async;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLElementVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_tagName;
        public Option put_tagName;
        public Option get_parent;
        public Option setAttribute;
        public Option getAttribute;
        public Option removeAttribute;
        public Option get_children;
        public Option get_type;
        public Option get_text;
        public Option put_text;
        public Option addChild;
        public Option removeChild;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLElement2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_tagName;
        public Option put_tagName;
        public Option get_parent;
        public Option setAttribute;
        public Option getAttribute;
        public Option removeAttribute;
        public Option get_children;
        public Option get_type;
        public Option get_text;
        public Option put_text;
        public Option addChild;
        public Option removeChild;
        public Option get_attributes;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLAttributeVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetTypeInfoCount;
        public Option GetTypeInfo;
        public Option GetIDsOfNames;
        public Option Invoke;
        public Option get_name;
        public Option get_value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IXMLErrorVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetErrorInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPersistMonikerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetClassID;
        public Option IsDirty;
        public Option Load;
        public Option Save;
        public Option SaveCompleted;
        public Option GetCurMoniker;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IMonikerPropVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option PutProperty;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindProtocolVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateBinding;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindingVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Abort;
        public Option Suspend;
        public Option Resume;
        public Option SetPriority;
        public Option GetPriority;
        public Option GetBindResult;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBinding
    {
        public IBindingVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _tagBINDINFO
    {
        public UInt32 cbSize;
        public ushort szExtraInfo;
        public uSTGMEDIUM stgmedData;
        public UInt32 grfBindInfoF;
        public UInt32 dwBindVerb;
        public ushort szCustomVerb;
        public UInt32 cbstgmedData;
        public UInt32 dwOptions;
        public UInt32 dwOptionsFlags;
        public UInt32 dwCodePage;
        public _SECURITY_ATTRIBUTES securityAttributes;
        public _GUID iid;
        public IUnknown* pUnk;
        public UInt32 dwReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _REMSECURITY_ATTRIBUTES
    {
        public UInt32 nLength;
        public UInt32 lpSecurityDescriptor;
        public int bInheritHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _tagRemBINDINFO
    {
        public UInt32 cbSize;
        public ushort szExtraInfo;
        public UInt32 grfBindInfoF;
        public UInt32 dwBindVerb;
        public ushort szCustomVerb;
        public UInt32 cbstgmedData;
        public UInt32 dwOptions;
        public UInt32 dwOptionsFlags;
        public UInt32 dwCodePage;
        public _REMSECURITY_ATTRIBUTES securityAttributes;
        public _GUID iid;
        public IUnknown* pUnk;
        public UInt32 dwReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagRemFORMATETC
    {
        public UInt32 cfFormat;
        public UInt32 ptd;
        public UInt32 dwAspect;
        public Int32 lindex;
        public UInt32 tymed;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindStatusCallbackVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option OnStartBinding;
        public Option GetPriority;
        public Option OnLowResource;
        public Option OnProgress;
        public Option OnStopBinding;
        public Option GetBindInfo;
        public Option OnDataAvailable;
        public Option OnObjectAvailable;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindStatusCallback
    {
        public IBindStatusCallbackVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindStatusCallbackExVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option OnStartBinding;
        public Option GetPriority;
        public Option OnLowResource;
        public Option OnProgress;
        public Option OnStopBinding;
        public Option GetBindInfo;
        public Option OnDataAvailable;
        public Option OnObjectAvailable;
        public Option GetBindInfoEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindStatusCallbackEx
    {
        public IBindStatusCallbackExVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAuthenticateVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Authenticate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IAuthenticateExVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Authenticate;
        public Option AuthenticateEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IHttpNegotiateVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option BeginningTransaction;
        public Option OnResponse;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IHttpNegotiate2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option BeginningTransaction;
        public Option OnResponse;
        public Option GetRootSecurityId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IHttpNegotiate3Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option BeginningTransaction;
        public Option OnResponse;
        public Option GetRootSecurityId;
        public Option GetSerializedClientCertContext;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWinInetFileStreamVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetHandleForUnlock;
        public Option SetDeleteFile;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWindowForBindingUIVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICodeInstallVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option OnCodeInstallProblem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUriVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetPropertyBSTR;
        public Option GetPropertyLength;
        public Option GetPropertyDWORD;
        public Option HasProperty;
        public Option GetAbsoluteUri;
        public Option GetAuthority;
        public Option GetDisplayUri;
        public Option GetDomain;
        public Option GetExtension;
        public Option GetFragment;
        public Option GetHost;
        public Option GetPassword;
        public Option GetPath;
        public Option GetPathAndQuery;
        public Option GetQuery;
        public Option GetRawUri;
        public Option GetSchemeName;
        public Option GetUserInfo;
        public Option GetUserNameA;
        public Option GetHostType;
        public Option GetPort;
        public Option GetScheme;
        public Option GetZone;
        public Option GetProperties;
        public Option IsEqual;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUri
    {
        public IUriVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUriContainerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetIUri;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUriBuilderVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateUriSimple;
        public Option CreateUri;
        public Option CreateUriWithFlags;
        public Option GetIUri;
        public Option SetIUri;
        public Option GetFragment;
        public Option GetHost;
        public Option GetPassword;
        public Option GetPath;
        public Option GetPort;
        public Option GetQuery;
        public Option GetSchemeName;
        public Option GetUserNameA;
        public Option SetFragment;
        public Option SetHost;
        public Option SetPassword;
        public Option SetPath;
        public Option SetPortA;
        public Option SetQuery;
        public Option SetSchemeName;
        public Option SetUserName;
        public Option RemoveProperties;
        public Option HasBeenModified;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUriBuilder
    {
        public IUriBuilderVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IUriBuilderFactoryVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateIUriBuilder;
        public Option CreateInitializedIUriBuilder;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWinInetInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option QueryOption;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWinInetInfo
    {
        public IWinInetInfoVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IHttpSecurityVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option OnSecurityProblem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWinInetHttpInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option QueryOption;
        public Option QueryInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWinInetHttpInfo
    {
        public IWinInetHttpInfoVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWinInetHttpTimeoutsVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetRequestTimeouts;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWinInetCacheHintsVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetCacheExtension;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWinInetCacheHints2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetCacheExtension;
        public Option SetCacheExtension2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindHostVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option CreateMoniker;
        public Option MonikerBindToStorage;
        public Option MonikerBindToObject;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindHost
    {
        public IBindHostVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetBindInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetBindInfo;
        public Option GetBindString;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetBindInfoExVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetBindInfo;
        public Option GetBindString;
        public Option GetBindInfoEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetProtocolRootVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Start;
        public Option Continue;
        public Option Abort;
        public Option Terminate;
        public Option Suspend;
        public Option Resume;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetProtocolVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Start;
        public Option Continue;
        public Option Abort;
        public Option Terminate;
        public Option Suspend;
        public Option Resume;
        public Option Read;
        public Option Seek;
        public Option LockRequest;
        public Option UnlockRequest;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetProtocol
    {
        public IInternetProtocolVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetProtocolExVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Start;
        public Option Continue;
        public Option Abort;
        public Option Terminate;
        public Option Suspend;
        public Option Resume;
        public Option Read;
        public Option Seek;
        public Option LockRequest;
        public Option UnlockRequest;
        public Option StartEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetProtocolSinkVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Switch;
        public Option ReportProgress;
        public Option ReportData;
        public Option ReportResult;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetProtocolSink
    {
        public IInternetProtocolSinkVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetProtocolSinkStackableVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SwitchSink;
        public Option CommitSwitch;
        public Option RollbackSwitch;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetSessionVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option RegisterNameSpace;
        public Option UnregisterNameSpace;
        public Option RegisterMimeFilter;
        public Option UnregisterMimeFilter;
        public Option CreateBinding;
        public Option SetSessionOption;
        public Option GetSessionOption;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetSession
    {
        public IInternetSessionVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetThreadSwitchVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Prepare;
        public Option Continue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetPriorityVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetPriority;
        public Option GetPriority;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetProtocolInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ParseUrl;
        public Option CombineUrl;
        public Option CompareUrl;
        public Option QueryInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetSecurityMgrSiteVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWindow;
        public Option EnableModeless;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetSecurityManagerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetSecuritySite;
        public Option GetSecuritySite;
        public Option MapUrlToZone;
        public Option GetSecurityId;
        public Option ProcessUrlAction;
        public Option QueryCustomPolicy;
        public Option SetZoneMapping;
        public Option GetZoneMappings;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetSecurityManager
    {
        public IInternetSecurityManagerVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetSecurityManagerExVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetSecuritySite;
        public Option GetSecuritySite;
        public Option MapUrlToZone;
        public Option GetSecurityId;
        public Option ProcessUrlAction;
        public Option QueryCustomPolicy;
        public Option SetZoneMapping;
        public Option GetZoneMappings;
        public Option ProcessUrlActionEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetSecurityManagerEx2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option SetSecuritySite;
        public Option GetSecuritySite;
        public Option MapUrlToZone;
        public Option GetSecurityId;
        public Option ProcessUrlAction;
        public Option QueryCustomPolicy;
        public Option SetZoneMapping;
        public Option GetZoneMappings;
        public Option ProcessUrlActionEx;
        public Option MapUrlToZoneEx2;
        public Option ProcessUrlActionEx2;
        public Option GetSecurityIdEx2;
        public Option QueryCustomPolicyEx2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetSecurityManagerEx2
    {
        public IInternetSecurityManagerEx2Vtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IZoneIdentifierVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetId;
        public Option SetId;
        public Option Remove;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IZoneIdentifier2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetId;
        public Option SetId;
        public Option Remove;
        public Option GetLastWriterPackageFamilyName;
        public Option SetLastWriterPackageFamilyName;
        public Option RemoveLastWriterPackageFamilyName;
        public Option GetAppZoneId;
        public Option SetAppZoneId;
        public Option RemoveAppZoneId;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetHostSecurityManagerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetSecurityId;
        public Option ProcessUrlAction;
        public Option QueryCustomPolicy;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetZoneManagerVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetZoneAttributes;
        public Option SetZoneAttributes;
        public Option GetZoneCustomPolicy;
        public Option SetZoneCustomPolicy;
        public Option GetZoneActionPolicy;
        public Option SetZoneActionPolicy;
        public Option PromptAction;
        public Option LogAction;
        public Option CreateZoneEnumerator;
        public Option GetZoneAt;
        public Option DestroyZoneEnumerator;
        public Option CopyTemplatePoliciesToZone;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetZoneManager
    {
        public IInternetZoneManagerVtbl* lpVtbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetZoneManagerExVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetZoneAttributes;
        public Option SetZoneAttributes;
        public Option GetZoneCustomPolicy;
        public Option SetZoneCustomPolicy;
        public Option GetZoneActionPolicy;
        public Option SetZoneActionPolicy;
        public Option PromptAction;
        public Option LogAction;
        public Option CreateZoneEnumerator;
        public Option GetZoneAt;
        public Option DestroyZoneEnumerator;
        public Option CopyTemplatePoliciesToZone;
        public Option GetZoneActionPolicyEx;
        public Option SetZoneActionPolicyEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IInternetZoneManagerEx2Vtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetZoneAttributes;
        public Option SetZoneAttributes;
        public Option GetZoneCustomPolicy;
        public Option SetZoneCustomPolicy;
        public Option GetZoneActionPolicy;
        public Option SetZoneActionPolicy;
        public Option PromptAction;
        public Option LogAction;
        public Option CreateZoneEnumerator;
        public Option GetZoneAt;
        public Option DestroyZoneEnumerator;
        public Option CopyTemplatePoliciesToZone;
        public Option GetZoneActionPolicyEx;
        public Option SetZoneActionPolicyEx;
        public Option GetZoneAttributesEx;
        public Option GetZoneSecurityState;
        public Option GetIESecurityState;
        public Option FixUnsecureSettings;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _tagSOFTDISTINFO
    {
        public UInt32 cbSize;
        public UInt32 dwFlags;
        public UInt32 dwAdState;
        public ushort szTitle;
        public ushort szAbstract;
        public ushort szHREF;
        public UInt32 dwInstalledVersionMS;
        public UInt32 dwInstalledVersionLS;
        public UInt32 dwUpdateVersionMS;
        public UInt32 dwUpdateVersionLS;
        public UInt32 dwAdvertisedVersionMS;
        public UInt32 dwAdvertisedVersionLS;
        public UInt32 dwReserved;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ISoftDistExtVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option ProcessSoftDist;
        public Option GetFirstCodeBase;
        public Option GetNextCodeBase;
        public Option AsyncInstallDistributionUnit;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct ICatalogFileInfoVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetCatalogFile;
        public Option GetJavaTrust;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IDataFilterVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option DoEncode;
        public Option DoDecode;
        public Option SetEncodingLevel;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IEncodingFilterFactoryVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option FindBestFilter;
        public Option GetDefaultFilter;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _tagHIT_LOGGING_INFO
    {
        public UInt32 dwStructSize;
        public byte lpszLoggedUrlName;
        public _SYSTEMTIME StartTime;
        public _SYSTEMTIME EndTime;
        public byte lpszExtendedInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IWrappedProtocolVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetWrapperCode;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IGetBindHandleVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetBindHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindCallbackRedirectVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option Redirect;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IBindHttpSecurityVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetIgnoreCertMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSERIALIZEDPROPERTYVALUE
    {
        public UInt32 dwType;
        public fixed byte rgb[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct NUMPARSE
    {
        public int cDig;
        public UInt32 dwInFlags;
        public UInt32 dwOutFlags;
        public int cchUsed;
        public int nBaseShift;
        public int nPwr10;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct UDATE
    {
        public _SYSTEMTIME st;
        public ushort wDayOfYear;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPARAMDATA
    {
        public ushort* szName;
        public ushort vt;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagMETHODDATA
    {
        public ushort* szName;
        public tagPARAMDATA* ppdata;
        public Int32 dispid;
        public uint iMeth;
        public tagCALLCONV cc;
        public uint cArgs;
        public ushort wFlags;
        public ushort vtReturn;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagINTERFACEDATA
    {
        public tagMETHODDATA* pmethdata;
        public uint cMembers;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _OLESTREAM
    {
        public OLESTREAMVTBL* lpstbl;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagOFNA
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public HINSTANCE__* hInstance;
        public byte lpstrFilter;
        public byte lpstrCustomFilter;
        public UInt32 nMaxCustFilter;
        public UInt32 nFilterIndex;
        public byte lpstrFile;
        public UInt32 nMaxFile;
        public byte lpstrFileTitle;
        public UInt32 nMaxFileTitle;
        public byte lpstrInitialDir;
        public byte lpstrTitle;
        public UInt32 Flags;
        public ushort nFileOffset;
        public ushort nFileExtension;
        public byte lpstrDefExt;
        public long lCustData;
        public Option lpfnHook;
        public byte lpTemplateName;
        public void* pvReserved;
        public UInt32 dwReserved;
        public UInt32 FlagsEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagOFNW
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public HINSTANCE__* hInstance;
        public ushort lpstrFilter;
        public ushort lpstrCustomFilter;
        public UInt32 nMaxCustFilter;
        public UInt32 nFilterIndex;
        public ushort lpstrFile;
        public UInt32 nMaxFile;
        public ushort lpstrFileTitle;
        public UInt32 nMaxFileTitle;
        public ushort lpstrInitialDir;
        public ushort lpstrTitle;
        public UInt32 Flags;
        public ushort nFileOffset;
        public ushort nFileExtension;
        public ushort lpstrDefExt;
        public long lCustData;
        public Option lpfnHook;
        public ushort lpTemplateName;
        public void* pvReserved;
        public UInt32 dwReserved;
        public UInt32 FlagsEx;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCHOOSECOLORA
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public HWND__* hInstance;
        public UInt32 rgbResult;
        public UInt32* lpCustColors;
        public UInt32 Flags;
        public long lCustData;
        public Option lpfnHook;
        public byte lpTemplateName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCHOOSECOLORW
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public HWND__* hInstance;
        public UInt32 rgbResult;
        public UInt32* lpCustColors;
        public UInt32 Flags;
        public long lCustData;
        public Option lpfnHook;
        public ushort lpTemplateName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagFINDREPLACEA
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public HINSTANCE__* hInstance;
        public UInt32 Flags;
        public byte lpstrFindWhat;
        public byte lpstrReplaceWith;
        public ushort wFindWhatLen;
        public ushort wReplaceWithLen;
        public long lCustData;
        public Option lpfnHook;
        public byte lpTemplateName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagFINDREPLACEW
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public HINSTANCE__* hInstance;
        public UInt32 Flags;
        public ushort lpstrFindWhat;
        public ushort lpstrReplaceWith;
        public ushort wFindWhatLen;
        public ushort wReplaceWithLen;
        public long lCustData;
        public Option lpfnHook;
        public ushort lpTemplateName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPDA
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public void* hDevMode;
        public void* hDevNames;
        public HDC__* hDC;
        public UInt32 Flags;
        public ushort nFromPage;
        public ushort nToPage;
        public ushort nMinPage;
        public ushort nMaxPage;
        public ushort nCopies;
        public HINSTANCE__* hInstance;
        public long lCustData;
        public Option lpfnPrintHook;
        public Option lpfnSetupHook;
        public byte lpPrintTemplateName;
        public byte lpSetupTemplateName;
        public void* hPrintTemplate;
        public void* hSetupTemplate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPDW
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public void* hDevMode;
        public void* hDevNames;
        public HDC__* hDC;
        public UInt32 Flags;
        public ushort nFromPage;
        public ushort nToPage;
        public ushort nMinPage;
        public ushort nMaxPage;
        public ushort nCopies;
        public HINSTANCE__* hInstance;
        public long lCustData;
        public Option lpfnPrintHook;
        public Option lpfnSetupHook;
        public ushort lpPrintTemplateName;
        public ushort lpSetupTemplateName;
        public void* hPrintTemplate;
        public void* hSetupTemplate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPrintDialogCallbackVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option InitDone;
        public Option SelectionChange;
        public Option HandleMessage;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct IPrintDialogServicesVtbl
    {
        public Option QueryInterface;
        public Option AddRef;
        public Option Release;
        public Option GetCurrentDevMode;
        public Option GetCurrentPrinterName;
        public Option GetCurrentPortName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPDEXA
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public void* hDevMode;
        public void* hDevNames;
        public HDC__* hDC;
        public UInt32 Flags;
        public UInt32 Flags2;
        public UInt32 ExclusionFlags;
        public UInt32 nPageRanges;
        public UInt32 nMaxPageRanges;
        public PRINTPAGERANGE* lpPageRanges;
        public UInt32 nMinPage;
        public UInt32 nMaxPage;
        public UInt32 nCopies;
        public HINSTANCE__* hInstance;
        public byte lpPrintTemplateName;
        public IUnknown* lpCallback;
        public UInt32 nPropertyPages;
        public _PSP** lphPropertyPages;
        public UInt32 nStartPage;
        public UInt32 dwResultAction;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPDEXW
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public void* hDevMode;
        public void* hDevNames;
        public HDC__* hDC;
        public UInt32 Flags;
        public UInt32 Flags2;
        public UInt32 ExclusionFlags;
        public UInt32 nPageRanges;
        public UInt32 nMaxPageRanges;
        public PRINTPAGERANGE* lpPageRanges;
        public UInt32 nMinPage;
        public UInt32 nMaxPage;
        public UInt32 nCopies;
        public HINSTANCE__* hInstance;
        public ushort lpPrintTemplateName;
        public IUnknown* lpCallback;
        public UInt32 nPropertyPages;
        public _PSP** lphPropertyPages;
        public UInt32 nStartPage;
        public UInt32 dwResultAction;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPSDA
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public void* hDevMode;
        public void* hDevNames;
        public UInt32 Flags;
        public tagPOINT ptPaperSize;
        public tagRECT rtMinMargin;
        public tagRECT rtMargin;
        public HINSTANCE__* hInstance;
        public long lCustData;
        public Option lpfnPageSetupHook;
        public Option lpfnPagePaintHook;
        public byte lpPageSetupTemplateName;
        public void* hPageSetupTemplate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagPSDW
    {
        public UInt32 lStructSize;
        public HWND__* hwndOwner;
        public void* hDevMode;
        public void* hDevNames;
        public UInt32 Flags;
        public tagPOINT ptPaperSize;
        public tagRECT rtMinMargin;
        public tagRECT rtMargin;
        public HINSTANCE__* hInstance;
        public long lCustData;
        public Option lpfnPageSetupHook;
        public Option lpfnPagePaintHook;
        public ushort lpPageSetupTemplateName;
        public void* hPageSetupTemplate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct SERVICE_TRIGGER_CUSTOM_STATE_ID
    {
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ Data[2];
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1
    {
        [FieldOffset(0)]
        public SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        [FieldOffset(0)]
        public _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1 s;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM__bindgen_ty_1__bindgen_ty_1
    {
        public UInt32 DataOffset;
        public fixed byte Data[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SC_ACTION
    {
        public _SC_ACTION_TYPE Type;
        public UInt32 Delay;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
    {
        public UInt32 dwDataType;
        public UInt32 cbData;
        public byte pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SERVICE_TRIGGER
    {
        public UInt32 dwTriggerType;
        public UInt32 dwAction;
        public _GUID* pTriggerSubtype;
        public UInt32 cDataItems;
        public _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM* pDataItems;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct SC_HANDLE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct SERVICE_STATUS_HANDLE__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SERVICE_STATUS
    {
        public UInt32 dwServiceType;
        public UInt32 dwCurrentState;
        public UInt32 dwControlsAccepted;
        public UInt32 dwWin32ExitCode;
        public UInt32 dwServiceSpecificExitCode;
        public UInt32 dwCheckPoint;
        public UInt32 dwWaitHint;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SERVICE_STATUS_PROCESS
    {
        public UInt32 dwServiceType;
        public UInt32 dwCurrentState;
        public UInt32 dwControlsAccepted;
        public UInt32 dwWin32ExitCode;
        public UInt32 dwServiceSpecificExitCode;
        public UInt32 dwCheckPoint;
        public UInt32 dwWaitHint;
        public UInt32 dwProcessId;
        public UInt32 dwServiceFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ENUM_SERVICE_STATUSA
    {
        public byte lpServiceName;
        public byte lpDisplayName;
        public _SERVICE_STATUS ServiceStatus;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ENUM_SERVICE_STATUSW
    {
        public ushort lpServiceName;
        public ushort lpDisplayName;
        public _SERVICE_STATUS ServiceStatus;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _QUERY_SERVICE_LOCK_STATUSA
    {
        public UInt32 fIsLocked;
        public byte lpLockOwner;
        public UInt32 dwLockDuration;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _QUERY_SERVICE_LOCK_STATUSW
    {
        public UInt32 fIsLocked;
        public ushort lpLockOwner;
        public UInt32 dwLockDuration;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _QUERY_SERVICE_CONFIGA
    {
        public UInt32 dwServiceType;
        public UInt32 dwStartType;
        public UInt32 dwErrorControl;
        public byte lpBinaryPathName;
        public byte lpLoadOrderGroup;
        public UInt32 dwTagId;
        public byte lpDependencies;
        public byte lpServiceStartName;
        public byte lpDisplayName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _QUERY_SERVICE_CONFIGW
    {
        public UInt32 dwServiceType;
        public UInt32 dwStartType;
        public UInt32 dwErrorControl;
        public ushort lpBinaryPathName;
        public ushort lpLoadOrderGroup;
        public UInt32 dwTagId;
        public ushort lpDependencies;
        public ushort lpServiceStartName;
        public ushort lpDisplayName;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SERVICE_TABLE_ENTRYA
    {
        public byte lpServiceName;
        public Option lpServiceProc;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SERVICE_TABLE_ENTRYW
    {
        public ushort lpServiceName;
        public Option lpServiceProc;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SC_NOTIFICATION_REGISTRATION
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct HIMC__
    {
        public int unused;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCOMPOSITIONFORM
    {
        public UInt32 dwStyle;
        public tagPOINT ptCurrentPos;
        public tagRECT rcArea;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCANDIDATEFORM
    {
        public UInt32 dwIndex;
        public UInt32 dwStyle;
        public tagPOINT ptCurrentPos;
        public tagRECT rcArea;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagCANDIDATELIST
    {
        public UInt32 dwSize;
        public UInt32 dwStyle;
        public UInt32 dwCount;
        public UInt32 dwSelection;
        public UInt32 dwPageStart;
        public UInt32 dwPageSize;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ dwOffset[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSTYLEBUFA
    {
        public UInt32 dwStyle;
        public fixed byte szDescription[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagSTYLEBUFW
    {
        public UInt32 dwStyle;
        public fixed ushort szDescription[32];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagIMEMENUITEMINFOA
    {
        public uint cbSize;
        public uint fType;
        public uint fState;
        public uint wID;
        public HBITMAP__* hbmpChecked;
        public HBITMAP__* hbmpUnchecked;
        public UInt32 dwItemData;
        public fixed byte szString[80];
        public HBITMAP__* hbmpItem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tagIMEMENUITEMINFOW
    {
        public uint cbSize;
        public uint fType;
        public uint fState;
        public uint wID;
        public HBITMAP__* hbmpChecked;
        public HBITMAP__* hbmpUnchecked;
        public UInt32 dwItemData;
        public fixed ushort szString[80];
        public HBITMAP__* hbmpItem;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct in_addr
    {
        public in_addr__bindgen_ty_1 S_un;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct in_addr__bindgen_ty_1
    {
        [FieldOffset(0)]
        public in_addr__bindgen_ty_1__bindgen_ty_1 S_un_b;
        [FieldOffset(0)]
        public in_addr__bindgen_ty_1__bindgen_ty_2 S_un_w;
        [FieldOffset(0)]
        public UInt32 S_addr;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct in_addr__bindgen_ty_1__bindgen_ty_1
    {
        public byte s_b1;
        public byte s_b2;
        public byte s_b3;
        public byte s_b4;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct in_addr__bindgen_ty_1__bindgen_ty_2
    {
        public ushort s_w1;
        public ushort s_w2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct sockaddr
    {
        public ushort sa_family;
        public fixed byte sa_data[14];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SOCKET_ADDRESS
    {
        public sockaddr* lpSockaddr;
        public int iSockaddrLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _SOCKET_ADDRESS_LIST
    {
        public int iAddressCount;
        public fixed byte/* _SOCKET_ADDRESS, this length is invalid so must keep pointer and can't edit from C# */ Address[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _CSADDR_INFO
    {
        public _SOCKET_ADDRESS LocalAddr;
        public _SOCKET_ADDRESS RemoteAddr;
        public int iSocketType;
        public int iProtocol;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct sockaddr_storage
    {
        public ushort ss_family;
        public fixed byte __ss_pad1[6];
        public long __ss_align;
        public fixed byte __ss_pad2[112];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct SCOPE_ID
    {
        public SCOPE_ID__bindgen_ty_1 __bindgen_anon_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct SCOPE_ID__bindgen_ty_1
    {
        [FieldOffset(0)]
        public SCOPE_ID__bindgen_ty_1__bindgen_ty_1 __bindgen_anon_1;
        [FieldOffset(0)]
        public UInt32 Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct SCOPE_ID__bindgen_ty_1__bindgen_ty_1
    {
        public fixed uint _bitfield_align_1[1];
        public __BindgenBitfieldUnit _bitfield_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct sockaddr_in
    {
        public ushort sin_family;
        public ushort sin_port;
        public in_addr sin_addr;
        public fixed byte sin_zero[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSABUF
    {
        public UInt32 len;
        public byte* buf;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAMSG
    {
        public sockaddr* name;
        public int namelen;
        public _WSABUF* lpBuffers;
        public UInt32 dwBufferCount;
        public _WSABUF Control;
        public UInt32 dwFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct addrinfo
    {
        public int ai_flags;
        public int ai_family;
        public int ai_socktype;
        public int ai_protocol;
        public UIntPtr ai_addrlen;
        public byte* ai_canonname;
        public sockaddr* ai_addr;
        public addrinfo* ai_next;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct addrinfoW
    {
        public int ai_flags;
        public int ai_family;
        public int ai_socktype;
        public int ai_protocol;
        public UIntPtr ai_addrlen;
        public ushort ai_canonname;
        public sockaddr* ai_addr;
        public addrinfoW* ai_next;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct addrinfoexA
    {
        public int ai_flags;
        public int ai_family;
        public int ai_socktype;
        public int ai_protocol;
        public UIntPtr ai_addrlen;
        public byte* ai_canonname;
        public sockaddr* ai_addr;
        public void* ai_blob;
        public UIntPtr ai_bloblen;
        public _GUID ai_provider;
        public addrinfoexA* ai_next;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct addrinfoexW
    {
        public int ai_flags;
        public int ai_family;
        public int ai_socktype;
        public int ai_protocol;
        public UIntPtr ai_addrlen;
        public ushort ai_canonname;
        public sockaddr* ai_addr;
        public void* ai_blob;
        public UIntPtr ai_bloblen;
        public _GUID ai_provider;
        public addrinfoexW* ai_next;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct addrinfoex2A
    {
        public int ai_flags;
        public int ai_family;
        public int ai_socktype;
        public int ai_protocol;
        public UIntPtr ai_addrlen;
        public byte* ai_canonname;
        public sockaddr* ai_addr;
        public void* ai_blob;
        public UIntPtr ai_bloblen;
        public _GUID ai_provider;
        public addrinfoex2A* ai_next;
        public int ai_version;
        public byte* ai_fqdn;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct addrinfoex2W
    {
        public int ai_flags;
        public int ai_family;
        public int ai_socktype;
        public int ai_protocol;
        public UIntPtr ai_addrlen;
        public ushort ai_canonname;
        public sockaddr* ai_addr;
        public void* ai_blob;
        public UIntPtr ai_bloblen;
        public _GUID ai_provider;
        public addrinfoex2W* ai_next;
        public int ai_version;
        public ushort ai_fqdn;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct addrinfoex3
    {
        public int ai_flags;
        public int ai_family;
        public int ai_socktype;
        public int ai_protocol;
        public UIntPtr ai_addrlen;
        public ushort ai_canonname;
        public sockaddr* ai_addr;
        public void* ai_blob;
        public UIntPtr ai_bloblen;
        public _GUID ai_provider;
        public addrinfoex3* ai_next;
        public int ai_version;
        public ushort ai_fqdn;
        public int ai_interfaceindex;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct addrinfoex4
    {
        public int ai_flags;
        public int ai_family;
        public int ai_socktype;
        public int ai_protocol;
        public UIntPtr ai_addrlen;
        public ushort ai_canonname;
        public sockaddr* ai_addr;
        public void* ai_blob;
        public UIntPtr ai_bloblen;
        public _GUID* ai_provider;
        public addrinfoex4* ai_next;
        public int ai_version;
        public ushort ai_fqdn;
        public int ai_interfaceindex;
        public void* ai_resolutionhandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct fd_set
    {
        public uint fd_count;
        public fixed ulong fd_array[64];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct timeval
    {
        public Int32 tv_sec;
        public Int32 tv_usec;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct hostent
    {
        public byte* h_name;
        public byte** h_aliases;
        public short h_addrtype;
        public short h_length;
        public byte** h_addr_list;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct servent
    {
        public byte* s_name;
        public byte** s_aliases;
        public byte* s_proto;
        public short s_port;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct protoent
    {
        public byte* p_name;
        public byte** p_aliases;
        public short p_proto;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct WSAData
    {
        public ushort wVersion;
        public ushort wHighVersion;
        public ushort iMaxSockets;
        public ushort iMaxUdpDg;
        public byte* lpVendorInfo;
        public fixed byte szDescription[257];
        public fixed byte szSystemStatus[129];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _flowspec
    {
        public UInt32 TokenRate;
        public UInt32 TokenBucketSize;
        public UInt32 PeakBandwidth;
        public UInt32 Latency;
        public UInt32 DelayVariation;
        public UInt32 ServiceType;
        public UInt32 MaxSduSize;
        public UInt32 MinimumPolicedSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct QOS_OBJECT_HDR
    {
        public UInt32 ObjectType;
        public UInt32 ObjectLength;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _QualityOfService
    {
        public _flowspec SendingFlowspec;
        public _flowspec ReceivingFlowspec;
        public _WSABUF ProviderSpecific;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSANETWORKEVENTS
    {
        public Int32 lNetworkEvents;
        public fixed int iErrorCode[10];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAPROTOCOLCHAIN
    {
        public int ChainLen;
        public fixed byte/* UInt32, this length is invalid so must keep pointer and can't edit from C# */ ChainEntries[7];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAPROTOCOL_INFOA
    {
        public UInt32 dwServiceFlags1;
        public UInt32 dwServiceFlags2;
        public UInt32 dwServiceFlags3;
        public UInt32 dwServiceFlags4;
        public UInt32 dwProviderFlags;
        public _GUID ProviderId;
        public UInt32 dwCatalogEntryId;
        public _WSAPROTOCOLCHAIN ProtocolChain;
        public int iVersion;
        public int iAddressFamily;
        public int iMaxSockAddr;
        public int iMinSockAddr;
        public int iSocketType;
        public int iProtocol;
        public int iProtocolMaxOffset;
        public int iNetworkByteOrder;
        public int iSecurityScheme;
        public UInt32 dwMessageSize;
        public UInt32 dwProviderReserved;
        public fixed byte szProtocol[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAPROTOCOL_INFOW
    {
        public UInt32 dwServiceFlags1;
        public UInt32 dwServiceFlags2;
        public UInt32 dwServiceFlags3;
        public UInt32 dwServiceFlags4;
        public UInt32 dwProviderFlags;
        public _GUID ProviderId;
        public UInt32 dwCatalogEntryId;
        public _WSAPROTOCOLCHAIN ProtocolChain;
        public int iVersion;
        public int iAddressFamily;
        public int iMaxSockAddr;
        public int iMinSockAddr;
        public int iSocketType;
        public int iProtocol;
        public int iProtocolMaxOffset;
        public int iNetworkByteOrder;
        public int iSecurityScheme;
        public UInt32 dwMessageSize;
        public UInt32 dwProviderReserved;
        public fixed ushort szProtocol[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSACOMPLETION
    {
        public _WSACOMPLETIONTYPE Type;
        public _WSACOMPLETION__bindgen_ty_1 Parameters;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _WSACOMPLETION__bindgen_ty_1
    {
        [FieldOffset(0)]
        public _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1 WindowMessage;
        [FieldOffset(0)]
        public _WSACOMPLETION__bindgen_ty_1__bindgen_ty_2 Event;
        [FieldOffset(0)]
        public _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3 Apc;
        [FieldOffset(0)]
        public _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4 Port;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSACOMPLETION__bindgen_ty_1__bindgen_ty_1
    {
        public HWND__* hWnd;
        public uint uMsg;
        public ulong context;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSACOMPLETION__bindgen_ty_1__bindgen_ty_2
    {
        public _OVERLAPPED* lpOverlapped;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSACOMPLETION__bindgen_ty_1__bindgen_ty_3
    {
        public _OVERLAPPED* lpOverlapped;
        public Option lpfnCompletionProc;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSACOMPLETION__bindgen_ty_1__bindgen_ty_4
    {
        public _OVERLAPPED* lpOverlapped;
        public void* hPort;
        public ulong Key;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _AFPROTOCOLS
    {
        public int iAddressFamily;
        public int iProtocol;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAVersion
    {
        public UInt32 dwVersion;
        public _WSAEcomparator ecHow;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAQuerySetA
    {
        public UInt32 dwSize;
        public byte lpszServiceInstanceName;
        public _GUID lpServiceClassId;
        public _WSAVersion* lpVersion;
        public byte lpszComment;
        public UInt32 dwNameSpace;
        public _GUID lpNSProviderId;
        public byte lpszContext;
        public UInt32 dwNumberOfProtocols;
        public _AFPROTOCOLS* lpafpProtocols;
        public byte lpszQueryString;
        public UInt32 dwNumberOfCsAddrs;
        public _CSADDR_INFO* lpcsaBuffer;
        public UInt32 dwOutputFlags;
        public tagBLOB* lpBlob;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAQuerySetW
    {
        public UInt32 dwSize;
        public ushort lpszServiceInstanceName;
        public _GUID lpServiceClassId;
        public _WSAVersion* lpVersion;
        public ushort lpszComment;
        public UInt32 dwNameSpace;
        public _GUID lpNSProviderId;
        public ushort lpszContext;
        public UInt32 dwNumberOfProtocols;
        public _AFPROTOCOLS* lpafpProtocols;
        public ushort lpszQueryString;
        public UInt32 dwNumberOfCsAddrs;
        public _CSADDR_INFO* lpcsaBuffer;
        public UInt32 dwOutputFlags;
        public tagBLOB* lpBlob;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSANSClassInfoA
    {
        public byte lpszName;
        public UInt32 dwNameSpace;
        public UInt32 dwValueType;
        public UInt32 dwValueSize;
        public void* lpValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSANSClassInfoW
    {
        public ushort lpszName;
        public UInt32 dwNameSpace;
        public UInt32 dwValueType;
        public UInt32 dwValueSize;
        public void* lpValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAServiceClassInfoA
    {
        public _GUID lpServiceClassId;
        public byte lpszServiceClassName;
        public UInt32 dwCount;
        public _WSANSClassInfoA* lpClassInfos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSAServiceClassInfoW
    {
        public _GUID lpServiceClassId;
        public ushort lpszServiceClassName;
        public UInt32 dwCount;
        public _WSANSClassInfoW* lpClassInfos;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSANAMESPACE_INFOA
    {
        public _GUID NSProviderId;
        public UInt32 dwNameSpace;
        public int fActive;
        public UInt32 dwVersion;
        public byte lpszIdentifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSANAMESPACE_INFOW
    {
        public _GUID NSProviderId;
        public UInt32 dwNameSpace;
        public int fActive;
        public UInt32 dwVersion;
        public ushort lpszIdentifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSANAMESPACE_INFOEXA
    {
        public _GUID NSProviderId;
        public UInt32 dwNameSpace;
        public int fActive;
        public UInt32 dwVersion;
        public byte lpszIdentifier;
        public tagBLOB ProviderSpecific;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _WSANAMESPACE_INFOEXW
    {
        public _GUID NSProviderId;
        public UInt32 dwNameSpace;
        public int fActive;
        public UInt32 dwVersion;
        public ushort lpszIdentifier;
        public tagBLOB ProviderSpecific;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct pollfd
    {
        public ulong fd;
        public short events;
        public short revents;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct in6_addr
    {
        public in6_addr__bindgen_ty_1 u;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct in6_addr__bindgen_ty_1
    {
        [FieldOffset(0)]
        public fixed byte Byte[16];
        [FieldOffset(0)]
        public fixed ushort Word[8];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct sockaddr_in6_old
    {
        public short sin6_family;
        public ushort sin6_port;
        public UInt32 sin6_flowinfo;
        public in6_addr sin6_addr;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct sockaddr_gen
    {
        [FieldOffset(0)]
        public sockaddr Address;
        [FieldOffset(0)]
        public sockaddr_in AddressIn;
        [FieldOffset(0)]
        public sockaddr_in6_old AddressIn6;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct sockaddr_in6__bindgen_ty_1
    {
        [FieldOffset(0)]
        public UInt32 sin6_scope_id;
        [FieldOffset(0)]
        public SCOPE_ID sin6_scope_struct;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct _SOCKADDR_INET
    {
        [FieldOffset(0)]
        public sockaddr_in Ipv4;
        [FieldOffset(0)]
        public SOCKADDR_IN6_LH Ipv6;
        [FieldOffset(0)]
        public ushort si_family;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct in_pktinfo
    {
        public in_addr ipi_addr;
        public UInt32 ipi_ifindex;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct in6_pktinfo
    {
        public in6_addr ipi6_addr;
        public UInt32 ipi6_ifindex;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct tm
    {
        public int tm_sec;
        public int tm_min;
        public int tm_hour;
        public int tm_mday;
        public int tm_mon;
        public int tm_year;
        public int tm_wday;
        public int tm_yday;
        public int tm_isdst;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _timespec32
    {
        public Int32 tv_sec;
        public Int32 tv_nsec;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _timespec64
    {
        public long tv_sec;
        public Int32 tv_nsec;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct timespec
    {
        public long tv_sec;
        public Int32 tv_nsec;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_config
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_conn
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_recv_info
    {
        public sockaddr* from;
        public int from_len;
        public sockaddr* to;
        public int to_len;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_send_info
    {
        public sockaddr_storage from;
        public int from_len;
        public sockaddr_storage to;
        public int to_len;
        public timespec at;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_stream_iter
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_stats
    {
        public UIntPtr recv;
        public UIntPtr sent;
        public UIntPtr lost;
        public UIntPtr retrans;
        public ulong sent_bytes;
        public ulong recv_bytes;
        public ulong lost_bytes;
        public ulong stream_retrans_bytes;
        public UIntPtr paths_count;
        public ulong peer_max_idle_timeout;
        public ulong peer_max_udp_payload_size;
        public ulong peer_initial_max_data;
        public ulong peer_initial_max_stream_data_bidi_local;
        public ulong peer_initial_max_stream_data_bidi_remote;
        public ulong peer_initial_max_stream_data_uni;
        public ulong peer_initial_max_streams_bidi;
        public ulong peer_initial_max_streams_uni;
        public ulong peer_ack_delay_exponent;
        public ulong peer_max_ack_delay;
        public bool peer_disable_active_migration;
        public ulong peer_active_conn_id_limit;
        public long peer_max_datagram_frame_size;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_path_stats
    {
        public sockaddr_storage local_addr;
        public int local_addr_len;
        public sockaddr_storage peer_addr;
        public int peer_addr_len;
        public long validation_state;
        public bool active;
        public UIntPtr recv;
        public UIntPtr sent;
        public UIntPtr lost;
        public UIntPtr retrans;
        public ulong rtt;
        public UIntPtr cwnd;
        public ulong sent_bytes;
        public ulong recv_bytes;
        public ulong lost_bytes;
        public ulong stream_retrans_bytes;
        public UIntPtr pmtu;
        public ulong delivery_rate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_h3_config
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_h3_conn
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_h3_event
    {
        public fixed byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_h3_header
    {
        public byte* name;
        public UIntPtr name_len;
        public byte* value;
        public UIntPtr value_len;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct quiche_h3_priority
    {
        public byte urgency;
        public bool incremental;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct __crt_locale_data
    {
        public byte _address;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct __crt_multibyte_data
    {
        public byte _address;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct _ACTIVATION_CONTEXT
    {
        public byte _address;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct NET_ADDRESS_INFO_
    {
        public byte _address;
    }

    
}
    