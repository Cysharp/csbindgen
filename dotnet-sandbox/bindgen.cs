// <auto-generated>
// This code is generated via csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
using System;
using System.Runtime.InteropServices;

namespace Csbindgen
{
    using LZ4F_blockChecksum_t = Int32;
    using LZ4F_blockMode_t = Int32;
    using LZ4F_blockSizeID_t = Int32;
    using LZ4F_cctx = LZ4F_cctx_s;
    using LZ4F_compressionContext_t = LZ4F_cctx_s;
    using LZ4F_contentChecksum_t = Int32;
    using LZ4F_dctx = LZ4F_dctx_s;
    using LZ4F_decompressionContext_t = LZ4F_dctx_s;
    using LZ4F_errorCode_t = UIntPtr;
    using LZ4F_frameType_t = Int32;
    using LZ4_byte = Byte;
    using LZ4_i8 = SByte;
    using LZ4_streamDecode_t = LZ4_streamDecode_u;
    using LZ4_streamHC_t = LZ4_streamHC_u;
    using LZ4_stream_t = LZ4_stream_u;
    using LZ4_u16 = UInt16;
    using LZ4_u32 = UInt32;
    using XXH32_hash_t = UInt32;
    using XXH32_state_t = XXH32_state_s;
    using XXH64_hash_t = UInt64;
    using XXH64_state_t = XXH64_state_s;
    using XXH_errorcode = Int32;


    public static unsafe partial class NativeMethods
    {
        const string __DllName = "csbindgen_tests";

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_versionNumber();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Byte* csbindgen_LZ4_versionString();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_default(Byte* src, Byte* dst, Int32 srcSize, Int32 dstCapacity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_safe(Byte* src, Byte* dst, Int32 compressedSize, Int32 dstCapacity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressBound(Int32 inputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_fast(Byte* src, Byte* dst, Int32 srcSize, Int32 dstCapacity, Int32 acceleration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_sizeofState();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_fast_extState(void* state, Byte* src, Byte* dst, Int32 srcSize, Int32 dstCapacity, Int32 acceleration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_destSize(Byte* src, Byte* dst, Int32* srcSizePtr, Int32 targetDstSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_safe_partial(Byte* src, Byte* dst, Int32 srcSize, Int32 targetOutputSize, Int32 dstCapacity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4_stream_t* csbindgen_LZ4_createStream();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_freeStream(LZ4_stream_t* streamPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_LZ4_resetStream_fast(LZ4_stream_t* streamPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_loadDict(LZ4_stream_t* streamPtr, Byte* dictionary, Int32 dictSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_fast_continue(LZ4_stream_t* streamPtr, Byte* src, Byte* dst, Int32 srcSize, Int32 dstCapacity, Int32 acceleration);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_saveDict(LZ4_stream_t* streamPtr, Byte* safeBuffer, Int32 maxDictSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4_streamDecode_t* csbindgen_LZ4_createStreamDecode();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_freeStreamDecode(LZ4_streamDecode_t* LZ4_stream);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_setStreamDecode(LZ4_streamDecode_t* LZ4_streamDecode, Byte* dictionary, Int32 dictSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decoderRingBufferSize(Int32 maxBlockSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_safe_continue(LZ4_streamDecode_t* LZ4_streamDecode, Byte* src, Byte* dst, Int32 srcSize, Int32 dstCapacity);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_safe_usingDict(Byte* src, Byte* dst, Int32 srcSize, Int32 dstCapacity, Byte* dictStart, Int32 dictSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_safe_partial_usingDict(Byte* src, Byte* dst, Int32 compressedSize, Int32 targetOutputSize, Int32 maxOutputSize, Byte* dictStart, Int32 dictSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen___va_start(Byte** arg1);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen___security_init_cookie();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen___security_check_cookie(UIntPtr _StackCookie);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4_stream_t* csbindgen_LZ4_initStream(void* buffer, UIntPtr size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress(Byte* src, Byte* dest, Int32 srcSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_limitedOutput(Byte* src, Byte* dest, Int32 srcSize, Int32 maxOutputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_withState(void* state, Byte* source, Byte* dest, Int32 inputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_limitedOutput_withState(void* state, Byte* source, Byte* dest, Int32 inputSize, Int32 maxOutputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_continue(LZ4_stream_t* LZ4_streamPtr, Byte* source, Byte* dest, Int32 inputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_limitedOutput_continue(LZ4_stream_t* LZ4_streamPtr, Byte* source, Byte* dest, Int32 inputSize, Int32 maxOutputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_uncompress(Byte* source, Byte* dest, Int32 outputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_uncompress_unknownOutputSize(Byte* source, Byte* dest, Int32 isize_, Int32 maxOutputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* csbindgen_LZ4_create(Byte* inputBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_sizeofStreamState();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_resetStreamState(void* state, Byte* inputBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Byte* csbindgen_LZ4_slideInputBuffer(void* state);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_safe_withPrefix64k(Byte* src, Byte* dst, Int32 compressedSize, Int32 maxDstSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_fast_withPrefix64k(Byte* src, Byte* dst, Int32 originalSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_fast(Byte* src, Byte* dst, Int32 originalSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_fast_continue(LZ4_streamDecode_t* LZ4_streamDecode, Byte* src, Byte* dst, Int32 originalSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_decompress_fast_usingDict(Byte* src, Byte* dst, Int32 originalSize, Byte* dictStart, Int32 dictSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_LZ4_resetStream(LZ4_stream_t* streamPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_HC(Byte* src, Byte* dst, Int32 srcSize, Int32 dstCapacity, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_sizeofStateHC();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_HC_extStateHC(void* stateHC, Byte* src, Byte* dst, Int32 srcSize, Int32 maxDstSize, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_HC_destSize(void* stateHC, Byte* src, Byte* dst, Int32* srcSizePtr, Int32 targetDstSize, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4_streamHC_t* csbindgen_LZ4_createStreamHC();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_freeStreamHC(LZ4_streamHC_t* streamHCPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_LZ4_resetStreamHC_fast(LZ4_streamHC_t* streamHCPtr, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_loadDictHC(LZ4_streamHC_t* streamHCPtr, Byte* dictionary, Int32 dictSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_HC_continue(LZ4_streamHC_t* streamHCPtr, Byte* src, Byte* dst, Int32 srcSize, Int32 maxDstSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compress_HC_continue_destSize(LZ4_streamHC_t* LZ4_streamHCPtr, Byte* src, Byte* dst, Int32* srcSizePtr, Int32 targetDstSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_saveDictHC(LZ4_streamHC_t* streamHCPtr, Byte* safeBuffer, Int32 maxDictSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4_streamHC_t* csbindgen_LZ4_initStreamHC(void* buffer, UIntPtr size);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC(Byte* source, Byte* dest, Int32 inputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC_limitedOutput(Byte* source, Byte* dest, Int32 inputSize, Int32 maxOutputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC2(Byte* source, Byte* dest, Int32 inputSize, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC2_limitedOutput(Byte* source, Byte* dest, Int32 inputSize, Int32 maxOutputSize, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC_withStateHC(void* state, Byte* source, Byte* dest, Int32 inputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC_limitedOutput_withStateHC(void* state, Byte* source, Byte* dest, Int32 inputSize, Int32 maxOutputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC2_withStateHC(void* state, Byte* source, Byte* dest, Int32 inputSize, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC2_limitedOutput_withStateHC(void* state, Byte* source, Byte* dest, Int32 inputSize, Int32 maxOutputSize, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC_continue(LZ4_streamHC_t* LZ4_streamHCPtr, Byte* source, Byte* dest, Int32 inputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC_limitedOutput_continue(LZ4_streamHC_t* LZ4_streamHCPtr, Byte* source, Byte* dest, Int32 inputSize, Int32 maxOutputSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void* csbindgen_LZ4_createHC(Byte* inputBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_freeHC(void* LZ4HC_Data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Byte* csbindgen_LZ4_slideInputBufferHC(void* LZ4HC_Data);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC2_continue(void* LZ4HC_Data, Byte* source, Byte* dest, Int32 inputSize, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_compressHC2_limitedOutput_continue(void* LZ4HC_Data, Byte* source, Byte* dest, Int32 inputSize, Int32 maxOutputSize, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_sizeofStreamStateHC();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4_resetStreamStateHC(void* state, Byte* inputBuffer);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_LZ4_resetStreamHC(LZ4_streamHC_t* streamHCPtr, Int32 compressionLevel);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 csbindgen_LZ4F_isError(LZ4F_errorCode_t code);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Byte* csbindgen_LZ4F_getErrorName(LZ4F_errorCode_t code);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern Int32 csbindgen_LZ4F_compressionLevel_max();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_compressFrameBound(UIntPtr srcSize, LZ4F_preferences_t* preferencesPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_compressFrame(void* dstBuffer, UIntPtr dstCapacity, void* srcBuffer, UIntPtr srcSize, LZ4F_preferences_t* preferencesPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 csbindgen_LZ4F_getVersion();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4F_errorCode_t csbindgen_LZ4F_createCompressionContext(LZ4F_cctx** cctxPtr, UInt32 version);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4F_errorCode_t csbindgen_LZ4F_freeCompressionContext(LZ4F_cctx* cctx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_compressBegin(LZ4F_cctx* cctx, void* dstBuffer, UIntPtr dstCapacity, LZ4F_preferences_t* prefsPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_compressBound(UIntPtr srcSize, LZ4F_preferences_t* prefsPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_compressUpdate(LZ4F_cctx* cctx, void* dstBuffer, UIntPtr dstCapacity, void* srcBuffer, UIntPtr srcSize, LZ4F_compressOptions_t* cOptPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_flush(LZ4F_cctx* cctx, void* dstBuffer, UIntPtr dstCapacity, LZ4F_compressOptions_t* cOptPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_compressEnd(LZ4F_cctx* cctx, void* dstBuffer, UIntPtr dstCapacity, LZ4F_compressOptions_t* cOptPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4F_errorCode_t csbindgen_LZ4F_createDecompressionContext(LZ4F_dctx** dctxPtr, UInt32 version);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern LZ4F_errorCode_t csbindgen_LZ4F_freeDecompressionContext(LZ4F_dctx* dctx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_headerSize(void* src, UIntPtr srcSize);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_getFrameInfo(LZ4F_dctx* dctx, LZ4F_frameInfo_t* frameInfoPtr, void* srcBuffer, UIntPtr* srcSizePtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UIntPtr csbindgen_LZ4F_decompress(LZ4F_dctx* dctx, void* dstBuffer, UIntPtr* dstSizePtr, void* srcBuffer, UIntPtr* srcSizePtr, LZ4F_decompressOptions_t* dOptPtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_LZ4F_resetDecompressionContext(LZ4F_dctx* dctx);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern UInt32 csbindgen_XXH_versionNumber();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH32_hash_t csbindgen_XXH32(void* input, UIntPtr length, UInt32 seed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH32_state_t* csbindgen_XXH32_createState();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH_errorcode csbindgen_XXH32_freeState(XXH32_state_t* statePtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_XXH32_copyState(XXH32_state_t* dst_state, XXH32_state_t* src_state);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH_errorcode csbindgen_XXH32_reset(XXH32_state_t* statePtr, UInt32 seed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH_errorcode csbindgen_XXH32_update(XXH32_state_t* statePtr, void* input, UIntPtr length);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH32_hash_t csbindgen_XXH32_digest(XXH32_state_t* statePtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_XXH32_canonicalFromHash(XXH32_canonical_t* dst, XXH32_hash_t hash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH32_hash_t csbindgen_XXH32_hashFromCanonical(XXH32_canonical_t* src);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH64_hash_t csbindgen_XXH64(void* input, UIntPtr length, UInt64 seed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH64_state_t* csbindgen_XXH64_createState();

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH_errorcode csbindgen_XXH64_freeState(XXH64_state_t* statePtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_XXH64_copyState(XXH64_state_t* dst_state, XXH64_state_t* src_state);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH_errorcode csbindgen_XXH64_reset(XXH64_state_t* statePtr, UInt64 seed);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH_errorcode csbindgen_XXH64_update(XXH64_state_t* statePtr, void* input, UIntPtr length);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH64_hash_t csbindgen_XXH64_digest(XXH64_state_t* statePtr);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern void csbindgen_XXH64_canonicalFromHash(XXH64_canonical_t* dst, XXH64_hash_t hash);

        [DllImport(__DllName, CallingConvention = CallingConvention.Cdecl)]
        public static extern XXH64_hash_t csbindgen_XXH64_hashFromCanonical(XXH64_canonical_t* src);


    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4_stream_t_internal
    {
        public fixed LZ4_u32 hashTable[4096];
        public LZ4_byte* dictionary;
        public LZ4_stream_t_internal* dictCtx;
        public LZ4_u32 currentOffset;
        public LZ4_u32 tableType;
        public LZ4_u32 dictSize;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct LZ4_stream_u
    {
        [FieldOffset(0)]
        public fixed Byte minStateSize[16416];
        [FieldOffset(0)]
        public LZ4_stream_t_internal internal_donotuse;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4_streamDecode_t_internal
    {
        public LZ4_byte* externalDict;
        public LZ4_byte* prefixEnd;
        public UIntPtr extDictSize;
        public UIntPtr prefixSize;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct LZ4_streamDecode_u
    {
        [FieldOffset(0)]
        public fixed Byte minStateSize[32];
        [FieldOffset(0)]
        public LZ4_streamDecode_t_internal internal_donotuse;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4HC_CCtx_internal
    {
        public fixed LZ4_u32 hashTable[32768];
        public fixed LZ4_u16 chainTable[65536];
        public LZ4_byte* end;
        public LZ4_byte* prefixStart;
        public LZ4_byte* dictStart;
        public LZ4_u32 dictLimit;
        public LZ4_u32 lowLimit;
        public LZ4_u32 nextToUpdate;
        public Int16 compressionLevel;
        public LZ4_i8 favorDecSpeed;
        public LZ4_i8 dirty;
        public LZ4HC_CCtx_internal* dictCtx;
    }

    [StructLayout(LayoutKind.Explicit)]
    public unsafe struct LZ4_streamHC_u
    {
        [FieldOffset(0)]
        public fixed Byte minStateSize[262200];
        [FieldOffset(0)]
        public LZ4HC_CCtx_internal internal_donotuse;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4F_frameInfo_t
    {
        public LZ4F_blockSizeID_t blockSizeID;
        public LZ4F_blockMode_t blockMode;
        public LZ4F_contentChecksum_t contentChecksumFlag;
        public LZ4F_frameType_t frameType;
        public UInt64 contentSize;
        public UInt32 dictID;
        public LZ4F_blockChecksum_t blockChecksumFlag;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4F_preferences_t
    {
        public LZ4F_frameInfo_t frameInfo;
        public Int32 compressionLevel;
        public UInt32 autoFlush;
        public UInt32 favorDecSpeed;
        public fixed UInt32 reserved[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4F_cctx_s
    {
        public fixed Byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4F_compressOptions_t
    {
        public UInt32 stableSrc;
        public fixed UInt32 reserved[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4F_dctx_s
    {
        public fixed Byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct LZ4F_decompressOptions_t
    {
        public UInt32 stableDst;
        public UInt32 skipChecksums;
        public UInt32 reserved1;
        public UInt32 reserved0;
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct XXH32_state_s
    {
        public fixed Byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct XXH32_canonical_t
    {
        public fixed Byte digest[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct XXH64_state_s
    {
        public fixed Byte _unused[1];
    }

    [StructLayout(LayoutKind.Sequential)]
    public unsafe struct XXH64_canonical_t
    {
        public fixed Byte digest[8];
    }

    
}
    